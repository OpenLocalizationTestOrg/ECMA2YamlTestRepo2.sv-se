### YamlMime:ManagedReference
items:
- uid: System.Web.UI.WebControls.LinqDataSource
  id: LinqDataSource
  children:
  - System.Web.UI.WebControls.LinqDataSource.#ctor
  - System.Web.UI.WebControls.LinqDataSource.AutoGenerateOrderByClause
  - System.Web.UI.WebControls.LinqDataSource.AutoGenerateWhereClause
  - System.Web.UI.WebControls.LinqDataSource.AutoPage
  - System.Web.UI.WebControls.LinqDataSource.AutoSort
  - System.Web.UI.WebControls.LinqDataSource.ContextCreated
  - System.Web.UI.WebControls.LinqDataSource.ContextCreating
  - System.Web.UI.WebControls.LinqDataSource.ContextDisposing
  - System.Web.UI.WebControls.LinqDataSource.ContextTypeName
  - System.Web.UI.WebControls.LinqDataSource.CreateQueryableView
  - System.Web.UI.WebControls.LinqDataSource.CreateView
  - System.Web.UI.WebControls.LinqDataSource.Delete(System.Collections.IDictionary,System.Collections.IDictionary)
  - System.Web.UI.WebControls.LinqDataSource.Deleted
  - System.Web.UI.WebControls.LinqDataSource.DeleteParameters
  - System.Web.UI.WebControls.LinqDataSource.Deleting
  - System.Web.UI.WebControls.LinqDataSource.EnableDelete
  - System.Web.UI.WebControls.LinqDataSource.EnableInsert
  - System.Web.UI.WebControls.LinqDataSource.EnableObjectTracking
  - System.Web.UI.WebControls.LinqDataSource.EnableUpdate
  - System.Web.UI.WebControls.LinqDataSource.GroupBy
  - System.Web.UI.WebControls.LinqDataSource.GroupByParameters
  - System.Web.UI.WebControls.LinqDataSource.Insert(System.Collections.IDictionary)
  - System.Web.UI.WebControls.LinqDataSource.Inserted
  - System.Web.UI.WebControls.LinqDataSource.Inserting
  - System.Web.UI.WebControls.LinqDataSource.InsertParameters
  - System.Web.UI.WebControls.LinqDataSource.OnInit(System.EventArgs)
  - System.Web.UI.WebControls.LinqDataSource.OnUnload(System.EventArgs)
  - System.Web.UI.WebControls.LinqDataSource.OrderBy
  - System.Web.UI.WebControls.LinqDataSource.OrderByParameters
  - System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy
  - System.Web.UI.WebControls.LinqDataSource.OrderGroupsByParameters
  - System.Web.UI.WebControls.LinqDataSource.Select
  - System.Web.UI.WebControls.LinqDataSource.Selected
  - System.Web.UI.WebControls.LinqDataSource.Selecting
  - System.Web.UI.WebControls.LinqDataSource.SelectParameters
  - System.Web.UI.WebControls.LinqDataSource.StoreOriginalValuesInViewState
  - System.Web.UI.WebControls.LinqDataSource.System#Web#DynamicData#IDynamicDataSource#ContextType
  - System.Web.UI.WebControls.LinqDataSource.System#Web#DynamicData#IDynamicDataSource#EntitySetName
  - System.Web.UI.WebControls.LinqDataSource.TableName
  - System.Web.UI.WebControls.LinqDataSource.Update(System.Collections.IDictionary,System.Collections.IDictionary,System.Collections.IDictionary)
  - System.Web.UI.WebControls.LinqDataSource.Updated
  - System.Web.UI.WebControls.LinqDataSource.UpdateParameters
  - System.Web.UI.WebControls.LinqDataSource.Updating
  - System.Web.UI.WebControls.LinqDataSource.Where
  - System.Web.UI.WebControls.LinqDataSource.WhereParameters
  langs:
  - csharp
  name: LinqDataSource
  nameWithType: LinqDataSource
  fullName: System.Web.UI.WebControls.LinqDataSource
  type: Class
  summary: "Tillåter användningen av Language-Integrated fråga (LINQ) i en ASP.NET-webbsida via markeringstext för att hämta och ändra data från ett dataobjekt."
  remarks: "I det här avsnittet:- [introduktion](#introduction)      -   [ordning för åtgärder](#order_of_operations)      -   [ordning Data](#ordering_data)      -   [gruppera Data](#grouping_data)      -   [dataändringar](#data_modifications)      -   [utvärdera värden för närvarande kör](#evaluating_value_at_run_time)      -   [arbeta med lagrade procedurer](#working_with_stored_procedures)      -   [deklarativa syntaxen](#declarative_syntax) <a name=&quot;introduction&quot;> </a> ## Introduction Language-Integrated fråga (LINQ) är en frågesyntaxen som definierar en uppsättning frågeoperatorer som möjliggör traversal, filter och projektion kan uttryckas i en deklarativ metod i något. NET-baserade programmeringsspråk.       Dataobjektet kan vara en InMemory-datainsamling eller ett objekt som representerar data från en-databas. Du kan hämta eller ändra data utan att behöva skriva SQL-kommandon för varje åtgärd.       LinqDataSource kontrollen kan du använda LINQ i ASP.NET-webbsida genom att ange egenskaper i markeringstext. LinqDataSource kontrollen använder LINQ to SQL för att automatiskt generera data-kommandon. Läs mer om LINQ to SQL [LINQ to SQL](~/add/includes/ajax-current-ext-md.md).       När du hämtar data från en InMemory-datainsamling, anger du den <xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A>egenskapen till den klass som innehåller datainsamlingen.</xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A> Du ställer in den <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A>egenskapen till egenskapen eller fältet som returnerar datainsamlingen.</xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> Du kan till exempel ha en klass som heter `Person` som innehåller en egenskap med namnet `FavoriteCities` som returnerar en matris med strängvärden. I så fall kan du ange den <xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A>egenskapen `Person` och ange den <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A>egenskapen `FavoriteCities`.</xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> </xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A>       När du frågar en databas måste du först skapa entitet klasser som representerar databasen och dess tabeller. Du kan använda den [!INCLUDE[vs_ordesigner_long](~/add/includes/vs-ordesigner-long-md.md)] eller SqlMetal.exe verktyget att generera dessa klasser. Sedan ställer du in den <xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A>egenskapen på den klass som representerar databasen och ange den <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A>egenskapen till egenskapen som representerar databastabellen.</xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> </xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A>      <a name=&quot;order_of_operations&quot;></a>## Ordning för åtgärder i LinqDataSource kontroll gäller dataåtgärder i följande ordning: 1.  Där (Ange innehåller information om vilka data för att returnera).      2.  Order By (sortering).      3.  Group By (samla in dataposter som delar värden).      4.  Ordna grupper efter (sortera grupperade data).      5.  Välj (ange vilka fält eller egenskaper för att returnera).      6.  Automatisk sortering (sortera dataposter via en egenskap som användaren har valt).      7.  Auto-sida (hämta en del av dataposter som valts av användaren).       Du kan lägga till villkor för att den <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A>egenskapen för att filtrera de dataposter som returneras från en fråga.</xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> Om den <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A>egenskapen har inte angetts, LinqDataSource kontrollen hämtas alla poster från dataobjektet.</xref:System.Web.UI.WebControls.LinqDataSource.Where%2A>      <a name=&quot;ordering_data&quot;></a>## Ordning Data du använder den <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A>egenskapen för att ange namnen på egenskaperna från returnerade data att sortera efter.</xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A>      > [!NOTE] > När du använder LinqDataSource kontrollen med [!INCLUDE[ss2k](~/add/includes/ss2k-md.md)] eller [!INCLUDE[ssEW](~/add/includes/ssew-md.md)] och <xref:System.Web.UI.WebControls.LinqDataSource.AutoPage%2A>egenskap är inställd på `true`, du måste ange ett värde i den <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A>egenskapen.</xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> </xref:System.Web.UI.WebControls.LinqDataSource.AutoPage%2A> Som standard den <xref:System.Web.UI.WebControls.LinqDataSource.AutoPage%2A>egenskapen är `true`.</xref:System.Web.UI.WebControls.LinqDataSource.AutoPage%2A> Om du tilldelar ett värde till den <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A>egenskap, måste du också inkludera alla identitetskolumner i listan över egenskaper som returneras i frågan.</xref:System.Web.UI.WebControls.LinqDataSource.Select%2A>      <a name=&quot;grouping_data&quot;></a>## Gruppering av Data som du använder den <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A>att ange vilka egenskaper som används för att konsolidera dataposter som har samma värden.</xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> När du grupperar data kan du inkludera `Key` och `It`, som skapas dynamiskt egenskaper i den <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A>egenskapen.</xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> Den `Key` egenskapen refererar till värden i den eller de egenskaper som användes för att gruppera data. Till exempel om du grupperar en egenskap med namnet `Category`, `Key` egenskapen kommer att innehålla alla unika värden i den `Category` egenskapen. Den `It` egenskapen refererar till en samling av enskilda poster i en gruppering av data. Du kan iterera över den `It` egenskapen för att hämta de individuella poster som har kombinerats i grupperingsåtgärden. Till exempel om du grupperar en egenskap med namnet `Category`, `It` -egenskapen innehåller alla enskilda poster som delar en gemensam värde i den `Category` egenskapen.       Du använder den <xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy%2A>att ange egenskaper som ska användas för att sortera grupperade data.</xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy%2A> När du grupperar data, den <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A>egenskapen anger hur enskilda poster i grupperade data sorteras.</xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A>       Som standard hämtar LinqDataSource kontrollen värden för alla egenskaper från ett dataobjekt. Du använder den <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A>att ange vilka egenskaper du vill gå tillbaka om du vill arbeta med en delmängd av tillgängliga egenskaper.</xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> Select-åtgärden tillämpas efter Where-, Order By och Group By-åtgärder. Därför, om du skapar ett alias namn i en Select-sats aliaset är inte tillgänglig i andra satser.      <a name=&quot;data_modifications&quot;></a>## Dataändringar du kan ange om dataändringar aktiveras med hjälp av <xref:System.Web.UI.WebControls.LinqDataSource.EnableDelete%2A>, <xref:System.Web.UI.WebControls.LinqDataSource.EnableInsert%2A>, och <xref:System.Web.UI.WebControls.LinqDataSource.EnableUpdate%2A>Egenskaper.</xref:System.Web.UI.WebControls.LinqDataSource.EnableUpdate%2A> </xref:System.Web.UI.WebControls.LinqDataSource.EnableInsert%2A> </xref:System.Web.UI.WebControls.LinqDataSource.EnableDelete%2A> Användargränssnittet för att ändra data från en kontroll för LinqDataSource anges vanligtvis via en databunden kontroll som en <xref:System.Web.UI.WebControls.DetailsView>kontroll.</xref:System.Web.UI.WebControls.DetailsView> Förutom inställningen <xref:System.Web.UI.WebControls.LinqDataSource.EnableDelete%2A>, <xref:System.Web.UI.WebControls.LinqDataSource.EnableInsert%2A>, eller <xref:System.Web.UI.WebControls.LinqDataSource.EnableUpdate%2A>till `true`, krävs följande för att aktivera automatisk dataändringar: – <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A>egenskapen kan inte tilldelas ett värde.</xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> </xref:System.Web.UI.WebControls.LinqDataSource.EnableUpdate%2A> </xref:System.Web.UI.WebControls.LinqDataSource.EnableInsert%2A> </xref:System.Web.UI.WebControls.LinqDataSource.EnableDelete%2A>      - <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A>Egenskapen kan inte tilldelas ett värde.</xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A>      -Klassen som har tilldelats <xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A>egenskapen måste vara härledd från <xref:System.Data.Linq.DataContext>.</xref:System.Data.Linq.DataContext> </xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A>      -Egenskapen som har tilldelats <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A>egenskapen måste vara härledd från <xref:System.Data.Linq.Table%601>.</xref:System.Data.Linq.Table%601> </xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A>       Du kan begränsa vilka egenskaper som visas i en databunden kontroll på två sätt. Du kan antingen ange den <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A>egenskap till en delmängd av egenskaperna du kan definiera fält för en databunden kontroll genom att lägga till <xref:System.Web.UI.WebControls.DataControlField>kontroller.</xref:System.Web.UI.WebControls.DataControlField> </xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> Men om du ställer in den <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A>egenskapen, det innebär att automatisk uppdatering, insert och delete-åtgärder inte kan aktiveras.</xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> Om du vill aktivera automatisk dataändringar när du arbetar med en delmängd av tillgängliga egenskaper inte anger den <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A>egenskapen.</xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> Hämta alla egenskaper från dataobjektet och hantera vilka som ska visas med hjälp av den databundna kontrollen istället. När du använder den <xref:System.Web.UI.WebControls.DetailsView>kontroll eller <xref:System.Web.UI.WebControls.GridView>kontroll, måste du också ange den <xref:System.Web.UI.WebControls.DetailsView.AutoGenerateRows%2A>eller <xref:System.Web.UI.WebControls.GridView.AutoGenerateColumns%2A>egenskaper till `false`.</xref:System.Web.UI.WebControls.GridView.AutoGenerateColumns%2A> </xref:System.Web.UI.WebControls.DetailsView.AutoGenerateRows%2A> </xref:System.Web.UI.WebControls.GridView> </xref:System.Web.UI.WebControls.DetailsView> Detta förhindrar att den databundna kontrollen automatiskt inklusive knappar för att redigera och ta bort data. Alla värden som inte visas i den databundna kontrollen lagras i vyn tillstånd. De skickas oförändrade till datakällan vid uppdatering av data utförs.      <a name=&quot;evaluating_value_at_run_time&quot;></a>## Utvärdering av värden kör för närvarande om du behöver utvärdera värden vid körning för sortering, filtrering, eller gruppera värden kan du lägga till parametrar i <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A>, <xref:System.Web.UI.WebControls.LinqDataSource.GroupByParameters%2A>, <xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsByParameters%2A>, eller <xref:System.Web.UI.WebControls.LinqDataSource.OrderByParameters%2A>samlingar.</xref:System.Web.UI.WebControls.LinqDataSource.OrderByParameters%2A> </xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsByParameters%2A> </xref:System.Web.UI.WebControls.LinqDataSource.GroupByParameters%2A> </xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A>       Om du vill ange standardvärden som du kan lägga till parametrar till den <xref:System.Web.UI.WebControls.LinqDataSource.InsertParameters%2A>samling.</xref:System.Web.UI.WebControls.LinqDataSource.InsertParameters%2A>       Om du vill granska eller ändra värden innan dataåtgärden körs, kan du hantera den <xref:System.Web.UI.WebControls.LinqDataSource.Deleting>, <xref:System.Web.UI.WebControls.LinqDataSource.Inserting>, <xref:System.Web.UI.WebControls.LinqDataSource.Selecting>, eller <xref:System.Web.UI.WebControls.LinqDataSource.Updating>händelser.</xref:System.Web.UI.WebControls.LinqDataSource.Updating> </xref:System.Web.UI.WebControls.LinqDataSource.Selecting> </xref:System.Web.UI.WebControls.LinqDataSource.Inserting> </xref:System.Web.UI.WebControls.LinqDataSource.Deleting> Du kan också hantera dessa händelser för att avbryta data eller undersöka verifieringsfel uppstod när du ställer in egenskaperna i dataklassen baserat på indata från användaren.       Om du vill kontrollera värden när åtgärden har slutförts, hantera den <xref:System.Web.UI.WebControls.LinqDataSource.Deleted>, <xref:System.Web.UI.WebControls.LinqDataSource.Inserted>, <xref:System.Web.UI.WebControls.LinqDataSource.Selected>, eller <xref:System.Web.UI.WebControls.LinqDataSource.Updated>händelser.</xref:System.Web.UI.WebControls.LinqDataSource.Updated> </xref:System.Web.UI.WebControls.LinqDataSource.Selected> </xref:System.Web.UI.WebControls.LinqDataSource.Inserted> </xref:System.Web.UI.WebControls.LinqDataSource.Deleted>      <a name=&quot;working_with_stored_procedures&quot;></a>## Arbeta med lagrade procedurer du använda kontrollen LinqDataSource för att hämta data från en lagrad procedur genom att skapa en händelsehanterare för den <xref:System.Web.UI.WebControls.LinqDataSource.Selecting>händelse.</xref:System.Web.UI.WebControls.LinqDataSource.Selecting> I hanterare du anropa metoden i datakontextklass som representerar den lagrade proceduren och ange resultatet till den <xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs.Result%2A>egenskapen för den <xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs>objekt.</xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs> </xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs.Result%2A> Om du vill aktivera automatisk uppdatering, insert och delete-åtgärder för data som returneras från metoden typen måste matcha den typ som anges i den <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A>egenskapen.</xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> Mer information om hur du skapar data kontexten metoder finns [så här: skapa DataContext metoder som mappas till lagrade procedurer och funktioner (O/R Designer)](~/add/includes/ajax-current-ext-md.md).      <a name=&quot;declarative_syntax&quot;></a>## Deklarativa syntaxen <CodeContentPlaceHolder>0</CodeContentPlaceHolder>"
  example:
  - "The following example shows a LinqDataSource control that retrieves data from an entity class named `Products`. The entity class could have been generated by using the [!INCLUDE[vs_ordesigner_short](~/add/includes/vs-ordesigner-short-md.md)] or the SqlMetal.exe utility. The <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> property is set to return only records that have a value in the `Price` property greater than 50. A <xref:System.Web.UI.WebControls.GridView> control is bound to the LinqDataSource control to display the data.  \n  \n [!code-vb[System.Web.UI.WebControls.LinqDataSource_Simple#5](~/add/codesnippet/visualbasic/t-system.web.ui.webcontr_370_1.aspx)]\n [!code-cs[System.Web.UI.WebControls.LinqDataSource_Simple#5](~/add/codesnippet/csharp/t-system.web.ui.webcontr_370_1.aspx)]  \n  \n The following example shows a LinqDataSource control that enables users to update, delete, and insert records in the data source. A <xref:System.Web.UI.WebControls.DetailsView> control is bound to the LinqDataSource control and enables users to see and modify the data. Notice that no SQL commands are required in order to select, update, delete, or insert the records.  \n  \n [!code-cs[System.Web.UI.WebControls.LinqDataSource_Simple#2](~/add/codesnippet/csharp/t-system.web.ui.webcontr_370_2.aspx)]\n [!code-vb[System.Web.UI.WebControls.LinqDataSource_Simple#2](~/add/codesnippet/visualbasic/t-system.web.ui.webcontr_370_2.aspx)]  \n  \n The following example shows an event handler for the <xref:System.Web.UI.WebControls.LinqDataSource.Selecting> event that sets the data object based on a value in the Web page.  \n  \n [!code-cs[System.Web.UI.WebControls.LinqDataSourceSelectEventArgs#3](~/add/codesnippet/csharp/t-system.web.ui.webcontr_370_3.cs)]\n [!code-vb[System.Web.UI.WebControls.LinqDataSourceSelectEventArgs#3](~/add/codesnippet/visualbasic/t-system.web.ui.webcontr_370_3.vb)]  \n  \n The following example shows a LinqDataSource control that is configured to group by two columns. The `Key` property references an object that has two properties, `ProductCategory` and `Color`. The object represented by `It` is renamed (aliased) to `Products`. The renamed `Products` object contains a collection of the individual records in a grouping. Each instance will contain all the columns from the `Products` table.  \n  \n [!code-cs[System.Web.UI.WebControls.LinqDataSource.GroupBy#1](~/add/codesnippet/csharp/t-system.web.ui.webcontr_370_4.aspx)]\n [!code-vb[System.Web.UI.WebControls.LinqDataSource.GroupBy#1](~/add/codesnippet/visualbasic/t-system.web.ui.webcontr_370_4.aspx)]  \n  \n The following example shows two <xref:System.Web.UI.WebControls.ListView> controls that display the data from the LinqDataSource control in the previous example. One <xref:System.Web.UI.WebControls.ListView> control displays the grouped data, and the other <xref:System.Web.UI.WebControls.ListView> control displays the individual names of products that belong to that group. The nested data-bound control's <xref:System.Web.UI.WebControls.BaseDataList.DataSource%2A> property is set to `Products`, which is the alias for the `It` object.  \n  \n [!code-cs[System.Web.UI.WebControls.LinqDataSource.GroupBy#2](~/add/codesnippet/csharp/t-system.web.ui.webcontr_370_5.aspx)]\n [!code-vb[System.Web.UI.WebControls.LinqDataSource.GroupBy#2](~/add/codesnippet/visualbasic/t-system.web.ui.webcontr_370_5.aspx)]"
  syntax:
    content: >-
      [System.ComponentModel.DefaultEvent("Selecting")]

      [System.ComponentModel.DefaultProperty("ContextTypeName")]

      [System.ComponentModel.Designer("System.Web.UI.Design.WebControls.LinqDataSourceDesigner, System.Web.Extensions.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35")]

      [System.Drawing.ToolboxBitmap(typeof(System.Web.UI.WebControls.LinqDataSource), "LinqDataSource.bmp")]

      [System.Web.UI.ParseChildren(true)]

      [System.Web.UI.PersistChildren(false)]

      public class LinqDataSource : System.Web.UI.WebControls.ContextDataSource, System.Web.DynamicData.IDynamicDataSource
  inheritance:
  - System.Object
  - System.Web.UI.Control
  - System.Web.UI.DataSourceControl
  - System.Web.UI.WebControls.QueryableDataSource
  - System.Web.UI.WebControls.ContextDataSource
  implements:
  - System.Web.DynamicData.IDynamicDataSource
  inheritedMembers:
  - System.Web.UI.Control.Adapter
  - System.Web.UI.Control.AddedControl(System.Web.UI.Control,System.Int32)
  - System.Web.UI.Control.AddParsedSubObject(System.Object)
  - System.Web.UI.Control.AppRelativeTemplateSourceDirectory
  - System.Web.UI.Control.BeginRenderTracing(System.IO.TextWriter,System.Object)
  - System.Web.UI.Control.BindingContainer
  - System.Web.UI.Control.BuildProfileTree(System.String,System.Boolean)
  - System.Web.UI.Control.ChildControlsCreated
  - System.Web.UI.Control.ClearCachedClientID
  - System.Web.UI.Control.ClearChildControlState
  - System.Web.UI.Control.ClearChildState
  - System.Web.UI.Control.ClearChildViewState
  - System.Web.UI.Control.ClearEffectiveClientIDMode
  - System.Web.UI.Control.ClientIDSeparator
  - System.Web.UI.Control.Context
  - System.Web.UI.Control.CreateChildControls
  - System.Web.UI.Control.DataBind
  - System.Web.UI.Control.DataBind(System.Boolean)
  - System.Web.UI.Control.DataBindChildren
  - System.Web.UI.Control.DataBinding
  - System.Web.UI.Control.DataItemContainer
  - System.Web.UI.Control.DataKeysContainer
  - System.Web.UI.Control.DesignMode
  - System.Web.UI.Control.Dispose
  - System.Web.UI.Control.Disposed
  - System.Web.UI.Control.EnableViewState
  - System.Web.UI.Control.EndRenderTracing(System.IO.TextWriter,System.Object)
  - System.Web.UI.Control.EnsureChildControls
  - System.Web.UI.Control.EnsureID
  - System.Web.UI.Control.Events
  - System.Web.UI.Control.FindControl(System.String,System.Int32)
  - System.Web.UI.Control.GetDesignModeState
  - System.Web.UI.Control.GetRouteUrl(System.Object)
  - System.Web.UI.Control.GetRouteUrl(System.String,System.Object)
  - System.Web.UI.Control.GetRouteUrl(System.String,System.Web.Routing.RouteValueDictionary)
  - System.Web.UI.Control.GetRouteUrl(System.Web.Routing.RouteValueDictionary)
  - System.Web.UI.Control.GetUniqueIDRelativeTo(System.Web.UI.Control)
  - System.Web.UI.Control.HasChildViewState
  - System.Web.UI.Control.HasEvents
  - System.Web.UI.Control.ID
  - System.Web.UI.Control.IdSeparator
  - System.Web.UI.Control.Init
  - System.Web.UI.Control.IsChildControlStateCleared
  - System.Web.UI.Control.IsLiteralContent
  - System.Web.UI.Control.IsTrackingViewState
  - System.Web.UI.Control.IsViewStateEnabled
  - System.Web.UI.Control.Load
  - System.Web.UI.Control.LoadControlState(System.Object)
  - System.Web.UI.Control.LoadViewStateByID
  - System.Web.UI.Control.MapPathSecure(System.String)
  - System.Web.UI.Control.NamingContainer
  - System.Web.UI.Control.OnBubbleEvent(System.Object,System.EventArgs)
  - System.Web.UI.Control.OnDataBinding(System.EventArgs)
  - System.Web.UI.Control.OnLoad(System.EventArgs)
  - System.Web.UI.Control.OnPreRender(System.EventArgs)
  - System.Web.UI.Control.OpenFile(System.String)
  - System.Web.UI.Control.Page
  - System.Web.UI.Control.Parent
  - System.Web.UI.Control.PreRender
  - System.Web.UI.Control.RaiseBubbleEvent(System.Object,System.EventArgs)
  - System.Web.UI.Control.RemovedControl(System.Web.UI.Control)
  - System.Web.UI.Control.Render(System.Web.UI.HtmlTextWriter)
  - System.Web.UI.Control.RenderChildren(System.Web.UI.HtmlTextWriter)
  - System.Web.UI.Control.RenderControl(System.Web.UI.HtmlTextWriter,System.Web.UI.Adapters.ControlAdapter)
  - System.Web.UI.Control.RenderingCompatibility
  - System.Web.UI.Control.ResolveAdapter
  - System.Web.UI.Control.ResolveClientUrl(System.String)
  - System.Web.UI.Control.ResolveUrl(System.String)
  - System.Web.UI.Control.SaveControlState
  - System.Web.UI.Control.SetDesignModeState(System.Collections.IDictionary)
  - System.Web.UI.Control.SetRenderMethodDelegate(System.Web.UI.RenderMethod)
  - System.Web.UI.Control.SetTraceData(System.Object,System.Object)
  - System.Web.UI.Control.SetTraceData(System.Object,System.Object,System.Object)
  - System.Web.UI.Control.Site
  - System.Web.UI.Control.System#Web#UI#IControlBuilderAccessor#ControlBuilder
  - System.Web.UI.Control.System#Web#UI#IControlDesignerAccessor#GetDesignModeState
  - System.Web.UI.Control.System#Web#UI#IControlDesignerAccessor#SetDesignModeState(System.Collections.IDictionary)
  - System.Web.UI.Control.System#Web#UI#IControlDesignerAccessor#SetOwnerControl(System.Web.UI.Control)
  - System.Web.UI.Control.System#Web#UI#IControlDesignerAccessor#UserData
  - System.Web.UI.Control.System#Web#UI#IDataBindingsAccessor#DataBindings
  - System.Web.UI.Control.System#Web#UI#IDataBindingsAccessor#HasDataBindings
  - System.Web.UI.Control.System#Web#UI#IExpressionsAccessor#Expressions
  - System.Web.UI.Control.System#Web#UI#IExpressionsAccessor#HasExpressions
  - System.Web.UI.Control.System#Web#UI#IParserAccessor#AddParsedSubObject(System.Object)
  - System.Web.UI.Control.TemplateControl
  - System.Web.UI.Control.TemplateSourceDirectory
  - System.Web.UI.Control.UniqueID
  - System.Web.UI.Control.Unload
  - System.Web.UI.Control.ValidateRequestMode
  - System.Web.UI.Control.ViewState
  - System.Web.UI.Control.ViewStateIgnoresCase
  - System.Web.UI.Control.ViewStateMode
  - System.Web.UI.DataSourceControl.ApplyStyleSheetSkin(System.Web.UI.Page)
  - System.Web.UI.DataSourceControl.ClientID
  - System.Web.UI.DataSourceControl.ClientIDMode
  - System.Web.UI.DataSourceControl.Controls
  - System.Web.UI.DataSourceControl.CreateControlCollection
  - System.Web.UI.DataSourceControl.EnableTheming
  - System.Web.UI.DataSourceControl.FindControl(System.String)
  - System.Web.UI.DataSourceControl.Focus
  - System.Web.UI.DataSourceControl.HasControls
  - System.Web.UI.DataSourceControl.RaiseDataSourceChangedEvent(System.EventArgs)
  - System.Web.UI.DataSourceControl.RenderControl(System.Web.UI.HtmlTextWriter)
  - System.Web.UI.DataSourceControl.SkinID
  - System.Web.UI.DataSourceControl.System#ComponentModel#IListSource#ContainsListCollection
  - System.Web.UI.DataSourceControl.System#ComponentModel#IListSource#GetList
  - System.Web.UI.DataSourceControl.System#Web#UI#IDataSource#GetView(System.String)
  - System.Web.UI.DataSourceControl.System#Web#UI#IDataSource#GetViewNames
  - System.Web.UI.DataSourceControl.Visible
  - System.Web.UI.WebControls.ContextDataSource.EntitySetName
  - System.Web.UI.WebControls.ContextDataSource.EntityTypeName
  - System.Web.UI.WebControls.QueryableDataSource.GetView(System.String)
  - System.Web.UI.WebControls.QueryableDataSource.GetViewNames
  - System.Web.UI.WebControls.QueryableDataSource.LoadViewState(System.Object)
  - System.Web.UI.WebControls.QueryableDataSource.QueryCreated
  - System.Web.UI.WebControls.QueryableDataSource.RaiseViewChanged
  - System.Web.UI.WebControls.QueryableDataSource.SaveViewState
  - System.Web.UI.WebControls.QueryableDataSource.TrackViewState
  - System.Web.UI.WebControls.QueryableDataSource.UpdateParameterVales
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.#ctor
  id: '#ctor'
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: LinqDataSource()
  nameWithType: LinqDataSource.LinqDataSource()
  fullName: System.Web.UI.WebControls.LinqDataSource.LinqDataSource()
  type: Constructor
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "Initierar en ny instans av den <xref href=&quot;System.Web.UI.WebControls.LinqDataSource&quot;> </xref> klass."
  syntax:
    content: public LinqDataSource ();
    parameters: []
  overload: System.Web.UI.WebControls.LinqDataSource.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.AutoGenerateOrderByClause
  id: AutoGenerateOrderByClause
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: AutoGenerateOrderByClause
  nameWithType: LinqDataSource.AutoGenerateOrderByClause
  fullName: System.Web.UI.WebControls.LinqDataSource.AutoGenerateOrderByClause
  type: Property
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "Hämtar eller anger ett värde som anger om den <xref href=&quot;System.Web.UI.WebControls.LinqDataSource&quot;> </xref> kontrollen skapas dynamiskt en Order By-sats baserat på värdena i den <xref:System.Web.UI.WebControls.LinqDataSource.OrderByParameters*>samling.</xref:System.Web.UI.WebControls.LinqDataSource.OrderByParameters*>"
  remarks: "När du anger egenskapen AutoGenerateOrderByClause till `true`, <xref:System.Web.UI.WebControls.LinqDataSource>kontrollen skapas dynamiskt en Order By-sats som är baserat på värdena i den <xref:System.Web.UI.WebControls.LinqDataSource.OrderByParameters%2A>samling.</xref:System.Web.UI.WebControls.LinqDataSource.OrderByParameters%2A> </xref:System.Web.UI.WebControls.LinqDataSource> Den <xref:System.Web.UI.WebControls.LinqDataSource>kontroll sorteras data efter den första parametern och dessutom sorterar data för varje ytterligare parameter.</xref:System.Web.UI.WebControls.LinqDataSource> Parametrar som innehåller `null` eller ett tomt värde ingår inte i Order By-satsen.       Du anger inte den <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A>egenskapen när AutoGenerateOrderByClause anges till `true`eftersom parsern skapas dynamiskt Order By-satsen.</xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> Den <xref:System.Web.UI.WebControls.LinqDataSource>kontrollen utlöser ett undantag om AutoGenerateOrderByClause anges till `true` och <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A>egenskapen tilldelas värden.</xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> </xref:System.Web.UI.WebControls.LinqDataSource>"
  example:
  - "The following example shows a <xref:System.Web.UI.WebControls.LinqDataSource> control with the AutoGenerateOrderByClause set to `true`. A parameter is included in the <xref:System.Web.UI.WebControls.LinqDataSource.OrderByParameters%2A> collection that orders the data based on the property name that a user selects from a <xref:System.Web.UI.WebControls.DropDownList> control.  \n  \n [!code-cs[System.Web.UI.WebControls.LinqDataSource_Simple#8](~/add/codesnippet/csharp/p-system.web.ui.webcontr_120_1.aspx)]\n [!code-vb[System.Web.UI.WebControls.LinqDataSource_Simple#8](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_120_1.aspx)]"
  syntax:
    content: public bool AutoGenerateOrderByClause { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Om den <xref href=&quot;System.Web.UI.WebControls.LinqDataSource&quot;> </xref> kontrollen skapar Order By-satsen, annars <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. Standardvärdet är <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Web.UI.WebControls.LinqDataSource.AutoGenerateOrderByClause*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.AutoGenerateWhereClause
  id: AutoGenerateWhereClause
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: AutoGenerateWhereClause
  nameWithType: LinqDataSource.AutoGenerateWhereClause
  fullName: System.Web.UI.WebControls.LinqDataSource.AutoGenerateWhereClause
  type: Property
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "Hämtar eller anger ett värde som anger om den <xref href=&quot;System.Web.UI.WebControls.LinqDataSource&quot;> </xref> kontrollen skapas dynamiskt Where satsen baserat på värden som definierats i den <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters*>samling.</xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters*>"
  remarks: "När du anger egenskapen AutoGenerateWhereClause till `true`, <xref:System.Web.UI.WebControls.LinqDataSource>kontrollen skapas dynamiskt Where-satsen från parametrarna i den <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A>samling.</xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A> </xref:System.Web.UI.WebControls.LinqDataSource> Varje parameter som du lägger till den <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A>samlingen måste innehålla dess <xref:System.Web.UI.WebControls.Parameter.Name%2A>-egenskapen angetts till ett värde som matchar en egenskap i dataobjekt som frågas.</xref:System.Web.UI.WebControls.Parameter.Name%2A> </xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A> Den automatiskt genererade där satsen kontrolleras om värdet anges i den <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A>samling är lika med värdet på egenskapen matchande i dataobjektet.</xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A> Om du tillhandahåller mer än en parameter parametrarna är kopplade till en logisk `AND` igen. Parametrar som innehåller `null` eller ett tomt värde ingår inte i Where-satsen.       Den automatiskt genererade <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A>satsen kan bara testa likheten och länka parametrar endast med den `AND` åtgärden.</xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> Ange inte egenskapen AutoGenerateWhereClause till `true` om du måste lägga till ett villkor som inte testas lika eller om du har att relatera parametrar med den `OR` igen. Du kan utföra dessa uppgifter genom att ange egenskapen AutoGenerateWhereClause `false` och lägga till platshållare i den <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A>egenskap för varje parameter i den <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A>samling.</xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A> </xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> I den <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A>egenskapen inleder varje platshållare namn på @-tecken.</xref:System.Web.UI.WebControls.LinqDataSource.Where%2A>       Du anger inte den <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A>egenskapen när egenskapen AutoGenerateWhereClause är `true`eftersom parsern skapas dynamiskt Where satsen.</xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> Den <xref:System.Web.UI.WebControls.LinqDataSource>kontrollen genererar ett undantag om egenskapen AutoGenerateWhereClause är `true` och <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A>egenskapen tilldelas värden.</xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> </xref:System.Web.UI.WebControls.LinqDataSource>"
  example:
  - "The following example shows a <xref:System.Web.UI.WebControls.LinqDataSource> control with the AutoGenerateWhereClause set to `true`. A <xref:System.Web.UI.WebControls.GridView> control is bound to the <xref:System.Web.UI.WebControls.LinqDataSource> control to display the data that is returned from the query. A <xref:System.Web.UI.WebControls.DropDownList> control is included that is populated with three values. A parameter is included in the <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A> collection with the name set to `Category,` which matches one of the properties of the data object. Its <xref:System.Web.UI.WebControls.ControlParameter.ControlID%2A> property is set to the ID of the <xref:System.Web.UI.WebControls.DropDownList> control. The <xref:System.Web.UI.WebControls.LinqDataSource> control automatically creates the <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> property to filter records based on the value that the user selects from the <xref:System.Web.UI.WebControls.DropDownList> control. The query returns the records whose `Category` property matches the value that the user has selected from the <xref:System.Web.UI.WebControls.DropDownList> control.  \n  \n [!code-cs[System.Web.UI.WebControls.LinqDataSource_Simple#7](~/add/codesnippet/csharp/p-system.web.ui.webcontr_223_1.aspx)]\n [!code-vb[System.Web.UI.WebControls.LinqDataSource_Simple#7](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_223_1.aspx)]"
  syntax:
    content: public bool AutoGenerateWhereClause { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Om den <xref href=&quot;System.Web.UI.WebControls.LinqDataSource&quot;> </xref> kontrollen skapar Where satsen, annars <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. Standardvärdet är <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Web.UI.WebControls.LinqDataSource.AutoGenerateWhereClause*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.AutoPage
  id: AutoPage
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: AutoPage
  nameWithType: LinqDataSource.AutoPage
  fullName: System.Web.UI.WebControls.LinqDataSource.AutoPage
  type: Property
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "Hämtar eller anger ett värde som anger om den <xref href=&quot;System.Web.UI.WebControls.LinqDataSource&quot;> </xref> kontrollen stöder navigering via avsnitt av data vid körning."
  remarks: "Ange egenskapen AutoPage till `true` att aktivera sidindelning i den <xref:System.Web.UI.WebControls.LinqDataSource>kontroll.</xref:System.Web.UI.WebControls.LinqDataSource> Ansluta en databunden kontroll som tillhandahåller ett gränssnitt för sidindelning till så att användare kan bläddra igenom data, de <xref:System.Web.UI.WebControls.LinqDataSource>kontroll.</xref:System.Web.UI.WebControls.LinqDataSource> När egenskapen AutoPage har angetts `true`, <xref:System.Web.UI.WebControls.LinqDataSource>kontrollen hämtar endast tillräckligt många poster för en sida i databundna kontrollen.</xref:System.Web.UI.WebControls.LinqDataSource> Den använder den <xref:System.Linq.Enumerable.Skip%2A>och <xref:System.Linq.Enumerable.Take%2A>metoder för att hämta posterna för den aktuella sidan.</xref:System.Linq.Enumerable.Take%2A> </xref:System.Linq.Enumerable.Skip%2A>"
  example:
  - "The following example shows a <xref:System.Web.UI.WebControls.LinqDataSource> control with the AutoPage property set to `true` and a <xref:System.Web.UI.WebControls.GridView> control that is bound to the <xref:System.Web.UI.WebControls.LinqDataSource> control. The <xref:System.Web.UI.WebControls.GridView.AllowPaging%2A> property of the <xref:System.Web.UI.WebControls.GridView> control is set to `true` to provide the interface that lets users page through the data.  \n  \n [!code-vb[System.Web.UI.WebControls.LinqDataSource_Simple#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_959_1.aspx)]\n [!code-cs[System.Web.UI.WebControls.LinqDataSource_Simple#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_959_1.aspx)]"
  syntax:
    content: public bool AutoPage { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Om användaren kan bläddra igenom uppgifterna. Annars <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. Standardvärdet är <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>."
  overload: System.Web.UI.WebControls.LinqDataSource.AutoPage*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.AutoSort
  id: AutoSort
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: AutoSort
  nameWithType: LinqDataSource.AutoSort
  fullName: System.Web.UI.WebControls.LinqDataSource.AutoSort
  type: Property
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "Hämtar eller anger ett värde som anger om den <xref href=&quot;System.Web.UI.WebControls.LinqDataSource&quot;> </xref> kontrollen stöder sortering data vid körning."
  remarks: "Den <xref:System.Web.UI.WebControls.LinqDataSource>kontrollen stöder två metoder för att sortera data.</xref:System.Web.UI.WebControls.LinqDataSource> Du kan använda egenskapen Autosortera för att aktivera körning sortering eller du kan ange den <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A>egenskapen för att definiera sorteringen vid designtillfället.</xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A>       Ange egenskapen Autosortera `true` att aktivera sortering i en <xref:System.Web.UI.WebControls.LinqDataSource>kontroll som baseras på sorteringsuttryck från en databunden kontroll.</xref:System.Web.UI.WebControls.LinqDataSource> Den databundna kontrollen tillhandahåller ett gränssnitt för att aktivera användaren att välja vilken egenskap som ska användas för sortering vid körning.       Anger den ordning i vilken data returneras genom att ange programmässigt den <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A>egenskapen till den eller de egenskaper som används för sortering.</xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> När den <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A>egenskap är inställd på en egenskap och egenskapen Autosortera `true`, sorteringsuttryck från den databundna kontrollen tillämpas efter uttrycket i den <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A>egenskapen.</xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> </xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> Detta anger därför slutliga sortering av data."
  example:
  - "The following example shows a <xref:System.Web.UI.WebControls.LinqDataSource> control with the AutoSort property set to `true` and a <xref:System.Web.UI.WebControls.GridView> control that is bound to the <xref:System.Web.UI.WebControls.LinqDataSource> control. The <xref:System.Web.UI.WebControls.GridView.AllowSorting%2A> property of the <xref:System.Web.UI.WebControls.GridView> control is set to `true` to provide the interface that lets users sort the data.  \n  \n [!code-vb[System.Web.UI.WebControls.LinqDataSource_Simple#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_766_1.aspx)]\n [!code-cs[System.Web.UI.WebControls.LinqDataSource_Simple#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_766_1.aspx)]"
  syntax:
    content: public bool AutoSort { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Om användaren kan sortera data. Annars <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. Standardvärdet är <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>."
  overload: System.Web.UI.WebControls.LinqDataSource.AutoSort*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.ContextCreated
  id: ContextCreated
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: ContextCreated
  nameWithType: LinqDataSource.ContextCreated
  fullName: System.Web.UI.WebControls.LinqDataSource.ContextCreated
  type: Event
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "Inträffar när en instans av typen context-objektet har skapats."
  remarks: "Hantera händelsen ContextCreated om du vill undersöka typen kontextobjekt eller undersöka undantag som aktiveras när objektet skapas. Du hämta kontext type-objektet från den <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result%2A>egenskapen för den <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs>objekt som är associerad med den här händelsen.</xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs> </xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result%2A> Du kan hämta det undantag som uppstod under dataåtgärden från den <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A>egenskapen.</xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A>       Typen kontextobjekt har skapats under select-, update-, insert- och delete-åtgärder och återanvänds i begäran.       Det finns en gång när händelsen inte utlöses. Detta är när du anger programmässigt den <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result%2A>egenskapen till ett objekt under den <xref:System.Web.UI.WebControls.LinqDataSource.Selecting>händelse.</xref:System.Web.UI.WebControls.LinqDataSource.Selecting> </xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result%2A> Ytterligare ett villkor är att de ursprungliga värdena inte behöver lagras i vyn tillstånd eller objektet i den <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result%2A>egenskapen implementerar den <xref:System.Data.Linq.ITable>gränssnitt.</xref:System.Data.Linq.ITable> </xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result%2A>"
  syntax:
    content: public event EventHandler<System.Web.UI.WebControls.LinqDataSourceStatusEventArgs> ContextCreated;
    return:
      type: System.EventHandler{System.Web.UI.WebControls.LinqDataSourceStatusEventArgs}
      description: "Som ska läggas till."
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.ContextCreating
  id: ContextCreating
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: ContextCreating
  nameWithType: LinqDataSource.ContextCreating
  fullName: System.Web.UI.WebControls.LinqDataSource.ContextCreating
  type: Event
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "Inträffar innan en instans av typen context-objektet skapas."
  remarks: "Som standard den <xref:System.Web.UI.WebControls.LinqDataSource>kontrollen skapar en instans av typen som anges i den <xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A>egenskapen.</xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A> </xref:System.Web.UI.WebControls.LinqDataSource> Den <xref:System.Web.UI.WebControls.LinqDataSource>kontroll anropar Standardkonstruktorn av data context-objektet för att skapa en instans av objektet.</xref:System.Web.UI.WebControls.LinqDataSource> Det är möjligt att du måste använda en standardkonstruktor eller måste du skapa ett objekt som skiljer sig från den som anges i den <xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A>egenskapen.</xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A> Du måste i så fall hanterar händelsen ContextCreating och skapa kontextobjekt data manuellt.       Typen context-objektet har skapats under select-, update-, insert- och delete-åtgärder.       Det finns en gång när händelsen inte utlöses. Detta är när du anger programmässigt den <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result%2A>egenskapen till ett objekt i en händelsehanterare för den <xref:System.Web.UI.WebControls.LinqDataSource.Selecting>händelse.</xref:System.Web.UI.WebControls.LinqDataSource.Selecting> </xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result%2A> Ytterligare ett villkor är att de ursprungliga värdena inte behöver lagras i vyn tillstånd eller objektet i den <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result%2A>egenskapen implementerar den <xref:System.Data.Linq.ITable>gränssnitt.</xref:System.Data.Linq.ITable> </xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result%2A>"
  example:
  - "The following example shows how to create the data context object by using a non-default constructor during the ContextCreating event. The code assigns the object to the <xref:System.Web.UI.WebControls.LinqDataSourceContextEventArgs.ObjectInstance%2A> property.  \n  \n [!code-cs[System.Web.UI.WebControls.LinqDataSource.ContextCreating#1](~/add/codesnippet/csharp/e-system.web.ui.webcontr_153_1.cs)]\n [!code-vb[System.Web.UI.WebControls.LinqDataSource.ContextCreating#1](~/add/codesnippet/visualbasic/e-system.web.ui.webcontr_153_1.vb)]"
  syntax:
    content: public event EventHandler<System.Web.UI.WebControls.LinqDataSourceContextEventArgs> ContextCreating;
    return:
      type: System.EventHandler{System.Web.UI.WebControls.LinqDataSourceContextEventArgs}
      description: "Som ska läggas till."
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.ContextDisposing
  id: ContextDisposing
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: ContextDisposing
  nameWithType: LinqDataSource.ContextDisposing
  fullName: System.Web.UI.WebControls.LinqDataSource.ContextDisposing
  type: Event
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "Inträffar före avyttring typen context-objektet."
  remarks: "Du hanterar händelsen ContextDisposing om du vill ta bort objektet manuellt, eller om du vill utföra rensning som är specifik för objektet innan objektet förstörs."
  syntax:
    content: public event EventHandler<System.Web.UI.WebControls.LinqDataSourceDisposeEventArgs> ContextDisposing;
    return:
      type: System.EventHandler{System.Web.UI.WebControls.LinqDataSourceDisposeEventArgs}
      description: "Som ska läggas till."
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.ContextTypeName
  id: ContextTypeName
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: ContextTypeName
  nameWithType: LinqDataSource.ContextTypeName
  fullName: System.Web.UI.WebControls.LinqDataSource.ContextTypeName
  type: Property
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "Hämtar eller anger namnet på den typ som innehåller den egenskap vars värde har data som du vill hämta."
  remarks: "När du använder den <xref:System.Web.UI.WebControls.LinqDataSource>Kontrollera för att hämta data från en InMemory-datainsamling eller en databas måste du ange två egenskaper.</xref:System.Web.UI.WebControls.LinqDataSource> Först är en datakontextklass som representerar datakällan. Andra är en egenskap i datakontextklass som innehåller data. Egenskapen ContextTypeName till namnet på datakontextklass och du ställer in den <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A>egenskapen i mängden data som innehåller data.</xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A>       Till exempel när du hämtar data från en databas, ange egenskapen ContextTypeName till namnet på den klass som representerar databasen. Du också ange den <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A>egenskapen till egenskapen som representerar tabellen i databasen.</xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> Om du vill generera klasser från en databas, använder den [!INCLUDE[vs_ordesigner_short](~/add/includes/vs-ordesigner-short-md.md)] eller SqlMetal.exe-verktyget för att automatiskt generera dessa klasser.       När du hämtar data från en InMemory-datainsamling, till exempel en matris kan du ange egenskapen ContextTypeName till namnet på den klass som innehåller egenskapen matris. Ange den <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A>egenskapen till den egenskap som hämtar matrisen.</xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A>       Om du vill aktivera automatisk uppdatering, infoga eller ta bort åtgärder med hjälp av <xref:System.Web.UI.WebControls.LinqDataSource>kontroll, klassen för egenskapen ContextTypeName måste vara härledd från <xref:System.Data.Linq.DataContext>.</xref:System.Data.Linq.DataContext> </xref:System.Web.UI.WebControls.LinqDataSource> Dessutom egenskapen tilldelats <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A>egenskapen måste vara härledd från <xref:System.Data.Linq.Table%601>.</xref:System.Data.Linq.Table%601> </xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> Om du inte behöver aktivera automatisk uppdatering infoga eller ta bort, kan du tilldela egenskapen ContextTypeName namnet på alla typer av klassen.       Information om hur du väljer data från en instans av en klass, finns det <xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs.Result%2A>egenskap.</xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs.Result%2A>"
  example:
  - "The following example shows how to set the ContextTypeName property to a class that contains an array of strings. It also shows how to set the property to a class (generated by the [!INCLUDE[vs_ordesigner_short](~/add/includes/vs-ordesigner-short-md.md)]) that represents a database.  \n  \n [!code-vb[System.Web.UI.WebControls.LinqDataSource_Overview#2](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_745_1.aspx)]\n [!code-cs[System.Web.UI.WebControls.LinqDataSource_Overview#2](~/add/codesnippet/csharp/p-system.web.ui.webcontr_745_1.aspx)]  \n  \n The class named `ExampleDataContext` that represents the database table is not shown in this example. For this example to work, you must create this class by adding a LINQ To SQL class named Example.dbml and dragging a table named Movie onto the [!INCLUDE[vs_ordesigner_short](~/add/includes/vs-ordesigner-short-md.md)]. A class named `ExampleDataContext` with a property named `Movies` is generated.  \n  \n The following example shows the class named `MovieLibrary` that is referenced in the <xref:System.Web.UI.WebControls.LinqDataSource> control.  \n  \n [!code-cs[System.Web.UI.WebControls.LinqDataSource_Overview#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_745_2.cs)]\n [!code-vb[System.Web.UI.WebControls.LinqDataSource_Overview#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_745_2.vb)]"
  syntax:
    content: public override string ContextTypeName { get; set; }
    return:
      type: System.String
      description: "Namnet på klassen för att hämta data från."
  overload: System.Web.UI.WebControls.LinqDataSource.ContextTypeName*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.CreateQueryableView
  id: CreateQueryableView
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: CreateQueryableView()
  nameWithType: LinqDataSource.CreateQueryableView()
  fullName: System.Web.UI.WebControls.LinqDataSource.CreateQueryableView()
  type: Method
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "Returnerar en frågbar vy."
  syntax:
    content: protected override System.Web.UI.WebControls.QueryableDataSourceView CreateQueryableView ();
    parameters: []
    return:
      type: System.Web.UI.WebControls.QueryableDataSourceView
      description: "En frågbar vy."
  overload: System.Web.UI.WebControls.LinqDataSource.CreateQueryableView*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.CreateView
  id: CreateView
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: CreateView()
  nameWithType: LinqDataSource.CreateView()
  fullName: System.Web.UI.WebControls.LinqDataSource.CreateView()
  type: Method
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "Skapar en ny instans av den <xref href=&quot;System.Web.UI.WebControls.LinqDataSourceView&quot;> </xref> klass som är associerade med den här kontrollen."
  remarks: "Om du vill ange en anpassad vy, kan du åsidosätta den här metoden i en härledd klass."
  syntax:
    content: protected virtual System.Web.UI.WebControls.LinqDataSourceView CreateView ();
    parameters: []
    return:
      type: System.Web.UI.WebControls.LinqDataSourceView
      description: "Ett objekt som fungerar som gränssnittet för databundna kontroller."
  overload: System.Web.UI.WebControls.LinqDataSource.CreateView*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.Delete(System.Collections.IDictionary,System.Collections.IDictionary)
  id: Delete(System.Collections.IDictionary,System.Collections.IDictionary)
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: Delete(IDictionary,IDictionary)
  nameWithType: LinqDataSource.Delete(IDictionary,IDictionary)
  fullName: System.Web.UI.WebControls.LinqDataSource.Delete(IDictionary,IDictionary)
  type: Method
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "Utför en borttagningsåtgärd."
  remarks: "Du har vanligtvis inte att anropa Delete-metoden från din kod. När du använder en <xref:System.Web.UI.WebControls.LinqDataSource>kontrollen med en databunden kontroll databundna kontrollen kommer automatiskt att anropa Delete-metoden när användaren vidtar åtgärder för att ta bort en post.</xref:System.Web.UI.WebControls.LinqDataSource> Du kan explicit anropa Delete-metoden när du vill skapa en egen process för att ta bort data. Du kan till exempel anropa Delete-metoden när du vill ta bort en post baserat på en händelse på databundna kontrollen."
  syntax:
    content: public int Delete (System.Collections.IDictionary keys, System.Collections.IDictionary oldValues);
    parameters:
    - id: keys
      type: System.Collections.IDictionary
      description: "Raden nyckelvärdena för poster ska tas bort."
    - id: oldValues
      type: System.Collections.IDictionary
      description: "Radvärden som utvärderas för att identifiera konflikter."
    return:
      type: System.Int32
      description: "Antalet poster som påverkas av borttagningen."
  overload: System.Web.UI.WebControls.LinqDataSource.Delete*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.Deleted
  id: Deleted
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: Deleted
  nameWithType: LinqDataSource.Deleted
  fullName: System.Web.UI.WebControls.LinqDataSource.Deleted
  type: Event
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "Inträffar när en delete-åtgärden har slutförts."
  remarks: "Hantera händelsen tagits bort att fånga undantag från igen, eller undersöka utdataparametrar när åtgärden har slutförts. Du kan hämta utdataparametrar från den <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs>objektet som överförs till händelsehanterare.</xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs>"
  syntax:
    content: public event EventHandler<System.Web.UI.WebControls.LinqDataSourceStatusEventArgs> Deleted;
    return:
      type: System.EventHandler{System.Web.UI.WebControls.LinqDataSourceStatusEventArgs}
      description: "Som ska läggas till."
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.DeleteParameters
  id: DeleteParameters
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: DeleteParameters
  nameWithType: LinqDataSource.DeleteParameters
  fullName: System.Web.UI.WebControls.LinqDataSource.DeleteParameters
  type: Property
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "Den här egenskapen används inte av den <xref href=&quot;System.Web.UI.WebControls.LinqDataSource&quot;> </xref> klass."
  syntax:
    content: public System.Web.UI.WebControls.ParameterCollection DeleteParameters { get; }
    return:
      type: System.Web.UI.WebControls.ParameterCollection
      description: "En samling parametrar."
  overload: System.Web.UI.WebControls.LinqDataSource.DeleteParameters*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.Deleting
  id: Deleting
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: Deleting
  nameWithType: LinqDataSource.Deleting
  fullName: System.Web.UI.WebControls.LinqDataSource.Deleting
  type: Event
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "Inträffar före en borttagningsåtgärd."
  remarks: "Hantera händelsen ta bort för att validera objektet som ska tas bort, för att undersöka datavalidering från dataklassen att ändra ett värde innan borttagningen eller avbryta borttagningen. Den <xref:System.Web.UI.WebControls.LinqDataSource>styra överför en <xref:System.Web.UI.WebControls.LinqDataSourceDeleteEventArgs>objekt till händelsehanterare för händelsen borttagning.</xref:System.Web.UI.WebControls.LinqDataSourceDeleteEventArgs> </xref:System.Web.UI.WebControls.LinqDataSource> Den <xref:System.Web.UI.WebControls.LinqDataSourceDeleteEventArgs>objektet innehåller de data som kommer att tas bort och du kan avbryta borttagningsåtgärden.</xref:System.Web.UI.WebControls.LinqDataSourceDeleteEventArgs> Om data klassen returnerar en <xref:System.Web.UI.WebControls.LinqDataSourceValidationException>undantag, den <xref:System.Web.UI.WebControls.LinqDataSourceDeleteEventArgs>objektet innehåller detta undantag i den <xref:System.Web.UI.WebControls.LinqDataSourceDeleteEventArgs.Exception%2A>egenskapen.</xref:System.Web.UI.WebControls.LinqDataSourceDeleteEventArgs.Exception%2A> </xref:System.Web.UI.WebControls.LinqDataSourceDeleteEventArgs> </xref:System.Web.UI.WebControls.LinqDataSourceValidationException>       Om ett undantag i en händelsehanterare för händelsen om du tar bort, måste du hantera undantag i händelsehanteraren. Undantaget skickas inte till en händelsehanterare för den <xref:System.Web.UI.WebControls.LinqDataSource.Deleted>händelse (via den <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A>egenskapen för den <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs>objekt).</xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs> </xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A> </xref:System.Web.UI.WebControls.LinqDataSource.Deleted> Den <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A>egenskapen innehåller de undantag som utlöses efter händelsen borttagning.</xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A>"
  example:
  - "The following example shows an event handler for the Deleting event. The code cancels the delete operation based on a property in the <xref:System.Web.UI.WebControls.LinqDataSourceDeleteEventArgs.OriginalObject%2A> property and a value from the Web page. In the example, when the `OnSale` property is set to `true`, the user must select a <xref:System.Web.UI.WebControls.CheckBox> control to confirm that a record should be deleted.  \n  \n [!code-vb[System.Web.UI.WebControls.LinqDataSource.Deleting#1](~/add/codesnippet/visualbasic/e-system.web.ui.webcontr_77_1.vb)]\n [!code-cs[System.Web.UI.WebControls.LinqDataSource.Deleting#1](~/add/codesnippet/csharp/e-system.web.ui.webcontr_77_1.cs)]"
  syntax:
    content: public event EventHandler<System.Web.UI.WebControls.LinqDataSourceDeleteEventArgs> Deleting;
    return:
      type: System.EventHandler{System.Web.UI.WebControls.LinqDataSourceDeleteEventArgs}
      description: "Som ska läggas till."
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.EnableDelete
  id: EnableDelete
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: EnableDelete
  nameWithType: LinqDataSource.EnableDelete
  fullName: System.Web.UI.WebControls.LinqDataSource.EnableDelete
  type: Property
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "Hämtar eller anger ett värde som anger om poster kan tas bort via den <xref href=&quot;System.Web.UI.WebControls.LinqDataSource&quot;> </xref> kontroll."
  remarks: "Ange egenskapen EnableDelete till `true` när du vill att användarna ska kunna ta bort en post via den <xref:System.Web.UI.WebControls.LinqDataSource>kontroll.</xref:System.Web.UI.WebControls.LinqDataSource> När EnableDelete är `true`, <xref:System.Web.UI.WebControls.LinqDataSource>kontrollen använder LINQ to SQL för att automatiskt skapa kommandot för att ta bort data.</xref:System.Web.UI.WebControls.LinqDataSource> Du måste inkludera ett gränssnitt som användarna kan välja en post för att ta bort, t.ex en <xref:System.Web.UI.WebControls.DetailsView>kontroll.</xref:System.Web.UI.WebControls.DetailsView>       Den <xref:System.Web.UI.WebControls.LinqDataSource>kontrollen stöder inte automatisk delete-åtgärder när den <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A>egenskapen eller <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A>-egenskapen anges.</xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> </xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> </xref:System.Web.UI.WebControls.LinqDataSource> I så fall den <xref:System.Web.UI.WebControls.LinqDataSource>kontrollen genererar ett undantag om testas en borttagningsåtgärd.</xref:System.Web.UI.WebControls.LinqDataSource>"
  example:
  - "The following example shows a <xref:System.Web.UI.WebControls.LinqDataSource> control that has EnableDelete set to `true`. A <xref:System.Web.UI.WebControls.DetailsView> control displays the data and creates a button that lets users delete a data record.  \n  \n [!code-cs[System.Web.UI.WebControls.LinqDataSource_Simple#2](~/add/codesnippet/csharp/p-system.web.ui.webcontr_368_1.aspx)]\n [!code-vb[System.Web.UI.WebControls.LinqDataSource_Simple#2](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_368_1.aspx)]"
  syntax:
    content: public bool EnableDelete { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Om automatisk delete-åtgärder är aktiverade. Annars <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. Standardvärdet är <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Web.UI.WebControls.LinqDataSource.EnableDelete*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.EnableInsert
  id: EnableInsert
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: EnableInsert
  nameWithType: LinqDataSource.EnableInsert
  fullName: System.Web.UI.WebControls.LinqDataSource.EnableInsert
  type: Property
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "Hämtar eller anger ett värde som anger om poster kan infogas via den <xref href=&quot;System.Web.UI.WebControls.LinqDataSource&quot;> </xref> kontroll."
  remarks: "Ange egenskapen EnableInsert till `true` när du vill att användarna ska kunna infoga en ny post via den <xref:System.Web.UI.WebControls.LinqDataSource>kontroll.</xref:System.Web.UI.WebControls.LinqDataSource> När EnableInsert är `true`, <xref:System.Web.UI.WebControls.LinqDataSource>kontrollen använder LINQ to SQL för att automatiskt skapa kommandot för att infoga data.</xref:System.Web.UI.WebControls.LinqDataSource> Du måste inkludera ett gränssnitt som användarna kan infoga en ny post som en <xref:System.Web.UI.WebControls.DetailsView>kontroll.</xref:System.Web.UI.WebControls.DetailsView>       Den <xref:System.Web.UI.WebControls.LinqDataSource>kontrollen stöder inte automatisk infogningsåtgärder när den <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A>egenskapen eller <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A>-egenskapen anges.</xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> </xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> </xref:System.Web.UI.WebControls.LinqDataSource> I så fall den <xref:System.Web.UI.WebControls.LinqDataSource>kontrollen genererar ett undantag om en infogning testas.</xref:System.Web.UI.WebControls.LinqDataSource>"
  example:
  - "The following example shows a <xref:System.Web.UI.WebControls.LinqDataSource> control that has EnableInsert set to `true`. A <xref:System.Web.UI.WebControls.DetailsView> control displays the data and displays a button that switches the control to insert mode where users can create and save a new record.  \n  \n [!code-cs[System.Web.UI.WebControls.LinqDataSource_Simple#2](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1142_1.aspx)]\n [!code-vb[System.Web.UI.WebControls.LinqDataSource_Simple#2](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1142_1.aspx)]"
  syntax:
    content: public bool EnableInsert { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Om automatisk infogningsåtgärder är aktiverade. Annars <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. Standardvärdet är <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Web.UI.WebControls.LinqDataSource.EnableInsert*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.EnableObjectTracking
  id: EnableObjectTracking
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: EnableObjectTracking
  nameWithType: LinqDataSource.EnableObjectTracking
  fullName: System.Web.UI.WebControls.LinqDataSource.EnableObjectTracking
  type: Property
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "Hämtar eller anger det värde som anger om spåras ändringar i data context-objektet."
  remarks: "Egenskapen EnableObjectTracking används bara när du väljer data från ett kontextobjekt för LINQ till SQL-data.       När du interagerar med skrivskyddade data egenskapen EnableObjectTracking `false` förbättrar prestanda eftersom data inte cachelagras för att avgöra om den har ändrats. Det inaktiverar även en uppskjuten Frågekörningen. Den här egenskapen måste anges till `true` om du vill använda uppskjutna Frågekörningen."
  syntax:
    content: public bool EnableObjectTracking { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Om data kontextobjekt spåras ändringar; Annars <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. Standardvärdet är <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>."
  overload: System.Web.UI.WebControls.LinqDataSource.EnableObjectTracking*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.EnableUpdate
  id: EnableUpdate
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: EnableUpdate
  nameWithType: LinqDataSource.EnableUpdate
  fullName: System.Web.UI.WebControls.LinqDataSource.EnableUpdate
  type: Property
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "Hämtar eller anger ett värde som anger om poster kan uppdateras via den <xref href=&quot;System.Web.UI.WebControls.LinqDataSource&quot;> </xref> kontroll."
  remarks: "Ange egenskapen EnableUpdate till `true` när du vill att användarna ska kunna uppdatera en post med hjälp av den <xref:System.Web.UI.WebControls.LinqDataSource>kontroll.</xref:System.Web.UI.WebControls.LinqDataSource> När EnableUpdate är `true`, <xref:System.Web.UI.WebControls.LinqDataSource>kontrollen använder LINQ to SQL för att automatiskt skapa kommando för att uppdatera data.</xref:System.Web.UI.WebControls.LinqDataSource> Du måste inkludera ett gränssnitt som användarna kan uppdatera en post som en <xref:System.Web.UI.WebControls.DetailsView>kontroll.</xref:System.Web.UI.WebControls.DetailsView>       Den <xref:System.Web.UI.WebControls.LinqDataSource>kontrollen stöder inte automatisk uppdateringsåtgärder när den <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A>egenskapen eller <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A>-egenskapen anges.</xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> </xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> </xref:System.Web.UI.WebControls.LinqDataSource> I så fall den <xref:System.Web.UI.WebControls.LinqDataSource>kontrollen genererar ett undantag om uppdatering testas.</xref:System.Web.UI.WebControls.LinqDataSource>"
  example:
  - "The following example shows a <xref:System.Web.UI.WebControls.LinqDataSource> control that has EnableUpdate set to `true`. A <xref:System.Web.UI.WebControls.DetailsView> control displays the data and creates a button that lets users update a data record.  \n  \n [!code-cs[System.Web.UI.WebControls.LinqDataSource_Simple#2](~/add/codesnippet/csharp/p-system.web.ui.webcontr_116_1.aspx)]\n [!code-vb[System.Web.UI.WebControls.LinqDataSource_Simple#2](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_116_1.aspx)]"
  syntax:
    content: public bool EnableUpdate { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>om åtgärder för automatisk uppdatering aktiveras; Annars <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. Standardvärdet är <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Web.UI.WebControls.LinqDataSource.EnableUpdate*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.GroupBy
  id: GroupBy
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: GroupBy
  nameWithType: LinqDataSource.GroupBy
  fullName: System.Web.UI.WebControls.LinqDataSource.GroupBy
  type: Property
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "Hämtar eller anger ett värde som anger vilka egenskaper som används för att gruppera data som hämtas."
  remarks: "Du kan använda egenskapen GroupBy för att ange vilka egenskaper som används för att konsolidera dataposter som har samma värden. Till exempel om du anger egenskapen GroupBy `Name`, alla poster i frågan som har samma `Name` egenskapsvärde returneras som en enda konsoliderad post.       Du kan tilldela flera egenskaper för egenskapen GroupBy genom att skriva alla egenskaper i den `new` funktionen och avgränsa varje egenskap med ett komma. Om du vill gruppera efter egenskaperna `Name` och sedan `Category`, för egenskapen GroupBy `new(Name, Category)`.       Värden i egenskapen som används för att gruppera returneras via en genererad egenskap med namnet `Key`. Du inkluderar den `Key` egenskap i den <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A>egenskapen att hämta grupperade värdena.</xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> Du kan ange den `Key` egenskapen till ett alias med hjälp av den `As` nyckelordet, men du behöver inte använda ett alias. Du kan till exempel ange egenskapen GroupBy till en egenskap med namnet `Category`. Du kan hämta konsoliderade värdena från den `Category` inställningen genom att ange den <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A>egenskapen `new(Key As ProductCategory)`.</xref:System.Web.UI.WebControls.LinqDataSource.Select%2A>       Du kan komma åt de enskilda posterna i en grupp genom att inkludera den `It` egenskap i den <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A>egenskapen.</xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> Den `It` -egenskapen innehåller en uppsättning poster som delar ett värde i egenskapen grupperade. Du kan iterera över den `It` egenskapen att hämta de enskilda posterna.       Egenskapen GroupBy används ofta med aggregering metoder. Du kan använda följande metoder för sammanställd:- `Count()`       -    `Average(` *kolumnen* `)`       -    `Sum(` *kolumnen* `)`       -    `Max(` *kolumnen* `)`       -    `Min(` *kolumnen* `)`       -    `Where(` *villkoret* `)`       -    `Any()`       -    `All(` *villkoret* `)` mer information finns [NIB: LinqDataSource kontrollen översikt över webbserver](http://msdn.microsoft.com/en-us/104cfc3f-7385-47d3-8a51-830dfa791136) och [så: grupp och aggregerade Data med hjälp av LinqDataSource Kontrollen](http://msdn.microsoft.com/en-us/b922cf69-251f-4158-b405-ea960993a1af)."
  example:
  - "The following example shows a <xref:System.Web.UI.WebControls.LinqDataSource> control that groups the returned data by a property named `Category`. It returns the shared values and calculates the average price for the grouped records.  \n  \n [!code-vb[System.Web.UI.WebControls.LinqDataSource_Simple#3](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_84_1.aspx)]\n [!code-cs[System.Web.UI.WebControls.LinqDataSource_Simple#3](~/add/codesnippet/csharp/p-system.web.ui.webcontr_84_1.aspx)]  \n  \n The following example shows a <xref:System.Web.UI.WebControls.LinqDataSource> control that is configured to group by two columns. The `Key` property references an object that has two properties, `ProductCategory` and `Color`. The object represented by `It` is renamed `Products`. The renamed `Products` object contains a collection of the individual records in a grouping, and each instance contains all the columns from the Products table.  \n  \n [!code-cs[System.Web.UI.WebControls.LinqDataSource.GroupBy#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_84_2.aspx)]\n [!code-vb[System.Web.UI.WebControls.LinqDataSource.GroupBy#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_84_2.aspx)]  \n  \n The following example shows two <xref:System.Web.UI.WebControls.ListView> controls for displaying the data from the <xref:System.Web.UI.WebControls.LinqDataSource> control in the previous example. One <xref:System.Web.UI.WebControls.ListView> control displays the grouped data and the other <xref:System.Web.UI.WebControls.ListView> control displays the individual names of products that belong to that group. The nested data-bound control's <xref:System.Web.UI.WebControls.BaseDataList.DataSource%2A> property is set to `Products`, which is the alias for the `It` object.  \n  \n [!code-cs[System.Web.UI.WebControls.LinqDataSource.GroupBy#2](~/add/codesnippet/csharp/p-system.web.ui.webcontr_84_3.aspx)]\n [!code-vb[System.Web.UI.WebControls.LinqDataSource.GroupBy#2](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_84_3.aspx)]"
  syntax:
    content: public string GroupBy { get; set; }
    return:
      type: System.String
      description: "En sträng som används för att skapa Group By-satsen."
  overload: System.Web.UI.WebControls.LinqDataSource.GroupBy*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.GroupByParameters
  id: GroupByParameters
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: GroupByParameters
  nameWithType: LinqDataSource.GroupByParameters
  fullName: System.Web.UI.WebControls.LinqDataSource.GroupByParameters
  type: Property
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "Hämtar de parametrar som används för att skapa Group By-satsen."
  remarks: "Den <xref:System.Web.UI.WebControls.LinqDataSource>kontrollen använder parametrar i samlingen GroupByParameters för att skapa Group By-satsen vid körning.</xref:System.Web.UI.WebControls.LinqDataSource> Normalt använder du inte GroupByParameters-samlingen för att gruppera data. Använd i stället de <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A>egenskap.</xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> Du kan använda samlingen GroupByParameters endast när ett värde i Group By-satsen måste anges vid körning, och värdet är inte ett egenskapsnamn. Till exempel använda GroupByParameters-samlingen för att gruppera data baserat på om den `LastName` egenskap i dataposterna som är lika med ett värde som anges av användaren.       Om du vill gruppera data via en egenskap och egenskapen inte anges vid körning, kan du definiera egenskapen gruppering i det <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A>egenskap.</xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> Till exempel att returnera värden från en databastabell grupperade efter `LastName`, Ställ in <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A>på &quot;LastName&quot; utan några parametrar.</xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> Om du vill dynamiskt gruppera data via en egenskap, skapa en händelsehanterare för den <xref:System.Web.UI.WebControls.LinqDataSource.Selecting>händelse och anpassa den <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A>egenskapen.</xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> </xref:System.Web.UI.WebControls.LinqDataSource.Selecting>       Du kan inte tilldela en egenskap som värdet för en parameter i samlingen GroupByParameters. Du lägger till parametrar till samlingen GroupByParameters när du vill lägga till ett villkor för att den <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A>egenskapen måste anges vid körning.</xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A>       Om du vill ange värden i samlingen GroupByParameters du tilldela ett namn till varje parameter och sedan lägga till en platshållare i den <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A>egenskapen för den namngivna parametern.</xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> Inleder varje parameternamn med i Group By-sats i @-tecken."
  syntax:
    content: public System.Web.UI.WebControls.ParameterCollection GroupByParameters { get; }
    return:
      type: System.Web.UI.WebControls.ParameterCollection
      description: "Parametrar som används för att skapa Group By-satsen."
  overload: System.Web.UI.WebControls.LinqDataSource.GroupByParameters*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.Insert(System.Collections.IDictionary)
  id: Insert(System.Collections.IDictionary)
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: Insert(IDictionary)
  nameWithType: LinqDataSource.Insert(IDictionary)
  fullName: System.Web.UI.WebControls.LinqDataSource.Insert(IDictionary)
  type: Method
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "Utför en infogning."
  remarks: "Vanligtvis behöver du inte anropa metoden Insert från din kod. Den databundna kontrollen kommer automatiskt att anropa metoden Insert när användaren vidtar åtgärder för att infoga en ny post. Du kan explicit anropa metoden Insert när du vill skapa en egen process för att infoga data."
  example:
  - "The following example shows how to programmatically insert a new record in the data source after the user clicks a button. The code passes a <xref:System.Collections.Specialized.ListDictionary> object that contains default values to the Insert method.  \n  \n [!code-cs[System.Web.UI.WebControls.LinqDataSource.Insert#1](~/add/codesnippet/csharp/cd9b3311-c882-4466-8d03-_1.cs)]\n [!code-vb[System.Web.UI.WebControls.LinqDataSource.Insert#1](~/add/codesnippet/visualbasic/cd9b3311-c882-4466-8d03-_1.vb)]  \n  \n The following example shows the markup for the previous example.  \n  \n [!code-cs[System.Web.UI.WebControls.LinqDataSource.Insert#2](~/add/codesnippet/csharp/cd9b3311-c882-4466-8d03-_2.aspx)]\n [!code-vb[System.Web.UI.WebControls.LinqDataSource.Insert#2](~/add/codesnippet/visualbasic/cd9b3311-c882-4466-8d03-_2.aspx)]"
  syntax:
    content: public int Insert (System.Collections.IDictionary values);
    parameters:
    - id: values
      type: System.Collections.IDictionary
      description: "Radvärden som ska infogas i datakällan."
    return:
      type: System.Int32
      description: "Antal rader som påverkas av insert-åtgärden."
  overload: System.Web.UI.WebControls.LinqDataSource.Insert*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.Inserted
  id: Inserted
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: Inserted
  nameWithType: LinqDataSource.Inserted
  fullName: System.Web.UI.WebControls.LinqDataSource.Inserted
  type: Event
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "Inträffar när en insert-åtgärden har slutförts."
  remarks: "Hantera händelsen infogade att fånga undantag från insert-åtgärden eller för att undersöka värden efter att infogningen har slutförts. Du kan hämta de nya värdena via det <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs>objektet som överförs till händelsehanterare.</xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs> Du kan till exempel använda den <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs>datorobjektet för att hämta identitetsegenskapen som genereras av en databas för en ny post.</xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs>"
  example:
  - "The following example shows how to create an event handler for the Inserted event that checks for exceptions and retrieves the identity property for the new record.  \n  \n [!code-cs[System.Web.UI.WebControls.LinqDataSourceStatusEventArgs#1](~/add/codesnippet/csharp/e-system.web.ui.webcontr_96_1.aspx)]\n [!code-vb[System.Web.UI.WebControls.LinqDataSourceStatusEventArgs#1](~/add/codesnippet/visualbasic/e-system.web.ui.webcontr_96_1.aspx)]"
  syntax:
    content: public event EventHandler<System.Web.UI.WebControls.LinqDataSourceStatusEventArgs> Inserted;
    return:
      type: System.EventHandler{System.Web.UI.WebControls.LinqDataSourceStatusEventArgs}
      description: "Som ska läggas till."
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.Inserting
  id: Inserting
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: Inserting
  nameWithType: LinqDataSource.Inserting
  fullName: System.Web.UI.WebControls.LinqDataSource.Inserting
  type: Event
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "Inträffar före en infogning."
  remarks: "Hantera händelsen Infoga för att validera objektet som ska infogas, för att undersöka datavalidering från dataklassen att ändra ett värde innan insert-åtgärden eller avbryta insert-åtgärden. Den <xref:System.Web.UI.WebControls.LinqDataSourceInsertEventArgs>objekt skickades till händelsehanterare för den här händelsen innehåller det nya objektet att infoga i datakällan.</xref:System.Web.UI.WebControls.LinqDataSourceInsertEventArgs>       Om ett verifieringsfel uppstår under insert-åtgärden <xref:System.Web.UI.WebControls.LinqDataSourceInsertEventArgs>objektet innehåller validering-undantag som utlösts av klassen data.</xref:System.Web.UI.WebControls.LinqDataSourceInsertEventArgs> Ett valideringsfel inträffar om ett värde som ska infogas inte matchar typen för egenskapen i dataklassen, eller om den inte klarar anpassade verifieringen. I en händelsehanterare för händelsen Infoga kan du hämta validering undantag och vidta lämpliga åtgärder.       Om ett undantag i en händelsehanterare för händelsen infoga, måste du hantera undantag i händelsehanteraren. Undantaget skickas inte till en händelsehanterare för den <xref:System.Web.UI.WebControls.LinqDataSource.Inserted>händelse (via den <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A>egenskapen för den <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs>objekt).</xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs> </xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A> </xref:System.Web.UI.WebControls.LinqDataSource.Inserted> Den <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A>egenskapen innehåller de undantag som utlöses efter händelsen infoga.</xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A>"
  example:
  - "The following example shows an event handler for the Inserting event that modifies data before the insert operation. The object from the <xref:System.Web.UI.WebControls.LinqDataSourceInsertEventArgs.NewObject%2A> property is cast to a type named `Product`. The `DateModified` property of the `Product` object is set to the current date and time.  \n  \n [!code-cs[System.Web.UI.WebControls.LinqDataSource.Inserting#1](~/add/codesnippet/csharp/e-system.web.ui.webcontr_110_1.cs)]\n [!code-vb[System.Web.UI.WebControls.LinqDataSource.Inserting#1](~/add/codesnippet/visualbasic/e-system.web.ui.webcontr_110_1.vb)]  \n  \n The following example shows an event handler for the Inserting event that retrieves validation exceptions.  \n  \n```vb#  \nProtected Sub LinqDataSource_Inserting(ByVal sender As Object, _  \n        ByVal e As LinqDataSourceInsertEventArgs)  \n    If (e.Exception IsNot Nothing) Then  \n        For Each innerException As KeyValuePair(Of String, Exception) _  \n               In e.Exception.InnerExceptions  \n            Label1.Text &= innerException.Key & \": \" & _  \n                innerException.Value.Message & \"<br />\"  \n        Next  \n        e.ExceptionHandled = True  \n    End If  \nEnd Sub  \n```  \n  \n [C#]  \n  \n```  \nprotected void LinqDataSource_Inserting(object sender,   \n        LinqDataSourceInsertEventArgs e)  \n{  \n    if (e.Exception != null)  \n    {  \n        foreach (KeyValuePair<string, Exception> innerException in   \n             e.Exception.InnerExceptions)  \n        {  \n        Label1.Text += innerException.Key + \": \" +   \n            innerException.Value.Message + \"<br />\";  \n        }  \n        e.ExceptionHandled = true;  \n    }  \n}  \n```  \n  \n The previous example retrieves validation exceptions. An exception might be thrown if a value does not match the type of the property. It might also be thrown from a customized check such as the one in the following example. The `OnAgeChanging` method checks that the number for the `Age` property is not negative.  \n  \n```c#  \npartial void  OnAgeChanging(int? value)  \n{  \n    if (value < 0)  \n    {  \n        throw new Exception(\"Age cannot be a negative number.\");  \n    }  \n}  \n```  \n  \n```vb#  \nPrivate Sub OnAgeChanging(ByVal value As System.Nullable(Of Integer))  \n    If (value < 0) Then  \n        Throw New Exception(\"Age cannot be a negative number.\")  \n    End If  \nEnd Sub  \n```"
  syntax:
    content: public event EventHandler<System.Web.UI.WebControls.LinqDataSourceInsertEventArgs> Inserting;
    return:
      type: System.EventHandler{System.Web.UI.WebControls.LinqDataSourceInsertEventArgs}
      description: "Som ska läggas till."
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.InsertParameters
  id: InsertParameters
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: InsertParameters
  nameWithType: LinqDataSource.InsertParameters
  fullName: System.Web.UI.WebControls.LinqDataSource.InsertParameters
  type: Property
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "Hämtar de parametrar som används under insert-åtgärden."
  remarks: "Vanligtvis de värden som behövs för en insert-åtgärden överförs till den <xref:System.Web.UI.WebControls.LinqDataSource>kontroll av den databundna kontrollen.</xref:System.Web.UI.WebControls.LinqDataSource> Du anger insert parametrar när du vill tillhandahålla ett standardvärde värdet eller definiera om du vill konvertera tomma värden till `null`. Du behöver inte ange en parameter för varje värde som ska infogas endast för de värden som måste hanteras när användaren inte anger ett värde.       Värdena som du anger i samlingen mängden InsertParameters används för fält som är definierade i datakällan, men som inte bunden i kontrollen data. Till exempel anta att en databastabell har kolumner som heter namn, adress och postnummer, men en <xref:System.Web.UI.WebControls.ListView>kontroll som är bunden till tabellen är bunden till fälten namn och adress.</xref:System.Web.UI.WebControls.ListView> Värdena i samlingen mängden InsertParameters används endast för fältet Postnummer. De används inte för fältet namn och adress. Detta gäller även om inget värde anges för dessa fält. Om den databundna kontrollen automatiskt genererar fält för alla fält i datakällan, används inga värden från mängden InsertParameters-samling."
  example:
  - "The following example shows a <xref:System.Web.UI.WebControls.LinqDataSource> control with a parameter that provides a default value in the InsertParameters collection. If the user does not provide a value for the `Category` property, the default value that is provided by the parameter is saved in the database.  \n  \n [!code-cs[System.Web.UI.WebControls.LinqDataSource_Simple#9](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1053_1.aspx)]\n [!code-vb[System.Web.UI.WebControls.LinqDataSource_Simple#9](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1053_1.aspx)]"
  syntax:
    content: public System.Web.UI.WebControls.ParameterCollection InsertParameters { get; }
    return:
      type: System.Web.UI.WebControls.ParameterCollection
      description: "Parametrar som används under insert-åtgärden."
  overload: System.Web.UI.WebControls.LinqDataSource.InsertParameters*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.OnInit(System.EventArgs)
  id: OnInit(System.EventArgs)
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: OnInit(EventArgs)
  nameWithType: LinqDataSource.OnInit(EventArgs)
  fullName: System.Web.UI.WebControls.LinqDataSource.OnInit(EventArgs)
  type: Method
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "Initierar den <xref href=&quot;System.Web.UI.WebControls.LinqDataSource&quot;> </xref> objekt."
  syntax:
    content: protected override void OnInit (EventArgs e);
    parameters:
    - id: e
      type: System.EventArgs
      description: "Informationen om händelsen."
  overload: System.Web.UI.WebControls.LinqDataSource.OnInit*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.OnUnload(System.EventArgs)
  id: OnUnload(System.EventArgs)
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: OnUnload(EventArgs)
  nameWithType: LinqDataSource.OnUnload(EventArgs)
  fullName: System.Web.UI.WebControls.LinqDataSource.OnUnload(EventArgs)
  type: Method
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "Genererar den <xref href=&quot;System.Web.UI.Control.Unload&quot;> </xref> händelse."
  syntax:
    content: protected override void OnUnload (EventArgs e);
    parameters:
    - id: e
      type: System.EventArgs
      description: "Ett <xref:System.EventArgs>-objekt som innehåller informationen om händelsen.</xref:System.EventArgs>"
  overload: System.Web.UI.WebControls.LinqDataSource.OnUnload*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.OrderBy
  id: OrderBy
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: OrderBy
  nameWithType: LinqDataSource.OrderBy
  fullName: System.Web.UI.WebControls.LinqDataSource.OrderBy
  type: Property
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "Hämtar eller anger ett värde som anger vilka fält som används för ordning data som hämtas."
  remarks: "Du kan använda egenskapen OrderBy för att ange vilka egenskaper som ska användas för att sortera returnerade data. Egenskapen för att sortera data måste finnas i den ursprungliga datakällan, men behöver inte inkluderas i den <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A>egenskapen.</xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> Du kan lägga till ett blanksteg och `Ascending`, `ASC`, `Descending`, eller `DESC` till en egenskap i OrderBy-sträng för att ange hur ordnade data returneras.       Du kan ange flera egenskaper i egenskapen OrderBy genom att avgränsa varje egenskap med ett komma. Till exempel för order by-egenskaper med namnet `LastName` och `FirstName`, ange egenskapen OrderBy på &quot;LastName, FirstName&quot;.      > [!NOTE] > När du använder den <xref:System.Web.UI.WebControls.LinqDataSource>Kontrollera med [!INCLUDE[ss2k](~/add/includes/ss2k-md.md)] eller [!INCLUDE[ssEW](~/add/includes/ssew-md.md)] och <xref:System.Web.UI.WebControls.LinqDataSource.AutoPage%2A>egenskap är inställd på `true`, du måste ange ett värde i egenskapen OrderBy.</xref:System.Web.UI.WebControls.LinqDataSource.AutoPage%2A> </xref:System.Web.UI.WebControls.LinqDataSource> Som standard den <xref:System.Web.UI.WebControls.LinqDataSource.AutoPage%2A>egenskapen är `true`.</xref:System.Web.UI.WebControls.LinqDataSource.AutoPage%2A> Om du tilldelar ett värde till den <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A>egenskap, måste du också inkludera alla identitetskolumner i listan över egenskaper som returneras i frågan.</xref:System.Web.UI.WebControls.LinqDataSource.Select%2A>       Om den <xref:System.Web.UI.WebControls.LinqDataSource.AutoSort%2A>egenskapen `true`, en databunden kontroll kan skicka ett sorteringsuttryck för den <xref:System.Web.UI.WebControls.LinqDataSource>kontroll vid körning.</xref:System.Web.UI.WebControls.LinqDataSource> </xref:System.Web.UI.WebControls.LinqDataSource.AutoSort%2A> Den <xref:System.Web.UI.WebControls.LinqDataSource>kontroll gäller sorteringsuttryck från den databundna kontrollen när det gäller egenskapen OrderBy.</xref:System.Web.UI.WebControls.LinqDataSource> Därför returneras data enligt sorteringsuttrycket från den databundna kontrollen."
  example:
  - "The following example returns data in reverse alphabetical order based on values in the `Category` property.  \n  \n [!code-cs[System.Web.UI.WebControls.LinqDataSource_Simple#4](~/add/codesnippet/csharp/p-system.web.ui.webcontr_348_1.aspx)]\n [!code-vb[System.Web.UI.WebControls.LinqDataSource_Simple#4](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_348_1.aspx)]"
  syntax:
    content: public string OrderBy { get; set; }
    return:
      type: System.String
      description: "En sträng som används för att skapa Order By-satsen."
  overload: System.Web.UI.WebControls.LinqDataSource.OrderBy*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.OrderByParameters
  id: OrderByParameters
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: OrderByParameters
  nameWithType: LinqDataSource.OrderByParameters
  fullName: System.Web.UI.WebControls.LinqDataSource.OrderByParameters
  type: Property
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "Hämtar de parametrar som används för att skapa Order By-satsen."
  remarks: "Den <xref:System.Web.UI.WebControls.LinqDataSource>kontrollen använder parametrar i samlingen OrderByParameters för att skapa Order By-satsen vid körning.</xref:System.Web.UI.WebControls.LinqDataSource> Vanligtvis du ställer in den <xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateOrderByClause%2A>egenskapen `true` när du lägger till parametrar till samlingen OrderByParameters.</xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateOrderByClause%2A> När den <xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateOrderByClause%2A>egenskap är inställd på `true`, varje parameter i samlingen OrderByParameters har lagts till i Order By-sats i ordningen som de anges i samlingen OrderByParameters.</xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateOrderByClause%2A> När den <xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateOrderByClause%2A>egenskapen är `true`, parametrarna behöver inte namnges eftersom de tillämpas i ordning och inte matchas mot en platshållare.</xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateOrderByClause%2A>       Du behöver inte använda OrderByParameters samlingen om du inte behöver ange ett värde vid körning i Order By-satsen. Du kan definiera de fält som ska användas för att sortera data i den <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A>egenskapen.</xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> Till exempel att returnera värden från en databastabell sorterade efter `LastName`, Ställ in <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A>på &quot;LastName&quot; utan några parametrar.</xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A>       Du kan ange parametrar i samlingen OrderByParameters och matchar parametrarna som platshållare i den <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A>egenskap, men den här metoden har begränsad program.</xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> När du använder den här metoden kan inte parametrarna i samlingen OrderByParameters representera ett kolumnnamn. Du kan ange en parameter till ett värde och sedan jämföra detta värde till värden i en egenskap. Du kan till exempel ordna data baserat på om värden i en egenskap är mindre än värdet för körning som representeras av parametern."
  example:
  - "The following example shows a <xref:System.Web.UI.WebControls.LinqDataSource> control with the <xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateOrderByClause%2A> property set to `true`. A parameter is included in the OrderByParameters collection that orders the data based on the property name that a user selects from a <xref:System.Web.UI.WebControls.DropDownList> control.  \n  \n [!code-cs[System.Web.UI.WebControls.LinqDataSource_Simple#8](~/add/codesnippet/csharp/p-system.web.ui.webcontr_757_1.aspx)]\n [!code-vb[System.Web.UI.WebControls.LinqDataSource_Simple#8](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_757_1.aspx)]"
  syntax:
    content: public System.Web.UI.WebControls.ParameterCollection OrderByParameters { get; }
    return:
      type: System.Web.UI.WebControls.ParameterCollection
      description: "Parametrar som används för att skapa Order By-satsen."
  overload: System.Web.UI.WebControls.LinqDataSource.OrderByParameters*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy
  id: OrderGroupsBy
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: OrderGroupsBy
  nameWithType: LinqDataSource.OrderGroupsBy
  fullName: System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy
  type: Property
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "Hämtar eller anger vilka fält som används för att sortera grupperade data."
  remarks: "Du kan använda egenskapen OrderGroupsBy för att ange hur grupper av data sorteras. Du kan till exempel gruppera efter den `CategoryID` egenskapen och sedan sortera varje kategori-ID för gruppen av genomsnittet av den `Price` egenskapen.       Du kan ange egenskapen OrderGroupsBy endast när du har grupperat data. Om du ställer in egenskapen OrderGroupsBy utan att ställa in den <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A>egenskapen den <xref:System.Web.UI.WebControls.LinqDataSource>kontrollen utlöser ett undantag.</xref:System.Web.UI.WebControls.LinqDataSource> </xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A>       Egenskapen som används för att sortera data måste vara en egenskap som används för att gruppera data eller resultatet av en Aggregeringsfunktion på grupperade data. Om du vill ange hur data sorteras, du kan lägga till ett blanksteg och strängen &quot;Stigande&quot;, &quot;ASC&quot;, &quot;Fallande&quot; eller &quot;DESC&quot; egenskapsnamn i OrderGroupsBy-sträng.       Du kan ange flera egenskaper i egenskapen OrderGroupsBy. Avgränsa varje egenskap med ett kommatecken."
  example:
  - "The following example shows how to group the data by using two properties, and how to sort the grouped data by using one of those properties. The data from a table named `Products` is grouped by using properties named `CategoryID` and `Discontinued`. The grouped data is sorted by the `CategoryID` property.  \n  \n [!code-cs[System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1127_1.aspx)]\n [!code-vb[System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1127_1.aspx)]  \n  \n The following example shows how to group the data by using a property, and how to sort it based on the results of an aggregation function. The data from the `Products` table is grouped by using the `CategoryID` property. It is sorted based on the average of the `UnitPrice` property within each group.  \n  \n [!code-cs[System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy#2](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1127_2.aspx)]\n [!code-vb[System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy#2](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1127_2.aspx)]"
  syntax:
    content: public string OrderGroupsBy { get; set; }
    return:
      type: System.String
      description: "En sträng som används för att skapa Order grupper By-satsen."
  overload: System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.OrderGroupsByParameters
  id: OrderGroupsByParameters
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: OrderGroupsByParameters
  nameWithType: LinqDataSource.OrderGroupsByParameters
  fullName: System.Web.UI.WebControls.LinqDataSource.OrderGroupsByParameters
  type: Property
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "Hämtar de parametrar som används för att skapa Order grupper By-satsen."
  remarks: "Den <xref:System.Web.UI.WebControls.LinqDataSource>kontrollen använder parametrar i samlingen OrderGroupsByParameters för att skapa Order grupper By-satsen vid körning.</xref:System.Web.UI.WebControls.LinqDataSource>       Du lägger till värden samlingen OrderGroupsByParameters endast när måste du ange värden vid körning i ordning grupper By-satsen. Du kan definiera vilka fält som används för att ordna data med hjälp av den <xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy%2A>egenskapen.</xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy%2A>       Du kan ange parametrar i samlingen OrderGroupsByParameters och matchar parametrarna som platshållare i den <xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy%2A>egenskapen.</xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy%2A> Men när du använder den här metoden parametrarna i samlingen OrderGroupsByParameters kan inte representera ett kolumnnamn; de måste representera värden. Du kan ange en parameter till ett värde och sedan jämföra detta värde till en egenskap. Du kan till exempel ordna data baserat på om värden i en egenskap är mindre än värdet för körning som representeras av parametern."
  syntax:
    content: public System.Web.UI.WebControls.ParameterCollection OrderGroupsByParameters { get; }
    return:
      type: System.Web.UI.WebControls.ParameterCollection
      description: "Parametrar som används för att skapa Order grupper By-satsen."
  overload: System.Web.UI.WebControls.LinqDataSource.OrderGroupsByParameters*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.Select
  id: Select
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: Select
  nameWithType: LinqDataSource.Select
  fullName: System.Web.UI.WebControls.LinqDataSource.Select
  type: Property
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "Hämtar eller anger egenskaperna och beräknade värden som ingår i data som hämtas."
  remarks: "Om du inte anger egenskapen Select den <xref:System.Web.UI.WebControls.LinqDataSource>kontrollen hämtar alla egenskaper (kolumner) från dataobjektet.</xref:System.Web.UI.WebControls.LinqDataSource> Du kan använda egenskapen väljer att hämta en delmängd av egenskaper från objektet eller för att beräkna nya värden när data hämtas.       Du kan ange vilka egenskaper du vill hämta genom att ange egenskapen Select namnen på de egenskaper som du vill inkludera i returnerade data.       Om du hämtar en delmängd av egenskaper från dataobjekt, den <xref:System.Web.UI.WebControls.LinqDataSource>kontroll dynamiskt skapar en klass som innehåller de egenskaper som du anger i egenskapen Select.</xref:System.Web.UI.WebControls.LinqDataSource> En klass skapas också dynamiskt om du beräknar egenskaper som inte är egenskaper i dataobjektet. I dessa fall objektet som returnerades från frågan är inte en instans av klassen som anges i den <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A>egenskapen.</xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> I stället måste du använda den `new` metod i egenskapen Select för att indikera att en ny klass returneras från frågan. Till exempel för att returnera endast den `FirstName` och `LastName` egenskaper från ett objekt som innehåller mer än de här egenskaperna för egenskapen väljer `new(FirstName, LastName)`. Den <xref:System.Web.UI.WebControls.LinqDataSource>kontroll dynamiskt skapar den nya klassen som du angav i den `new` metoden.</xref:System.Web.UI.WebControls.LinqDataSource>       Du kan använda den `As` nyckelord för att tilldela ett alias till det markerade värdet. Om du tilldelar ett alias, måste du inkludera ett alias egenskaperna i den `new` metoden. En databunden kontroll som binder till resultaten från den <xref:System.Web.UI.WebControls.LinqDataSource>kontroll måste referera till egenskapen aliaset.</xref:System.Web.UI.WebControls.LinqDataSource> Till exempel om du anger egenskapen Select `new(Region As SalesRegion, Revenue / 1000 As RevenueThousands)`, databundna kontrollen kan komma åt två egenskaper `SalesRegion` och `RevenueThousands`.       Du använder den `new` funktion i egenskapen Select enligt villkor som anges i följande tabell.      | Välj | Användning av nya | Exempel |   |------------|----------------|-------------|   | Enkel egenskap. | `new` behövs inte. | `Select=&quot;Category&quot;`|   | Flera egenskaper. | `new` behövs. | `Select=&quot;new(Cateogry, Name)&quot;`|   | En eller flera egenskaper som har ett alias. | `new` behövs. | `Select=&quot;new(Category As CategoryGroup)&quot;`|       Om du vill aktivera automatisk dataändringar, men du inte vill visa alla egenskaper från dataobjektet, ange inte egenskapen Select. Hantera istället visas via databundna kontrollen. När du använder den <xref:System.Web.UI.WebControls.DetailsView>kontroll eller <xref:System.Web.UI.WebControls.GridView>kontroll, måste du också ange den <xref:System.Web.UI.WebControls.DetailsView.AutoGenerateRows%2A>eller <xref:System.Web.UI.WebControls.GridView.AutoGenerateColumns%2A>egenskapen `false`.</xref:System.Web.UI.WebControls.GridView.AutoGenerateColumns%2A> </xref:System.Web.UI.WebControls.DetailsView.AutoGenerateRows%2A> </xref:System.Web.UI.WebControls.GridView> </xref:System.Web.UI.WebControls.DetailsView> Alla värden som inte visas i den databundna kontrollen lagras i vyn tillstånd. De skickas oförändrade till datakällan vid uppdatering av data utförs.       När du grupperar data i frågan, kan du inkludera sammanställd metoder i egenskapen Select. Du kan använda följande metoder för sammanställd:- `Count()`       -    `Average(` *kolumnen* `)`       -    `Sum(` *kolumnen* `)`       -    `Max(` *kolumnen* `)`       -    `Min(` *kolumnen* `)`       -    `Where(` *villkoret* `)`       -    `Any()`       -    `All(` *villkoret* `)` mer information finns [NIB: LinqDataSource kontrollen översikt över webbserver](http://msdn.microsoft.com/en-us/104cfc3f-7385-47d3-8a51-830dfa791136) och [så: grupp och aggregerade Data med hjälp av LinqDataSource Kontrollen](http://msdn.microsoft.com/en-us/b922cf69-251f-4158-b405-ea960993a1af).       När du grupperar data kan du inkludera `Key` och `It`, som skapas dynamiskt egenskaper i den Markera egenskapen. Den `Key` egenskapen refererar till värden i den eller de egenskaper som användes för att gruppera data. Till exempel om du grupperar en egenskap med namnet `Category`, `Key` egenskapen innehåller varje unikt värde i den `Category` egenskapen. Den `It` egenskapen refererar till en samling av enskilda poster i en gruppering av data. Du kan iterera över den `It` egenskapen för att hämta de individuella poster som har kombinerats i grupperingsåtgärden. Till exempel om du grupperar en egenskap med namnet `Category`, `It` -egenskapen innehåller alla enskilda poster som delar en gemensam värde i den `Category` egenskapen.       Om du inkluderar den `It` nyckelord i egenskapen Select när du grupperar data måste du tilldela ett alias till den `It` nyckelord. Den <xref:System.Web.UI.WebControls.LinqDataSource>kontrollen utlöser ett undantag om `It` inte har ett alias.</xref:System.Web.UI.WebControls.LinqDataSource> Du kan tilldela ett alias till den `Key` nyckelordet, men det krävs inte."
  example:
  - "The following example shows how to set the Select property to a subset of properties in the data object.  \n  \n [!code-cs[System.Web.UI.WebControls.LinqDataSource_Simple#10](~/add/codesnippet/csharp/p-system.web.ui.webcontr_580_1.aspx)]\n [!code-vb[System.Web.UI.WebControls.LinqDataSource_Simple#10](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_580_1.aspx)]  \n  \n The following example shows how to retrieve values in a property that has been used to group data, and to retrieve the average for the grouped records. The `Key` keyword contains the property that has been used for grouping data. In this example, `Key` will contain the shared values from the `ProductCategory` property.  \n  \n [!code-vb[System.Web.UI.WebControls.LinqDataSource_Simple#3](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_580_2.aspx)]\n [!code-cs[System.Web.UI.WebControls.LinqDataSource_Simple#3](~/add/codesnippet/csharp/p-system.web.ui.webcontr_580_2.aspx)]"
  syntax:
    content: public string Select { get; set; }
    return:
      type: System.String
      description: "En sträng som används för att skapa Select-satsen."
  overload: System.Web.UI.WebControls.LinqDataSource.Select*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.Selected
  id: Selected
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: Selected
  nameWithType: LinqDataSource.Selected
  fullName: System.Web.UI.WebControls.LinqDataSource.Selected
  type: Event
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "Inträffar när en åtgärd för hämtning av data är klar."
  remarks: "Hantera händelsen valda vill fånga undantag från data hämtas igen eller undersöka dataobjektet efter hämtning av åtgärden har slutförts. Objektet är tillgängliga från den <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs>objektet som överförs till händelsehanterare.</xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs>"
  syntax:
    content: public event EventHandler<System.Web.UI.WebControls.LinqDataSourceStatusEventArgs> Selected;
    return:
      type: System.EventHandler{System.Web.UI.WebControls.LinqDataSourceStatusEventArgs}
      description: "Som ska läggas till."
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.Selecting
  id: Selecting
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: Selecting
  nameWithType: LinqDataSource.Selecting
  fullName: System.Web.UI.WebControls.LinqDataSource.Selecting
  type: Event
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "Inträffar före en åtgärd för hämtning av data."
  remarks: "Hantera Selecting-händelsen för att kunna utföra följande uppgifter:-ändra parametrarna för hämtning av data.      -Skapa frågan via programmering.      -Ändra värdena för sortering och sidindelning.      -Utföra anpassad sortering och sidindelning.      -Avbryta hämtning av data.       Den <xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs>objektet som överförs till händelsehanterare för den här händelsen innehåller parametrar för åtgärden för hämtning av data.</xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs> Du kan ändra parametrarna i händelsehanteraren Selecting innan frågan körs eller du kan skapa ett nytt resultat och tilldela som att den <xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs.Result%2A>egenskapen.</xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs.Result%2A>       Möjligheten att implementera anpassade sortering och sidindelning i hanterare för den här händelsen kan begränsas av kontrollen som är bunden till <xref:System.Web.UI.WebControls.LinqDataSource>.</xref:System.Web.UI.WebControls.LinqDataSource> Till exempel när kolumnrubriken i en <xref:System.Web.UI.WebControls.GridView>klickar på kontrollen, kontrollen utför automatisk sortering som kan ändra ordning du åsidosättning upprätta i hanterare.</xref:System.Web.UI.WebControls.GridView>       Om ett undantag i en händelsehanterare för Selecting-händelsen, måste du hantera undantag i händelsehanteraren. Undantaget skickas inte till en händelsehanterare för den <xref:System.Web.UI.WebControls.LinqDataSource.Selected>händelse (via den <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A>egenskapen för den <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs>objekt).</xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs> </xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A> </xref:System.Web.UI.WebControls.LinqDataSource.Selected> Den <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A>egenskapen innehåller de undantag som utlöses när Selecting-händelsen.</xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A>"
  example:
  - "The following example shows an event handler for the Selecting event. The handler creates a query that retrieves values from an array of string values in the Web page.  \n  \n [!code-cs[System.Web.UI.WebControls.LinqDataSourceSelectEventArgs#3](~/add/codesnippet/csharp/e-system.web.ui.webcontr_69_1.cs)]\n [!code-vb[System.Web.UI.WebControls.LinqDataSourceSelectEventArgs#3](~/add/codesnippet/visualbasic/e-system.web.ui.webcontr_69_1.vb)]  \n  \n The following example shows how to assign the <xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs.Result%2A> property to the object that is returned from a method that represents a stored procedure.  \n  \n [Visual Basic]  \n  \n```  \nProtected Sub LinqDataSource_Selecting(ByVal sender As Object, _  \n        ByVal e As LinqDataSourceSelectEventArgs)  \n    Dim exampleContext As ExampleDataContext = New ExampleDataContext()  \n    e.Result = exampleContext.GetRegisteredCustomers()  \nEnd Sub  \n```  \n  \n [C#]  \n  \n```  \nprotected void LinqDataSource_Selecting(object sender,   \n        LinqDataSourceSelectEventArgs e)  \n{  \n    ExampleDataContext exampleContext = new ExampleDataContext();  \n    e.Result = exampleContext.GetRegisteredCustomers();  \n}  \n```"
  syntax:
    content: public event EventHandler<System.Web.UI.WebControls.LinqDataSourceSelectEventArgs> Selecting;
    return:
      type: System.EventHandler{System.Web.UI.WebControls.LinqDataSourceSelectEventArgs}
      description: "Som ska läggas till."
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.SelectParameters
  id: SelectParameters
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: SelectParameters
  nameWithType: LinqDataSource.SelectParameters
  fullName: System.Web.UI.WebControls.LinqDataSource.SelectParameters
  type: Property
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "Hämtar de parametrar som används under en åtgärd för hämtning av data."
  remarks: "Den <xref:System.Web.UI.WebControls.LinqDataSource>kontrollen använder parametrarna i SelectParameters-samlingen för att skapa Select-satsen vid körning.</xref:System.Web.UI.WebControls.LinqDataSource> Du lägga till parametrar i SelectParameters-samlingen när du vill använda värdena för körning i Select-satsen. Exempelvis kan du lägga till en parameter till samlingen SelectParameters som representerar en egenskap i profilen. Du kan sedan använda den egenskapen och ett värde från datakällan för att beräkna ett nytt värde.       Du behöver inte använda SelectParameters samlingen om du inte behöver ange ett värde vid körning i Select-satsen. Du kan definiera de egenskaper som hämtas i den <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A>egenskapen.</xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> Till exempel för att returnera den `FirstName` och `LastName` värden från en databastabell <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A>till &quot;Förnamn, Efternamn&quot; utan några parametrar.</xref:System.Web.UI.WebControls.LinqDataSource.Select%2A>       Om du vill ange värden i samlingen SelectParameters du lägger till en platshållare i den <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A>-egenskapen för den namngivna parametern.</xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> I Select-instruktionen, inleder varje parameternamn med den @-tecken.       Du kan inte använda en parameter i SelectParameters-samlingen för att representera ett egenskapsnamn. Med den <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A>egenskapen till namnet på en egenskap, skapa en händelsehanterare för den <xref:System.Web.UI.WebControls.LinqDataSource.Selecting>händelse och anpassa den <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A>egenskapen.</xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> </xref:System.Web.UI.WebControls.LinqDataSource.Selecting> </xref:System.Web.UI.WebControls.LinqDataSource.Select%2A>"
  example:
  - "The following example shows how to use a user-supplied value to calculate a value in the returned data. The user can enter a value in the text box that represents the number of manufacturing days. That value is divided by a value from a database that represents the number of days to manufacture a product. The returned value indicates how many products can be manufactured during the specified number of days. The user's input is included in the Select command through the SelectParameters collection.  \n  \n [!code-vb[System.Web.UI.WebControls.LinqDataSource.SelectParameters#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_129_1.aspx)]\n [!code-cs[System.Web.UI.WebControls.LinqDataSource.SelectParameters#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_129_1.aspx)]"
  syntax:
    content: public System.Web.UI.WebControls.ParameterCollection SelectParameters { get; }
    return:
      type: System.Web.UI.WebControls.ParameterCollection
      description: "Parametrar som används för att skapa Select-satsen."
  overload: System.Web.UI.WebControls.LinqDataSource.SelectParameters*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.StoreOriginalValuesInViewState
  id: StoreOriginalValuesInViewState
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: StoreOriginalValuesInViewState
  nameWithType: LinqDataSource.StoreOriginalValuesInViewState
  fullName: System.Web.UI.WebControls.LinqDataSource.StoreOriginalValuesInViewState
  type: Property
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "Hämtar eller anger ett värde som anger om data från datakällan ska lagras i vyn tillstånd för att se till att data inte har ändrats av en annan process innan den uppdateras eller tas bort."
  remarks: "Som standard när Uppdatera och ta bort har aktiverats på <xref:System.Web.UI.WebControls.LinqDataSource>kontrollen lagrar de ursprungliga värdena för alla poster i vyn tillstånd.</xref:System.Web.UI.WebControls.LinqDataSource> Den <xref:System.Web.UI.WebControls.LinqDataSource>kontrollen lagrar värden för alla primära nycklar och alla egenskaper är inte deklarerad med `UpdateCheck.Never` i den `Column` attribut.</xref:System.Web.UI.WebControls.LinqDataSource> Du ställer in den `UpdateCheck` -egenskapen för den `Column` attribut i den [!INCLUDE[vs_ordesigner_short](~/add/includes/vs-ordesigner-short-md.md)].       Innan LINQ to SQL uppdaterar eller tar bort data, kontrollerar värdena i vyn tillstånd mot de aktuella värdena i datakällan. Om värdena inte matchar har posten i datakällan ändrats. I så fall LINQ to SQL genererar ett undantag och inte fortsätta med uppdateringen och åtgärden ta bort. Läs mer om LINQ to SQL [LINQ to SQL](~/add/includes/ajax-current-ext-md.md).       Spara de ursprungliga värdena i vyn tillstånd kan orsaka sidstorleken för att bli onödigt stora och kan exponera känslig data till en obehörig användare. Du kan inaktivera lagring av värden i vyn tillstånd genom att ange egenskapen StoreOriginalValuesInViewState `false`. Om du gör det måste du ange egna sätt att se till att data inte har ändrats. Om du anger egenskapen StoreOriginalValuesInViewState `false`, de ursprungliga värdena sparas inte i visningsstatus för databunden kontroll. I så fall går inte att LINQ to SQL verifiera integriteten hos data. LINQ till SQL genereras ett undantagsfel som anger en datakonflikt, även om data i datakällan faktiskt inte har ändrats.       Om den underliggande datakällan innehåller något tidsstämpelsfält som uppdateras automatiskt under en uppdatering kan lagra du endast värdet i vyn tillstånd. I så fall tidsstämpel-egenskapen i enhetsklassen anges till `IsVersion=true` och alla egenskaper är inställda på att `UpdateCheck.Never`. Eftersom en tidsstämpelsfält uppdateras automatiskt av databasen varje gång data i posten ändras, anger LINQ to SQL från värdet om data har ändrats. Detta minskar storleken på Visa status och inga känsliga data exponeras. LINQ till SQL kommer sökning efter datakonsekvens genom att jämföra tidsstämpelvärdet i vyn tillstånd med det tidsstämpelvärdet i databasen. Mer information finns i [genomgång: med en tidsstämpel med kontrollen LinqDataSource för att kontrollera dataintegriteten](http://msdn.microsoft.com/en-us/e7700162-4f05-4130-81f7-3be1361027fa)."
  syntax:
    content: public bool StoreOriginalValuesInViewState { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Om du värdena kommer att lagras i vyn tillstånd; Annars <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. Standardvärdet är <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>."
  overload: System.Web.UI.WebControls.LinqDataSource.StoreOriginalValuesInViewState*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.System#Web#DynamicData#IDynamicDataSource#ContextType
  id: System#Web#DynamicData#IDynamicDataSource#ContextType
  isEii: true
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: System.Web.DynamicData.IDynamicDataSource.ContextType
  nameWithType: LinqDataSource.System.Web.DynamicData.IDynamicDataSource.ContextType
  fullName: System.Web.UI.WebControls.LinqDataSource.System.Web.DynamicData.IDynamicDataSource.ContextType
  type: Property
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "En beskrivning av den här medlemmen finns <xref href=&quot;System.Web.DynamicData.IDynamicDataSource&quot;> </xref>."
  remarks: "Den här medlemmen är en implementering för medlem av explicit gränssnitt. Det kan användas endast när den <xref:System.Web.UI.WebControls.LinqDataSource>instans omvandlas till ett <xref:System.Web.DynamicData.IDynamicDataSource>gränssnitt.</xref:System.Web.DynamicData.IDynamicDataSource> </xref:System.Web.UI.WebControls.LinqDataSource>"
  syntax:
    content: Type System.Web.DynamicData.IDynamicDataSource.ContextType { get; set; }
    return:
      type: System.Type
      description: "Den typ som är associerad med klassen."
  overload: System.Web.UI.WebControls.LinqDataSource.System#Web#DynamicData#IDynamicDataSource#ContextType*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.System#Web#DynamicData#IDynamicDataSource#EntitySetName
  id: System#Web#DynamicData#IDynamicDataSource#EntitySetName
  isEii: true
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: System.Web.DynamicData.IDynamicDataSource.EntitySetName
  nameWithType: LinqDataSource.System.Web.DynamicData.IDynamicDataSource.EntitySetName
  fullName: System.Web.UI.WebControls.LinqDataSource.System.Web.DynamicData.IDynamicDataSource.EntitySetName
  type: Property
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "En beskrivning av den här medlemmen finns <xref href=&quot;System.Web.DynamicData.IDynamicDataSource&quot;> </xref>."
  remarks: "Den här medlemmen är en implementering för medlem av explicit gränssnitt. Det kan användas endast när den <xref:System.Web.UI.WebControls.LinqDataSource>instans omvandlas till ett <xref:System.Web.DynamicData.IDynamicDataSource>gränssnitt.</xref:System.Web.DynamicData.IDynamicDataSource> </xref:System.Web.UI.WebControls.LinqDataSource>"
  syntax:
    content: string System.Web.DynamicData.IDynamicDataSource.EntitySetName { get; set; }
    return:
      type: System.String
      description: "Namnet på entiteten."
  overload: System.Web.UI.WebControls.LinqDataSource.System#Web#DynamicData#IDynamicDataSource#EntitySetName*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.TableName
  id: TableName
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: TableName
  nameWithType: LinqDataSource.TableName
  fullName: System.Web.UI.WebControls.LinqDataSource.TableName
  type: Property
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "Hämtar eller anger namnet på egenskapen eller fältet i datakontextklass som representerar en insamling av data."
  remarks: "Ange egenskapen TableName till namnet på egenskapen eller fältet som representerar de data som du vill hämta. När du ansluter till en databastabell, är namnet på egenskapen vanligtvis samma som namnet på tabellen. Ange egenskapen TableName till namnet på egenskapen eller fältet som returnerar datainsamlingen när du ansluter till en InMemory-datainsamling.       Du kan tilldela en egenskap som returnerar en typ till egenskapen TableName för hämtning av åtgärder. Om objektet som representeras av egenskapen inte implementerar <xref:System.Collections.IEnumerable>, <xref:System.Web.UI.WebControls.LinqDataSource>kontroll radbryts automatiskt objektet i en instans av en <xref:System.Collections.IEnumerable>objektet.</xref:System.Collections.IEnumerable> </xref:System.Web.UI.WebControls.LinqDataSource> </xref:System.Collections.IEnumerable>       Om du vill aktivera automatisk uppdatering infoga eller ta bort den klass som har tilldelats <xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A>egenskapen måste vara härledd från <xref:System.Data.Linq.DataContext>och som har tilldelats egenskapen måste vara härledd från <xref:System.Data.Linq.Table%601>.</xref:System.Data.Linq.Table%601> TableName-egenskapen</xref:System.Data.Linq.DataContext> </xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A>       Information om hur du väljer data från en instans av en klass, finns det <xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs.Result%2A>egenskap.</xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs.Result%2A>"
  example:
  - "The following example shows two <xref:System.Web.UI.WebControls.LinqDataSource> controls. In one <xref:System.Web.UI.WebControls.LinqDataSource> control, the TableName property is set to a property in a class. That property returns an array of strings. In the other <xref:System.Web.UI.WebControls.LinqDataSource> control, the TableName property is set to a property that represents a database table.  \n  \n [!code-vb[System.Web.UI.WebControls.LinqDataSource_Overview#2](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_811_1.aspx)]\n [!code-cs[System.Web.UI.WebControls.LinqDataSource_Overview#2](~/add/codesnippet/csharp/p-system.web.ui.webcontr_811_1.aspx)]  \n  \n The class named `ExampleDataContext` that represents the database table is not shown in this example. For this example to work, you must create this class by adding a LINQ to SQL class named Example.dbml and dragging a table named Movie onto the [!INCLUDE[vs_ordesigner_short](~/add/includes/vs-ordesigner-short-md.md)]. A class named `ExampleDataContext` with a property named `Movies` is generated.  \n  \n The following example shows the class named `MovieLibrary` that is referenced in the <xref:System.Web.UI.WebControls.LinqDataSource> control.  \n  \n [!code-cs[System.Web.UI.WebControls.LinqDataSource_Overview#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_811_2.cs)]\n [!code-vb[System.Web.UI.WebControls.LinqDataSource_Overview#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_811_2.vb)]"
  syntax:
    content: public string TableName { get; set; }
    return:
      type: System.String
      description: "En sträng som innehåller namnet på den egenskap som innehåller datainsamlingen."
  overload: System.Web.UI.WebControls.LinqDataSource.TableName*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.Update(System.Collections.IDictionary,System.Collections.IDictionary,System.Collections.IDictionary)
  id: Update(System.Collections.IDictionary,System.Collections.IDictionary,System.Collections.IDictionary)
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: Update(IDictionary,IDictionary,IDictionary)
  nameWithType: LinqDataSource.Update(IDictionary,IDictionary,IDictionary)
  fullName: System.Web.UI.WebControls.LinqDataSource.Update(IDictionary,IDictionary,IDictionary)
  type: Method
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "Utför en update-åtgärd."
  remarks: "Vanligtvis behöver du inte anropa metoden Update från din kod. Databundna kontrollen kommer automatiskt att anropa metoden Update när användaren vidtar åtgärder för att uppdatera en post. Du kan explicit anropa metoden Update när du vill skapa en egen process för uppdatering av data."
  example:
  - "The following example shows how to programmatically update a record in the data source after the user clicks a button. The code passes a <xref:System.Collections.Specialized.ListDictionary> object that contains the key value, a <xref:System.Collections.Specialized.ListDictionary> object that contains the original values, and a <xref:System.Collections.Specialized.ListDictionary> object that contains the new values to the Update method.  \n  \n [!code-cs[System.Web.UI.WebControls.LinqDataSource.Update#1](~/add/codesnippet/csharp/6a1b9704-8770-4c58-8934-_1.cs)]\n [!code-vb[System.Web.UI.WebControls.LinqDataSource.Update#1](~/add/codesnippet/visualbasic/6a1b9704-8770-4c58-8934-_1.vb)]  \n  \n The following example shows the markup for the previous example.  \n  \n [!code-cs[System.Web.UI.WebControls.LinqDataSource.Update#2](~/add/codesnippet/csharp/6a1b9704-8770-4c58-8934-_2.aspx)]\n [!code-vb[System.Web.UI.WebControls.LinqDataSource.Update#2](~/add/codesnippet/visualbasic/6a1b9704-8770-4c58-8934-_2.aspx)]"
  syntax:
    content: public int Update (System.Collections.IDictionary keys, System.Collections.IDictionary values, System.Collections.IDictionary oldValues);
    parameters:
    - id: keys
      type: System.Collections.IDictionary
      description: "Raden nyckelvärdena för posterna som ska uppdateras."
    - id: values
      type: System.Collections.IDictionary
      description: "Radvärden uppdateras i datakällan."
    - id: oldValues
      type: System.Collections.IDictionary
      description: "Radvärden som utvärderas för att identifiera konflikter."
    return:
      type: System.Int32
      description: "Antalet poster som påverkas av uppdateringen."
  overload: System.Web.UI.WebControls.LinqDataSource.Update*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.Updated
  id: Updated
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: Updated
  nameWithType: LinqDataSource.Updated
  fullName: System.Web.UI.WebControls.LinqDataSource.Updated
  type: Event
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "Inträffar när en update-åtgärden har slutförts."
  remarks: "Hantera händelsen uppdaterade att fånga undantag från uppdateringen eller för att undersöka värden för utdataparametrar när uppdateringen har slutförts. Utdataparametrarna är tillgängliga från den <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs>objektet som överförs till händelsehanterare.</xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs>"
  syntax:
    content: public event EventHandler<System.Web.UI.WebControls.LinqDataSourceStatusEventArgs> Updated;
    return:
      type: System.EventHandler{System.Web.UI.WebControls.LinqDataSourceStatusEventArgs}
      description: "Som ska läggas till."
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.UpdateParameters
  id: UpdateParameters
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: UpdateParameters
  nameWithType: LinqDataSource.UpdateParameters
  fullName: System.Web.UI.WebControls.LinqDataSource.UpdateParameters
  type: Property
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "Den här samlingen används inte av den <xref href=&quot;System.Web.UI.WebControls.LinqDataSource&quot;> </xref> klass."
  syntax:
    content: public System.Web.UI.WebControls.ParameterCollection UpdateParameters { get; }
    return:
      type: System.Web.UI.WebControls.ParameterCollection
      description: "En samling parametrar."
  overload: System.Web.UI.WebControls.LinqDataSource.UpdateParameters*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.Updating
  id: Updating
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: Updating
  nameWithType: LinqDataSource.Updating
  fullName: System.Web.UI.WebControls.LinqDataSource.Updating
  type: Event
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "Inträffar före uppdatering."
  remarks: "Hantera händelsen uppdatera för att validera objektet som ska uppdateras, för att undersöka datavalidering från dataklassen att ändra ett värde innan uppdateringen eller avbryta uppdateringen. Den <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs>objektet som överförs till händelsehanterare innehåller både det ursprungliga objektet och det uppdaterade objektet.</xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs>       Om ett verifieringsfel uppstår under uppdateringen <xref:System.Web.UI.WebControls.LinqDataSourceInsertEventArgs>objektet innehåller validering-undantag som utlösts av klassen data.</xref:System.Web.UI.WebControls.LinqDataSourceInsertEventArgs> Ett valideringsfel inträffar om ett värde som ska uppdateras inte matchar typen för egenskapen i dataklassen, eller om den inte klarar anpassade verifieringen. I en händelsehanterare för händelsen uppdaterar du hämta validering undantag och vidta lämpliga åtgärder.       Om ett undantag i en händelsehanterare för händelsen uppdatering måste du hantera undantag i händelsehanteraren. Undantaget skickas inte till en händelsehanterare för den <xref:System.Web.UI.WebControls.LinqDataSource.Updated>händelse (via den <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A>egenskapen för den <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs>objekt).</xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs> </xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A> </xref:System.Web.UI.WebControls.LinqDataSource.Updated> Den <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A>egenskapen innehåller de undantag som utlöses efter händelsen Updating.</xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A>"
  example:
  - "The following example shows an event handler for the Updating event. The code compares properties from the <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.OriginalObject%2A> property and the <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.NewObject%2A> property to see whether a value has changed. If the value has changed, a value of the <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.NewObject%2A> property is set to `true`.  \n  \n [!code-vb[System.Web.UI.WebControls.LinqDataSource.Updating#1](~/add/codesnippet/visualbasic/e-system.web.ui.webcontr_16_1.vb)]\n [!code-cs[System.Web.UI.WebControls.LinqDataSource.Updating#1](~/add/codesnippet/csharp/e-system.web.ui.webcontr_16_1.cs)]  \n  \n The following example shows an event handler for the Updating event that retrieves validation exceptions.  \n  \n```vb#  \nProtected Sub LinqDataSource_Updating(ByVal sender As Object, _  \n        ByVal e As LinqDataSourceUpdateEventArgs)  \n    If (e.Exception IsNot Nothing) Then  \n        For Each innerException As KeyValuePair(Of String, Exception) _  \n               In e.Exception.InnerExceptions  \n            Label1.Text &= innerException.Key & \": \" & _  \n                innerException.Value.Message & \"<br />\"  \n        Next  \n        e.ExceptionHandled = True  \n    End If  \nEnd Sub  \n```  \n  \n [C#]  \n  \n```  \nprotected void LinqDataSource_Updating(object sender,   \n        LinqDataSourceUpdateEventArgs e)  \n{  \n    if (e.Exception != null)  \n    {  \n        foreach (KeyValuePair<string, Exception> innerException in   \n             e.Exception.InnerExceptions)  \n        {  \n        Label1.Text += innerException.Key + \": \" +   \n            innerException.Value.Message + \"<br />\";  \n        }  \n        e.ExceptionHandled = true;  \n    }  \n}  \n```  \n  \n The previous example retrieves validation exceptions. An exception might be thrown if a value does not match the type of the property. It might also be thrown from a customized check such as the one in the following example. The `OnAgeChanging` method checks that the number for the `Age` property is not negative.  \n  \n```c#  \npartial void  OnAgeChanging(int? value)  \n{  \n    if (value < 0)  \n    {  \n        throw new Exception(\"Age cannot be a negative number.\");  \n    }  \n}  \n```  \n  \n```vb#  \nPrivate Sub OnAgeChanging(ByVal value As System.Nullable(Of Integer))  \n    If (value < 0) Then  \n        Throw New Exception(\"Age cannot be a negative number.\")  \n    End If  \nEnd Sub  \n```"
  syntax:
    content: public event EventHandler<System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs> Updating;
    return:
      type: System.EventHandler{System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs}
      description: "Som ska läggas till."
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.Where
  id: Where
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: Where
  nameWithType: LinqDataSource.Where
  fullName: System.Web.UI.WebControls.LinqDataSource.Where
  type: Property
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "Hämtar eller anger ett värde som anger vilka förutsättningar måste vara true för en post som ska inkluderas i data som hämtas."
  remarks: "You use the Where property to specify the conditions for the record to be returned from a query. The syntax for the Where property is the same as the syntax for a LINQ Where clause in C#.  \n  \n You specify an expression that results in a Boolean value, and if the expression evaluates to `true` for a given row, the row is included in the result set. Expressions are composed of column names, comparison operators, and values to compare to, as shown in the following example:  \n  \n```  \n<asp:LinqDataSource ... Where=\"Price > 50\"...>  \n```  \n  \n To specify multiple expressions linked by logical `AND` or `OR` operators, you use `&&` as a logical AND operator and `||` as a logical OR operator, as shown in the following example:  \n  \n```  \n<asp:LinqDataSource ... Where=\"Price > 50 && Price < 100\"...>  \n<asp:LinqDataSource ... Where=\"Price <= 50 || Price >= 100\"...>  \n```  \n  \n If you want to test a property against a literal string value, the literal string value must be enclosed in double quotation marks. To do this in markup, enclose the Where clause value in single quotation marks, as shown in the following example:  \n  \n```  \n<asp:LinqDataSource ... Where='Category = \"Sports\"' ... >  \n```  \n  \n To test against a literal string value in code, use escape characters that are appropriate to the language you are using in order to insert double quotation marks, as shown in the following example:  \n  \n```vb#  \nLinqDataSource1.Where = \"Category = \"\"Sports\"\"\"  \n```  \n  \n```c#  \nLinqDataSource1.Where = \"Category = \\\"Sports\\\"\";  \n```  \n  \n If you want to test whether a string is greater than or less than another string, you must use methods of the <xref:System.String> class instead of using `<` or `>` operators between the column name and the string value. The following examples show how to select rows that have Category values that are less than, less than or equal to, greater than, or greater than or equal to \"Sports\":  \n  \n```  \n<asp:LinqDataSource ... Where='Category.CompareTo(\"Sports\") < 0' ... >  \n<asp:LinqDataSource ... Where='Category.CompareTo(\"Sports\") <= 0' ... >  \n<asp:LinqDataSource ... Where='Category.CompareTo(\"Sports\") > 0' ... >  \n<asp:LinqDataSource ... Where='Category.CompareTo(\"Sports\") >= 0' ... >  \n```  \n  \n You can also use other methods of the <xref:System.String> class, such as <xref:System.String.StartsWith%2A>, <xref:System.String.EndsWith%2A>, and <xref:System.String.Contains%2A>. For more information about how to compare strings, see [Comparing Strings](~/add/includes/ajax-current-ext-md.md). For more information about Where clause syntax, see [C# Operators](~/add/includes/ajax-current-ext-md.md) and [where clause](~/add/includes/ajax-current-ext-md.md).  \n  \n In addition to filtering based on static values that you define when you create the Web page, you can filter based on dynamic values that are evaluated at run time. In that case, you include a named parameter in the Where property that acts as a placeholder for the value. You then add a parameter that has the matching name to the <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A> collection.  \n  \n Alternatively, you can set the <xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateWhereClause%2A> property to `true` and define the parameters in the <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A> collection. When the <xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateWhereClause%2A> property is `true`, you do not have to include the named parameters in the Where property. Instead, the <xref:System.Web.UI.WebControls.LinqDataSource> control automatically generates the Where clause from the parameters in the <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A> property.  \n  \n For more information about how to filter data, see [Walkthrough: Selecting and Filtering a Subset of Data with the LinqDataSource and GridView Controls](http://msdn.microsoft.com/en-us/c1cca3e8-86e4-4e69-a29f-1c05b91f2205)."
  example:
  - "The following example shows how to filter the data returned from a query based on a static condition.  \n  \n [!code-vb[System.Web.UI.WebControls.LinqDataSource_Simple#5](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_778_1.aspx)]\n [!code-cs[System.Web.UI.WebControls.LinqDataSource_Simple#5](~/add/codesnippet/csharp/p-system.web.ui.webcontr_778_1.aspx)]  \n  \n The following example shows how to filter the data based on a value that is provided by the user at run time. In this example a <xref:System.Web.UI.WebControls.DropDownList> control and a <xref:System.Web.UI.WebControls.GridView> control are displayed on the page. When the user selects one of the values in the <xref:System.Web.UI.WebControls.DropDownList> control, the <xref:System.Web.UI.WebControls.LinqDataSource> control selects from the `Products` table only rows that have `UserPrice` values equal to the selected value. The <xref:System.Web.UI.WebControls.GridView> control then displays the filtered data.  \n  \n [!code-vb[System.Web.UI.WebControls.LinqDataSource_Simple#6](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_778_2.aspx)]\n [!code-cs[System.Web.UI.WebControls.LinqDataSource_Simple#6](~/add/codesnippet/csharp/p-system.web.ui.webcontr_778_2.aspx)]"
  syntax:
    content: public string Where { get; set; }
    return:
      type: System.String
      description: "En sträng som används för att skapa Where satsen."
  overload: System.Web.UI.WebControls.LinqDataSource.Where*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.WhereParameters
  id: WhereParameters
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: WhereParameters
  nameWithType: LinqDataSource.WhereParameters
  fullName: System.Web.UI.WebControls.LinqDataSource.WhereParameters
  type: Property
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "Hämtar den parametermängd som används för att skapa Where satsen."
  remarks: "Den <xref:System.Web.UI.WebControls.LinqDataSource>kontrollen använder parametrar i samlingen WhereParameters för att skapa Where-satsen på körning.</xref:System.Web.UI.WebControls.LinqDataSource> Du lägger till parametrar till samlingen WhereParameters när du vill att ange en eller flera av villkoren i Where-satsen. Du kan till exempel söka en databastabell för poster med ett efternamn som är lika med värdet för en <xref:System.Web.UI.WebControls.TextBox>kontroll.</xref:System.Web.UI.WebControls.TextBox> I så fall kan du lägga till en parameter till samlingen WhereParameters för värdet.       Om du inte behöver ange ett värde vid körning i Where-satsen, du behöver inte använda WhereParameters-samlingen. Du kan definiera fält om du vill hämta den <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A>egenskapen.</xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> Till exempel för att returnera värden från en databastabell där `LastName` är lika med &quot;Adams&quot; i markeringen, ange den <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A>egenskapen `&quot;LastName = &quot;Adams&quot;&quot;` utan några parametrar.</xref:System.Web.UI.WebControls.LinqDataSource.Where%2A>       Om du vill ange värden i samlingen WhereParameters du tilldela ett namn till varje parameter och sedan lägga till en platshållare i den <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A>egenskapen för denna parameter.</xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> I Where-satsen, inleder varje parameternamn med den @-tecken."
  example:
  - "The following example shows how to use the WhereParameters collection to dynamically create the Where clause. The <xref:System.Web.UI.WebControls.LinqDataSource> control returns all the records with a value in the `Price` column that is greater than the value selected by the user in a <xref:System.Web.UI.WebControls.DropDownList> control.  \n  \n [!code-vb[System.Web.UI.WebControls.LinqDataSource_Simple#6](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_594_1.aspx)]\n [!code-cs[System.Web.UI.WebControls.LinqDataSource_Simple#6](~/add/codesnippet/csharp/p-system.web.ui.webcontr_594_1.aspx)]"
  syntax:
    content: public System.Web.UI.WebControls.ParameterCollection WhereParameters { get; }
    return:
      type: System.Web.UI.WebControls.ParameterCollection
      description: "En samling parametrar som används för att skapa Where-sats i den <xref:System.Web.UI.WebControls.LinqDataSource.Where*>egenskapen.</xref:System.Web.UI.WebControls.LinqDataSource.Where*>"
  overload: System.Web.UI.WebControls.LinqDataSource.WhereParameters*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Web.UI.WebControls.ContextDataSource
  isExternal: false
  name: System.Web.UI.WebControls.ContextDataSource
- uid: System.Web.UI.WebControls.LinqDataSource.#ctor
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: LinqDataSource()
  nameWithType: LinqDataSource.LinqDataSource()
  fullName: System.Web.UI.WebControls.LinqDataSource.LinqDataSource()
- uid: System.Web.UI.WebControls.LinqDataSource.AutoGenerateOrderByClause
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: AutoGenerateOrderByClause
  nameWithType: LinqDataSource.AutoGenerateOrderByClause
  fullName: System.Web.UI.WebControls.LinqDataSource.AutoGenerateOrderByClause
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Web.UI.WebControls.LinqDataSource.AutoGenerateWhereClause
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: AutoGenerateWhereClause
  nameWithType: LinqDataSource.AutoGenerateWhereClause
  fullName: System.Web.UI.WebControls.LinqDataSource.AutoGenerateWhereClause
- uid: System.Web.UI.WebControls.LinqDataSource.AutoPage
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: AutoPage
  nameWithType: LinqDataSource.AutoPage
  fullName: System.Web.UI.WebControls.LinqDataSource.AutoPage
- uid: System.Web.UI.WebControls.LinqDataSource.AutoSort
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: AutoSort
  nameWithType: LinqDataSource.AutoSort
  fullName: System.Web.UI.WebControls.LinqDataSource.AutoSort
- uid: System.Web.UI.WebControls.LinqDataSource.ContextCreated
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: ContextCreated
  nameWithType: LinqDataSource.ContextCreated
  fullName: System.Web.UI.WebControls.LinqDataSource.ContextCreated
- uid: System.EventHandler{System.Web.UI.WebControls.LinqDataSourceStatusEventArgs}
  parent: System
  isExternal: true
  name: EventHandler<LinqDataSourceStatusEventArgs>
  nameWithType: EventHandler<LinqDataSourceStatusEventArgs>
  fullName: System.EventHandler<System.Web.UI.WebControls.LinqDataSourceStatusEventArgs>
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: EventHandler<System.Web.UI.WebControls.LinqDataSourceStatusEventArgs>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Web.UI.WebControls.LinqDataSourceStatusEventArgs
    name: LinqDataSourceStatusEventArgs
    nameWithType: LinqDataSourceStatusEventArgs
    fullName: LinqDataSourceStatusEventArgs
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Web.UI.WebControls.LinqDataSource.ContextCreating
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: ContextCreating
  nameWithType: LinqDataSource.ContextCreating
  fullName: System.Web.UI.WebControls.LinqDataSource.ContextCreating
- uid: System.EventHandler{System.Web.UI.WebControls.LinqDataSourceContextEventArgs}
  parent: System
  isExternal: true
  name: EventHandler<LinqDataSourceContextEventArgs>
  nameWithType: EventHandler<LinqDataSourceContextEventArgs>
  fullName: System.EventHandler<System.Web.UI.WebControls.LinqDataSourceContextEventArgs>
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: EventHandler<System.Web.UI.WebControls.LinqDataSourceContextEventArgs>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Web.UI.WebControls.LinqDataSourceContextEventArgs
    name: LinqDataSourceContextEventArgs
    nameWithType: LinqDataSourceContextEventArgs
    fullName: LinqDataSourceContextEventArgs
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Web.UI.WebControls.LinqDataSource.ContextDisposing
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: ContextDisposing
  nameWithType: LinqDataSource.ContextDisposing
  fullName: System.Web.UI.WebControls.LinqDataSource.ContextDisposing
- uid: System.EventHandler{System.Web.UI.WebControls.LinqDataSourceDisposeEventArgs}
  parent: System
  isExternal: true
  name: EventHandler<LinqDataSourceDisposeEventArgs>
  nameWithType: EventHandler<LinqDataSourceDisposeEventArgs>
  fullName: System.EventHandler<System.Web.UI.WebControls.LinqDataSourceDisposeEventArgs>
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: EventHandler<System.Web.UI.WebControls.LinqDataSourceDisposeEventArgs>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Web.UI.WebControls.LinqDataSourceDisposeEventArgs
    name: LinqDataSourceDisposeEventArgs
    nameWithType: LinqDataSourceDisposeEventArgs
    fullName: LinqDataSourceDisposeEventArgs
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Web.UI.WebControls.LinqDataSource.ContextTypeName
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: ContextTypeName
  nameWithType: LinqDataSource.ContextTypeName
  fullName: System.Web.UI.WebControls.LinqDataSource.ContextTypeName
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Web.UI.WebControls.LinqDataSource.CreateQueryableView
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: CreateQueryableView()
  nameWithType: LinqDataSource.CreateQueryableView()
  fullName: System.Web.UI.WebControls.LinqDataSource.CreateQueryableView()
- uid: System.Web.UI.WebControls.QueryableDataSourceView
  parent: System.Web.UI.WebControls
  isExternal: false
  name: QueryableDataSourceView
  nameWithType: QueryableDataSourceView
  fullName: System.Web.UI.WebControls.QueryableDataSourceView
- uid: System.Web.UI.WebControls.LinqDataSource.CreateView
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: CreateView()
  nameWithType: LinqDataSource.CreateView()
  fullName: System.Web.UI.WebControls.LinqDataSource.CreateView()
- uid: System.Web.UI.WebControls.LinqDataSourceView
  parent: System.Web.UI.WebControls
  isExternal: false
  name: LinqDataSourceView
  nameWithType: LinqDataSourceView
  fullName: System.Web.UI.WebControls.LinqDataSourceView
- uid: System.Web.UI.WebControls.LinqDataSource.Delete(System.Collections.IDictionary,System.Collections.IDictionary)
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: Delete(IDictionary,IDictionary)
  nameWithType: LinqDataSource.Delete(IDictionary,IDictionary)
  fullName: System.Web.UI.WebControls.LinqDataSource.Delete(IDictionary,IDictionary)
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Collections.IDictionary
  parent: System.Collections
  isExternal: true
  name: IDictionary
  nameWithType: IDictionary
  fullName: System.Collections.IDictionary
- uid: System.Web.UI.WebControls.LinqDataSource.Deleted
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: Deleted
  nameWithType: LinqDataSource.Deleted
  fullName: System.Web.UI.WebControls.LinqDataSource.Deleted
- uid: System.Web.UI.WebControls.LinqDataSource.DeleteParameters
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: DeleteParameters
  nameWithType: LinqDataSource.DeleteParameters
  fullName: System.Web.UI.WebControls.LinqDataSource.DeleteParameters
- uid: System.Web.UI.WebControls.ParameterCollection
  parent: System.Web.UI.WebControls
  isExternal: false
  name: ParameterCollection
  nameWithType: ParameterCollection
  fullName: System.Web.UI.WebControls.ParameterCollection
- uid: System.Web.UI.WebControls.LinqDataSource.Deleting
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: Deleting
  nameWithType: LinqDataSource.Deleting
  fullName: System.Web.UI.WebControls.LinqDataSource.Deleting
- uid: System.EventHandler{System.Web.UI.WebControls.LinqDataSourceDeleteEventArgs}
  parent: System
  isExternal: true
  name: EventHandler<LinqDataSourceDeleteEventArgs>
  nameWithType: EventHandler<LinqDataSourceDeleteEventArgs>
  fullName: System.EventHandler<System.Web.UI.WebControls.LinqDataSourceDeleteEventArgs>
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: EventHandler<System.Web.UI.WebControls.LinqDataSourceDeleteEventArgs>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Web.UI.WebControls.LinqDataSourceDeleteEventArgs
    name: LinqDataSourceDeleteEventArgs
    nameWithType: LinqDataSourceDeleteEventArgs
    fullName: LinqDataSourceDeleteEventArgs
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Web.UI.WebControls.LinqDataSource.EnableDelete
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: EnableDelete
  nameWithType: LinqDataSource.EnableDelete
  fullName: System.Web.UI.WebControls.LinqDataSource.EnableDelete
- uid: System.Web.UI.WebControls.LinqDataSource.EnableInsert
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: EnableInsert
  nameWithType: LinqDataSource.EnableInsert
  fullName: System.Web.UI.WebControls.LinqDataSource.EnableInsert
- uid: System.Web.UI.WebControls.LinqDataSource.EnableObjectTracking
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: EnableObjectTracking
  nameWithType: LinqDataSource.EnableObjectTracking
  fullName: System.Web.UI.WebControls.LinqDataSource.EnableObjectTracking
- uid: System.Web.UI.WebControls.LinqDataSource.EnableUpdate
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: EnableUpdate
  nameWithType: LinqDataSource.EnableUpdate
  fullName: System.Web.UI.WebControls.LinqDataSource.EnableUpdate
- uid: System.Web.UI.WebControls.LinqDataSource.GroupBy
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: GroupBy
  nameWithType: LinqDataSource.GroupBy
  fullName: System.Web.UI.WebControls.LinqDataSource.GroupBy
- uid: System.Web.UI.WebControls.LinqDataSource.GroupByParameters
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: GroupByParameters
  nameWithType: LinqDataSource.GroupByParameters
  fullName: System.Web.UI.WebControls.LinqDataSource.GroupByParameters
- uid: System.Web.UI.WebControls.LinqDataSource.Insert(System.Collections.IDictionary)
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: Insert(IDictionary)
  nameWithType: LinqDataSource.Insert(IDictionary)
  fullName: System.Web.UI.WebControls.LinqDataSource.Insert(IDictionary)
- uid: System.Web.UI.WebControls.LinqDataSource.Inserted
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: Inserted
  nameWithType: LinqDataSource.Inserted
  fullName: System.Web.UI.WebControls.LinqDataSource.Inserted
- uid: System.Web.UI.WebControls.LinqDataSource.Inserting
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: Inserting
  nameWithType: LinqDataSource.Inserting
  fullName: System.Web.UI.WebControls.LinqDataSource.Inserting
- uid: System.EventHandler{System.Web.UI.WebControls.LinqDataSourceInsertEventArgs}
  parent: System
  isExternal: true
  name: EventHandler<LinqDataSourceInsertEventArgs>
  nameWithType: EventHandler<LinqDataSourceInsertEventArgs>
  fullName: System.EventHandler<System.Web.UI.WebControls.LinqDataSourceInsertEventArgs>
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: EventHandler<System.Web.UI.WebControls.LinqDataSourceInsertEventArgs>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Web.UI.WebControls.LinqDataSourceInsertEventArgs
    name: LinqDataSourceInsertEventArgs
    nameWithType: LinqDataSourceInsertEventArgs
    fullName: LinqDataSourceInsertEventArgs
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Web.UI.WebControls.LinqDataSource.InsertParameters
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: InsertParameters
  nameWithType: LinqDataSource.InsertParameters
  fullName: System.Web.UI.WebControls.LinqDataSource.InsertParameters
- uid: System.Web.UI.WebControls.LinqDataSource.OnInit(System.EventArgs)
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: OnInit(EventArgs)
  nameWithType: LinqDataSource.OnInit(EventArgs)
  fullName: System.Web.UI.WebControls.LinqDataSource.OnInit(EventArgs)
- uid: System.EventArgs
  parent: System
  isExternal: true
  name: EventArgs
  nameWithType: EventArgs
  fullName: System.EventArgs
- uid: System.Web.UI.WebControls.LinqDataSource.OnUnload(System.EventArgs)
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: OnUnload(EventArgs)
  nameWithType: LinqDataSource.OnUnload(EventArgs)
  fullName: System.Web.UI.WebControls.LinqDataSource.OnUnload(EventArgs)
- uid: System.Web.UI.WebControls.LinqDataSource.OrderBy
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: OrderBy
  nameWithType: LinqDataSource.OrderBy
  fullName: System.Web.UI.WebControls.LinqDataSource.OrderBy
- uid: System.Web.UI.WebControls.LinqDataSource.OrderByParameters
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: OrderByParameters
  nameWithType: LinqDataSource.OrderByParameters
  fullName: System.Web.UI.WebControls.LinqDataSource.OrderByParameters
- uid: System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: OrderGroupsBy
  nameWithType: LinqDataSource.OrderGroupsBy
  fullName: System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy
- uid: System.Web.UI.WebControls.LinqDataSource.OrderGroupsByParameters
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: OrderGroupsByParameters
  nameWithType: LinqDataSource.OrderGroupsByParameters
  fullName: System.Web.UI.WebControls.LinqDataSource.OrderGroupsByParameters
- uid: System.Web.UI.WebControls.LinqDataSource.Select
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: Select
  nameWithType: LinqDataSource.Select
  fullName: System.Web.UI.WebControls.LinqDataSource.Select
- uid: System.Web.UI.WebControls.LinqDataSource.Selected
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: Selected
  nameWithType: LinqDataSource.Selected
  fullName: System.Web.UI.WebControls.LinqDataSource.Selected
- uid: System.Web.UI.WebControls.LinqDataSource.Selecting
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: Selecting
  nameWithType: LinqDataSource.Selecting
  fullName: System.Web.UI.WebControls.LinqDataSource.Selecting
- uid: System.EventHandler{System.Web.UI.WebControls.LinqDataSourceSelectEventArgs}
  parent: System
  isExternal: true
  name: EventHandler<LinqDataSourceSelectEventArgs>
  nameWithType: EventHandler<LinqDataSourceSelectEventArgs>
  fullName: System.EventHandler<System.Web.UI.WebControls.LinqDataSourceSelectEventArgs>
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: EventHandler<System.Web.UI.WebControls.LinqDataSourceSelectEventArgs>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Web.UI.WebControls.LinqDataSourceSelectEventArgs
    name: LinqDataSourceSelectEventArgs
    nameWithType: LinqDataSourceSelectEventArgs
    fullName: LinqDataSourceSelectEventArgs
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Web.UI.WebControls.LinqDataSource.SelectParameters
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: SelectParameters
  nameWithType: LinqDataSource.SelectParameters
  fullName: System.Web.UI.WebControls.LinqDataSource.SelectParameters
- uid: System.Web.UI.WebControls.LinqDataSource.StoreOriginalValuesInViewState
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: StoreOriginalValuesInViewState
  nameWithType: LinqDataSource.StoreOriginalValuesInViewState
  fullName: System.Web.UI.WebControls.LinqDataSource.StoreOriginalValuesInViewState
- uid: System.Web.UI.WebControls.LinqDataSource.System#Web#DynamicData#IDynamicDataSource#ContextType
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: System.Web.DynamicData.IDynamicDataSource.ContextType
  nameWithType: LinqDataSource.System.Web.DynamicData.IDynamicDataSource.ContextType
  fullName: System.Web.UI.WebControls.LinqDataSource.System.Web.DynamicData.IDynamicDataSource.ContextType
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Web.UI.WebControls.LinqDataSource.System#Web#DynamicData#IDynamicDataSource#EntitySetName
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: System.Web.DynamicData.IDynamicDataSource.EntitySetName
  nameWithType: LinqDataSource.System.Web.DynamicData.IDynamicDataSource.EntitySetName
  fullName: System.Web.UI.WebControls.LinqDataSource.System.Web.DynamicData.IDynamicDataSource.EntitySetName
- uid: System.Web.UI.WebControls.LinqDataSource.TableName
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: TableName
  nameWithType: LinqDataSource.TableName
  fullName: System.Web.UI.WebControls.LinqDataSource.TableName
- uid: System.Web.UI.WebControls.LinqDataSource.Update(System.Collections.IDictionary,System.Collections.IDictionary,System.Collections.IDictionary)
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: Update(IDictionary,IDictionary,IDictionary)
  nameWithType: LinqDataSource.Update(IDictionary,IDictionary,IDictionary)
  fullName: System.Web.UI.WebControls.LinqDataSource.Update(IDictionary,IDictionary,IDictionary)
- uid: System.Web.UI.WebControls.LinqDataSource.Updated
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: Updated
  nameWithType: LinqDataSource.Updated
  fullName: System.Web.UI.WebControls.LinqDataSource.Updated
- uid: System.Web.UI.WebControls.LinqDataSource.UpdateParameters
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: UpdateParameters
  nameWithType: LinqDataSource.UpdateParameters
  fullName: System.Web.UI.WebControls.LinqDataSource.UpdateParameters
- uid: System.Web.UI.WebControls.LinqDataSource.Updating
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: Updating
  nameWithType: LinqDataSource.Updating
  fullName: System.Web.UI.WebControls.LinqDataSource.Updating
- uid: System.EventHandler{System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs}
  parent: System
  isExternal: true
  name: EventHandler<LinqDataSourceUpdateEventArgs>
  nameWithType: EventHandler<LinqDataSourceUpdateEventArgs>
  fullName: System.EventHandler<System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs>
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: EventHandler<System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs
    name: LinqDataSourceUpdateEventArgs
    nameWithType: LinqDataSourceUpdateEventArgs
    fullName: LinqDataSourceUpdateEventArgs
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Web.UI.WebControls.LinqDataSource.Where
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: Where
  nameWithType: LinqDataSource.Where
  fullName: System.Web.UI.WebControls.LinqDataSource.Where
- uid: System.Web.UI.WebControls.LinqDataSource.WhereParameters
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: WhereParameters
  nameWithType: LinqDataSource.WhereParameters
  fullName: System.Web.UI.WebControls.LinqDataSource.WhereParameters
- uid: System.Web.UI.WebControls.LinqDataSource.#ctor*
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: LinqDataSource
  nameWithType: LinqDataSource.LinqDataSource
- uid: System.Web.UI.WebControls.LinqDataSource.AutoGenerateOrderByClause*
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: AutoGenerateOrderByClause
  nameWithType: LinqDataSource.AutoGenerateOrderByClause
- uid: System.Web.UI.WebControls.LinqDataSource.AutoGenerateWhereClause*
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: AutoGenerateWhereClause
  nameWithType: LinqDataSource.AutoGenerateWhereClause
- uid: System.Web.UI.WebControls.LinqDataSource.AutoPage*
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: AutoPage
  nameWithType: LinqDataSource.AutoPage
- uid: System.Web.UI.WebControls.LinqDataSource.AutoSort*
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: AutoSort
  nameWithType: LinqDataSource.AutoSort
- uid: System.Web.UI.WebControls.LinqDataSource.ContextTypeName*
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: ContextTypeName
  nameWithType: LinqDataSource.ContextTypeName
- uid: System.Web.UI.WebControls.LinqDataSource.CreateQueryableView*
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: CreateQueryableView
  nameWithType: LinqDataSource.CreateQueryableView
- uid: System.Web.UI.WebControls.LinqDataSource.CreateView*
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: CreateView
  nameWithType: LinqDataSource.CreateView
- uid: System.Web.UI.WebControls.LinqDataSource.Delete*
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: Delete
  nameWithType: LinqDataSource.Delete
- uid: System.Web.UI.WebControls.LinqDataSource.DeleteParameters*
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: DeleteParameters
  nameWithType: LinqDataSource.DeleteParameters
- uid: System.Web.UI.WebControls.LinqDataSource.EnableDelete*
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: EnableDelete
  nameWithType: LinqDataSource.EnableDelete
- uid: System.Web.UI.WebControls.LinqDataSource.EnableInsert*
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: EnableInsert
  nameWithType: LinqDataSource.EnableInsert
- uid: System.Web.UI.WebControls.LinqDataSource.EnableObjectTracking*
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: EnableObjectTracking
  nameWithType: LinqDataSource.EnableObjectTracking
- uid: System.Web.UI.WebControls.LinqDataSource.EnableUpdate*
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: EnableUpdate
  nameWithType: LinqDataSource.EnableUpdate
- uid: System.Web.UI.WebControls.LinqDataSource.GroupBy*
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: GroupBy
  nameWithType: LinqDataSource.GroupBy
- uid: System.Web.UI.WebControls.LinqDataSource.GroupByParameters*
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: GroupByParameters
  nameWithType: LinqDataSource.GroupByParameters
- uid: System.Web.UI.WebControls.LinqDataSource.Insert*
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: Insert
  nameWithType: LinqDataSource.Insert
- uid: System.Web.UI.WebControls.LinqDataSource.InsertParameters*
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: InsertParameters
  nameWithType: LinqDataSource.InsertParameters
- uid: System.Web.UI.WebControls.LinqDataSource.OnInit*
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: OnInit
  nameWithType: LinqDataSource.OnInit
- uid: System.Web.UI.WebControls.LinqDataSource.OnUnload*
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: OnUnload
  nameWithType: LinqDataSource.OnUnload
- uid: System.Web.UI.WebControls.LinqDataSource.OrderBy*
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: OrderBy
  nameWithType: LinqDataSource.OrderBy
- uid: System.Web.UI.WebControls.LinqDataSource.OrderByParameters*
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: OrderByParameters
  nameWithType: LinqDataSource.OrderByParameters
- uid: System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy*
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: OrderGroupsBy
  nameWithType: LinqDataSource.OrderGroupsBy
- uid: System.Web.UI.WebControls.LinqDataSource.OrderGroupsByParameters*
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: OrderGroupsByParameters
  nameWithType: LinqDataSource.OrderGroupsByParameters
- uid: System.Web.UI.WebControls.LinqDataSource.Select*
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: Select
  nameWithType: LinqDataSource.Select
- uid: System.Web.UI.WebControls.LinqDataSource.SelectParameters*
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: SelectParameters
  nameWithType: LinqDataSource.SelectParameters
- uid: System.Web.UI.WebControls.LinqDataSource.StoreOriginalValuesInViewState*
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: StoreOriginalValuesInViewState
  nameWithType: LinqDataSource.StoreOriginalValuesInViewState
- uid: System.Web.UI.WebControls.LinqDataSource.System#Web#DynamicData#IDynamicDataSource#ContextType*
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: System.Web.DynamicData.IDynamicDataSource.ContextType
  nameWithType: LinqDataSource.System.Web.DynamicData.IDynamicDataSource.ContextType
- uid: System.Web.UI.WebControls.LinqDataSource.System#Web#DynamicData#IDynamicDataSource#EntitySetName*
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: System.Web.DynamicData.IDynamicDataSource.EntitySetName
  nameWithType: LinqDataSource.System.Web.DynamicData.IDynamicDataSource.EntitySetName
- uid: System.Web.UI.WebControls.LinqDataSource.TableName*
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: TableName
  nameWithType: LinqDataSource.TableName
- uid: System.Web.UI.WebControls.LinqDataSource.Update*
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: Update
  nameWithType: LinqDataSource.Update
- uid: System.Web.UI.WebControls.LinqDataSource.UpdateParameters*
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: UpdateParameters
  nameWithType: LinqDataSource.UpdateParameters
- uid: System.Web.UI.WebControls.LinqDataSource.Where*
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: Where
  nameWithType: LinqDataSource.Where
- uid: System.Web.UI.WebControls.LinqDataSource.WhereParameters*
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: WhereParameters
  nameWithType: LinqDataSource.WhereParameters
