### YamlMime:ManagedReference
items:
- uid: System.IO.Log.FileRecordSequence
  id: FileRecordSequence
  children:
  - System.IO.Log.FileRecordSequence.#ctor(System.String)
  - System.IO.Log.FileRecordSequence.#ctor(System.String,System.IO.FileAccess)
  - System.IO.Log.FileRecordSequence.#ctor(System.String,System.IO.FileAccess,System.Int32)
  - System.IO.Log.FileRecordSequence.AdvanceBaseSequenceNumber(System.IO.Log.SequenceNumber)
  - System.IO.Log.FileRecordSequence.Append(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions)
  - System.IO.Log.FileRecordSequence.Append(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions)
  - System.IO.Log.FileRecordSequence.Append(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection)
  - System.IO.Log.FileRecordSequence.Append(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection)
  - System.IO.Log.FileRecordSequence.BaseSequenceNumber
  - System.IO.Log.FileRecordSequence.BeginAppend(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.AsyncCallback,System.Object)
  - System.IO.Log.FileRecordSequence.BeginAppend(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.AsyncCallback,System.Object)
  - System.IO.Log.FileRecordSequence.BeginAppend(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection,System.AsyncCallback,System.Object)
  - System.IO.Log.FileRecordSequence.BeginAppend(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection,System.AsyncCallback,System.Object)
  - System.IO.Log.FileRecordSequence.BeginFlush(System.IO.Log.SequenceNumber,System.AsyncCallback,System.Object)
  - System.IO.Log.FileRecordSequence.BeginReserveAndAppend(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection,System.Int64[],System.AsyncCallback,System.Object)
  - System.IO.Log.FileRecordSequence.BeginReserveAndAppend(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection,System.Int64[],System.AsyncCallback,System.Object)
  - System.IO.Log.FileRecordSequence.BeginWriteRestartArea(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.ReservationCollection,System.AsyncCallback,System.Object)
  - System.IO.Log.FileRecordSequence.BeginWriteRestartArea(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.ReservationCollection,System.AsyncCallback,System.Object)
  - System.IO.Log.FileRecordSequence.CreateReservationCollection
  - System.IO.Log.FileRecordSequence.Dispose
  - System.IO.Log.FileRecordSequence.EndAppend(System.IAsyncResult)
  - System.IO.Log.FileRecordSequence.EndFlush(System.IAsyncResult)
  - System.IO.Log.FileRecordSequence.EndReserveAndAppend(System.IAsyncResult)
  - System.IO.Log.FileRecordSequence.EndWriteRestartArea(System.IAsyncResult)
  - System.IO.Log.FileRecordSequence.Flush
  - System.IO.Log.FileRecordSequence.Flush(System.IO.Log.SequenceNumber)
  - System.IO.Log.FileRecordSequence.LastSequenceNumber
  - System.IO.Log.FileRecordSequence.MaximumRecordLength
  - System.IO.Log.FileRecordSequence.ReadLogRecords(System.IO.Log.SequenceNumber,System.IO.Log.LogRecordEnumeratorType)
  - System.IO.Log.FileRecordSequence.ReadRestartAreas
  - System.IO.Log.FileRecordSequence.ReserveAndAppend(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection,System.Int64[])
  - System.IO.Log.FileRecordSequence.ReserveAndAppend(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection,System.Int64[])
  - System.IO.Log.FileRecordSequence.ReservedBytes
  - System.IO.Log.FileRecordSequence.RestartSequenceNumber
  - System.IO.Log.FileRecordSequence.RetryAppend
  - System.IO.Log.FileRecordSequence.TailPinned
  - System.IO.Log.FileRecordSequence.WriteRestartArea(System.ArraySegment{System.Byte})
  - System.IO.Log.FileRecordSequence.WriteRestartArea(System.Collections.Generic.IList{System.ArraySegment{System.Byte}})
  - System.IO.Log.FileRecordSequence.WriteRestartArea(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber)
  - System.IO.Log.FileRecordSequence.WriteRestartArea(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber)
  - System.IO.Log.FileRecordSequence.WriteRestartArea(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.ReservationCollection)
  - System.IO.Log.FileRecordSequence.WriteRestartArea(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.ReservationCollection)
  langs:
  - csharp
  name: FileRecordSequence
  nameWithType: FileRecordSequence
  fullName: System.IO.Log.FileRecordSequence
  type: Class
  summary: "Implementerar en <xref href=&quot;System.IO.Log.IRecordSequence&quot;> </xref> ovanpå en fil. Den här klassen kan inte ärvas."
  remarks: "FileRecordSequence är en postsekvens baserat på en enda loggfil i filsystemet. Det är en enkel implementering av <xref:System.IO.Log.IRecordSequence>gränssnittet ovanpå en enkel filbaserade.</xref:System.IO.Log.IRecordSequence>       Om du vill ändra en filbaserad logg måste det konto som programmet körs i har tillräckliga privilegier enligt system filsäkerhet när FileRecordSequence har skapats. Dessutom görs en begäran om FullTrust konstruktionen för närvarande. Verifieringsresultat behörighet cachelagras därefter inom ramen för Windows-säkerhetsmodellen. Du bör se till att du inte oavsiktligt visar innehållet i en obehörig användare registrera sekvensen."
  example:
  - "The following example creates a record sequence, appends record to it, and finally reads the records.  \n  \n [!code-vb[IRecordSequence#1](~/add/codesnippet/visualbasic/t-system.io.log.filereco_1.vb)]\n [!code-cs[IRecordSequence#1](~/add/codesnippet/csharp/t-system.io.log.filereco_1.cs)]"
  syntax:
    content: 'public sealed class FileRecordSequence : IDisposable, System.IO.Log.IRecordSequence'
  inheritance:
  - System.Object
  implements:
  - System.IDisposable
  - System.IO.Log.IRecordSequence
  inheritedMembers: []
  platform:
  - net462
- uid: System.IO.Log.FileRecordSequence.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: System.IO.Log.FileRecordSequence
  langs:
  - csharp
  name: FileRecordSequence(String)
  nameWithType: FileRecordSequence.FileRecordSequence(String)
  fullName: System.IO.Log.FileRecordSequence.FileRecordSequence(String)
  type: Constructor
  assemblies:
  - System.IO.Log
  namespace: System.IO.Log
  summary: "Initierar en ny instans av den <xref href=&quot;System.IO.Log.FileRecordSequence&quot;> </xref> klass med en angiven fil."
  remarks: "Den här konstruktorn skapar läs-/ skrivåtkomst till filen och öppnar filen med resurs läsbehörighet. Det innebär att begäranden att öppna filen för skrivning av den här eller någon annan process misslyckas tills denna <xref:System.IO.Log.FileRecordSequence>instansen har tagits bort av men Läs försöker att lyckas.</xref:System.IO.Log.FileRecordSequence> Om `path` inte hittas, skapas en ny fil med en storlek på 0 byte."
  example:
  - "The following example creates a record sequence, appends record to it, reads the records, and finally diposes the sequence.  \n  \n [!code-vb[IRecordSequence#1](~/add/codesnippet/visualbasic/m-system.io.log.filereco_1.vb)]\n [!code-cs[IRecordSequence#1](~/add/codesnippet/csharp/m-system.io.log.filereco_1.cs)]"
  syntax:
    content: public FileRecordSequence (string path);
    parameters:
    - id: path
      type: System.String
      description: "En relativ eller absolut sökväg till filen som den här <xref href=&quot;System.IO.Log.FileRecordSequence&quot;> </xref> instans kommer kapslar in."
  overload: System.IO.Log.FileRecordSequence.#ctor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Filen som anges av <code> path </code> är inte giltig."
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "Filen som anges av <code> path </code> kan inte hittas."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "Begäran kan inte utföras på grund av ett oväntat i/o-undantag."
  - type: System.OutOfMemoryException
    commentId: T:System.OutOfMemoryException
    description: "Det finns inte tillräckligt med minne för att fortsätta körningen av programmet."
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "Åtkomst för den angivna loggen store nekas av operativsystemet."
  platform:
  - net462
- uid: System.IO.Log.FileRecordSequence.#ctor(System.String,System.IO.FileAccess)
  id: '#ctor(System.String,System.IO.FileAccess)'
  parent: System.IO.Log.FileRecordSequence
  langs:
  - csharp
  name: FileRecordSequence(String,FileAccess)
  nameWithType: FileRecordSequence.FileRecordSequence(String,FileAccess)
  fullName: System.IO.Log.FileRecordSequence.FileRecordSequence(String,FileAccess)
  type: Constructor
  assemblies:
  - System.IO.Log
  namespace: System.IO.Log
  summary: "Initierar en ny instans av den <xref href=&quot;System.IO.Log.FileRecordSequence&quot;> </xref> klass med en angiven fil och en åtkomstläge."
  syntax:
    content: public FileRecordSequence (string path, System.IO.FileAccess access);
    parameters:
    - id: path
      type: System.String
      description: "En relativ eller absolut sökväg till filen som den här <xref href=&quot;System.IO.Log.FileRecordSequence&quot;> </xref> instans kommer kapslar in."
    - id: access
      type: System.IO.FileAccess
      description: "En giltig <xref href=&quot;System.IO.FileAccess&quot;> </xref> värde som anger vilken typ av åtkomst användare har en loggfil."
  overload: System.IO.Log.FileRecordSequence.#ctor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Filen som anges av <code> path </code> är inte giltig."
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "Filen som anges av <code> path </code> kan inte hittas."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "Begäran kan inte utföras på grund av ett oväntat i/o-undantag."
  - type: System.OutOfMemoryException
    commentId: T:System.OutOfMemoryException
    description: "Det finns inte tillräckligt med minne för att fortsätta körningen av programmet."
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "Åtkomst för den angivna loggen store nekas av operativsystemet."
  platform:
  - net462
- uid: System.IO.Log.FileRecordSequence.#ctor(System.String,System.IO.FileAccess,System.Int32)
  id: '#ctor(System.String,System.IO.FileAccess,System.Int32)'
  parent: System.IO.Log.FileRecordSequence
  langs:
  - csharp
  name: FileRecordSequence(String,FileAccess,Int32)
  nameWithType: FileRecordSequence.FileRecordSequence(String,FileAccess,Int32)
  fullName: System.IO.Log.FileRecordSequence.FileRecordSequence(String,FileAccess,Int32)
  type: Constructor
  assemblies:
  - System.IO.Log
  namespace: System.IO.Log
  summary: "Initierar en ny instans av den <xref href=&quot;System.IO.Log.FileRecordSequence&quot;> </xref> klass med en viss fil, en åtkomstläge och en filstorlek."
  syntax:
    content: public FileRecordSequence (string path, System.IO.FileAccess access, int size);
    parameters:
    - id: path
      type: System.String
      description: "En relativ eller absolut sökväg till filen som den här <xref href=&quot;System.IO.Log.FileRecordSequence&quot;> </xref> instans kommer kapslar in."
    - id: access
      type: System.IO.FileAccess
      description: "En giltig <xref href=&quot;System.IO.FileAccess&quot;> </xref> värde som anger vilken typ av åtkomst användare har en loggfil."
    - id: size
      type: System.Int32
      description: "Storleken på loggfilen som ska öppnas."
  overload: System.IO.Log.FileRecordSequence.#ctor*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "En eller flera parametrar är utanför det giltiga intervallet."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Filen som anges av <code> path </code> är inte giltig."
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "Filen som anges av <code> path </code> kan inte hittas."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "Begäran kan inte utföras på grund av ett oväntat i/o-undantag."
  - type: System.OutOfMemoryException
    commentId: T:System.OutOfMemoryException
    description: "Det finns inte tillräckligt med minne för att fortsätta körningen av programmet."
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "Åtkomst för den angivna loggen store nekas av operativsystemet."
  platform:
  - net462
- uid: System.IO.Log.FileRecordSequence.AdvanceBaseSequenceNumber(System.IO.Log.SequenceNumber)
  id: AdvanceBaseSequenceNumber(System.IO.Log.SequenceNumber)
  parent: System.IO.Log.FileRecordSequence
  langs:
  - csharp
  name: AdvanceBaseSequenceNumber(SequenceNumber)
  nameWithType: FileRecordSequence.AdvanceBaseSequenceNumber(SequenceNumber)
  fullName: System.IO.Log.FileRecordSequence.AdvanceBaseSequenceNumber(SequenceNumber)
  type: Method
  assemblies:
  - System.IO.Log
  namespace: System.IO.Log
  summary: "Flyttar grundläggande sekvensnumret loggens framåt. Den här metoden kan inte ärvas."
  syntax:
    content: public void AdvanceBaseSequenceNumber (System.IO.Log.SequenceNumber newBaseSequenceNumber);
    parameters:
    - id: newBaseSequenceNumber
      type: System.IO.Log.SequenceNumber
      description: "Nya grundläggande sekvensnumret för postsekvensen."
  overload: System.IO.Log.FileRecordSequence.AdvanceBaseSequenceNumber*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>newBaseSequenceNumber</code>är ogiltigt."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>newBaseSequenceNumber</code>är inte mellan basnummer och sista nummer i sekvensen."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "Ett i/o-fel uppstod vid ändring av sekvensen."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Metoden anropades efter sekvensen har avslutats av."
  - type: System.OutOfMemoryException
    commentId: T:System.OutOfMemoryException
    description: "Det finns inte tillräckligt med minne för att fortsätta körningen av programmet."
  platform:
  - net462
- uid: System.IO.Log.FileRecordSequence.Append(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions)
  id: Append(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions)
  parent: System.IO.Log.FileRecordSequence
  langs:
  - csharp
  name: Append(ArraySegment<Byte>,SequenceNumber,SequenceNumber,RecordAppendOptions)
  nameWithType: FileRecordSequence.Append(ArraySegment<Byte>,SequenceNumber,SequenceNumber,RecordAppendOptions)
  fullName: System.IO.Log.FileRecordSequence.Append(ArraySegment<Byte>,SequenceNumber,SequenceNumber,RecordAppendOptions)
  type: Method
  assemblies:
  - System.IO.Log
  namespace: System.IO.Log
  summary: "Skriver en loggpost för den <xref href=&quot;System.IO.Log.FileRecordSequence&quot;> </xref>. Den här metoden kan inte ärvas."
  remarks: "Data i den `data` parametern sammanfogas till en enda Bytematrisen för att lägga till som post. Dock görs inte för att dela data tillbaka till matrisen segment när posten har lästs.       Normalt sett den här metoden har slutförts innan posten har skrivits. För att säkerställa att en post har skrivits, ange antingen den <xref:System.IO.Log.RecordAppendOptions>flaggan med hjälp av den `recordAppendOptions` parametern eller anrop av <xref:System.IO.Log.FileRecordSequence.Flush%2A>metod.</xref:System.IO.Log.FileRecordSequence.Flush%2A> </xref:System.IO.Log.RecordAppendOptions>"
  example:
  - "The following example creates a record sequence, appends record to it, and finally reads the records.  \n  \n [!code-cs[FileRecordSequence#0](~/add/codesnippet/csharp/10554b85-231e-4dbf-ad02-_1.cs)]"
  syntax:
    content: public System.IO.Log.SequenceNumber Append (ArraySegment<byte> data, System.IO.Log.SequenceNumber nextUndoRecord, System.IO.Log.SequenceNumber previousRecord, System.IO.Log.RecordAppendOptions recordAppendOptions);
    parameters:
    - id: data
      type: System.ArraySegment{System.Byte}
      description: "En lista med byte-matris segment som ska sammanfogas och läggas till som post."
    - id: nextUndoRecord
      type: System.IO.Log.SequenceNumber
      description: "Sekvensnumret för nästa post i ordningen som angetts av användaren."
    - id: previousRecord
      type: System.IO.Log.SequenceNumber
      description: "Sekvensnumret för nästa post i föregående ordning."
    - id: recordAppendOptions
      type: System.IO.Log.RecordAppendOptions
      description: "Ett giltigt värde för <xref href=&quot;System.IO.Log.RecordAppendOptions&quot;> </xref> som anger hur data ska skrivas."
    return:
      type: System.IO.Log.SequenceNumber
      description: "Sekvensnumret för den tillagda loggposten."
  overload: System.IO.Log.FileRecordSequence.Append*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "En eller flera argument är <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "En eller flera argument är utanför intervallet."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "Åtgärden kan inte utföras eftersom postsekvensen öppnades skrivskyddad åtkomst."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "Det gick inte att utföra begäran på grund av ett oväntat i/o-undantag."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Metoden anropades efter sekvensen har avslutats av."
  - type: System.OutOfMemoryException
    commentId: T:System.OutOfMemoryException
    description: "Det finns inte tillräckligt med minne för att fortsätta körningen av programmet."
  - type: System.IO.Log.SequenceFullException
    commentId: T:System.IO.Log.SequenceFullException
    description: "Postsekvensen är full."
  platform:
  - net462
- uid: System.IO.Log.FileRecordSequence.Append(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions)
  id: Append(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions)
  parent: System.IO.Log.FileRecordSequence
  langs:
  - csharp
  name: Append(IList<ArraySegment<Byte>>,SequenceNumber,SequenceNumber,RecordAppendOptions)
  nameWithType: FileRecordSequence.Append(IList<ArraySegment<Byte>>,SequenceNumber,SequenceNumber,RecordAppendOptions)
  fullName: System.IO.Log.FileRecordSequence.Append(IList<ArraySegment<Byte>>,SequenceNumber,SequenceNumber,RecordAppendOptions)
  type: Method
  assemblies:
  - System.IO.Log
  namespace: System.IO.Log
  summary: "Skriver en loggpost för den <xref href=&quot;System.IO.Log.FileRecordSequence&quot;> </xref>. Den här metoden kan inte ärvas."
  remarks: "Data i den `data` parametern sammanfogas till en enda Bytematrisen för att lägga till som post. Dock görs inte för att dela data tillbaka till matrisen segment när posten har lästs.       Normalt sett den här metoden har slutförts innan posten har skrivits. För att säkerställa att en post har skrivits, ange antingen den <xref:System.IO.Log.RecordAppendOptions>flaggan med hjälp av den `recordAppendOptions` parametern eller anrop av <xref:System.IO.Log.FileRecordSequence.Flush%2A>metod.</xref:System.IO.Log.FileRecordSequence.Flush%2A> </xref:System.IO.Log.RecordAppendOptions>"
  example:
  - "The following example shows how you can create a record sequence with this method.  \n  \n [!code-vb[IRecordSequence#3](~/add/codesnippet/visualbasic/5cdfd57c-5dff-4f9a-a7e0-_1.vb)]\n [!code-cs[IRecordSequence#3](~/add/codesnippet/csharp/5cdfd57c-5dff-4f9a-a7e0-_1.cs)]"
  syntax:
    content: public System.IO.Log.SequenceNumber Append (System.Collections.Generic.IList<ArraySegment<byte>> data, System.IO.Log.SequenceNumber nextUndoRecord, System.IO.Log.SequenceNumber previousRecord, System.IO.Log.RecordAppendOptions recordAppendOptions);
    parameters:
    - id: data
      type: System.Collections.Generic.IList{System.ArraySegment{System.Byte}}
      description: "En lista med byte-matris segment som ska sammanfogas och läggas till som post."
    - id: nextUndoRecord
      type: System.IO.Log.SequenceNumber
      description: "Sekvensnumret för nästa post i ordningen som angetts av användaren."
    - id: previousRecord
      type: System.IO.Log.SequenceNumber
      description: "Sekvensnumret för nästa post i föregående ordning."
    - id: recordAppendOptions
      type: System.IO.Log.RecordAppendOptions
      description: "Ett giltigt värde för <xref href=&quot;System.IO.Log.RecordAppendOptions&quot;> </xref> som anger hur data ska skrivas."
    return:
      type: System.IO.Log.SequenceNumber
      description: "Sekvensnumret för den tillagda loggposten."
  overload: System.IO.Log.FileRecordSequence.Append*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "En eller flera argument är <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "En eller flera argument är utanför intervallet."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "Åtgärden kan inte utföras eftersom postsekvensen öppnades skrivskyddad åtkomst."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "Det gick inte att utföra begäran på grund av ett oväntat i/o-undantag."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Metoden anropades efter sekvensen har avslutats av."
  - type: System.OutOfMemoryException
    commentId: T:System.OutOfMemoryException
    description: "Det finns inte tillräckligt med minne för att fortsätta körningen av programmet."
  - type: System.IO.Log.SequenceFullException
    commentId: T:System.IO.Log.SequenceFullException
    description: "Postsekvensen är full."
  platform:
  - net462
- uid: System.IO.Log.FileRecordSequence.Append(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection)
  id: Append(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection)
  parent: System.IO.Log.FileRecordSequence
  langs:
  - csharp
  name: Append(ArraySegment<Byte>,SequenceNumber,SequenceNumber,RecordAppendOptions,ReservationCollection)
  nameWithType: FileRecordSequence.Append(ArraySegment<Byte>,SequenceNumber,SequenceNumber,RecordAppendOptions,ReservationCollection)
  fullName: System.IO.Log.FileRecordSequence.Append(ArraySegment<Byte>,SequenceNumber,SequenceNumber,RecordAppendOptions,ReservationCollection)
  type: Method
  assemblies:
  - System.IO.Log
  namespace: System.IO.Log
  summary: "Skriver en loggpost för den <xref href=&quot;System.IO.Log.FileRecordSequence&quot;> </xref>, utrymme som tidigare har reserverats i sekvensen. Den här metoden kan inte ärvas."
  remarks: "Data i den `data` parametern sammanfogas till en enda Bytematrisen för att lägga till som post. Dock görs inte för att dela data tillbaka till matrisen segment när posten har lästs.       Den tillagda posten kommer att använda utrymme som tidigare har reserverats, med hjälp av en reservation som anges av den `reservations` parameter. Om append lyckas, kommer den använda minsta reservation området som kan innehålla data och som reservation område tas bort från samlingen.       Normalt sett den här metoden har slutförts innan posten har skrivits. För att säkerställa att en post har skrivits, ange antingen den <xref:System.IO.Log.RecordAppendOptions>flaggan med hjälp av den `recordAppendOptions` parametern eller anrop av <xref:System.IO.Log.FileRecordSequence.Flush%2A>metod.</xref:System.IO.Log.FileRecordSequence.Flush%2A> </xref:System.IO.Log.RecordAppendOptions>"
  syntax:
    content: public System.IO.Log.SequenceNumber Append (ArraySegment<byte> data, System.IO.Log.SequenceNumber nextUndoRecord, System.IO.Log.SequenceNumber previousRecord, System.IO.Log.RecordAppendOptions recordAppendOptions, System.IO.Log.ReservationCollection reservations);
    parameters:
    - id: data
      type: System.ArraySegment{System.Byte}
      description: "En lista med byte-matris segment som ska sammanfogas och läggas till som post."
    - id: nextUndoRecord
      type: System.IO.Log.SequenceNumber
      description: "Sekvensnumret för nästa post i ordningen som angetts av användaren."
    - id: previousRecord
      type: System.IO.Log.SequenceNumber
      description: "Sekvensnumret för nästa post i föregående ordning."
    - id: recordAppendOptions
      type: System.IO.Log.RecordAppendOptions
      description: "Ett giltigt värde för <xref href=&quot;System.IO.Log.RecordAppendOptions&quot;> </xref> som anger hur data ska skrivas."
    - id: reservations
      type: System.IO.Log.ReservationCollection
      description: "En <xref href=&quot;System.IO.Log.ReservationCollection&quot;> </xref> som innehåller reservationen som ska användas för den här posten."
    return:
      type: System.IO.Log.SequenceNumber
      description: "Sekvensnumret för den tillagda loggposten."
  overload: System.IO.Log.FileRecordSequence.Append*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "En eller flera argument är <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "En eller flera argument är utanför intervallet."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>reservations</code>skapades inte av den här ordningsnummer..."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "Åtgärden kan inte utföras eftersom postsekvensen öppnades skrivskyddad åtkomst."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "Det gick inte att utföra begäran på grund av ett oväntat i/o-undantag."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Metoden anropades efter sekvensen har avslutats av."
  - type: System.OutOfMemoryException
    commentId: T:System.OutOfMemoryException
    description: "Det finns inte tillräckligt med minne för att fortsätta körningen av programmet."
  - type: System.IO.Log.SequenceFullException
    commentId: T:System.IO.Log.SequenceFullException
    description: "Postsekvensen är full."
  - type: System.IO.Log.ReservationNotFoundException
    commentId: T:System.IO.Log.ReservationNotFoundException
    description: "Ingen reservation som är tillräckligt stor för att passa <code> data </code> finns i <code> reservations </code>."
  platform:
  - net462
- uid: System.IO.Log.FileRecordSequence.Append(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection)
  id: Append(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection)
  parent: System.IO.Log.FileRecordSequence
  langs:
  - csharp
  name: Append(IList<ArraySegment<Byte>>,SequenceNumber,SequenceNumber,RecordAppendOptions,ReservationCollection)
  nameWithType: FileRecordSequence.Append(IList<ArraySegment<Byte>>,SequenceNumber,SequenceNumber,RecordAppendOptions,ReservationCollection)
  fullName: System.IO.Log.FileRecordSequence.Append(IList<ArraySegment<Byte>>,SequenceNumber,SequenceNumber,RecordAppendOptions,ReservationCollection)
  type: Method
  assemblies:
  - System.IO.Log
  namespace: System.IO.Log
  summary: "Skriver en loggpost för den <xref href=&quot;System.IO.Log.FileRecordSequence&quot;> </xref>, utrymme som tidigare har reserverats i sekvensen. Den här metoden kan inte ärvas."
  remarks: "Data i den `data` parametern sammanfogas till en enda Bytematrisen för att lägga till som post. Dock görs inte för att dela data tillbaka till matrisen segment när posten har lästs.       Den tillagda posten kommer att använda utrymme som tidigare har reserverats, med hjälp av en reservation som anges av den `reservations` parameter. Om append lyckas, kommer den använda minsta reservation området som kan innehålla data och som reservation område tas bort från samlingen.       Normalt sett den här metoden har slutförts innan posten har skrivits. För att säkerställa att en post har skrivits, ange antingen den <xref:System.IO.Log.RecordAppendOptions>flaggan med hjälp av den `recordAppendOptions` parametern eller anrop av <xref:System.IO.Log.FileRecordSequence.Flush%2A>metod.</xref:System.IO.Log.FileRecordSequence.Flush%2A> </xref:System.IO.Log.RecordAppendOptions>"
  syntax:
    content: public System.IO.Log.SequenceNumber Append (System.Collections.Generic.IList<ArraySegment<byte>> data, System.IO.Log.SequenceNumber nextUndoRecord, System.IO.Log.SequenceNumber previousRecord, System.IO.Log.RecordAppendOptions recordAppendOptions, System.IO.Log.ReservationCollection reservations);
    parameters:
    - id: data
      type: System.Collections.Generic.IList{System.ArraySegment{System.Byte}}
      description: "En lista med byte-matris segment som ska sammanfogas och läggas till som post."
    - id: nextUndoRecord
      type: System.IO.Log.SequenceNumber
      description: "Sekvensnumret för nästa post i ordningen som angetts av användaren."
    - id: previousRecord
      type: System.IO.Log.SequenceNumber
      description: "Sekvensnumret för nästa post i föregående ordning."
    - id: recordAppendOptions
      type: System.IO.Log.RecordAppendOptions
      description: "Ett giltigt värde för <xref href=&quot;System.IO.Log.RecordAppendOptions&quot;> </xref> som anger hur data ska skrivas."
    - id: reservations
      type: System.IO.Log.ReservationCollection
      description: "En <xref href=&quot;System.IO.Log.ReservationCollection&quot;> </xref> som innehåller reservationen som ska användas för den här posten."
    return:
      type: System.IO.Log.SequenceNumber
      description: "Sekvensnumret för den tillagda loggposten."
  overload: System.IO.Log.FileRecordSequence.Append*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "En eller flera argument är <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "En eller flera argument är utanför intervallet."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>reservations</code>skapades inte av den här ordningsnummer..."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "Åtgärden kan inte utföras eftersom postsekvensen öppnades skrivskyddad åtkomst."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "Det gick inte att utföra begäran på grund av ett oväntat i/o-undantag."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Metoden anropades efter sekvensen har avslutats av."
  - type: System.OutOfMemoryException
    commentId: T:System.OutOfMemoryException
    description: "Det finns inte tillräckligt med minne för att fortsätta körningen av programmet."
  - type: System.IO.Log.SequenceFullException
    commentId: T:System.IO.Log.SequenceFullException
    description: "Postsekvensen är full."
  - type: System.IO.Log.ReservationNotFoundException
    commentId: T:System.IO.Log.ReservationNotFoundException
    description: "Ingen reservation som är tillräckligt stor för att passa <code> data </code> finns i <code> reservations </code>."
  platform:
  - net462
- uid: System.IO.Log.FileRecordSequence.BaseSequenceNumber
  id: BaseSequenceNumber
  parent: System.IO.Log.FileRecordSequence
  langs:
  - csharp
  name: BaseSequenceNumber
  nameWithType: FileRecordSequence.BaseSequenceNumber
  fullName: System.IO.Log.FileRecordSequence.BaseSequenceNumber
  type: Property
  assemblies:
  - System.IO.Log
  namespace: System.IO.Log
  summary: "Hämtar sekvensnumret för den första giltiga posten i aktuellt <xref href=&quot;System.IO.Log.FileRecordSequence&quot;> </xref>."
  remarks: "Giltiga sekvensnummer är större än eller lika med BaseSequenceNumber och mindre än <xref:System.IO.Log.FileRecordSequence.LastSequenceNumber%2A>.</xref:System.IO.Log.FileRecordSequence.LastSequenceNumber%2A> Alla andra sekvensnummer är ogiltiga.       Värdet för den här egenskapen kan ändras genom att anropa den <xref:System.IO.Log.FileRecordSequence.WriteRestartArea%2A>eller <xref:System.IO.Log.FileRecordSequence.AdvanceBaseSequenceNumber%2A>metod.</xref:System.IO.Log.FileRecordSequence.AdvanceBaseSequenceNumber%2A> </xref:System.IO.Log.FileRecordSequence.WriteRestartArea%2A>"
  example:
  - "The following example shows using BaseSequenceNumber in a loop:  \n  \n [!code-vb[IRecordSequence#2](~/add/codesnippet/visualbasic/p-system.io.log.filereco_1.vb)]\n [!code-cs[IRecordSequence#2](~/add/codesnippet/csharp/p-system.io.log.filereco_1.cs)]"
  syntax:
    content: public System.IO.Log.SequenceNumber BaseSequenceNumber { get; }
    return:
      type: System.IO.Log.SequenceNumber
      description: "Det lägsta numret som motsvarar en giltig post i den <xref href=&quot;System.IO.Log.FileRecordSequence&quot;> </xref>."
  overload: System.IO.Log.FileRecordSequence.BaseSequenceNumber*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Egenskapen användes när sekvensen har avslutats av."
  platform:
  - net462
- uid: System.IO.Log.FileRecordSequence.BeginAppend(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.AsyncCallback,System.Object)
  id: BeginAppend(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.AsyncCallback,System.Object)
  parent: System.IO.Log.FileRecordSequence
  langs:
  - csharp
  name: BeginAppend(ArraySegment<Byte>,SequenceNumber,SequenceNumber,RecordAppendOptions,AsyncCallback,Object)
  nameWithType: FileRecordSequence.BeginAppend(ArraySegment<Byte>,SequenceNumber,SequenceNumber,RecordAppendOptions,AsyncCallback,Object)
  fullName: System.IO.Log.FileRecordSequence.BeginAppend(ArraySegment<Byte>,SequenceNumber,SequenceNumber,RecordAppendOptions,AsyncCallback,Object)
  type: Method
  assemblies:
  - System.IO.Log
  namespace: System.IO.Log
  summary: "Börjar en asynkron lägga till åtgärden. Den här metoden kan inte ärvas."
  remarks: "Överför du den <xref:System.IAsyncResult>returneras av metoden ska den <xref:System.IO.Log.FileRecordSequence.EndAppend%2A>metod för att se till att lägga till åtgärden har slutförts och resurser kan frigöras på lämpligt sätt.</xref:System.IO.Log.FileRecordSequence.EndAppend%2A> </xref:System.IAsyncResult> Om ett fel uppstod när en asynkron tilläggs genereras ett undantag inte förrän den <xref:System.IO.Log.FileRecordSequence.EndAppend%2A>metoden anropas med de <xref:System.IAsyncResult>som returneras av den här metoden.</xref:System.IAsyncResult> </xref:System.IO.Log.FileRecordSequence.EndAppend%2A>       Data i den `data` parametern sammanfogas till en enda Bytematrisen för att lägga till som post. Dock görs inte för att dela data tillbaka till matrisen segment när posten har lästs.       Normalt sett den här metoden har slutförts innan posten har skrivits. För att säkerställa att en post har skrivits, ange antingen den <xref:System.IO.Log.RecordAppendOptions>flaggan med hjälp av den `recordAppendOptions` parametern eller anrop av <xref:System.IO.Log.FileRecordSequence.Flush%2A>metod.</xref:System.IO.Log.FileRecordSequence.Flush%2A> </xref:System.IO.Log.RecordAppendOptions>"
  syntax:
    content: public IAsyncResult BeginAppend (ArraySegment<byte> data, System.IO.Log.SequenceNumber nextUndoRecord, System.IO.Log.SequenceNumber previousRecord, System.IO.Log.RecordAppendOptions recordAppendOptions, AsyncCallback callback, object state);
    parameters:
    - id: data
      type: System.ArraySegment{System.Byte}
      description: "En lista med byte-matris segment som ska sammanfogas och läggas till som post."
    - id: nextUndoRecord
      type: System.IO.Log.SequenceNumber
      description: "Sekvensnumret för nästa post i ordningen som angetts av användaren."
    - id: previousRecord
      type: System.IO.Log.SequenceNumber
      description: "Sekvensnumret för nästa post i föregående ordning."
    - id: recordAppendOptions
      type: System.IO.Log.RecordAppendOptions
      description: "Ett giltigt värde för <xref href=&quot;System.IO.Log.RecordAppendOptions&quot;> </xref> som anger hur data ska skrivas."
    - id: callback
      type: System.AsyncCallback
      description: "Ett valfritt asynkront motanrop, anropas när append är klar."
    - id: state
      type: System.Object
      description: "Ett objekt för användaren som särskiljer den här asynkrona viss Lägg till begäran från andra begäranden."
    return:
      type: System.IAsyncResult
      description: "En <xref:System.IAsyncResult>som representerar den asynkrona append som kan fortfarande vara väntande.</xref:System.IAsyncResult>"
  overload: System.IO.Log.FileRecordSequence.BeginAppend*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "En eller flera argument är <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "En eller flera argument är utanför intervallet."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "Åtgärden kan inte utföras eftersom postsekvensen öppnades skrivskyddad åtkomst."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "Begäran kan inte utföras på grund av ett oväntat i/o-undantag."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Metoden anropades efter sekvensen har avslutats av."
  - type: System.OutOfMemoryException
    commentId: T:System.OutOfMemoryException
    description: "Det finns inte tillräckligt med minne för att fortsätta körningen av programmet."
  - type: System.IO.Log.SequenceFullException
    commentId: T:System.IO.Log.SequenceFullException
    description: "Postsekvensen är full."
  platform:
  - net462
- uid: System.IO.Log.FileRecordSequence.BeginAppend(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.AsyncCallback,System.Object)
  id: BeginAppend(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.AsyncCallback,System.Object)
  parent: System.IO.Log.FileRecordSequence
  langs:
  - csharp
  name: BeginAppend(IList<ArraySegment<Byte>>,SequenceNumber,SequenceNumber,RecordAppendOptions,AsyncCallback,Object)
  nameWithType: FileRecordSequence.BeginAppend(IList<ArraySegment<Byte>>,SequenceNumber,SequenceNumber,RecordAppendOptions,AsyncCallback,Object)
  fullName: System.IO.Log.FileRecordSequence.BeginAppend(IList<ArraySegment<Byte>>,SequenceNumber,SequenceNumber,RecordAppendOptions,AsyncCallback,Object)
  type: Method
  assemblies:
  - System.IO.Log
  namespace: System.IO.Log
  summary: "Börjar en asynkron lägga till åtgärden. Den här metoden kan inte ärvas."
  remarks: "Överför du den <xref:System.IAsyncResult>returneras av metoden ska den <xref:System.IO.Log.FileRecordSequence.EndAppend%2A>metod för att se till att lägga till åtgärden har slutförts och resurser kan frigöras på lämpligt sätt.</xref:System.IO.Log.FileRecordSequence.EndAppend%2A> </xref:System.IAsyncResult> Om ett fel uppstod när en asynkron tilläggs genereras ett undantag inte förrän den <xref:System.IO.Log.FileRecordSequence.EndAppend%2A>metoden anropas med de <xref:System.IAsyncResult>som returneras av den här metoden.</xref:System.IAsyncResult> </xref:System.IO.Log.FileRecordSequence.EndAppend%2A>       Data i den `data` parametern sammanfogas till en enda Bytematrisen för att lägga till som post. Dock görs inte för att dela data tillbaka till matrisen segment när posten har lästs.       Normalt sett den här metoden har slutförts innan posten har skrivits. För att säkerställa att en post har skrivits, ange antingen den <xref:System.IO.Log.RecordAppendOptions>flaggan med hjälp av den `recordAppendOptions` parametern eller anrop av <xref:System.IO.Log.FileRecordSequence.Flush%2A>metod.</xref:System.IO.Log.FileRecordSequence.Flush%2A> </xref:System.IO.Log.RecordAppendOptions>"
  syntax:
    content: public IAsyncResult BeginAppend (System.Collections.Generic.IList<ArraySegment<byte>> data, System.IO.Log.SequenceNumber nextUndoRecord, System.IO.Log.SequenceNumber previousRecord, System.IO.Log.RecordAppendOptions recordAppendOptions, AsyncCallback callback, object state);
    parameters:
    - id: data
      type: System.Collections.Generic.IList{System.ArraySegment{System.Byte}}
      description: "En lista med byte-matris segment som ska sammanfogas och läggas till som post."
    - id: nextUndoRecord
      type: System.IO.Log.SequenceNumber
      description: "Sekvensnumret för nästa post i ordningen som angetts av användaren."
    - id: previousRecord
      type: System.IO.Log.SequenceNumber
      description: "Sekvensnumret för nästa post i föregående ordning."
    - id: recordAppendOptions
      type: System.IO.Log.RecordAppendOptions
      description: "Ett giltigt värde för <xref href=&quot;System.IO.Log.RecordAppendOptions&quot;> </xref> som anger hur data ska skrivas."
    - id: callback
      type: System.AsyncCallback
      description: "Ett valfritt asynkront motanrop, anropas när append är klar."
    - id: state
      type: System.Object
      description: "Ett objekt för användaren som särskiljer den här asynkrona viss Lägg till begäran från andra begäranden."
    return:
      type: System.IAsyncResult
      description: "En <xref:System.IAsyncResult>som representerar den asynkrona append som kan fortfarande vara väntande.</xref:System.IAsyncResult>"
  overload: System.IO.Log.FileRecordSequence.BeginAppend*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "En eller flera argument är <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "En eller flera argument är utanför intervallet."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "Åtgärden kan inte utföras eftersom postsekvensen öppnades skrivskyddad åtkomst."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "Begäran kan inte utföras på grund av ett oväntat i/o-undantag."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Metoden anropades efter sekvensen har avslutats av."
  - type: System.OutOfMemoryException
    commentId: T:System.OutOfMemoryException
    description: "Det finns inte tillräckligt med minne för att fortsätta körningen av programmet."
  - type: System.IO.Log.SequenceFullException
    commentId: T:System.IO.Log.SequenceFullException
    description: "Postsekvensen är full."
  platform:
  - net462
- uid: System.IO.Log.FileRecordSequence.BeginAppend(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection,System.AsyncCallback,System.Object)
  id: BeginAppend(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection,System.AsyncCallback,System.Object)
  parent: System.IO.Log.FileRecordSequence
  langs:
  - csharp
  name: BeginAppend(ArraySegment<Byte>,SequenceNumber,SequenceNumber,RecordAppendOptions,ReservationCollection,AsyncCallback,Object)
  nameWithType: FileRecordSequence.BeginAppend(ArraySegment<Byte>,SequenceNumber,SequenceNumber,RecordAppendOptions,ReservationCollection,AsyncCallback,Object)
  fullName: System.IO.Log.FileRecordSequence.BeginAppend(ArraySegment<Byte>,SequenceNumber,SequenceNumber,RecordAppendOptions,ReservationCollection,AsyncCallback,Object)
  type: Method
  assemblies:
  - System.IO.Log
  namespace: System.IO.Log
  summary: "Börjar en asynkron läggas till igen med tidigare utrymmet i sekvensen. Den här metoden kan inte ärvas."
  remarks: "Överför du den <xref:System.IAsyncResult>returneras av metoden ska den <xref:System.IO.Log.FileRecordSequence.EndAppend%2A>metod för att se till att lägga till åtgärden har slutförts och resurser kan frigöras på lämpligt sätt.</xref:System.IO.Log.FileRecordSequence.EndAppend%2A> </xref:System.IAsyncResult> Om ett fel uppstod när en asynkron tilläggs genereras ett undantag inte förrän den <xref:System.IO.Log.FileRecordSequence.EndAppend%2A>metoden anropas med de <xref:System.IAsyncResult>som returneras av den här metoden.</xref:System.IAsyncResult> </xref:System.IO.Log.FileRecordSequence.EndAppend%2A>       Data i den `data` parametern sammanfogas till en enda Bytematrisen för att lägga till som post. Dock görs inte för att dela data tillbaka till matrisen segment när posten har lästs.       Den tillagda posten kommer att använda utrymme som tidigare har reserverats, med hjälp av en reservation som anges av den `reservations` parameter. Om append lyckas, kommer den använda minsta reservation området som kan innehålla data och som reservation område tas bort från samlingen.       Normalt sett den här metoden har slutförts innan posten har skrivits. För att säkerställa att en post har skrivits, ange antingen den <xref:System.IO.Log.RecordAppendOptions>flaggan med hjälp av den `recordAppendOptions` parametern eller anrop av <xref:System.IO.Log.FileRecordSequence.Flush%2A>metod.</xref:System.IO.Log.FileRecordSequence.Flush%2A> </xref:System.IO.Log.RecordAppendOptions>"
  syntax:
    content: public IAsyncResult BeginAppend (ArraySegment<byte> data, System.IO.Log.SequenceNumber nextUndoRecord, System.IO.Log.SequenceNumber previousRecord, System.IO.Log.RecordAppendOptions recordAppendOptions, System.IO.Log.ReservationCollection reservations, AsyncCallback callback, object state);
    parameters:
    - id: data
      type: System.ArraySegment{System.Byte}
      description: "En lista med byte-matris segment som ska sammanfogas och läggas till som post."
    - id: nextUndoRecord
      type: System.IO.Log.SequenceNumber
      description: "Sekvensnumret för nästa post i ordningen som angetts av användaren."
    - id: previousRecord
      type: System.IO.Log.SequenceNumber
      description: "Sekvensnumret för nästa post i föregående ordning."
    - id: recordAppendOptions
      type: System.IO.Log.RecordAppendOptions
      description: "Ett giltigt värde för <xref href=&quot;System.IO.Log.RecordAppendOptions&quot;> </xref> som anger hur data ska skrivas."
    - id: reservations
      type: System.IO.Log.ReservationCollection
      description: "En <xref href=&quot;System.IO.Log.ReservationCollection&quot;> </xref> som innehåller reservationen som ska användas för den här posten."
    - id: callback
      type: System.AsyncCallback
      description: "Ett valfritt asynkront motanrop, anropas när append är klar."
    - id: state
      type: System.Object
      description: "Ett objekt för användaren som särskiljer den här asynkrona viss Lägg till begäran från andra begäranden."
    return:
      type: System.IAsyncResult
      description: "En <xref:System.IAsyncResult>som representerar den asynkrona append som kan fortfarande vara väntande.</xref:System.IAsyncResult>"
  overload: System.IO.Log.FileRecordSequence.BeginAppend*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "En eller flera argument är <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "En eller flera argument är utanför intervallet."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>reservations</code>skapades inte av den här ordningsnummer."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "Åtgärden kan inte utföras eftersom postsekvensen öppnades skrivskyddad åtkomst."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "Begäran kan inte utföras på grund av ett oväntat i/o-undantag."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Metoden anropades efter sekvensen har avslutats av."
  - type: System.OutOfMemoryException
    commentId: T:System.OutOfMemoryException
    description: "Det finns inte tillräckligt med minne för att fortsätta körningen av programmet."
  - type: System.IO.Log.SequenceFullException
    commentId: T:System.IO.Log.SequenceFullException
    description: "Postsekvensen är full."
  - type: System.IO.Log.ReservationNotFoundException
    commentId: T:System.IO.Log.ReservationNotFoundException
    description: "Ingen reservation som är tillräckligt stor för att passa <code> data </code> finns i <code> reservations </code>."
  platform:
  - net462
- uid: System.IO.Log.FileRecordSequence.BeginAppend(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection,System.AsyncCallback,System.Object)
  id: BeginAppend(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection,System.AsyncCallback,System.Object)
  parent: System.IO.Log.FileRecordSequence
  langs:
  - csharp
  name: BeginAppend(IList<ArraySegment<Byte>>,SequenceNumber,SequenceNumber,RecordAppendOptions,ReservationCollection,AsyncCallback,Object)
  nameWithType: FileRecordSequence.BeginAppend(IList<ArraySegment<Byte>>,SequenceNumber,SequenceNumber,RecordAppendOptions,ReservationCollection,AsyncCallback,Object)
  fullName: System.IO.Log.FileRecordSequence.BeginAppend(IList<ArraySegment<Byte>>,SequenceNumber,SequenceNumber,RecordAppendOptions,ReservationCollection,AsyncCallback,Object)
  type: Method
  assemblies:
  - System.IO.Log
  namespace: System.IO.Log
  summary: "Börjar en asynkron läggas till igen med tidigare utrymmet i sekvensen. Den här metoden kan inte ärvas."
  remarks: "Överför du den <xref:System.IAsyncResult>returneras av metoden ska den <xref:System.IO.Log.FileRecordSequence.EndAppend%2A>metod för att se till att lägga till åtgärden har slutförts och resurser kan frigöras på lämpligt sätt.</xref:System.IO.Log.FileRecordSequence.EndAppend%2A> </xref:System.IAsyncResult> Om ett fel uppstod när en asynkron tilläggs genereras ett undantag inte förrän den <xref:System.IO.Log.FileRecordSequence.EndAppend%2A>metoden anropas med de <xref:System.IAsyncResult>som returneras av den här metoden.</xref:System.IAsyncResult> </xref:System.IO.Log.FileRecordSequence.EndAppend%2A>       Data i den `data` parametern sammanfogas till en enda Bytematrisen för att lägga till som post. Dock görs inte för att dela data tillbaka till matrisen segment när posten har lästs.       Den tillagda posten kommer att använda utrymme som tidigare har reserverats, med hjälp av en reservation som anges av den `reservations` parameter. Om append lyckas, kommer den använda minsta reservation området som kan innehålla data och som reservation område tas bort från samlingen.       Normalt sett den här metoden har slutförts innan posten har skrivits. För att säkerställa att en post har skrivits, ange antingen den <xref:System.IO.Log.RecordAppendOptions>flaggan med hjälp av den `recordAppendOptions` parametern eller anrop av <xref:System.IO.Log.FileRecordSequence.Flush%2A>metod.</xref:System.IO.Log.FileRecordSequence.Flush%2A> </xref:System.IO.Log.RecordAppendOptions>"
  syntax:
    content: public IAsyncResult BeginAppend (System.Collections.Generic.IList<ArraySegment<byte>> data, System.IO.Log.SequenceNumber nextUndoRecord, System.IO.Log.SequenceNumber previousRecord, System.IO.Log.RecordAppendOptions recordAppendOptions, System.IO.Log.ReservationCollection reservations, AsyncCallback callback, object state);
    parameters:
    - id: data
      type: System.Collections.Generic.IList{System.ArraySegment{System.Byte}}
      description: "En lista med byte-matris segment som ska sammanfogas och läggas till som post."
    - id: nextUndoRecord
      type: System.IO.Log.SequenceNumber
      description: "Sekvensnumret för nästa post i ordningen som angetts av användaren."
    - id: previousRecord
      type: System.IO.Log.SequenceNumber
      description: "Sekvensnumret för nästa post i föregående ordning."
    - id: recordAppendOptions
      type: System.IO.Log.RecordAppendOptions
      description: "Ett giltigt värde för <xref href=&quot;System.IO.Log.RecordAppendOptions&quot;> </xref> som anger hur data ska skrivas."
    - id: reservations
      type: System.IO.Log.ReservationCollection
      description: "En <xref href=&quot;System.IO.Log.ReservationCollection&quot;> </xref> som innehåller reservationen som ska användas för den här posten."
    - id: callback
      type: System.AsyncCallback
      description: "Ett valfritt asynkront motanrop, anropas när append är klar."
    - id: state
      type: System.Object
      description: "Ett objekt för användaren som särskiljer den här asynkrona viss Lägg till begäran från andra begäranden."
    return:
      type: System.IAsyncResult
      description: "En <xref:System.IAsyncResult>som representerar den asynkrona append som kan fortfarande vara väntande.</xref:System.IAsyncResult>"
  overload: System.IO.Log.FileRecordSequence.BeginAppend*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "En eller flera argument är <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "En eller flera argument är utanför intervallet."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>reservations</code>skapades inte av den här ordningsnummer."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "Åtgärden kan inte utföras eftersom postsekvensen öppnades skrivskyddad åtkomst."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "Begäran kan inte utföras på grund av ett oväntat i/o-undantag."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Metoden anropades efter sekvensen har avslutats av."
  - type: System.OutOfMemoryException
    commentId: T:System.OutOfMemoryException
    description: "Det finns inte tillräckligt med minne för att fortsätta körningen av programmet."
  - type: System.IO.Log.SequenceFullException
    commentId: T:System.IO.Log.SequenceFullException
    description: "Postsekvensen är full."
  - type: System.IO.Log.ReservationNotFoundException
    commentId: T:System.IO.Log.ReservationNotFoundException
    description: "Ingen reservation som är tillräckligt stor för att passa <code> data </code> finns i <code> reservations </code>."
  platform:
  - net462
- uid: System.IO.Log.FileRecordSequence.BeginFlush(System.IO.Log.SequenceNumber,System.AsyncCallback,System.Object)
  id: BeginFlush(System.IO.Log.SequenceNumber,System.AsyncCallback,System.Object)
  parent: System.IO.Log.FileRecordSequence
  langs:
  - csharp
  name: BeginFlush(SequenceNumber,AsyncCallback,Object)
  nameWithType: FileRecordSequence.BeginFlush(SequenceNumber,AsyncCallback,Object)
  fullName: System.IO.Log.FileRecordSequence.BeginFlush(SequenceNumber,AsyncCallback,Object)
  type: Method
  assemblies:
  - System.IO.Log
  namespace: System.IO.Log
  summary: "Börjar en asynkron tömning åtgärd som utrymme som tidigare har reserverats i sekvensen. Den här metoden kan inte ärvas."
  remarks: "Överför du den <xref:System.IAsyncResult>som returneras av den aktuella metoden att den <xref:System.IO.Log.FileRecordSequence.EndFlush%2A>metod för att se till att flush har slutförts och frigörs resurser på lämpligt sätt.</xref:System.IO.Log.FileRecordSequence.EndFlush%2A> </xref:System.IAsyncResult> Om ett fel uppstår under en asynkron tömning, genereras ett undantag inte förrän den <xref:System.IO.Log.FileRecordSequence.EndFlush%2A>metoden anropas med de <xref:System.IAsyncResult>som returneras av den här metoden.</xref:System.IAsyncResult> </xref:System.IO.Log.FileRecordSequence.EndFlush%2A>       Anropar den här metoden garanterar att alla poster som har varit läggs till i <xref:System.IO.Log.FileRecordSequence>skrivs varaktigt.</xref:System.IO.Log.FileRecordSequence>       Om ett ordningsnummer har tagits bort av, eller om du skickar ett ogiltigt argument, utlöses undantag omedelbart i den här åtgärden. Fel som uppstod under en asynkron tömning begäran, till exempel ett diskfel under i/o-begäran resulterar i undantag som när den <xref:System.IO.Log.FileRecordSequence.EndFlush%2A>metoden anropas.</xref:System.IO.Log.FileRecordSequence.EndFlush%2A>"
  syntax:
    content: public IAsyncResult BeginFlush (System.IO.Log.SequenceNumber sequenceNumber, AsyncCallback callback, object state);
    parameters:
    - id: sequenceNumber
      type: System.IO.Log.SequenceNumber
      description: "Sekvensnumret för den senaste posten måste skrivas. Om <xref href=&quot;System.IO.Log.SequenceNumber&quot;> </xref> är ogiltig, alla poster måste skrivas."
    - id: callback
      type: System.AsyncCallback
      description: "Ett valfritt asynkront motanrop, anropas när flush har slutförts."
    - id: state
      type: System.Object
      description: "Ett användardefinierade objekt som särskiljer den här viss asynkron tömning begäran från andra begäranden."
    return:
      type: System.IAsyncResult
      description: "En <xref:System.IAsyncResult>som representerar den asynkrona tömma åtgärd som kan fortfarande finnas väntande.</xref:System.IAsyncResult>"
  overload: System.IO.Log.FileRecordSequence.BeginFlush*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "En eller flera argument är ogiltiga.       <code>sequenceNumber</code>är inte giltigt för denna sekvens."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>sequenceNumber</code>är inte mellan basnummer och sista nummer i sekvensen."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "Ett i/o-fel uppstod när lokaliseraren data."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Metoden anropades efter sekvensen har avslutats av."
  - type: System.OutOfMemoryException
    commentId: T:System.OutOfMemoryException
    description: "Det finns inte tillräckligt med minne för att fortsätta körningen av programmet."
  platform:
  - net462
- uid: System.IO.Log.FileRecordSequence.BeginReserveAndAppend(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection,System.Int64[],System.AsyncCallback,System.Object)
  id: BeginReserveAndAppend(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection,System.Int64[],System.AsyncCallback,System.Object)
  parent: System.IO.Log.FileRecordSequence
  langs:
  - csharp
  name: BeginReserveAndAppend(ArraySegment<Byte>,SequenceNumber,SequenceNumber,RecordAppendOptions,ReservationCollection,Int64[],AsyncCallback,Object)
  nameWithType: FileRecordSequence.BeginReserveAndAppend(ArraySegment<Byte>,SequenceNumber,SequenceNumber,RecordAppendOptions,ReservationCollection,Int64[],AsyncCallback,Object)
  fullName: System.IO.Log.FileRecordSequence.BeginReserveAndAppend(ArraySegment<Byte>,SequenceNumber,SequenceNumber,RecordAppendOptions,ReservationCollection,Int64[],AsyncCallback,Object)
  type: Method
  assemblies:
  - System.IO.Log
  namespace: System.IO.Log
  summary: "Börjar en asynkron reservera och lägga till åtgärden. Den här metoden kan inte ärvas."
  remarks: "Överför du den <xref:System.IAsyncResult>returneras av metoden ska den <xref:System.IO.Log.FileRecordSequence.EndReserveAndAppend%2A>metod för att se till att lägga till åtgärden har slutförts och resurser kan frigöras på lämpligt sätt.</xref:System.IO.Log.FileRecordSequence.EndReserveAndAppend%2A> </xref:System.IAsyncResult> Om ett fel uppstod när en asynkron tilläggs genereras ett undantag inte förrän den <xref:System.IO.Log.FileRecordSequence.EndReserveAndAppend%2A>metoden anropas med de <xref:System.IAsyncResult>som returneras av den här metoden.</xref:System.IAsyncResult> </xref:System.IO.Log.FileRecordSequence.EndReserveAndAppend%2A>       Data i den `data` parametern sammanfogas till en enda Bytematrisen för att lägga till som post. Dock görs inte för att dela data tillbaka till matrisen segment när posten har lästs.       De angivna reservationerna läggs till den angivna reservationen samling i en atomisk åtgärd med en post lägga till åtgärden. Om append misslyckas har inget utrymme reserverats.       Den här metoden kan normalt slutföras innan posten har skrivits. För att säkerställa att en post har skrivits, ange antingen den <xref:System.IO.Log.RecordAppendOptions>flaggan med hjälp av den `recordAppendOptions` parametern eller anrop av <xref:System.IO.Log.FileRecordSequence.Flush%2A>metod.</xref:System.IO.Log.FileRecordSequence.Flush%2A> </xref:System.IO.Log.RecordAppendOptions>       Om ett ordningsnummer har tagits bort av, eller om du skickar ett ogiltigt argument, utlöses undantag omedelbart i den här åtgärden. Fel som uppstod under en asynkron append begäran, till exempel ett diskfel under i/o-begäran resulterar i undantag som när den <xref:System.IO.Log.FileRecordSequence.EndReserveAndAppend%2A>metoden anropas.</xref:System.IO.Log.FileRecordSequence.EndReserveAndAppend%2A>"
  syntax:
    content: public IAsyncResult BeginReserveAndAppend (ArraySegment<byte> data, System.IO.Log.SequenceNumber nextUndoRecord, System.IO.Log.SequenceNumber previousRecord, System.IO.Log.RecordAppendOptions recordAppendOptions, System.IO.Log.ReservationCollection reservationCollection, long[] reservations, AsyncCallback callback, object state);
    parameters:
    - id: data
      type: System.ArraySegment{System.Byte}
      description: "En lista med byte-matris segment som ska sammanfogas och läggas till som post."
    - id: nextUndoRecord
      type: System.IO.Log.SequenceNumber
      description: "Sekvensnumret för nästa post i ordningen som angetts av användaren."
    - id: previousRecord
      type: System.IO.Log.SequenceNumber
      description: "Sekvensnumret för nästa post i föregående ordning."
    - id: recordAppendOptions
      type: System.IO.Log.RecordAppendOptions
      description: "Ett giltigt värde för <xref href=&quot;System.IO.Log.RecordAppendOptions&quot;> </xref> som anger hur data ska skrivas."
    - id: reservationCollection
      type: System.IO.Log.ReservationCollection
      description: "Reservationssamlingen reservationer i ska göras."
    - id: reservations
      type: System.Int64[]
      description: "Reservationer för att, i byte."
    - id: callback
      type: System.AsyncCallback
      description: "Ett valfritt asynkront motanrop, anropas när append är klar."
    - id: state
      type: System.Object
      description: "Ett objekt för användaren som särskiljer den här asynkrona viss Lägg till begäran från andra begäranden."
    return:
      type: System.IAsyncResult
      description: "En <xref:System.IAsyncResult>som representerar den här asynkrona åtgärden kan det fortfarande finnas väntande.</xref:System.IAsyncResult>"
  overload: System.IO.Log.FileRecordSequence.BeginReserveAndAppend*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "En eller flera argument är <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "En eller flera argument är utanför intervallet."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>reservations</code>skapades inte av den här ordningsnummer."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "Åtgärden kan inte utföras eftersom postsekvensen öppnades skrivskyddad åtkomst."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "Det gick inte att utföra begäran på grund av ett oväntat i/o-undantag."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Metoden anropades efter sekvensen har avslutats av."
  - type: System.OutOfMemoryException
    commentId: T:System.OutOfMemoryException
    description: "Det finns inte tillräckligt med minne för att fortsätta körningen av programmet."
  - type: System.IO.Log.SequenceFullException
    commentId: T:System.IO.Log.SequenceFullException
    description: "Postsekvensen är full."
  - type: System.IO.Log.ReservationNotFoundException
    commentId: T:System.IO.Log.ReservationNotFoundException
    description: "Ingen reservation som är tillräckligt stor för att passa <code> data </code> finns i <code> reservations </code>."
  platform:
  - net462
- uid: System.IO.Log.FileRecordSequence.BeginReserveAndAppend(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection,System.Int64[],System.AsyncCallback,System.Object)
  id: BeginReserveAndAppend(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection,System.Int64[],System.AsyncCallback,System.Object)
  parent: System.IO.Log.FileRecordSequence
  langs:
  - csharp
  name: BeginReserveAndAppend(IList<ArraySegment<Byte>>,SequenceNumber,SequenceNumber,RecordAppendOptions,ReservationCollection,Int64[],AsyncCallback,Object)
  nameWithType: FileRecordSequence.BeginReserveAndAppend(IList<ArraySegment<Byte>>,SequenceNumber,SequenceNumber,RecordAppendOptions,ReservationCollection,Int64[],AsyncCallback,Object)
  fullName: System.IO.Log.FileRecordSequence.BeginReserveAndAppend(IList<ArraySegment<Byte>>,SequenceNumber,SequenceNumber,RecordAppendOptions,ReservationCollection,Int64[],AsyncCallback,Object)
  type: Method
  assemblies:
  - System.IO.Log
  namespace: System.IO.Log
  summary: "Börjar en asynkron reservera och lägga till åtgärden. Den här metoden kan inte ärvas."
  remarks: "Överför du den <xref:System.IAsyncResult>returneras av metoden ska den <xref:System.IO.Log.FileRecordSequence.EndReserveAndAppend%2A>metod för att se till att lägga till åtgärden har slutförts och resurser kan frigöras på lämpligt sätt.</xref:System.IO.Log.FileRecordSequence.EndReserveAndAppend%2A> </xref:System.IAsyncResult> Om ett fel uppstod när en asynkron tilläggs genereras ett undantag inte förrän den <xref:System.IO.Log.FileRecordSequence.EndReserveAndAppend%2A>metoden anropas med de <xref:System.IAsyncResult>som returneras av den här metoden.</xref:System.IAsyncResult> </xref:System.IO.Log.FileRecordSequence.EndReserveAndAppend%2A>       Data i den `data` parametern sammanfogas till en enda Bytematrisen för att lägga till som post. Dock görs inte för att dela data tillbaka till matrisen segment när posten har lästs.       De angivna reservationerna läggs till den angivna reservationen samling i en atomisk åtgärd med en post lägga till åtgärden. Om append misslyckas har inget utrymme reserverats.       Den här metoden kan normalt slutföras innan posten har skrivits. För att säkerställa att en post har skrivits, ange antingen den <xref:System.IO.Log.RecordAppendOptions>flaggan med hjälp av den `recordAppendOptions` parametern eller anrop av <xref:System.IO.Log.FileRecordSequence.Flush%2A>metod.</xref:System.IO.Log.FileRecordSequence.Flush%2A> </xref:System.IO.Log.RecordAppendOptions>       Om ett ordningsnummer har tagits bort av, eller om du skickar ett ogiltigt argument, utlöses undantag omedelbart i den här åtgärden. Fel som uppstod under en asynkron append begäran, till exempel ett diskfel under i/o-begäran resulterar i undantag som när den <xref:System.IO.Log.FileRecordSequence.EndReserveAndAppend%2A>metoden anropas.</xref:System.IO.Log.FileRecordSequence.EndReserveAndAppend%2A>"
  syntax:
    content: public IAsyncResult BeginReserveAndAppend (System.Collections.Generic.IList<ArraySegment<byte>> data, System.IO.Log.SequenceNumber nextUndoRecord, System.IO.Log.SequenceNumber previousRecord, System.IO.Log.RecordAppendOptions recordAppendOptions, System.IO.Log.ReservationCollection reservationCollection, long[] reservations, AsyncCallback callback, object state);
    parameters:
    - id: data
      type: System.Collections.Generic.IList{System.ArraySegment{System.Byte}}
      description: "En lista med byte-matris segment som ska sammanfogas och läggas till som post."
    - id: nextUndoRecord
      type: System.IO.Log.SequenceNumber
      description: "Sekvensnumret för nästa post i ordningen som angetts av användaren."
    - id: previousRecord
      type: System.IO.Log.SequenceNumber
      description: "Sekvensnumret för nästa post i föregående ordning."
    - id: recordAppendOptions
      type: System.IO.Log.RecordAppendOptions
      description: "Ett giltigt värde för <xref href=&quot;System.IO.Log.RecordAppendOptions&quot;> </xref> som anger hur data ska skrivas."
    - id: reservationCollection
      type: System.IO.Log.ReservationCollection
      description: "Reservationssamlingen reservationer i ska göras."
    - id: reservations
      type: System.Int64[]
      description: "Reservationer för att, i byte."
    - id: callback
      type: System.AsyncCallback
      description: "Ett valfritt asynkront motanrop, anropas när append är klar."
    - id: state
      type: System.Object
      description: "Ett objekt för användaren som särskiljer den här asynkrona viss Lägg till begäran från andra begäranden."
    return:
      type: System.IAsyncResult
      description: "En <xref:System.IAsyncResult>som representerar den här asynkrona åtgärden kan det fortfarande finnas väntande.</xref:System.IAsyncResult>"
  overload: System.IO.Log.FileRecordSequence.BeginReserveAndAppend*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "En eller flera argument är <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "En eller flera argument är utanför intervallet."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>reservations</code>skapades inte av den här ordningsnummer."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "Åtgärden kan inte utföras eftersom postsekvensen öppnades skrivskyddad åtkomst."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "Det gick inte att utföra begäran på grund av ett oväntat i/o-undantag."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Metoden anropades efter sekvensen har avslutats av."
  - type: System.OutOfMemoryException
    commentId: T:System.OutOfMemoryException
    description: "Det finns inte tillräckligt med minne för att fortsätta körningen av programmet."
  - type: System.IO.Log.SequenceFullException
    commentId: T:System.IO.Log.SequenceFullException
    description: "Postsekvensen är full."
  - type: System.IO.Log.ReservationNotFoundException
    commentId: T:System.IO.Log.ReservationNotFoundException
    description: "Ingen reservation som är tillräckligt stor för att passa <code> data </code> finns i <code> reservations </code>."
  platform:
  - net462
- uid: System.IO.Log.FileRecordSequence.BeginWriteRestartArea(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.ReservationCollection,System.AsyncCallback,System.Object)
  id: BeginWriteRestartArea(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.ReservationCollection,System.AsyncCallback,System.Object)
  parent: System.IO.Log.FileRecordSequence
  langs:
  - csharp
  name: BeginWriteRestartArea(ArraySegment<Byte>,SequenceNumber,ReservationCollection,AsyncCallback,Object)
  nameWithType: FileRecordSequence.BeginWriteRestartArea(ArraySegment<Byte>,SequenceNumber,ReservationCollection,AsyncCallback,Object)
  fullName: System.IO.Log.FileRecordSequence.BeginWriteRestartArea(ArraySegment<Byte>,SequenceNumber,ReservationCollection,AsyncCallback,Object)
  type: Method
  assemblies:
  - System.IO.Log
  namespace: System.IO.Log
  summary: "Börjar en asynkron omstart området Skrivåtgärden, utrymme som tidigare har reserverats i sekvensen. Den här metoden kan inte ärvas."
  remarks: "Överför du den <xref:System.IAsyncResult>returneras av metoden ska den <xref:System.IO.Log.FileRecordSequence.EndWriteRestartArea%2A>metod för att vara säker på att skrivåtgärden omstart området har slutförts och resurser kan frigöras på lämpligt sätt.</xref:System.IO.Log.FileRecordSequence.EndWriteRestartArea%2A> </xref:System.IAsyncResult> Om ett fel uppstod under en asynkron omstart området Skrivåtgärden genereras ett undantag inte förrän den <xref:System.IO.Log.FileRecordSequence.EndWriteRestartArea%2A>metoden anropas med de <xref:System.IAsyncResult>som returneras av den här metoden.</xref:System.IAsyncResult> </xref:System.IO.Log.FileRecordSequence.EndWriteRestartArea%2A>       Data i den `data` parametern sammanfogas till en enda Bytematrisen för att lägga till som post. Dock görs inte för att dela data tillbaka till matrisen segment när posten har lästs.       När åtgärden har slutförts har i grundläggande sekvensnummer uppdaterats. Alla loggposter med sekvensnummer mindre än nya grundläggande sekvensnummer som inte är tillgängligt.       Om en <xref:System.IO.Log.ReservationCollection>anges området skriftliga omstart kommer att använda utrymme som tidigare har reserverats, med hjälp av en reservation finns i samlingen.</xref:System.IO.Log.ReservationCollection> Om metoden lyckas, kommer den att använda minsta reservationen som kan innehålla data och att reservationen tas bort från samlingen.       Om ett ordningsnummer har tagits bort av, eller om du skickar ett ogiltigt argument, utlöses undantag omedelbart i den här åtgärden. Fel som uppstod under en asynkron append begäran, till exempel ett diskfel under i/o-begäran resulterar i undantag som när den <xref:System.IO.Log.FileRecordSequence.EndWriteRestartArea%2A>metoden anropas.</xref:System.IO.Log.FileRecordSequence.EndWriteRestartArea%2A>"
  syntax:
    content: public IAsyncResult BeginWriteRestartArea (ArraySegment<byte> data, System.IO.Log.SequenceNumber newBaseSeqNum, System.IO.Log.ReservationCollection reservation, AsyncCallback callback, object state);
    parameters:
    - id: data
      type: System.ArraySegment{System.Byte}
      description: "En lista med byte-matris segment som ska sammanfogas och läggas till som post."
    - id: newBaseSeqNum
      type: System.IO.Log.SequenceNumber
      description: "Den nya grundläggande sekvensnummer. Det angivna sekvensnumret måste vara större än eller lika med det aktuella grundläggande sekvensnumret."
    - id: reservation
      type: System.IO.Log.ReservationCollection
      description: "En <xref href=&quot;System.IO.Log.ReservationCollection&quot;> </xref> som innehåller reservationen som ska användas för det här området omstart."
    - id: callback
      type: System.AsyncCallback
      description: "Ett valfritt asynkront motanrop, anropas när omstart området skrivning har slutförts."
    - id: state
      type: System.Object
      description: "Ett objekt för användaren som särskiljer det här området viss asynkron omstart skriva begäran från andra begäranden."
    return:
      type: System.IAsyncResult
      description: "En <xref:System.IAsyncResult>som representerar den asynkrona starta om området Skrivåtgärden, det gick fortfarande finnas väntande.</xref:System.IAsyncResult>"
  overload: System.IO.Log.FileRecordSequence.BeginWriteRestartArea*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "En eller flera argument är <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>newBaseSeqNum</code>är inte mellan basnummer och sista nummer i sekvensen.       - eller - en ny eller befintlig arkivdel eller bas i den aktiva loggen är ogiltig."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>reservations</code>skapades inte av den här ordningsnummer.       - eller - <code>newBaseSeqNum</code> är inte giltigt för denna sekvens."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "Åtgärden kan inte utföras eftersom postsekvensen öppnades skrivskyddad åtkomst."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "Begäran kan inte utföras på grund av ett oväntat i/o-undantag."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Metoden anropades efter sekvensen har avslutats av."
  - type: System.OutOfMemoryException
    commentId: T:System.OutOfMemoryException
    description: "Det finns inte tillräckligt med minne för att fortsätta körningen av programmet."
  - type: System.IO.Log.SequenceFullException
    commentId: T:System.IO.Log.SequenceFullException
    description: "Postsekvensen är full."
  - type: System.IO.Log.ReservationNotFoundException
    commentId: T:System.IO.Log.ReservationNotFoundException
    description: "Ingen reservation som är tillräckligt stor för att passa <code> data </code> finns i <code> reservations </code>."
  platform:
  - net462
- uid: System.IO.Log.FileRecordSequence.BeginWriteRestartArea(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.ReservationCollection,System.AsyncCallback,System.Object)
  id: BeginWriteRestartArea(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.ReservationCollection,System.AsyncCallback,System.Object)
  parent: System.IO.Log.FileRecordSequence
  langs:
  - csharp
  name: BeginWriteRestartArea(IList<ArraySegment<Byte>>,SequenceNumber,ReservationCollection,AsyncCallback,Object)
  nameWithType: FileRecordSequence.BeginWriteRestartArea(IList<ArraySegment<Byte>>,SequenceNumber,ReservationCollection,AsyncCallback,Object)
  fullName: System.IO.Log.FileRecordSequence.BeginWriteRestartArea(IList<ArraySegment<Byte>>,SequenceNumber,ReservationCollection,AsyncCallback,Object)
  type: Method
  assemblies:
  - System.IO.Log
  namespace: System.IO.Log
  summary: "Börjar en asynkron omstart området Skrivåtgärden, utrymme som tidigare har reserverats i sekvensen. Den här metoden kan inte ärvas."
  remarks: "Överför du den <xref:System.IAsyncResult>returneras av metoden ska den <xref:System.IO.Log.FileRecordSequence.EndWriteRestartArea%2A>metod för att vara säker på att skrivåtgärden omstart området har slutförts och resurser kan frigöras på lämpligt sätt.</xref:System.IO.Log.FileRecordSequence.EndWriteRestartArea%2A> </xref:System.IAsyncResult> Om ett fel uppstod under en asynkron omstart området Skrivåtgärden genereras ett undantag inte förrän den <xref:System.IO.Log.FileRecordSequence.EndWriteRestartArea%2A>metoden anropas med de <xref:System.IAsyncResult>som returneras av den här metoden.</xref:System.IAsyncResult> </xref:System.IO.Log.FileRecordSequence.EndWriteRestartArea%2A>       Data i den `data` parametern sammanfogas till en enda Bytematrisen för att lägga till som post. Dock görs inte för att dela data tillbaka till matrisen segment när posten har lästs.       När åtgärden har slutförts har i grundläggande sekvensnummer uppdaterats. Alla loggposter med sekvensnummer mindre än nya grundläggande sekvensnummer som inte är tillgängligt.       Om en <xref:System.IO.Log.ReservationCollection>anges området skriftliga omstart kommer att använda utrymme som tidigare har reserverats, med hjälp av en reservation finns i samlingen.</xref:System.IO.Log.ReservationCollection> Om metoden lyckas, kommer den att använda minsta reservationen som kan innehålla data och att reservationen tas bort från samlingen.       Om ett ordningsnummer har tagits bort av, eller om du skickar ett ogiltigt argument, utlöses undantag omedelbart i den här åtgärden. Fel som uppstod under en asynkron append begäran, till exempel ett diskfel under i/o-begäran resulterar i undantag som när den <xref:System.IO.Log.FileRecordSequence.EndWriteRestartArea%2A>metoden anropas.</xref:System.IO.Log.FileRecordSequence.EndWriteRestartArea%2A>"
  syntax:
    content: public IAsyncResult BeginWriteRestartArea (System.Collections.Generic.IList<ArraySegment<byte>> data, System.IO.Log.SequenceNumber newBaseSeqNum, System.IO.Log.ReservationCollection reservation, AsyncCallback callback, object state);
    parameters:
    - id: data
      type: System.Collections.Generic.IList{System.ArraySegment{System.Byte}}
      description: "En lista med byte-matris segment som ska sammanfogas och läggas till som post."
    - id: newBaseSeqNum
      type: System.IO.Log.SequenceNumber
      description: "Den nya grundläggande sekvensnummer. Det angivna sekvensnumret måste vara större än eller lika med det aktuella grundläggande sekvensnumret."
    - id: reservation
      type: System.IO.Log.ReservationCollection
      description: "En <xref href=&quot;System.IO.Log.ReservationCollection&quot;> </xref> som innehåller reservationen som ska användas för det här området omstart."
    - id: callback
      type: System.AsyncCallback
      description: "Ett valfritt asynkront motanrop, anropas när omstart området skrivning har slutförts."
    - id: state
      type: System.Object
      description: "Ett objekt för användaren som särskiljer det här området viss asynkron omstart skriva begäran från andra begäranden."
    return:
      type: System.IAsyncResult
      description: "En <xref:System.IAsyncResult>som representerar den asynkrona starta om området Skrivåtgärden, det gick fortfarande finnas väntande.</xref:System.IAsyncResult>"
  overload: System.IO.Log.FileRecordSequence.BeginWriteRestartArea*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "En eller flera argument är <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>newBaseSeqNum</code>är inte mellan basnummer och sista nummer i sekvensen.       - eller - en ny eller befintlig arkivdel eller bas i den aktiva loggen är ogiltig."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>reservations</code>skapades inte av den här ordningsnummer.       - eller - <code>newBaseSeqNum</code> är inte giltigt för denna sekvens."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "Åtgärden kan inte utföras eftersom postsekvensen öppnades skrivskyddad åtkomst."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "Begäran kan inte utföras på grund av ett oväntat i/o-undantag."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Metoden anropades efter sekvensen har avslutats av."
  - type: System.OutOfMemoryException
    commentId: T:System.OutOfMemoryException
    description: "Det finns inte tillräckligt med minne för att fortsätta körningen av programmet."
  - type: System.IO.Log.SequenceFullException
    commentId: T:System.IO.Log.SequenceFullException
    description: "Postsekvensen är full."
  - type: System.IO.Log.ReservationNotFoundException
    commentId: T:System.IO.Log.ReservationNotFoundException
    description: "Ingen reservation som är tillräckligt stor för att passa <code> data </code> finns i <code> reservations </code>."
  platform:
  - net462
- uid: System.IO.Log.FileRecordSequence.CreateReservationCollection
  id: CreateReservationCollection
  parent: System.IO.Log.FileRecordSequence
  langs:
  - csharp
  name: CreateReservationCollection()
  nameWithType: FileRecordSequence.CreateReservationCollection()
  fullName: System.IO.Log.FileRecordSequence.CreateReservationCollection()
  type: Method
  assemblies:
  - System.IO.Log
  namespace: System.IO.Log
  summary: "Skapar en ny <xref href=&quot;System.IO.Log.ReservationCollection&quot;> </xref>. Den här metoden kan inte ärvas."
  syntax:
    content: public System.IO.Log.ReservationCollection CreateReservationCollection ();
    parameters: []
    return:
      type: System.IO.Log.ReservationCollection
      description: "Den nyligen skapade <xref href=&quot;System.IO.Log.ReservationCollection&quot;> </xref>."
  overload: System.IO.Log.FileRecordSequence.CreateReservationCollection*
  exceptions:
  - type: System.OutOfMemoryException
    commentId: T:System.OutOfMemoryException
    description: "Det finns inte tillräckligt med minne för att fortsätta körningen av programmet."
  platform:
  - net462
- uid: System.IO.Log.FileRecordSequence.Dispose
  id: Dispose
  parent: System.IO.Log.FileRecordSequence
  langs:
  - csharp
  name: Dispose()
  nameWithType: FileRecordSequence.Dispose()
  fullName: System.IO.Log.FileRecordSequence.Dispose()
  type: Method
  assemblies:
  - System.IO.Log
  namespace: System.IO.Log
  summary: "Omedelbart släpper de ohanterade resurser som används av ett objekt."
  syntax:
    content: public void Dispose ();
    parameters: []
  overload: System.IO.Log.FileRecordSequence.Dispose*
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "Ett i/o-fel uppstod när lokaliseraren data."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Metoden anropades efter sekvensen har avslutats av."
  - type: System.OutOfMemoryException
    commentId: T:System.OutOfMemoryException
    description: "Det finns inte tillräckligt med minne för att fortsätta körningen av programmet."
  platform:
  - net462
- uid: System.IO.Log.FileRecordSequence.EndAppend(System.IAsyncResult)
  id: EndAppend(System.IAsyncResult)
  parent: System.IO.Log.FileRecordSequence
  langs:
  - csharp
  name: EndAppend(IAsyncResult)
  nameWithType: FileRecordSequence.EndAppend(IAsyncResult)
  fullName: System.IO.Log.FileRecordSequence.EndAppend(IAsyncResult)
  type: Method
  assemblies:
  - System.IO.Log
  namespace: System.IO.Log
  summary: "Slutar en asynkron lägga till åtgärden. Den här metoden kan inte ärvas."
  remarks: "Den här metoden blockerar tills i/o-åtgärden har slutförts. Fel som inträffar när en asynkron skrivning begäran, till exempel ett diskfel under i/o-begäran bli synliga när EndAppend anropas.       Den här metoden anropas en gång för varje <xref:System.IAsyncResult>som returneras av den <xref:System.IO.Log.FileRecordSequence.BeginAppend%2A>metoden.</xref:System.IO.Log.FileRecordSequence.BeginAppend%2A> </xref:System.IAsyncResult>"
  syntax:
    content: public System.IO.Log.SequenceNumber EndAppend (IAsyncResult result);
    parameters:
    - id: result
      type: System.IAsyncResult
      description: "En referens till utestående asynkrona i/o-begäran."
    return:
      type: System.IO.Log.SequenceNumber
      description: "Sekvensnumret för den tillagda loggposten."
  overload: System.IO.Log.FileRecordSequence.EndAppend*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>result</code>är ogiltigt."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "<xref uid=&quot;langword_csharp_End&quot; name=&quot;End&quot; href=&quot;&quot;></xref>har redan anropats för denna asynkrona åtgärd."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "Begäran kan inte utföras på grund av ett oväntat i/o-undantag."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Metoden anropades efter sekvensen har avslutats av."
  - type: System.OutOfMemoryException
    commentId: T:System.OutOfMemoryException
    description: "Det finns inte tillräckligt med minne för att fortsätta körningen av programmet."
  platform:
  - net462
- uid: System.IO.Log.FileRecordSequence.EndFlush(System.IAsyncResult)
  id: EndFlush(System.IAsyncResult)
  parent: System.IO.Log.FileRecordSequence
  langs:
  - csharp
  name: EndFlush(IAsyncResult)
  nameWithType: FileRecordSequence.EndFlush(IAsyncResult)
  fullName: System.IO.Log.FileRecordSequence.EndFlush(IAsyncResult)
  type: Method
  assemblies:
  - System.IO.Log
  namespace: System.IO.Log
  summary: "Avslutar en tömning asynkron åtgärd. Den här metoden kan inte ärvas."
  remarks: "Den här metoden blockerar tills i/o-åtgärden har slutförts. Fel som inträffar när en asynkron tömning begäran, till exempel ett diskfel under i/o-begäran bli synliga när EndFlush anropas.       Den här metoden anropas en gång för varje <xref:System.IAsyncResult>som returneras av den <xref:System.IO.Log.FileRecordSequence.BeginFlush%2A>metoden.</xref:System.IO.Log.FileRecordSequence.BeginFlush%2A> </xref:System.IAsyncResult>"
  syntax:
    content: public System.IO.Log.SequenceNumber EndFlush (IAsyncResult result);
    parameters:
    - id: result
      type: System.IAsyncResult
      description: "En referens till utestående asynkrona i/o-begäran."
    return:
      type: System.IO.Log.SequenceNumber
      description: "Sekvensnumret för den sista posten skrivs."
  overload: System.IO.Log.FileRecordSequence.EndFlush*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>result</code>är ogiltigt."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "<xref uid=&quot;langword_csharp_End&quot; name=&quot;End&quot; href=&quot;&quot;></xref>har redan anropats för denna asynkrona åtgärd."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "Begäran kan inte utföras på grund av ett oväntat i/o-undantag."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Metoden anropades efter sekvensen har avslutats av."
  - type: System.OutOfMemoryException
    commentId: T:System.OutOfMemoryException
    description: "Det finns inte tillräckligt med minne för att fortsätta körningen av programmet."
  platform:
  - net462
- uid: System.IO.Log.FileRecordSequence.EndReserveAndAppend(System.IAsyncResult)
  id: EndReserveAndAppend(System.IAsyncResult)
  parent: System.IO.Log.FileRecordSequence
  langs:
  - csharp
  name: EndReserveAndAppend(IAsyncResult)
  nameWithType: FileRecordSequence.EndReserveAndAppend(IAsyncResult)
  fullName: System.IO.Log.FileRecordSequence.EndReserveAndAppend(IAsyncResult)
  type: Method
  assemblies:
  - System.IO.Log
  namespace: System.IO.Log
  summary: "Slutar en asynkron reservera och lägga till åtgärden. Den här metoden kan inte ärvas."
  remarks: "Den här metoden blockerar tills i/o-åtgärden har slutförts. Fel som inträffar när en asynkron skrivning begäran, till exempel ett diskfel under i/o-begäran bli synliga när EndReserveAndAppend anropas.       Den här metoden anropas en gång för varje <xref:System.IAsyncResult>som returneras av den <xref:System.IO.Log.FileRecordSequence.BeginReserveAndAppend%2A>metoden.</xref:System.IO.Log.FileRecordSequence.BeginReserveAndAppend%2A> </xref:System.IAsyncResult>"
  syntax:
    content: public System.IO.Log.SequenceNumber EndReserveAndAppend (IAsyncResult result);
    parameters:
    - id: result
      type: System.IAsyncResult
      description: "En referens till utestående asynkrona i/o-begäran."
    return:
      type: System.IO.Log.SequenceNumber
      description: "Sekvensnumret för den tillagda loggposten."
  overload: System.IO.Log.FileRecordSequence.EndReserveAndAppend*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>result</code>är ogiltigt."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "<xref uid=&quot;langword_csharp_End&quot; name=&quot;End&quot; href=&quot;&quot;></xref>har redan anropats för denna asynkrona åtgärd."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "Begäran kan inte utföras på grund av ett oväntat i/o-undantag."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Metoden anropades efter sekvensen har avslutats av."
  - type: System.OutOfMemoryException
    commentId: T:System.OutOfMemoryException
    description: "Det finns inte tillräckligt med minne för att fortsätta körningen av programmet."
  platform:
  - net462
- uid: System.IO.Log.FileRecordSequence.EndWriteRestartArea(System.IAsyncResult)
  id: EndWriteRestartArea(System.IAsyncResult)
  parent: System.IO.Log.FileRecordSequence
  langs:
  - csharp
  name: EndWriteRestartArea(IAsyncResult)
  nameWithType: FileRecordSequence.EndWriteRestartArea(IAsyncResult)
  fullName: System.IO.Log.FileRecordSequence.EndWriteRestartArea(IAsyncResult)
  type: Method
  assemblies:
  - System.IO.Log
  namespace: System.IO.Log
  summary: "Avslutar en skrivåtgärd för asynkron omstart område. Den här metoden kan inte ärvas."
  remarks: "Den här metoden blockerar tills i/o-åtgärden har slutförts. Fel som inträffar när en asynkron skrivning begäran, till exempel ett diskfel under i/o-begäran bli synliga när EndWriteRestartArea anropas.       Den här metoden anropas en gång för varje <xref:System.IAsyncResult>som returneras av den <xref:System.IO.Log.FileRecordSequence.BeginWriteRestartArea%2A>metoden.</xref:System.IO.Log.FileRecordSequence.BeginWriteRestartArea%2A> </xref:System.IAsyncResult>"
  syntax:
    content: public System.IO.Log.SequenceNumber EndWriteRestartArea (IAsyncResult result);
    parameters:
    - id: result
      type: System.IAsyncResult
      description: "En referens till utestående asynkrona i/o-begäran."
    return:
      type: System.IO.Log.SequenceNumber
      description: "Sekvensnumret för skriftligt loggposten."
  overload: System.IO.Log.FileRecordSequence.EndWriteRestartArea*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>result</code>är ogiltigt."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "<xref uid=&quot;langword_csharp_End&quot; name=&quot;End&quot; href=&quot;&quot;></xref>har redan anropats för denna asynkrona åtgärd."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "Begäran kan inte utföras på grund av ett oväntat i/o-undantag."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Metoden anropades efter sekvensen har avslutats av."
  - type: System.OutOfMemoryException
    commentId: T:System.OutOfMemoryException
    description: "Det finns inte tillräckligt med minne för att fortsätta körningen av programmet."
  platform:
  - net462
- uid: System.IO.Log.FileRecordSequence.Flush
  id: Flush
  parent: System.IO.Log.FileRecordSequence
  langs:
  - csharp
  name: Flush()
  nameWithType: FileRecordSequence.Flush()
  fullName: System.IO.Log.FileRecordSequence.Flush()
  type: Method
  assemblies:
  - System.IO.Log
  namespace: System.IO.Log
  summary: "Garanterar att alla nya posterna har skrivits. Den här metoden kan inte ärvas."
  remarks: "Anropar den här metoden garanterar att alla poster som har varit läggs till i <xref:System.IO.Log.FileRecordSequence>har skrivits varaktigt.</xref:System.IO.Log.FileRecordSequence>"
  syntax:
    content: public System.IO.Log.SequenceNumber Flush ();
    parameters: []
    return:
      type: System.IO.Log.SequenceNumber
      description: "Sekvensnumret för den sista posten skrivs."
  overload: System.IO.Log.FileRecordSequence.Flush*
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "Ett i/o-fel uppstod när lokaliseraren data."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Metoden anropades efter sekvensen har avslutats av."
  - type: System.OutOfMemoryException
    commentId: T:System.OutOfMemoryException
    description: "Det finns inte tillräckligt med minne för att fortsätta körningen av programmet."
  platform:
  - net462
- uid: System.IO.Log.FileRecordSequence.Flush(System.IO.Log.SequenceNumber)
  id: Flush(System.IO.Log.SequenceNumber)
  parent: System.IO.Log.FileRecordSequence
  langs:
  - csharp
  name: Flush(SequenceNumber)
  nameWithType: FileRecordSequence.Flush(SequenceNumber)
  fullName: System.IO.Log.FileRecordSequence.Flush(SequenceNumber)
  type: Method
  assemblies:
  - System.IO.Log
  namespace: System.IO.Log
  summary: "Garanterar att alla nya posterna har skrivits. Den här metoden kan inte ärvas."
  remarks: "Anropar den här metoden garanterar att alla poster med sekvens nummer upp till och med det angivna sekvensnumret har skrivits varaktigt."
  syntax:
    content: public System.IO.Log.SequenceNumber Flush (System.IO.Log.SequenceNumber sequenceNumber);
    parameters:
    - id: sequenceNumber
      type: System.IO.Log.SequenceNumber
      description: "Sekvensnumret för den senaste posten måste skrivas. Om den här <xref href=&quot;System.IO.Log.SequenceNumber&quot;> </xref> är ogiltig, alla poster måste skrivas."
    return:
      type: System.IO.Log.SequenceNumber
      description: "Sekvensnumret för den sista posten skrivs."
  overload: System.IO.Log.FileRecordSequence.Flush*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>sequenceNumber</code>är inte mellan basnummer och sista nummer i sekvensen."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>sequenceNumber</code>är inte giltigt för denna sekvens."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "Ett i/o-fel uppstod när lokaliseraren data."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Metoden anropades efter sekvensen har avslutats av."
  - type: System.OutOfMemoryException
    commentId: T:System.OutOfMemoryException
    description: "Det finns inte tillräckligt med minne för att fortsätta körningen av programmet."
  platform:
  - net462
- uid: System.IO.Log.FileRecordSequence.LastSequenceNumber
  id: LastSequenceNumber
  parent: System.IO.Log.FileRecordSequence
  langs:
  - csharp
  name: LastSequenceNumber
  nameWithType: FileRecordSequence.LastSequenceNumber
  fullName: System.IO.Log.FileRecordSequence.LastSequenceNumber
  type: Property
  assemblies:
  - System.IO.Log
  namespace: System.IO.Log
  summary: "Hämtar sekvensnumret som är större än den sista posten läggas till."
  remarks: "Den här egenskapen innehåller ett sekvensnummer som garanterat vara större än sekvensnumret för senast läggs posten. Giltiga sekvensnummer är större än eller lika med <xref:System.IO.Log.FileRecordSequence.BaseSequenceNumber%2A>och mindre än LastSequenceNumber.</xref:System.IO.Log.FileRecordSequence.BaseSequenceNumber%2A> Alla andra sekvensnummer är ogiltiga."
  syntax:
    content: public System.IO.Log.SequenceNumber LastSequenceNumber { get; }
    return:
      type: System.IO.Log.SequenceNumber
      description: "Ett sekvensnummer som är större än den sista posten läggas till."
  overload: System.IO.Log.FileRecordSequence.LastSequenceNumber*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Egenskapen användes när sekvensen har avslutats av."
  platform:
  - net462
- uid: System.IO.Log.FileRecordSequence.MaximumRecordLength
  id: MaximumRecordLength
  parent: System.IO.Log.FileRecordSequence
  langs:
  - csharp
  name: MaximumRecordLength
  nameWithType: FileRecordSequence.MaximumRecordLength
  fullName: System.IO.Log.FileRecordSequence.MaximumRecordLength
  type: Property
  assemblies:
  - System.IO.Log
  namespace: System.IO.Log
  summary: "Hämtar storleken på den största post som kan läggas till eller läsa från den här sekvensen i byte."
  syntax:
    content: public long MaximumRecordLength { get; }
    return:
      type: System.Int64
      description: "Storleken på den största post som kan läggas till eller läsa från den här sekvensen i byte."
  overload: System.IO.Log.FileRecordSequence.MaximumRecordLength*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Egenskapen användes när sekvensen har avslutats av."
  platform:
  - net462
- uid: System.IO.Log.FileRecordSequence.ReadLogRecords(System.IO.Log.SequenceNumber,System.IO.Log.LogRecordEnumeratorType)
  id: ReadLogRecords(System.IO.Log.SequenceNumber,System.IO.Log.LogRecordEnumeratorType)
  parent: System.IO.Log.FileRecordSequence
  langs:
  - csharp
  name: ReadLogRecords(SequenceNumber,LogRecordEnumeratorType)
  nameWithType: FileRecordSequence.ReadLogRecords(SequenceNumber,LogRecordEnumeratorType)
  fullName: System.IO.Log.FileRecordSequence.ReadLogRecords(SequenceNumber,LogRecordEnumeratorType)
  type: Method
  assemblies:
  - System.IO.Log
  namespace: System.IO.Log
  summary: "Returnerar en enumerable samling av poster i sekvensen. Den här metoden kan inte ärvas."
  remarks: "Den här metoden returnerar en enumerable samling av poster i sekvensen. Ordningen för de uppräknade posterna beror på värdet för den `logRecordEnum` parameter."
  example:
  - "The following example shows how you can use this method to read the records in a log sequence.  \n  \n [!code-vb[IRecordSequence#2](~/add/codesnippet/visualbasic/5d31b2a4-d7cf-41cf-80bb-_1.vb)]\n [!code-cs[IRecordSequence#2](~/add/codesnippet/csharp/5d31b2a4-d7cf-41cf-80bb-_1.cs)]"
  syntax:
    content: public System.Collections.Generic.IEnumerable<System.IO.Log.LogRecord> ReadLogRecords (System.IO.Log.SequenceNumber start, System.IO.Log.LogRecordEnumeratorType logRecordEnum);
    parameters:
    - id: start
      type: System.IO.Log.SequenceNumber
      description: "Sekvensnumret för den första posten där läsningen startar."
    - id: logRecordEnum
      type: System.IO.Log.LogRecordEnumeratorType
      description: "En giltig <xref href=&quot;System.IO.Log.LogRecordEnumeratorType&quot;> </xref> värde som anger hur (det vill säga framåt eller bakåt) i vilka poster som ska läsas från en <xref href=&quot;System.IO.Log.LogRecordSequence&quot;> </xref>."
    return:
      type: System.Collections.Generic.IEnumerable{System.IO.Log.LogRecord}
      description: "En enumerable samling poster i sekvensen."
  overload: System.IO.Log.FileRecordSequence.ReadLogRecords*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "En eller flera argument är utanför intervallet."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "Åtgärden kan inte utföras eftersom postsekvensen öppnades med skrivtillgång."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "Postsekvensen är skadad.       - eller - posten har skrivits med en inkompatibel version av postsekvensen."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Uppräkningen är avslutad.       - eller - uppräkningen har inte startats. Ett anrop till <xref:System.Collections.IEnumerator.MoveNext*>måste göras.</xref:System.Collections.IEnumerator.MoveNext*>"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Metoden anropades efter sekvensen har avslutats av."
  - type: System.OutOfMemoryException
    commentId: T:System.OutOfMemoryException
    description: "Det finns inte tillräckligt med minne för att fortsätta körningen av programmet."
  platform:
  - net462
- uid: System.IO.Log.FileRecordSequence.ReadRestartAreas
  id: ReadRestartAreas
  parent: System.IO.Log.FileRecordSequence
  langs:
  - csharp
  name: ReadRestartAreas()
  nameWithType: FileRecordSequence.ReadRestartAreas()
  fullName: System.IO.Log.FileRecordSequence.ReadRestartAreas()
  type: Method
  assemblies:
  - System.IO.Log
  namespace: System.IO.Log
  summary: "Returnerar en enumerable samling av omstart områden i sekvensen. Den här metoden kan inte ärvas."
  remarks: "Omstart områden räknas upp i omvänd ordning nummer ordning, det vill säga från det högsta sekvensnumret lägsta sekvensnummer. Starta bara om områden med sekvensnummer mellan den sista sekvensnumret och grundläggande sekvensnumret räknas."
  syntax:
    content: public System.Collections.Generic.IEnumerable<System.IO.Log.LogRecord> ReadRestartAreas ();
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable{System.IO.Log.LogRecord}
      description: "En enumerable samling omstart områden i sekvensen."
  overload: System.IO.Log.FileRecordSequence.ReadRestartAreas*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "Åtgärden kan inte utföras eftersom postsekvensen öppnades med skrivtillgång."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "Postsekvensen är skadad.       - eller - posten har skrivits med en inkompatibel version av postsekvensen."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Uppräkningen är avslutad.       - eller - uppräkningen har inte startats. Ett anrop till <xref:System.Collections.IEnumerator.MoveNext*>måste göras.</xref:System.Collections.IEnumerator.MoveNext*>"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Metoden anropades efter sekvensen har avslutats av."
  - type: System.OutOfMemoryException
    commentId: T:System.OutOfMemoryException
    description: "Det finns inte tillräckligt med minne för att fortsätta körningen av programmet."
  platform:
  - net462
- uid: System.IO.Log.FileRecordSequence.ReserveAndAppend(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection,System.Int64[])
  id: ReserveAndAppend(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection,System.Int64[])
  parent: System.IO.Log.FileRecordSequence
  langs:
  - csharp
  name: ReserveAndAppend(ArraySegment<Byte>,SequenceNumber,SequenceNumber,RecordAppendOptions,ReservationCollection,Int64[])
  nameWithType: FileRecordSequence.ReserveAndAppend(ArraySegment<Byte>,SequenceNumber,SequenceNumber,RecordAppendOptions,ReservationCollection,Int64[])
  fullName: System.IO.Log.FileRecordSequence.ReserveAndAppend(ArraySegment<Byte>,SequenceNumber,SequenceNumber,RecordAppendOptions,ReservationCollection,Int64[])
  type: Method
  assemblies:
  - System.IO.Log
  namespace: System.IO.Log
  summary: "Gör en enda reservation och lägger till en post i sekvensen automatiskt. Den här metoden kan inte ärvas."
  remarks: "Data i den `data` parametern sammanfogas till en enda Bytematrisen för att lägga till som post. Dock görs inte för att dela data tillbaka till matrisen segment när posten har lästs.       De angivna reservationerna läggs till den angivna reservationen samling i en atomisk åtgärd med en post lägga till åtgärden. Om append misslyckas har inget utrymme reserverats.       Den här metoden kan normalt slutföras innan posten har skrivits. För att säkerställa att en post har skrivits, ange antingen den <xref:System.IO.Log.RecordAppendOptions>flaggan med hjälp av den `recordAppendOptions` parametern eller anrop av <xref:System.IO.Log.FileRecordSequence.Flush%2A>metod.</xref:System.IO.Log.FileRecordSequence.Flush%2A> </xref:System.IO.Log.RecordAppendOptions>"
  syntax:
    content: public System.IO.Log.SequenceNumber ReserveAndAppend (ArraySegment<byte> data, System.IO.Log.SequenceNumber nextUndoRecord, System.IO.Log.SequenceNumber previousRecord, System.IO.Log.RecordAppendOptions recordAppendOptions, System.IO.Log.ReservationCollection reservationCollection, long[] reservations);
    parameters:
    - id: data
      type: System.ArraySegment{System.Byte}
      description: "En lista med byte-matris segment som ska sammanfogas och läggas till som post."
    - id: nextUndoRecord
      type: System.IO.Log.SequenceNumber
      description: "Sekvensnumret för nästa post i ordningen som angetts av användaren."
    - id: previousRecord
      type: System.IO.Log.SequenceNumber
      description: "Sekvensnumret för nästa post i föregående ordning."
    - id: recordAppendOptions
      type: System.IO.Log.RecordAppendOptions
      description: "Ett giltigt värde för <xref href=&quot;System.IO.Log.RecordAppendOptions&quot;> </xref> som anger hur data ska skrivas."
    - id: reservationCollection
      type: System.IO.Log.ReservationCollection
      description: "En <xref href=&quot;System.IO.Log.ReservationCollection&quot;> </xref> som innehåller en samling ska göra reservationer i."
    - id: reservations
      type: System.Int64[]
      description: "Reservationer för att, i byte."
    return:
      type: System.IO.Log.SequenceNumber
      description: "Sekvensnumret för den tillagda loggposten."
  overload: System.IO.Log.FileRecordSequence.ReserveAndAppend*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "En eller flera argument är <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "En eller flera argument är utanför intervallet."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>reservations</code>skapades inte av den här ordningsnummer..."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "Åtgärden kan inte utföras eftersom postsekvensen öppnades skrivskyddad åtkomst."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "Det gick inte att utföra begäran på grund av ett oväntat i/o-undantag."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Metoden anropades efter sekvensen har avslutats av."
  - type: System.OutOfMemoryException
    commentId: T:System.OutOfMemoryException
    description: "Det finns inte tillräckligt med minne för att fortsätta körningen av programmet."
  - type: System.IO.Log.SequenceFullException
    commentId: T:System.IO.Log.SequenceFullException
    description: "Postsekvensen är full."
  platform:
  - net462
- uid: System.IO.Log.FileRecordSequence.ReserveAndAppend(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection,System.Int64[])
  id: ReserveAndAppend(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection,System.Int64[])
  parent: System.IO.Log.FileRecordSequence
  langs:
  - csharp
  name: ReserveAndAppend(IList<ArraySegment<Byte>>,SequenceNumber,SequenceNumber,RecordAppendOptions,ReservationCollection,Int64[])
  nameWithType: FileRecordSequence.ReserveAndAppend(IList<ArraySegment<Byte>>,SequenceNumber,SequenceNumber,RecordAppendOptions,ReservationCollection,Int64[])
  fullName: System.IO.Log.FileRecordSequence.ReserveAndAppend(IList<ArraySegment<Byte>>,SequenceNumber,SequenceNumber,RecordAppendOptions,ReservationCollection,Int64[])
  type: Method
  assemblies:
  - System.IO.Log
  namespace: System.IO.Log
  summary: "Gör en enda reservation och lägger till en post i sekvensen automatiskt. Den här metoden kan inte ärvas."
  remarks: "Data i den `data` parametern sammanfogas till en enda Bytematrisen för att lägga till som post. Dock görs inte för att dela data tillbaka till matrisen segment när posten har lästs.       De angivna reservationerna läggs till den angivna reservationen samling i en atomisk åtgärd med en post lägga till åtgärden. Om append misslyckas har inget utrymme reserverats.       Den här metoden kan normalt slutföras innan posten har skrivits. För att säkerställa att en post har skrivits, ange antingen den <xref:System.IO.Log.RecordAppendOptions>flaggan med hjälp av den `recordAppendOptions` parametern eller anrop av <xref:System.IO.Log.FileRecordSequence.Flush%2A>metod.</xref:System.IO.Log.FileRecordSequence.Flush%2A> </xref:System.IO.Log.RecordAppendOptions>"
  syntax:
    content: public System.IO.Log.SequenceNumber ReserveAndAppend (System.Collections.Generic.IList<ArraySegment<byte>> data, System.IO.Log.SequenceNumber nextUndoRecord, System.IO.Log.SequenceNumber previousRecord, System.IO.Log.RecordAppendOptions recordAppendOptions, System.IO.Log.ReservationCollection reservationCollection, long[] reservations);
    parameters:
    - id: data
      type: System.Collections.Generic.IList{System.ArraySegment{System.Byte}}
      description: "En lista med byte-matris segment som ska sammanfogas och läggas till som post."
    - id: nextUndoRecord
      type: System.IO.Log.SequenceNumber
      description: "Sekvensnumret för nästa post i ordningen som angetts av användaren."
    - id: previousRecord
      type: System.IO.Log.SequenceNumber
      description: "Sekvensnumret för nästa post i föregående ordning."
    - id: recordAppendOptions
      type: System.IO.Log.RecordAppendOptions
      description: "Ett giltigt värde för <xref href=&quot;System.IO.Log.RecordAppendOptions&quot;> </xref> som anger hur data ska skrivas."
    - id: reservationCollection
      type: System.IO.Log.ReservationCollection
      description: "Reservationssamlingen reservationer i ska göras."
    - id: reservations
      type: System.Int64[]
      description: "Reservationer för att, i byte."
    return:
      type: System.IO.Log.SequenceNumber
      description: "Sekvensnumret för den tillagda loggposten."
  overload: System.IO.Log.FileRecordSequence.ReserveAndAppend*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "En eller flera argument är <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "En eller flera argument är utanför intervallet."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>reservations</code>skapades inte av den här ordningsnummer..."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "Åtgärden kan inte utföras eftersom postsekvensen öppnades skrivskyddad åtkomst."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "Det gick inte att utföra begäran på grund av ett oväntat i/o-undantag."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Metoden anropades efter sekvensen har avslutats av."
  - type: System.OutOfMemoryException
    commentId: T:System.OutOfMemoryException
    description: "Det finns inte tillräckligt med minne för att fortsätta körningen av programmet."
  - type: System.IO.Log.SequenceFullException
    commentId: T:System.IO.Log.SequenceFullException
    description: "Postsekvensen är full."
  platform:
  - net462
- uid: System.IO.Log.FileRecordSequence.ReservedBytes
  id: ReservedBytes
  parent: System.IO.Log.FileRecordSequence
  langs:
  - csharp
  name: ReservedBytes
  nameWithType: FileRecordSequence.ReservedBytes
  fullName: System.IO.Log.FileRecordSequence.ReservedBytes
  type: Property
  assemblies:
  - System.IO.Log
  namespace: System.IO.Log
  summary: "Hämtar det totala antalet byte som har reserverats."
  syntax:
    content: public long ReservedBytes { get; }
    return:
      type: System.Int64
      description: "Den totala storleken på alla reservationer som gjorts i den här posten sekvensen."
  overload: System.IO.Log.FileRecordSequence.ReservedBytes*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Egenskapen användes när sekvensen har avslutats av."
  platform:
  - net462
- uid: System.IO.Log.FileRecordSequence.RestartSequenceNumber
  id: RestartSequenceNumber
  parent: System.IO.Log.FileRecordSequence
  langs:
  - csharp
  name: RestartSequenceNumber
  nameWithType: FileRecordSequence.RestartSequenceNumber
  fullName: System.IO.Log.FileRecordSequence.RestartSequenceNumber
  type: Property
  assemblies:
  - System.IO.Log
  namespace: System.IO.Log
  summary: "Hämtar sekvensnumret för det senast skrivna omstart området."
  remarks: "En omstart området används för att tillfälligt spara information som innehåller en klients senaste kontrollpunktsåtgärden. Vanliga Log File System (CLFS) har två starta om områden för att garantera att minst ett giltigt område alltid är tillgängligt. När det krävs en återställning, läser CLFS dess omstart området och alla data från den senaste kontrollpunkt åtgärden. Dessa data initierar transaktionen tabell, inaktuella sidor tabellen och öppna filen tabell så att de kan användas i återställningsprocessen."
  syntax:
    content: public System.IO.Log.SequenceNumber RestartSequenceNumber { get; }
    return:
      type: System.IO.Log.SequenceNumber
      description: "Sekvensnumret för den mest nyskrivna starta om område."
  overload: System.IO.Log.FileRecordSequence.RestartSequenceNumber*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Egenskapen användes när sekvensen har avslutats av."
  platform:
  - net462
- uid: System.IO.Log.FileRecordSequence.RetryAppend
  id: RetryAppend
  parent: System.IO.Log.FileRecordSequence
  langs:
  - csharp
  name: RetryAppend
  nameWithType: FileRecordSequence.RetryAppend
  fullName: System.IO.Log.FileRecordSequence.RetryAppend
  type: Property
  assemblies:
  - System.IO.Log
  namespace: System.IO.Log
  summary: "Hämtar eller anger ett värde som anger huruvida lägger till automatiskt igen om loggfilen är full."
  remarks: "Om värdet för den här egenskapen är `true`, och en <xref:System.IO.Log.FileRecordSequence.Append%2A>anropet misslyckas eftersom det inte finns tillräckligt med utrymme i följd, postsekvensen försöker Frigör utrymme och försök append.</xref:System.IO.Log.FileRecordSequence.Append%2A>"
  syntax:
    content: public bool RetryAppend { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Om lägger till automatiskt igen om loggfilen är full; Annars <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. Standardvärdet är <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>."
  overload: System.IO.Log.FileRecordSequence.RetryAppend*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Egenskapen användes när sekvensen har avslutats av."
  platform:
  - net462
- uid: System.IO.Log.FileRecordSequence.TailPinned
  id: TailPinned
  parent: System.IO.Log.FileRecordSequence
  langs:
  - csharp
  name: TailPinned
  nameWithType: FileRecordSequence.TailPinned
  fullName: System.IO.Log.FileRecordSequence.TailPinned
  type: Event
  assemblies:
  - System.IO.Log
  namespace: System.IO.Log
  summary: "Inträffar när poster sekvensen anger att slutet måste flyttas framåt. Den här metoden kan inte ärvas."
  remarks: "Du kan starta den här händelsen när postsekvensen har slut på utrymme. När den här händelsen utlöses flyttas slutet av sekvensen (det vill säga grundläggande sekvensnumret) framåt att frigöra utrymme."
  syntax:
    content: public event EventHandler<System.IO.Log.TailPinnedEventArgs> TailPinned;
    return:
      type: System.EventHandler{System.IO.Log.TailPinnedEventArgs}
      description: "Som ska läggas till."
  exceptions: []
  platform:
  - net462
- uid: System.IO.Log.FileRecordSequence.WriteRestartArea(System.ArraySegment{System.Byte})
  id: WriteRestartArea(System.ArraySegment{System.Byte})
  parent: System.IO.Log.FileRecordSequence
  langs:
  - csharp
  name: WriteRestartArea(ArraySegment<Byte>)
  nameWithType: FileRecordSequence.WriteRestartArea(ArraySegment<Byte>)
  fullName: System.IO.Log.FileRecordSequence.WriteRestartArea(ArraySegment<Byte>)
  type: Method
  assemblies:
  - System.IO.Log
  namespace: System.IO.Log
  summary: "Skriver en omstartsområde för att den <xref href=&quot;System.IO.Log.FileRecordSequence&quot;> </xref>. Den här metoden kan inte ärvas."
  remarks: "En omstartsområde kan användas för att tillfälligt spara information som innehåller en klients senaste kontrollpunktsåtgärden. Du kan läsa ett omstartsområde och hämta alla data från den senaste kontrollpunkt åtgärden när en återställning är nödvändigt. Dessa data initierar transaktionen tabell, inaktuella sidor tabellen och öppna filen tabell så att de kan användas i återställningsprocessen.       En omstartsområde kan läsas med hjälp av den <xref:System.IO.Log.FileRecordSequence.ReadRestartAreas%2A>metoden.</xref:System.IO.Log.FileRecordSequence.ReadRestartAreas%2A>       Data i byte-matris segment sammanfogas till en enda Bytematrisen för att lägga till som post. Inga etablera görs för att dela data tillbaka till matrisen segment när området omstart läses."
  syntax:
    content: public System.IO.Log.SequenceNumber WriteRestartArea (ArraySegment<byte> data);
    parameters:
    - id: data
      type: System.ArraySegment{System.Byte}
      description: "En lista med byte-matris segment som ska sammanfogas och läggas till som post."
    return:
      type: System.IO.Log.SequenceNumber
      description: "Sekvensnumret för den skriftliga starta om område."
  overload: System.IO.Log.FileRecordSequence.WriteRestartArea*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "En eller flera argument är <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "Åtgärden kan inte utföras eftersom postsekvensen öppnades skrivskyddad åtkomst."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "Begäran kan inte utföras på grund av ett oväntat i/o-undantag."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Metoden anropades efter sekvensen har avslutats av."
  - type: System.OutOfMemoryException
    commentId: T:System.OutOfMemoryException
    description: "Det finns inte tillräckligt med minne för att fortsätta körningen av programmet."
  - type: System.IO.Log.SequenceFullException
    commentId: T:System.IO.Log.SequenceFullException
    description: "Postsekvensen är full."
  platform:
  - net462
- uid: System.IO.Log.FileRecordSequence.WriteRestartArea(System.Collections.Generic.IList{System.ArraySegment{System.Byte}})
  id: WriteRestartArea(System.Collections.Generic.IList{System.ArraySegment{System.Byte}})
  parent: System.IO.Log.FileRecordSequence
  langs:
  - csharp
  name: WriteRestartArea(IList<ArraySegment<Byte>>)
  nameWithType: FileRecordSequence.WriteRestartArea(IList<ArraySegment<Byte>>)
  fullName: System.IO.Log.FileRecordSequence.WriteRestartArea(IList<ArraySegment<Byte>>)
  type: Method
  assemblies:
  - System.IO.Log
  namespace: System.IO.Log
  summary: "Skriver en omstartsområde för att den <xref href=&quot;System.IO.Log.FileRecordSequence&quot;> </xref>. Den här metoden kan inte ärvas."
  remarks: "En omstartsområde kan användas för att tillfälligt spara information som innehåller en klients senaste kontrollpunktsåtgärden. Du kan läsa ett omstartsområde och hämta alla data från den senaste kontrollpunkt åtgärden när en återställning är nödvändigt. Dessa data initierar transaktionen tabell, inaktuella sidor tabellen och öppna filen tabell så att de kan användas i återställningsprocessen.       En omstartsområde kan läsas med hjälp av den <xref:System.IO.Log.FileRecordSequence.ReadRestartAreas%2A>metoden.</xref:System.IO.Log.FileRecordSequence.ReadRestartAreas%2A>       Data i byte-matris segment sammanfogas till en enda Bytematrisen för att lägga till som post. Inga etablera görs för att dela data tillbaka till matrisen segment när området omstart läses."
  syntax:
    content: public System.IO.Log.SequenceNumber WriteRestartArea (System.Collections.Generic.IList<ArraySegment<byte>> data);
    parameters:
    - id: data
      type: System.Collections.Generic.IList{System.ArraySegment{System.Byte}}
      description: "En lista med byte-matris segment som ska sammanfogas och läggas till som post."
    return:
      type: System.IO.Log.SequenceNumber
      description: "Sekvensnumret för den skriftliga starta om område."
  overload: System.IO.Log.FileRecordSequence.WriteRestartArea*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "En eller flera argument är <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "Åtgärden kan inte utföras eftersom postsekvensen öppnades skrivskyddad åtkomst."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "Begäran kan inte utföras på grund av ett oväntat i/o-undantag."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Metoden anropades efter sekvensen har avslutats av."
  - type: System.OutOfMemoryException
    commentId: T:System.OutOfMemoryException
    description: "Det finns inte tillräckligt med minne för att fortsätta körningen av programmet."
  - type: System.IO.Log.SequenceFullException
    commentId: T:System.IO.Log.SequenceFullException
    description: "Postsekvensen är full."
  platform:
  - net462
- uid: System.IO.Log.FileRecordSequence.WriteRestartArea(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber)
  id: WriteRestartArea(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber)
  parent: System.IO.Log.FileRecordSequence
  langs:
  - csharp
  name: WriteRestartArea(ArraySegment<Byte>,SequenceNumber)
  nameWithType: FileRecordSequence.WriteRestartArea(ArraySegment<Byte>,SequenceNumber)
  fullName: System.IO.Log.FileRecordSequence.WriteRestartArea(ArraySegment<Byte>,SequenceNumber)
  type: Method
  assemblies:
  - System.IO.Log
  namespace: System.IO.Log
  summary: "Skriver en omstartsområde för att den <xref href=&quot;System.IO.Log.FileRecordSequence&quot;> </xref>. Den här metoden kan inte ärvas."
  remarks: "En omstartsområde kan användas för att tillfälligt spara information som innehåller en klients senaste kontrollpunktsåtgärden. Du kan läsa ett omstartsområde och hämta alla data från den senaste kontrollpunkt åtgärden när en återställning är nödvändigt. Dessa data initierar transaktionen tabell, inaktuella sidor tabellen och öppna filen tabell så att de kan användas i återställningsprocessen.       En omstartsområde kan läsas med hjälp av den <xref:System.IO.Log.FileRecordSequence.ReadRestartAreas%2A>metoden.</xref:System.IO.Log.FileRecordSequence.ReadRestartAreas%2A>       När en omstartsområde skrivs sammanfogas data i byte-matris segment i en enda Bytematrisen för att lägga till som post. Inga etablera görs för att dela data tillbaka till matrisen segment när området omstart läses.       När den här metoden har slutfört har den grundläggande sekvensnummer uppdaterats. Alla loggposter med sekvensnummer mindre än nya grundläggande sekvensnummer som inte är tillgängligt."
  syntax:
    content: public System.IO.Log.SequenceNumber WriteRestartArea (ArraySegment<byte> data, System.IO.Log.SequenceNumber newBaseSeqNum);
    parameters:
    - id: data
      type: System.ArraySegment{System.Byte}
      description: "En lista med byte-matris segment som ska sammanfogas och läggas till som post."
    - id: newBaseSeqNum
      type: System.IO.Log.SequenceNumber
      description: "Den nya grundläggande sekvensnummer. Det angivna sekvensnumret måste vara större än eller lika med det aktuella grundläggande sekvensnumret."
    return:
      type: System.IO.Log.SequenceNumber
      description: "Sekvensnumret för den skriftliga starta om område."
  overload: System.IO.Log.FileRecordSequence.WriteRestartArea*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "En eller flera argument är <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>newBaseSeqNum</code>är inte mellan basnummer och sista nummer i sekvensen.       - eller - en ny eller befintlig arkivdel eller bas i den aktiva loggen är ogiltig."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>newBaseSeqNum</code>är inte giltigt för denna sekvens."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "Åtgärden kan inte utföras eftersom postsekvensen öppnades skrivskyddad åtkomst."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "Begäran kan inte utföras på grund av ett oväntat i/o-undantag."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Metoden anropades efter sekvensen har avslutats av."
  - type: System.OutOfMemoryException
    commentId: T:System.OutOfMemoryException
    description: "Det finns inte tillräckligt med minne för att fortsätta körningen av programmet."
  - type: System.IO.Log.SequenceFullException
    commentId: T:System.IO.Log.SequenceFullException
    description: "Postsekvensen är full."
  platform:
  - net462
- uid: System.IO.Log.FileRecordSequence.WriteRestartArea(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber)
  id: WriteRestartArea(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber)
  parent: System.IO.Log.FileRecordSequence
  langs:
  - csharp
  name: WriteRestartArea(IList<ArraySegment<Byte>>,SequenceNumber)
  nameWithType: FileRecordSequence.WriteRestartArea(IList<ArraySegment<Byte>>,SequenceNumber)
  fullName: System.IO.Log.FileRecordSequence.WriteRestartArea(IList<ArraySegment<Byte>>,SequenceNumber)
  type: Method
  assemblies:
  - System.IO.Log
  namespace: System.IO.Log
  summary: "Skriver en omstartsområde för att den <xref href=&quot;System.IO.Log.FileRecordSequence&quot;> </xref>. Den här metoden kan inte ärvas."
  remarks: "En omstartsområde kan användas för att tillfälligt spara information som innehåller en klients senaste kontrollpunktsåtgärden. Du kan läsa ett omstartsområde och hämta alla data från den senaste kontrollpunkt åtgärden när en återställning är nödvändigt. Dessa data initierar transaktionen tabell, inaktuella sidor tabellen och öppna filen tabell så att de kan användas i återställningsprocessen.       En omstartsområde kan läsas med hjälp av den <xref:System.IO.Log.FileRecordSequence.ReadRestartAreas%2A>metoden.</xref:System.IO.Log.FileRecordSequence.ReadRestartAreas%2A>       När en omstartsområde skrivs sammanfogas data i byte-matris segment i en enda Bytematrisen för att lägga till som post. Inga etablera görs för att dela data tillbaka till matrisen segment när området omstart läses.       När den här metoden har slutfört har den grundläggande sekvensnummer uppdaterats. Alla loggposter med sekvensnummer mindre än nya grundläggande sekvensnummer som inte är tillgängligt."
  syntax:
    content: public System.IO.Log.SequenceNumber WriteRestartArea (System.Collections.Generic.IList<ArraySegment<byte>> data, System.IO.Log.SequenceNumber newBaseSeqNum);
    parameters:
    - id: data
      type: System.Collections.Generic.IList{System.ArraySegment{System.Byte}}
      description: "En lista med byte-matris segment som ska sammanfogas och läggas till som post."
    - id: newBaseSeqNum
      type: System.IO.Log.SequenceNumber
      description: "Den nya grundläggande sekvensnummer. Det angivna sekvensnumret måste vara större än eller lika med det aktuella grundläggande sekvensnumret."
    return:
      type: System.IO.Log.SequenceNumber
      description: "Sekvensnumret för den skriftliga starta om område."
  overload: System.IO.Log.FileRecordSequence.WriteRestartArea*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "En eller flera argument är <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>newBaseSeqNum</code>är inte mellan basnummer och sista nummer i sekvensen.       - eller - en ny eller befintlig arkivdel eller bas i den aktiva loggen är ogiltig."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>newBaseSeqNum</code>är inte giltigt för denna sekvens."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "Åtgärden kan inte utföras eftersom postsekvensen öppnades skrivskyddad åtkomst."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "Begäran kan inte utföras på grund av ett oväntat i/o-undantag."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Metoden anropades efter sekvensen har avslutats av."
  - type: System.OutOfMemoryException
    commentId: T:System.OutOfMemoryException
    description: "Det finns inte tillräckligt med minne för att fortsätta körningen av programmet."
  - type: System.IO.Log.SequenceFullException
    commentId: T:System.IO.Log.SequenceFullException
    description: "Postsekvensen är full."
  platform:
  - net462
- uid: System.IO.Log.FileRecordSequence.WriteRestartArea(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.ReservationCollection)
  id: WriteRestartArea(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.ReservationCollection)
  parent: System.IO.Log.FileRecordSequence
  langs:
  - csharp
  name: WriteRestartArea(ArraySegment<Byte>,SequenceNumber,ReservationCollection)
  nameWithType: FileRecordSequence.WriteRestartArea(ArraySegment<Byte>,SequenceNumber,ReservationCollection)
  fullName: System.IO.Log.FileRecordSequence.WriteRestartArea(ArraySegment<Byte>,SequenceNumber,ReservationCollection)
  type: Method
  assemblies:
  - System.IO.Log
  namespace: System.IO.Log
  summary: "Skriver en omstartsområde för att den <xref href=&quot;System.IO.Log.FileRecordSequence&quot;> </xref>. Den här metoden kan inte ärvas."
  remarks: "En omstartsområde kan användas för att tillfälligt spara information som innehåller en klients senaste kontrollpunktsåtgärden. Du kan läsa ett omstartsområde och hämta alla data från den senaste kontrollpunkt åtgärden när en återställning är nödvändigt. Dessa data initierar transaktionen tabell, inaktuella sidor tabellen och öppna filen tabell så att de kan användas i återställningsprocessen.       En omstartsområde kan läsas med hjälp av den <xref:System.IO.Log.FileRecordSequence.ReadRestartAreas%2A>metoden.</xref:System.IO.Log.FileRecordSequence.ReadRestartAreas%2A>       När en omstartsområde skrivs sammanfogas data i byte-matris segment i en enda Bytematrisen för att lägga till som post. Inga etablera görs för att dela data tillbaka till matrisen segment när området omstart läses.       Om du anger en reservation området skriftliga omstart kommer att använda utrymme som tidigare har reserverats, med hjälp av en reservation finns i samlingen. Om metoden lyckas, kommer den att använda minsta reservationen som kan innehålla data och att reservationen tas bort från samlingen.       När den här metoden har slutfört har den grundläggande sekvensnummer uppdaterats. Alla loggposter med sekvensnummer mindre än nya grundläggande sekvensnummer som inte är tillgängligt.       Om ett ordningsnummer har tagits bort av, eller om du skickar ett ogiltigt argument, utlöses undantag omedelbart i den här åtgärden. Fel som uppstod under en asynkron append begäran, till exempel ett diskfel under i/o-begäran resulterar i undantag som när den <xref:System.IO.Log.FileRecordSequence.EndReserveAndAppend%2A>metoden anropas.</xref:System.IO.Log.FileRecordSequence.EndReserveAndAppend%2A>"
  syntax:
    content: public System.IO.Log.SequenceNumber WriteRestartArea (ArraySegment<byte> data, System.IO.Log.SequenceNumber newBaseSeqNum, System.IO.Log.ReservationCollection reservations);
    parameters:
    - id: data
      type: System.ArraySegment{System.Byte}
      description: "En lista med byte-matris segment som ska sammanfogas och läggas till som post."
    - id: newBaseSeqNum
      type: System.IO.Log.SequenceNumber
      description: "Den nya grundläggande sekvensnummer. Det angivna sekvensnumret måste vara större än eller lika med det aktuella grundläggande sekvensnumret."
    - id: reservations
      type: System.IO.Log.ReservationCollection
      description: "En <xref href=&quot;System.IO.Log.ReservationCollection&quot;> </xref> som innehåller reservationen som ska användas för det här området omstart."
    return:
      type: System.IO.Log.SequenceNumber
      description: "Sekvensnumret för den skriftliga starta om område."
  overload: System.IO.Log.FileRecordSequence.WriteRestartArea*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "En eller flera argument är <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>newBaseSeqNum</code>är inte mellan basnummer och sista nummer i sekvensen.       - eller - en ny eller befintlig arkivdel eller bas i den aktiva loggen är ogiltig."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>reservations</code>skapades inte av den här ordningsnummer.       - eller - <code>newBaseSeqNum</code> är inte giltigt för denna sekvens."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "Åtgärden kan inte utföras eftersom postsekvensen öppnades skrivskyddad åtkomst."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "Begäran kan inte utföras på grund av ett oväntat i/o-undantag."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Metoden anropades efter sekvensen har avslutats av."
  - type: System.OutOfMemoryException
    commentId: T:System.OutOfMemoryException
    description: "Det finns inte tillräckligt med minne för att fortsätta körningen av programmet."
  - type: System.IO.Log.SequenceFullException
    commentId: T:System.IO.Log.SequenceFullException
    description: "Postsekvensen är full."
  - type: System.IO.Log.ReservationNotFoundException
    commentId: T:System.IO.Log.ReservationNotFoundException
    description: "Ingen reservation som är tillräckligt stor för att passa <code> data </code> finns i <code> reservations </code>."
  platform:
  - net462
- uid: System.IO.Log.FileRecordSequence.WriteRestartArea(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.ReservationCollection)
  id: WriteRestartArea(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.ReservationCollection)
  parent: System.IO.Log.FileRecordSequence
  langs:
  - csharp
  name: WriteRestartArea(IList<ArraySegment<Byte>>,SequenceNumber,ReservationCollection)
  nameWithType: FileRecordSequence.WriteRestartArea(IList<ArraySegment<Byte>>,SequenceNumber,ReservationCollection)
  fullName: System.IO.Log.FileRecordSequence.WriteRestartArea(IList<ArraySegment<Byte>>,SequenceNumber,ReservationCollection)
  type: Method
  assemblies:
  - System.IO.Log
  namespace: System.IO.Log
  summary: "Skriver en omstartsområde för att den <xref href=&quot;System.IO.Log.FileRecordSequence&quot;> </xref>. Den här metoden kan inte ärvas."
  remarks: "En omstartsområde kan användas för att tillfälligt spara information som innehåller en klients senaste kontrollpunktsåtgärden. Du kan läsa ett omstartsområde och hämta alla data från den senaste kontrollpunkt åtgärden när en återställning är nödvändigt. Dessa data initierar transaktionen tabell, inaktuella sidor tabellen och öppna filen tabell så att de kan användas i återställningsprocessen.       En omstartsområde kan läsas med hjälp av den <xref:System.IO.Log.FileRecordSequence.ReadRestartAreas%2A>metoden.</xref:System.IO.Log.FileRecordSequence.ReadRestartAreas%2A>       När en omstartsområde skrivs sammanfogas data i byte-matris segment i en enda Bytematrisen för att lägga till som post. Inga etablera görs för att dela data tillbaka till matrisen segment när området omstart läses.       Om du anger en reservation området skriftliga omstart kommer att använda utrymme som tidigare har reserverats, med hjälp av en reservation finns i samlingen. Om metoden lyckas, kommer den att använda minsta reservationen som kan innehålla data och att reservationen tas bort från samlingen.       När den här metoden har slutfört har den grundläggande sekvensnummer uppdaterats. Alla loggposter med sekvensnummer mindre än nya grundläggande sekvensnummer som inte är tillgängligt.       Om ett ordningsnummer har tagits bort av, eller om du skickar ett ogiltigt argument, utlöses undantag omedelbart i den här åtgärden. Fel som uppstod under en asynkron append begäran, till exempel ett diskfel under i/o-begäran resulterar i undantag som när den <xref:System.IO.Log.FileRecordSequence.EndReserveAndAppend%2A>metoden anropas.</xref:System.IO.Log.FileRecordSequence.EndReserveAndAppend%2A>"
  syntax:
    content: public System.IO.Log.SequenceNumber WriteRestartArea (System.Collections.Generic.IList<ArraySegment<byte>> data, System.IO.Log.SequenceNumber newBaseSeqNum, System.IO.Log.ReservationCollection reservations);
    parameters:
    - id: data
      type: System.Collections.Generic.IList{System.ArraySegment{System.Byte}}
      description: "En lista med byte-matris segment som ska sammanfogas och läggas till som post."
    - id: newBaseSeqNum
      type: System.IO.Log.SequenceNumber
      description: "Den nya grundläggande sekvensnummer. Det angivna sekvensnumret måste vara större än eller lika med det aktuella grundläggande sekvensnumret."
    - id: reservations
      type: System.IO.Log.ReservationCollection
      description: "En <xref href=&quot;System.IO.Log.ReservationCollection&quot;> </xref> som innehåller reservationen som ska användas för det här området omstart."
    return:
      type: System.IO.Log.SequenceNumber
      description: "Sekvensnumret för den skriftliga starta om område."
  overload: System.IO.Log.FileRecordSequence.WriteRestartArea*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "En eller flera argument är <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>newBaseSeqNum</code>är inte mellan basnummer och sista nummer i sekvensen.       - eller - en ny eller befintlig arkivdel eller bas i den aktiva loggen är ogiltig."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>reservations</code>skapades inte av den här ordningsnummer.       - eller - <code>newBaseSeqNum</code> är inte giltigt för denna sekvens."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "Åtgärden kan inte utföras eftersom postsekvensen öppnades skrivskyddad åtkomst."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "Begäran kan inte utföras på grund av ett oväntat i/o-undantag."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Metoden anropades efter sekvensen har avslutats av."
  - type: System.OutOfMemoryException
    commentId: T:System.OutOfMemoryException
    description: "Det finns inte tillräckligt med minne för att fortsätta körningen av programmet."
  - type: System.IO.Log.SequenceFullException
    commentId: T:System.IO.Log.SequenceFullException
    description: "Postsekvensen är full."
  - type: System.IO.Log.ReservationNotFoundException
    commentId: T:System.IO.Log.ReservationNotFoundException
    description: "Ingen reservation som är tillräckligt stor för att passa <code> data </code> finns i <code> reservations </code>."
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.IO.FileNotFoundException
  isExternal: true
  name: System.IO.FileNotFoundException
- uid: System.IO.IOException
  isExternal: true
  name: System.IO.IOException
- uid: System.OutOfMemoryException
  isExternal: true
  name: System.OutOfMemoryException
- uid: System.UnauthorizedAccessException
  isExternal: true
  name: System.UnauthorizedAccessException
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.ObjectDisposedException
  isExternal: true
  name: System.ObjectDisposedException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.NotSupportedException
  isExternal: true
  name: System.NotSupportedException
- uid: System.IO.Log.SequenceFullException
  parent: System.IO.Log
  isExternal: false
  name: SequenceFullException
  nameWithType: SequenceFullException
  fullName: System.IO.Log.SequenceFullException
- uid: System.IO.Log.ReservationNotFoundException
  parent: System.IO.Log
  isExternal: false
  name: ReservationNotFoundException
  nameWithType: ReservationNotFoundException
  fullName: System.IO.Log.ReservationNotFoundException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.IO.Log.FileRecordSequence.#ctor(System.String)
  parent: System.IO.Log.FileRecordSequence
  isExternal: false
  name: FileRecordSequence(String)
  nameWithType: FileRecordSequence.FileRecordSequence(String)
  fullName: System.IO.Log.FileRecordSequence.FileRecordSequence(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.IO.Log.FileRecordSequence.#ctor(System.String,System.IO.FileAccess)
  parent: System.IO.Log.FileRecordSequence
  isExternal: false
  name: FileRecordSequence(String,FileAccess)
  nameWithType: FileRecordSequence.FileRecordSequence(String,FileAccess)
  fullName: System.IO.Log.FileRecordSequence.FileRecordSequence(String,FileAccess)
- uid: System.IO.FileAccess
  parent: System.IO
  isExternal: false
  name: FileAccess
  nameWithType: FileAccess
  fullName: System.IO.FileAccess
- uid: System.IO.Log.FileRecordSequence.#ctor(System.String,System.IO.FileAccess,System.Int32)
  parent: System.IO.Log.FileRecordSequence
  isExternal: false
  name: FileRecordSequence(String,FileAccess,Int32)
  nameWithType: FileRecordSequence.FileRecordSequence(String,FileAccess,Int32)
  fullName: System.IO.Log.FileRecordSequence.FileRecordSequence(String,FileAccess,Int32)
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.IO.Log.FileRecordSequence.AdvanceBaseSequenceNumber(System.IO.Log.SequenceNumber)
  parent: System.IO.Log.FileRecordSequence
  isExternal: false
  name: AdvanceBaseSequenceNumber(SequenceNumber)
  nameWithType: FileRecordSequence.AdvanceBaseSequenceNumber(SequenceNumber)
  fullName: System.IO.Log.FileRecordSequence.AdvanceBaseSequenceNumber(SequenceNumber)
- uid: System.IO.Log.SequenceNumber
  parent: System.IO.Log
  isExternal: false
  name: SequenceNumber
  nameWithType: SequenceNumber
  fullName: System.IO.Log.SequenceNumber
- uid: System.IO.Log.FileRecordSequence.Append(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions)
  parent: System.IO.Log.FileRecordSequence
  isExternal: false
  name: Append(ArraySegment<Byte>,SequenceNumber,SequenceNumber,RecordAppendOptions)
  nameWithType: FileRecordSequence.Append(ArraySegment<Byte>,SequenceNumber,SequenceNumber,RecordAppendOptions)
  fullName: System.IO.Log.FileRecordSequence.Append(ArraySegment<Byte>,SequenceNumber,SequenceNumber,RecordAppendOptions)
- uid: System.ArraySegment{System.Byte}
  parent: System
  isExternal: true
  name: ArraySegment<Byte>
  nameWithType: ArraySegment<Byte>
  fullName: System.ArraySegment<System.Byte>
  spec.csharp:
  - uid: System.ArraySegment`1
    name: ArraySegment
    nameWithType: ArraySegment
    fullName: ArraySegment<System.Byte>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: Byte
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.IO.Log.RecordAppendOptions
  parent: System.IO.Log
  isExternal: false
  name: RecordAppendOptions
  nameWithType: RecordAppendOptions
  fullName: System.IO.Log.RecordAppendOptions
- uid: System.IO.Log.FileRecordSequence.Append(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions)
  parent: System.IO.Log.FileRecordSequence
  isExternal: false
  name: Append(IList<ArraySegment<Byte>>,SequenceNumber,SequenceNumber,RecordAppendOptions)
  nameWithType: FileRecordSequence.Append(IList<ArraySegment<Byte>>,SequenceNumber,SequenceNumber,RecordAppendOptions)
  fullName: System.IO.Log.FileRecordSequence.Append(IList<ArraySegment<Byte>>,SequenceNumber,SequenceNumber,RecordAppendOptions)
- uid: System.Collections.Generic.IList{System.ArraySegment{System.Byte}}
  parent: System.Collections.Generic
  isExternal: true
  name: IList<ArraySegment<Byte>>
  nameWithType: IList<ArraySegment<Byte>>
  fullName: System.Collections.Generic.IList<System.ArraySegment<System.Byte>>
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: IList<System.ArraySegment<System.Byte>>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.ArraySegment`1
    name: ArraySegment
    nameWithType: ArraySegment
    fullName: ArraySegment<System.Byte>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: Byte
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.IO.Log.FileRecordSequence.Append(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection)
  parent: System.IO.Log.FileRecordSequence
  isExternal: false
  name: Append(ArraySegment<Byte>,SequenceNumber,SequenceNumber,RecordAppendOptions,ReservationCollection)
  nameWithType: FileRecordSequence.Append(ArraySegment<Byte>,SequenceNumber,SequenceNumber,RecordAppendOptions,ReservationCollection)
  fullName: System.IO.Log.FileRecordSequence.Append(ArraySegment<Byte>,SequenceNumber,SequenceNumber,RecordAppendOptions,ReservationCollection)
- uid: System.IO.Log.ReservationCollection
  parent: System.IO.Log
  isExternal: false
  name: ReservationCollection
  nameWithType: ReservationCollection
  fullName: System.IO.Log.ReservationCollection
- uid: System.IO.Log.FileRecordSequence.Append(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection)
  parent: System.IO.Log.FileRecordSequence
  isExternal: false
  name: Append(IList<ArraySegment<Byte>>,SequenceNumber,SequenceNumber,RecordAppendOptions,ReservationCollection)
  nameWithType: FileRecordSequence.Append(IList<ArraySegment<Byte>>,SequenceNumber,SequenceNumber,RecordAppendOptions,ReservationCollection)
  fullName: System.IO.Log.FileRecordSequence.Append(IList<ArraySegment<Byte>>,SequenceNumber,SequenceNumber,RecordAppendOptions,ReservationCollection)
- uid: System.IO.Log.FileRecordSequence.BaseSequenceNumber
  parent: System.IO.Log.FileRecordSequence
  isExternal: false
  name: BaseSequenceNumber
  nameWithType: FileRecordSequence.BaseSequenceNumber
  fullName: System.IO.Log.FileRecordSequence.BaseSequenceNumber
- uid: System.IO.Log.FileRecordSequence.BeginAppend(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.AsyncCallback,System.Object)
  parent: System.IO.Log.FileRecordSequence
  isExternal: false
  name: BeginAppend(ArraySegment<Byte>,SequenceNumber,SequenceNumber,RecordAppendOptions,AsyncCallback,Object)
  nameWithType: FileRecordSequence.BeginAppend(ArraySegment<Byte>,SequenceNumber,SequenceNumber,RecordAppendOptions,AsyncCallback,Object)
  fullName: System.IO.Log.FileRecordSequence.BeginAppend(ArraySegment<Byte>,SequenceNumber,SequenceNumber,RecordAppendOptions,AsyncCallback,Object)
- uid: System.IAsyncResult
  parent: System
  isExternal: true
  name: IAsyncResult
  nameWithType: IAsyncResult
  fullName: System.IAsyncResult
- uid: System.AsyncCallback
  parent: System
  isExternal: true
  name: AsyncCallback
  nameWithType: AsyncCallback
  fullName: System.AsyncCallback
- uid: System.IO.Log.FileRecordSequence.BeginAppend(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.AsyncCallback,System.Object)
  parent: System.IO.Log.FileRecordSequence
  isExternal: false
  name: BeginAppend(IList<ArraySegment<Byte>>,SequenceNumber,SequenceNumber,RecordAppendOptions,AsyncCallback,Object)
  nameWithType: FileRecordSequence.BeginAppend(IList<ArraySegment<Byte>>,SequenceNumber,SequenceNumber,RecordAppendOptions,AsyncCallback,Object)
  fullName: System.IO.Log.FileRecordSequence.BeginAppend(IList<ArraySegment<Byte>>,SequenceNumber,SequenceNumber,RecordAppendOptions,AsyncCallback,Object)
- uid: System.IO.Log.FileRecordSequence.BeginAppend(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection,System.AsyncCallback,System.Object)
  parent: System.IO.Log.FileRecordSequence
  isExternal: false
  name: BeginAppend(ArraySegment<Byte>,SequenceNumber,SequenceNumber,RecordAppendOptions,ReservationCollection,AsyncCallback,Object)
  nameWithType: FileRecordSequence.BeginAppend(ArraySegment<Byte>,SequenceNumber,SequenceNumber,RecordAppendOptions,ReservationCollection,AsyncCallback,Object)
  fullName: System.IO.Log.FileRecordSequence.BeginAppend(ArraySegment<Byte>,SequenceNumber,SequenceNumber,RecordAppendOptions,ReservationCollection,AsyncCallback,Object)
- uid: System.IO.Log.FileRecordSequence.BeginAppend(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection,System.AsyncCallback,System.Object)
  parent: System.IO.Log.FileRecordSequence
  isExternal: false
  name: BeginAppend(IList<ArraySegment<Byte>>,SequenceNumber,SequenceNumber,RecordAppendOptions,ReservationCollection,AsyncCallback,Object)
  nameWithType: FileRecordSequence.BeginAppend(IList<ArraySegment<Byte>>,SequenceNumber,SequenceNumber,RecordAppendOptions,ReservationCollection,AsyncCallback,Object)
  fullName: System.IO.Log.FileRecordSequence.BeginAppend(IList<ArraySegment<Byte>>,SequenceNumber,SequenceNumber,RecordAppendOptions,ReservationCollection,AsyncCallback,Object)
- uid: System.IO.Log.FileRecordSequence.BeginFlush(System.IO.Log.SequenceNumber,System.AsyncCallback,System.Object)
  parent: System.IO.Log.FileRecordSequence
  isExternal: false
  name: BeginFlush(SequenceNumber,AsyncCallback,Object)
  nameWithType: FileRecordSequence.BeginFlush(SequenceNumber,AsyncCallback,Object)
  fullName: System.IO.Log.FileRecordSequence.BeginFlush(SequenceNumber,AsyncCallback,Object)
- uid: System.IO.Log.FileRecordSequence.BeginReserveAndAppend(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection,System.Int64[],System.AsyncCallback,System.Object)
  parent: System.IO.Log.FileRecordSequence
  isExternal: false
  name: BeginReserveAndAppend(ArraySegment<Byte>,SequenceNumber,SequenceNumber,RecordAppendOptions,ReservationCollection,Int64[],AsyncCallback,Object)
  nameWithType: FileRecordSequence.BeginReserveAndAppend(ArraySegment<Byte>,SequenceNumber,SequenceNumber,RecordAppendOptions,ReservationCollection,Int64[],AsyncCallback,Object)
  fullName: System.IO.Log.FileRecordSequence.BeginReserveAndAppend(ArraySegment<Byte>,SequenceNumber,SequenceNumber,RecordAppendOptions,ReservationCollection,Int64[],AsyncCallback,Object)
- uid: System.Int64[]
  parent: System
  isExternal: true
  name: Int64
  nameWithType: Int64
  fullName: System.Int64[]
  spec.csharp:
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: Int64[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.IO.Log.FileRecordSequence.BeginReserveAndAppend(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection,System.Int64[],System.AsyncCallback,System.Object)
  parent: System.IO.Log.FileRecordSequence
  isExternal: false
  name: BeginReserveAndAppend(IList<ArraySegment<Byte>>,SequenceNumber,SequenceNumber,RecordAppendOptions,ReservationCollection,Int64[],AsyncCallback,Object)
  nameWithType: FileRecordSequence.BeginReserveAndAppend(IList<ArraySegment<Byte>>,SequenceNumber,SequenceNumber,RecordAppendOptions,ReservationCollection,Int64[],AsyncCallback,Object)
  fullName: System.IO.Log.FileRecordSequence.BeginReserveAndAppend(IList<ArraySegment<Byte>>,SequenceNumber,SequenceNumber,RecordAppendOptions,ReservationCollection,Int64[],AsyncCallback,Object)
- uid: System.IO.Log.FileRecordSequence.BeginWriteRestartArea(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.ReservationCollection,System.AsyncCallback,System.Object)
  parent: System.IO.Log.FileRecordSequence
  isExternal: false
  name: BeginWriteRestartArea(ArraySegment<Byte>,SequenceNumber,ReservationCollection,AsyncCallback,Object)
  nameWithType: FileRecordSequence.BeginWriteRestartArea(ArraySegment<Byte>,SequenceNumber,ReservationCollection,AsyncCallback,Object)
  fullName: System.IO.Log.FileRecordSequence.BeginWriteRestartArea(ArraySegment<Byte>,SequenceNumber,ReservationCollection,AsyncCallback,Object)
- uid: System.IO.Log.FileRecordSequence.BeginWriteRestartArea(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.ReservationCollection,System.AsyncCallback,System.Object)
  parent: System.IO.Log.FileRecordSequence
  isExternal: false
  name: BeginWriteRestartArea(IList<ArraySegment<Byte>>,SequenceNumber,ReservationCollection,AsyncCallback,Object)
  nameWithType: FileRecordSequence.BeginWriteRestartArea(IList<ArraySegment<Byte>>,SequenceNumber,ReservationCollection,AsyncCallback,Object)
  fullName: System.IO.Log.FileRecordSequence.BeginWriteRestartArea(IList<ArraySegment<Byte>>,SequenceNumber,ReservationCollection,AsyncCallback,Object)
- uid: System.IO.Log.FileRecordSequence.CreateReservationCollection
  parent: System.IO.Log.FileRecordSequence
  isExternal: false
  name: CreateReservationCollection()
  nameWithType: FileRecordSequence.CreateReservationCollection()
  fullName: System.IO.Log.FileRecordSequence.CreateReservationCollection()
- uid: System.IO.Log.FileRecordSequence.Dispose
  parent: System.IO.Log.FileRecordSequence
  isExternal: false
  name: Dispose()
  nameWithType: FileRecordSequence.Dispose()
  fullName: System.IO.Log.FileRecordSequence.Dispose()
- uid: System.IO.Log.FileRecordSequence.EndAppend(System.IAsyncResult)
  parent: System.IO.Log.FileRecordSequence
  isExternal: false
  name: EndAppend(IAsyncResult)
  nameWithType: FileRecordSequence.EndAppend(IAsyncResult)
  fullName: System.IO.Log.FileRecordSequence.EndAppend(IAsyncResult)
- uid: System.IO.Log.FileRecordSequence.EndFlush(System.IAsyncResult)
  parent: System.IO.Log.FileRecordSequence
  isExternal: false
  name: EndFlush(IAsyncResult)
  nameWithType: FileRecordSequence.EndFlush(IAsyncResult)
  fullName: System.IO.Log.FileRecordSequence.EndFlush(IAsyncResult)
- uid: System.IO.Log.FileRecordSequence.EndReserveAndAppend(System.IAsyncResult)
  parent: System.IO.Log.FileRecordSequence
  isExternal: false
  name: EndReserveAndAppend(IAsyncResult)
  nameWithType: FileRecordSequence.EndReserveAndAppend(IAsyncResult)
  fullName: System.IO.Log.FileRecordSequence.EndReserveAndAppend(IAsyncResult)
- uid: System.IO.Log.FileRecordSequence.EndWriteRestartArea(System.IAsyncResult)
  parent: System.IO.Log.FileRecordSequence
  isExternal: false
  name: EndWriteRestartArea(IAsyncResult)
  nameWithType: FileRecordSequence.EndWriteRestartArea(IAsyncResult)
  fullName: System.IO.Log.FileRecordSequence.EndWriteRestartArea(IAsyncResult)
- uid: System.IO.Log.FileRecordSequence.Flush
  parent: System.IO.Log.FileRecordSequence
  isExternal: false
  name: Flush()
  nameWithType: FileRecordSequence.Flush()
  fullName: System.IO.Log.FileRecordSequence.Flush()
- uid: System.IO.Log.FileRecordSequence.Flush(System.IO.Log.SequenceNumber)
  parent: System.IO.Log.FileRecordSequence
  isExternal: false
  name: Flush(SequenceNumber)
  nameWithType: FileRecordSequence.Flush(SequenceNumber)
  fullName: System.IO.Log.FileRecordSequence.Flush(SequenceNumber)
- uid: System.IO.Log.FileRecordSequence.LastSequenceNumber
  parent: System.IO.Log.FileRecordSequence
  isExternal: false
  name: LastSequenceNumber
  nameWithType: FileRecordSequence.LastSequenceNumber
  fullName: System.IO.Log.FileRecordSequence.LastSequenceNumber
- uid: System.IO.Log.FileRecordSequence.MaximumRecordLength
  parent: System.IO.Log.FileRecordSequence
  isExternal: false
  name: MaximumRecordLength
  nameWithType: FileRecordSequence.MaximumRecordLength
  fullName: System.IO.Log.FileRecordSequence.MaximumRecordLength
- uid: System.Int64
  parent: System
  isExternal: true
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: System.IO.Log.FileRecordSequence.ReadLogRecords(System.IO.Log.SequenceNumber,System.IO.Log.LogRecordEnumeratorType)
  parent: System.IO.Log.FileRecordSequence
  isExternal: false
  name: ReadLogRecords(SequenceNumber,LogRecordEnumeratorType)
  nameWithType: FileRecordSequence.ReadLogRecords(SequenceNumber,LogRecordEnumeratorType)
  fullName: System.IO.Log.FileRecordSequence.ReadLogRecords(SequenceNumber,LogRecordEnumeratorType)
- uid: System.Collections.Generic.IEnumerable{System.IO.Log.LogRecord}
  parent: System.Collections.Generic
  isExternal: true
  name: IEnumerable<LogRecord>
  nameWithType: IEnumerable<LogRecord>
  fullName: System.Collections.Generic.IEnumerable<System.IO.Log.LogRecord>
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable<System.IO.Log.LogRecord>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.IO.Log.LogRecord
    name: LogRecord
    nameWithType: LogRecord
    fullName: LogRecord
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.IO.Log.LogRecordEnumeratorType
  parent: System.IO.Log
  isExternal: false
  name: LogRecordEnumeratorType
  nameWithType: LogRecordEnumeratorType
  fullName: System.IO.Log.LogRecordEnumeratorType
- uid: System.IO.Log.FileRecordSequence.ReadRestartAreas
  parent: System.IO.Log.FileRecordSequence
  isExternal: false
  name: ReadRestartAreas()
  nameWithType: FileRecordSequence.ReadRestartAreas()
  fullName: System.IO.Log.FileRecordSequence.ReadRestartAreas()
- uid: System.IO.Log.FileRecordSequence.ReserveAndAppend(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection,System.Int64[])
  parent: System.IO.Log.FileRecordSequence
  isExternal: false
  name: ReserveAndAppend(ArraySegment<Byte>,SequenceNumber,SequenceNumber,RecordAppendOptions,ReservationCollection,Int64[])
  nameWithType: FileRecordSequence.ReserveAndAppend(ArraySegment<Byte>,SequenceNumber,SequenceNumber,RecordAppendOptions,ReservationCollection,Int64[])
  fullName: System.IO.Log.FileRecordSequence.ReserveAndAppend(ArraySegment<Byte>,SequenceNumber,SequenceNumber,RecordAppendOptions,ReservationCollection,Int64[])
- uid: System.IO.Log.FileRecordSequence.ReserveAndAppend(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection,System.Int64[])
  parent: System.IO.Log.FileRecordSequence
  isExternal: false
  name: ReserveAndAppend(IList<ArraySegment<Byte>>,SequenceNumber,SequenceNumber,RecordAppendOptions,ReservationCollection,Int64[])
  nameWithType: FileRecordSequence.ReserveAndAppend(IList<ArraySegment<Byte>>,SequenceNumber,SequenceNumber,RecordAppendOptions,ReservationCollection,Int64[])
  fullName: System.IO.Log.FileRecordSequence.ReserveAndAppend(IList<ArraySegment<Byte>>,SequenceNumber,SequenceNumber,RecordAppendOptions,ReservationCollection,Int64[])
- uid: System.IO.Log.FileRecordSequence.ReservedBytes
  parent: System.IO.Log.FileRecordSequence
  isExternal: false
  name: ReservedBytes
  nameWithType: FileRecordSequence.ReservedBytes
  fullName: System.IO.Log.FileRecordSequence.ReservedBytes
- uid: System.IO.Log.FileRecordSequence.RestartSequenceNumber
  parent: System.IO.Log.FileRecordSequence
  isExternal: false
  name: RestartSequenceNumber
  nameWithType: FileRecordSequence.RestartSequenceNumber
  fullName: System.IO.Log.FileRecordSequence.RestartSequenceNumber
- uid: System.IO.Log.FileRecordSequence.RetryAppend
  parent: System.IO.Log.FileRecordSequence
  isExternal: false
  name: RetryAppend
  nameWithType: FileRecordSequence.RetryAppend
  fullName: System.IO.Log.FileRecordSequence.RetryAppend
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.IO.Log.FileRecordSequence.TailPinned
  parent: System.IO.Log.FileRecordSequence
  isExternal: false
  name: TailPinned
  nameWithType: FileRecordSequence.TailPinned
  fullName: System.IO.Log.FileRecordSequence.TailPinned
- uid: System.EventHandler{System.IO.Log.TailPinnedEventArgs}
  parent: System
  isExternal: true
  name: EventHandler<TailPinnedEventArgs>
  nameWithType: EventHandler<TailPinnedEventArgs>
  fullName: System.EventHandler<System.IO.Log.TailPinnedEventArgs>
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: EventHandler<System.IO.Log.TailPinnedEventArgs>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.IO.Log.TailPinnedEventArgs
    name: TailPinnedEventArgs
    nameWithType: TailPinnedEventArgs
    fullName: TailPinnedEventArgs
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.IO.Log.FileRecordSequence.WriteRestartArea(System.ArraySegment{System.Byte})
  parent: System.IO.Log.FileRecordSequence
  isExternal: false
  name: WriteRestartArea(ArraySegment<Byte>)
  nameWithType: FileRecordSequence.WriteRestartArea(ArraySegment<Byte>)
  fullName: System.IO.Log.FileRecordSequence.WriteRestartArea(ArraySegment<Byte>)
- uid: System.IO.Log.FileRecordSequence.WriteRestartArea(System.Collections.Generic.IList{System.ArraySegment{System.Byte}})
  parent: System.IO.Log.FileRecordSequence
  isExternal: false
  name: WriteRestartArea(IList<ArraySegment<Byte>>)
  nameWithType: FileRecordSequence.WriteRestartArea(IList<ArraySegment<Byte>>)
  fullName: System.IO.Log.FileRecordSequence.WriteRestartArea(IList<ArraySegment<Byte>>)
- uid: System.IO.Log.FileRecordSequence.WriteRestartArea(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber)
  parent: System.IO.Log.FileRecordSequence
  isExternal: false
  name: WriteRestartArea(ArraySegment<Byte>,SequenceNumber)
  nameWithType: FileRecordSequence.WriteRestartArea(ArraySegment<Byte>,SequenceNumber)
  fullName: System.IO.Log.FileRecordSequence.WriteRestartArea(ArraySegment<Byte>,SequenceNumber)
- uid: System.IO.Log.FileRecordSequence.WriteRestartArea(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber)
  parent: System.IO.Log.FileRecordSequence
  isExternal: false
  name: WriteRestartArea(IList<ArraySegment<Byte>>,SequenceNumber)
  nameWithType: FileRecordSequence.WriteRestartArea(IList<ArraySegment<Byte>>,SequenceNumber)
  fullName: System.IO.Log.FileRecordSequence.WriteRestartArea(IList<ArraySegment<Byte>>,SequenceNumber)
- uid: System.IO.Log.FileRecordSequence.WriteRestartArea(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.ReservationCollection)
  parent: System.IO.Log.FileRecordSequence
  isExternal: false
  name: WriteRestartArea(ArraySegment<Byte>,SequenceNumber,ReservationCollection)
  nameWithType: FileRecordSequence.WriteRestartArea(ArraySegment<Byte>,SequenceNumber,ReservationCollection)
  fullName: System.IO.Log.FileRecordSequence.WriteRestartArea(ArraySegment<Byte>,SequenceNumber,ReservationCollection)
- uid: System.IO.Log.FileRecordSequence.WriteRestartArea(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.ReservationCollection)
  parent: System.IO.Log.FileRecordSequence
  isExternal: false
  name: WriteRestartArea(IList<ArraySegment<Byte>>,SequenceNumber,ReservationCollection)
  nameWithType: FileRecordSequence.WriteRestartArea(IList<ArraySegment<Byte>>,SequenceNumber,ReservationCollection)
  fullName: System.IO.Log.FileRecordSequence.WriteRestartArea(IList<ArraySegment<Byte>>,SequenceNumber,ReservationCollection)
- uid: System.IO.Log.FileRecordSequence.#ctor*
  parent: System.IO.Log.FileRecordSequence
  isExternal: false
  name: FileRecordSequence
  nameWithType: FileRecordSequence.FileRecordSequence
- uid: System.IO.Log.FileRecordSequence.AdvanceBaseSequenceNumber*
  parent: System.IO.Log.FileRecordSequence
  isExternal: false
  name: AdvanceBaseSequenceNumber
  nameWithType: FileRecordSequence.AdvanceBaseSequenceNumber
- uid: System.IO.Log.FileRecordSequence.Append*
  parent: System.IO.Log.FileRecordSequence
  isExternal: false
  name: Append
  nameWithType: FileRecordSequence.Append
- uid: System.IO.Log.FileRecordSequence.BaseSequenceNumber*
  parent: System.IO.Log.FileRecordSequence
  isExternal: false
  name: BaseSequenceNumber
  nameWithType: FileRecordSequence.BaseSequenceNumber
- uid: System.IO.Log.FileRecordSequence.BeginAppend*
  parent: System.IO.Log.FileRecordSequence
  isExternal: false
  name: BeginAppend
  nameWithType: FileRecordSequence.BeginAppend
- uid: System.IO.Log.FileRecordSequence.BeginFlush*
  parent: System.IO.Log.FileRecordSequence
  isExternal: false
  name: BeginFlush
  nameWithType: FileRecordSequence.BeginFlush
- uid: System.IO.Log.FileRecordSequence.BeginReserveAndAppend*
  parent: System.IO.Log.FileRecordSequence
  isExternal: false
  name: BeginReserveAndAppend
  nameWithType: FileRecordSequence.BeginReserveAndAppend
- uid: System.IO.Log.FileRecordSequence.BeginWriteRestartArea*
  parent: System.IO.Log.FileRecordSequence
  isExternal: false
  name: BeginWriteRestartArea
  nameWithType: FileRecordSequence.BeginWriteRestartArea
- uid: System.IO.Log.FileRecordSequence.CreateReservationCollection*
  parent: System.IO.Log.FileRecordSequence
  isExternal: false
  name: CreateReservationCollection
  nameWithType: FileRecordSequence.CreateReservationCollection
- uid: System.IO.Log.FileRecordSequence.Dispose*
  parent: System.IO.Log.FileRecordSequence
  isExternal: false
  name: Dispose
  nameWithType: FileRecordSequence.Dispose
- uid: System.IO.Log.FileRecordSequence.EndAppend*
  parent: System.IO.Log.FileRecordSequence
  isExternal: false
  name: EndAppend
  nameWithType: FileRecordSequence.EndAppend
- uid: System.IO.Log.FileRecordSequence.EndFlush*
  parent: System.IO.Log.FileRecordSequence
  isExternal: false
  name: EndFlush
  nameWithType: FileRecordSequence.EndFlush
- uid: System.IO.Log.FileRecordSequence.EndReserveAndAppend*
  parent: System.IO.Log.FileRecordSequence
  isExternal: false
  name: EndReserveAndAppend
  nameWithType: FileRecordSequence.EndReserveAndAppend
- uid: System.IO.Log.FileRecordSequence.EndWriteRestartArea*
  parent: System.IO.Log.FileRecordSequence
  isExternal: false
  name: EndWriteRestartArea
  nameWithType: FileRecordSequence.EndWriteRestartArea
- uid: System.IO.Log.FileRecordSequence.Flush*
  parent: System.IO.Log.FileRecordSequence
  isExternal: false
  name: Flush
  nameWithType: FileRecordSequence.Flush
- uid: System.IO.Log.FileRecordSequence.LastSequenceNumber*
  parent: System.IO.Log.FileRecordSequence
  isExternal: false
  name: LastSequenceNumber
  nameWithType: FileRecordSequence.LastSequenceNumber
- uid: System.IO.Log.FileRecordSequence.MaximumRecordLength*
  parent: System.IO.Log.FileRecordSequence
  isExternal: false
  name: MaximumRecordLength
  nameWithType: FileRecordSequence.MaximumRecordLength
- uid: System.IO.Log.FileRecordSequence.ReadLogRecords*
  parent: System.IO.Log.FileRecordSequence
  isExternal: false
  name: ReadLogRecords
  nameWithType: FileRecordSequence.ReadLogRecords
- uid: System.IO.Log.FileRecordSequence.ReadRestartAreas*
  parent: System.IO.Log.FileRecordSequence
  isExternal: false
  name: ReadRestartAreas
  nameWithType: FileRecordSequence.ReadRestartAreas
- uid: System.IO.Log.FileRecordSequence.ReserveAndAppend*
  parent: System.IO.Log.FileRecordSequence
  isExternal: false
  name: ReserveAndAppend
  nameWithType: FileRecordSequence.ReserveAndAppend
- uid: System.IO.Log.FileRecordSequence.ReservedBytes*
  parent: System.IO.Log.FileRecordSequence
  isExternal: false
  name: ReservedBytes
  nameWithType: FileRecordSequence.ReservedBytes
- uid: System.IO.Log.FileRecordSequence.RestartSequenceNumber*
  parent: System.IO.Log.FileRecordSequence
  isExternal: false
  name: RestartSequenceNumber
  nameWithType: FileRecordSequence.RestartSequenceNumber
- uid: System.IO.Log.FileRecordSequence.RetryAppend*
  parent: System.IO.Log.FileRecordSequence
  isExternal: false
  name: RetryAppend
  nameWithType: FileRecordSequence.RetryAppend
- uid: System.IO.Log.FileRecordSequence.WriteRestartArea*
  parent: System.IO.Log.FileRecordSequence
  isExternal: false
  name: WriteRestartArea
  nameWithType: FileRecordSequence.WriteRestartArea
