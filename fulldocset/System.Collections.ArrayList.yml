### YamlMime:ManagedReference
items:
- uid: System.Collections.ArrayList
  id: ArrayList
  children:
  - System.Collections.ArrayList.#ctor
  - System.Collections.ArrayList.#ctor(System.Collections.ICollection)
  - System.Collections.ArrayList.#ctor(System.Int32)
  - System.Collections.ArrayList.Adapter(System.Collections.IList)
  - System.Collections.ArrayList.Add(System.Object)
  - System.Collections.ArrayList.AddRange(System.Collections.ICollection)
  - System.Collections.ArrayList.BinarySearch(System.Object)
  - System.Collections.ArrayList.BinarySearch(System.Object,System.Collections.IComparer)
  - System.Collections.ArrayList.BinarySearch(System.Int32,System.Int32,System.Object,System.Collections.IComparer)
  - System.Collections.ArrayList.Capacity
  - System.Collections.ArrayList.Clear
  - System.Collections.ArrayList.Clone
  - System.Collections.ArrayList.Contains(System.Object)
  - System.Collections.ArrayList.CopyTo(System.Array)
  - System.Collections.ArrayList.CopyTo(System.Array,System.Int32)
  - System.Collections.ArrayList.CopyTo(System.Int32,System.Array,System.Int32,System.Int32)
  - System.Collections.ArrayList.Count
  - System.Collections.ArrayList.FixedSize(System.Collections.ArrayList)
  - System.Collections.ArrayList.FixedSize(System.Collections.IList)
  - System.Collections.ArrayList.GetEnumerator
  - System.Collections.ArrayList.GetEnumerator(System.Int32,System.Int32)
  - System.Collections.ArrayList.GetRange(System.Int32,System.Int32)
  - System.Collections.ArrayList.IndexOf(System.Object)
  - System.Collections.ArrayList.IndexOf(System.Object,System.Int32)
  - System.Collections.ArrayList.IndexOf(System.Object,System.Int32,System.Int32)
  - System.Collections.ArrayList.Insert(System.Int32,System.Object)
  - System.Collections.ArrayList.InsertRange(System.Int32,System.Collections.ICollection)
  - System.Collections.ArrayList.IsFixedSize
  - System.Collections.ArrayList.IsReadOnly
  - System.Collections.ArrayList.IsSynchronized
  - System.Collections.ArrayList.Item(System.Int32)
  - System.Collections.ArrayList.LastIndexOf(System.Object)
  - System.Collections.ArrayList.LastIndexOf(System.Object,System.Int32)
  - System.Collections.ArrayList.LastIndexOf(System.Object,System.Int32,System.Int32)
  - System.Collections.ArrayList.ReadOnly(System.Collections.ArrayList)
  - System.Collections.ArrayList.ReadOnly(System.Collections.IList)
  - System.Collections.ArrayList.Remove(System.Object)
  - System.Collections.ArrayList.RemoveAt(System.Int32)
  - System.Collections.ArrayList.RemoveRange(System.Int32,System.Int32)
  - System.Collections.ArrayList.Repeat(System.Object,System.Int32)
  - System.Collections.ArrayList.Reverse
  - System.Collections.ArrayList.Reverse(System.Int32,System.Int32)
  - System.Collections.ArrayList.SetRange(System.Int32,System.Collections.ICollection)
  - System.Collections.ArrayList.Sort
  - System.Collections.ArrayList.Sort(System.Collections.IComparer)
  - System.Collections.ArrayList.Sort(System.Int32,System.Int32,System.Collections.IComparer)
  - System.Collections.ArrayList.Synchronized(System.Collections.ArrayList)
  - System.Collections.ArrayList.Synchronized(System.Collections.IList)
  - System.Collections.ArrayList.SyncRoot
  - System.Collections.ArrayList.ToArray
  - System.Collections.ArrayList.ToArray(System.Type)
  - System.Collections.ArrayList.TrimToSize
  langs:
  - csharp
  name: ArrayList
  nameWithType: ArrayList
  fullName: System.Collections.ArrayList
  type: Class
  summary: "Implementerar den <xref:System.Collections.IList>gränssnitt med en matris vars storlek ökas dynamiskt som krävs.</xref:System.Collections.IList>       Om du vill bläddra .NET Framework källkoden för den här typen finns i [referenskälla](http://referencesource.microsoft.com/#mscorlib/system/collections/arraylist.cs#3e3f6715773d6643)."
  remarks: "> [!NOTE]>.NET Framework källkoden för den här typen finns i [referenskälla](http://referencesource.microsoft.com/#mscorlib/system/collections/arraylist.cs#3e3f6715773d6643). Du kan bläddra igenom källkoden online, hämta referens för visning offline och gå igenom källor (inklusive korrigeringarna och programvaruuppdateringarna) vid felsökning. Se [instruktioner](http://referencesource.microsoft.com/).       ArrayList-klassen är utformat för att lagra heterogena samlingar av objekt. Men erbjuder det inte alltid bästa prestanda. I stället rekommenderar vi följande: - för en heterogen samling objekt, Använd den `List<Object>` (i C#) eller `List(Of Object)` ange (i Visual Basic).      – Använd för en homogen samling objekt, <xref:System.Collections.Generic.List%601>klass.</xref:System.Collections.Generic.List%601>       Se avsnittet &quot;Prestandaöverväganden&quot; i den <xref:System.Collections.Generic.List%601>referensavsnittet för en beskrivning av den relativa prestandan för dessa klasser.</xref:System.Collections.Generic.List%601>       ArrayList är inte säkert att sorteras.  Sortera ArrayList genom att anropa dess <xref:System.Collections.ArrayList.Sort%2A>metoden innan du utför åtgärder (exempelvis <xref:System.Collections.ArrayList.BinarySearch%2A>) som kräver ArrayList som ska sorteras.</xref:System.Collections.ArrayList.BinarySearch%2A> </xref:System.Collections.ArrayList.Sort%2A> För att upprätthålla en samling som sorteras automatiskt när nya objekt läggs till, kan du använda <xref:System.Collections.Generic.SortedSet%601>klassen.</xref:System.Collections.Generic.SortedSet%601>       En ArrayList kapacitet är antalet element ArrayList kan innehålla. Som läggs till i en ArrayList, ökas automatiskt kapaciteten som krävs genom omfördelning. Kapaciteten kan minskas genom att anropa <xref:System.Collections.ArrayList.TrimToSize%2A>eller genom att ange den <xref:System.Collections.ArrayList.Capacity%2A>egenskapen uttryckligen.</xref:System.Collections.ArrayList.Capacity%2A> </xref:System.Collections.ArrayList.TrimToSize%2A>       För mycket stora ArrayList-objekt kan du öka maximal kapacitet till 2 miljarder element på ett 64-bitars system genom att ange den `enabled` attribut för konfigurationselementet till `true` i-körningsmiljön.       Element i denna mängd kan nås med ett heltalsindex.  Index i den här samlingen är nollbaserade.       ArrayList-mängden accepterar `null` som ett giltigt värde. Det gör även elementdubbletter.       Flerdimensionella matriser stöds som element i en ArrayList-mängd inte."
  example:
  - "The following code example shows how to create and initialize an ArrayList and how to display its values.  \n  \n [!code-cpp[Classic ArrayList Example#1](~/add/codesnippet/cpp/t-system.collections.arr_1.cpp)]\n [!code-cs[Classic ArrayList Example#1](~/add/codesnippet/csharp/t-system.collections.arr_1.cs)]\n [!code-vb[Classic ArrayList Example#1](~/add/codesnippet/visualbasic/t-system.collections.arr_1.vb)]"
  syntax:
    content: >-
      [System.Diagnostics.DebuggerDisplay("Count = {Count}")]

      [System.Diagnostics.DebuggerTypeProxy(typeof(System.Collections.ArrayList/ArrayListDebugView))]

      [System.Runtime.InteropServices.ComVisible(true)]

      public class ArrayList : ICloneable, System.Collections.IList
  inheritance:
  - System.Object
  implements:
  - System.Collections.IList
  - System.ICloneable
  inheritedMembers: []
  platform:
  - net462
- uid: System.Collections.ArrayList.#ctor
  id: '#ctor'
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: ArrayList()
  nameWithType: ArrayList.ArrayList()
  fullName: System.Collections.ArrayList.ArrayList()
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Initierar en ny instans av den <xref href=&quot;System.Collections.ArrayList&quot;> </xref> klass som är tom och inledande standardkapaciteten."
  remarks: "Kapaciteten för ett <xref:System.Collections.ArrayList>är antalet element som det <xref:System.Collections.ArrayList>kan innehålla.</xref:System.Collections.ArrayList> </xref:System.Collections.ArrayList> Som läggs till i en <xref:System.Collections.ArrayList>, ökas automatiskt kapaciteten som krävs av omallokera den interna matrisen.</xref:System.Collections.ArrayList>       Om storleken på samlingen kan vara eliminerar att ange den inledande kapaciteten behovet av att genomföra ett antal storleksändringar när du lägger till element i <xref:System.Collections.ArrayList>.</xref:System.Collections.ArrayList>       Den här konstruktorn är en O(1)-åtgärd."
  syntax:
    content: public ArrayList ();
    parameters: []
  overload: System.Collections.ArrayList.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.ArrayList.#ctor(System.Collections.ICollection)
  id: '#ctor(System.Collections.ICollection)'
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: ArrayList(ICollection)
  nameWithType: ArrayList.ArrayList(ICollection)
  fullName: System.Collections.ArrayList.ArrayList(ICollection)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Initierar en ny instans av den <xref href=&quot;System.Collections.ArrayList&quot;> </xref> klass som innehåller element som kopieras från den angivna samlingen och som har samma inledande kapacitet som antalet element kopieras."
  remarks: "Kapaciteten för ett <xref:System.Collections.ArrayList>är antalet element som det <xref:System.Collections.ArrayList>kan innehålla.</xref:System.Collections.ArrayList> </xref:System.Collections.ArrayList> Som läggs till i en <xref:System.Collections.ArrayList>, ökas automatiskt kapaciteten som krävs av omallokera den interna matrisen.</xref:System.Collections.ArrayList>       Om storleken på samlingen kan vara eliminerar att ange den inledande kapaciteten behovet av att genomföra ett antal storleksändringar när du lägger till element i <xref:System.Collections.ArrayList>.</xref:System.Collections.ArrayList>       Elementen kopieras till <xref:System.Collections.ArrayList>i samma ordning som de läses av <xref:System.Collections.IEnumerator>i <xref:System.Collections.ICollection>.</xref:System.Collections.ICollection> </xref:System.Collections.IEnumerator> </xref:System.Collections.ArrayList>       Den här konstruktorn är en O (`n`) igen, där `n` är antalet element i `c`."
  syntax:
    content: public ArrayList (System.Collections.ICollection c);
    parameters:
    - id: c
      type: System.Collections.ICollection
      description: "Den <xref:System.Collections.ICollection>vars kopieras till den nya listan.</xref:System.Collections.ICollection>"
  overload: System.Collections.ArrayList.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>c</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Collections.ArrayList.#ctor(System.Int32)
  id: '#ctor(System.Int32)'
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: ArrayList(Int32)
  nameWithType: ArrayList.ArrayList(Int32)
  fullName: System.Collections.ArrayList.ArrayList(Int32)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Initierar en ny instans av den <xref href=&quot;System.Collections.ArrayList&quot;> </xref> klass som är tom och den angivna inledande kapaciteten."
  remarks: "Kapaciteten för ett <xref:System.Collections.ArrayList>är antalet element som det <xref:System.Collections.ArrayList>kan innehålla.</xref:System.Collections.ArrayList> </xref:System.Collections.ArrayList> Som läggs till i en <xref:System.Collections.ArrayList>, ökas automatiskt kapaciteten som krävs av omallokera den interna matrisen.</xref:System.Collections.ArrayList>       Om storleken på samlingen kan vara eliminerar att ange den inledande kapaciteten behovet av att genomföra ett antal storleksändringar när du lägger till element i <xref:System.Collections.ArrayList>.</xref:System.Collections.ArrayList>       Den här konstruktorn är en O (`n`) igen, där `n` är `capacity`."
  syntax:
    content: public ArrayList (int capacity);
    parameters:
    - id: capacity
      type: System.Int32
      description: "Antal element som ursprungligen kan lagras i den nya listan."
  overload: System.Collections.ArrayList.#ctor*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>capacity</code>är mindre än noll."
  platform:
  - net462
- uid: System.Collections.ArrayList.Adapter(System.Collections.IList)
  id: Adapter(System.Collections.IList)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: Adapter(IList)
  nameWithType: ArrayList.Adapter(IList)
  fullName: System.Collections.ArrayList.Adapter(IList)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Skapar en <xref href=&quot;System.Collections.ArrayList&quot;> </xref> Omslutning för en specifik <xref:System.Collections.IList>.</xref:System.Collections.IList>"
  remarks: "Nätverkskortet Kopiera inte innehållet i <xref:System.Collections.IList>.</xref:System.Collections.IList> I stället skapar den bara en <xref:System.Collections.ArrayList>Omslutning runt <xref:System.Collections.IList>; därför ändringar som <xref:System.Collections.IList>påverkar också <xref:System.Collections.ArrayList>.</xref:System.Collections.ArrayList> </xref:System.Collections.IList> </xref:System.Collections.IList> </xref:System.Collections.ArrayList>       Den <xref:System.Collections.ArrayList>klassen innehåller allmänna <xref:System.Collections.ArrayList.Reverse%2A>, <xref:System.Collections.ArrayList.BinarySearch%2A>och <xref:System.Collections.ArrayList.Sort%2A>metoder.</xref:System.Collections.ArrayList.Sort%2A> </xref:System.Collections.ArrayList.BinarySearch%2A> </xref:System.Collections.ArrayList.Reverse%2A> </xref:System.Collections.ArrayList> Den här wrapper kan vara ett sätt att använda de här metoderna på <xref:System.Collections.IList>; utför dessa allmänna åtgärder via adapterprogram kan dock vara mindre effektivt än operations tillämpas direkt på <xref:System.Collections.IList>.</xref:System.Collections.IList> </xref:System.Collections.IList>       Den här metoden är en O(1)-åtgärd.      ## Version programkompatibilitet i .NET Framework version 1.0 och 1.1, anropar den <xref:System.Collections.ArrayList.GetEnumerator%28System.Int32%2CSystem.Int32%29>metodöverlagringen på den <xref:System.Collections.ArrayList>wrapper returnerade en uppräknare som det andra argumentet som behandlas som en övre gräns i stället för ett antal.</xref:System.Collections.ArrayList> </xref:System.Collections.ArrayList.GetEnumerator%28System.Int32%2CSystem.Int32%29> I den [!INCLUDE[dnprdnlong](~/add/includes/dnprdnlong-md.md)] det andra argumentet ska behandlas som ett antal."
  syntax:
    content: public static System.Collections.ArrayList Adapter (System.Collections.IList list);
    parameters:
    - id: list
      type: System.Collections.IList
      description: "Den <xref:System.Collections.IList>du omsluter.</xref:System.Collections.IList>"
    return:
      type: System.Collections.ArrayList
      description: "Den <xref href=&quot;System.Collections.ArrayList&quot;> </xref> wrapper runt <xref:System.Collections.IList>.</xref:System.Collections.IList>"
  overload: System.Collections.ArrayList.Adapter*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>list</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Collections.ArrayList.Add(System.Object)
  id: Add(System.Object)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: Add(Object)
  nameWithType: ArrayList.Add(Object)
  fullName: System.Collections.ArrayList.Add(Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Lägger till ett objekt i slutet av den <xref href=&quot;System.Collections.ArrayList&quot;> </xref>."
  remarks: "<xref:System.Collections.ArrayList>accepterar `null` som ett giltigt värde och tillåter dubblettelement.</xref:System.Collections.ArrayList>       Om <xref:System.Collections.ArrayList.Count%2A>redan är lika med <xref:System.Collections.ArrayList.Capacity%2A>, kapacitet hos den <xref:System.Collections.ArrayList>ökas genom att omfördela automatiskt den interna matrisen och befintliga element kopieras till den nya matrisen innan du lägger till nya element.</xref:System.Collections.ArrayList> </xref:System.Collections.ArrayList.Capacity%2A> </xref:System.Collections.ArrayList.Count%2A>       Om <xref:System.Collections.ArrayList.Count%2A>är mindre än <xref:System.Collections.ArrayList.Capacity%2A>, den här metoden är en O(1) åtgärd.</xref:System.Collections.ArrayList.Capacity%2A> </xref:System.Collections.ArrayList.Count%2A> Om kapaciteten måste ökas för att anpassa det nya elementet, blir den här metoden en O (`n`) igen, där `n` är <xref:System.Collections.ArrayList.Count%2A>.</xref:System.Collections.ArrayList.Count%2A>"
  example:
  - "The following code example shows how to add elements to the <xref:System.Collections.ArrayList>.  \n  \n [!code-cs[Classic ArrayList.Add Example#1](~/add/codesnippet/csharp/m-system.collections.arr_4_1.cs)]\n [!code-vb[Classic ArrayList.Add Example#1](~/add/codesnippet/visualbasic/m-system.collections.arr_4_1.vb)]\n [!code-cpp[Classic ArrayList.Add Example#1](~/add/codesnippet/cpp/m-system.collections.arr_4_1.cpp)]"
  syntax:
    content: public virtual int Add (object value);
    parameters:
    - id: value
      type: System.Object
      description: "Den <xref:System.Object>som ska läggas till i slutet av den <xref href=&quot;System.Collections.ArrayList&quot;> </xref>.</xref:System.Object> Värdet kan vara <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
    return:
      type: System.Int32
      description: "Den <xref href=&quot;System.Collections.ArrayList&quot;> </xref> index då den <code> value </code> har lagts till."
  overload: System.Collections.ArrayList.Add*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "Den <xref href=&quot;System.Collections.ArrayList&quot;> </xref> är skrivskyddad.       - eller - <xref href=&quot;System.Collections.ArrayList&quot;> </xref> har en fast storlek."
  platform:
  - net462
- uid: System.Collections.ArrayList.AddRange(System.Collections.ICollection)
  id: AddRange(System.Collections.ICollection)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: AddRange(ICollection)
  nameWithType: ArrayList.AddRange(ICollection)
  fullName: System.Collections.ArrayList.AddRange(ICollection)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Lägger till element i en <xref:System.Collections.ICollection>till slutet av den <xref href=&quot;System.Collections.ArrayList&quot;> </xref>.</xref:System.Collections.ICollection>"
  remarks: "<xref:System.Collections.ArrayList>accepterar `null` som ett giltigt värde och tillåter dubblettelement.</xref:System.Collections.ArrayList>       Ordningen på elementen i <xref:System.Collections.ICollection>bevaras i <xref:System.Collections.ArrayList>.</xref:System.Collections.ArrayList> </xref:System.Collections.ICollection>       Om den nya <xref:System.Collections.ArrayList.Count%2A>(aktuellt <xref:System.Collections.ArrayList.Count%2A>plus mängdens storlek) ska vara större än <xref:System.Collections.ArrayList.Capacity%2A>, kapacitet hos den <xref:System.Collections.ArrayList>ökas genom att omfördela automatiskt den interna matrisen för att anpassa de nya elementen och befintliga element kopieras till den nya matrisen innan de nya elementen läggs.</xref:System.Collections.ArrayList> </xref:System.Collections.ArrayList.Capacity%2A> </xref:System.Collections.ArrayList.Count%2A> </xref:System.Collections.ArrayList.Count%2A>       Om den <xref:System.Collections.ArrayList>kan hantera de nya element utan att öka den <xref:System.Collections.ArrayList.Capacity%2A>, den här metoden är en O (`n`) igen, där `n` är antalet element som ska läggas till.</xref:System.Collections.ArrayList.Capacity%2A> </xref:System.Collections.ArrayList> Om kapaciteten måste ökas för att anpassa de nya element, blir den här metoden en O (`n` + `m`) igen, där `n` är antalet element som ska läggas till och `m` är <xref:System.Collections.ArrayList.Count%2A>.</xref:System.Collections.ArrayList.Count%2A>"
  example:
  - "The following code example shows how to add elements to the <xref:System.Collections.ArrayList>.  \n  \n [!code-cs[Classic ArrayList.Add Example#1](~/add/codesnippet/csharp/m-system.collections.arr_0_1.cs)]\n [!code-vb[Classic ArrayList.Add Example#1](~/add/codesnippet/visualbasic/m-system.collections.arr_0_1.vb)]\n [!code-cpp[Classic ArrayList.Add Example#1](~/add/codesnippet/cpp/m-system.collections.arr_0_1.cpp)]"
  syntax:
    content: public virtual void AddRange (System.Collections.ICollection c);
    parameters:
    - id: c
      type: System.Collections.ICollection
      description: "Den <xref:System.Collections.ICollection>vars element ska läggas till i slutet av den <xref href=&quot;System.Collections.ArrayList&quot;> </xref>.</xref:System.Collections.ICollection> Samlingen själv kan inte vara <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>, men det kan innehålla element som är <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  overload: System.Collections.ArrayList.AddRange*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>c</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "Den <xref href=&quot;System.Collections.ArrayList&quot;> </xref> är skrivskyddad.       - eller - <xref href=&quot;System.Collections.ArrayList&quot;> </xref> har en fast storlek."
  platform:
  - net462
- uid: System.Collections.ArrayList.BinarySearch(System.Object)
  id: BinarySearch(System.Object)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: BinarySearch(Object)
  nameWithType: ArrayList.BinarySearch(Object)
  fullName: System.Collections.ArrayList.BinarySearch(Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Söker igenom hela sorteras <xref href=&quot;System.Collections.ArrayList&quot;> </xref> för ett element med hjälp av standardjämförelsefunktionen och returnerar det nollbaserade indexet för elementet."
  remarks: "Den `value` parameter och varje element i den <xref:System.Collections.ArrayList>måste implementera den <xref:System.IComparable>gränssnitt som används för jämförelse.</xref:System.IComparable> </xref:System.Collections.ArrayList> Elementen i den <xref:System.Collections.ArrayList>redan måste sorteras i stigande värde enligt sorteringsordningen definieras av den <xref:System.IComparable>genomförande; annars resultatet kan vara felaktig.</xref:System.IComparable> </xref:System.Collections.ArrayList>       Jämföra `null` tillåts med en typ och inte genererar ett undantag när du använder <xref:System.IComparable>.</xref:System.IComparable> Vid sortering, `null` anses vara mindre än alla andra objekt.       Om den <xref:System.Collections.ArrayList>innehåller fler än ett element med samma värde metoden returnerar endast en av förekomster och kan returnera förekomster, inte nödvändigtvis förstnämnda.</xref:System.Collections.ArrayList>       Om den <xref:System.Collections.ArrayList>innehåller inte det angivna värdet metoden returnerar ett negativt heltal.</xref:System.Collections.ArrayList> Du kan använda åtgärden bitvis komplement (~) till den här negativa heltal få indexet för det första elementet som är större än värdet för sökning. När du infogar värdet till den <xref:System.Collections.ArrayList>, indexet som ska användas som insättningspunkten för att underhålla sorteringsordning.</xref:System.Collections.ArrayList>       Den här metoden är en O (loggen `n`) igen, där `n` är <xref:System.Collections.ArrayList.Count%2A>.</xref:System.Collections.ArrayList.Count%2A>"
  example:
  - "The following code example shows how to use <xref:System.Collections.ArrayList.BinarySearch%2A> to locate a specific object in the <xref:System.Collections.ArrayList>.  \n  \n [!code-cpp[Classic ArrayList.BinarySearch1 Example#1](~/add/codesnippet/cpp/m-system.collections.arr_13_1.cpp)]\n [!code-cs[Classic ArrayList.BinarySearch1 Example#1](~/add/codesnippet/csharp/m-system.collections.arr_13_1.cs)]\n [!code-vb[Classic ArrayList.BinarySearch1 Example#1](~/add/codesnippet/visualbasic/m-system.collections.arr_13_1.vb)]"
  syntax:
    content: public virtual int BinarySearch (object value);
    parameters:
    - id: value
      type: System.Object
      description: "Den <xref:System.Object>att hitta.</xref:System.Object> Värdet kan vara <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
    return:
      type: System.Int32
      description: "Det nollbaserade indexet för <code> value </code> i den sorterade <xref href=&quot;System.Collections.ArrayList&quot;> </xref>om <code> value </code> är hittas, annars en negativ number, vilket är binär komplementet i indexet på nästa element som är större än <code> value </code> eller, om det finns ingen större element, binär komplementet av <xref:System.Collections.ArrayList.Count*>.</xref:System.Collections.ArrayList.Count*>"
  overload: System.Collections.ArrayList.BinarySearch*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Varken <code> value </code> eller elementen i <xref href=&quot;System.Collections.ArrayList&quot;> </xref> implementera den <xref:System.IComparable>gränssnitt.</xref:System.IComparable>"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "<code>value</code>är inte av samma typ som elementen i den <xref href=&quot;System.Collections.ArrayList&quot;> </xref>."
  platform:
  - net462
- uid: System.Collections.ArrayList.BinarySearch(System.Object,System.Collections.IComparer)
  id: BinarySearch(System.Object,System.Collections.IComparer)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: BinarySearch(Object,IComparer)
  nameWithType: ArrayList.BinarySearch(Object,IComparer)
  fullName: System.Collections.ArrayList.BinarySearch(Object,IComparer)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Söker igenom hela sorteras <xref href=&quot;System.Collections.ArrayList&quot;> </xref> för ett element med hjälp av den angivna jämförelsefunktionen och returnerar det nollbaserade indexet för elementet."
  remarks: "Jämföraren anpassar hur elementen jämförs. Du kan till exempel använda en <xref:System.Collections.CaseInsensitiveComparer>instans som jämföraren för sträng skiftlägesoberoende sökning.</xref:System.Collections.CaseInsensitiveComparer>       Om `comparer` anges, elementen i den <xref:System.Collections.ArrayList>jämförs med det angivna värdet med det angivna <xref:System.Collections.IComparer>implementering.</xref:System.Collections.IComparer> </xref:System.Collections.ArrayList> Elementen i den <xref:System.Collections.ArrayList>redan måste sorteras i stigande värde enligt sorteringsordningen som definierats av `comparer`, annars resultatet kan vara felaktig.</xref:System.Collections.ArrayList>       Om `comparer` är `null`, jämförelsen görs med hjälp av den <xref:System.IComparable>implementeringen från elementet i sig själv eller det angivna värdet.</xref:System.IComparable> Elementen i den <xref:System.Collections.ArrayList>redan måste sorteras i stigande värde enligt sorteringsordningen definieras av den <xref:System.IComparable>genomförande; annars resultatet kan vara felaktig.</xref:System.IComparable> </xref:System.Collections.ArrayList>       Jämföra `null` tillåts med en typ och inte genererar ett undantag när du använder <xref:System.IComparable>.</xref:System.IComparable> Vid sortering, `null` anses vara mindre än alla andra objekt.       Om den <xref:System.Collections.ArrayList>innehåller fler än ett element med samma värde metoden returnerar endast en av förekomster och kan returnera förekomster, inte nödvändigtvis förstnämnda.</xref:System.Collections.ArrayList>       Om den <xref:System.Collections.ArrayList>innehåller inte det angivna värdet metoden returnerar ett negativt heltal.</xref:System.Collections.ArrayList> Du kan använda åtgärden bitvis komplement (~) till den här negativa heltal få indexet för det första elementet som är större än värdet för sökning. När du infogar värdet till den <xref:System.Collections.ArrayList>, indexet som ska användas som insättningspunkten för att underhålla sorteringsordning.</xref:System.Collections.ArrayList>       Den här metoden är en O (loggen `n`) igen, där `n` är <xref:System.Collections.ArrayList.Count%2A>.</xref:System.Collections.ArrayList.Count%2A>"
  example:
  - "The following example creates an <xref:System.Collections.ArrayList> of colored animals. The provided <xref:System.Collections.IComparer> performs the string comparison for the binary search. The results of both an iterative search and a binary search are displayed.  \n  \n [!code-cpp[Classic ArrayList.BinarySearch1 Example#2](~/add/codesnippet/cpp/51ebb232-4223-422e-9ecb-_1.cpp)]\n [!code-cs[Classic ArrayList.BinarySearch1 Example#2](~/add/codesnippet/csharp/51ebb232-4223-422e-9ecb-_1.cs)]\n [!code-vb[Classic ArrayList.BinarySearch1 Example#2](~/add/codesnippet/visualbasic/51ebb232-4223-422e-9ecb-_1.vb)]"
  syntax:
    content: public virtual int BinarySearch (object value, System.Collections.IComparer comparer);
    parameters:
    - id: value
      type: System.Object
      description: "Den <xref:System.Object>att hitta.</xref:System.Object> Värdet kan vara <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
    - id: comparer
      type: System.Collections.IComparer
      description: "Den <xref:System.Collections.IComparer>implementering ska användas vid jämförelse av element.</xref:System.Collections.IComparer>       - eller - <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> att använda standardjämförelsefunktionen som är den <xref:System.IComparable>implementeringen av varje element.</xref:System.IComparable>"
    return:
      type: System.Int32
      description: "Det nollbaserade indexet för <code> value </code> i den sorterade <xref href=&quot;System.Collections.ArrayList&quot;> </xref>om <code> value </code> är hittas, annars en negativ number, vilket är binär komplementet i indexet på nästa element som är större än <code> value </code> eller, om det finns ingen större element, binär komplementet av <xref:System.Collections.ArrayList.Count*>.</xref:System.Collections.ArrayList.Count*>"
  overload: System.Collections.ArrayList.BinarySearch*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>comparer</code>är <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> och varken <code>value</code> eller elementen i <xref href=&quot;System.Collections.ArrayList&quot;> </xref> implementera den <xref:System.IComparable> gränssnitt."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "<code>comparer</code>är <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> och <code>value</code> är inte av samma typ som elementen i den <xref href=&quot;System.Collections.ArrayList&quot;> </xref>."
  platform:
  - net462
- uid: System.Collections.ArrayList.BinarySearch(System.Int32,System.Int32,System.Object,System.Collections.IComparer)
  id: BinarySearch(System.Int32,System.Int32,System.Object,System.Collections.IComparer)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: BinarySearch(Int32,Int32,Object,IComparer)
  nameWithType: ArrayList.BinarySearch(Int32,Int32,Object,IComparer)
  fullName: System.Collections.ArrayList.BinarySearch(Int32,Int32,Object,IComparer)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Söker igenom ett antal element i den sorterade <xref href=&quot;System.Collections.ArrayList&quot;> </xref> för ett element med hjälp av den angivna jämförelsefunktionen och returnerar det nollbaserade indexet för elementet."
  remarks: "Jämföraren anpassar hur elementen jämförs. Du kan till exempel använda en <xref:System.Collections.CaseInsensitiveComparer>instans som jämföraren för sträng skiftlägesoberoende sökning.</xref:System.Collections.CaseInsensitiveComparer>       Om `comparer` anges, elementen i den <xref:System.Collections.ArrayList>jämförs med det angivna värdet med det angivna <xref:System.Collections.IComparer>implementering.</xref:System.Collections.IComparer> </xref:System.Collections.ArrayList> Elementen i den <xref:System.Collections.ArrayList>redan måste sorteras i stigande värde enligt sorteringsordningen som definierats av `comparer`, annars resultatet kan vara felaktig.</xref:System.Collections.ArrayList>       Om `comparer` är `null`, jämförelsen görs med hjälp av den <xref:System.IComparable>implementeringen från elementet i sig själv eller det angivna värdet.</xref:System.IComparable> Elementen i den <xref:System.Collections.ArrayList>redan måste sorteras i stigande värde enligt sorteringsordningen definieras av den <xref:System.IComparable>genomförande; annars resultatet kan vara felaktig.</xref:System.IComparable> </xref:System.Collections.ArrayList>       Jämföra `null` tillåts med en typ och inte genererar ett undantag när du använder <xref:System.IComparable>.</xref:System.IComparable> Vid sortering, `null` anses vara mindre än alla andra objekt.       Om den <xref:System.Collections.ArrayList>innehåller fler än ett element med samma värde metoden returnerar endast en av förekomster och kan returnera förekomster, inte nödvändigtvis förstnämnda.</xref:System.Collections.ArrayList>       Om den <xref:System.Collections.ArrayList>innehåller inte det angivna värdet metoden returnerar ett negativt heltal.</xref:System.Collections.ArrayList> Du kan använda åtgärden bitvis komplement (~) till den här negativa heltal få indexet för det första elementet som är större än värdet för sökning. När du infogar värdet till den <xref:System.Collections.ArrayList>, indexet som ska användas som insättningspunkten för att underhålla sorteringsordning.</xref:System.Collections.ArrayList>       Den här metoden är en O (loggen `n`) igen, där `n` är `count`."
  syntax:
    content: public virtual int BinarySearch (int index, int count, object value, System.Collections.IComparer comparer);
    parameters:
    - id: index
      type: System.Int32
      description: "Det nollbaserade startindexet intervallets att söka."
    - id: count
      type: System.Int32
      description: "Längden på intervallet att söka."
    - id: value
      type: System.Object
      description: "Den <xref:System.Object>att hitta.</xref:System.Object> Värdet kan vara <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
    - id: comparer
      type: System.Collections.IComparer
      description: "Den <xref:System.Collections.IComparer>implementering ska användas vid jämförelse av element.</xref:System.Collections.IComparer>       - eller - <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> att använda standardjämförelsefunktionen som är den <xref:System.IComparable>implementeringen av varje element.</xref:System.IComparable>"
    return:
      type: System.Int32
      description: "Det nollbaserade indexet för <code> value </code> i den sorterade <xref href=&quot;System.Collections.ArrayList&quot;> </xref>om <code> value </code> är hittas, annars en negativ number, vilket är binär komplementet i indexet på nästa element som är större än <code> value </code> eller, om det finns ingen större element, binär komplementet av <xref:System.Collections.ArrayList.Count*>.</xref:System.Collections.ArrayList.Count*>"
  overload: System.Collections.ArrayList.BinarySearch*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>index</code>och <code>count</code> inte ange ett giltigt intervall i den <xref href=&quot;System.Collections.ArrayList&quot;> </xref>.       - eller - <code>comparer</code> är <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> och varken <code>value</code> inte heller elementen i <xref href=&quot;System.Collections.ArrayList&quot;> </xref> implementera den <xref:System.IComparable> gränssnitt."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "<code>comparer</code>är <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> och <code>value</code> är inte av samma typ som elementen i den <xref href=&quot;System.Collections.ArrayList&quot;> </xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>index</code>är mindre än noll.       - eller - <code>count</code> är mindre än noll."
  platform:
  - net462
- uid: System.Collections.ArrayList.Capacity
  id: Capacity
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: Capacity
  nameWithType: ArrayList.Capacity
  fullName: System.Collections.ArrayList.Capacity
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Hämtar eller anger antalet element som det <xref href=&quot;System.Collections.ArrayList&quot;> </xref> kan innehålla."
  remarks: "Kapaciteten är antalet element som det <xref:System.Collections.ArrayList>kan lagra.</xref:System.Collections.ArrayList> <xref:System.Collections.ArrayList.Count%2A>är antalet element som finns i <xref:System.Collections.ArrayList>.</xref:System.Collections.ArrayList></xref:System.Collections.ArrayList.Count%2A>       Kapacitet är alltid större än eller lika med <xref:System.Collections.ArrayList.Count%2A>.</xref:System.Collections.ArrayList.Count%2A> Om <xref:System.Collections.ArrayList.Count%2A>överskrider kapacitet när du lägger till element, kapaciteten ökas automatiskt med omallokera den interna matrisen innan du kopierar gamla element och lägga till nya element.</xref:System.Collections.ArrayList.Count%2A>       Kapaciteten kan minskas genom att anropa <xref:System.Collections.ArrayList.TrimToSize%2A>eller genom att ange egenskapen Capacity uttryckligen.</xref:System.Collections.ArrayList.TrimToSize%2A> När värdet för kapacitet anges explicit omfördelats den interna matrisen också för att passa den angivna kapaciteten.       Hämtar värdet för den här egenskapen är O(1) åtgärd. Egenskapen är en O (`n`) igen, där `n` är den nya kapaciteten."
  syntax:
    content: public virtual int Capacity { get; set; }
    return:
      type: System.Int32
      description: "Antalet element som det <xref href=&quot;System.Collections.ArrayList&quot;> </xref> kan innehålla."
  overload: System.Collections.ArrayList.Capacity*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "Kapaciteten har angetts till ett värde som är mindre än <xref:System.Collections.ArrayList.Count*>.</xref:System.Collections.ArrayList.Count*>"
  - type: System.OutOfMemoryException
    commentId: T:System.OutOfMemoryException
    description: "Det finns inte tillräckligt med minne på systemet."
  platform:
  - net462
- uid: System.Collections.ArrayList.Clear
  id: Clear
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: Clear()
  nameWithType: ArrayList.Clear()
  fullName: System.Collections.ArrayList.Clear()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Tar bort alla element från den <xref href=&quot;System.Collections.ArrayList&quot;> </xref>."
  remarks: "<xref:System.Collections.ArrayList.Count%2A>är angivet till noll och släpps också referenser till andra objekt från element i mängden.</xref:System.Collections.ArrayList.Count%2A>       <xref:System.Collections.ArrayList.Capacity%2A>förblir oförändrad.</xref:System.Collections.ArrayList.Capacity%2A>  Så här återställer du kapaciteten för den <xref:System.Collections.ArrayList>, anropa <xref:System.Collections.ArrayList.TrimToSize%2A>eller Ställ in den <xref:System.Collections.ArrayList.Capacity%2A>egenskapen direkt.</xref:System.Collections.ArrayList.Capacity%2A> </xref:System.Collections.ArrayList.TrimToSize%2A> </xref:System.Collections.ArrayList> Minska en tom <xref:System.Collections.ArrayList>anger kapaciteten för den <xref:System.Collections.ArrayList>till standardkapaciteten.</xref:System.Collections.ArrayList> </xref:System.Collections.ArrayList>       Den här metoden är en O (`n`) igen, där `n` är <xref:System.Collections.ArrayList.Count%2A>.</xref:System.Collections.ArrayList.Count%2A>"
  example:
  - "The following code example shows how to trim the unused portions of the <xref:System.Collections.ArrayList> and how to clear the values of the <xref:System.Collections.ArrayList>.  \n  \n [!code-cs[Classic ArrayList.Clear Example#1](~/add/codesnippet/csharp/m-system.collections.arr_18_1.cs)]\n [!code-cpp[Classic ArrayList.Clear Example#1](~/add/codesnippet/cpp/m-system.collections.arr_18_1.cpp)]\n [!code-vb[Classic ArrayList.Clear Example#1](~/add/codesnippet/visualbasic/m-system.collections.arr_18_1.vb)]"
  syntax:
    content: public virtual void Clear ();
    parameters: []
  overload: System.Collections.ArrayList.Clear*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "Den <xref href=&quot;System.Collections.ArrayList&quot;> </xref> är skrivskyddad.       - eller - <xref href=&quot;System.Collections.ArrayList&quot;> </xref> har en fast storlek."
  platform:
  - net462
- uid: System.Collections.ArrayList.Clone
  id: Clone
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: Clone()
  nameWithType: ArrayList.Clone()
  fullName: System.Collections.ArrayList.Clone()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Skapar en lite kopia av den <xref href=&quot;System.Collections.ArrayList&quot;> </xref>."
  remarks: "En lite kopia av en samling kopieras endast element i mängden, om de är referenstyper eller värdetyper, men kopierar inte de objekt som referenserna refererar till. Referenserna i den nya samlingen pekar på samma objekt som refererar till i samlingen ursprungliga pekar på.       Däremot en djup kopia av en samling kopierar elementen och allt direkt eller indirekt refereras av elementen.       Den här metoden är en O (`n`) igen, där `n` är <xref:System.Collections.ArrayList.Count%2A>.</xref:System.Collections.ArrayList.Count%2A>"
  syntax:
    content: public virtual object Clone ();
    parameters: []
    return:
      type: System.Object
      description: "En lite kopia av den <xref href=&quot;System.Collections.ArrayList&quot;> </xref>."
  overload: System.Collections.ArrayList.Clone*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.ArrayList.Contains(System.Object)
  id: Contains(System.Object)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: Contains(Object)
  nameWithType: ArrayList.Contains(Object)
  fullName: System.Collections.ArrayList.Contains(Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Anger om det är ett element i den <xref href=&quot;System.Collections.ArrayList&quot;> </xref>."
  remarks: "Den här metoden utförs en linjär sökning. den här metoden är därför en O (`n`) igen, där `n` är <xref:System.Collections.ArrayList.Count%2A>.</xref:System.Collections.ArrayList.Count%2A>       Den här metoden anger likheten genom att anropa <xref:System.Object.Equals%2A?displayProperty=fullName>.</xref:System.Object.Equals%2A?displayProperty=fullName>       Från och med .NET Framework 2.0 kan den här metoden använder den samling objekt <xref:System.Object.Equals%2A>och <xref:System.IComparable.CompareTo%2A>metoder i `item` att avgöra om det finns objekt.</xref:System.IComparable.CompareTo%2A> </xref:System.Object.Equals%2A> I tidigare versioner av .NET Framework gjordes detta genom att använda den <xref:System.Object.Equals%2A>och <xref:System.IComparable.CompareTo%2A>metoder för den `item` parameter på objekten i samlingen.</xref:System.IComparable.CompareTo%2A> </xref:System.Object.Equals%2A>"
  syntax:
    content: public virtual bool Contains (object item);
    parameters:
    - id: item
      type: System.Object
      description: "Den <xref:System.Object>att hitta i den <xref href=&quot;System.Collections.ArrayList&quot;> </xref>.</xref:System.Object> Värdet kan vara <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>if <code>item</code> is found in the <xref href=&quot;System.Collections.ArrayList&quot;></xref>; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Collections.ArrayList.Contains*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.ArrayList.CopyTo(System.Array)
  id: CopyTo(System.Array)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: CopyTo(Array)
  nameWithType: ArrayList.CopyTo(Array)
  fullName: System.Collections.ArrayList.CopyTo(Array)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Kopierar hela <xref href=&quot;System.Collections.ArrayList&quot;> </xref> till en kompatibel endimensionell <xref:System.Array>början i början av Målmatrisen.</xref:System.Array>"
  remarks: "Den angivna matrisen måste vara kompatibelt med datatypen.       Den här metoden använder <xref:System.Array.Copy%2A?displayProperty=fullName>att kopiera element.</xref:System.Array.Copy%2A?displayProperty=fullName>       Elementen kopieras till <xref:System.Array>i den ordning i vilken uppräknaren går igenom <xref:System.Collections.ArrayList>.</xref:System.Collections.ArrayList> </xref:System.Array>       Den här metoden är en O (`n`) igen, där `n` är <xref:System.Collections.ArrayList.Count%2A>.</xref:System.Collections.ArrayList.Count%2A>"
  example:
  - "The following code example shows how to copy an <xref:System.Collections.ArrayList> into a one-dimensional <xref:System.Array?displayProperty=fullName>.  \n  \n [!code-cs[Classic ArrayList.CopyTo Example#1](~/add/codesnippet/csharp/m-system.collections.arr_6_1.cs)]\n [!code-vb[Classic ArrayList.CopyTo Example#1](~/add/codesnippet/visualbasic/m-system.collections.arr_6_1.vb)]\n [!code-cpp[Classic ArrayList.CopyTo Example#1](~/add/codesnippet/cpp/m-system.collections.arr_6_1.cpp)]"
  syntax:
    content: public virtual void CopyTo (Array array);
    parameters:
    - id: array
      type: System.Array
      description: "Den endimensionell <xref:System.Array>som är mål för element som kopieras från <xref href=&quot;System.Collections.ArrayList&quot;> </xref>.</xref:System.Array> Den <xref:System.Array>måste ha Nollbaserad indexering.</xref:System.Array>"
  overload: System.Collections.ArrayList.CopyTo*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>array</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>array</code>är multidimensionell.       - eller - antalet element i källan <xref href=&quot;System.Collections.ArrayList&quot;> </xref> är större än antalet element som mål <code>array</code> kan innehålla."
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "Typ av källan <xref href=&quot;System.Collections.ArrayList&quot;> </xref> kan inte omvandlas automatiskt till typ av målet <code> array </code>."
  platform:
  - net462
- uid: System.Collections.ArrayList.CopyTo(System.Array,System.Int32)
  id: CopyTo(System.Array,System.Int32)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: CopyTo(Array,Int32)
  nameWithType: ArrayList.CopyTo(Array,Int32)
  fullName: System.Collections.ArrayList.CopyTo(Array,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Kopierar hela <xref href=&quot;System.Collections.ArrayList&quot;> </xref> till en kompatibel endimensionell <xref:System.Array>början från det angivna indexet för Målmatrisen.</xref:System.Array>"
  remarks: "Den angivna matrisen måste vara kompatibelt med datatypen.       Den här metoden använder <xref:System.Array.Copy%2A?displayProperty=fullName>att kopiera element.</xref:System.Array.Copy%2A?displayProperty=fullName>       Elementen kopieras till <xref:System.Array>i den ordning i vilken uppräknaren går igenom <xref:System.Collections.ArrayList>.</xref:System.Collections.ArrayList> </xref:System.Array>       Den här metoden är en O (`n`) igen, där `n` är <xref:System.Collections.ArrayList.Count%2A>.</xref:System.Collections.ArrayList.Count%2A>"
  example:
  - "The following code example shows how to copy an <xref:System.Collections.ArrayList> into a one-dimensional <xref:System.Array?displayProperty=fullName>.  \n  \n [!code-cpp[Classic ArrayList.CopyTo1 Example#1](~/add/codesnippet/cpp/m-system.collections.arr_27_1.cpp)]\n [!code-cs[Classic ArrayList.CopyTo1 Example#1](~/add/codesnippet/csharp/m-system.collections.arr_27_1.cs)]\n [!code-vb[Classic ArrayList.CopyTo1 Example#1](~/add/codesnippet/visualbasic/m-system.collections.arr_27_1.vb)]"
  syntax:
    content: public virtual void CopyTo (Array array, int arrayIndex);
    parameters:
    - id: array
      type: System.Array
      description: "Den endimensionell <xref:System.Array>som är mål för element som kopieras från <xref href=&quot;System.Collections.ArrayList&quot;> </xref>.</xref:System.Array> Den <xref:System.Array>måste ha Nollbaserad indexering.</xref:System.Array>"
    - id: arrayIndex
      type: System.Int32
      description: "Det nollbaserade indexet i `array` vilka kopiera börjar."
  overload: System.Collections.ArrayList.CopyTo*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>array</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>arrayIndex</code>är mindre än noll."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>array</code>är multidimensionell.       - eller - antalet element i källan <xref href=&quot;System.Collections.ArrayList&quot;> </xref> är större än det tillgängliga utrymmet från <code>arrayIndex</code> till slutet av destinationen <code>array</code>."
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "Typ av källan <xref href=&quot;System.Collections.ArrayList&quot;> </xref> kan inte omvandlas automatiskt till typ av målet <code> array </code>."
  platform:
  - net462
- uid: System.Collections.ArrayList.CopyTo(System.Int32,System.Array,System.Int32,System.Int32)
  id: CopyTo(System.Int32,System.Array,System.Int32,System.Int32)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: CopyTo(Int32,Array,Int32,Int32)
  nameWithType: ArrayList.CopyTo(Int32,Array,Int32,Int32)
  fullName: System.Collections.ArrayList.CopyTo(Int32,Array,Int32,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Kopierar en uppsättning element från den <xref href=&quot;System.Collections.ArrayList&quot;> </xref> till en kompatibel endimensionell <xref:System.Array>början från det angivna indexet för Målmatrisen.</xref:System.Array>"
  remarks: "Den angivna matrisen måste vara kompatibelt med datatypen.       Den här metoden använder <xref:System.Array.Copy%2A?displayProperty=fullName>att kopiera element.</xref:System.Array.Copy%2A?displayProperty=fullName>       Elementen kopieras till <xref:System.Array>i den ordning i vilken uppräknaren går igenom <xref:System.Collections.ArrayList>.</xref:System.Collections.ArrayList> </xref:System.Array>       Den här metoden är en O (`n`) igen, där `n` är `count`."
  example:
  - "The following code example shows how to copy an <xref:System.Collections.ArrayList> into a one-dimensional <xref:System.Array?displayProperty=fullName>.  \n  \n [!code-cpp[Classic ArrayList.CopyTo1 Example#1](~/add/codesnippet/cpp/971aa346-8de3-42af-8cd4-_1.cpp)]\n [!code-cs[Classic ArrayList.CopyTo1 Example#1](~/add/codesnippet/csharp/971aa346-8de3-42af-8cd4-_1.cs)]\n [!code-vb[Classic ArrayList.CopyTo1 Example#1](~/add/codesnippet/visualbasic/971aa346-8de3-42af-8cd4-_1.vb)]"
  syntax:
    content: public virtual void CopyTo (int index, Array array, int arrayIndex, int count);
    parameters:
    - id: index
      type: System.Int32
      description: "Det nollbaserade indexet i källan <xref href=&quot;System.Collections.ArrayList&quot;> </xref> vilka kopiera börjar."
    - id: array
      type: System.Array
      description: "Den endimensionell <xref:System.Array>som är mål för element som kopieras från <xref href=&quot;System.Collections.ArrayList&quot;> </xref>.</xref:System.Array> Den <xref:System.Array>måste ha Nollbaserad indexering.</xref:System.Array>"
    - id: arrayIndex
      type: System.Int32
      description: "Det nollbaserade indexet i `array` vilka kopiera börjar."
    - id: count
      type: System.Int32
      description: "Antal element att kopiera."
  overload: System.Collections.ArrayList.CopyTo*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>array</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>index</code>är mindre än noll.       - eller - <code>arrayIndex</code> är mindre än noll.       - eller - <code>count</code> är mindre än noll."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>array</code>är multidimensionell.       - eller - <code>index</code> är lika med eller större än den <xref:System.Collections.ArrayList.Count*> källan <xref href=&quot;System.Collections.ArrayList&quot;> </xref>.       - eller - antalet element från <code>index</code> till slutet av källan <xref href=&quot;System.Collections.ArrayList&quot;> </xref> är större än det tillgängliga utrymmet från <code>arrayIndex</code> till slutet av destinationen <code>array</code>."
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "Typ av källan <xref href=&quot;System.Collections.ArrayList&quot;> </xref> kan inte omvandlas automatiskt till typ av målet <code> array </code>."
  platform:
  - net462
- uid: System.Collections.ArrayList.Count
  id: Count
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: Count
  nameWithType: ArrayList.Count
  fullName: System.Collections.ArrayList.Count
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Hämtar antalet element i själva verket det <xref href=&quot;System.Collections.ArrayList&quot;> </xref>."
  remarks: "<xref:System.Collections.ArrayList.Capacity%2A>är antalet element som det <xref:System.Collections.ArrayList>kan lagra.</xref:System.Collections.ArrayList></xref:System.Collections.ArrayList.Capacity%2A> Antalet är antalet element som finns i <xref:System.Collections.ArrayList>.</xref:System.Collections.ArrayList>       <xref:System.Collections.ArrayList.Capacity%2A>alltid är större än eller lika med Count.</xref:System.Collections.ArrayList.Capacity%2A> Om antalet överstiger <xref:System.Collections.ArrayList.Capacity%2A>när du lägger till element ökas automatiskt kapaciteten med omallokera den interna matrisen innan du kopierar gamla element och lägga till nya element.</xref:System.Collections.ArrayList.Capacity%2A>       Hämtar värdet för den här egenskapen är en O(1)-åtgärd."
  syntax:
    content: public virtual int Count { get; }
    return:
      type: System.Int32
      description: "Antalet element i själva verket det <xref href=&quot;System.Collections.ArrayList&quot;> </xref>."
  overload: System.Collections.ArrayList.Count*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.ArrayList.FixedSize(System.Collections.ArrayList)
  id: FixedSize(System.Collections.ArrayList)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: FixedSize(ArrayList)
  nameWithType: ArrayList.FixedSize(ArrayList)
  fullName: System.Collections.ArrayList.FixedSize(ArrayList)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Returnerar en <xref href=&quot;System.Collections.ArrayList&quot;> </xref> Omslutning med fast storlek."
  remarks: "Den här wrapper kan användas för att förhindra tillägg och borttagningar från ursprungligt <xref:System.Collections.ArrayList>.</xref:System.Collections.ArrayList> Element kan fortfarande ändras eller ersättas.       En samling med en fast storlek är helt enkelt en samling med en wrapper som förhindrar att lägga till och ta bort element. därför visar ändringar har gjorts i den underliggande mängden, inklusive tillägg eller borttagning av element, ändringarna på samlingen fast storlek.       Den här metoden är en O(1)-åtgärd."
  example:
  - "The following code example shows how to create a fixed-size wrapper around an <xref:System.Collections.ArrayList>.  \n  \n [!code-cs[Classic ArrayList.IsFixedSize Example#1](~/add/codesnippet/csharp/m-system.collections.arr_12_1.cs)]\n [!code-vb[Classic ArrayList.IsFixedSize Example#1](~/add/codesnippet/visualbasic/m-system.collections.arr_12_1.vb)]\n [!code-cpp[Classic ArrayList.IsFixedSize Example#1](~/add/codesnippet/cpp/m-system.collections.arr_12_1.cpp)]"
  syntax:
    content: public static System.Collections.ArrayList FixedSize (System.Collections.ArrayList list);
    parameters:
    - id: list
      type: System.Collections.ArrayList
      description: "Den <xref href=&quot;System.Collections.ArrayList&quot;> </xref> ska radbrytas."
    return:
      type: System.Collections.ArrayList
      description: "En <xref href=&quot;System.Collections.ArrayList&quot;> </xref> Omslutning med fast storlek."
  overload: System.Collections.ArrayList.FixedSize*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>list</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Collections.ArrayList.FixedSize(System.Collections.IList)
  id: FixedSize(System.Collections.IList)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: FixedSize(IList)
  nameWithType: ArrayList.FixedSize(IList)
  fullName: System.Collections.ArrayList.FixedSize(IList)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Returnerar en <xref:System.Collections.IList>Omslutning med fast storlek.</xref:System.Collections.IList>"
  remarks: "Den här wrapper kan användas för att förhindra tillägg och borttagningar från ursprungligt <xref:System.Collections.IList>.</xref:System.Collections.IList> Element kan fortfarande ändras eller ersättas.       En samling med en fast storlek är helt enkelt en samling med en wrapper som förhindrar att lägga till och ta bort element. därför visar ändringar har gjorts i den underliggande mängden, inklusive tillägg eller borttagning av element, ändringarna på samlingen fast storlek.       Den här metoden är en O(1)-åtgärd."
  syntax:
    content: public static System.Collections.IList FixedSize (System.Collections.IList list);
    parameters:
    - id: list
      type: System.Collections.IList
      description: "Den <xref:System.Collections.IList>du omsluter.</xref:System.Collections.IList>"
    return:
      type: System.Collections.IList
      description: "En <xref:System.Collections.IList>Omslutning med fast storlek.</xref:System.Collections.IList>"
  overload: System.Collections.ArrayList.FixedSize*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>list</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Collections.ArrayList.GetEnumerator
  id: GetEnumerator
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: GetEnumerator()
  nameWithType: ArrayList.GetEnumerator()
  fullName: System.Collections.ArrayList.GetEnumerator()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Returnerar en uppräknare för hela <xref href=&quot;System.Collections.ArrayList&quot;> </xref>."
  remarks: "Den `foreach` satsen i C#-språk (`for each` i Visual Basic) döljer komplexiteten i uppräknare.  Därför använder `foreach` rekommenderas, i stället för direkt manipulering uppräknaren.       Uppräknare kan användas för att läsa data i samlingen, men de kan inte användas för att ändra den underliggande mängden.       Inledningsvis har uppräknaren placerats före det första elementet i mängden. <xref:System.Collections.IEnumerator.Reset%2A>medför också uppräknaren tillbaka till den här positionen.</xref:System.Collections.IEnumerator.Reset%2A>  I den här positionen <xref:System.Collections.IEnumerator.Current%2A>är odefinierad.</xref:System.Collections.IEnumerator.Current%2A> Därför måste du anropa <xref:System.Collections.IEnumerator.MoveNext%2A>att avancera uppräknaren till det första elementet i mängden innan du läser värdet för <xref:System.Collections.IEnumerator.Current%2A>.</xref:System.Collections.IEnumerator.Current%2A> </xref:System.Collections.IEnumerator.MoveNext%2A>       <xref:System.Collections.IEnumerator.Current%2A>returnerar samma objekt förrän antingen <xref:System.Collections.IEnumerator.MoveNext%2A>eller <xref:System.Collections.IEnumerator.Reset%2A>kallas.</xref:System.Collections.IEnumerator.Reset%2A> </xref:System.Collections.IEnumerator.MoveNext%2A></xref:System.Collections.IEnumerator.Current%2A> <xref:System.Collections.IEnumerator.MoveNext%2A>Anger <xref:System.Collections.IEnumerator.Current%2A>till nästa element.</xref:System.Collections.IEnumerator.Current%2A></xref:System.Collections.IEnumerator.MoveNext%2A>       Om <xref:System.Collections.IEnumerator.MoveNext%2A>passerar slutet på mängden uppräknaren är placerad efter det sista elementet i mängden och <xref:System.Collections.IEnumerator.MoveNext%2A>returnerar `false`.</xref:System.Collections.IEnumerator.MoveNext%2A> </xref:System.Collections.IEnumerator.MoveNext%2A> När uppräknaren är på denna position efterföljande anrop till <xref:System.Collections.IEnumerator.MoveNext%2A>också returnera `false`.</xref:System.Collections.IEnumerator.MoveNext%2A> Om senast anropet till <xref:System.Collections.IEnumerator.MoveNext%2A>returnerade `false`, <xref:System.Collections.IEnumerator.Current%2A>är odefinierad.</xref:System.Collections.IEnumerator.Current%2A> </xref:System.Collections.IEnumerator.MoveNext%2A> Ange <xref:System.Collections.IEnumerator.Current%2A>att det första elementet i mängden igen, kan du anropa <xref:System.Collections.IEnumerator.Reset%2A>följt av <xref:System.Collections.IEnumerator.MoveNext%2A>.</xref:System.Collections.IEnumerator.MoveNext%2A> </xref:System.Collections.IEnumerator.Reset%2A> </xref:System.Collections.IEnumerator.Current%2A>       En uppräknare är giltig så länge samlingen förblir oförändrad. Om ändringar görs i samlingen, till exempel att lägga till, ändra eller ta bort element, uppräknaren blir inaktuella och sitt beteende är odefinierad.       Uppräknaren har inte exklusiv åtkomst till samlingen; uppräkning av en samling är därför är inte en trådsäker procedur.  Om du vill garantera tråd under uppräkning, kan du låsa samlingen under hela uppräkningen.  Om du vill tillåta en samling som ska användas av flera trådar för läsning och skrivning, måste du implementera ditt eget synkronisering.       Den här metoden är en O(1)-åtgärd."
  example:
  - "The following example gets the enumerator for an <xref:System.Collections.ArrayList>, and the enumerator for a range of elements in the <xref:System.Collections.ArrayList>.  \n  \n [!code-cs[Collections.ArrayList.GetEnumerator#1](~/add/codesnippet/csharp/m-system.collections.arr_2_1.cs)]\n [!code-vb[Collections.ArrayList.GetEnumerator#1](~/add/codesnippet/visualbasic/m-system.collections.arr_2_1.vb)]"
  syntax:
    content: public virtual System.Collections.IEnumerator GetEnumerator ();
    parameters: []
    return:
      type: System.Collections.IEnumerator
      description: "En <xref:System.Collections.IEnumerator>för hela <xref href=&quot;System.Collections.ArrayList&quot;> </xref>.</xref:System.Collections.IEnumerator>"
  overload: System.Collections.ArrayList.GetEnumerator*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.ArrayList.GetEnumerator(System.Int32,System.Int32)
  id: GetEnumerator(System.Int32,System.Int32)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: GetEnumerator(Int32,Int32)
  nameWithType: ArrayList.GetEnumerator(Int32,Int32)
  fullName: System.Collections.ArrayList.GetEnumerator(Int32,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Returnerar en uppräknare för ett antal element i den <xref href=&quot;System.Collections.ArrayList&quot;> </xref>."
  remarks: "Den `foreach` satsen i C#-språk (`for each` i Visual C++ `For Each` Visual Basic) döljer komplexiteten i uppräknare.  Därför använder `foreach` rekommenderas, i stället för direkt manipulering uppräknaren.       Uppräknare kan användas för att läsa data i samlingen, men de kan inte användas för att ändra den underliggande mängden.       Inledningsvis har uppräknaren placerats före det första elementet i mängden. <xref:System.Collections.IEnumerator.Reset%2A>medför också uppräknaren tillbaka till den här positionen.</xref:System.Collections.IEnumerator.Reset%2A>  I den här positionen <xref:System.Collections.IEnumerator.Current%2A>är odefinierad.</xref:System.Collections.IEnumerator.Current%2A> Därför måste du anropa <xref:System.Collections.IEnumerator.MoveNext%2A>att avancera uppräknaren till det första elementet i mängden innan du läser värdet för <xref:System.Collections.IEnumerator.Current%2A>.</xref:System.Collections.IEnumerator.Current%2A> </xref:System.Collections.IEnumerator.MoveNext%2A>       <xref:System.Collections.IEnumerator.Current%2A>returnerar samma objekt förrän antingen <xref:System.Collections.IEnumerator.MoveNext%2A>eller <xref:System.Collections.IEnumerator.Reset%2A>kallas.</xref:System.Collections.IEnumerator.Reset%2A> </xref:System.Collections.IEnumerator.MoveNext%2A></xref:System.Collections.IEnumerator.Current%2A> <xref:System.Collections.IEnumerator.MoveNext%2A>Anger <xref:System.Collections.IEnumerator.Current%2A>till nästa element.</xref:System.Collections.IEnumerator.Current%2A></xref:System.Collections.IEnumerator.MoveNext%2A>       Om <xref:System.Collections.IEnumerator.MoveNext%2A>passerar slutet på mängden uppräknaren är placerad efter det sista elementet i mängden och <xref:System.Collections.IEnumerator.MoveNext%2A>returnerar `false`.</xref:System.Collections.IEnumerator.MoveNext%2A> </xref:System.Collections.IEnumerator.MoveNext%2A> När uppräknaren är på denna position efterföljande anrop till <xref:System.Collections.IEnumerator.MoveNext%2A>också returnera `false`.</xref:System.Collections.IEnumerator.MoveNext%2A> Om senast anropet till <xref:System.Collections.IEnumerator.MoveNext%2A>returnerade `false`, <xref:System.Collections.IEnumerator.Current%2A>är odefinierad.</xref:System.Collections.IEnumerator.Current%2A> </xref:System.Collections.IEnumerator.MoveNext%2A> Ange <xref:System.Collections.IEnumerator.Current%2A>att det första elementet i mängden igen, kan du anropa <xref:System.Collections.IEnumerator.Reset%2A>följt av <xref:System.Collections.IEnumerator.MoveNext%2A>.</xref:System.Collections.IEnumerator.MoveNext%2A> </xref:System.Collections.IEnumerator.Reset%2A> </xref:System.Collections.IEnumerator.Current%2A>       En uppräknare är giltig så länge samlingen förblir oförändrad. Om ändringar görs i samlingen, till exempel att lägga till, ändra eller ta bort element, uppräknaren blir inaktuella och sitt beteende är odefinierad.       Uppräknaren har inte exklusiv åtkomst till samlingen; uppräkning av en samling är därför är inte en trådsäker procedur.  Om du vill garantera tråd under uppräkning, kan du låsa samlingen under hela uppräkningen.  Om du vill tillåta en samling som ska användas av flera trådar för läsning och skrivning, måste du implementera ditt eget synkronisering.       Den här metoden är en O(1)-åtgärd.      ## Version programkompatibilitet i .NET Framework version 1.0 och 1.1 uppräknaren för en <xref:System.Collections.ArrayList>adapterprogram returneras av den <xref:System.Collections.ArrayList.Adapter%2A>metoden behandlas det andra argumentet som en övre gräns i stället för ett antal.</xref:System.Collections.ArrayList.Adapter%2A> </xref:System.Collections.ArrayList> I den [!INCLUDE[dnprdnlong](~/add/includes/dnprdnlong-md.md)] det andra argumentet ska behandlas som ett antal."
  example:
  - "The following example gets the enumerator for an <xref:System.Collections.ArrayList>, and the enumerator for a range of elements in the <xref:System.Collections.ArrayList>.  \n  \n [!code-cs[Collections.ArrayList.GetEnumerator#1](~/add/codesnippet/csharp/m-system.collections.arr_10_1.cs)]\n [!code-vb[Collections.ArrayList.GetEnumerator#1](~/add/codesnippet/visualbasic/m-system.collections.arr_10_1.vb)]"
  syntax:
    content: public virtual System.Collections.IEnumerator GetEnumerator (int index, int count);
    parameters:
    - id: index
      type: System.Int32
      description: "Det första nollbaserade indexet för den <xref href=&quot;System.Collections.ArrayList&quot;> </xref> avsnittet uppräknaren vända sig till."
    - id: count
      type: System.Int32
      description: "Antalet element i den <xref href=&quot;System.Collections.ArrayList&quot;> </xref> avsnittet uppräknaren vända sig till."
    return:
      type: System.Collections.IEnumerator
      description: "En <xref:System.Collections.IEnumerator>för det angivna intervallet för element i den <xref href=&quot;System.Collections.ArrayList&quot;> </xref>.</xref:System.Collections.IEnumerator>"
  overload: System.Collections.ArrayList.GetEnumerator*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>index</code>är mindre än noll.       - eller - <code>count</code> är mindre än noll."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>index</code>och <code>count</code> inte ange ett giltigt adressintervall i den <xref href=&quot;System.Collections.ArrayList&quot;> </xref>."
  platform:
  - net462
- uid: System.Collections.ArrayList.GetRange(System.Int32,System.Int32)
  id: GetRange(System.Int32,System.Int32)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: GetRange(Int32,Int32)
  nameWithType: ArrayList.GetRange(Int32,Int32)
  fullName: System.Collections.ArrayList.GetRange(Int32,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Returnerar en <xref href=&quot;System.Collections.ArrayList&quot;> </xref> som motsvarar en delmängd av element i källan <xref href=&quot;System.Collections.ArrayList&quot;> </xref>."
  remarks: "Den här metoden kan inte skapa kopior av elementen. Den nya <xref:System.Collections.ArrayList>är bara en visa källan <xref:System.Collections.ArrayList>.</xref:System.Collections.ArrayList> </xref:System.Collections.ArrayList> Men alla efterföljande ändringar av datakällan <xref:System.Collections.ArrayList>måste göras via den här visningsfönstret <xref:System.Collections.ArrayList>.</xref:System.Collections.ArrayList> </xref:System.Collections.ArrayList> Om du ändrar direkt till källan <xref:System.Collections.ArrayList>, fönstret visa <xref:System.Collections.ArrayList>betraktas som inaktuella och några åtgärder på den returnerar <xref:System.InvalidOperationException>.</xref:System.InvalidOperationException> </xref:System.Collections.ArrayList> </xref:System.Collections.ArrayList>       Den här metoden är en O(1)-åtgärd."
  example:
  - "The following code example shows how to set and get a range of elements in the <xref:System.Collections.ArrayList>.  \n  \n [!code-cs[Classic ArrayList.SetRange Example#1](~/add/codesnippet/csharp/m-system.collections.arr_7_1.cs)]\n [!code-cpp[Classic ArrayList.SetRange Example#1](~/add/codesnippet/cpp/m-system.collections.arr_7_1.cpp)]\n [!code-vb[Classic ArrayList.SetRange Example#1](~/add/codesnippet/visualbasic/m-system.collections.arr_7_1.vb)]"
  syntax:
    content: public virtual System.Collections.ArrayList GetRange (int index, int count);
    parameters:
    - id: index
      type: System.Int32
      description: "Det nollbaserade <xref href=&quot;System.Collections.ArrayList&quot;> </xref> indexet vid intervallet startar."
    - id: count
      type: System.Int32
      description: "Antalet element i intervallet."
    return:
      type: System.Collections.ArrayList
      description: "En <xref href=&quot;System.Collections.ArrayList&quot;> </xref> som motsvarar en delmängd av element i källan <xref href=&quot;System.Collections.ArrayList&quot;> </xref>."
  overload: System.Collections.ArrayList.GetRange*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>index</code>är mindre än noll.       - eller - <code>count</code> är mindre än noll."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>index</code>och <code>count</code> inte ange ett giltigt intervall för element i den <xref href=&quot;System.Collections.ArrayList&quot;> </xref>."
  platform:
  - net462
- uid: System.Collections.ArrayList.IndexOf(System.Object)
  id: IndexOf(System.Object)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: IndexOf(Object)
  nameWithType: ArrayList.IndexOf(Object)
  fullName: System.Collections.ArrayList.IndexOf(Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Söker efter den angivna <xref:System.Object>och returnerar det nollbaserade indexet för den första förekomsten inom hela <xref href=&quot;System.Collections.ArrayList&quot;> </xref>.</xref:System.Object>"
  remarks: "Den <xref:System.Collections.ArrayList>genomsöks framåt börjar vid det första elementet och slutar på det sista elementet.</xref:System.Collections.ArrayList>       Den här metoden utförs en linjär sökning. den här metoden är därför en O (`n`) igen, där `n` är <xref:System.Collections.ArrayList.Count%2A>.</xref:System.Collections.ArrayList.Count%2A>       Den här metoden anger likheten genom att anropa <xref:System.Object.Equals%2A?displayProperty=fullName>.</xref:System.Object.Equals%2A?displayProperty=fullName>       Från och med .NET Framework 2.0 kan den här metoden använder den samling objekt <xref:System.Object.Equals%2A>och <xref:System.IComparable.CompareTo%2A>metoder i `item` att avgöra om det finns objekt.</xref:System.IComparable.CompareTo%2A> </xref:System.Object.Equals%2A> I tidigare versioner av .NET Framework gjordes detta genom att använda den <xref:System.Object.Equals%2A>och <xref:System.IComparable.CompareTo%2A>metoder för den `item` parameter på objekten i samlingen.</xref:System.IComparable.CompareTo%2A> </xref:System.Object.Equals%2A>"
  example:
  - "The following code example shows how to determine the index of the first occurrence of a specified element.  \n  \n [!code-cpp[Classic ArrayList.IndexOf Example#1](~/add/codesnippet/cpp/m-system.collections.arr_28_1.cpp)]\n [!code-cs[Classic ArrayList.IndexOf Example#1](~/add/codesnippet/csharp/m-system.collections.arr_28_1.cs)]\n [!code-vb[Classic ArrayList.IndexOf Example#1](~/add/codesnippet/visualbasic/m-system.collections.arr_28_1.vb)]"
  syntax:
    content: public virtual int IndexOf (object value);
    parameters:
    - id: value
      type: System.Object
      description: "Den <xref:System.Object>att hitta i den <xref href=&quot;System.Collections.ArrayList&quot;> </xref>.</xref:System.Object> Värdet kan vara <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
    return:
      type: System.Int32
      description: "Det nollbaserade indexet för den första förekomsten av <code> value </code> inom hela <xref href=&quot;System.Collections.ArrayList&quot;> </xref>om hittas, i annat fall -1."
  overload: System.Collections.ArrayList.IndexOf*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.ArrayList.IndexOf(System.Object,System.Int32)
  id: IndexOf(System.Object,System.Int32)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: IndexOf(Object,Int32)
  nameWithType: ArrayList.IndexOf(Object,Int32)
  fullName: System.Collections.ArrayList.IndexOf(Object,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Söker efter den angivna <xref:System.Object>och returnerar det nollbaserade indexet för den första förekomsten inom intervallet för element i den <xref href=&quot;System.Collections.ArrayList&quot;> </xref> som sträcker sig från det angivna indexet till det sista elementet.</xref:System.Object>"
  remarks: "Den <xref:System.Collections.ArrayList>genomsöks framåt från `startIndex` och slutar på det sista elementet.</xref:System.Collections.ArrayList>       Den här metoden utförs en linjär sökning. den här metoden är därför en O (`n`) igen, där `n` är antalet element från `startIndex` till slutet av <xref:System.Collections.ArrayList>.</xref:System.Collections.ArrayList>       Den här metoden anger likheten genom att anropa <xref:System.Object.Equals%2A?displayProperty=fullName>.</xref:System.Object.Equals%2A?displayProperty=fullName>       Från och med .NET Framework 2.0 kan den här metoden använder den samling objekt <xref:System.Object.Equals%2A>och <xref:System.IComparable.CompareTo%2A>metoder i `item` att avgöra om det finns objekt.</xref:System.IComparable.CompareTo%2A> </xref:System.Object.Equals%2A> I tidigare versioner av .NET Framework gjordes detta genom att använda den <xref:System.Object.Equals%2A>och <xref:System.IComparable.CompareTo%2A>metoder för den `item` parameter på objekten i samlingen.</xref:System.IComparable.CompareTo%2A> </xref:System.Object.Equals%2A>"
  example:
  - "The following code example shows how to determine the index of the first occurrence of a specified element.  \n  \n [!code-cpp[Classic ArrayList.IndexOf Example#1](~/add/codesnippet/cpp/m-system.collections.arr_22_1.cpp)]\n [!code-cs[Classic ArrayList.IndexOf Example#1](~/add/codesnippet/csharp/m-system.collections.arr_22_1.cs)]\n [!code-vb[Classic ArrayList.IndexOf Example#1](~/add/codesnippet/visualbasic/m-system.collections.arr_22_1.vb)]"
  syntax:
    content: public virtual int IndexOf (object value, int startIndex);
    parameters:
    - id: value
      type: System.Object
      description: "Den <xref:System.Object>att hitta i den <xref href=&quot;System.Collections.ArrayList&quot;> </xref>.</xref:System.Object> Värdet kan vara <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
    - id: startIndex
      type: System.Int32
      description: "Det första nollbaserade indexet för sökningen. 0 (noll) är giltig i en tom lista."
    return:
      type: System.Int32
      description: "Det nollbaserade indexet för den första förekomsten av <code> value </code> inom intervallet för element i den <xref href=&quot;System.Collections.ArrayList&quot;> </xref> som sträcker sig från <code> startIndex </code> till det sista elementet om hittas, i annat fall -1."
  overload: System.Collections.ArrayList.IndexOf*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>startIndex</code>ligger utanför intervallet med giltiga index för den <xref href=&quot;System.Collections.ArrayList&quot;> </xref>."
  platform:
  - net462
- uid: System.Collections.ArrayList.IndexOf(System.Object,System.Int32,System.Int32)
  id: IndexOf(System.Object,System.Int32,System.Int32)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: IndexOf(Object,Int32,Int32)
  nameWithType: ArrayList.IndexOf(Object,Int32,Int32)
  fullName: System.Collections.ArrayList.IndexOf(Object,Int32,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Söker efter den angivna <xref:System.Object>och returnerar det nollbaserade indexet för den första förekomsten inom intervallet för element i den <xref href=&quot;System.Collections.ArrayList&quot;> </xref> som börjar med det angivna indexet och innehåller det angivna antalet element.</xref:System.Object>"
  remarks: "Den <xref:System.Collections.ArrayList>genomsöks framåt från `startIndex` och avslutas med `startIndex` plus `count` minus 1, om `count` är större än 0.</xref:System.Collections.ArrayList>       Den här metoden utförs en linjär sökning. den här metoden är därför en O (`n`) igen, där `n` är `count`.       Den här metoden anger likheten genom att anropa <xref:System.Object.Equals%2A?displayProperty=fullName>.</xref:System.Object.Equals%2A?displayProperty=fullName>       Från och med .NET Framework 2.0 kan den här metoden använder den samling objekt <xref:System.Object.Equals%2A>och <xref:System.IComparable.CompareTo%2A>metoder i `item` att avgöra om det finns objekt.</xref:System.IComparable.CompareTo%2A> </xref:System.Object.Equals%2A> I tidigare versioner av .NET Framework gjordes detta genom att använda den <xref:System.Object.Equals%2A>och <xref:System.IComparable.CompareTo%2A>metoder för den `item` parameter på objekten i samlingen.</xref:System.IComparable.CompareTo%2A> </xref:System.Object.Equals%2A>"
  example:
  - "The following code example shows how to determine the index of the first occurrence of a specified element.  \n  \n [!code-cpp[Classic ArrayList.IndexOf Example#1](~/add/codesnippet/cpp/m-system.collections.arr_19_1.cpp)]\n [!code-cs[Classic ArrayList.IndexOf Example#1](~/add/codesnippet/csharp/m-system.collections.arr_19_1.cs)]\n [!code-vb[Classic ArrayList.IndexOf Example#1](~/add/codesnippet/visualbasic/m-system.collections.arr_19_1.vb)]"
  syntax:
    content: public virtual int IndexOf (object value, int startIndex, int count);
    parameters:
    - id: value
      type: System.Object
      description: "Den <xref:System.Object>att hitta i den <xref href=&quot;System.Collections.ArrayList&quot;> </xref>.</xref:System.Object> Värdet kan vara <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
    - id: startIndex
      type: System.Int32
      description: "Det första nollbaserade indexet för sökningen. 0 (noll) är giltig i en tom lista."
    - id: count
      type: System.Int32
      description: "Antalet element i avsnittet för att söka efter."
    return:
      type: System.Int32
      description: "Det nollbaserade indexet för den första förekomsten av <code> value </code> inom intervallet för element i den <xref href=&quot;System.Collections.ArrayList&quot;> </xref> som börjar vid <code> startIndex </code> och innehåller <code> count </code> antal element om hittas, i annat fall -1."
  overload: System.Collections.ArrayList.IndexOf*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>startIndex</code>ligger utanför intervallet med giltiga index för den <xref href=&quot;System.Collections.ArrayList&quot;> </xref>.       - eller - <code>count</code> är mindre än noll.       - eller - <code>startIndex</code> och <code>count</code> Ange inte ett giltigt avsnitt i den <xref href=&quot;System.Collections.ArrayList&quot;> </xref>."
  platform:
  - net462
- uid: System.Collections.ArrayList.Insert(System.Int32,System.Object)
  id: Insert(System.Int32,System.Object)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: Insert(Int32,Object)
  nameWithType: ArrayList.Insert(Int32,Object)
  fullName: System.Collections.ArrayList.Insert(Int32,Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Infogar ett element i den <xref href=&quot;System.Collections.ArrayList&quot;> </xref> med det angivna indexet."
  remarks: "<xref:System.Collections.ArrayList>accepterar `null` som ett giltigt värde och tillåter dubblettelement.</xref:System.Collections.ArrayList>       Om <xref:System.Collections.ArrayList.Count%2A>redan är lika med <xref:System.Collections.ArrayList.Capacity%2A>, kapacitet hos den <xref:System.Collections.ArrayList>ökas genom att omfördela automatiskt den interna matrisen och befintliga element kopieras till den nya matrisen innan du lägger till nya element.</xref:System.Collections.ArrayList> </xref:System.Collections.ArrayList.Capacity%2A> </xref:System.Collections.ArrayList.Count%2A>       Om `index` är lika med <xref:System.Collections.ArrayList.Count%2A>, `value` har lagts till i slutet av <xref:System.Collections.ArrayList>.</xref:System.Collections.ArrayList> </xref:System.Collections.ArrayList.Count%2A>       Hantera nya element i samlingar av angränsande element, som visar de element som följer insättningspunkten Flytta ned till. Om samlingen är indexerad, uppdateras även indexen för element som flyttas. Det här problemet gäller inte för samlingar där element begreppsmässigt är grupperade i buckets, till exempel en hash-tabell.       Den här metoden är en O (`n`) igen, där `n` är <xref:System.Collections.ArrayList.Count%2A>.</xref:System.Collections.ArrayList.Count%2A>"
  example:
  - "The following code example shows how to insert elements into the <xref:System.Collections.ArrayList>.  \n  \n [!code-cs[Classic ArrayList.Insert Example#1](~/add/codesnippet/csharp/m-system.collections.arr_15_1.cs)]\n [!code-vb[Classic ArrayList.Insert Example#1](~/add/codesnippet/visualbasic/m-system.collections.arr_15_1.vb)]\n [!code-cpp[Classic ArrayList.Insert Example#1](~/add/codesnippet/cpp/m-system.collections.arr_15_1.cpp)]"
  syntax:
    content: public virtual void Insert (int index, object value);
    parameters:
    - id: index
      type: System.Int32
      description: "Det nollbaserade indexet som `value` ska infogas."
    - id: value
      type: System.Object
      description: "Den <xref:System.Object>Infoga.</xref:System.Object> Värdet kan vara <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  overload: System.Collections.ArrayList.Insert*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>index</code>är mindre än noll.       - eller - <code>index</code> är större än <xref:System.Collections.ArrayList.Count*>."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "Den <xref href=&quot;System.Collections.ArrayList&quot;> </xref> är skrivskyddad.       - eller - <xref href=&quot;System.Collections.ArrayList&quot;> </xref> har en fast storlek."
  platform:
  - net462
- uid: System.Collections.ArrayList.InsertRange(System.Int32,System.Collections.ICollection)
  id: InsertRange(System.Int32,System.Collections.ICollection)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: InsertRange(Int32,ICollection)
  nameWithType: ArrayList.InsertRange(Int32,ICollection)
  fullName: System.Collections.ArrayList.InsertRange(Int32,ICollection)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Infogar elementen i en samling till den <xref href=&quot;System.Collections.ArrayList&quot;> </xref> med det angivna indexet."
  remarks: "<xref:System.Collections.ArrayList>accepterar `null` som ett giltigt värde och tillåter dubblettelement.</xref:System.Collections.ArrayList>       Om den nya <xref:System.Collections.ArrayList.Count%2A>(aktuellt <xref:System.Collections.ArrayList.Count%2A>plus mängdens storlek) ska vara större än <xref:System.Collections.ArrayList.Capacity%2A>, kapacitet hos den <xref:System.Collections.ArrayList>ökas genom att omfördela automatiskt den interna matrisen för att anpassa de nya elementen och befintliga element kopieras till den nya matrisen innan de nya elementen läggs.</xref:System.Collections.ArrayList> </xref:System.Collections.ArrayList.Capacity%2A> </xref:System.Collections.ArrayList.Count%2A> </xref:System.Collections.ArrayList.Count%2A>       Om `index` är lika med <xref:System.Collections.ArrayList.Count%2A>, elementen läggs till i slutet av <xref:System.Collections.ArrayList>.</xref:System.Collections.ArrayList> </xref:System.Collections.ArrayList.Count%2A>       Ordningen på elementen i <xref:System.Collections.ICollection>bevaras i <xref:System.Collections.ArrayList>.</xref:System.Collections.ArrayList> </xref:System.Collections.ICollection>       Hantera nya element i samlingar av angränsande element, som visar de element som följer insättningspunkten Flytta ned till. Om samlingen är indexerad, uppdateras även indexen för element som flyttas. Det här problemet gäller inte för samlingar där element begreppsmässigt är grupperade i buckets, till exempel en hash-tabell.       Den här metoden är en O (`n` + `m`) igen, där `n` är antalet element som ska läggas till och `m` är <xref:System.Collections.ArrayList.Count%2A>.</xref:System.Collections.ArrayList.Count%2A>"
  example:
  - "The following code example shows how to insert elements into the <xref:System.Collections.ArrayList>.  \n  \n [!code-cs[Classic ArrayList.Insert Example#1](~/add/codesnippet/csharp/2b051d32-7260-4f65-b4d6-_1.cs)]\n [!code-vb[Classic ArrayList.Insert Example#1](~/add/codesnippet/visualbasic/2b051d32-7260-4f65-b4d6-_1.vb)]\n [!code-cpp[Classic ArrayList.Insert Example#1](~/add/codesnippet/cpp/2b051d32-7260-4f65-b4d6-_1.cpp)]"
  syntax:
    content: public virtual void InsertRange (int index, System.Collections.ICollection c);
    parameters:
    - id: index
      type: System.Int32
      description: "Det nollbaserade indexet som de nya elementen ska infogas."
    - id: c
      type: System.Collections.ICollection
      description: "Den <xref:System.Collections.ICollection>vars element ska infogas i den <xref href=&quot;System.Collections.ArrayList&quot;> </xref>.</xref:System.Collections.ICollection> Samlingen själv kan inte vara <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>, men det kan innehålla element som är <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  overload: System.Collections.ArrayList.InsertRange*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>c</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>index</code>är mindre än noll.       - eller - <code>index</code> är större än <xref:System.Collections.ArrayList.Count*>."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "Den <xref href=&quot;System.Collections.ArrayList&quot;> </xref> är skrivskyddad.       - eller - <xref href=&quot;System.Collections.ArrayList&quot;> </xref> har en fast storlek."
  platform:
  - net462
- uid: System.Collections.ArrayList.IsFixedSize
  id: IsFixedSize
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: IsFixedSize
  nameWithType: ArrayList.IsFixedSize
  fullName: System.Collections.ArrayList.IsFixedSize
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Hämtar ett värde som anger om den <xref href=&quot;System.Collections.ArrayList&quot;> </xref> har en fast storlek."
  remarks: "En samling med en fast storlek kan inte tillägg eller borttagning av element när samlingen har skapats, men det gör ändringar av befintliga element.       En samling med en fast storlek är helt enkelt en samling med en wrapper som förhindrar att lägga till och ta bort element. därför visar ändringar har gjorts i den underliggande mängden, inklusive tillägg eller borttagning av element, ändringarna på samlingen fast storlek.       Hämtar värdet för den här egenskapen är en O(1)-åtgärd."
  example:
  - "The following code example shows how to create a fixed-size wrapper around an <xref:System.Collections.ArrayList>.  \n  \n [!code-cs[Classic ArrayList.IsFixedSize Example#1](~/add/codesnippet/csharp/p-system.collections.arr_2_1.cs)]\n [!code-vb[Classic ArrayList.IsFixedSize Example#1](~/add/codesnippet/visualbasic/p-system.collections.arr_2_1.vb)]\n [!code-cpp[Classic ArrayList.IsFixedSize Example#1](~/add/codesnippet/cpp/p-system.collections.arr_2_1.cpp)]"
  syntax:
    content: public virtual bool IsFixedSize { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Om den <xref href=&quot;System.Collections.ArrayList&quot;> </xref> har en fast storlek, i annat fall <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. Standardvärdet är <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Collections.ArrayList.IsFixedSize*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.ArrayList.IsReadOnly
  id: IsReadOnly
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: IsReadOnly
  nameWithType: ArrayList.IsReadOnly
  fullName: System.Collections.ArrayList.IsReadOnly
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Hämtar ett värde som anger om den <xref href=&quot;System.Collections.ArrayList&quot;> </xref> är skrivskyddad."
  remarks: "En samling som är skrivskyddat tillåter inte att tillägg, borttagning eller ändring av element när samlingen har skapats.       En samling som är skrivskyddad är helt enkelt en samling med en wrapper som förhindrar att ändra samlingen; Om ändringar görs i den underliggande mängden visar därför skrivskyddad samling ändringarna.       Hämtar värdet för den här egenskapen är en O(1)-åtgärd."
  example:
  - "The following code example shows how to create a read-only wrapper around an <xref:System.Collections.ArrayList> and how to determine if an <xref:System.Collections.ArrayList> is read-only.  \n  \n [!code-cs[Classic ArrayList.ReadOnly1 Example#1](~/add/codesnippet/csharp/p-system.collections.arr_3_1.cs)]\n [!code-cpp[Classic ArrayList.ReadOnly1 Example#1](~/add/codesnippet/cpp/p-system.collections.arr_3_1.cpp)]\n [!code-vb[Classic ArrayList.ReadOnly1 Example#1](~/add/codesnippet/visualbasic/p-system.collections.arr_3_1.vb)]"
  syntax:
    content: public virtual bool IsReadOnly { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Om den <xref href=&quot;System.Collections.ArrayList&quot;> </xref> är skrivskyddad, annars <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. Standardvärdet är <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Collections.ArrayList.IsReadOnly*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.ArrayList.IsSynchronized
  id: IsSynchronized
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: IsSynchronized
  nameWithType: ArrayList.IsSynchronized
  fullName: System.Collections.ArrayList.IsSynchronized
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Hämtar ett värde som anger om åtkomst till den <xref href=&quot;System.Collections.ArrayList&quot;> </xref> är synkroniserade (trådsäkra)."
  remarks: "Att garantera säkerhet tråd i <xref:System.Collections.ArrayList>, alla åtgärder måste utföras via adapterprogram returneras av den <xref:System.Collections.ArrayList.Synchronized%2A>metoden.</xref:System.Collections.ArrayList.Synchronized%2A> </xref:System.Collections.ArrayList>       Uppräkning av en samling är är inte en trådsäker procedur. Även när en samling har synkroniserats, kan andra trådar ändå ändra samlingen, vilket gör att uppräknaren att utlösa ett undantag. För att garantera tråd under uppräkning, kan du låsa samlingen under hela uppräkning eller fånga undantag som uppstår till följd av ändringar som gjorts av andra trådar."
  example:
  - "The following code example shows how to lock the collection using the <xref:System.Collections.ArrayList.SyncRoot%2A> during the entire enumeration.  \n  \n [!code-cpp[Classic ArrayList.IsSynchronized Example#2](~/add/codesnippet/cpp/p-system.collections.arr_0_1.cpp)]\n [!code-vb[Classic ArrayList.IsSynchronized Example#2](~/add/codesnippet/visualbasic/p-system.collections.arr_0_1.vb)]\n [!code-cs[Classic ArrayList.IsSynchronized Example#2](~/add/codesnippet/csharp/p-system.collections.arr_0_1.cs)]  \n  \n Retrieving the value of this property is an O(1) operation.  \n  \n The following code example shows how to synchronize an <xref:System.Collections.ArrayList>, determine if an <xref:System.Collections.ArrayList> is synchronized and use a synchronized <xref:System.Collections.ArrayList>.  \n  \n [!code-vb[Classic ArrayList.IsSynchronized Example#1](~/add/codesnippet/visualbasic/p-system.collections.arr_0_2.vb)]\n [!code-cpp[Classic ArrayList.IsSynchronized Example#1](~/add/codesnippet/cpp/p-system.collections.arr_0_2.cpp)]\n [!code-cs[Classic ArrayList.IsSynchronized Example#1](~/add/codesnippet/csharp/p-system.collections.arr_0_2.cs)]"
  syntax:
    content: public virtual bool IsSynchronized { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Om åtkomst till den <xref href=&quot;System.Collections.ArrayList&quot;> </xref> är synkroniserade (trådsäkra); annars <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. Standardvärdet är <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Collections.ArrayList.IsSynchronized*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.ArrayList.Item(System.Int32)
  id: Item(System.Int32)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: Item(Int32)
  nameWithType: ArrayList.Item(Int32)
  fullName: System.Collections.ArrayList.Item(Int32)
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Hämtar eller anger elementet med det angivna indexet."
  remarks: "Elementet returnerar en <xref:System.Object>så du kan behöva konvertera värdet som returneras till den ursprungliga typ för att ändra det.</xref:System.Object> Det är viktigt att notera att <xref:System.Collections.ArrayList>inte är en strikt typad mängd.</xref:System.Collections.ArrayList> En resursklass med strikt typkontroll alternativ finns <xref:System.Collections.Generic.List%601>.</xref:System.Collections.Generic.List%601>       <xref:System.Collections.ArrayList>accepterar `null` som ett giltigt värde och tillåter dubblettelement.</xref:System.Collections.ArrayList>       Den här egenskapen ger möjlighet att komma åt ett visst element i samlingen med följande syntax: `myCollection[index]`.       C#-språk använder nyckelordet för att definiera indexerare i stället för att implementera egenskapen Item. Visual Basic implementerar objektet som en default-egenskap som innehåller samma funktion för indexering.       Hämtar värdet för den här egenskapen är O(1) åtgärd. Egenskapen är också en O(1)-åtgärd."
  example:
  - "The following code example creates an <xref:System.Collections.ArrayList> and adds several items. The example demonstrates accessing elements with the Item property (the indexer in C#), and changing an element by assigning a new value to the Item property for a specified index. The example also shows that the Item property cannot be used to access or add elements outside the current size of the list.  \n  \n [!code-cpp[System.Collections.ArrayList.Item#1](~/add/codesnippet/cpp/p-system.collections.arr_1_1.cpp)]\n [!code-cs[System.Collections.ArrayList.Item#1](~/add/codesnippet/csharp/p-system.collections.arr_1_1.cs)]\n [!code-vb[System.Collections.ArrayList.Item#1](~/add/codesnippet/visualbasic/p-system.collections.arr_1_1.vb)]  \n  \n The following example uses the Item property explicitly to assign values to items in the list. The example defines a class that inherits an <xref:System.Collections.ArrayList> and adds a method to scramble the list items.  \n  \n [!code-cpp[System.Collections.ArrayList.Item#2](~/add/codesnippet/cpp/p-system.collections.arr_1_2.cpp)]\n [!code-vb[System.Collections.ArrayList.Item#2](~/add/codesnippet/visualbasic/p-system.collections.arr_1_2.vb)]\n [!code-cs[System.Collections.ArrayList.Item#2](~/add/codesnippet/csharp/p-system.collections.arr_1_2.cs)]"
  syntax:
    content: public virtual object this[int index] { get; set; }
    parameters:
    - id: index
      type: System.Int32
      description: "Det nollbaserade indexet för elementet du vill hämta eller ange."
    return:
      type: System.Object
      description: "Element med det angivna indexet."
  overload: System.Collections.ArrayList.Item*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>index</code>är mindre än noll.       - eller - <code>index</code> är lika med eller större än <xref:System.Collections.ArrayList.Count*>."
  platform:
  - net462
- uid: System.Collections.ArrayList.LastIndexOf(System.Object)
  id: LastIndexOf(System.Object)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: LastIndexOf(Object)
  nameWithType: ArrayList.LastIndexOf(Object)
  fullName: System.Collections.ArrayList.LastIndexOf(Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Söker efter den angivna <xref:System.Object>och returnerar det nollbaserade indexet för den sista förekomsten inom hela <xref href=&quot;System.Collections.ArrayList&quot;> </xref>.</xref:System.Object>"
  remarks: "Den <xref:System.Collections.ArrayList>genomsöks bakåt börjar på det sista elementet och slutar på det första elementet.</xref:System.Collections.ArrayList>       Den här metoden utförs en linjär sökning. den här metoden är därför en O (`n`) igen, där `n` är <xref:System.Collections.ArrayList.Count%2A>.</xref:System.Collections.ArrayList.Count%2A>       Från och med .NET Framework 2.0 kan den här metoden använder den samling objekt <xref:System.Object.Equals%2A>och <xref:System.IComparable.CompareTo%2A>metoder i `item` att avgöra om det finns objekt.</xref:System.IComparable.CompareTo%2A> </xref:System.Object.Equals%2A> I tidigare versioner av .NET Framework gjordes detta genom att använda den <xref:System.Object.Equals%2A>och <xref:System.IComparable.CompareTo%2A>metoder för den `item` parameter på objekten i samlingen.</xref:System.IComparable.CompareTo%2A> </xref:System.Object.Equals%2A>"
  example:
  - "The following code example shows how to determine the index of the last occurrence of a specified element.  \n  \n [!code-cpp[Classic ArrayList.LastIndexOf Example#1](~/add/codesnippet/cpp/m-system.collections.arr_14_1.cpp)]\n [!code-cs[Classic ArrayList.LastIndexOf Example#1](~/add/codesnippet/csharp/m-system.collections.arr_14_1.cs)]\n [!code-vb[Classic ArrayList.LastIndexOf Example#1](~/add/codesnippet/visualbasic/m-system.collections.arr_14_1.vb)]"
  syntax:
    content: public virtual int LastIndexOf (object value);
    parameters:
    - id: value
      type: System.Object
      description: "Den <xref:System.Object>att hitta i den <xref href=&quot;System.Collections.ArrayList&quot;> </xref>.</xref:System.Object> Värdet kan vara <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
    return:
      type: System.Int32
      description: "Det nollbaserade indexet för den sista förekomsten av <code> value </code> inom hela den <xref href=&quot;System.Collections.ArrayList&quot;> </xref>om hittas, i annat fall -1."
  overload: System.Collections.ArrayList.LastIndexOf*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.ArrayList.LastIndexOf(System.Object,System.Int32)
  id: LastIndexOf(System.Object,System.Int32)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: LastIndexOf(Object,Int32)
  nameWithType: ArrayList.LastIndexOf(Object,Int32)
  fullName: System.Collections.ArrayList.LastIndexOf(Object,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Söker efter den angivna <xref:System.Object>och returnerar det nollbaserade indexet för den sista förekomsten inom intervallet för element i den <xref href=&quot;System.Collections.ArrayList&quot;> </xref> som sträcker sig från det första elementet till det angivna indexet.</xref:System.Object>"
  remarks: "Den <xref:System.Collections.ArrayList>är eftersökt bakåt börjar vid `startIndex` och slutar på det första elementet.</xref:System.Collections.ArrayList>       Den här metoden utförs en linjär sökning. den här metoden är därför en O (`n`) igen, där `n` är antalet element från början av den <xref:System.Collections.ArrayList>till `startIndex`.</xref:System.Collections.ArrayList>       Den här metoden anger likheten genom att anropa <xref:System.Object.Equals%2A?displayProperty=fullName>.</xref:System.Object.Equals%2A?displayProperty=fullName>       Från och med .NET Framework 2.0 kan den här metoden använder den samling objekt <xref:System.Object.Equals%2A>och <xref:System.IComparable.CompareTo%2A>metoder i `item` att avgöra om det finns objekt.</xref:System.IComparable.CompareTo%2A> </xref:System.Object.Equals%2A> I tidigare versioner av .NET Framework gjordes detta genom att använda den <xref:System.Object.Equals%2A>och <xref:System.IComparable.CompareTo%2A>metoder för den `item` parameter på objekten i samlingen.</xref:System.IComparable.CompareTo%2A> </xref:System.Object.Equals%2A>"
  example:
  - "The following code example shows how to determine the index of the last occurrence of a specified element.  \n  \n [!code-cpp[Classic ArrayList.LastIndexOf Example#1](~/add/codesnippet/cpp/m-system.collections.arr_26_1.cpp)]\n [!code-cs[Classic ArrayList.LastIndexOf Example#1](~/add/codesnippet/csharp/m-system.collections.arr_26_1.cs)]\n [!code-vb[Classic ArrayList.LastIndexOf Example#1](~/add/codesnippet/visualbasic/m-system.collections.arr_26_1.vb)]"
  syntax:
    content: public virtual int LastIndexOf (object value, int startIndex);
    parameters:
    - id: value
      type: System.Object
      description: "Den <xref:System.Object>att hitta i den <xref href=&quot;System.Collections.ArrayList&quot;> </xref>.</xref:System.Object> Värdet kan vara <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
    - id: startIndex
      type: System.Int32
      description: "Det första nollbaserade indexet för bakåt sökningen."
    return:
      type: System.Int32
      description: "Det nollbaserade indexet för den sista förekomsten av <code> value </code> inom intervallet för element i den <xref href=&quot;System.Collections.ArrayList&quot;> </xref> som sträcker sig från det första elementet som <code> startIndex </code>om hittas, i annat fall -1."
  overload: System.Collections.ArrayList.LastIndexOf*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>startIndex</code>ligger utanför intervallet med giltiga index för den <xref href=&quot;System.Collections.ArrayList&quot;> </xref>."
  platform:
  - net462
- uid: System.Collections.ArrayList.LastIndexOf(System.Object,System.Int32,System.Int32)
  id: LastIndexOf(System.Object,System.Int32,System.Int32)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: LastIndexOf(Object,Int32,Int32)
  nameWithType: ArrayList.LastIndexOf(Object,Int32,Int32)
  fullName: System.Collections.ArrayList.LastIndexOf(Object,Int32,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Söker efter den angivna <xref:System.Object>och returnerar det nollbaserade indexet för den sista förekomsten inom intervallet för element i den <xref href=&quot;System.Collections.ArrayList&quot;> </xref> som innehåller det angivna antalet element och slutar med det angivna indexet.</xref:System.Object>"
  remarks: "Den <xref:System.Collections.ArrayList>är eftersökt bakåt inleder `startIndex` och avslutas med `startIndex` minus `count` plus 1, om `count` är större än 0.</xref:System.Collections.ArrayList>       Den här metoden utförs en linjär sökning. den här metoden är därför en O (`n`) igen, där `n` är `count`.       Den här metoden anger likheten genom att anropa <xref:System.Object.Equals%2A?displayProperty=fullName>.</xref:System.Object.Equals%2A?displayProperty=fullName>       Från och med .NET Framework 2.0 kan den här metoden använder den samling objekt <xref:System.Object.Equals%2A>och <xref:System.IComparable.CompareTo%2A>metoder i `item` att avgöra om det finns objekt.</xref:System.IComparable.CompareTo%2A> </xref:System.Object.Equals%2A> I tidigare versioner av .NET Framework gjordes detta genom att använda den <xref:System.Object.Equals%2A>och <xref:System.IComparable.CompareTo%2A>metoder för den `item` parameter på objekten i samlingen.</xref:System.IComparable.CompareTo%2A> </xref:System.Object.Equals%2A>"
  example:
  - "The following code example shows how to determine the index of the last occurrence of a specified element. Note that `LastIndexOf` is a backward search; therefore, `count` must be less than or equal to `startIndex` + 1.  \n  \n [!code-cpp[Classic ArrayList.LastIndexOf Example#1](~/add/codesnippet/cpp/62fe9219-7086-43ad-b565-_1.cpp)]\n [!code-cs[Classic ArrayList.LastIndexOf Example#1](~/add/codesnippet/csharp/62fe9219-7086-43ad-b565-_1.cs)]\n [!code-vb[Classic ArrayList.LastIndexOf Example#1](~/add/codesnippet/visualbasic/62fe9219-7086-43ad-b565-_1.vb)]"
  syntax:
    content: public virtual int LastIndexOf (object value, int startIndex, int count);
    parameters:
    - id: value
      type: System.Object
      description: "Den <xref:System.Object>att hitta i den <xref href=&quot;System.Collections.ArrayList&quot;> </xref>.</xref:System.Object> Värdet kan vara <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
    - id: startIndex
      type: System.Int32
      description: "Det första nollbaserade indexet för bakåt sökningen."
    - id: count
      type: System.Int32
      description: "Antalet element i avsnittet för att söka efter."
    return:
      type: System.Int32
      description: "Det nollbaserade indexet för den sista förekomsten av <code> value </code> inom intervallet för element i den <xref href=&quot;System.Collections.ArrayList&quot;> </xref> som innehåller <code> count </code> antal element och slutar vid <code> startIndex </code>om hittas, i annat fall -1."
  overload: System.Collections.ArrayList.LastIndexOf*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>startIndex</code>ligger utanför intervallet med giltiga index för den <xref href=&quot;System.Collections.ArrayList&quot;> </xref>.       - eller - <code>count</code> är mindre än noll.       - eller - <code>startIndex</code> och <code>count</code> Ange inte ett giltigt avsnitt i den <xref href=&quot;System.Collections.ArrayList&quot;> </xref>."
  platform:
  - net462
- uid: System.Collections.ArrayList.ReadOnly(System.Collections.ArrayList)
  id: ReadOnly(System.Collections.ArrayList)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: ReadOnly(ArrayList)
  nameWithType: ArrayList.ReadOnly(ArrayList)
  fullName: System.Collections.ArrayList.ReadOnly(ArrayList)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Returnerar en skrivskyddad <xref href=&quot;System.Collections.ArrayList&quot;> </xref> omslutning."
  remarks: "För att förhindra alla ändringar `list`, exponera `list` endast via denna omslutning.       En samling som är skrivskyddad är helt enkelt en samling med en wrapper som förhindrar att ändra samlingen. Om ändringar görs i den underliggande mängden återspeglar dessa ändringar i skrivskyddad samling.       Den här metoden är en O(1)-åtgärd."
  example:
  - "The following code example shows how to create a read-only wrapper around an <xref:System.Collections.ArrayList> and how to determine if an <xref:System.Collections.ArrayList> is read-only.  \n  \n [!code-cs[Classic ArrayList.ReadOnly1 Example#1](~/add/codesnippet/csharp/m-system.collections.arr_9_1.cs)]\n [!code-cpp[Classic ArrayList.ReadOnly1 Example#1](~/add/codesnippet/cpp/m-system.collections.arr_9_1.cpp)]\n [!code-vb[Classic ArrayList.ReadOnly1 Example#1](~/add/codesnippet/visualbasic/m-system.collections.arr_9_1.vb)]"
  syntax:
    content: public static System.Collections.ArrayList ReadOnly (System.Collections.ArrayList list);
    parameters:
    - id: list
      type: System.Collections.ArrayList
      description: "Den <xref href=&quot;System.Collections.ArrayList&quot;> </xref> ska radbrytas."
    return:
      type: System.Collections.ArrayList
      description: "En skrivskyddad <xref href=&quot;System.Collections.ArrayList&quot;> </xref> wrapper runt <code> list </code>."
  overload: System.Collections.ArrayList.ReadOnly*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>list</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Collections.ArrayList.ReadOnly(System.Collections.IList)
  id: ReadOnly(System.Collections.IList)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: ReadOnly(IList)
  nameWithType: ArrayList.ReadOnly(IList)
  fullName: System.Collections.ArrayList.ReadOnly(IList)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Returnerar en skrivskyddad <xref:System.Collections.IList>Omslutning.</xref:System.Collections.IList>"
  remarks: "För att förhindra alla ändringar `list`, exponera `list` endast via denna omslutning.       En samling som är skrivskyddad är helt enkelt en samling med en wrapper som förhindrar att ändra samlingen. Om ändringar görs i den underliggande mängden återspeglar dessa ändringar i skrivskyddad samling.       Den här metoden är en O(1)-åtgärd."
  syntax:
    content: public static System.Collections.IList ReadOnly (System.Collections.IList list);
    parameters:
    - id: list
      type: System.Collections.IList
      description: "Den <xref:System.Collections.IList>du omsluter.</xref:System.Collections.IList>"
    return:
      type: System.Collections.IList
      description: "En skrivskyddad <xref:System.Collections.IList>wrapper runt <code> list </code>.</xref:System.Collections.IList>"
  overload: System.Collections.ArrayList.ReadOnly*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>list</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Collections.ArrayList.Remove(System.Object)
  id: Remove(System.Object)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: Remove(Object)
  nameWithType: ArrayList.Remove(Object)
  fullName: System.Collections.ArrayList.Remove(Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Tar bort den första förekomsten av ett specifikt objekt från den <xref href=&quot;System.Collections.ArrayList&quot;> </xref>."
  remarks: "Om den <xref:System.Collections.ArrayList>innehåller inte det angivna objektet i <xref:System.Collections.ArrayList>förblir oförändrad.</xref:System.Collections.ArrayList> </xref:System.Collections.ArrayList> Inget undantag genereras.       Den här metoden utförs en linjär sökning. den här metoden är därför en O (`n`) igen, där `n` är <xref:System.Collections.ArrayList.Count%2A>.</xref:System.Collections.ArrayList.Count%2A>       Den här metoden anger likheten genom att anropa <xref:System.Object.Equals%2A?displayProperty=fullName>.</xref:System.Object.Equals%2A?displayProperty=fullName>       Element som följer efter elementet borttagna flytta uppta vacated plats i samlingar med sammanhängande element, till exempel listor. Om samlingen är indexerad, uppdateras även indexen för element som flyttas. Det här problemet gäller inte för samlingar där element begreppsmässigt är grupperade i buckets, till exempel en hash-tabell."
  example:
  - "The following code example shows how to remove elements from the <xref:System.Collections.ArrayList>.  \n  \n [!code-cpp[Classic ArrayList.Remove Example#1](~/add/codesnippet/cpp/m-system.collections.arr_5_1.cpp)]\n [!code-vb[Classic ArrayList.Remove Example#1](~/add/codesnippet/visualbasic/m-system.collections.arr_5_1.vb)]\n [!code-cs[Classic ArrayList.Remove Example#1](~/add/codesnippet/csharp/m-system.collections.arr_5_1.cs)]"
  syntax:
    content: public virtual void Remove (object obj);
    parameters:
    - id: obj
      type: System.Object
      description: "Den <xref:System.Object>att ta bort från den <xref href=&quot;System.Collections.ArrayList&quot;> </xref>.</xref:System.Object> Värdet kan vara <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  overload: System.Collections.ArrayList.Remove*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "Den <xref href=&quot;System.Collections.ArrayList&quot;> </xref> är skrivskyddad.       - eller - <xref href=&quot;System.Collections.ArrayList&quot;> </xref> har en fast storlek."
  platform:
  - net462
- uid: System.Collections.ArrayList.RemoveAt(System.Int32)
  id: RemoveAt(System.Int32)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: RemoveAt(Int32)
  nameWithType: ArrayList.RemoveAt(Int32)
  fullName: System.Collections.ArrayList.RemoveAt(Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Ta bort element med det angivna indexet för den <xref href=&quot;System.Collections.ArrayList&quot;> </xref>."
  remarks: "Mängdens storlek justeras efter elementet tas bort, och värdet för den <xref:System.Collections.ArrayList.Count%2A>minskar med en egenskap.</xref:System.Collections.ArrayList.Count%2A>       Element som följer efter elementet borttagna flytta uppta vacated plats i samlingar med sammanhängande element, till exempel listor. Om samlingen är indexerad, uppdateras även indexen för element som flyttas. Det här problemet gäller inte för samlingar där element begreppsmässigt är grupperade i buckets, till exempel en hash-tabell.       Den här metoden är en O (`n`) igen, där `n` är <xref:System.Collections.ArrayList.Count%2A>.</xref:System.Collections.ArrayList.Count%2A>"
  example:
  - "The following code example shows how to remove elements from the <xref:System.Collections.ArrayList>.  \n  \n [!code-cpp[Classic ArrayList.Remove Example#1](~/add/codesnippet/cpp/m-system.collections.arr_24_1.cpp)]\n [!code-vb[Classic ArrayList.Remove Example#1](~/add/codesnippet/visualbasic/m-system.collections.arr_24_1.vb)]\n [!code-cs[Classic ArrayList.Remove Example#1](~/add/codesnippet/csharp/m-system.collections.arr_24_1.cs)]"
  syntax:
    content: public virtual void RemoveAt (int index);
    parameters:
    - id: index
      type: System.Int32
      description: "Det nollbaserade indexet för elementet du vill ta bort."
  overload: System.Collections.ArrayList.RemoveAt*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>index</code>är mindre än noll.       - eller - <code>index</code> är lika med eller större än <xref:System.Collections.ArrayList.Count*>."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "Den <xref href=&quot;System.Collections.ArrayList&quot;> </xref> är skrivskyddad.       - eller - <xref href=&quot;System.Collections.ArrayList&quot;> </xref> har en fast storlek."
  platform:
  - net462
- uid: System.Collections.ArrayList.RemoveRange(System.Int32,System.Int32)
  id: RemoveRange(System.Int32,System.Int32)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: RemoveRange(Int32,Int32)
  nameWithType: ArrayList.RemoveRange(Int32,Int32)
  fullName: System.Collections.ArrayList.RemoveRange(Int32,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Tar bort ett adressintervall element från den <xref href=&quot;System.Collections.ArrayList&quot;> </xref>."
  remarks: "Element som följer efter elementet borttagna flytta uppta vacated plats i samlingar med sammanhängande element, till exempel listor. Om samlingen är indexerad, uppdateras även indexen för element som flyttas. Det här problemet gäller inte för samlingar där element begreppsmässigt är grupperade i buckets, till exempel en hash-tabell.       Den här metoden är en O (`n`) igen, där `n` är <xref:System.Collections.ArrayList.Count%2A>.</xref:System.Collections.ArrayList.Count%2A>"
  example:
  - "The following code example shows how to remove elements from the <xref:System.Collections.ArrayList>.  \n  \n [!code-cpp[Classic ArrayList.Remove Example#1](~/add/codesnippet/cpp/m-system.collections.arr_21_1.cpp)]\n [!code-vb[Classic ArrayList.Remove Example#1](~/add/codesnippet/visualbasic/m-system.collections.arr_21_1.vb)]\n [!code-cs[Classic ArrayList.Remove Example#1](~/add/codesnippet/csharp/m-system.collections.arr_21_1.cs)]"
  syntax:
    content: public virtual void RemoveRange (int index, int count);
    parameters:
    - id: index
      type: System.Int32
      description: "Antal element att ta bort nollbaserade startIndex."
    - id: count
      type: System.Int32
      description: "Antalet element ska tas bort."
  overload: System.Collections.ArrayList.RemoveRange*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>index</code>är mindre än noll.       - eller - <code>count</code> är mindre än noll."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>index</code>och <code>count</code> inte ange ett giltigt intervall för element i den <xref href=&quot;System.Collections.ArrayList&quot;> </xref>."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "Den <xref href=&quot;System.Collections.ArrayList&quot;> </xref> är skrivskyddad.       - eller - <xref href=&quot;System.Collections.ArrayList&quot;> </xref> har en fast storlek."
  platform:
  - net462
- uid: System.Collections.ArrayList.Repeat(System.Object,System.Int32)
  id: Repeat(System.Object,System.Int32)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: Repeat(Object,Int32)
  nameWithType: ArrayList.Repeat(Object,Int32)
  fullName: System.Collections.ArrayList.Repeat(Object,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Returnerar en <xref href=&quot;System.Collections.ArrayList&quot;> </xref> vars element är kopior av det angivna värdet."
  remarks: "<xref:System.Collections.ArrayList>accepterar `null` som ett giltigt värde och tillåter dubblettelement.</xref:System.Collections.ArrayList>       Den här metoden är en O (`n`) igen, där `n` är `count`."
  example:
  - "The following code example shows how to create and initialize a new <xref:System.Collections.ArrayList> with the same value.  \n  \n [!code-cpp[Classic ArrayList.Repeat Example#1](~/add/codesnippet/cpp/m-system.collections.arr_1_1.cpp)]\n [!code-cs[Classic ArrayList.Repeat Example#1](~/add/codesnippet/csharp/m-system.collections.arr_1_1.cs)]\n [!code-vb[Classic ArrayList.Repeat Example#1](~/add/codesnippet/visualbasic/m-system.collections.arr_1_1.vb)]"
  syntax:
    content: public static System.Collections.ArrayList Repeat (object value, int count);
    parameters:
    - id: value
      type: System.Object
      description: "Den <xref:System.Object>att kopiera flera gånger i den nya <xref href=&quot;System.Collections.ArrayList&quot;> </xref>.</xref:System.Object> Värdet kan vara <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
    - id: count
      type: System.Int32
      description: "Antalet gånger `value` ska kopieras."
    return:
      type: System.Collections.ArrayList
      description: "En <xref href=&quot;System.Collections.ArrayList&quot;> </xref> med <code> count </code> antal element, som är kopior av <code> value </code>."
  overload: System.Collections.ArrayList.Repeat*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>count</code>är mindre än noll."
  platform:
  - net462
- uid: System.Collections.ArrayList.Reverse
  id: Reverse
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: Reverse()
  nameWithType: ArrayList.Reverse()
  fullName: System.Collections.ArrayList.Reverse()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Byt till omvänd ordning element i hela <xref href=&quot;System.Collections.ArrayList&quot;> </xref>."
  remarks: "Den här metoden använder <xref:System.Array.Reverse%2A?displayProperty=fullName>att vända på ordningen på elementen så att elementet i <xref:System.Collections.ArrayList>[i] där i är ett index inom intervallet flyttar till <xref:System.Collections.ArrayList>[j], där j är lika med `index`  +  `index`  +  `count` - i - 1.</xref:System.Collections.ArrayList> </xref:System.Collections.ArrayList> </xref:System.Array.Reverse%2A?displayProperty=fullName>       Den här metoden är en O (`n`) igen, där `n` är <xref:System.Collections.ArrayList.Count%2A>.</xref:System.Collections.ArrayList.Count%2A>"
  example:
  - "The following code example shows how to reverse the sort order of the values in an <xref:System.Collections.ArrayList>.  \n  \n [!code-cs[Classic ArrayList.Reverse Example#1](~/add/codesnippet/csharp/m-system.collections.arr_20_1.cs)]\n [!code-cpp[Classic ArrayList.Reverse Example#1](~/add/codesnippet/cpp/m-system.collections.arr_20_1.cpp)]\n [!code-vb[Classic ArrayList.Reverse Example#1](~/add/codesnippet/visualbasic/m-system.collections.arr_20_1.vb)]"
  syntax:
    content: public virtual void Reverse ();
    parameters: []
  overload: System.Collections.ArrayList.Reverse*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "Den <xref href=&quot;System.Collections.ArrayList&quot;> </xref> är skrivskyddad."
  platform:
  - net462
- uid: System.Collections.ArrayList.Reverse(System.Int32,System.Int32)
  id: Reverse(System.Int32,System.Int32)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: Reverse(Int32,Int32)
  nameWithType: ArrayList.Reverse(Int32,Int32)
  fullName: System.Collections.ArrayList.Reverse(Int32,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Byt till omvänd ordning element i det angivna intervallet."
  remarks: "Den här metoden använder <xref:System.Array.Reverse%2A?displayProperty=fullName>att vända på ordningen på elementen så att elementet i <xref:System.Collections.ArrayList>[i] där i är ett index inom intervallet flyttar till <xref:System.Collections.ArrayList>[j], där j är lika med `index`  +  `index`  +  `count` - i - 1.</xref:System.Collections.ArrayList> </xref:System.Collections.ArrayList> </xref:System.Array.Reverse%2A?displayProperty=fullName>       Den här metoden är en O (`n`) igen, där `n` är `count`."
  example:
  - "The following code example shows how to reverse the sort order of the values in a range of elements in an <xref:System.Collections.ArrayList>.  \n  \n [!code-cpp[Classic ArrayList.Reverse1 Example#1](~/add/codesnippet/cpp/m-system.collections.arr_3_1.cpp)]\n [!code-cs[Classic ArrayList.Reverse1 Example#1](~/add/codesnippet/csharp/m-system.collections.arr_3_1.cs)]\n [!code-vb[Classic ArrayList.Reverse1 Example#1](~/add/codesnippet/visualbasic/m-system.collections.arr_3_1.vb)]"
  syntax:
    content: public virtual void Reverse (int index, int count);
    parameters:
    - id: index
      type: System.Int32
      description: "Intervallet till omvänd nollbaserade startIndex."
    - id: count
      type: System.Int32
      description: "Antalet element i intervallet till omvänd."
  overload: System.Collections.ArrayList.Reverse*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>index</code>är mindre än noll.       - eller - <code>count</code> är mindre än noll."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>index</code>och <code>count</code> inte ange ett giltigt intervall för element i den <xref href=&quot;System.Collections.ArrayList&quot;> </xref>."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "Den <xref href=&quot;System.Collections.ArrayList&quot;> </xref> är skrivskyddad."
  platform:
  - net462
- uid: System.Collections.ArrayList.SetRange(System.Int32,System.Collections.ICollection)
  id: SetRange(System.Int32,System.Collections.ICollection)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: SetRange(Int32,ICollection)
  nameWithType: ArrayList.SetRange(Int32,ICollection)
  fullName: System.Collections.ArrayList.SetRange(Int32,ICollection)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Kopierar elementen i en samling via en mängd element i den <xref href=&quot;System.Collections.ArrayList&quot;> </xref>."
  remarks: "<xref:System.Collections.ArrayList>accepterar `null` som ett giltigt värde och tillåter dubblettelement.</xref:System.Collections.ArrayList>       Ordningen på elementen i <xref:System.Collections.ICollection>bevaras i <xref:System.Collections.ArrayList>.</xref:System.Collections.ArrayList> </xref:System.Collections.ICollection>       Den här metoden är en O (`n` + 1) åtgärden, där `n` är <xref:System.Collections.ArrayList.Count%2A>.</xref:System.Collections.ArrayList.Count%2A>"
  example:
  - "The following code example shows how to set and get a range of elements in the <xref:System.Collections.ArrayList>.  \n  \n [!code-cs[Classic ArrayList.SetRange Example#1](~/add/codesnippet/csharp/23e2a8fa-8e09-46ee-8256-_1.cs)]\n [!code-cpp[Classic ArrayList.SetRange Example#1](~/add/codesnippet/cpp/23e2a8fa-8e09-46ee-8256-_1.cpp)]\n [!code-vb[Classic ArrayList.SetRange Example#1](~/add/codesnippet/visualbasic/23e2a8fa-8e09-46ee-8256-_1.vb)]"
  syntax:
    content: public virtual void SetRange (int index, System.Collections.ICollection c);
    parameters:
    - id: index
      type: System.Int32
      description: "Det nollbaserade <xref href=&quot;System.Collections.ArrayList&quot;> </xref> index som du vill börja kopiera elementen i `c`."
    - id: c
      type: System.Collections.ICollection
      description: "Den <xref:System.Collections.ICollection>vars element ska kopieras till den <xref href=&quot;System.Collections.ArrayList&quot;> </xref>.</xref:System.Collections.ICollection> Samlingen själv kan inte vara <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>, men det kan innehålla element som är <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  overload: System.Collections.ArrayList.SetRange*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>index</code>är mindre än noll.       - eller - <code>index</code> plus antalet element i <code>c</code> är större än <xref:System.Collections.ArrayList.Count*>."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>c</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "Den <xref href=&quot;System.Collections.ArrayList&quot;> </xref> är skrivskyddad."
  platform:
  - net462
- uid: System.Collections.ArrayList.Sort
  id: Sort
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: Sort()
  nameWithType: ArrayList.Sort()
  fullName: System.Collections.ArrayList.Sort()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Sorterar elementen i hela <xref href=&quot;System.Collections.ArrayList&quot;> </xref>."
  remarks: "Den här metoden använder <xref:System.Array.Sort%2A?displayProperty=fullName>, som använder algoritmen QuickSort.</xref:System.Array.Sort%2A?displayProperty=fullName> QuickSort algoritmen är en jämförelse sortera (kallas även en instabil sortering), vilket innebär att ett &quot;mindre än eller lika med&quot; jämförelseoperationen avgör vilka av två element ska ske först i den slutliga sorterade listan. Men om två element är lika bevaras sin ursprungliga ordning inte. En stabil sortering bevarar däremot ordningen på elementen som är lika. Om du vill utföra en stabil sortering måste du implementera en anpassad <xref:System.Collections.IComparer>med andra överlagringar av den här metoden-gränssnittet.</xref:System.Collections.IComparer>       I genomsnitt den här metoden är en O (`n` loggen `n`) igen, där `n` är <xref:System.Collections.ArrayList.Count%2A>; i värsta fall är det en O (`n`^&2;) åtgärden.</xref:System.Collections.ArrayList.Count%2A>"
  example:
  - "The following code example shows how to sort the values in an <xref:System.Collections.ArrayList>.  \n  \n [!code-cs[Classic ArrayList.Sort Example#1](~/add/codesnippet/csharp/m-system.collections.arr_11_1.cs)]\n [!code-vb[Classic ArrayList.Sort Example#1](~/add/codesnippet/visualbasic/m-system.collections.arr_11_1.vb)]\n [!code-cpp[Classic ArrayList.Sort Example#1](~/add/codesnippet/cpp/m-system.collections.arr_11_1.cpp)]"
  syntax:
    content: public virtual void Sort ();
    parameters: []
  overload: System.Collections.ArrayList.Sort*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "Den <xref href=&quot;System.Collections.ArrayList&quot;> </xref> är skrivskyddad."
  platform:
  - net462
- uid: System.Collections.ArrayList.Sort(System.Collections.IComparer)
  id: Sort(System.Collections.IComparer)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: Sort(IComparer)
  nameWithType: ArrayList.Sort(IComparer)
  fullName: System.Collections.ArrayList.Sort(IComparer)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Sorterar elementen i hela <xref href=&quot;System.Collections.ArrayList&quot;> </xref> med hjälp av den angivna jämförelsefunktionen."
  remarks: "Använd metoden sortera för att sortera en lista med objekt med en anpassad Jämförelsefunktion som implementerar det <xref:System.Collections.IComparer>gränssnittet.</xref:System.Collections.IComparer> Om du skickar `null` för `comparer`, den här metoden använder den <xref:System.IComparable>implementeringen av varje element.</xref:System.IComparable> I det här fallet måste du se till att implementera de objekt som ingår i listan i <xref:System.Collections.IComparer>gränssnitt eller ett undantag inträffar.</xref:System.Collections.IComparer>       Dessutom använder den <xref:System.IComparable>genomförande innebär listan utför en jämförelse sortering (kallas även en instabil sortering), det vill säga om två element är lika ordningsföljden inte bevaras.</xref:System.IComparable> En stabil sortering bevarar däremot ordningen på elementen som är lika. Om du vill utföra en stabil sortering måste du implementera en anpassad <xref:System.Collections.IComparer>gränssnitt.</xref:System.Collections.IComparer>       I genomsnitt den här metoden är en O (`n` loggen `n`) igen, där `n` är <xref:System.Collections.ArrayList.Count%2A>; i värsta fall är det en O (`n`^&2;) åtgärden.</xref:System.Collections.ArrayList.Count%2A>"
  example:
  - "The following code example shows how to sort the values in an <xref:System.Collections.ArrayList> using the default comparer and a custom comparer that reverses the sort order.  \n  \n [!code-cpp[System.Collections.ArrayList.Sort_2#1](~/add/codesnippet/cpp/m-system.collections.arr_16_1.cpp)]\n [!code-cs[System.Collections.ArrayList.Sort_2#1](~/add/codesnippet/csharp/m-system.collections.arr_16_1.cs)]\n [!code-vb[System.Collections.ArrayList.Sort_2#1](~/add/codesnippet/visualbasic/m-system.collections.arr_16_1.vb)]"
  syntax:
    content: public virtual void Sort (System.Collections.IComparer comparer);
    parameters:
    - id: comparer
      type: System.Collections.IComparer
      description: "Den <xref:System.Collections.IComparer>implementering ska användas vid jämförelse av element.</xref:System.Collections.IComparer>       - eller - en null-referens (<xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref> i Visual Basic) att använda den <xref:System.IComparable>implementeringen av varje element.</xref:System.IComparable>"
  overload: System.Collections.ArrayList.Sort*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "Den <xref href=&quot;System.Collections.ArrayList&quot;> </xref> är skrivskyddad."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Ett fel uppstod när jämföra två element."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>har skickats för <code> comparer </code>, och elementen i listan inte implementerar <xref:System.IComparable>.</xref:System.IComparable>"
  platform:
  - net462
- uid: System.Collections.ArrayList.Sort(System.Int32,System.Int32,System.Collections.IComparer)
  id: Sort(System.Int32,System.Int32,System.Collections.IComparer)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: Sort(Int32,Int32,IComparer)
  nameWithType: ArrayList.Sort(Int32,Int32,IComparer)
  fullName: System.Collections.ArrayList.Sort(Int32,Int32,IComparer)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Sorterar element i en mängd element i <xref href=&quot;System.Collections.ArrayList&quot;> </xref> med hjälp av den angivna jämförelsefunktionen."
  remarks: "Om `comparer` är inställd på `null`, den här metoden utförs en jämförelse sortering (kallas även en instabil sortering), det vill säga om två element är lika ordningsföljden inte bevaras. En stabil sortering bevarar däremot ordningen på elementen som är lika. Om du vill utföra en stabil sortering måste du implementera en anpassad <xref:System.Collections.IComparer>gränssnitt.</xref:System.Collections.IComparer>       I genomsnitt den här metoden är en O (`n` loggen `n`) igen, där `n` är `count`; i värsta fall är det en O(n^2)-åtgärd."
  example:
  - "The following code example shows how to sort the values in a range of elements in an <xref:System.Collections.ArrayList> using the default comparer and a custom comparer that reverses the sort order.  \n  \n [!code-cpp[System.Collections.ArrayList.Sort_3#1](~/add/codesnippet/cpp/b0a7df76-2f5d-45d4-bb7a-_1.cpp)]\n [!code-cs[System.Collections.ArrayList.Sort_3#1](~/add/codesnippet/csharp/b0a7df76-2f5d-45d4-bb7a-_1.cs)]\n [!code-vb[System.Collections.ArrayList.Sort_3#1](~/add/codesnippet/visualbasic/b0a7df76-2f5d-45d4-bb7a-_1.vb)]"
  syntax:
    content: public virtual void Sort (int index, int count, System.Collections.IComparer comparer);
    parameters:
    - id: index
      type: System.Int32
      description: "Det första nollbaserade indexet för intervallet ska sorteras."
    - id: count
      type: System.Int32
      description: "Längden på intervallet ska sorteras."
    - id: comparer
      type: System.Collections.IComparer
      description: "Den <xref:System.Collections.IComparer>implementering ska användas vid jämförelse av element.</xref:System.Collections.IComparer>       - eller - en null-referens (<xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref> i Visual Basic) att använda den <xref:System.IComparable>implementeringen av varje element.</xref:System.IComparable>"
  overload: System.Collections.ArrayList.Sort*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>index</code>är mindre än noll.       - eller - <code>count</code> är mindre än noll."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>index</code>och <code>count</code> inte ange ett giltigt adressintervall i den <xref href=&quot;System.Collections.ArrayList&quot;> </xref>."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "Den <xref href=&quot;System.Collections.ArrayList&quot;> </xref> är skrivskyddad."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Ett fel uppstod när jämföra två element."
  platform:
  - net462
- uid: System.Collections.ArrayList.Synchronized(System.Collections.ArrayList)
  id: Synchronized(System.Collections.ArrayList)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: Synchronized(ArrayList)
  nameWithType: ArrayList.Synchronized(ArrayList)
  fullName: System.Collections.ArrayList.Synchronized(ArrayList)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Returnerar en <xref href=&quot;System.Collections.ArrayList&quot;> </xref> omslutning som är synkroniserade (trådsäkra)."
  remarks: "Att garantera säkerhet tråd i <xref:System.Collections.ArrayList>, alla åtgärder måste göras via den här omslutning.</xref:System.Collections.ArrayList>       Uppräkning av en samling är är inte en trådsäker procedur. Även när en samling har synkroniserats, kan andra trådar ändå ändra samlingen, vilket gör att uppräknaren att utlösa ett undantag. För att garantera tråd under uppräkning, kan du låsa samlingen under hela uppräkning eller fånga undantag som uppstår till följd av ändringar som gjorts av andra trådar."
  example:
  - "The following code example shows how to lock the collection using the <xref:System.Collections.ArrayList.SyncRoot%2A> during the entire enumeration.  \n  \n [!code-cpp[Classic ArrayList.IsSynchronized Example#2](~/add/codesnippet/cpp/m-system.collections.arr_25_1.cpp)]\n [!code-vb[Classic ArrayList.IsSynchronized Example#2](~/add/codesnippet/visualbasic/m-system.collections.arr_25_1.vb)]\n [!code-cs[Classic ArrayList.IsSynchronized Example#2](~/add/codesnippet/csharp/m-system.collections.arr_25_1.cs)]  \n  \n This method is an O(1) operation.  \n  \n The following code example shows how to synchronize an <xref:System.Collections.ArrayList>, determine if an <xref:System.Collections.ArrayList> is synchronized and use a synchronized <xref:System.Collections.ArrayList>.  \n  \n [!code-vb[Classic ArrayList.IsSynchronized Example#1](~/add/codesnippet/visualbasic/m-system.collections.arr_25_2.vb)]\n [!code-cpp[Classic ArrayList.IsSynchronized Example#1](~/add/codesnippet/cpp/m-system.collections.arr_25_2.cpp)]\n [!code-cs[Classic ArrayList.IsSynchronized Example#1](~/add/codesnippet/csharp/m-system.collections.arr_25_2.cs)]"
  syntax:
    content: public static System.Collections.ArrayList Synchronized (System.Collections.ArrayList list);
    parameters:
    - id: list
      type: System.Collections.ArrayList
      description: "Den <xref href=&quot;System.Collections.ArrayList&quot;> </xref> att synkronisera."
    return:
      type: System.Collections.ArrayList
      description: "En <xref href=&quot;System.Collections.ArrayList&quot;> </xref> omslutning som är synkroniserade (trådsäkra)."
  overload: System.Collections.ArrayList.Synchronized*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>list</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Collections.ArrayList.Synchronized(System.Collections.IList)
  id: Synchronized(System.Collections.IList)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: Synchronized(IList)
  nameWithType: ArrayList.Synchronized(IList)
  fullName: System.Collections.ArrayList.Synchronized(IList)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Returnerar en <xref:System.Collections.IList>omslutning som är synkroniserade (trådsäkra).</xref:System.Collections.IList>"
  remarks: "Att garantera säkerhet tråd i <xref:System.Collections.ArrayList>, alla åtgärder måste göras via den här omslutning.</xref:System.Collections.ArrayList>       Uppräkning av en samling är är inte en trådsäker procedur. Även när en samling har synkroniserats, kan andra trådar ändå ändra samlingen, vilket gör att uppräknaren att utlösa ett undantag. För att garantera tråd under uppräkning, kan du låsa samlingen under hela uppräkning eller fånga undantag som uppstår till följd av ändringar som gjorts av andra trådar."
  example:
  - "The following code example shows how to lock the collection using the <xref:System.Collections.ArrayList.SyncRoot%2A> during the entire enumeration.  \n  \n [!code-cpp[Classic ArrayList.IsSynchronized Example#2](~/add/codesnippet/cpp/m-system.collections.arr_23_1.cpp)]\n [!code-vb[Classic ArrayList.IsSynchronized Example#2](~/add/codesnippet/visualbasic/m-system.collections.arr_23_1.vb)]\n [!code-cs[Classic ArrayList.IsSynchronized Example#2](~/add/codesnippet/csharp/m-system.collections.arr_23_1.cs)]  \n  \n This method is an O(1) operation."
  syntax:
    content: public static System.Collections.IList Synchronized (System.Collections.IList list);
    parameters:
    - id: list
      type: System.Collections.IList
      description: "Den <xref:System.Collections.IList>att synkronisera.</xref:System.Collections.IList>"
    return:
      type: System.Collections.IList
      description: "En <xref:System.Collections.IList>omslutning som är synkroniserade (trådsäkra).</xref:System.Collections.IList>"
  overload: System.Collections.ArrayList.Synchronized*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>list</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Collections.ArrayList.SyncRoot
  id: SyncRoot
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: SyncRoot
  nameWithType: ArrayList.SyncRoot
  fullName: System.Collections.ArrayList.SyncRoot
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Hämtar ett objekt som kan användas för att synkronisera åtkomst till den <xref href=&quot;System.Collections.ArrayList&quot;> </xref>."
  remarks: "Så här skapar du en synkroniserade version av den <xref:System.Collections.ArrayList>, använda den <xref:System.Collections.ArrayList.Synchronized%2A>metoden.</xref:System.Collections.ArrayList.Synchronized%2A> </xref:System.Collections.ArrayList> Härledda klasser kan dock ge sina egna synkroniserade versionen av den <xref:System.Collections.ArrayList>med egenskapen SyncRoot.</xref:System.Collections.ArrayList> Synkronisera kod måste utföra åtgärder på SyncRoot av den <xref:System.Collections.ArrayList>, inte direkt på <xref:System.Collections.ArrayList>.</xref:System.Collections.ArrayList> </xref:System.Collections.ArrayList> Detta säkerställer att samlingar som är härledda från andra objekt ska fungera korrekt. Mer specifikt den upprätthåller rätt synkronisering med andra trådar samtidigt ändra den <xref:System.Collections.ArrayList>objekt.</xref:System.Collections.ArrayList>       Uppräkning av en samling är är inte en trådsäker procedur. Även när en samling har synkroniserats, kan andra trådar ändå ändra samlingen, vilket gör att uppräknaren att utlösa ett undantag. För att garantera tråd under uppräkning, kan du låsa samlingen under hela uppräkning eller fånga undantag som uppstår till följd av ändringar som gjorts av andra trådar."
  example:
  - "The following code example shows how to lock the collection using the SyncRoot during the entire enumeration.  \n  \n [!code-cpp[Classic ArrayList.IsSynchronized Example#2](~/add/codesnippet/cpp/p-system.collections.arr_4_1.cpp)]\n [!code-vb[Classic ArrayList.IsSynchronized Example#2](~/add/codesnippet/visualbasic/p-system.collections.arr_4_1.vb)]\n [!code-cs[Classic ArrayList.IsSynchronized Example#2](~/add/codesnippet/csharp/p-system.collections.arr_4_1.cs)]  \n  \n Retrieving the value of this property is an O(1) operation."
  syntax:
    content: public virtual object SyncRoot { get; }
    return:
      type: System.Object
      description: "Ett objekt som kan användas för att synkronisera åtkomst till den <xref href=&quot;System.Collections.ArrayList&quot;> </xref>."
  overload: System.Collections.ArrayList.SyncRoot*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.ArrayList.ToArray
  id: ToArray
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: ToArray()
  nameWithType: ArrayList.ToArray()
  fullName: System.Collections.ArrayList.ToArray()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Kopierar delarna av den <xref href=&quot;System.Collections.ArrayList&quot;> </xref> till en ny <xref:System.Object>matris.</xref:System.Object>"
  remarks: "Elementen kopieras med hjälp av <xref:System.Array.Copy%2A?displayProperty=fullName>, vilket är en O (`n`) igen, där `n` är <xref:System.Collections.ArrayList.Count%2A>.</xref:System.Collections.ArrayList.Count%2A> </xref:System.Array.Copy%2A?displayProperty=fullName>"
  syntax:
    content: public virtual object[] ToArray ();
    parameters: []
    return:
      type: System.Object[]
      description: "En <xref:System.Object>matris som innehåller kopior av elementen i den <xref href=&quot;System.Collections.ArrayList&quot;> </xref>.</xref:System.Object>"
  overload: System.Collections.ArrayList.ToArray*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.ArrayList.ToArray(System.Type)
  id: ToArray(System.Type)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: ToArray(Type)
  nameWithType: ArrayList.ToArray(Type)
  fullName: System.Collections.ArrayList.ToArray(Type)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Kopierar delarna av den <xref href=&quot;System.Collections.ArrayList&quot;> </xref> till en ny matris av typen för det angivna elementet."
  remarks: "Alla objekt i den <xref:System.Collections.ArrayList>kommer att omvandla objektet till den <xref:System.Type>anges i den `type` parameter.</xref:System.Type> </xref:System.Collections.ArrayList>       Elementen kopieras med hjälp av <xref:System.Array.Copy%2A?displayProperty=fullName>, vilket är en O (`n`) igen, där `n` är <xref:System.Collections.ArrayList.Count%2A>.</xref:System.Collections.ArrayList.Count%2A> </xref:System.Array.Copy%2A?displayProperty=fullName>"
  example:
  - "The following copy example shows how to copy the elements of an <xref:System.Collections.ArrayList> to a string array.  \n  \n [!code-cs[System.Collections.ArrayList.ToArray#1](~/add/codesnippet/csharp/m-system.collections.arr_17_1.cs)]\n [!code-cpp[System.Collections.ArrayList.ToArray#1](~/add/codesnippet/cpp/m-system.collections.arr_17_1.cpp)]\n [!code-vb[System.Collections.ArrayList.ToArray#1](~/add/codesnippet/visualbasic/m-system.collections.arr_17_1.vb)]"
  syntax:
    content: public virtual Array ToArray (Type type);
    parameters:
    - id: type
      type: System.Type
      description: "Elementet <xref:System.Type>av Målmatrisen och skapa och kopiera elementen.</xref:System.Type>"
    return:
      type: System.Array
      description: "En matris med den angivna elementtypen som innehåller kopior av elementen i den <xref href=&quot;System.Collections.ArrayList&quot;> </xref>."
  overload: System.Collections.ArrayList.ToArray*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>type</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "Typ av källan <xref href=&quot;System.Collections.ArrayList&quot;> </xref> kan inte omvandlas automatiskt till den angivna typen."
  platform:
  - net462
- uid: System.Collections.ArrayList.TrimToSize
  id: TrimToSize
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: TrimToSize()
  nameWithType: ArrayList.TrimToSize()
  fullName: System.Collections.ArrayList.TrimToSize()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Anger kapaciteten till det faktiska antalet element i den <xref href=&quot;System.Collections.ArrayList&quot;> </xref>."
  remarks: "Den här metoden kan användas för att minimera minne för en samling försämras om inga nya objekt läggs till i samlingen.       Så här återställer du en <xref:System.Collections.ArrayList>till det ursprungliga tillståndet anropa den <xref:System.Collections.ArrayList.Clear%2A>metoden innan du anropar TrimToSize.</xref:System.Collections.ArrayList.Clear%2A> </xref:System.Collections.ArrayList> Minska en tom <xref:System.Collections.ArrayList>anger kapaciteten för den <xref:System.Collections.ArrayList>till standardkapaciteten.</xref:System.Collections.ArrayList> </xref:System.Collections.ArrayList>       Den här metoden är en O (`n`) igen, där `n` är <xref:System.Collections.ArrayList.Count%2A>.</xref:System.Collections.ArrayList.Count%2A>"
  example:
  - "The following code example shows how to trim the unused portions of the <xref:System.Collections.ArrayList> and how to clear the values of the <xref:System.Collections.ArrayList>.  \n  \n [!code-cs[Classic ArrayList.Clear Example#1](~/add/codesnippet/csharp/m-system.collections.arr_8_1.cs)]\n [!code-cpp[Classic ArrayList.Clear Example#1](~/add/codesnippet/cpp/m-system.collections.arr_8_1.cpp)]\n [!code-vb[Classic ArrayList.Clear Example#1](~/add/codesnippet/visualbasic/m-system.collections.arr_8_1.vb)]"
  syntax:
    content: public virtual void TrimToSize ();
    parameters: []
  overload: System.Collections.ArrayList.TrimToSize*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "Den <xref href=&quot;System.Collections.ArrayList&quot;> </xref> är skrivskyddad.       - eller - <xref href=&quot;System.Collections.ArrayList&quot;> </xref> har en fast storlek."
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.NotSupportedException
  isExternal: true
  name: System.NotSupportedException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.OutOfMemoryException
  isExternal: true
  name: System.OutOfMemoryException
- uid: System.InvalidCastException
  isExternal: true
  name: System.InvalidCastException
- uid: System.Collections.ArrayList.#ctor
  parent: System.Collections.ArrayList
  isExternal: false
  name: ArrayList()
  nameWithType: ArrayList.ArrayList()
  fullName: System.Collections.ArrayList.ArrayList()
- uid: System.Collections.ArrayList.#ctor(System.Collections.ICollection)
  parent: System.Collections.ArrayList
  isExternal: false
  name: ArrayList(ICollection)
  nameWithType: ArrayList.ArrayList(ICollection)
  fullName: System.Collections.ArrayList.ArrayList(ICollection)
- uid: System.Collections.ICollection
  parent: System.Collections
  isExternal: true
  name: ICollection
  nameWithType: ICollection
  fullName: System.Collections.ICollection
- uid: System.Collections.ArrayList.#ctor(System.Int32)
  parent: System.Collections.ArrayList
  isExternal: false
  name: ArrayList(Int32)
  nameWithType: ArrayList.ArrayList(Int32)
  fullName: System.Collections.ArrayList.ArrayList(Int32)
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Collections.ArrayList.Adapter(System.Collections.IList)
  parent: System.Collections.ArrayList
  isExternal: false
  name: Adapter(IList)
  nameWithType: ArrayList.Adapter(IList)
  fullName: System.Collections.ArrayList.Adapter(IList)
- uid: System.Collections.ArrayList
  parent: System.Collections
  isExternal: false
  name: ArrayList
  nameWithType: ArrayList
  fullName: System.Collections.ArrayList
- uid: System.Collections.IList
  parent: System.Collections
  isExternal: true
  name: IList
  nameWithType: IList
  fullName: System.Collections.IList
- uid: System.Collections.ArrayList.Add(System.Object)
  parent: System.Collections.ArrayList
  isExternal: false
  name: Add(Object)
  nameWithType: ArrayList.Add(Object)
  fullName: System.Collections.ArrayList.Add(Object)
- uid: System.Collections.ArrayList.AddRange(System.Collections.ICollection)
  parent: System.Collections.ArrayList
  isExternal: false
  name: AddRange(ICollection)
  nameWithType: ArrayList.AddRange(ICollection)
  fullName: System.Collections.ArrayList.AddRange(ICollection)
- uid: System.Collections.ArrayList.BinarySearch(System.Object)
  parent: System.Collections.ArrayList
  isExternal: false
  name: BinarySearch(Object)
  nameWithType: ArrayList.BinarySearch(Object)
  fullName: System.Collections.ArrayList.BinarySearch(Object)
- uid: System.Collections.ArrayList.BinarySearch(System.Object,System.Collections.IComparer)
  parent: System.Collections.ArrayList
  isExternal: false
  name: BinarySearch(Object,IComparer)
  nameWithType: ArrayList.BinarySearch(Object,IComparer)
  fullName: System.Collections.ArrayList.BinarySearch(Object,IComparer)
- uid: System.Collections.IComparer
  parent: System.Collections
  isExternal: true
  name: IComparer
  nameWithType: IComparer
  fullName: System.Collections.IComparer
- uid: System.Collections.ArrayList.BinarySearch(System.Int32,System.Int32,System.Object,System.Collections.IComparer)
  parent: System.Collections.ArrayList
  isExternal: false
  name: BinarySearch(Int32,Int32,Object,IComparer)
  nameWithType: ArrayList.BinarySearch(Int32,Int32,Object,IComparer)
  fullName: System.Collections.ArrayList.BinarySearch(Int32,Int32,Object,IComparer)
- uid: System.Collections.ArrayList.Capacity
  parent: System.Collections.ArrayList
  isExternal: false
  name: Capacity
  nameWithType: ArrayList.Capacity
  fullName: System.Collections.ArrayList.Capacity
- uid: System.Collections.ArrayList.Clear
  parent: System.Collections.ArrayList
  isExternal: false
  name: Clear()
  nameWithType: ArrayList.Clear()
  fullName: System.Collections.ArrayList.Clear()
- uid: System.Collections.ArrayList.Clone
  parent: System.Collections.ArrayList
  isExternal: false
  name: Clone()
  nameWithType: ArrayList.Clone()
  fullName: System.Collections.ArrayList.Clone()
- uid: System.Collections.ArrayList.Contains(System.Object)
  parent: System.Collections.ArrayList
  isExternal: false
  name: Contains(Object)
  nameWithType: ArrayList.Contains(Object)
  fullName: System.Collections.ArrayList.Contains(Object)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Collections.ArrayList.CopyTo(System.Array)
  parent: System.Collections.ArrayList
  isExternal: false
  name: CopyTo(Array)
  nameWithType: ArrayList.CopyTo(Array)
  fullName: System.Collections.ArrayList.CopyTo(Array)
- uid: System.Array
  parent: System
  isExternal: true
  name: Array
  nameWithType: Array
  fullName: System.Array
- uid: System.Collections.ArrayList.CopyTo(System.Array,System.Int32)
  parent: System.Collections.ArrayList
  isExternal: false
  name: CopyTo(Array,Int32)
  nameWithType: ArrayList.CopyTo(Array,Int32)
  fullName: System.Collections.ArrayList.CopyTo(Array,Int32)
- uid: System.Collections.ArrayList.CopyTo(System.Int32,System.Array,System.Int32,System.Int32)
  parent: System.Collections.ArrayList
  isExternal: false
  name: CopyTo(Int32,Array,Int32,Int32)
  nameWithType: ArrayList.CopyTo(Int32,Array,Int32,Int32)
  fullName: System.Collections.ArrayList.CopyTo(Int32,Array,Int32,Int32)
- uid: System.Collections.ArrayList.Count
  parent: System.Collections.ArrayList
  isExternal: false
  name: Count
  nameWithType: ArrayList.Count
  fullName: System.Collections.ArrayList.Count
- uid: System.Collections.ArrayList.FixedSize(System.Collections.ArrayList)
  parent: System.Collections.ArrayList
  isExternal: false
  name: FixedSize(ArrayList)
  nameWithType: ArrayList.FixedSize(ArrayList)
  fullName: System.Collections.ArrayList.FixedSize(ArrayList)
- uid: System.Collections.ArrayList.FixedSize(System.Collections.IList)
  parent: System.Collections.ArrayList
  isExternal: false
  name: FixedSize(IList)
  nameWithType: ArrayList.FixedSize(IList)
  fullName: System.Collections.ArrayList.FixedSize(IList)
- uid: System.Collections.ArrayList.GetEnumerator
  parent: System.Collections.ArrayList
  isExternal: false
  name: GetEnumerator()
  nameWithType: ArrayList.GetEnumerator()
  fullName: System.Collections.ArrayList.GetEnumerator()
- uid: System.Collections.IEnumerator
  parent: System.Collections
  isExternal: true
  name: IEnumerator
  nameWithType: IEnumerator
  fullName: System.Collections.IEnumerator
- uid: System.Collections.ArrayList.GetEnumerator(System.Int32,System.Int32)
  parent: System.Collections.ArrayList
  isExternal: false
  name: GetEnumerator(Int32,Int32)
  nameWithType: ArrayList.GetEnumerator(Int32,Int32)
  fullName: System.Collections.ArrayList.GetEnumerator(Int32,Int32)
- uid: System.Collections.ArrayList.GetRange(System.Int32,System.Int32)
  parent: System.Collections.ArrayList
  isExternal: false
  name: GetRange(Int32,Int32)
  nameWithType: ArrayList.GetRange(Int32,Int32)
  fullName: System.Collections.ArrayList.GetRange(Int32,Int32)
- uid: System.Collections.ArrayList.IndexOf(System.Object)
  parent: System.Collections.ArrayList
  isExternal: false
  name: IndexOf(Object)
  nameWithType: ArrayList.IndexOf(Object)
  fullName: System.Collections.ArrayList.IndexOf(Object)
- uid: System.Collections.ArrayList.IndexOf(System.Object,System.Int32)
  parent: System.Collections.ArrayList
  isExternal: false
  name: IndexOf(Object,Int32)
  nameWithType: ArrayList.IndexOf(Object,Int32)
  fullName: System.Collections.ArrayList.IndexOf(Object,Int32)
- uid: System.Collections.ArrayList.IndexOf(System.Object,System.Int32,System.Int32)
  parent: System.Collections.ArrayList
  isExternal: false
  name: IndexOf(Object,Int32,Int32)
  nameWithType: ArrayList.IndexOf(Object,Int32,Int32)
  fullName: System.Collections.ArrayList.IndexOf(Object,Int32,Int32)
- uid: System.Collections.ArrayList.Insert(System.Int32,System.Object)
  parent: System.Collections.ArrayList
  isExternal: false
  name: Insert(Int32,Object)
  nameWithType: ArrayList.Insert(Int32,Object)
  fullName: System.Collections.ArrayList.Insert(Int32,Object)
- uid: System.Collections.ArrayList.InsertRange(System.Int32,System.Collections.ICollection)
  parent: System.Collections.ArrayList
  isExternal: false
  name: InsertRange(Int32,ICollection)
  nameWithType: ArrayList.InsertRange(Int32,ICollection)
  fullName: System.Collections.ArrayList.InsertRange(Int32,ICollection)
- uid: System.Collections.ArrayList.IsFixedSize
  parent: System.Collections.ArrayList
  isExternal: false
  name: IsFixedSize
  nameWithType: ArrayList.IsFixedSize
  fullName: System.Collections.ArrayList.IsFixedSize
- uid: System.Collections.ArrayList.IsReadOnly
  parent: System.Collections.ArrayList
  isExternal: false
  name: IsReadOnly
  nameWithType: ArrayList.IsReadOnly
  fullName: System.Collections.ArrayList.IsReadOnly
- uid: System.Collections.ArrayList.IsSynchronized
  parent: System.Collections.ArrayList
  isExternal: false
  name: IsSynchronized
  nameWithType: ArrayList.IsSynchronized
  fullName: System.Collections.ArrayList.IsSynchronized
- uid: System.Collections.ArrayList.Item(System.Int32)
  parent: System.Collections.ArrayList
  isExternal: false
  name: Item(Int32)
  nameWithType: ArrayList.Item(Int32)
  fullName: System.Collections.ArrayList.Item(Int32)
- uid: System.Collections.ArrayList.LastIndexOf(System.Object)
  parent: System.Collections.ArrayList
  isExternal: false
  name: LastIndexOf(Object)
  nameWithType: ArrayList.LastIndexOf(Object)
  fullName: System.Collections.ArrayList.LastIndexOf(Object)
- uid: System.Collections.ArrayList.LastIndexOf(System.Object,System.Int32)
  parent: System.Collections.ArrayList
  isExternal: false
  name: LastIndexOf(Object,Int32)
  nameWithType: ArrayList.LastIndexOf(Object,Int32)
  fullName: System.Collections.ArrayList.LastIndexOf(Object,Int32)
- uid: System.Collections.ArrayList.LastIndexOf(System.Object,System.Int32,System.Int32)
  parent: System.Collections.ArrayList
  isExternal: false
  name: LastIndexOf(Object,Int32,Int32)
  nameWithType: ArrayList.LastIndexOf(Object,Int32,Int32)
  fullName: System.Collections.ArrayList.LastIndexOf(Object,Int32,Int32)
- uid: System.Collections.ArrayList.ReadOnly(System.Collections.ArrayList)
  parent: System.Collections.ArrayList
  isExternal: false
  name: ReadOnly(ArrayList)
  nameWithType: ArrayList.ReadOnly(ArrayList)
  fullName: System.Collections.ArrayList.ReadOnly(ArrayList)
- uid: System.Collections.ArrayList.ReadOnly(System.Collections.IList)
  parent: System.Collections.ArrayList
  isExternal: false
  name: ReadOnly(IList)
  nameWithType: ArrayList.ReadOnly(IList)
  fullName: System.Collections.ArrayList.ReadOnly(IList)
- uid: System.Collections.ArrayList.Remove(System.Object)
  parent: System.Collections.ArrayList
  isExternal: false
  name: Remove(Object)
  nameWithType: ArrayList.Remove(Object)
  fullName: System.Collections.ArrayList.Remove(Object)
- uid: System.Collections.ArrayList.RemoveAt(System.Int32)
  parent: System.Collections.ArrayList
  isExternal: false
  name: RemoveAt(Int32)
  nameWithType: ArrayList.RemoveAt(Int32)
  fullName: System.Collections.ArrayList.RemoveAt(Int32)
- uid: System.Collections.ArrayList.RemoveRange(System.Int32,System.Int32)
  parent: System.Collections.ArrayList
  isExternal: false
  name: RemoveRange(Int32,Int32)
  nameWithType: ArrayList.RemoveRange(Int32,Int32)
  fullName: System.Collections.ArrayList.RemoveRange(Int32,Int32)
- uid: System.Collections.ArrayList.Repeat(System.Object,System.Int32)
  parent: System.Collections.ArrayList
  isExternal: false
  name: Repeat(Object,Int32)
  nameWithType: ArrayList.Repeat(Object,Int32)
  fullName: System.Collections.ArrayList.Repeat(Object,Int32)
- uid: System.Collections.ArrayList.Reverse
  parent: System.Collections.ArrayList
  isExternal: false
  name: Reverse()
  nameWithType: ArrayList.Reverse()
  fullName: System.Collections.ArrayList.Reverse()
- uid: System.Collections.ArrayList.Reverse(System.Int32,System.Int32)
  parent: System.Collections.ArrayList
  isExternal: false
  name: Reverse(Int32,Int32)
  nameWithType: ArrayList.Reverse(Int32,Int32)
  fullName: System.Collections.ArrayList.Reverse(Int32,Int32)
- uid: System.Collections.ArrayList.SetRange(System.Int32,System.Collections.ICollection)
  parent: System.Collections.ArrayList
  isExternal: false
  name: SetRange(Int32,ICollection)
  nameWithType: ArrayList.SetRange(Int32,ICollection)
  fullName: System.Collections.ArrayList.SetRange(Int32,ICollection)
- uid: System.Collections.ArrayList.Sort
  parent: System.Collections.ArrayList
  isExternal: false
  name: Sort()
  nameWithType: ArrayList.Sort()
  fullName: System.Collections.ArrayList.Sort()
- uid: System.Collections.ArrayList.Sort(System.Collections.IComparer)
  parent: System.Collections.ArrayList
  isExternal: false
  name: Sort(IComparer)
  nameWithType: ArrayList.Sort(IComparer)
  fullName: System.Collections.ArrayList.Sort(IComparer)
- uid: System.Collections.ArrayList.Sort(System.Int32,System.Int32,System.Collections.IComparer)
  parent: System.Collections.ArrayList
  isExternal: false
  name: Sort(Int32,Int32,IComparer)
  nameWithType: ArrayList.Sort(Int32,Int32,IComparer)
  fullName: System.Collections.ArrayList.Sort(Int32,Int32,IComparer)
- uid: System.Collections.ArrayList.Synchronized(System.Collections.ArrayList)
  parent: System.Collections.ArrayList
  isExternal: false
  name: Synchronized(ArrayList)
  nameWithType: ArrayList.Synchronized(ArrayList)
  fullName: System.Collections.ArrayList.Synchronized(ArrayList)
- uid: System.Collections.ArrayList.Synchronized(System.Collections.IList)
  parent: System.Collections.ArrayList
  isExternal: false
  name: Synchronized(IList)
  nameWithType: ArrayList.Synchronized(IList)
  fullName: System.Collections.ArrayList.Synchronized(IList)
- uid: System.Collections.ArrayList.SyncRoot
  parent: System.Collections.ArrayList
  isExternal: false
  name: SyncRoot
  nameWithType: ArrayList.SyncRoot
  fullName: System.Collections.ArrayList.SyncRoot
- uid: System.Collections.ArrayList.ToArray
  parent: System.Collections.ArrayList
  isExternal: false
  name: ToArray()
  nameWithType: ArrayList.ToArray()
  fullName: System.Collections.ArrayList.ToArray()
- uid: System.Object[]
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object[]
  spec.csharp:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: Object[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Collections.ArrayList.ToArray(System.Type)
  parent: System.Collections.ArrayList
  isExternal: false
  name: ToArray(Type)
  nameWithType: ArrayList.ToArray(Type)
  fullName: System.Collections.ArrayList.ToArray(Type)
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Collections.ArrayList.TrimToSize
  parent: System.Collections.ArrayList
  isExternal: false
  name: TrimToSize()
  nameWithType: ArrayList.TrimToSize()
  fullName: System.Collections.ArrayList.TrimToSize()
- uid: System.Collections.ArrayList.#ctor*
  parent: System.Collections.ArrayList
  isExternal: false
  name: ArrayList
  nameWithType: ArrayList.ArrayList
- uid: System.Collections.ArrayList.Adapter*
  parent: System.Collections.ArrayList
  isExternal: false
  name: Adapter
  nameWithType: ArrayList.Adapter
- uid: System.Collections.ArrayList.Add*
  parent: System.Collections.ArrayList
  isExternal: false
  name: Add
  nameWithType: ArrayList.Add
- uid: System.Collections.ArrayList.AddRange*
  parent: System.Collections.ArrayList
  isExternal: false
  name: AddRange
  nameWithType: ArrayList.AddRange
- uid: System.Collections.ArrayList.BinarySearch*
  parent: System.Collections.ArrayList
  isExternal: false
  name: BinarySearch
  nameWithType: ArrayList.BinarySearch
- uid: System.Collections.ArrayList.Capacity*
  parent: System.Collections.ArrayList
  isExternal: false
  name: Capacity
  nameWithType: ArrayList.Capacity
- uid: System.Collections.ArrayList.Clear*
  parent: System.Collections.ArrayList
  isExternal: false
  name: Clear
  nameWithType: ArrayList.Clear
- uid: System.Collections.ArrayList.Clone*
  parent: System.Collections.ArrayList
  isExternal: false
  name: Clone
  nameWithType: ArrayList.Clone
- uid: System.Collections.ArrayList.Contains*
  parent: System.Collections.ArrayList
  isExternal: false
  name: Contains
  nameWithType: ArrayList.Contains
- uid: System.Collections.ArrayList.CopyTo*
  parent: System.Collections.ArrayList
  isExternal: false
  name: CopyTo
  nameWithType: ArrayList.CopyTo
- uid: System.Collections.ArrayList.Count*
  parent: System.Collections.ArrayList
  isExternal: false
  name: Count
  nameWithType: ArrayList.Count
- uid: System.Collections.ArrayList.FixedSize*
  parent: System.Collections.ArrayList
  isExternal: false
  name: FixedSize
  nameWithType: ArrayList.FixedSize
- uid: System.Collections.ArrayList.GetEnumerator*
  parent: System.Collections.ArrayList
  isExternal: false
  name: GetEnumerator
  nameWithType: ArrayList.GetEnumerator
- uid: System.Collections.ArrayList.GetRange*
  parent: System.Collections.ArrayList
  isExternal: false
  name: GetRange
  nameWithType: ArrayList.GetRange
- uid: System.Collections.ArrayList.IndexOf*
  parent: System.Collections.ArrayList
  isExternal: false
  name: IndexOf
  nameWithType: ArrayList.IndexOf
- uid: System.Collections.ArrayList.Insert*
  parent: System.Collections.ArrayList
  isExternal: false
  name: Insert
  nameWithType: ArrayList.Insert
- uid: System.Collections.ArrayList.InsertRange*
  parent: System.Collections.ArrayList
  isExternal: false
  name: InsertRange
  nameWithType: ArrayList.InsertRange
- uid: System.Collections.ArrayList.IsFixedSize*
  parent: System.Collections.ArrayList
  isExternal: false
  name: IsFixedSize
  nameWithType: ArrayList.IsFixedSize
- uid: System.Collections.ArrayList.IsReadOnly*
  parent: System.Collections.ArrayList
  isExternal: false
  name: IsReadOnly
  nameWithType: ArrayList.IsReadOnly
- uid: System.Collections.ArrayList.IsSynchronized*
  parent: System.Collections.ArrayList
  isExternal: false
  name: IsSynchronized
  nameWithType: ArrayList.IsSynchronized
- uid: System.Collections.ArrayList.Item*
  parent: System.Collections.ArrayList
  isExternal: false
  name: Item
  nameWithType: ArrayList.Item
- uid: System.Collections.ArrayList.LastIndexOf*
  parent: System.Collections.ArrayList
  isExternal: false
  name: LastIndexOf
  nameWithType: ArrayList.LastIndexOf
- uid: System.Collections.ArrayList.ReadOnly*
  parent: System.Collections.ArrayList
  isExternal: false
  name: ReadOnly
  nameWithType: ArrayList.ReadOnly
- uid: System.Collections.ArrayList.Remove*
  parent: System.Collections.ArrayList
  isExternal: false
  name: Remove
  nameWithType: ArrayList.Remove
- uid: System.Collections.ArrayList.RemoveAt*
  parent: System.Collections.ArrayList
  isExternal: false
  name: RemoveAt
  nameWithType: ArrayList.RemoveAt
- uid: System.Collections.ArrayList.RemoveRange*
  parent: System.Collections.ArrayList
  isExternal: false
  name: RemoveRange
  nameWithType: ArrayList.RemoveRange
- uid: System.Collections.ArrayList.Repeat*
  parent: System.Collections.ArrayList
  isExternal: false
  name: Repeat
  nameWithType: ArrayList.Repeat
- uid: System.Collections.ArrayList.Reverse*
  parent: System.Collections.ArrayList
  isExternal: false
  name: Reverse
  nameWithType: ArrayList.Reverse
- uid: System.Collections.ArrayList.SetRange*
  parent: System.Collections.ArrayList
  isExternal: false
  name: SetRange
  nameWithType: ArrayList.SetRange
- uid: System.Collections.ArrayList.Sort*
  parent: System.Collections.ArrayList
  isExternal: false
  name: Sort
  nameWithType: ArrayList.Sort
- uid: System.Collections.ArrayList.Synchronized*
  parent: System.Collections.ArrayList
  isExternal: false
  name: Synchronized
  nameWithType: ArrayList.Synchronized
- uid: System.Collections.ArrayList.SyncRoot*
  parent: System.Collections.ArrayList
  isExternal: false
  name: SyncRoot
  nameWithType: ArrayList.SyncRoot
- uid: System.Collections.ArrayList.ToArray*
  parent: System.Collections.ArrayList
  isExternal: false
  name: ToArray
  nameWithType: ArrayList.ToArray
- uid: System.Collections.ArrayList.TrimToSize*
  parent: System.Collections.ArrayList
  isExternal: false
  name: TrimToSize
  nameWithType: ArrayList.TrimToSize
