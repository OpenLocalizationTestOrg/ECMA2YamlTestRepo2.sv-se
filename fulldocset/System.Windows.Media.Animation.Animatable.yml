### YamlMime:ManagedReference
items:
- uid: System.Windows.Media.Animation.Animatable
  id: Animatable
  children:
  - System.Windows.Media.Animation.Animatable.#ctor
  - System.Windows.Media.Animation.Animatable.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock)
  - System.Windows.Media.Animation.Animatable.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock,System.Windows.Media.Animation.HandoffBehavior)
  - System.Windows.Media.Animation.Animatable.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline)
  - System.Windows.Media.Animation.Animatable.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline,System.Windows.Media.Animation.HandoffBehavior)
  - System.Windows.Media.Animation.Animatable.Clone
  - System.Windows.Media.Animation.Animatable.FreezeCore(System.Boolean)
  - System.Windows.Media.Animation.Animatable.GetAnimationBaseValue(System.Windows.DependencyProperty)
  - System.Windows.Media.Animation.Animatable.HasAnimatedProperties
  - System.Windows.Media.Animation.Animatable.ShouldSerializeStoredWeakReference(System.Windows.DependencyObject)
  langs:
  - csharp
  name: Animatable
  nameWithType: Animatable
  fullName: System.Windows.Media.Animation.Animatable
  type: Class
  summary: "Abstrakt klass som har stöd för animering."
  syntax:
    content: 'public abstract class Animatable : System.Windows.Freezable, System.Windows.Media.Animation.IAnimatable'
  inheritance:
  - System.Object
  - System.Windows.Threading.DispatcherObject
  - System.Windows.DependencyObject
  - System.Windows.Freezable
  implements:
  - System.Windows.Media.Animation.IAnimatable
  inheritedMembers:
  - System.Windows.DependencyObject.ClearValue(System.Windows.DependencyProperty)
  - System.Windows.DependencyObject.ClearValue(System.Windows.DependencyPropertyKey)
  - System.Windows.DependencyObject.CoerceValue(System.Windows.DependencyProperty)
  - System.Windows.DependencyObject.DependencyObjectType
  - System.Windows.DependencyObject.Equals(System.Object)
  - System.Windows.DependencyObject.GetHashCode
  - System.Windows.DependencyObject.GetLocalValueEnumerator
  - System.Windows.DependencyObject.GetValue(System.Windows.DependencyProperty)
  - System.Windows.DependencyObject.InvalidateProperty(System.Windows.DependencyProperty)
  - System.Windows.DependencyObject.IsSealed
  - System.Windows.DependencyObject.ReadLocalValue(System.Windows.DependencyProperty)
  - System.Windows.DependencyObject.SetCurrentValue(System.Windows.DependencyProperty,System.Object)
  - System.Windows.DependencyObject.SetValue(System.Windows.DependencyProperty,System.Object)
  - System.Windows.DependencyObject.SetValue(System.Windows.DependencyPropertyKey,System.Object)
  - System.Windows.DependencyObject.ShouldSerializeProperty(System.Windows.DependencyProperty)
  - System.Windows.Freezable.CanFreeze
  - System.Windows.Freezable.Changed
  - System.Windows.Freezable.CloneCore(System.Windows.Freezable)
  - System.Windows.Freezable.CloneCurrentValue
  - System.Windows.Freezable.CloneCurrentValueCore(System.Windows.Freezable)
  - System.Windows.Freezable.CreateInstance
  - System.Windows.Freezable.CreateInstanceCore
  - System.Windows.Freezable.Freeze
  - System.Windows.Freezable.Freeze(System.Windows.Freezable,System.Boolean)
  - System.Windows.Freezable.GetAsFrozen
  - System.Windows.Freezable.GetAsFrozenCore(System.Windows.Freezable)
  - System.Windows.Freezable.GetCurrentValueAsFrozen
  - System.Windows.Freezable.GetCurrentValueAsFrozenCore(System.Windows.Freezable)
  - System.Windows.Freezable.IsFrozen
  - System.Windows.Freezable.OnChanged
  - System.Windows.Freezable.OnFreezablePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyObject)
  - System.Windows.Freezable.OnFreezablePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyObject,System.Windows.DependencyProperty)
  - System.Windows.Freezable.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)
  - System.Windows.Freezable.ReadPreamble
  - System.Windows.Freezable.WritePostscript
  - System.Windows.Freezable.WritePreamble
  - System.Windows.Threading.DispatcherObject.CheckAccess
  - System.Windows.Threading.DispatcherObject.Dispatcher
  - System.Windows.Threading.DispatcherObject.VerifyAccess
  platform:
  - net462
- uid: System.Windows.Media.Animation.Animatable.#ctor
  id: '#ctor'
  parent: System.Windows.Media.Animation.Animatable
  langs:
  - csharp
  name: Animatable()
  nameWithType: Animatable.Animatable()
  fullName: System.Windows.Media.Animation.Animatable.Animatable()
  type: Constructor
  assemblies:
  - PresentationCore
  namespace: System.Windows.Media.Animation
  summary: "Initierar en ny instans av den <xref href=&quot;System.Windows.Media.Animation.Animatable&quot;> </xref> klass."
  syntax:
    content: protected Animatable ();
    parameters: []
  overload: System.Windows.Media.Animation.Animatable.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Media.Animation.Animatable.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock)
  id: ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock)
  parent: System.Windows.Media.Animation.Animatable
  langs:
  - csharp
  name: ApplyAnimationClock(DependencyProperty,AnimationClock)
  nameWithType: Animatable.ApplyAnimationClock(DependencyProperty,AnimationClock)
  fullName: System.Windows.Media.Animation.Animatable.ApplyAnimationClock(DependencyProperty,AnimationClock)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows.Media.Animation
  summary: "Tillämpar en <xref href=&quot;System.Windows.Media.Animation.AnimationClock&quot;> </xref> till den angivna <xref href=&quot;System.Windows.DependencyProperty&quot;> </xref>. Om egenskapen är redan animerad, den <xref href=&quot;System.Windows.Media.Animation.HandoffBehavior&quot;> </xref> handoff beteendet används."
  remarks: "Observera att den här metoden för att ta bort stämplar från en egenskap slutar inte dessa klockor."
  syntax:
    content: public void ApplyAnimationClock (System.Windows.DependencyProperty dp, System.Windows.Media.Animation.AnimationClock clock);
    parameters:
    - id: dp
      type: System.Windows.DependencyProperty
      description: "Att animera egenskapen."
    - id: clock
      type: System.Windows.Media.Animation.AnimationClock
      description: "Klockan att animera egenskapen angivna. Om `clock` är <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>, alla animeringar tas bort från den angivna egenskapen (dock inte stoppats)."
  overload: System.Windows.Media.Animation.Animatable.ApplyAnimationClock*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Media.Animation.Animatable.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock,System.Windows.Media.Animation.HandoffBehavior)
  id: ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock,System.Windows.Media.Animation.HandoffBehavior)
  parent: System.Windows.Media.Animation.Animatable
  langs:
  - csharp
  name: ApplyAnimationClock(DependencyProperty,AnimationClock,HandoffBehavior)
  nameWithType: Animatable.ApplyAnimationClock(DependencyProperty,AnimationClock,HandoffBehavior)
  fullName: System.Windows.Media.Animation.Animatable.ApplyAnimationClock(DependencyProperty,AnimationClock,HandoffBehavior)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows.Media.Animation
  summary: "Tillämpar en <xref href=&quot;System.Windows.Media.Animation.AnimationClock&quot;> </xref> till den angivna <xref href=&quot;System.Windows.DependencyProperty&quot;> </xref>. Om egenskapen är redan animerad, den angivna <xref href=&quot;System.Windows.Media.Animation.HandoffBehavior&quot;> </xref> används."
  remarks: "Observera att använda den här metoden för att ta bort stämplar från en egenskap slutar inte dessa klockor.      ## Med den utgöra HandoffBehavior när du använder en <xref:System.Windows.Media.Animation.Storyboard>, <xref:System.Windows.Media.Animation.AnimationTimeline>, eller <xref:System.Windows.Media.Animation.AnimationClock>till en egenskap med hjälp av den <xref:System.Windows.Media.Animation.HandoffBehavior> <xref:System.Windows.Media.Animation.HandoffBehavior>, eventuella <xref:System.Windows.Media.Animation.Clock>objekt som tidigare har associerats med den egenskapen som fortsätter att använda systemresurser; tidsinställning systemet kommer inte att ta bort dessa klockor automatiskt.</xref:System.Windows.Media.Animation.Clock> </xref:System.Windows.Media.Animation.HandoffBehavior> </xref:System.Windows.Media.Animation.HandoffBehavior> </xref:System.Windows.Media.Animation.AnimationClock> </xref:System.Windows.Media.Animation.AnimationTimeline> </xref:System.Windows.Media.Animation.Storyboard>       Att undvika prestandaproblem när du använder ett stort antal klockor med <xref:System.Windows.Media.Animation.HandoffBehavior>, bör du ta bort programstrukturen klockor från egenskapen animerade när den är klar.</xref:System.Windows.Media.Animation.HandoffBehavior> Det finns flera sätt att ta bort en klocka.      -Ta bort alla klockor från en egenskap med det <xref:System.Windows.Media.Animation.Animatable.ApplyAnimationClock%28System.Windows.DependencyProperty%2CSystem.Windows.Media.Animation.AnimationClock%29>eller <xref:System.Windows.Media.Animation.Animatable.BeginAnimation%28System.Windows.DependencyProperty%2CSystem.Windows.Media.Animation.AnimationTimeline%29>metoden i det animerade objektet.</xref:System.Windows.Media.Animation.Animatable.BeginAnimation%28System.Windows.DependencyProperty%2CSystem.Windows.Media.Animation.AnimationTimeline%29> </xref:System.Windows.Media.Animation.Animatable.ApplyAnimationClock%28System.Windows.DependencyProperty%2CSystem.Windows.Media.Animation.AnimationClock%29> Anger den egenskap som animeras som den första parametern och `null` som andra. Detta tar bort alla animering klockor från egenskapen.      -Om du vill ta bort en specifik <xref:System.Windows.Media.Animation.AnimationClock>från en lista över klockor, använder du <xref:System.Windows.Media.Animation.Clock.Controller%2A>egenskapen för <xref:System.Windows.Media.Animation.AnimationClock>att hämta en <xref:System.Windows.Media.Animation.ClockController>anropa <xref:System.Windows.Media.Animation.ClockController.Remove%2A>metoden i <xref:System.Windows.Media.Animation.ClockController>.</xref:System.Windows.Media.Animation.ClockController> </xref:System.Windows.Media.Animation.ClockController.Remove%2A> </xref:System.Windows.Media.Animation.ClockController> </xref:System.Windows.Media.Animation.AnimationClock> </xref:System.Windows.Media.Animation.Clock.Controller%2A> </xref:System.Windows.Media.Animation.AnimationClock> Detta görs vanligtvis den <xref:System.Windows.Media.Animation.Clock.Completed>händelsehanteraren för en clock.</xref:System.Windows.Media.Animation.Clock.Completed> Observera att endast roten klockor kan styras efter en <xref:System.Windows.Media.Animation.ClockController>; <xref:System.Windows.Media.Animation.Clock.Controller%2A>-egenskapen för en underordnad klocka returneras `null`.</xref:System.Windows.Media.Animation.Clock.Controller%2A> </xref:System.Windows.Media.Animation.ClockController> Observera också att det <xref:System.Windows.Media.Animation.Clock.Completed>händelsen inte anropas om effektiva tidslängd klockan är alltid.</xref:System.Windows.Media.Animation.Clock.Completed>  I så fall måste användaren att bestämma när anropet <xref:System.Windows.Media.Animation.ClockController.Remove%2A>.</xref:System.Windows.Media.Animation.ClockController.Remove%2A>       Detta är i första hand ett problem för animeringar för objekt som har en lång livstid.  När ett objekt har skräpinsamlats, frånkopplas även dess klockor och skräpinsamlats.       Mer information om klockan objekt finns i [animering och tidsinställning Systemöversikt](~/add/includes/ajax-current-ext-md.md)."
  example:
  - The following example shows how to apply animation clocks using different <xref:System.Windows.Media.Animation.HandoffBehavior> settings.
  syntax:
    content: public void ApplyAnimationClock (System.Windows.DependencyProperty dp, System.Windows.Media.Animation.AnimationClock clock, System.Windows.Media.Animation.HandoffBehavior handoffBehavior);
    parameters:
    - id: dp
      type: System.Windows.DependencyProperty
      description: "Att animera egenskapen."
    - id: clock
      type: System.Windows.Media.Animation.AnimationClock
      description: "Klockan att animera egenskapen angivna. Om `handoffBehavior` är <xref href=&quot;System.Windows.Media.Animation.HandoffBehavior&quot;> </xref> och `clock` är <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>, alla animeringar tas bort från den angivna egenskapen (dock inte stoppats). Om `handoffBehavior` är <xref href=&quot;System.Windows.Media.Animation.HandoffBehavior&quot;> </xref> och klockan är <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>, den här metoden har ingen effekt."
    - id: handoffBehavior
      type: System.Windows.Media.Animation.HandoffBehavior
      description: "Ett värde som anger hur ny animeringen ska interagera med aktuella animeringar redan påverkar egenskapens värde."
  overload: System.Windows.Media.Animation.Animatable.ApplyAnimationClock*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Media.Animation.Animatable.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline)
  id: BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline)
  parent: System.Windows.Media.Animation.Animatable
  langs:
  - csharp
  name: BeginAnimation(DependencyProperty,AnimationTimeline)
  nameWithType: Animatable.BeginAnimation(DependencyProperty,AnimationTimeline)
  fullName: System.Windows.Media.Animation.Animatable.BeginAnimation(DependencyProperty,AnimationTimeline)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows.Media.Animation
  summary: "Använd en animering till den angivna <xref href=&quot;System.Windows.DependencyProperty&quot;> </xref>. Animeringen startas när nästa ram återges. Om den angivna egenskapen är redan animerad, den <xref href=&quot;System.Windows.Media.Animation.HandoffBehavior&quot;> </xref> handoff beteendet används."
  remarks: "Om animeringen har en <xref:System.Windows.Media.Animation.Timeline.BeginTime%2A>som är större än noll, animeringen börjar när denna tid har förflutit vid tiden för nästa ram återges.</xref:System.Windows.Media.Animation.Timeline.BeginTime%2A>"
  syntax:
    content: public void BeginAnimation (System.Windows.DependencyProperty dp, System.Windows.Media.Animation.AnimationTimeline animation);
    parameters:
    - id: dp
      type: System.Windows.DependencyProperty
      description: "Att animera egenskapen."
    - id: animation
      type: System.Windows.Media.Animation.AnimationTimeline
      description: "Animeringen används för att animera egenskapen angivna.       Om animeringen <xref:System.Windows.Media.Animation.Timeline.BeginTime*>är <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>, aktuella animeringar kommer att tas bort och det aktuella värdet på egenskapen hålls kvar.</xref:System.Windows.Media.Animation.Timeline.BeginTime*>       Om `animation` är <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>, alla animeringar tas bort från egenskapen och egenskapsvärdet återgår till dess grundläggande värde."
  overload: System.Windows.Media.Animation.Animatable.BeginAnimation*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Media.Animation.Animatable.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline,System.Windows.Media.Animation.HandoffBehavior)
  id: BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline,System.Windows.Media.Animation.HandoffBehavior)
  parent: System.Windows.Media.Animation.Animatable
  langs:
  - csharp
  name: BeginAnimation(DependencyProperty,AnimationTimeline,HandoffBehavior)
  nameWithType: Animatable.BeginAnimation(DependencyProperty,AnimationTimeline,HandoffBehavior)
  fullName: System.Windows.Media.Animation.Animatable.BeginAnimation(DependencyProperty,AnimationTimeline,HandoffBehavior)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows.Media.Animation
  summary: "Använd en animering till den angivna <xref href=&quot;System.Windows.DependencyProperty&quot;> </xref>. Animeringen startas när nästa ram återges. Om den angivna egenskapen är redan animerad, den angivna <xref href=&quot;System.Windows.Media.Animation.HandoffBehavior&quot;> </xref> används."
  remarks: "Om animeringen har en <xref:System.Windows.Media.Animation.Timeline.BeginTime%2A>som är större än noll, animeringen börjar när denna tid har förflutit vid tiden för nästa ram återges.</xref:System.Windows.Media.Animation.Timeline.BeginTime%2A>      ## Med den utgöra HandoffBehavior när du använder en <xref:System.Windows.Media.Animation.Storyboard>, <xref:System.Windows.Media.Animation.AnimationTimeline>, eller <xref:System.Windows.Media.Animation.AnimationClock>till en egenskap med hjälp av den <xref:System.Windows.Media.Animation.HandoffBehavior> <xref:System.Windows.Media.Animation.HandoffBehavior>, eventuella <xref:System.Windows.Media.Animation.Clock>objekt som tidigare har associerats med den egenskapen som fortsätter att använda systemresurser; tidsinställning systemet kommer inte att ta bort dessa klockor automatiskt.</xref:System.Windows.Media.Animation.Clock> </xref:System.Windows.Media.Animation.HandoffBehavior> </xref:System.Windows.Media.Animation.HandoffBehavior> </xref:System.Windows.Media.Animation.AnimationClock> </xref:System.Windows.Media.Animation.AnimationTimeline> </xref:System.Windows.Media.Animation.Storyboard>       Att undvika prestandaproblem när du använder ett stort antal klockor med <xref:System.Windows.Media.Animation.HandoffBehavior>, bör du ta bort programstrukturen klockor från egenskapen animerade när den är klar.</xref:System.Windows.Media.Animation.HandoffBehavior> Det finns flera sätt att ta bort en klocka.      -Ta bort alla klockor från en egenskap med det <xref:System.Windows.Media.Animation.Animatable.ApplyAnimationClock%28System.Windows.DependencyProperty%2CSystem.Windows.Media.Animation.AnimationClock%29>eller <xref:System.Windows.Media.Animation.Animatable.BeginAnimation%28System.Windows.DependencyProperty%2CSystem.Windows.Media.Animation.AnimationTimeline%29>metoden i det animerade objektet.</xref:System.Windows.Media.Animation.Animatable.BeginAnimation%28System.Windows.DependencyProperty%2CSystem.Windows.Media.Animation.AnimationTimeline%29> </xref:System.Windows.Media.Animation.Animatable.ApplyAnimationClock%28System.Windows.DependencyProperty%2CSystem.Windows.Media.Animation.AnimationClock%29> Anger den egenskap som animeras som den första parametern och `null` som andra. Detta tar bort alla animering klockor från egenskapen.      -Om du vill ta bort en specifik <xref:System.Windows.Media.Animation.AnimationClock>från en lista över klockor, använder du <xref:System.Windows.Media.Animation.Clock.Controller%2A>egenskapen för <xref:System.Windows.Media.Animation.AnimationClock>att hämta en <xref:System.Windows.Media.Animation.ClockController>anropa <xref:System.Windows.Media.Animation.ClockController.Remove%2A>metoden i <xref:System.Windows.Media.Animation.ClockController>.</xref:System.Windows.Media.Animation.ClockController> </xref:System.Windows.Media.Animation.ClockController.Remove%2A> </xref:System.Windows.Media.Animation.ClockController> </xref:System.Windows.Media.Animation.AnimationClock> </xref:System.Windows.Media.Animation.Clock.Controller%2A> </xref:System.Windows.Media.Animation.AnimationClock> Detta görs vanligtvis den <xref:System.Windows.Media.Animation.Clock.Completed>händelsehanteraren för en clock.</xref:System.Windows.Media.Animation.Clock.Completed> Observera att endast roten klockor kan styras efter en <xref:System.Windows.Media.Animation.ClockController>; <xref:System.Windows.Media.Animation.Clock.Controller%2A>-egenskapen för en underordnad klocka returneras `null`.</xref:System.Windows.Media.Animation.Clock.Controller%2A> </xref:System.Windows.Media.Animation.ClockController> Observera också att det <xref:System.Windows.Media.Animation.Clock.Completed>händelsen inte anropas om effektiva tidslängd klockan är alltid.</xref:System.Windows.Media.Animation.Clock.Completed>  I så fall måste användaren att bestämma när anropet <xref:System.Windows.Media.Animation.ClockController.Remove%2A>.</xref:System.Windows.Media.Animation.ClockController.Remove%2A>       Detta är i första hand ett problem för animeringar för objekt som har en lång livstid.  När ett objekt har skräpinsamlats, frånkopplas även dess klockor och skräpinsamlats.       Mer information om klockan objekt finns i [animering och tidsinställning Systemöversikt](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following example shows how to apply animations using different <xref:System.Windows.Media.Animation.HandoffBehavior> settings.  \n  \n [!code-cpp[animateproperty#InteractiveAnimationExampleWholePage](~/add/codesnippet/cpp/animagionproperty_cpp/InteractiveExample.cpp#interactiveanimationexamplewholepage)]\n [!code-cs[animateproperty#InteractiveAnimationExampleWholePage](~/add/codesnippet/csharp/animateproperty_csharp/InteractiveExample.cs#interactiveanimationexamplewholepage)]\n [!code-vb[animateproperty#InteractiveAnimationExampleWholePage](~/add/codesnippet/visualbasic/animateproperty_vb/InteractiveExample.vb#interactiveanimationexamplewholepage)]"
  syntax:
    content: public void BeginAnimation (System.Windows.DependencyProperty dp, System.Windows.Media.Animation.AnimationTimeline animation, System.Windows.Media.Animation.HandoffBehavior handoffBehavior);
    parameters:
    - id: dp
      type: System.Windows.DependencyProperty
      description: "Att animera egenskapen."
    - id: animation
      type: System.Windows.Media.Animation.AnimationTimeline
      description: "Animeringen används för att animera egenskapen angivna.       Om `handoffBehavior` är <xref href=&quot;System.Windows.Media.Animation.HandoffBehavior&quot;> </xref> och animeringen <> </> *> är <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>, aktuella animeringar kommer att tas bort och det aktuella värdet på egenskapen hålls kvar.       Om `handoffBehavior` är <xref href=&quot;System.Windows.Media.Animation.HandoffBehavior&quot;> </xref> och `animation` är en <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> -referens, alla animeringar tas bort från egenskapen och egenskapsvärdet återgår till dess grundläggande värde.       Om `handoffBehavior` är <xref href=&quot;System.Windows.Media.Animation.HandoffBehavior&quot;> </xref>, den här metoden har ingen effekt om animeringen eller dess <> </> *> är <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
    - id: handoffBehavior
      type: System.Windows.Media.Animation.HandoffBehavior
      description: "Ett värde som anger hur ny animeringen ska interagera med aktuella animeringar redan påverkar egenskapens värde."
  overload: System.Windows.Media.Animation.Animatable.BeginAnimation*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Media.Animation.Animatable.Clone
  id: Clone
  parent: System.Windows.Media.Animation.Animatable
  langs:
  - csharp
  name: Clone()
  nameWithType: Animatable.Clone()
  fullName: System.Windows.Media.Animation.Animatable.Clone()
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows.Media.Animation
  summary: "Skapar en ändringsbar kloning av detta <xref href=&quot;System.Windows.Media.Animation.Animatable&quot;> </xref>, att göra deep kopior av värden för det här objektet. När du kopierar det här objektet beroendeegenskaper kopierar resurs referenser och data Bindningar (men de inte längre kan lösa) men inte animeringar eller deras aktuella värden."
  remarks: "Metoden Clone kan användas för att skapa ändringsbar kopior av fryst <xref:System.Windows.Freezable>objekt.</xref:System.Windows.Freezable> Av praktiska skäl kan den här metoden skuggar den ärvda <xref:System.Windows.Freezable.Clone%2A>metod för att ge en strikt typkontroll implementering.</xref:System.Windows.Freezable.Clone%2A>"
  syntax:
    content: public System.Windows.Media.Animation.Animatable Clone ();
    parameters: []
    return:
      type: System.Windows.Media.Animation.Animatable
      description: "En ändringsbar kloning av den här instansen. Returnerade klon är en djup kopia av det aktuella objektet. Klonade <> </> *> egenskapen är * *FALSKT**."
  overload: System.Windows.Media.Animation.Animatable.Clone*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Media.Animation.Animatable.FreezeCore(System.Boolean)
  id: FreezeCore(System.Boolean)
  parent: System.Windows.Media.Animation.Animatable
  langs:
  - csharp
  name: FreezeCore(Boolean)
  nameWithType: Animatable.FreezeCore(Boolean)
  fullName: System.Windows.Media.Animation.Animatable.FreezeCore(Boolean)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows.Media.Animation
  summary: "Gör detta <xref href=&quot;System.Windows.Media.Animation.Animatable&quot;> </xref> objekt unmodifiable eller avgör om det kan göras unmodifiable."
  remarks: "Den här metoden returnerar **FALSKT** när <xref:System.Windows.Media.Animation.Animatable.HasAnimatedProperties%2A>är **SANT**.</xref:System.Windows.Media.Animation.Animatable.HasAnimatedProperties%2A>       Anropa inte den här metoden direkt (med undantag för när du anropar base i en implementering). Den här metoden anropas internt av <xref:System.Windows.Freezable.CanFreeze%2A>(med `isChecking` lika med `true`) och <xref:System.Windows.Freezable.Freeze%2A>(med `isChecking` lika med `false`).</xref:System.Windows.Freezable.Freeze%2A> </xref:System.Windows.Freezable.CanFreeze%2A>"
  syntax:
    content: protected override bool FreezeCore (bool isChecking);
    parameters:
    - id: isChecking
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Om den här metoden bör bara bestämma om du kan låsa den här instansen. <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>Om den här instansen bör faktiskt låser sig när den här metoden anropas."
    return:
      type: System.Boolean
      description: "Om <code> isChecking </code> är <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>, den här metoden returnerar <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref> om <xref href=&quot;System.Windows.Media.Animation.Animatable&quot;> </xref> kan göras unmodifiable, eller <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> om det inte går att göra unmodifiable.       Om <code> isChecking </code> är <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>, den här metoden returnerar <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref> om om detta <xref href=&quot;System.Windows.Media.Animation.Animatable&quot;> </xref> är nu unmodifiable, eller <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> om det inte går att göra unmodifiable med sidoeffekt av har börjat ändra fryst status för det här objektet."
  overload: System.Windows.Media.Animation.Animatable.FreezeCore*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Media.Animation.Animatable.GetAnimationBaseValue(System.Windows.DependencyProperty)
  id: GetAnimationBaseValue(System.Windows.DependencyProperty)
  parent: System.Windows.Media.Animation.Animatable
  langs:
  - csharp
  name: GetAnimationBaseValue(DependencyProperty)
  nameWithType: Animatable.GetAnimationBaseValue(DependencyProperty)
  fullName: System.Windows.Media.Animation.Animatable.GetAnimationBaseValue(DependencyProperty)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows.Media.Animation
  summary: "Returnerar det icke-animerade värdet för den angivna <xref href=&quot;System.Windows.DependencyProperty&quot;> </xref>."
  remarks: "Om den angivna egenskapen inte animeras returnerar den här metoden samma resultat som <xref:System.Windows.DependencyObject.GetValue%2A>.</xref:System.Windows.DependencyObject.GetValue%2A>"
  example:
  - "In the following example, the non-animated values of animated properties are retrieved and displayed.  \n  \n [!code-cs[timingbehaviors_procedural_snip#GetAnimationBaseValueExampleWholePage](~/add/codesnippet/csharp/TimingBehavior_csharp/GetAnimationBaseValueExample.cs#getanimationbasevalueexamplewholepage)]\n [!code-vb[timingbehaviors_procedural_snip#GetAnimationBaseValueExampleWholePage](~/add/codesnippet/visualbasic/timingbehavior_vb/getanimationbasevalueexample.vb#getanimationbasevalueexamplewholepage)]"
  syntax:
    content: public object GetAnimationBaseValue (System.Windows.DependencyProperty dp);
    parameters:
    - id: dp
      type: System.Windows.DependencyProperty
      description: "Identifierar egenskapen vars grundläggande (icke-animerade) ska hämtas."
    return:
      type: System.Object
      description: "Det värde som returneras om den angivna egenskapen inte har animerade."
  overload: System.Windows.Media.Animation.Animatable.GetAnimationBaseValue*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Media.Animation.Animatable.HasAnimatedProperties
  id: HasAnimatedProperties
  parent: System.Windows.Media.Animation.Animatable
  langs:
  - csharp
  name: HasAnimatedProperties
  nameWithType: Animatable.HasAnimatedProperties
  fullName: System.Windows.Media.Animation.Animatable.HasAnimatedProperties
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows.Media.Animation
  summary: "Hämtar ett värde som anger om en eller flera <xref href=&quot;System.Windows.Media.Animation.AnimationClock&quot;> </xref> objekt som är associerad med någon av egenskaperna för beroende av det här objektet."
  remarks: "Den här egenskapen anger inte om det här objektet innehåller animerade underordnade objekt."
  syntax:
    content: public bool HasAnimatedProperties { get; }
    return:
      type: System.Boolean
      description: '**true** if one or more <xref href="System.Windows.Media.Animation.AnimationClock"></xref> objects is associated with any of this object''s dependency properties; otherwise, **false**.'
  overload: System.Windows.Media.Animation.Animatable.HasAnimatedProperties*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Media.Animation.Animatable.ShouldSerializeStoredWeakReference(System.Windows.DependencyObject)
  id: ShouldSerializeStoredWeakReference(System.Windows.DependencyObject)
  parent: System.Windows.Media.Animation.Animatable
  langs:
  - csharp
  name: ShouldSerializeStoredWeakReference(DependencyObject)
  nameWithType: Animatable.ShouldSerializeStoredWeakReference(DependencyObject)
  fullName: System.Windows.Media.Animation.Animatable.ShouldSerializeStoredWeakReference(DependencyObject)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows.Media.Animation
  summary: "Anger om ett beroendeobjekt ska serialiseras."
  remarks: "Den <xref:System.ComponentModel.TypeDescriptor>klassen använder metoden ShouldSerializeStoredWeakReference för att avgöra om en egenskap ska serialiseras.</xref:System.ComponentModel.TypeDescriptor>"
  syntax:
    content: public static bool ShouldSerializeStoredWeakReference (System.Windows.DependencyObject target);
    parameters:
    - id: target
      type: System.Windows.DependencyObject
      description: "Representerar ett objekt som deltar i systemets beroende egenskap."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>to serialize <code>target</code>; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>. Standardvärdet är <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.Media.Animation.Animatable.ShouldSerializeStoredWeakReference*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Windows.Freezable
  isExternal: false
  name: System.Windows.Freezable
- uid: System.Windows.Media.Animation.Animatable.#ctor
  parent: System.Windows.Media.Animation.Animatable
  isExternal: false
  name: Animatable()
  nameWithType: Animatable.Animatable()
  fullName: System.Windows.Media.Animation.Animatable.Animatable()
- uid: System.Windows.Media.Animation.Animatable.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock)
  parent: System.Windows.Media.Animation.Animatable
  isExternal: false
  name: ApplyAnimationClock(DependencyProperty,AnimationClock)
  nameWithType: Animatable.ApplyAnimationClock(DependencyProperty,AnimationClock)
  fullName: System.Windows.Media.Animation.Animatable.ApplyAnimationClock(DependencyProperty,AnimationClock)
- uid: System.Windows.DependencyProperty
  parent: System.Windows
  isExternal: false
  name: DependencyProperty
  nameWithType: DependencyProperty
  fullName: System.Windows.DependencyProperty
- uid: System.Windows.Media.Animation.AnimationClock
  parent: System.Windows.Media.Animation
  isExternal: false
  name: AnimationClock
  nameWithType: AnimationClock
  fullName: System.Windows.Media.Animation.AnimationClock
- uid: System.Windows.Media.Animation.Animatable.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock,System.Windows.Media.Animation.HandoffBehavior)
  parent: System.Windows.Media.Animation.Animatable
  isExternal: false
  name: ApplyAnimationClock(DependencyProperty,AnimationClock,HandoffBehavior)
  nameWithType: Animatable.ApplyAnimationClock(DependencyProperty,AnimationClock,HandoffBehavior)
  fullName: System.Windows.Media.Animation.Animatable.ApplyAnimationClock(DependencyProperty,AnimationClock,HandoffBehavior)
- uid: System.Windows.Media.Animation.HandoffBehavior
  parent: System.Windows.Media.Animation
  isExternal: false
  name: HandoffBehavior
  nameWithType: HandoffBehavior
  fullName: System.Windows.Media.Animation.HandoffBehavior
- uid: System.Windows.Media.Animation.Animatable.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline)
  parent: System.Windows.Media.Animation.Animatable
  isExternal: false
  name: BeginAnimation(DependencyProperty,AnimationTimeline)
  nameWithType: Animatable.BeginAnimation(DependencyProperty,AnimationTimeline)
  fullName: System.Windows.Media.Animation.Animatable.BeginAnimation(DependencyProperty,AnimationTimeline)
- uid: System.Windows.Media.Animation.AnimationTimeline
  parent: System.Windows.Media.Animation
  isExternal: false
  name: AnimationTimeline
  nameWithType: AnimationTimeline
  fullName: System.Windows.Media.Animation.AnimationTimeline
- uid: System.Windows.Media.Animation.Animatable.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline,System.Windows.Media.Animation.HandoffBehavior)
  parent: System.Windows.Media.Animation.Animatable
  isExternal: false
  name: BeginAnimation(DependencyProperty,AnimationTimeline,HandoffBehavior)
  nameWithType: Animatable.BeginAnimation(DependencyProperty,AnimationTimeline,HandoffBehavior)
  fullName: System.Windows.Media.Animation.Animatable.BeginAnimation(DependencyProperty,AnimationTimeline,HandoffBehavior)
- uid: System.Windows.Media.Animation.Animatable.Clone
  parent: System.Windows.Media.Animation.Animatable
  isExternal: false
  name: Clone()
  nameWithType: Animatable.Clone()
  fullName: System.Windows.Media.Animation.Animatable.Clone()
- uid: System.Windows.Media.Animation.Animatable
  parent: System.Windows.Media.Animation
  isExternal: false
  name: Animatable
  nameWithType: Animatable
  fullName: System.Windows.Media.Animation.Animatable
- uid: System.Windows.Media.Animation.Animatable.FreezeCore(System.Boolean)
  parent: System.Windows.Media.Animation.Animatable
  isExternal: false
  name: FreezeCore(Boolean)
  nameWithType: Animatable.FreezeCore(Boolean)
  fullName: System.Windows.Media.Animation.Animatable.FreezeCore(Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Windows.Media.Animation.Animatable.GetAnimationBaseValue(System.Windows.DependencyProperty)
  parent: System.Windows.Media.Animation.Animatable
  isExternal: false
  name: GetAnimationBaseValue(DependencyProperty)
  nameWithType: Animatable.GetAnimationBaseValue(DependencyProperty)
  fullName: System.Windows.Media.Animation.Animatable.GetAnimationBaseValue(DependencyProperty)
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Windows.Media.Animation.Animatable.HasAnimatedProperties
  parent: System.Windows.Media.Animation.Animatable
  isExternal: false
  name: HasAnimatedProperties
  nameWithType: Animatable.HasAnimatedProperties
  fullName: System.Windows.Media.Animation.Animatable.HasAnimatedProperties
- uid: System.Windows.Media.Animation.Animatable.ShouldSerializeStoredWeakReference(System.Windows.DependencyObject)
  parent: System.Windows.Media.Animation.Animatable
  isExternal: false
  name: ShouldSerializeStoredWeakReference(DependencyObject)
  nameWithType: Animatable.ShouldSerializeStoredWeakReference(DependencyObject)
  fullName: System.Windows.Media.Animation.Animatable.ShouldSerializeStoredWeakReference(DependencyObject)
- uid: System.Windows.DependencyObject
  parent: System.Windows
  isExternal: false
  name: DependencyObject
  nameWithType: DependencyObject
  fullName: System.Windows.DependencyObject
- uid: System.Windows.Media.Animation.Animatable.#ctor*
  parent: System.Windows.Media.Animation.Animatable
  isExternal: false
  name: Animatable
  nameWithType: Animatable.Animatable
- uid: System.Windows.Media.Animation.Animatable.ApplyAnimationClock*
  parent: System.Windows.Media.Animation.Animatable
  isExternal: false
  name: ApplyAnimationClock
  nameWithType: Animatable.ApplyAnimationClock
- uid: System.Windows.Media.Animation.Animatable.BeginAnimation*
  parent: System.Windows.Media.Animation.Animatable
  isExternal: false
  name: BeginAnimation
  nameWithType: Animatable.BeginAnimation
- uid: System.Windows.Media.Animation.Animatable.Clone*
  parent: System.Windows.Media.Animation.Animatable
  isExternal: false
  name: Clone
  nameWithType: Animatable.Clone
- uid: System.Windows.Media.Animation.Animatable.FreezeCore*
  parent: System.Windows.Media.Animation.Animatable
  isExternal: false
  name: FreezeCore
  nameWithType: Animatable.FreezeCore
- uid: System.Windows.Media.Animation.Animatable.GetAnimationBaseValue*
  parent: System.Windows.Media.Animation.Animatable
  isExternal: false
  name: GetAnimationBaseValue
  nameWithType: Animatable.GetAnimationBaseValue
- uid: System.Windows.Media.Animation.Animatable.HasAnimatedProperties*
  parent: System.Windows.Media.Animation.Animatable
  isExternal: false
  name: HasAnimatedProperties
  nameWithType: Animatable.HasAnimatedProperties
- uid: System.Windows.Media.Animation.Animatable.ShouldSerializeStoredWeakReference*
  parent: System.Windows.Media.Animation.Animatable
  isExternal: false
  name: ShouldSerializeStoredWeakReference
  nameWithType: Animatable.ShouldSerializeStoredWeakReference
