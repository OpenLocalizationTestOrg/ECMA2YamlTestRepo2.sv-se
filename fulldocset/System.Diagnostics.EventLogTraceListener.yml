### YamlMime:ManagedReference
items:
- uid: System.Diagnostics.EventLogTraceListener
  id: EventLogTraceListener
  children:
  - System.Diagnostics.EventLogTraceListener.#ctor
  - System.Diagnostics.EventLogTraceListener.#ctor(System.Diagnostics.EventLog)
  - System.Diagnostics.EventLogTraceListener.#ctor(System.String)
  - System.Diagnostics.EventLogTraceListener.Close
  - System.Diagnostics.EventLogTraceListener.Dispose(System.Boolean)
  - System.Diagnostics.EventLogTraceListener.EventLog
  - System.Diagnostics.EventLogTraceListener.Name
  - System.Diagnostics.EventLogTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object)
  - System.Diagnostics.EventLogTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object[])
  - System.Diagnostics.EventLogTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String)
  - System.Diagnostics.EventLogTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String,System.Object[])
  - System.Diagnostics.EventLogTraceListener.Write(System.String)
  - System.Diagnostics.EventLogTraceListener.WriteLine(System.String)
  langs:
  - csharp
  name: EventLogTraceListener
  nameWithType: EventLogTraceListener
  fullName: System.Diagnostics.EventLogTraceListener
  type: Class
  summary: "Ger en enkel lyssnare som leder spårning och felsökning utdata till en <xref href=&quot;System.Diagnostics.EventLog&quot;> </xref>."
  remarks: "En instans av den här EventLogTraceListener kan läggas till i <xref:System.Diagnostics.Debug.Listeners%2A?displayProperty=fullName>, <xref:System.Diagnostics.Trace.Listeners%2A?displayProperty=fullName>, eller <xref:System.Diagnostics.TraceSource.Listeners%2A?displayProperty=fullName>samlingar att skicka utdata från spårning eller felsökning i <xref:System.Diagnostics.EventLog>.</xref:System.Diagnostics.EventLog> </xref:System.Diagnostics.TraceSource.Listeners%2A?displayProperty=fullName> </xref:System.Diagnostics.Trace.Listeners%2A?displayProperty=fullName> </xref:System.Diagnostics.Debug.Listeners%2A?displayProperty=fullName> Du kan lägga till en instans i koden eller ange i programmets konfigurationsfil. Om du vill lägga till en EventLogTraceListener med hjälp av en programkonfigurationsfil, redigera filen som motsvarar namnet på programmet eller filen app.config i en [!INCLUDE[vsprvslong](~/add/includes/ajax-current-ext-md.md)] projekt. Infoga ett element för en EventLogTraceListener i den här filen.       I följande exempel läggs ett EventLogTraceListener-objekt med namnet `myListener` till den <xref:System.Diagnostics.Trace.Listeners%2A?displayProperty=fullName>samling.</xref:System.Diagnostics.Trace.Listeners%2A?displayProperty=fullName> Den `initializeData` parametern anger namnet på källan för händelseloggning som ska skickas till den <xref:System.Diagnostics.EventLogTraceListener.%23ctor%28System.String%29>konstruktor.</xref:System.Diagnostics.EventLogTraceListener.%23ctor%28System.String%29>      ```   <configuration>     <system.diagnostics>       <trace autoflush=&quot;false&quot; indentsize=&quot;4&quot;>         <listeners>           <add name=&quot;myListener&quot;             type=&quot;System.Diagnostics.EventLogTraceListener&quot;             initializeData=&quot;TraceListenerLog&quot; />         </listeners>       </trace>     </system.diagnostics>   </configuration>   ```Läs mer om hur du lägger till Samlingsspårlyssnarna i programmets konfigurationsfil, eller.      > [!NOTE] > Om den <xref:System.Diagnostics.EventLog.Source%2A>för händelseloggen som är associerad med EventLogTraceListener-instans inte finns, skapas en ny händelsekälla.</xref:System.Diagnostics.EventLog.Source%2A> Om du vill skapa en händelsekälla i Windows Vista, Windows XP Professional eller Windows Server 2003, måste du ha administratörsbehörighet.   >> Orsaken till det här kravet är att alla händelseloggar, inklusive säkerhet, måste sökas igenom för att avgöra om händelsekällan är unika. I Windows Vista, har användare inte behörighet att komma åt säkerhetsloggen; Därför kan en <xref:System.Security.SecurityException>genereras.</xref:System.Security.SecurityException>   >> Kontroll av användarkonto (User Account Control) anger behörigheter för en användare i Windows Vista. Om du är medlem i gruppen inbyggda administratörer tilldelas två körning åtkomst-token: en standardanvändares åtkomst-token och en administratör åtkomst-token. Som standard är standard användarrollen. Om du vill köra koden som ansluter till säkerhetsloggen måste du först höja din behörighet från standardanvändare till administratören. Du kan göra detta när du startar ett program genom att högerklicka på programikonen och som anger att du vill köra som administratör.       Klassen innehåller den <xref:System.Diagnostics.EventLogTraceListener.EventLog%2A>egenskapen att hämta eller ange händelseloggen som tar emot spårning och felsökning av utdata och <xref:System.Diagnostics.EventLogTraceListener.Name%2A>egenskap som ska innehålla namnet på EventLogTraceListener.</xref:System.Diagnostics.EventLogTraceListener.Name%2A> </xref:System.Diagnostics.EventLogTraceListener.EventLog%2A>       Den <xref:System.Diagnostics.EventLogTraceListener.Close%2A>metod stänger händelseloggen så att de inte längre får spårning och felsökning utdata.</xref:System.Diagnostics.EventLogTraceListener.Close%2A> Den <xref:System.Diagnostics.EventLogTraceListener.Write%2A>och <xref:System.Diagnostics.EventLogTraceListener.WriteLine%2A>metoder skriva ett meddelande till händelseloggen.</xref:System.Diagnostics.EventLogTraceListener.WriteLine%2A> </xref:System.Diagnostics.EventLogTraceListener.Write%2A>      > [!NOTE] > För att undvika risken för stora mängder data skrivs till händelseloggen i EventLogTraceListener inte utdata valfria spårningsdata som anges av den <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A>egenskapen.</xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A>"
  example:
  - "The following example creates a trace listener that sends output to an event log. First, the code creates a new EventLogTraceListener that uses the source `myEventLogSource`. Next, `myTraceListener` is added to the <xref:System.Diagnostics.Trace.Listeners%2A?displayProperty=fullName> collection. Finally, the example sends a line of output to the <xref:System.Diagnostics.Trace.Listeners%2A> object.  \n  \n [!code-cs[Classic EventLogTraceListener Example#1](~/add/codesnippet/csharp/t-system.diagnostics.eve_3_1.cs)]\n [!code-vb[Classic EventLogTraceListener Example#1](~/add/codesnippet/visualbasic/t-system.diagnostics.eve_3_1.vb)]\n [!code-cpp[Classic EventLogTraceListener Example#1](~/add/codesnippet/cpp/t-system.diagnostics.eve_3_1.cpp)]"
  syntax:
    content: 'public sealed class EventLogTraceListener : System.Diagnostics.TraceListener'
  inheritance:
  - System.Object
  - System.MarshalByRefObject
  - System.Diagnostics.TraceListener
  implements: []
  inheritedMembers:
  - System.Diagnostics.TraceListener.Attributes
  - System.Diagnostics.TraceListener.Dispose
  - System.Diagnostics.TraceListener.Fail(System.String)
  - System.Diagnostics.TraceListener.Fail(System.String,System.String)
  - System.Diagnostics.TraceListener.Filter
  - System.Diagnostics.TraceListener.Flush
  - System.Diagnostics.TraceListener.GetSupportedAttributes
  - System.Diagnostics.TraceListener.IndentLevel
  - System.Diagnostics.TraceListener.IndentSize
  - System.Diagnostics.TraceListener.IsThreadSafe
  - System.Diagnostics.TraceListener.NeedIndent
  - System.Diagnostics.TraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32)
  - System.Diagnostics.TraceListener.TraceOutputOptions
  - System.Diagnostics.TraceListener.TraceTransfer(System.Diagnostics.TraceEventCache,System.String,System.Int32,System.String,System.Guid)
  - System.Diagnostics.TraceListener.Write(System.Object)
  - System.Diagnostics.TraceListener.Write(System.Object,System.String)
  - System.Diagnostics.TraceListener.Write(System.String,System.String)
  - System.Diagnostics.TraceListener.WriteIndent
  - System.Diagnostics.TraceListener.WriteLine(System.Object)
  - System.Diagnostics.TraceListener.WriteLine(System.Object,System.String)
  - System.Diagnostics.TraceListener.WriteLine(System.String,System.String)
  - System.MarshalByRefObject.CreateObjRef(System.Type)
  - System.MarshalByRefObject.GetLifetimeService
  - System.MarshalByRefObject.InitializeLifetimeService
  - System.MarshalByRefObject.MemberwiseClone(System.Boolean)
  platform:
  - net462
- uid: System.Diagnostics.EventLogTraceListener.#ctor
  id: '#ctor'
  parent: System.Diagnostics.EventLogTraceListener
  langs:
  - csharp
  name: EventLogTraceListener()
  nameWithType: EventLogTraceListener.EventLogTraceListener()
  fullName: System.Diagnostics.EventLogTraceListener.EventLogTraceListener()
  type: Constructor
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Initierar en ny instans av den <xref href=&quot;System.Diagnostics.EventLogTraceListener&quot;> </xref> klass utan en spårningslyssnaren."
  syntax:
    content: public EventLogTraceListener ();
    parameters: []
  overload: System.Diagnostics.EventLogTraceListener.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.EventLogTraceListener.#ctor(System.Diagnostics.EventLog)
  id: '#ctor(System.Diagnostics.EventLog)'
  parent: System.Diagnostics.EventLogTraceListener
  langs:
  - csharp
  name: EventLogTraceListener(EventLog)
  nameWithType: EventLogTraceListener.EventLogTraceListener(EventLog)
  fullName: System.Diagnostics.EventLogTraceListener.EventLogTraceListener(EventLog)
  type: Constructor
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Initierar en ny instans av den <xref href=&quot;System.Diagnostics.EventLogTraceListener&quot;> </xref> klassen med hjälp av den angivna händelseloggen."
  syntax:
    content: public EventLogTraceListener (System.Diagnostics.EventLog eventLog);
    parameters:
    - id: eventLog
      type: System.Diagnostics.EventLog
      description: "Att skriva till händelseloggen."
  overload: System.Diagnostics.EventLogTraceListener.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.EventLogTraceListener.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: System.Diagnostics.EventLogTraceListener
  langs:
  - csharp
  name: EventLogTraceListener(String)
  nameWithType: EventLogTraceListener.EventLogTraceListener(String)
  fullName: System.Diagnostics.EventLogTraceListener.EventLogTraceListener(String)
  type: Constructor
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Initierar en ny instans av den <xref href=&quot;System.Diagnostics.EventLogTraceListener&quot;> </xref> klassen med hjälp av den angivna källan."
  syntax:
    content: public EventLogTraceListener (string source);
    parameters:
    - id: source
      type: System.String
      description: "Namnet på en befintlig datakälla i händelseloggen."
  overload: System.Diagnostics.EventLogTraceListener.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.EventLogTraceListener.Close
  id: Close
  parent: System.Diagnostics.EventLogTraceListener
  langs:
  - csharp
  name: Close()
  nameWithType: EventLogTraceListener.Close()
  fullName: System.Diagnostics.EventLogTraceListener.Close()
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Stänger händelseloggen så att den inte längre får spårning och felsökning utdata."
  syntax:
    content: public override void Close ();
    parameters: []
  overload: System.Diagnostics.EventLogTraceListener.Close*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.EventLogTraceListener.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.Diagnostics.EventLogTraceListener
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: EventLogTraceListener.Dispose(Boolean)
  fullName: System.Diagnostics.EventLogTraceListener.Dispose(Boolean)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  syntax:
    content: protected override void Dispose (bool disposing);
    parameters:
    - id: disposing
      type: System.Boolean
      description: "Som ska läggas till."
  overload: System.Diagnostics.EventLogTraceListener.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.EventLogTraceListener.EventLog
  id: EventLog
  parent: System.Diagnostics.EventLogTraceListener
  langs:
  - csharp
  name: EventLog
  nameWithType: EventLogTraceListener.EventLog
  fullName: System.Diagnostics.EventLogTraceListener.EventLog
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Hämtar eller anger att skriva till händelseloggen."
  syntax:
    content: public System.Diagnostics.EventLog EventLog { get; set; }
    return:
      type: System.Diagnostics.EventLog
      description: "Att skriva till händelseloggen."
  overload: System.Diagnostics.EventLogTraceListener.EventLog*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.EventLogTraceListener.Name
  id: Name
  parent: System.Diagnostics.EventLogTraceListener
  langs:
  - csharp
  name: Name
  nameWithType: EventLogTraceListener.Name
  fullName: System.Diagnostics.EventLogTraceListener.Name
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Hämtar eller anger namnet på det här <xref href=&quot;System.Diagnostics.EventLogTraceListener&quot;> </xref>."
  remarks: "Den här egenskapen som standard för händelseloggen."
  syntax:
    content: public override string Name { get; set; }
    return:
      type: System.String
      description: "Namnet på den här spårningslyssnaren."
  overload: System.Diagnostics.EventLogTraceListener.Name*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.EventLogTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object)
  id: TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object)
  parent: System.Diagnostics.EventLogTraceListener
  langs:
  - csharp
  name: TraceData(TraceEventCache,String,TraceEventType,Int32,Object)
  nameWithType: EventLogTraceListener.TraceData(TraceEventCache,String,TraceEventType,Int32,Object)
  fullName: System.Diagnostics.EventLogTraceListener.TraceData(TraceEventCache,String,TraceEventType,Int32,Object)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Skrivningar spårningsinformation, ett dataobjekt och händelseinformation i händelseloggen."
  remarks: "> [!IMPORTANT]> Det <xref:System.Diagnostics.EventLogTraceListener.TraceData%2A>metoder är inte avsedda att anropas av programkoden.</xref:System.Diagnostics.EventLogTraceListener.TraceData%2A> De anropas av den <xref:System.Diagnostics.Debug>, <xref:System.Diagnostics.Trace>, och <xref:System.Diagnostics.TraceSource>klasser till utdata spårningsdata.</xref:System.Diagnostics.TraceSource> </xref:System.Diagnostics.Trace> </xref:System.Diagnostics.Debug>       Den <xref:System.Diagnostics.EventLogTraceListener.TraceData%2A>metoden, till exempel den <xref:System.Diagnostics.EventLogTraceListener.TraceEvent%2A>metoden är avsedd för automatiserade verktyg, men kan även bifoga ytterligare objekt, till exempel en undantag instans, till spåret.</xref:System.Diagnostics.EventLogTraceListener.TraceEvent%2A> </xref:System.Diagnostics.EventLogTraceListener.TraceData%2A>       Den `eventCache` och `source` parametrar används för att avgöra om händelsen ska spåras. `id`används för att skapa en <xref:System.Diagnostics.EventInstance>objekt och <xref:System.Diagnostics.TraceEventType>är motsvarade en <xref:System.Diagnostics.EventLogEntryType>för den <xref:System.Diagnostics.EventInstance.EntryType%2A>egenskapen.</xref:System.Diagnostics.EventInstance.EntryType%2A> </xref:System.Diagnostics.EventLogEntryType> </xref:System.Diagnostics.TraceEventType> </xref:System.Diagnostics.EventInstance> Den <xref:System.Diagnostics.EventInstance>skrivs till händelseloggen med den `data` objekt, formateras som en sträng med hjälp av den <xref:System.Diagnostics.EventLog.WriteEvent%2A>metoden.</xref:System.Diagnostics.EventLog.WriteEvent%2A> </xref:System.Diagnostics.EventInstance>      > [!NOTE] > Det maximala värdet för den `id` parametern är 65 535. Om den `id` det angivna värdet är större än 65 535, det maximala värdet används."
  syntax:
    content: public override void TraceData (System.Diagnostics.TraceEventCache eventCache, string source, System.Diagnostics.TraceEventType severity, int id, object data);
    parameters:
    - id: eventCache
      type: System.Diagnostics.TraceEventCache
      description: "Ett objekt som innehåller aktuellt process-ID, tråd-ID och stacken spårningsinformation."
    - id: source
      type: System.String
      description: "Ett namn som används för att identifiera utdata; vanligtvis namnet på programmet som genererade spårningshändelsen."
    - id: severity
      type: System.Diagnostics.TraceEventType
      description: "En av uppräkningsvärdena som anger vilken typ av händelse som har orsakat spårningen."
    - id: id
      type: System.Int32
      description: "En numerisk identifierare för händelsen. Kombinationen av `source` och `id` identifierar en händelse."
    - id: data
      type: System.Object
      description: "Ett dataobjekt att skriva till utdatafilen eller dataström."
  overload: System.Diagnostics.EventLogTraceListener.TraceData*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>source</code>har inte angetts.       - eller - loggposten är längre än 32 766 tecken."
  platform:
  - net462
- uid: System.Diagnostics.EventLogTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object[])
  id: TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object[])
  parent: System.Diagnostics.EventLogTraceListener
  langs:
  - csharp
  name: TraceData(TraceEventCache,String,TraceEventType,Int32,Object[])
  nameWithType: EventLogTraceListener.TraceData(TraceEventCache,String,TraceEventType,Int32,Object[])
  fullName: System.Diagnostics.EventLogTraceListener.TraceData(TraceEventCache,String,TraceEventType,Int32,Object[])
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Skrivningar spåra information, en uppsättning dataobjekt och händelseinformation i händelseloggen."
  remarks: "> [!IMPORTANT]> Det <xref:System.Diagnostics.EventLogTraceListener.TraceData%2A>metoder är inte avsedda att anropas av programkoden.</xref:System.Diagnostics.EventLogTraceListener.TraceData%2A> De anropas av den <xref:System.Diagnostics.Debug>, <xref:System.Diagnostics.Trace>, och <xref:System.Diagnostics.TraceSource>klasser till utdata spårningsdata.</xref:System.Diagnostics.TraceSource> </xref:System.Diagnostics.Trace> </xref:System.Diagnostics.Debug>       Den <xref:System.Diagnostics.EventLogTraceListener.TraceData%2A>metoden, till exempel den <xref:System.Diagnostics.EventLogTraceListener.TraceEvent%2A>metoden är avsedd för automatiserade verktyg, men kan även bifoga ytterligare objekt, till exempel en undantag instans, till spåret.</xref:System.Diagnostics.EventLogTraceListener.TraceEvent%2A> </xref:System.Diagnostics.EventLogTraceListener.TraceData%2A>       Den `severity` och `id` parameterdata används för att skapa ett <xref:System.Diagnostics.EventInstance>-objekt som ska skrivas till händelseloggen med data från en matris för dataobjekt.</xref:System.Diagnostics.EventInstance>       Den `eventCache` och `source` parametrar används för att avgöra om händelsen ska spåras. `id`används för att skapa en <xref:System.Diagnostics.EventInstance>objekt och <xref:System.Diagnostics.TraceEventType>är motsvarade en <xref:System.Diagnostics.EventLogEntryType>för den <xref:System.Diagnostics.EventInstance.EntryType%2A>egenskapen.</xref:System.Diagnostics.EventInstance.EntryType%2A> </xref:System.Diagnostics.EventLogEntryType> </xref:System.Diagnostics.TraceEventType> </xref:System.Diagnostics.EventInstance> Den <xref:System.Diagnostics.EventInstance>skrivs till händelseloggen med den `data` objektmatris formateras som en strängmatris med hjälp av den <xref:System.Diagnostics.EventLog.WriteEvent%2A>metoden.</xref:System.Diagnostics.EventLog.WriteEvent%2A> </xref:System.Diagnostics.EventInstance>      > [!NOTE] > Det maximala värdet för den `id` parametern är 65 535. Om den `id` det angivna värdet är större än 65 535, det maximala värdet används."
  syntax:
    content: public override void TraceData (System.Diagnostics.TraceEventCache eventCache, string source, System.Diagnostics.TraceEventType severity, int id, object[] data);
    parameters:
    - id: eventCache
      type: System.Diagnostics.TraceEventCache
      description: "Ett objekt som innehåller aktuellt process-ID, tråd-ID och stacken spårningsinformation."
    - id: source
      type: System.String
      description: "Ett namn som används för att identifiera utdata; vanligtvis namnet på programmet som genererade spårningshändelsen."
    - id: severity
      type: System.Diagnostics.TraceEventType
      description: "En av uppräkningsvärdena som anger vilken typ av händelse som har orsakat spårningen."
    - id: id
      type: System.Int32
      description: "En numerisk identifierare för händelsen. Kombinationen av `source` och `id` identifierar en händelse."
    - id: data
      type: System.Object[]
      description: "En matris med-dataobjekt."
  overload: System.Diagnostics.EventLogTraceListener.TraceData*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>source</code>har inte angetts.       - eller - loggposten är längre än 32 766 tecken."
  platform:
  - net462
- uid: System.Diagnostics.EventLogTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String)
  id: TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String)
  parent: System.Diagnostics.EventLogTraceListener
  langs:
  - csharp
  name: TraceEvent(TraceEventCache,String,TraceEventType,Int32,String)
  nameWithType: EventLogTraceListener.TraceEvent(TraceEventCache,String,TraceEventType,Int32,String)
  fullName: System.Diagnostics.EventLogTraceListener.TraceEvent(TraceEventCache,String,TraceEventType,Int32,String)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Skrivningar spåra information, meddelandet och händelseinformation i händelseloggen."
  remarks: "> [!IMPORTANT]> Det <xref:System.Diagnostics.EventLogTraceListener.TraceEvent%2A>metoder är inte avsedda att anropas av programkoden.</xref:System.Diagnostics.EventLogTraceListener.TraceEvent%2A> De här metoderna anropas av metoder för den <xref:System.Diagnostics.Debug>, <xref:System.Diagnostics.Trace>, och <xref:System.Diagnostics.TraceSource>klasser för att skriva spårningsdata.</xref:System.Diagnostics.TraceSource> </xref:System.Diagnostics.Trace> </xref:System.Diagnostics.Debug>       Den <xref:System.Diagnostics.EventLogTraceListener.TraceEvent%2A>metoden är avsedd att spåra händelser som kan bearbetas automatiskt med verktyg.</xref:System.Diagnostics.EventLogTraceListener.TraceEvent%2A> Ett övervakningsverktyg kan till exempel meddela en administratör, om en viss händelse spåras från en särskild källa.       Den `eventCache` och `source` parametrar används för att avgöra om händelsen ska spåras. `id`används för att skapa en <xref:System.Diagnostics.EventInstance>objekt och <xref:System.Diagnostics.TraceEventType>är motsvarade en <xref:System.Diagnostics.EventLogEntryType>för den <xref:System.Diagnostics.EventInstance.EntryType%2A>egenskapen.</xref:System.Diagnostics.EventInstance.EntryType%2A> </xref:System.Diagnostics.EventLogEntryType> </xref:System.Diagnostics.TraceEventType> </xref:System.Diagnostics.EventInstance> Den <xref:System.Diagnostics.EventInstance>skrivs till händelseloggen med den `message` data med hjälp av den <xref:System.Diagnostics.EventLog.WriteEvent%2A>metoden.</xref:System.Diagnostics.EventLog.WriteEvent%2A> </xref:System.Diagnostics.EventInstance>      > [!NOTE] > Det maximala värdet för den `id` parametern är 65 535. Om den `id` det angivna värdet är större än 65 535, det maximala värdet används."
  syntax:
    content: public override void TraceEvent (System.Diagnostics.TraceEventCache eventCache, string source, System.Diagnostics.TraceEventType severity, int id, string message);
    parameters:
    - id: eventCache
      type: System.Diagnostics.TraceEventCache
      description: "Ett objekt som innehåller aktuellt process-ID, tråd-ID och stacken spårningsinformation."
    - id: source
      type: System.String
      description: "Ett namn som används för att identifiera utdata; vanligtvis namnet på programmet som genererade spårningshändelsen."
    - id: severity
      type: System.Diagnostics.TraceEventType
      description: "En av uppräkningsvärdena som anger vilken typ av händelse som har orsakat spårningen."
    - id: id
      type: System.Int32
      description: "En numerisk identifierare för händelsen. Kombinationen av `source` och `id` identifierar en händelse."
    - id: message
      type: System.String
      description: "Spårningsmeddelande."
  overload: System.Diagnostics.EventLogTraceListener.TraceEvent*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>source</code>har inte angetts.       - eller - loggposten är längre än 32 766 tecken."
  platform:
  - net462
- uid: System.Diagnostics.EventLogTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String,System.Object[])
  id: TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String,System.Object[])
  parent: System.Diagnostics.EventLogTraceListener
  langs:
  - csharp
  name: TraceEvent(TraceEventCache,String,TraceEventType,Int32,String,Object[])
  nameWithType: EventLogTraceListener.TraceEvent(TraceEventCache,String,TraceEventType,Int32,String,Object[])
  fullName: System.Diagnostics.EventLogTraceListener.TraceEvent(TraceEventCache,String,TraceEventType,Int32,String,Object[])
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Skrivningar spåra information, en formaterad matris av objekt och händelseinformation i händelseloggen."
  remarks: "> [!IMPORTANT]> Det <xref:System.Diagnostics.EventLogTraceListener.TraceEvent%2A>metoder är inte avsedda att anropas av programkoden.</xref:System.Diagnostics.EventLogTraceListener.TraceEvent%2A> De här metoderna anropas av metoder för den <xref:System.Diagnostics.Debug>, <xref:System.Diagnostics.Trace>, och <xref:System.Diagnostics.TraceSource>klasser för att skriva spårningsdata.</xref:System.Diagnostics.TraceSource> </xref:System.Diagnostics.Trace> </xref:System.Diagnostics.Debug>       Den <xref:System.Diagnostics.EventLogTraceListener.TraceEvent%2A>metoden är avsedd att spåra händelser som kan bearbetas automatiskt med verktyg.</xref:System.Diagnostics.EventLogTraceListener.TraceEvent%2A> Ett övervakningsverktyg kan till exempel meddela en administratör, om en viss händelse spåras från en särskild källa.       Den `eventCache` och `source` parametrar används för att avgöra om händelsen ska spåras. `id`används för att skapa en <xref:System.Diagnostics.EventInstance>objekt och <xref:System.Diagnostics.TraceEventType>är motsvarade en <xref:System.Diagnostics.EventLogEntryType>för den <xref:System.Diagnostics.EventInstance.EntryType%2A>egenskapen.</xref:System.Diagnostics.EventInstance.EntryType%2A> </xref:System.Diagnostics.EventLogEntryType> </xref:System.Diagnostics.TraceEventType> </xref:System.Diagnostics.EventInstance> Den <xref:System.Diagnostics.EventInstance>skrivs i händelseloggen med hjälp av den <xref:System.Diagnostics.EventLog.WriteEvent%2A>metoden med meddelandet från den `format` och `args` parametrar.</xref:System.Diagnostics.EventLog.WriteEvent%2A> </xref:System.Diagnostics.EventInstance> Den `args` objektmatris konverteras till en sträng med hjälp av den <xref:System.String.Format%2A>metoden och skickar den `format` sträng och `args` matrisen för att formatera strängen som meddelandet för händelseloggen</xref:System.String.Format%2A>      > [!NOTE] > Det maximala värdet för den `id` parametern är 65 535. Om den `id` det angivna värdet är större än 65 535, det maximala värdet används."
  syntax:
    content: public override void TraceEvent (System.Diagnostics.TraceEventCache eventCache, string source, System.Diagnostics.TraceEventType severity, int id, string format, object[] args);
    parameters:
    - id: eventCache
      type: System.Diagnostics.TraceEventCache
      description: "Ett objekt som innehåller aktuellt process-ID, tråd-ID och stacken spårningsinformation."
    - id: source
      type: System.String
      description: "Ett namn som används för att identifiera utdata; vanligtvis namnet på programmet som genererade spårningshändelsen."
    - id: severity
      type: System.Diagnostics.TraceEventType
      description: "En av uppräkningsvärdena som anger vilken typ av händelse som har orsakat spårningen."
    - id: id
      type: System.Int32
      description: "En numerisk identifierare för händelsen. Kombinationen av `source` och `id` identifierar en händelse."
    - id: format
      type: System.String
      description: "En formatsträng som innehåller noll eller flera format-objekt som motsvarar objekt i den `args` matris."
    - id: args
      type: System.Object[]
      description: "En <xref uid=&quot;langword_csharp_object&quot; name=&quot;object&quot; href=&quot;&quot;> </xref> matris som innehåller noll eller flera objekt att formatera."
  overload: System.Diagnostics.EventLogTraceListener.TraceEvent*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>source</code>har inte angetts.       - eller - loggposten är längre än 32 766 tecken."
  platform:
  - net462
- uid: System.Diagnostics.EventLogTraceListener.Write(System.String)
  id: Write(System.String)
  parent: System.Diagnostics.EventLogTraceListener
  langs:
  - csharp
  name: Write(String)
  nameWithType: EventLogTraceListener.Write(String)
  fullName: System.Diagnostics.EventLogTraceListener.Write(String)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Skriver ett meddelande till händelseloggen för den här instansen."
  syntax:
    content: public override void Write (string message);
    parameters:
    - id: message
      type: System.String
      description: "Meddelandet att skriva."
  overload: System.Diagnostics.EventLogTraceListener.Write*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>message</code>längre än 32 766 tecken."
  platform:
  - net462
- uid: System.Diagnostics.EventLogTraceListener.WriteLine(System.String)
  id: WriteLine(System.String)
  parent: System.Diagnostics.EventLogTraceListener
  langs:
  - csharp
  name: WriteLine(String)
  nameWithType: EventLogTraceListener.WriteLine(String)
  fullName: System.Diagnostics.EventLogTraceListener.WriteLine(String)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Skriver ett meddelande till händelseloggen för den här instansen."
  syntax:
    content: public override void WriteLine (string message);
    parameters:
    - id: message
      type: System.String
      description: "Meddelandet att skriva."
  overload: System.Diagnostics.EventLogTraceListener.WriteLine*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>message</code>längre än 32 766 tecken."
  platform:
  - net462
references:
- uid: System.Diagnostics.TraceListener
  isExternal: false
  name: System.Diagnostics.TraceListener
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.Diagnostics.EventLogTraceListener.#ctor
  parent: System.Diagnostics.EventLogTraceListener
  isExternal: false
  name: EventLogTraceListener()
  nameWithType: EventLogTraceListener.EventLogTraceListener()
  fullName: System.Diagnostics.EventLogTraceListener.EventLogTraceListener()
- uid: System.Diagnostics.EventLogTraceListener.#ctor(System.Diagnostics.EventLog)
  parent: System.Diagnostics.EventLogTraceListener
  isExternal: false
  name: EventLogTraceListener(EventLog)
  nameWithType: EventLogTraceListener.EventLogTraceListener(EventLog)
  fullName: System.Diagnostics.EventLogTraceListener.EventLogTraceListener(EventLog)
- uid: System.Diagnostics.EventLog
  parent: System.Diagnostics
  isExternal: false
  name: EventLog
  nameWithType: EventLog
  fullName: System.Diagnostics.EventLog
- uid: System.Diagnostics.EventLogTraceListener.#ctor(System.String)
  parent: System.Diagnostics.EventLogTraceListener
  isExternal: false
  name: EventLogTraceListener(String)
  nameWithType: EventLogTraceListener.EventLogTraceListener(String)
  fullName: System.Diagnostics.EventLogTraceListener.EventLogTraceListener(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Diagnostics.EventLogTraceListener.Close
  parent: System.Diagnostics.EventLogTraceListener
  isExternal: false
  name: Close()
  nameWithType: EventLogTraceListener.Close()
  fullName: System.Diagnostics.EventLogTraceListener.Close()
- uid: System.Diagnostics.EventLogTraceListener.Dispose(System.Boolean)
  parent: System.Diagnostics.EventLogTraceListener
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: EventLogTraceListener.Dispose(Boolean)
  fullName: System.Diagnostics.EventLogTraceListener.Dispose(Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Diagnostics.EventLogTraceListener.EventLog
  parent: System.Diagnostics.EventLogTraceListener
  isExternal: false
  name: EventLog
  nameWithType: EventLogTraceListener.EventLog
  fullName: System.Diagnostics.EventLogTraceListener.EventLog
- uid: System.Diagnostics.EventLogTraceListener.Name
  parent: System.Diagnostics.EventLogTraceListener
  isExternal: false
  name: Name
  nameWithType: EventLogTraceListener.Name
  fullName: System.Diagnostics.EventLogTraceListener.Name
- uid: System.Diagnostics.EventLogTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object)
  parent: System.Diagnostics.EventLogTraceListener
  isExternal: false
  name: TraceData(TraceEventCache,String,TraceEventType,Int32,Object)
  nameWithType: EventLogTraceListener.TraceData(TraceEventCache,String,TraceEventType,Int32,Object)
  fullName: System.Diagnostics.EventLogTraceListener.TraceData(TraceEventCache,String,TraceEventType,Int32,Object)
- uid: System.Diagnostics.TraceEventCache
  parent: System.Diagnostics
  isExternal: false
  name: TraceEventCache
  nameWithType: TraceEventCache
  fullName: System.Diagnostics.TraceEventCache
- uid: System.Diagnostics.TraceEventType
  parent: System.Diagnostics
  isExternal: false
  name: TraceEventType
  nameWithType: TraceEventType
  fullName: System.Diagnostics.TraceEventType
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Diagnostics.EventLogTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object[])
  parent: System.Diagnostics.EventLogTraceListener
  isExternal: false
  name: TraceData(TraceEventCache,String,TraceEventType,Int32,Object[])
  nameWithType: EventLogTraceListener.TraceData(TraceEventCache,String,TraceEventType,Int32,Object[])
  fullName: System.Diagnostics.EventLogTraceListener.TraceData(TraceEventCache,String,TraceEventType,Int32,Object[])
- uid: System.Object[]
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object[]
  spec.csharp:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: Object[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Diagnostics.EventLogTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String)
  parent: System.Diagnostics.EventLogTraceListener
  isExternal: false
  name: TraceEvent(TraceEventCache,String,TraceEventType,Int32,String)
  nameWithType: EventLogTraceListener.TraceEvent(TraceEventCache,String,TraceEventType,Int32,String)
  fullName: System.Diagnostics.EventLogTraceListener.TraceEvent(TraceEventCache,String,TraceEventType,Int32,String)
- uid: System.Diagnostics.EventLogTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String,System.Object[])
  parent: System.Diagnostics.EventLogTraceListener
  isExternal: false
  name: TraceEvent(TraceEventCache,String,TraceEventType,Int32,String,Object[])
  nameWithType: EventLogTraceListener.TraceEvent(TraceEventCache,String,TraceEventType,Int32,String,Object[])
  fullName: System.Diagnostics.EventLogTraceListener.TraceEvent(TraceEventCache,String,TraceEventType,Int32,String,Object[])
- uid: System.Diagnostics.EventLogTraceListener.Write(System.String)
  parent: System.Diagnostics.EventLogTraceListener
  isExternal: false
  name: Write(String)
  nameWithType: EventLogTraceListener.Write(String)
  fullName: System.Diagnostics.EventLogTraceListener.Write(String)
- uid: System.Diagnostics.EventLogTraceListener.WriteLine(System.String)
  parent: System.Diagnostics.EventLogTraceListener
  isExternal: false
  name: WriteLine(String)
  nameWithType: EventLogTraceListener.WriteLine(String)
  fullName: System.Diagnostics.EventLogTraceListener.WriteLine(String)
- uid: System.Diagnostics.EventLogTraceListener.#ctor*
  parent: System.Diagnostics.EventLogTraceListener
  isExternal: false
  name: EventLogTraceListener
  nameWithType: EventLogTraceListener.EventLogTraceListener
- uid: System.Diagnostics.EventLogTraceListener.Close*
  parent: System.Diagnostics.EventLogTraceListener
  isExternal: false
  name: Close
  nameWithType: EventLogTraceListener.Close
- uid: System.Diagnostics.EventLogTraceListener.Dispose*
  parent: System.Diagnostics.EventLogTraceListener
  isExternal: false
  name: Dispose
  nameWithType: EventLogTraceListener.Dispose
- uid: System.Diagnostics.EventLogTraceListener.EventLog*
  parent: System.Diagnostics.EventLogTraceListener
  isExternal: false
  name: EventLog
  nameWithType: EventLogTraceListener.EventLog
- uid: System.Diagnostics.EventLogTraceListener.Name*
  parent: System.Diagnostics.EventLogTraceListener
  isExternal: false
  name: Name
  nameWithType: EventLogTraceListener.Name
- uid: System.Diagnostics.EventLogTraceListener.TraceData*
  parent: System.Diagnostics.EventLogTraceListener
  isExternal: false
  name: TraceData
  nameWithType: EventLogTraceListener.TraceData
- uid: System.Diagnostics.EventLogTraceListener.TraceEvent*
  parent: System.Diagnostics.EventLogTraceListener
  isExternal: false
  name: TraceEvent
  nameWithType: EventLogTraceListener.TraceEvent
- uid: System.Diagnostics.EventLogTraceListener.Write*
  parent: System.Diagnostics.EventLogTraceListener
  isExternal: false
  name: Write
  nameWithType: EventLogTraceListener.Write
- uid: System.Diagnostics.EventLogTraceListener.WriteLine*
  parent: System.Diagnostics.EventLogTraceListener
  isExternal: false
  name: WriteLine
  nameWithType: EventLogTraceListener.WriteLine
