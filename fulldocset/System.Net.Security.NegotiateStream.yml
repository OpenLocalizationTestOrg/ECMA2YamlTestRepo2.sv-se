### YamlMime:ManagedReference
items:
- uid: System.Net.Security.NegotiateStream
  id: NegotiateStream
  children:
  - System.Net.Security.NegotiateStream.#ctor(System.IO.Stream)
  - System.Net.Security.NegotiateStream.#ctor(System.IO.Stream,System.Boolean)
  - System.Net.Security.NegotiateStream.AuthenticateAsClient
  - System.Net.Security.NegotiateStream.AuthenticateAsClient(System.Net.NetworkCredential,System.String)
  - System.Net.Security.NegotiateStream.AuthenticateAsClient(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ChannelBinding,System.String)
  - System.Net.Security.NegotiateStream.AuthenticateAsClient(System.Net.NetworkCredential,System.String,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)
  - System.Net.Security.NegotiateStream.AuthenticateAsClient(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ChannelBinding,System.String,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)
  - System.Net.Security.NegotiateStream.AuthenticateAsClientAsync
  - System.Net.Security.NegotiateStream.AuthenticateAsClientAsync(System.Net.NetworkCredential,System.String)
  - System.Net.Security.NegotiateStream.AuthenticateAsClientAsync(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ChannelBinding,System.String)
  - System.Net.Security.NegotiateStream.AuthenticateAsClientAsync(System.Net.NetworkCredential,System.String,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)
  - System.Net.Security.NegotiateStream.AuthenticateAsClientAsync(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ChannelBinding,System.String,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)
  - System.Net.Security.NegotiateStream.AuthenticateAsServer
  - System.Net.Security.NegotiateStream.AuthenticateAsServer(System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy)
  - System.Net.Security.NegotiateStream.AuthenticateAsServer(System.Net.NetworkCredential,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)
  - System.Net.Security.NegotiateStream.AuthenticateAsServer(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)
  - System.Net.Security.NegotiateStream.AuthenticateAsServerAsync
  - System.Net.Security.NegotiateStream.AuthenticateAsServerAsync(System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy)
  - System.Net.Security.NegotiateStream.AuthenticateAsServerAsync(System.Net.NetworkCredential,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)
  - System.Net.Security.NegotiateStream.AuthenticateAsServerAsync(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)
  - System.Net.Security.NegotiateStream.BeginAuthenticateAsClient(System.AsyncCallback,System.Object)
  - System.Net.Security.NegotiateStream.BeginAuthenticateAsClient(System.Net.NetworkCredential,System.String,System.AsyncCallback,System.Object)
  - System.Net.Security.NegotiateStream.BeginAuthenticateAsClient(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ChannelBinding,System.String,System.AsyncCallback,System.Object)
  - System.Net.Security.NegotiateStream.BeginAuthenticateAsClient(System.Net.NetworkCredential,System.String,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel,System.AsyncCallback,System.Object)
  - System.Net.Security.NegotiateStream.BeginAuthenticateAsClient(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ChannelBinding,System.String,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel,System.AsyncCallback,System.Object)
  - System.Net.Security.NegotiateStream.BeginAuthenticateAsServer(System.AsyncCallback,System.Object)
  - System.Net.Security.NegotiateStream.BeginAuthenticateAsServer(System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy,System.AsyncCallback,System.Object)
  - System.Net.Security.NegotiateStream.BeginAuthenticateAsServer(System.Net.NetworkCredential,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel,System.AsyncCallback,System.Object)
  - System.Net.Security.NegotiateStream.BeginAuthenticateAsServer(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel,System.AsyncCallback,System.Object)
  - System.Net.Security.NegotiateStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)
  - System.Net.Security.NegotiateStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)
  - System.Net.Security.NegotiateStream.CanRead
  - System.Net.Security.NegotiateStream.CanSeek
  - System.Net.Security.NegotiateStream.CanTimeout
  - System.Net.Security.NegotiateStream.CanWrite
  - System.Net.Security.NegotiateStream.Dispose(System.Boolean)
  - System.Net.Security.NegotiateStream.EndAuthenticateAsClient(System.IAsyncResult)
  - System.Net.Security.NegotiateStream.EndAuthenticateAsServer(System.IAsyncResult)
  - System.Net.Security.NegotiateStream.EndRead(System.IAsyncResult)
  - System.Net.Security.NegotiateStream.EndWrite(System.IAsyncResult)
  - System.Net.Security.NegotiateStream.Flush
  - System.Net.Security.NegotiateStream.ImpersonationLevel
  - System.Net.Security.NegotiateStream.IsAuthenticated
  - System.Net.Security.NegotiateStream.IsEncrypted
  - System.Net.Security.NegotiateStream.IsMutuallyAuthenticated
  - System.Net.Security.NegotiateStream.IsServer
  - System.Net.Security.NegotiateStream.IsSigned
  - System.Net.Security.NegotiateStream.Length
  - System.Net.Security.NegotiateStream.Position
  - System.Net.Security.NegotiateStream.Read(System.Byte[],System.Int32,System.Int32)
  - System.Net.Security.NegotiateStream.ReadTimeout
  - System.Net.Security.NegotiateStream.RemoteIdentity
  - System.Net.Security.NegotiateStream.Seek(System.Int64,System.IO.SeekOrigin)
  - System.Net.Security.NegotiateStream.SetLength(System.Int64)
  - System.Net.Security.NegotiateStream.Write(System.Byte[],System.Int32,System.Int32)
  - System.Net.Security.NegotiateStream.WriteTimeout
  langs:
  - csharp
  name: NegotiateStream
  nameWithType: NegotiateStream
  fullName: System.Net.Security.NegotiateStream
  type: Class
  summary: "Ger en dataström som använder Negotiate security-protokollet för att autentisera klienten och eventuellt servern i klient-/ serverkommunikation."
  remarks: "Använd klassen NegotiateStream för autentisering och för att säkra information överförs mellan en klient och en server. Med NegotiateStream kan göra du följande.      -Skicka klientens autentiseringsuppgifter till servern för personifiering eller delegering.      -Begäran serverautentisering.      -Kryptera och/eller signera data innan de överförs.       Autentisering måste utföras innan du skickar information. Klienter begär autentisering med hjälp av den synkrona <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>metoder som blockerar tills autentiseringen har slutförts, eller den asynkrona <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A>metoder som inte blockerar väntan på att slutföra autentiseringen.</xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A> </xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A> Servrar begär autentisering med hjälp av den synkrona <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>eller asynkron <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A>metoder.</xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> </xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A> Klienten och eventuellt servern autentiseras med säkerhetsprotokollet Negotiate. Windows NT LAN Manager (NTLM) är det protokoll som används för autentisering på Windows 95/98-system. För andra plattformar Kerberos används protokollet för autentisering om både klienten och servern stöder. Annars används NTLM. Detaljerade beskrivningar av dessa protokoll finns i Platform SDK-dokumentationen på MSDN, på msdn.microsoft.com/library/. Klassen NegotiateStream utför autentiseringen med hjälp av Support Provider Interface SSPI (Security).       När autentiseringen lyckas, måste du kontrollera den <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A>och <xref:System.Net.Security.NegotiateStream.IsSigned%2A>Egenskaper för att avgöra vilka säkerhetstjänster som ska användas av NegotiateStream för att skydda dina data under överföringen.</xref:System.Net.Security.NegotiateStream.IsSigned%2A> </xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> Kontrollera den <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A>egenskapen fastställa om ömsesidig autentisering inträffade.</xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> Du kan få information om fjärransluten klient och server använder den <xref:System.Net.Security.NegotiateStream.RemoteIdentity%2A>egenskapen.</xref:System.Net.Security.NegotiateStream.RemoteIdentity%2A>       Om autentiseringen misslyckas, får du en <xref:System.Security.Authentication.AuthenticationException>eller ett <xref:System.Security.Authentication.InvalidCredentialException>.</xref:System.Security.Authentication.InvalidCredentialException> </xref:System.Security.Authentication.AuthenticationException> I det här fallet kan du försöka autentisering med en annan referens.       Du skickar data med hjälp av den synkrona <xref:System.Net.Security.NegotiateStream.Write%2A>eller asynkron <xref:System.Net.Security.NegotiateStream.BeginWrite%2A>metoder.</xref:System.Net.Security.NegotiateStream.BeginWrite%2A> </xref:System.Net.Security.NegotiateStream.Write%2A> Du får data med hjälp av den synkrona <xref:System.Net.Security.NegotiateStream.Read%2A>eller asynkron <xref:System.Net.Security.NegotiateStream.BeginRead%2A>metoder.</xref:System.Net.Security.NegotiateStream.BeginRead%2A> </xref:System.Net.Security.NegotiateStream.Read%2A> Om säkerhet tjänster som kryptering eller signering är aktiverade, används dessa automatiskt till dina data genom att NegotiateStream.       NegotiateStream överför data med hjälp av en dataström som du anger när du skapar NegotiateStream. Om du anger den här underliggande dataströmmen har möjlighet att ange om stänger NegotiateStream stängs också den underliggande dataströmmen."
  example:
  - "The following code example demonstrates the client side of a client-server connection that uses the NegotiateStream. The client authenticates and sends a message to the server asynchronously.  \n  \n [!code-cpp[NclNegoAsyncClient#0](~/add/codesnippet/cpp/t-system.net.security.ne_1.cpp)]\n [!code-cs[NclNegoAsyncClient#0](~/add/codesnippet/csharp/t-system.net.security.ne_1.cs)]  \n  \n The following code example demonstrates the server side of a client-server connection that uses the NegotiateStream to authenticate the client and read a message sent by the client.  \n  \n [!code-cs[NclNegoAsyncServer#0](~/add/codesnippet/csharp/t-system.net.security.ne_2.cs)]\n [!code-cpp[NclNegoAsyncServer#0](~/add/codesnippet/cpp/t-system.net.security.ne_2.cpp)]"
  syntax:
    content: 'public class NegotiateStream : System.Net.Security.AuthenticatedStream'
  inheritance:
  - System.IO.Stream
  - System.Net.Security.AuthenticatedStream
  implements: []
  inheritedMembers:
  - System.Net.Security.AuthenticatedStream.InnerStream
  - System.Net.Security.AuthenticatedStream.LeaveInnerStreamOpen
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.#ctor(System.IO.Stream)
  id: '#ctor(System.IO.Stream)'
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: NegotiateStream(Stream)
  nameWithType: NegotiateStream.NegotiateStream(Stream)
  fullName: System.Net.Security.NegotiateStream.NegotiateStream(Stream)
  type: Constructor
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Initierar en ny instans av den <xref href=&quot;System.Net.Security.NegotiateStream&quot;> </xref> klassen med hjälp av angivna <xref:System.IO.Stream>.</xref:System.IO.Stream>"
  remarks: ''
  example:
  - "The following code example demonstrates calling this constructor.  \n  \n [!code-cs[NclNegoSyncClient#3](~/add/codesnippet/csharp/m-system.net.security.ne_1_1.cs)]\n [!code-cpp[NclNegoSyncClient#3](~/add/codesnippet/cpp/m-system.net.security.ne_1_1.cpp)]"
  syntax:
    content: public NegotiateStream (System.IO.Stream innerStream);
    parameters:
    - id: innerStream
      type: System.IO.Stream
      description: "En <xref:System.IO.Stream>objekt som används av den <xref href=&quot;System.Net.Security.NegotiateStream&quot;> </xref> för att skicka och ta emot data.</xref:System.IO.Stream>"
  overload: System.Net.Security.NegotiateStream.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.#ctor(System.IO.Stream,System.Boolean)
  id: '#ctor(System.IO.Stream,System.Boolean)'
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: NegotiateStream(Stream,Boolean)
  nameWithType: NegotiateStream.NegotiateStream(Stream,Boolean)
  fullName: System.Net.Security.NegotiateStream.NegotiateStream(Stream,Boolean)
  type: Constructor
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Initierar en ny instans av den <xref href=&quot;System.Net.Security.NegotiateStream&quot;> </xref> klassen med hjälp av den angivna <xref:System.IO.Stream>och strömma avslutas beteende.</xref:System.IO.Stream>"
  remarks: "När du anger `true` för den `leaveStreamOpen` parameter, stänger den <xref:System.Net.Security.NegotiateStream>har ingen effekt den `innerStream` strömma; du måste stänga explicit `innerStream` när du inte längre behöver den.</xref:System.Net.Security.NegotiateStream>"
  example:
  - "The following code example demonstrates calling this constructor. This code example is part of a larger example provided for the <xref:System.Net.Security.NegotiateStream> class.  \n  \n [!code-cpp[NclNegoAsyncClient#1](~/add/codesnippet/cpp/m-system.net.security.ne_4_1.cpp)]\n [!code-cs[NclNegoAsyncClient#1](~/add/codesnippet/csharp/m-system.net.security.ne_4_1.cs)]"
  syntax:
    content: public NegotiateStream (System.IO.Stream innerStream, bool leaveInnerStreamOpen);
    parameters:
    - id: innerStream
      type: System.IO.Stream
      description: "En <xref:System.IO.Stream>objekt som används av den <xref href=&quot;System.Net.Security.NegotiateStream&quot;> </xref> för att skicka och ta emot data.</xref:System.IO.Stream>"
    - id: leaveInnerStreamOpen
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>att ange att stänga det här <xref href=&quot;System.Net.Security.NegotiateStream&quot;> </xref> har ingen effekt `innerstream`; <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> att indikera att stänga det här <xref href=&quot;System.Net.Security.NegotiateStream&quot;> </xref> stängs också `innerStream`. I avsnittet Anmärkningar för mer information."
  overload: System.Net.Security.NegotiateStream.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>innerStream</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.  \n  \n \\- or -  \n  \n <code>innerStream</code> is equal to <xref:System.IO.Stream.Null>."
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.AuthenticateAsClient
  id: AuthenticateAsClient
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: AuthenticateAsClient()
  nameWithType: NegotiateStream.AuthenticateAsClient()
  fullName: System.Net.Security.NegotiateStream.AuthenticateAsClient()
  type: Method
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Anropas av klienter för att autentisera klienten och eventuellt server i en klient / server-anslutning."
  remarks: "Autentiseringen använder klientens <xref:System.Net.CredentialCache.DefaultCredentials%2A>.</xref:System.Net.CredentialCache.DefaultCredentials%2A> Inga namn SPN (Service Principal) har angetts för servern. Personifieringsnivån är <xref:System.Security.Principal.TokenImpersonationLevel>, säkerhetsnivån är <xref:System.Net.Security.ProtectionLevel>, och ömsesidig autentisering har begärts.</xref:System.Net.Security.ProtectionLevel> </xref:System.Security.Principal.TokenImpersonationLevel> Den <xref:System.Net.Security.NegotiateStream>klassen kommer konstruera SPN används för ömsesidig autentisering.</xref:System.Net.Security.NegotiateStream>       När autentiseringen lyckas, måste du kontrollera den <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A>och <xref:System.Net.Security.NegotiateStream.IsSigned%2A>Egenskaper för att avgöra vilka säkerhetstjänster som används av <xref:System.Net.Security.NegotiateStream>.</xref:System.Net.Security.NegotiateStream> </xref:System.Net.Security.NegotiateStream.IsSigned%2A> </xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> Kontrollera den <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A>egenskapen fastställa om ömsesidig autentisering inträffade.</xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A>       Om autentiseringen misslyckas felmeddelandet <xref:System.Security.Authentication.AuthenticationException>eller <xref:System.Security.Authentication.InvalidCredentialException>.</xref:System.Security.Authentication.InvalidCredentialException> </xref:System.Security.Authentication.AuthenticationException> I det här fallet kan du försöka autentisering med en annan referens."
  syntax:
    content: public virtual void AuthenticateAsClient ();
    parameters: []
  overload: System.Net.Security.NegotiateStream.AuthenticateAsClient*
  exceptions:
  - type: System.Security.Authentication.AuthenticationException
    commentId: T:System.Security.Authentication.AuthenticationException
    description: "Autentiseringen misslyckades. Du kan använda det här objektet ska försöka utföra autentiseringen."
  - type: System.Security.Authentication.InvalidCredentialException
    commentId: T:System.Security.Authentication.InvalidCredentialException
    description: "Autentiseringen misslyckades. Du kan använda det här objektet ska försöka utföra autentiseringen."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Det här objektet har stängts."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Authentication has already occurred.  \n  \n \\- or -  \n  \n This stream was used previously to attempt authentication as the server. You cannot use the stream to retry authentication as the client."
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.AuthenticateAsClient(System.Net.NetworkCredential,System.String)
  id: AuthenticateAsClient(System.Net.NetworkCredential,System.String)
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: AuthenticateAsClient(NetworkCredential,String)
  nameWithType: NegotiateStream.AuthenticateAsClient(NetworkCredential,String)
  fullName: System.Net.Security.NegotiateStream.AuthenticateAsClient(NetworkCredential,String)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Anropas av klienter för att autentisera klienten och eventuellt server i en klient / server-anslutning. Autentiseringen använder autentiseringsuppgiften för angivna klienten."
  remarks: "Personifieringsnivån är <xref:System.Security.Principal.TokenImpersonationLevel>, säkerhetsnivån är <xref:System.Net.Security.ProtectionLevel>, och ömsesidig autentisering har begärts.</xref:System.Net.Security.ProtectionLevel> </xref:System.Security.Principal.TokenImpersonationLevel> Den <xref:System.Net.Security.NegotiateStream>klassen kommer konstruera SPN används för ömsesidig autentisering.</xref:System.Net.Security.NegotiateStream>       När autentiseringen lyckas, måste du kontrollera den <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A>och <xref:System.Net.Security.NegotiateStream.IsSigned%2A>Egenskaper för att avgöra vilka säkerhetstjänster som används av <xref:System.Net.Security.NegotiateStream>.</xref:System.Net.Security.NegotiateStream> </xref:System.Net.Security.NegotiateStream.IsSigned%2A> </xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> Kontrollera den <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A>egenskapen fastställa om ömsesidig autentisering inträffade.</xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A>"
  syntax:
    content: public virtual void AuthenticateAsClient (System.Net.NetworkCredential credential, string targetName);
    parameters:
    - id: credential
      type: System.Net.NetworkCredential
      description: "Den <xref:System.Net.NetworkCredential>som används för att fastställa identiteten för klienten.</xref:System.Net.NetworkCredential>"
    - id: targetName
      type: System.String
      description: "Det namn SPN (Service Principal) som unikt identifierar servern för att autentisera."
  overload: System.Net.Security.NegotiateStream.AuthenticateAsClient*
  exceptions:
  - type: System.Security.Authentication.AuthenticationException
    commentId: T:System.Security.Authentication.AuthenticationException
    description: "Autentiseringen misslyckades. Du kan använda det här objektet ska försöka utföra autentiseringen."
  - type: System.Security.Authentication.InvalidCredentialException
    commentId: T:System.Security.Authentication.InvalidCredentialException
    description: "Autentiseringen misslyckades. Du kan använda det här objektet ska försöka utföra autentiseringen."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Det här objektet har stängts."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Authentication has already occurred.  \n  \n \\- or -  \n  \n This stream was used previously to attempt authentication as the server. You cannot use the stream to retry authentication as the client."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>targetName</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.AuthenticateAsClient(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ChannelBinding,System.String)
  id: AuthenticateAsClient(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ChannelBinding,System.String)
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: AuthenticateAsClient(NetworkCredential,ChannelBinding,String)
  nameWithType: NegotiateStream.AuthenticateAsClient(NetworkCredential,ChannelBinding,String)
  fullName: System.Net.Security.NegotiateStream.AuthenticateAsClient(NetworkCredential,ChannelBinding,String)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Anropas av klienter för att autentisera klienten och eventuellt server i en klient / server-anslutning. Autentiseringen använder den angivna klientreferensen och kanalbindningen."
  remarks: "Personifieringsnivån är <xref:System.Security.Principal.TokenImpersonationLevel>, säkerhetsnivån är <xref:System.Net.Security.ProtectionLevel>, och ömsesidig autentisering har begärts.</xref:System.Net.Security.ProtectionLevel> </xref:System.Security.Principal.TokenImpersonationLevel> Den <xref:System.Net.Security.NegotiateStream>klassen kommer konstruera SPN används för ömsesidig autentisering.</xref:System.Net.Security.NegotiateStream>       Den <xref:System.Security.Authentication.ExtendedProtection.ChannelBinding>används för utökat skydd som skickas till den här metoden i den `binding` parametern skulle hämtas av ett program från <xref:System.Net.Security.SslStream.TransportContext%2A>egenskapen på den associera <xref:System.Net.Security.SslStream>.</xref:System.Net.Security.SslStream> </xref:System.Net.Security.SslStream.TransportContext%2A> </xref:System.Security.Authentication.ExtendedProtection.ChannelBinding>       När autentiseringen lyckas, måste du kontrollera den <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A>och <xref:System.Net.Security.NegotiateStream.IsSigned%2A>Egenskaper för att avgöra vilka säkerhetstjänster som används av <xref:System.Net.Security.NegotiateStream>.</xref:System.Net.Security.NegotiateStream> </xref:System.Net.Security.NegotiateStream.IsSigned%2A> </xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> Kontrollera den <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A>egenskapen fastställa om ömsesidig autentisering inträffade.</xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A>"
  syntax:
    content: public virtual void AuthenticateAsClient (System.Net.NetworkCredential credential, System.Security.Authentication.ExtendedProtection.ChannelBinding binding, string targetName);
    parameters:
    - id: credential
      type: System.Net.NetworkCredential
      description: "Den <xref:System.Net.NetworkCredential>som används för att fastställa identiteten för klienten.</xref:System.Net.NetworkCredential>"
    - id: binding
      type: System.Security.Authentication.ExtendedProtection.ChannelBinding
      description: "Den <xref:System.Security.Authentication.ExtendedProtection.ChannelBinding>som används för utökat skydd.</xref:System.Security.Authentication.ExtendedProtection.ChannelBinding>"
    - id: targetName
      type: System.String
      description: "Det namn SPN (Service Principal) som unikt identifierar servern för att autentisera."
  overload: System.Net.Security.NegotiateStream.AuthenticateAsClient*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>targetName</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.  \n  \n \\- or -  \n  \n <code>credential</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."
  - type: System.Security.Authentication.AuthenticationException
    commentId: T:System.Security.Authentication.AuthenticationException
    description: "Autentiseringen misslyckades. Du kan använda det här objektet ska försöka utföra autentiseringen."
  - type: System.Security.Authentication.InvalidCredentialException
    commentId: T:System.Security.Authentication.InvalidCredentialException
    description: "Autentiseringen misslyckades. Du kan använda det här objektet ska försöka utföra autentiseringen."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Authentication has already occurred.  \n  \n \\- or -  \n  \n This stream was used previously to attempt authentication as the server. You cannot use the stream to retry authentication as the client."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Det här objektet har stängts."
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.AuthenticateAsClient(System.Net.NetworkCredential,System.String,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)
  id: AuthenticateAsClient(System.Net.NetworkCredential,System.String,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: AuthenticateAsClient(NetworkCredential,String,ProtectionLevel,TokenImpersonationLevel)
  nameWithType: NegotiateStream.AuthenticateAsClient(NetworkCredential,String,ProtectionLevel,TokenImpersonationLevel)
  fullName: System.Net.Security.NegotiateStream.AuthenticateAsClient(NetworkCredential,String,ProtectionLevel,TokenImpersonationLevel)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Anropas av klienter för att autentisera klienten och eventuellt server i en klient / server-anslutning. Autentiseringen använder de angivna autentiseringsuppgifterna och alternativ för autentisering."
  remarks: "Använd den `requiredProtectionLevel` parameter till begäran säkerhet för data som överförs med hjälp av autentiserade dataströmmen. Till exempel om du vill att de data som är krypterad och signerad, ange den <xref:System.Net.Security.ProtectionLevel>värde.</xref:System.Net.Security.ProtectionLevel> Autentiseringen garanterar inte som den begärda <xref:System.Net.Security.ProtectionLevel>har beviljats.</xref:System.Net.Security.ProtectionLevel> Du måste kontrollera <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A>och <xref:System.Net.Security.NegotiateStream.IsSigned%2A>Egenskaper för att avgöra vilka säkerhetstjänster som används av <xref:System.Net.Security.NegotiateStream>.</xref:System.Net.Security.NegotiateStream> </xref:System.Net.Security.NegotiateStream.IsSigned%2A> </xref:System.Net.Security.NegotiateStream.IsEncrypted%2A>       Om autentiseringen misslyckas felmeddelandet <xref:System.Security.Authentication.AuthenticationException>eller <xref:System.Security.Authentication.InvalidCredentialException>.</xref:System.Security.Authentication.InvalidCredentialException> </xref:System.Security.Authentication.AuthenticationException> I det här fallet kan du försöka autentisering med en annan referens."
  syntax:
    content: public virtual void AuthenticateAsClient (System.Net.NetworkCredential credential, string targetName, System.Net.Security.ProtectionLevel requiredProtectionLevel, System.Security.Principal.TokenImpersonationLevel allowedImpersonationLevel);
    parameters:
    - id: credential
      type: System.Net.NetworkCredential
      description: "Den <xref:System.Net.NetworkCredential>som används för att fastställa identiteten för klienten.</xref:System.Net.NetworkCredential>"
    - id: targetName
      type: System.String
      description: "Det namn SPN (Service Principal) som unikt identifierar servern för att autentisera."
    - id: requiredProtectionLevel
      type: System.Net.Security.ProtectionLevel
      description: "En av de <xref href=&quot;System.Net.Security.ProtectionLevel&quot;> </xref> värden, som anger säkerhetstjänsterna för dataströmmen."
    - id: allowedImpersonationLevel
      type: System.Security.Principal.TokenImpersonationLevel
      description: "En av de <xref:System.Security.Principal.TokenImpersonationLevel>värden, som anger hur servern kan använda klientens autentiseringsuppgifter för åtkomst till resurser.</xref:System.Security.Principal.TokenImpersonationLevel>"
  overload: System.Net.Security.NegotiateStream.AuthenticateAsClient*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>allowedImpersonationLevel</code>är inte ett giltigt värde."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>targetName</code>är null."
  - type: System.Security.Authentication.AuthenticationException
    commentId: T:System.Security.Authentication.AuthenticationException
    description: "Autentiseringen misslyckades. Du kan använda det här objektet ska försöka utföra autentiseringen."
  - type: System.Security.Authentication.InvalidCredentialException
    commentId: T:System.Security.Authentication.InvalidCredentialException
    description: "Autentiseringen misslyckades. Du kan använda det här objektet ska försöka utföra autentiseringen."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Det här objektet har stängts."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Authentication has already occurred.  \n  \n \\- or -  \n  \n This stream was used previously to attempt authentication as the server. You cannot use the stream to retry authentication as the client."
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.AuthenticateAsClient(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ChannelBinding,System.String,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)
  id: AuthenticateAsClient(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ChannelBinding,System.String,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: AuthenticateAsClient(NetworkCredential,ChannelBinding,String,ProtectionLevel,TokenImpersonationLevel)
  nameWithType: NegotiateStream.AuthenticateAsClient(NetworkCredential,ChannelBinding,String,ProtectionLevel,TokenImpersonationLevel)
  fullName: System.Net.Security.NegotiateStream.AuthenticateAsClient(NetworkCredential,ChannelBinding,String,ProtectionLevel,TokenImpersonationLevel)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Anropas av klienter för att autentisera klienten och eventuellt server i en klient / server-anslutning. Autentiseringen använder den angivna autentiseringsuppgifter och autentiseringsalternativ kanalbindning."
  remarks: "Använd den `requiredProtectionLevel` parameter till begäran säkerhet för data som överförs med hjälp av autentiserade dataströmmen. Till exempel om du vill att de data som är krypterad och signerad, ange den <xref:System.Net.Security.ProtectionLevel>värde.</xref:System.Net.Security.ProtectionLevel> Autentiseringen garanterar inte som den begärda <xref:System.Net.Security.ProtectionLevel>har beviljats.</xref:System.Net.Security.ProtectionLevel> Du måste kontrollera <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A>och <xref:System.Net.Security.NegotiateStream.IsSigned%2A>Egenskaper för att avgöra vilka säkerhetstjänster som används av <xref:System.Net.Security.NegotiateStream>.</xref:System.Net.Security.NegotiateStream> </xref:System.Net.Security.NegotiateStream.IsSigned%2A> </xref:System.Net.Security.NegotiateStream.IsEncrypted%2A>       Den <xref:System.Security.Authentication.ExtendedProtection.ChannelBinding>används för utökat skydd som skickas till den här metoden i den `binding` parametern skulle hämtas av ett program från <xref:System.Net.Security.SslStream.TransportContext%2A>egenskapen på den associera <xref:System.Net.Security.SslStream>.</xref:System.Net.Security.SslStream> </xref:System.Net.Security.SslStream.TransportContext%2A> </xref:System.Security.Authentication.ExtendedProtection.ChannelBinding>       Om autentiseringen misslyckas felmeddelandet <xref:System.Security.Authentication.AuthenticationException>eller <xref:System.Security.Authentication.InvalidCredentialException>.</xref:System.Security.Authentication.InvalidCredentialException> </xref:System.Security.Authentication.AuthenticationException> I det här fallet kan du försöka autentisering med en annan referens."
  syntax:
    content: public virtual void AuthenticateAsClient (System.Net.NetworkCredential credential, System.Security.Authentication.ExtendedProtection.ChannelBinding binding, string targetName, System.Net.Security.ProtectionLevel requiredProtectionLevel, System.Security.Principal.TokenImpersonationLevel allowedImpersonationLevel);
    parameters:
    - id: credential
      type: System.Net.NetworkCredential
      description: "Den <xref:System.Net.NetworkCredential>som används för att fastställa identiteten för klienten.</xref:System.Net.NetworkCredential>"
    - id: binding
      type: System.Security.Authentication.ExtendedProtection.ChannelBinding
      description: "Den <xref:System.Security.Authentication.ExtendedProtection.ChannelBinding>som används för utökat skydd.</xref:System.Security.Authentication.ExtendedProtection.ChannelBinding>"
    - id: targetName
      type: System.String
      description: "Det namn SPN (Service Principal) som unikt identifierar servern för att autentisera."
    - id: requiredProtectionLevel
      type: System.Net.Security.ProtectionLevel
      description: "En av de <xref href=&quot;System.Net.Security.ProtectionLevel&quot;> </xref> värden, som anger säkerhetstjänsterna för dataströmmen."
    - id: allowedImpersonationLevel
      type: System.Security.Principal.TokenImpersonationLevel
      description: "En av de <xref:System.Security.Principal.TokenImpersonationLevel>värden, som anger hur servern kan använda klientens autentiseringsuppgifter för åtkomst till resurser.</xref:System.Security.Principal.TokenImpersonationLevel>"
  overload: System.Net.Security.NegotiateStream.AuthenticateAsClient*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>targetName</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.  \n  \n \\- or -  \n  \n <code>credential</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>allowedImpersonationLevel</code>är inte ett giltigt värde."
  - type: System.Security.Authentication.AuthenticationException
    commentId: T:System.Security.Authentication.AuthenticationException
    description: "Autentiseringen misslyckades. Du kan använda det här objektet ska försöka utföra autentiseringen."
  - type: System.Security.Authentication.InvalidCredentialException
    commentId: T:System.Security.Authentication.InvalidCredentialException
    description: "Autentiseringen misslyckades. Du kan använda det här objektet ska försöka utföra autentiseringen."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Authentication has already occurred.  \n  \n \\- or -  \n  \n This stream was used previously to attempt authentication as the server. You cannot use the stream to retry authentication as the client."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Det här objektet har stängts."
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.AuthenticateAsClientAsync
  id: AuthenticateAsClientAsync
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: AuthenticateAsClientAsync()
  nameWithType: NegotiateStream.AuthenticateAsClientAsync()
  fullName: System.Net.Security.NegotiateStream.AuthenticateAsClientAsync()
  type: Method
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Anropas av klienter för att autentisera klienten och eventuellt server i en klient / server-anslutning som en asynkron åtgärd."
  remarks: "Autentiseringen använder klientens <xref:System.Net.CredentialCache.DefaultCredentials%2A>.</xref:System.Net.CredentialCache.DefaultCredentials%2A> Inga namn SPN (Service Principal) har angetts för servern. Personifieringsnivån är <xref:System.Security.Principal.TokenImpersonationLevel>, säkerhetsnivån är <xref:System.Net.Security.ProtectionLevel>, och ömsesidig autentisering har begärts.</xref:System.Net.Security.ProtectionLevel> </xref:System.Security.Principal.TokenImpersonationLevel> Den <xref:System.Net.Security.NegotiateStream>klassen kommer konstruera SPN används för ömsesidig autentisering.</xref:System.Net.Security.NegotiateStream>       När autentiseringen lyckas, måste du kontrollera den <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A>och <xref:System.Net.Security.NegotiateStream.IsSigned%2A>Egenskaper för att avgöra vilka säkerhetstjänster som används av <xref:System.Net.Security.NegotiateStream>.</xref:System.Net.Security.NegotiateStream> </xref:System.Net.Security.NegotiateStream.IsSigned%2A> </xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> Kontrollera den <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A>egenskapen fastställa om ömsesidig autentisering inträffade.</xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A>       Om autentiseringen misslyckas felmeddelandet <xref:System.Security.Authentication.AuthenticationException>eller <xref:System.Security.Authentication.InvalidCredentialException>.</xref:System.Security.Authentication.InvalidCredentialException> </xref:System.Security.Authentication.AuthenticationException> I det här fallet kan du försöka autentisering med en annan referens."
  syntax:
    content: public virtual System.Threading.Tasks.Task AuthenticateAsClientAsync ();
    parameters: []
    return:
      type: System.Threading.Tasks.Task
      description: "Returnerar <xref:System.Threading.Tasks.Task>task-objekt som representerar den asynkrona åtgärden.</xref:System.Threading.Tasks.Task>"
  overload: System.Net.Security.NegotiateStream.AuthenticateAsClientAsync*
  exceptions:
  - type: System.Security.Authentication.AuthenticationException
    commentId: T:System.Security.Authentication.AuthenticationException
    description: "Autentiseringen misslyckades. Du kan använda det här objektet ska försöka utföra autentiseringen."
  - type: System.Security.Authentication.InvalidCredentialException
    commentId: T:System.Security.Authentication.InvalidCredentialException
    description: "Autentiseringen misslyckades. Du kan använda det här objektet ska försöka utföra autentiseringen."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Det här objektet har stängts."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Authentication has already occurred.  \n  \n \\- or -  \n  \n This stream was used previously to attempt authentication as the server. You cannot use the stream to retry authentication as the client."
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.AuthenticateAsClientAsync(System.Net.NetworkCredential,System.String)
  id: AuthenticateAsClientAsync(System.Net.NetworkCredential,System.String)
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: AuthenticateAsClientAsync(NetworkCredential,String)
  nameWithType: NegotiateStream.AuthenticateAsClientAsync(NetworkCredential,String)
  fullName: System.Net.Security.NegotiateStream.AuthenticateAsClientAsync(NetworkCredential,String)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Anropas av klienter för att autentisera klienten och eventuellt server i en klient / server-anslutning som en asynkron åtgärd. Autentiseringen använder autentiseringsuppgiften för angivna klienten."
  remarks: "Personifieringsnivån är <xref:System.Security.Principal.TokenImpersonationLevel>, säkerhetsnivån är <xref:System.Net.Security.ProtectionLevel>, och ömsesidig autentisering har begärts.</xref:System.Net.Security.ProtectionLevel> </xref:System.Security.Principal.TokenImpersonationLevel> Den <xref:System.Net.Security.NegotiateStream>klassen kommer konstruera SPN används för ömsesidig autentisering.</xref:System.Net.Security.NegotiateStream>       När autentiseringen lyckas, måste du kontrollera den <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A>och <xref:System.Net.Security.NegotiateStream.IsSigned%2A>Egenskaper för att avgöra vilka säkerhetstjänster som används av <xref:System.Net.Security.NegotiateStream>.</xref:System.Net.Security.NegotiateStream> </xref:System.Net.Security.NegotiateStream.IsSigned%2A> </xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> Kontrollera den <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A>egenskapen fastställa om ömsesidig autentisering inträffade.</xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A>"
  syntax:
    content: public virtual System.Threading.Tasks.Task AuthenticateAsClientAsync (System.Net.NetworkCredential credential, string targetName);
    parameters:
    - id: credential
      type: System.Net.NetworkCredential
      description: "Den <xref:System.Net.NetworkCredential>som används för att fastställa identiteten för klienten.</xref:System.Net.NetworkCredential>"
    - id: targetName
      type: System.String
      description: "Det namn SPN (Service Principal) som unikt identifierar servern för att autentisera."
    return:
      type: System.Threading.Tasks.Task
      description: "Returnerar <xref:System.Threading.Tasks.Task>task-objekt som representerar den asynkrona åtgärden.</xref:System.Threading.Tasks.Task>"
  overload: System.Net.Security.NegotiateStream.AuthenticateAsClientAsync*
  exceptions:
  - type: System.Security.Authentication.AuthenticationException
    commentId: T:System.Security.Authentication.AuthenticationException
    description: "Autentiseringen misslyckades. Du kan använda det här objektet ska försöka utföra autentiseringen."
  - type: System.Security.Authentication.InvalidCredentialException
    commentId: T:System.Security.Authentication.InvalidCredentialException
    description: "Autentiseringen misslyckades. Du kan använda det här objektet ska försöka utföra autentiseringen."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Det här objektet har stängts."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Authentication has already occurred.  \n  \n \\- or -  \n  \n This stream was used previously to attempt authentication as the server. You cannot use the stream to retry authentication as the client."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>targetName</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.AuthenticateAsClientAsync(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ChannelBinding,System.String)
  id: AuthenticateAsClientAsync(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ChannelBinding,System.String)
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: AuthenticateAsClientAsync(NetworkCredential,ChannelBinding,String)
  nameWithType: NegotiateStream.AuthenticateAsClientAsync(NetworkCredential,ChannelBinding,String)
  fullName: System.Net.Security.NegotiateStream.AuthenticateAsClientAsync(NetworkCredential,ChannelBinding,String)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Anropas av klienter för att autentisera klienten och eventuellt server i en klient / server-anslutning som en asynkron åtgärd. Autentiseringen använder den angivna klientreferensen och kanalbindningen."
  remarks: "Personifieringsnivån är <xref:System.Security.Principal.TokenImpersonationLevel>, säkerhetsnivån är <xref:System.Net.Security.ProtectionLevel>, och ömsesidig autentisering har begärts.</xref:System.Net.Security.ProtectionLevel> </xref:System.Security.Principal.TokenImpersonationLevel> Den <xref:System.Net.Security.NegotiateStream>klassen kommer konstruera SPN används för ömsesidig autentisering.</xref:System.Net.Security.NegotiateStream>       Den <xref:System.Security.Authentication.ExtendedProtection.ChannelBinding>används för utökat skydd som skickas till den här metoden i den `binding` parametern skulle hämtas av ett program från <xref:System.Net.Security.SslStream.TransportContext%2A>egenskapen på den associera <xref:System.Net.Security.SslStream>.</xref:System.Net.Security.SslStream> </xref:System.Net.Security.SslStream.TransportContext%2A> </xref:System.Security.Authentication.ExtendedProtection.ChannelBinding>       När autentiseringen lyckas, måste du kontrollera den <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A>och <xref:System.Net.Security.NegotiateStream.IsSigned%2A>Egenskaper för att avgöra vilka säkerhetstjänster som används av <xref:System.Net.Security.NegotiateStream>.</xref:System.Net.Security.NegotiateStream> </xref:System.Net.Security.NegotiateStream.IsSigned%2A> </xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> Kontrollera den <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A>egenskapen fastställa om ömsesidig autentisering inträffade.</xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A>"
  syntax:
    content: public virtual System.Threading.Tasks.Task AuthenticateAsClientAsync (System.Net.NetworkCredential credential, System.Security.Authentication.ExtendedProtection.ChannelBinding binding, string targetName);
    parameters:
    - id: credential
      type: System.Net.NetworkCredential
      description: "Den <xref:System.Net.NetworkCredential>som används för att fastställa identiteten för klienten.</xref:System.Net.NetworkCredential>"
    - id: binding
      type: System.Security.Authentication.ExtendedProtection.ChannelBinding
      description: "Den <xref:System.Security.Authentication.ExtendedProtection.ChannelBinding>som används för utökat skydd.</xref:System.Security.Authentication.ExtendedProtection.ChannelBinding>"
    - id: targetName
      type: System.String
      description: "Det namn SPN (Service Principal) som unikt identifierar servern för att autentisera."
    return:
      type: System.Threading.Tasks.Task
      description: "Returnerar <xref:System.Threading.Tasks.Task>task-objekt som representerar den asynkrona åtgärden.</xref:System.Threading.Tasks.Task>"
  overload: System.Net.Security.NegotiateStream.AuthenticateAsClientAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>targetName</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.  \n  \n \\- or -  \n  \n <code>credential</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."
  - type: System.Security.Authentication.AuthenticationException
    commentId: T:System.Security.Authentication.AuthenticationException
    description: "Autentiseringen misslyckades. Du kan använda det här objektet ska försöka utföra autentiseringen."
  - type: System.Security.Authentication.InvalidCredentialException
    commentId: T:System.Security.Authentication.InvalidCredentialException
    description: "Autentiseringen misslyckades. Du kan använda det här objektet ska försöka utföra autentiseringen."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Authentication has already occurred.  \n  \n \\- or -  \n  \n This stream was used previously to attempt authentication as the server. You cannot use the stream to retry authentication as the client."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Det här objektet har stängts."
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.AuthenticateAsClientAsync(System.Net.NetworkCredential,System.String,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)
  id: AuthenticateAsClientAsync(System.Net.NetworkCredential,System.String,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: AuthenticateAsClientAsync(NetworkCredential,String,ProtectionLevel,TokenImpersonationLevel)
  nameWithType: NegotiateStream.AuthenticateAsClientAsync(NetworkCredential,String,ProtectionLevel,TokenImpersonationLevel)
  fullName: System.Net.Security.NegotiateStream.AuthenticateAsClientAsync(NetworkCredential,String,ProtectionLevel,TokenImpersonationLevel)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Anropas av klienter för att autentisera klienten och eventuellt server i en klient / server-anslutning som en asynkron åtgärd. Autentiseringen använder de angivna autentiseringsuppgifterna och alternativ för autentisering."
  remarks: "Använd den `requiredProtectionLevel` parameter till begäran säkerhet för data som överförs med hjälp av autentiserade dataströmmen. Till exempel om du vill att de data som är krypterad och signerad, ange den <xref:System.Net.Security.ProtectionLevel>värde.</xref:System.Net.Security.ProtectionLevel> Autentiseringen garanterar inte som den begärda <xref:System.Net.Security.ProtectionLevel>har beviljats.</xref:System.Net.Security.ProtectionLevel> Du måste kontrollera <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A>och <xref:System.Net.Security.NegotiateStream.IsSigned%2A>Egenskaper för att avgöra vilka säkerhetstjänster som används av <xref:System.Net.Security.NegotiateStream>.</xref:System.Net.Security.NegotiateStream> </xref:System.Net.Security.NegotiateStream.IsSigned%2A> </xref:System.Net.Security.NegotiateStream.IsEncrypted%2A>       Om autentiseringen misslyckas felmeddelandet <xref:System.Security.Authentication.AuthenticationException>eller <xref:System.Security.Authentication.InvalidCredentialException>.</xref:System.Security.Authentication.InvalidCredentialException> </xref:System.Security.Authentication.AuthenticationException> I det här fallet kan du försöka autentisering med en annan referens."
  syntax:
    content: public virtual System.Threading.Tasks.Task AuthenticateAsClientAsync (System.Net.NetworkCredential credential, string targetName, System.Net.Security.ProtectionLevel requiredProtectionLevel, System.Security.Principal.TokenImpersonationLevel allowedImpersonationLevel);
    parameters:
    - id: credential
      type: System.Net.NetworkCredential
      description: "Den <xref:System.Net.NetworkCredential>som används för att fastställa identiteten för klienten.</xref:System.Net.NetworkCredential>"
    - id: targetName
      type: System.String
      description: "Det namn SPN (Service Principal) som unikt identifierar servern för att autentisera."
    - id: requiredProtectionLevel
      type: System.Net.Security.ProtectionLevel
      description: "En av de <xref href=&quot;System.Net.Security.ProtectionLevel&quot;> </xref> värden, som anger säkerhetstjänsterna för dataströmmen."
    - id: allowedImpersonationLevel
      type: System.Security.Principal.TokenImpersonationLevel
      description: "En av de <xref:System.Security.Principal.TokenImpersonationLevel>värden, som anger hur servern kan använda klientens autentiseringsuppgifter för åtkomst till resurser.</xref:System.Security.Principal.TokenImpersonationLevel>"
    return:
      type: System.Threading.Tasks.Task
      description: "Returnerar <xref:System.Threading.Tasks.Task>task-objekt som representerar den asynkrona åtgärden.</xref:System.Threading.Tasks.Task>"
  overload: System.Net.Security.NegotiateStream.AuthenticateAsClientAsync*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>allowedImpersonationLevel</code>är inte ett giltigt värde."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>targetName</code>är null."
  - type: System.Security.Authentication.AuthenticationException
    commentId: T:System.Security.Authentication.AuthenticationException
    description: "Autentiseringen misslyckades. Du kan använda det här objektet ska försöka utföra autentiseringen."
  - type: System.Security.Authentication.InvalidCredentialException
    commentId: T:System.Security.Authentication.InvalidCredentialException
    description: "Autentiseringen misslyckades. Du kan använda det här objektet ska försöka utföra autentiseringen."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Det här objektet har stängts."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Authentication has already occurred.  \n  \n \\- or -  \n  \n This stream was used previously to attempt authentication as the server. You cannot use the stream to retry authentication as the client."
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.AuthenticateAsClientAsync(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ChannelBinding,System.String,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)
  id: AuthenticateAsClientAsync(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ChannelBinding,System.String,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: AuthenticateAsClientAsync(NetworkCredential,ChannelBinding,String,ProtectionLevel,TokenImpersonationLevel)
  nameWithType: NegotiateStream.AuthenticateAsClientAsync(NetworkCredential,ChannelBinding,String,ProtectionLevel,TokenImpersonationLevel)
  fullName: System.Net.Security.NegotiateStream.AuthenticateAsClientAsync(NetworkCredential,ChannelBinding,String,ProtectionLevel,TokenImpersonationLevel)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Anropas av klienter för att autentisera klienten och eventuellt server i en klient / server-anslutning som en asynkron åtgärd. Autentiseringen använder den angivna autentiseringsuppgifter och autentiseringsalternativ kanalbindning."
  remarks: "Använd den `requiredProtectionLevel` parameter till begäran säkerhet för data som överförs med hjälp av autentiserade dataströmmen. Till exempel om du vill att de data som är krypterad och signerad, ange den <xref:System.Net.Security.ProtectionLevel>värde.</xref:System.Net.Security.ProtectionLevel> Autentiseringen garanterar inte som den begärda <xref:System.Net.Security.ProtectionLevel>har beviljats.</xref:System.Net.Security.ProtectionLevel> Du måste kontrollera <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A>och <xref:System.Net.Security.NegotiateStream.IsSigned%2A>Egenskaper för att avgöra vilka säkerhetstjänster som används av <xref:System.Net.Security.NegotiateStream>.</xref:System.Net.Security.NegotiateStream> </xref:System.Net.Security.NegotiateStream.IsSigned%2A> </xref:System.Net.Security.NegotiateStream.IsEncrypted%2A>       Den <xref:System.Security.Authentication.ExtendedProtection.ChannelBinding>används för utökat skydd som skickas till den här metoden i den `binding` parametern skulle hämtas av ett program från <xref:System.Net.Security.SslStream.TransportContext%2A>egenskapen på den associera <xref:System.Net.Security.SslStream>.</xref:System.Net.Security.SslStream> </xref:System.Net.Security.SslStream.TransportContext%2A> </xref:System.Security.Authentication.ExtendedProtection.ChannelBinding>       Om autentiseringen misslyckas felmeddelandet <xref:System.Security.Authentication.AuthenticationException>eller <xref:System.Security.Authentication.InvalidCredentialException>.</xref:System.Security.Authentication.InvalidCredentialException> </xref:System.Security.Authentication.AuthenticationException> I det här fallet kan du försöka autentisering med en annan referens."
  syntax:
    content: public virtual System.Threading.Tasks.Task AuthenticateAsClientAsync (System.Net.NetworkCredential credential, System.Security.Authentication.ExtendedProtection.ChannelBinding binding, string targetName, System.Net.Security.ProtectionLevel requiredProtectionLevel, System.Security.Principal.TokenImpersonationLevel allowedImpersonationLevel);
    parameters:
    - id: credential
      type: System.Net.NetworkCredential
      description: "Den <xref:System.Net.NetworkCredential>som används för att fastställa identiteten för klienten.</xref:System.Net.NetworkCredential>"
    - id: binding
      type: System.Security.Authentication.ExtendedProtection.ChannelBinding
      description: "Den <xref:System.Security.Authentication.ExtendedProtection.ChannelBinding>som används för utökat skydd.</xref:System.Security.Authentication.ExtendedProtection.ChannelBinding>"
    - id: targetName
      type: System.String
      description: "Det namn SPN (Service Principal) som unikt identifierar servern för att autentisera."
    - id: requiredProtectionLevel
      type: System.Net.Security.ProtectionLevel
      description: "En av de <xref href=&quot;System.Net.Security.ProtectionLevel&quot;> </xref> värden, som anger säkerhetstjänsterna för dataströmmen."
    - id: allowedImpersonationLevel
      type: System.Security.Principal.TokenImpersonationLevel
      description: "En av de <xref:System.Security.Principal.TokenImpersonationLevel>värden, som anger hur servern kan använda klientens autentiseringsuppgifter för åtkomst till resurser.</xref:System.Security.Principal.TokenImpersonationLevel>"
    return:
      type: System.Threading.Tasks.Task
      description: "Returnerar <xref:System.Threading.Tasks.Task>task-objekt som representerar den asynkrona åtgärden.</xref:System.Threading.Tasks.Task>"
  overload: System.Net.Security.NegotiateStream.AuthenticateAsClientAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>targetName</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.  \n  \n \\- or -  \n  \n <code>credential</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>allowedImpersonationLevel</code>är inte ett giltigt värde."
  - type: System.Security.Authentication.AuthenticationException
    commentId: T:System.Security.Authentication.AuthenticationException
    description: "Autentiseringen misslyckades. Du kan använda det här objektet ska försöka utföra autentiseringen."
  - type: System.Security.Authentication.InvalidCredentialException
    commentId: T:System.Security.Authentication.InvalidCredentialException
    description: "Autentiseringen misslyckades. Du kan använda det här objektet ska försöka utföra autentiseringen."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Authentication has already occurred.  \n  \n \\- or -  \n  \n This stream was used previously to attempt authentication as the server. You cannot use the stream to retry authentication as the client."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Det här objektet har stängts."
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.AuthenticateAsServer
  id: AuthenticateAsServer
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: AuthenticateAsServer()
  nameWithType: NegotiateStream.AuthenticateAsServer()
  fullName: System.Net.Security.NegotiateStream.AuthenticateAsServer()
  type: Method
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Anropas av servrar för autentisering av klienten och eventuellt server i en klient / server-anslutning."
  remarks: "Autentiseringen använder serverns <xref:System.Net.CredentialCache.DefaultCredentials%2A>.</xref:System.Net.CredentialCache.DefaultCredentials%2A> Inga namn SPN (Service Principal) har angetts för servern. Personifieringsnivån är <xref:System.Security.Principal.TokenImpersonationLevel>, och säkerhetsnivån är <xref:System.Net.Security.ProtectionLevel>.</xref:System.Net.Security.ProtectionLevel> </xref:System.Security.Principal.TokenImpersonationLevel>       När autentiseringen lyckas, måste du kontrollera den <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A>och <xref:System.Net.Security.NegotiateStream.IsSigned%2A>Egenskaper för att avgöra vilka säkerhetstjänster som används av <xref:System.Net.Security.NegotiateStream>.</xref:System.Net.Security.NegotiateStream> </xref:System.Net.Security.NegotiateStream.IsSigned%2A> </xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> Kontrollera den <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A>egenskapen fastställa om ömsesidig autentisering inträffade.</xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A>       Den här metoden blockerar tills åtgärden har slutförts. Om du vill förhindra att blockera tills åtgärden har slutförts, kan du använda en av de <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A>metoden överlagringar.</xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A>       Om autentiseringen misslyckas felmeddelandet <xref:System.Security.Authentication.AuthenticationException>eller <xref:System.Security.Authentication.InvalidCredentialException>.</xref:System.Security.Authentication.InvalidCredentialException> </xref:System.Security.Authentication.AuthenticationException> I det här fallet kan du försöka autentisering med en annan referens."
  syntax:
    content: public virtual void AuthenticateAsServer ();
    parameters: []
  overload: System.Net.Security.NegotiateStream.AuthenticateAsServer*
  exceptions:
  - type: System.Security.Authentication.AuthenticationException
    commentId: T:System.Security.Authentication.AuthenticationException
    description: "Autentiseringen misslyckades. Du kan använda det här objektet ska försöka utföra autentiseringen."
  - type: System.Security.Authentication.InvalidCredentialException
    commentId: T:System.Security.Authentication.InvalidCredentialException
    description: "Autentiseringen misslyckades. Du kan använda det här objektet ska försöka utföra autentiseringen."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Det här objektet har stängts."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "Windows 95 och Windows 98 stöds inte."
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.AuthenticateAsServer(System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy)
  id: AuthenticateAsServer(System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy)
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: AuthenticateAsServer(ExtendedProtectionPolicy)
  nameWithType: NegotiateStream.AuthenticateAsServer(ExtendedProtectionPolicy)
  fullName: System.Net.Security.NegotiateStream.AuthenticateAsServer(ExtendedProtectionPolicy)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Anropas av servrar för autentisering av klienten och eventuellt server i en klient / server-anslutning. Autentiseringsprocessen används för angivna utökat skydd."
  remarks: "Autentiseringen använder serverns <xref:System.Net.CredentialCache.DefaultCredentials%2A>.</xref:System.Net.CredentialCache.DefaultCredentials%2A> Inga namn SPN (Service Principal) har angetts för servern. Personifieringsnivån är <xref:System.Security.Principal.TokenImpersonationLevel>, och säkerhetsnivån är <xref:System.Net.Security.ProtectionLevel>.</xref:System.Net.Security.ProtectionLevel> </xref:System.Security.Principal.TokenImpersonationLevel>       Om den `policy` parametern är `null`, används en utökad skyddsprincip som har <xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.PolicyEnforcement%2A>angetts till <xref:System.Security.Authentication.ExtendedProtection.PolicyEnforcement>.</xref:System.Security.Authentication.ExtendedProtection.PolicyEnforcement> </xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.PolicyEnforcement%2A>       När autentiseringen lyckas, måste du kontrollera den <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A>och <xref:System.Net.Security.NegotiateStream.IsSigned%2A>Egenskaper för att avgöra vilka säkerhetstjänster som används av <xref:System.Net.Security.NegotiateStream>.</xref:System.Net.Security.NegotiateStream> </xref:System.Net.Security.NegotiateStream.IsSigned%2A> </xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> Kontrollera den <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A>egenskapen fastställa om ömsesidig autentisering inträffade.</xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A>       Den här metoden blockerar tills åtgärden har slutförts. Om du vill förhindra att blockera tills åtgärden har slutförts, kan du använda en av de <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A>metoden överlagringar.</xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A>       Om autentiseringen misslyckas felmeddelandet <xref:System.Security.Authentication.AuthenticationException>eller <xref:System.Security.Authentication.InvalidCredentialException>.</xref:System.Security.Authentication.InvalidCredentialException> </xref:System.Security.Authentication.AuthenticationException> I det här fallet kan du försöka autentisering med en annan referens."
  syntax:
    content: public virtual void AuthenticateAsServer (System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy policy);
    parameters:
    - id: policy
      type: System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy
      description: "Den <xref href=&quot;System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy&quot;> </xref> som används för utökat skydd."
  overload: System.Net.Security.NegotiateStream.AuthenticateAsServer*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Den <> </> *> och <> </> *> på den utökade skyddsprincipen som skickades i den <code> policy </code> parametern är båda <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  - type: System.Security.Authentication.AuthenticationException
    commentId: T:System.Security.Authentication.AuthenticationException
    description: "Autentiseringen misslyckades. Du kan använda det här objektet ska försöka utföra autentiseringen."
  - type: System.Security.Authentication.InvalidCredentialException
    commentId: T:System.Security.Authentication.InvalidCredentialException
    description: "Autentiseringen misslyckades. Du kan använda det här objektet ska försöka utföra autentiseringen."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "Windows 95 och Windows 98 stöds inte."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Det här objektet har stängts."
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "Den <code> policy </code> parameter angavs för <xref href=&quot;System.Security.Authentication.ExtendedProtection.PolicyEnforcement&quot;> </xref> på en plattform som inte stöder utökat skydd."
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.AuthenticateAsServer(System.Net.NetworkCredential,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)
  id: AuthenticateAsServer(System.Net.NetworkCredential,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: AuthenticateAsServer(NetworkCredential,ProtectionLevel,TokenImpersonationLevel)
  nameWithType: NegotiateStream.AuthenticateAsServer(NetworkCredential,ProtectionLevel,TokenImpersonationLevel)
  fullName: System.Net.Security.NegotiateStream.AuthenticateAsServer(NetworkCredential,ProtectionLevel,TokenImpersonationLevel)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Anropas av servrar för autentisering av klienten och eventuellt server i en klient / server-anslutning. Autentiseringen använder angivna autentiseringsuppgifter och alternativ för autentisering."
  remarks: "När autentiseringen lyckas, måste du kontrollera den <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A>och <xref:System.Net.Security.NegotiateStream.IsSigned%2A>Egenskaper för att avgöra vilka säkerhetstjänster som används av <xref:System.Net.Security.NegotiateStream>.</xref:System.Net.Security.NegotiateStream> </xref:System.Net.Security.NegotiateStream.IsSigned%2A> </xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> Kontrollera den <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A>egenskapen fastställa om ömsesidig autentisering inträffade.</xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A>       Den här metoden blockerar tills åtgärden har slutförts. Om du vill förhindra att blockera tills åtgärden har slutförts, kan du använda en av de <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A>metoden överlagringar.</xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A>       Om autentiseringen misslyckas felmeddelandet <xref:System.Security.Authentication.AuthenticationException>eller <xref:System.Security.Authentication.InvalidCredentialException>.</xref:System.Security.Authentication.InvalidCredentialException> </xref:System.Security.Authentication.AuthenticationException> I det här fallet kan du försöka autentisering med en annan referens."
  syntax:
    content: public virtual void AuthenticateAsServer (System.Net.NetworkCredential credential, System.Net.Security.ProtectionLevel requiredProtectionLevel, System.Security.Principal.TokenImpersonationLevel requiredImpersonationLevel);
    parameters:
    - id: credential
      type: System.Net.NetworkCredential
      description: "Den <xref:System.Net.NetworkCredential>som används för att fastställa identiteten för servern.</xref:System.Net.NetworkCredential>"
    - id: requiredProtectionLevel
      type: System.Net.Security.ProtectionLevel
      description: "En av de <xref href=&quot;System.Net.Security.ProtectionLevel&quot;> </xref> värden, som anger säkerhetstjänsterna för dataströmmen."
    - id: requiredImpersonationLevel
      type: System.Security.Principal.TokenImpersonationLevel
      description: "En av de <xref:System.Security.Principal.TokenImpersonationLevel>värden, som anger hur servern kan använda klientens autentiseringsuppgifter för åtkomst till resurser.</xref:System.Security.Principal.TokenImpersonationLevel>"
  overload: System.Net.Security.NegotiateStream.AuthenticateAsServer*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>credential </code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>requiredImpersonationLevel</code>must be <xref:System.Security.Principal.TokenImpersonationLevel>, <xref:System.Security.Principal.TokenImpersonationLevel>, or <xref:System.Security.Principal.TokenImpersonationLevel>,"
  - type: System.Security.Authentication.AuthenticationException
    commentId: T:System.Security.Authentication.AuthenticationException
    description: "Autentiseringen misslyckades. Du kan använda det här objektet att autentisera r."
  - type: System.Security.Authentication.InvalidCredentialException
    commentId: T:System.Security.Authentication.InvalidCredentialException
    description: "Autentiseringen misslyckades. Du kan använda det här objektet ska försöka utföra autentiseringen."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Det här objektet har stängts."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Authentication has already occurred.  \n  \n \\- or -  \n  \n This stream was used previously to attempt authentication as the client. You cannot use the stream to retry authentication as the server."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "Windows 95 och Windows 98 stöds inte."
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.AuthenticateAsServer(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)
  id: AuthenticateAsServer(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: AuthenticateAsServer(NetworkCredential,ExtendedProtectionPolicy,ProtectionLevel,TokenImpersonationLevel)
  nameWithType: NegotiateStream.AuthenticateAsServer(NetworkCredential,ExtendedProtectionPolicy,ProtectionLevel,TokenImpersonationLevel)
  fullName: System.Net.Security.NegotiateStream.AuthenticateAsServer(NetworkCredential,ExtendedProtectionPolicy,ProtectionLevel,TokenImpersonationLevel)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Anropas av servrar för autentisering av klienten och eventuellt server i en klient / server-anslutning. Autentiseringen använder den angivna serverautentiseringsuppgifter autentiseringsalternativ och utökad skyddsprincip."
  remarks: "Om den `policy` parametern är `null`, används en utökad skyddsprincip som har <xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.PolicyEnforcement%2A>angetts till <xref:System.Security.Authentication.ExtendedProtection.PolicyEnforcement>.</xref:System.Security.Authentication.ExtendedProtection.PolicyEnforcement> </xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.PolicyEnforcement%2A>       När autentiseringen lyckas, måste du kontrollera den <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A>och <xref:System.Net.Security.NegotiateStream.IsSigned%2A>Egenskaper för att avgöra vilka säkerhetstjänster som används av <xref:System.Net.Security.NegotiateStream>.</xref:System.Net.Security.NegotiateStream> </xref:System.Net.Security.NegotiateStream.IsSigned%2A> </xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> Kontrollera den <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A>egenskapen fastställa om ömsesidig autentisering inträffade.</xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A>       Den här metoden blockerar tills åtgärden har slutförts. Om du vill förhindra att blockera tills åtgärden har slutförts, kan du använda en av de <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A>metoden överlagringar.</xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A>       Om autentiseringen misslyckas felmeddelandet <xref:System.Security.Authentication.AuthenticationException>eller <xref:System.Security.Authentication.InvalidCredentialException>.</xref:System.Security.Authentication.InvalidCredentialException> </xref:System.Security.Authentication.AuthenticationException> I det här fallet kan du försöka autentisering med en annan referens."
  syntax:
    content: public virtual void AuthenticateAsServer (System.Net.NetworkCredential credential, System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy policy, System.Net.Security.ProtectionLevel requiredProtectionLevel, System.Security.Principal.TokenImpersonationLevel requiredImpersonationLevel);
    parameters:
    - id: credential
      type: System.Net.NetworkCredential
      description: "Den <xref:System.Net.NetworkCredential>som används för att fastställa identiteten för klienten.</xref:System.Net.NetworkCredential>"
    - id: policy
      type: System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy
      description: "Den <xref href=&quot;System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy&quot;> </xref> som används för utökat skydd."
    - id: requiredProtectionLevel
      type: System.Net.Security.ProtectionLevel
      description: "En av de <xref href=&quot;System.Net.Security.ProtectionLevel&quot;> </xref> värden, som anger säkerhetstjänsterna för dataströmmen."
    - id: requiredImpersonationLevel
      type: System.Security.Principal.TokenImpersonationLevel
      description: "En av de <xref:System.Security.Principal.TokenImpersonationLevel>värden, som anger hur servern kan använda klientens autentiseringsuppgifter för åtkomst till resurser.</xref:System.Security.Principal.TokenImpersonationLevel>"
  overload: System.Net.Security.NegotiateStream.AuthenticateAsServer*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Den <> </> *> och <> </> *> på den utökade skyddsprincipen som skickades i den <code> policy </code> parametern är båda <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>credential </code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>requiredImpersonationLevel</code>must be <xref:System.Security.Principal.TokenImpersonationLevel>, <xref:System.Security.Principal.TokenImpersonationLevel>, or <xref:System.Security.Principal.TokenImpersonationLevel>,"
  - type: System.Security.Authentication.AuthenticationException
    commentId: T:System.Security.Authentication.AuthenticationException
    description: "Autentiseringen misslyckades. Du kan använda det här objektet att autentisera r."
  - type: System.Security.Authentication.InvalidCredentialException
    commentId: T:System.Security.Authentication.InvalidCredentialException
    description: "Autentiseringen misslyckades. Du kan använda det här objektet ska försöka utföra autentiseringen."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Authentication has already occurred.  \n  \n \\- or -  \n  \n This stream was used previously to attempt authentication as the client. You cannot use the stream to retry authentication as the server."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "Windows 95 och Windows 98 stöds inte."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Det här objektet har stängts."
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "Den <code> policy </code> parameter angavs för <xref href=&quot;System.Security.Authentication.ExtendedProtection.PolicyEnforcement&quot;> </xref> på en plattform som inte stöder utökat skydd."
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.AuthenticateAsServerAsync
  id: AuthenticateAsServerAsync
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: AuthenticateAsServerAsync()
  nameWithType: NegotiateStream.AuthenticateAsServerAsync()
  fullName: System.Net.Security.NegotiateStream.AuthenticateAsServerAsync()
  type: Method
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Anropas av servrar för autentisering av klienten och eventuellt server i en klient / server-anslutning som en asynkron åtgärd."
  remarks: "Autentiseringen använder serverns <xref:System.Net.CredentialCache.DefaultCredentials%2A>.</xref:System.Net.CredentialCache.DefaultCredentials%2A> Inga namn SPN (Service Principal) har angetts för servern. Personifieringsnivån är <xref:System.Security.Principal.TokenImpersonationLevel>, och säkerhetsnivån är <xref:System.Net.Security.ProtectionLevel>.</xref:System.Net.Security.ProtectionLevel> </xref:System.Security.Principal.TokenImpersonationLevel>       När autentiseringen lyckas, måste du kontrollera den <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A>och <xref:System.Net.Security.NegotiateStream.IsSigned%2A>Egenskaper för att avgöra vilka säkerhetstjänster som används av <xref:System.Net.Security.NegotiateStream>.</xref:System.Net.Security.NegotiateStream> </xref:System.Net.Security.NegotiateStream.IsSigned%2A> </xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> Kontrollera den <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A>egenskapen fastställa om ömsesidig autentisering inträffade.</xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A>       Om autentiseringen misslyckas felmeddelandet <xref:System.Security.Authentication.AuthenticationException>eller <xref:System.Security.Authentication.InvalidCredentialException>.</xref:System.Security.Authentication.InvalidCredentialException> </xref:System.Security.Authentication.AuthenticationException> I det här fallet kan du försöka autentisering med en annan referens."
  syntax:
    content: public virtual System.Threading.Tasks.Task AuthenticateAsServerAsync ();
    parameters: []
    return:
      type: System.Threading.Tasks.Task
      description: "Returnerar <xref:System.Threading.Tasks.Task>task-objekt som representerar den asynkrona åtgärden.</xref:System.Threading.Tasks.Task>"
  overload: System.Net.Security.NegotiateStream.AuthenticateAsServerAsync*
  exceptions:
  - type: System.Security.Authentication.AuthenticationException
    commentId: T:System.Security.Authentication.AuthenticationException
    description: "Autentiseringen misslyckades. Du kan använda det här objektet ska försöka utföra autentiseringen."
  - type: System.Security.Authentication.InvalidCredentialException
    commentId: T:System.Security.Authentication.InvalidCredentialException
    description: "Autentiseringen misslyckades. Du kan använda det här objektet ska försöka utföra autentiseringen."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Det här objektet har stängts."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "Windows 95 och Windows 98 stöds inte."
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.AuthenticateAsServerAsync(System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy)
  id: AuthenticateAsServerAsync(System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy)
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: AuthenticateAsServerAsync(ExtendedProtectionPolicy)
  nameWithType: NegotiateStream.AuthenticateAsServerAsync(ExtendedProtectionPolicy)
  fullName: System.Net.Security.NegotiateStream.AuthenticateAsServerAsync(ExtendedProtectionPolicy)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Anropas av servrar för autentisering av klienten och eventuellt server i en klient / server-anslutning som en asynkron åtgärd. Autentiseringsprocessen används för angivna utökat skydd."
  remarks: "Autentiseringen använder serverns <xref:System.Net.CredentialCache.DefaultCredentials%2A>.</xref:System.Net.CredentialCache.DefaultCredentials%2A> Inga namn SPN (Service Principal) har angetts för servern. Personifieringsnivån är <xref:System.Security.Principal.TokenImpersonationLevel>, och säkerhetsnivån är <xref:System.Net.Security.ProtectionLevel>.</xref:System.Net.Security.ProtectionLevel> </xref:System.Security.Principal.TokenImpersonationLevel>       Om den `policy` parametern är `null`, används en utökad skyddsprincip som har <xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.PolicyEnforcement%2A>angetts till <xref:System.Security.Authentication.ExtendedProtection.PolicyEnforcement>.</xref:System.Security.Authentication.ExtendedProtection.PolicyEnforcement> </xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.PolicyEnforcement%2A>       När autentiseringen lyckas, måste du kontrollera den <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A>och <xref:System.Net.Security.NegotiateStream.IsSigned%2A>Egenskaper för att avgöra vilka säkerhetstjänster som används av <xref:System.Net.Security.NegotiateStream>.</xref:System.Net.Security.NegotiateStream> </xref:System.Net.Security.NegotiateStream.IsSigned%2A> </xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> Kontrollera den <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A>egenskapen fastställa om ömsesidig autentisering inträffade.</xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A>       Om autentiseringen misslyckas felmeddelandet <xref:System.Security.Authentication.AuthenticationException>eller <xref:System.Security.Authentication.InvalidCredentialException>.</xref:System.Security.Authentication.InvalidCredentialException> </xref:System.Security.Authentication.AuthenticationException> I det här fallet kan du försöka autentisering med en annan referens."
  syntax:
    content: public virtual System.Threading.Tasks.Task AuthenticateAsServerAsync (System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy policy);
    parameters:
    - id: policy
      type: System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy
      description: "Den <xref href=&quot;System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy&quot;> </xref> som används för utökat skydd."
    return:
      type: System.Threading.Tasks.Task
      description: "Returnerar <xref:System.Threading.Tasks.Task>task-objekt som representerar den asynkrona åtgärden.</xref:System.Threading.Tasks.Task>"
  overload: System.Net.Security.NegotiateStream.AuthenticateAsServerAsync*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Den <> </> *> och <> </> *> på den utökade skyddsprincipen som skickades i den <code> policy </code> parametern är båda <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  - type: System.Security.Authentication.AuthenticationException
    commentId: T:System.Security.Authentication.AuthenticationException
    description: "Autentiseringen misslyckades. Du kan använda det här objektet ska försöka utföra autentiseringen."
  - type: System.Security.Authentication.InvalidCredentialException
    commentId: T:System.Security.Authentication.InvalidCredentialException
    description: "Autentiseringen misslyckades. Du kan använda det här objektet ska försöka utföra autentiseringen."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "Windows 95 och Windows 98 stöds inte."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Det här objektet har stängts."
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "Den <code> policy </code> parameter angavs för <xref href=&quot;System.Security.Authentication.ExtendedProtection.PolicyEnforcement&quot;> </xref> på en plattform som inte stöder utökat skydd."
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.AuthenticateAsServerAsync(System.Net.NetworkCredential,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)
  id: AuthenticateAsServerAsync(System.Net.NetworkCredential,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: AuthenticateAsServerAsync(NetworkCredential,ProtectionLevel,TokenImpersonationLevel)
  nameWithType: NegotiateStream.AuthenticateAsServerAsync(NetworkCredential,ProtectionLevel,TokenImpersonationLevel)
  fullName: System.Net.Security.NegotiateStream.AuthenticateAsServerAsync(NetworkCredential,ProtectionLevel,TokenImpersonationLevel)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Anropas av servrar för autentisering av klienten och eventuellt server i en klient / server-anslutning som en asynkron åtgärd. Autentiseringen använder angivna autentiseringsuppgifter och alternativ för autentisering."
  remarks: "När autentiseringen lyckas, måste du kontrollera den <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A>och <xref:System.Net.Security.NegotiateStream.IsSigned%2A>Egenskaper för att avgöra vilka säkerhetstjänster som används av <xref:System.Net.Security.NegotiateStream>.</xref:System.Net.Security.NegotiateStream> </xref:System.Net.Security.NegotiateStream.IsSigned%2A> </xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> Kontrollera den <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A>egenskapen fastställa om ömsesidig autentisering inträffade.</xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A>       Om autentiseringen misslyckas felmeddelandet <xref:System.Security.Authentication.AuthenticationException>eller <xref:System.Security.Authentication.InvalidCredentialException>.</xref:System.Security.Authentication.InvalidCredentialException> </xref:System.Security.Authentication.AuthenticationException> I det här fallet kan du försöka autentisering med en annan referens."
  syntax:
    content: public virtual System.Threading.Tasks.Task AuthenticateAsServerAsync (System.Net.NetworkCredential credential, System.Net.Security.ProtectionLevel requiredProtectionLevel, System.Security.Principal.TokenImpersonationLevel requiredImpersonationLevel);
    parameters:
    - id: credential
      type: System.Net.NetworkCredential
      description: "Den <xref:System.Net.NetworkCredential>som används för att fastställa identiteten för servern.</xref:System.Net.NetworkCredential>"
    - id: requiredProtectionLevel
      type: System.Net.Security.ProtectionLevel
      description: "En av de <xref href=&quot;System.Net.Security.ProtectionLevel&quot;> </xref> värden, som anger säkerhetstjänsterna för dataströmmen."
    - id: requiredImpersonationLevel
      type: System.Security.Principal.TokenImpersonationLevel
      description: "En av de <xref:System.Security.Principal.TokenImpersonationLevel>värden, som anger hur servern kan använda klientens autentiseringsuppgifter för åtkomst till resurser.</xref:System.Security.Principal.TokenImpersonationLevel>"
    return:
      type: System.Threading.Tasks.Task
      description: "Returnerar <xref:System.Threading.Tasks.Task>task-objekt som representerar den asynkrona åtgärden.</xref:System.Threading.Tasks.Task>"
  overload: System.Net.Security.NegotiateStream.AuthenticateAsServerAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>credential </code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>requiredImpersonationLevel</code>must be <xref:System.Security.Principal.TokenImpersonationLevel>, <xref:System.Security.Principal.TokenImpersonationLevel>, or <xref:System.Security.Principal.TokenImpersonationLevel>,"
  - type: System.Security.Authentication.AuthenticationException
    commentId: T:System.Security.Authentication.AuthenticationException
    description: "Autentiseringen misslyckades. Du kan använda det här objektet att autentisera r."
  - type: System.Security.Authentication.InvalidCredentialException
    commentId: T:System.Security.Authentication.InvalidCredentialException
    description: "Autentiseringen misslyckades. Du kan använda det här objektet ska försöka utföra autentiseringen."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Det här objektet har stängts."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Authentication has already occurred.  \n  \n \\- or -  \n  \n This stream was used previously to attempt authentication as the client. You cannot use the stream to retry authentication as the server."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "Windows 95 och Windows 98 stöds inte."
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.AuthenticateAsServerAsync(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)
  id: AuthenticateAsServerAsync(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: AuthenticateAsServerAsync(NetworkCredential,ExtendedProtectionPolicy,ProtectionLevel,TokenImpersonationLevel)
  nameWithType: NegotiateStream.AuthenticateAsServerAsync(NetworkCredential,ExtendedProtectionPolicy,ProtectionLevel,TokenImpersonationLevel)
  fullName: System.Net.Security.NegotiateStream.AuthenticateAsServerAsync(NetworkCredential,ExtendedProtectionPolicy,ProtectionLevel,TokenImpersonationLevel)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Anropas av servrar för autentisering av klienten och eventuellt server i en klient / server-anslutning som en asynkron åtgärd. Autentiseringen använder den angivna serverautentiseringsuppgifter autentiseringsalternativ och utökad skyddsprincip."
  remarks: "Om den `policy` parametern är `null`, används en utökad skyddsprincip som har <xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.PolicyEnforcement%2A>angetts till <xref:System.Security.Authentication.ExtendedProtection.PolicyEnforcement>.</xref:System.Security.Authentication.ExtendedProtection.PolicyEnforcement> </xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.PolicyEnforcement%2A>       När autentiseringen lyckas, måste du kontrollera den <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A>och <xref:System.Net.Security.NegotiateStream.IsSigned%2A>Egenskaper för att avgöra vilka säkerhetstjänster som används av <xref:System.Net.Security.NegotiateStream>.</xref:System.Net.Security.NegotiateStream> </xref:System.Net.Security.NegotiateStream.IsSigned%2A> </xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> Kontrollera den <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A>egenskapen fastställa om ömsesidig autentisering inträffade.</xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A>       Om autentiseringen misslyckas felmeddelandet <xref:System.Security.Authentication.AuthenticationException>eller <xref:System.Security.Authentication.InvalidCredentialException>.</xref:System.Security.Authentication.InvalidCredentialException> </xref:System.Security.Authentication.AuthenticationException> I det här fallet kan du försöka autentisering med en annan referens."
  syntax:
    content: public virtual System.Threading.Tasks.Task AuthenticateAsServerAsync (System.Net.NetworkCredential credential, System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy policy, System.Net.Security.ProtectionLevel requiredProtectionLevel, System.Security.Principal.TokenImpersonationLevel requiredImpersonationLevel);
    parameters:
    - id: credential
      type: System.Net.NetworkCredential
      description: "Den <xref:System.Net.NetworkCredential>som används för att fastställa identiteten för klienten.</xref:System.Net.NetworkCredential>"
    - id: policy
      type: System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy
      description: "Den <xref href=&quot;System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy&quot;> </xref> som används för utökat skydd."
    - id: requiredProtectionLevel
      type: System.Net.Security.ProtectionLevel
      description: "En av de <xref href=&quot;System.Net.Security.ProtectionLevel&quot;> </xref> värden, som anger säkerhetstjänsterna för dataströmmen."
    - id: requiredImpersonationLevel
      type: System.Security.Principal.TokenImpersonationLevel
      description: "En av de <xref:System.Security.Principal.TokenImpersonationLevel>värden, som anger hur servern kan använda klientens autentiseringsuppgifter för åtkomst till resurser.</xref:System.Security.Principal.TokenImpersonationLevel>"
    return:
      type: System.Threading.Tasks.Task
      description: "Returnerar <xref:System.Threading.Tasks.Task>task-objekt som representerar den asynkrona åtgärden.</xref:System.Threading.Tasks.Task>"
  overload: System.Net.Security.NegotiateStream.AuthenticateAsServerAsync*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Den <> </> *> och <> </> *> på den utökade skyddsprincipen som skickades i den <code> policy </code> parametern är båda <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>credential </code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>requiredImpersonationLevel</code>must be <xref:System.Security.Principal.TokenImpersonationLevel>, <xref:System.Security.Principal.TokenImpersonationLevel>, or <xref:System.Security.Principal.TokenImpersonationLevel>,"
  - type: System.Security.Authentication.AuthenticationException
    commentId: T:System.Security.Authentication.AuthenticationException
    description: "Autentiseringen misslyckades. Du kan använda det här objektet att autentisera r."
  - type: System.Security.Authentication.InvalidCredentialException
    commentId: T:System.Security.Authentication.InvalidCredentialException
    description: "Autentiseringen misslyckades. Du kan använda det här objektet ska försöka utföra autentiseringen."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Authentication has already occurred.  \n  \n \\- or -  \n  \n This stream was used previously to attempt authentication as the client. You cannot use the stream to retry authentication as the server."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "Windows 95 och Windows 98 stöds inte."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Det här objektet har stängts."
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "Den <code> policy </code> parameter angavs för <xref href=&quot;System.Security.Authentication.ExtendedProtection.PolicyEnforcement&quot;> </xref> på en plattform som inte stöder utökat skydd."
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.BeginAuthenticateAsClient(System.AsyncCallback,System.Object)
  id: BeginAuthenticateAsClient(System.AsyncCallback,System.Object)
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: BeginAuthenticateAsClient(AsyncCallback,Object)
  nameWithType: NegotiateStream.BeginAuthenticateAsClient(AsyncCallback,Object)
  fullName: System.Net.Security.NegotiateStream.BeginAuthenticateAsClient(AsyncCallback,Object)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Anropas av klienter för att påbörja en asynkron åtgärd för att autentisera klienten och eventuellt server i en klient / server-anslutning. Den här metoden blockerar inte."
  remarks: "Autentiseringen använder klientens <xref:System.Net.CredentialCache.DefaultCredentials%2A>.</xref:System.Net.CredentialCache.DefaultCredentials%2A> Inga namn SPN (Service Principal) har angetts för servern. Personifieringsnivån är <xref:System.Security.Principal.TokenImpersonationLevel>, och säkerhetsnivån är <xref:System.Net.Security.ProtectionLevel>.</xref:System.Net.Security.ProtectionLevel> </xref:System.Security.Principal.TokenImpersonationLevel> Den <xref:System.Net.Security.NegotiateStream>klassen kommer konstruera SPN används för ömsesidig autentisering.</xref:System.Net.Security.NegotiateStream>       Den här metoden är asynkron och blockeras inte när åtgärden har slutförts. Om du vill blockera tills åtgärden har slutförts, kan du använda en av de <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>metoden överlagringar.</xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>       Asynkron autentisering-åtgärden måste utföras genom att anropa den <xref:System.Net.Security.NegotiateStream.EndAuthenticateAsClient%2A>metoden.</xref:System.Net.Security.NegotiateStream.EndAuthenticateAsClient%2A> Normalt metoden anropas av den `asyncCallback` delegera. Detaljerad information om hur du använder asynkrona programmeringsmiljö finns [anropar asynkront synkrona metoder](~/add/includes/ajax-current-ext-md.md) om autentiseringen misslyckas felmeddelandet <xref:System.Security.Authentication.AuthenticationException>eller <xref:System.Security.Authentication.InvalidCredentialException>.</xref:System.Security.Authentication.InvalidCredentialException> </xref:System.Security.Authentication.AuthenticationException> I det här fallet kan du försöka autentisering med en annan referens."
  example:
  - "The following code example demonstrates calling this method to begin an asynchronous authentication for the client.  \n  \n [!code-cpp[NclNegoAsyncClient#2](~/add/codesnippet/cpp/66fdfed9-ce77-41e0-af55-_1.cpp)]\n [!code-cs[NclNegoAsyncClient#2](~/add/codesnippet/csharp/66fdfed9-ce77-41e0-af55-_1.cs)]"
  syntax:
    content: public virtual IAsyncResult BeginAuthenticateAsClient (AsyncCallback asyncCallback, object asyncState);
    parameters:
    - id: asyncCallback
      type: System.AsyncCallback
      description: "En <xref:System.AsyncCallback>delegat som refererar till metoden som ska anropas när autentiseringen är slutförd.</xref:System.AsyncCallback>"
    - id: asyncState
      type: System.Object
      description: "Ett användardefinierat-objekt som innehåller information om åtgärden. Det här objektet har överförts till den `asyncCallback` delegera när åtgärden har slutförts."
    return:
      type: System.IAsyncResult
      description: "En <xref:System.IAsyncResult>objekt som anger status för den asynkrona åtgärden.</xref:System.IAsyncResult>"
  overload: System.Net.Security.NegotiateStream.BeginAuthenticateAsClient*
  exceptions:
  - type: System.Security.Authentication.AuthenticationException
    commentId: T:System.Security.Authentication.AuthenticationException
    description: "Autentiseringen misslyckades. Du kan använda det här objektet ska försöka utföra autentiseringen."
  - type: System.Security.Authentication.InvalidCredentialException
    commentId: T:System.Security.Authentication.InvalidCredentialException
    description: "Autentiseringen misslyckades. Du kan använda det här objektet ska försöka utföra autentiseringen."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Det här objektet har stängts."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Authentication has already occurred.  \n  \n \\- or -  \n  \n This stream was used previously to attempt authentication as the server. You cannot use the stream to retry authentication as the client."
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.BeginAuthenticateAsClient(System.Net.NetworkCredential,System.String,System.AsyncCallback,System.Object)
  id: BeginAuthenticateAsClient(System.Net.NetworkCredential,System.String,System.AsyncCallback,System.Object)
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: BeginAuthenticateAsClient(NetworkCredential,String,AsyncCallback,Object)
  nameWithType: NegotiateStream.BeginAuthenticateAsClient(NetworkCredential,String,AsyncCallback,Object)
  fullName: System.Net.Security.NegotiateStream.BeginAuthenticateAsClient(NetworkCredential,String,AsyncCallback,Object)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Anropas av klienter för att påbörja en asynkron åtgärd för att autentisera klienten och eventuellt server i en klient / server-anslutning. Autentiseringen använder de angivna autentiseringsuppgifterna. Den här metoden blockerar inte."
  remarks: "Den här metoden är asynkron och blockeras inte när åtgärden har slutförts. Om du vill blockera tills åtgärden har slutförts, kan du använda en av de <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>metoden överlagringar.</xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>       Asynkron autentisering-åtgärden måste utföras genom att anropa den <xref:System.Net.Security.NegotiateStream.EndAuthenticateAsClient%2A>metoden.</xref:System.Net.Security.NegotiateStream.EndAuthenticateAsClient%2A> Normalt metoden anropas av den `asyncCallback` delegera. Detaljerad information om hur du använder asynkrona programmeringsmiljö finns [anropar asynkront synkrona metoder](~/add/includes/ajax-current-ext-md.md) om autentiseringen misslyckas felmeddelandet <xref:System.Security.Authentication.AuthenticationException>eller <xref:System.Security.Authentication.InvalidCredentialException>.</xref:System.Security.Authentication.InvalidCredentialException> </xref:System.Security.Authentication.AuthenticationException> I det här fallet kan du försöka autentisering med en annan referens."
  syntax:
    content: public virtual IAsyncResult BeginAuthenticateAsClient (System.Net.NetworkCredential credential, string targetName, AsyncCallback asyncCallback, object asyncState);
    parameters:
    - id: credential
      type: System.Net.NetworkCredential
      description: "Den <xref:System.Net.NetworkCredential>som används för att fastställa identiteten för klienten.</xref:System.Net.NetworkCredential>"
    - id: targetName
      type: System.String
      description: "Det namn SPN (Service Principal) som unikt identifierar servern för att autentisera."
    - id: asyncCallback
      type: System.AsyncCallback
      description: "En <xref:System.AsyncCallback>delegat som refererar till metoden som ska anropas när autentiseringen är slutförd.</xref:System.AsyncCallback>"
    - id: asyncState
      type: System.Object
      description: "Ett användardefinierat-objekt som innehåller information om åtgärden. Det här objektet har överförts till den `asyncCallback` delegera när åtgärden har slutförts."
    return:
      type: System.IAsyncResult
      description: "En <xref:System.IAsyncResult>objekt som anger status för den asynkrona åtgärden.</xref:System.IAsyncResult>"
  overload: System.Net.Security.NegotiateStream.BeginAuthenticateAsClient*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>credential</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.  \n  \n \\- or -  \n  \n <code>targetName</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."
  - type: System.Security.Authentication.AuthenticationException
    commentId: T:System.Security.Authentication.AuthenticationException
    description: "Autentiseringen misslyckades. Du kan använda det här objektet ska försöka utföra autentiseringen."
  - type: System.Security.Authentication.InvalidCredentialException
    commentId: T:System.Security.Authentication.InvalidCredentialException
    description: "Autentiseringen misslyckades. Du kan använda det här objektet ska försöka utföra autentiseringen."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Det här objektet har stängts."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Authentication has already occurred.  \n  \n \\- or -  \n  \n This stream was used previously to attempt authentication as the server. You cannot use the stream to retry authentication as the client."
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.BeginAuthenticateAsClient(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ChannelBinding,System.String,System.AsyncCallback,System.Object)
  id: BeginAuthenticateAsClient(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ChannelBinding,System.String,System.AsyncCallback,System.Object)
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: BeginAuthenticateAsClient(NetworkCredential,ChannelBinding,String,AsyncCallback,Object)
  nameWithType: NegotiateStream.BeginAuthenticateAsClient(NetworkCredential,ChannelBinding,String,AsyncCallback,Object)
  fullName: System.Net.Security.NegotiateStream.BeginAuthenticateAsClient(NetworkCredential,ChannelBinding,String,AsyncCallback,Object)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Anropas av klienter för att påbörja en asynkron åtgärd för att autentisera klienten och eventuellt server i en klient / server-anslutning. Autentiseringen använder de angivna autentiseringsuppgifterna och kanalbindning. Den här metoden blockerar inte."
  remarks: "Den här metoden är asynkron och blockeras inte när åtgärden har slutförts. Om du vill blockera tills åtgärden har slutförts, kan du använda en av de <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>metoden överlagringar.</xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>       Asynkron autentisering-åtgärden måste utföras genom att anropa den <xref:System.Net.Security.NegotiateStream.EndAuthenticateAsClient%2A>metoden.</xref:System.Net.Security.NegotiateStream.EndAuthenticateAsClient%2A> Normalt metoden anropas av den `asyncCallback` delegera. Detaljerad information om hur du använder asynkrona programmeringsmiljö finns [anropar asynkront synkrona metoder](~/add/includes/ajax-current-ext-md.md) om autentiseringen misslyckas felmeddelandet <xref:System.Security.Authentication.AuthenticationException>eller <xref:System.Security.Authentication.InvalidCredentialException>.</xref:System.Security.Authentication.InvalidCredentialException> </xref:System.Security.Authentication.AuthenticationException> I det här fallet kan du försöka autentisering med en annan referens."
  syntax:
    content: public virtual IAsyncResult BeginAuthenticateAsClient (System.Net.NetworkCredential credential, System.Security.Authentication.ExtendedProtection.ChannelBinding binding, string targetName, AsyncCallback asyncCallback, object asyncState);
    parameters:
    - id: credential
      type: System.Net.NetworkCredential
      description: "Den <xref:System.Net.NetworkCredential>som används för att fastställa identiteten för klienten.</xref:System.Net.NetworkCredential>"
    - id: binding
      type: System.Security.Authentication.ExtendedProtection.ChannelBinding
      description: "Den <xref:System.Security.Authentication.ExtendedProtection.ChannelBinding>som används för utökat skydd.</xref:System.Security.Authentication.ExtendedProtection.ChannelBinding>"
    - id: targetName
      type: System.String
      description: "Det namn SPN (Service Principal) som unikt identifierar servern för att autentisera."
    - id: asyncCallback
      type: System.AsyncCallback
      description: "En <xref:System.AsyncCallback>delegat som refererar till metoden som ska anropas när autentiseringen är slutförd.</xref:System.AsyncCallback>"
    - id: asyncState
      type: System.Object
      description: "Ett användardefinierat-objekt som innehåller information om åtgärden. Det här objektet har överförts till den `asyncCallback` delegera när åtgärden har slutförts."
    return:
      type: System.IAsyncResult
      description: "En <xref:System.IAsyncResult>objekt som anger status för den asynkrona åtgärden.</xref:System.IAsyncResult>"
  overload: System.Net.Security.NegotiateStream.BeginAuthenticateAsClient*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>credential</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.  \n  \n \\- or -  \n  \n <code>targetName</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."
  - type: System.Security.Authentication.AuthenticationException
    commentId: T:System.Security.Authentication.AuthenticationException
    description: "Autentiseringen misslyckades. Du kan använda det här objektet ska försöka utföra autentiseringen."
  - type: System.Security.Authentication.InvalidCredentialException
    commentId: T:System.Security.Authentication.InvalidCredentialException
    description: "Autentiseringen misslyckades. Du kan använda det här objektet ska försöka utföra autentiseringen."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Authentication has already occurred.  \n  \n \\- or -  \n  \n This stream was used previously to attempt authentication as the server. You cannot use the stream to retry authentication as the client."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Det här objektet har stängts."
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.BeginAuthenticateAsClient(System.Net.NetworkCredential,System.String,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel,System.AsyncCallback,System.Object)
  id: BeginAuthenticateAsClient(System.Net.NetworkCredential,System.String,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel,System.AsyncCallback,System.Object)
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: BeginAuthenticateAsClient(NetworkCredential,String,ProtectionLevel,TokenImpersonationLevel,AsyncCallback,Object)
  nameWithType: NegotiateStream.BeginAuthenticateAsClient(NetworkCredential,String,ProtectionLevel,TokenImpersonationLevel,AsyncCallback,Object)
  fullName: System.Net.Security.NegotiateStream.BeginAuthenticateAsClient(NetworkCredential,String,ProtectionLevel,TokenImpersonationLevel,AsyncCallback,Object)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Anropas av klienter för att påbörja en asynkron åtgärd för att autentisera klienten och eventuellt server i en klient / server-anslutning. Autentiseringen använder de angivna autentiseringsuppgifterna och alternativ för autentisering. Den här metoden blockerar inte."
  remarks: "Använd den `requiredProtectionLevel` parameter till begäran säkerhet för data som överförs med hjälp av autentiserade dataströmmen. Till exempel om du vill att de data som är krypterad och signerad, ange den <xref:System.Net.Security.ProtectionLevel>värde.</xref:System.Net.Security.ProtectionLevel> Autentiseringen garanterar inte som den begärda <xref:System.Net.Security.ProtectionLevel>har beviljats.</xref:System.Net.Security.ProtectionLevel> Du måste kontrollera <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A>och <xref:System.Net.Security.NegotiateStream.IsSigned%2A>Egenskaper för att avgöra vilka säkerhetstjänster som används av <xref:System.Net.Security.NegotiateStream>.</xref:System.Net.Security.NegotiateStream> </xref:System.Net.Security.NegotiateStream.IsSigned%2A> </xref:System.Net.Security.NegotiateStream.IsEncrypted%2A>       Den här metoden är asynkron och blockeras inte när åtgärden har slutförts. Om du vill blockera tills åtgärden har slutförts, kan du använda en av de <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>metoden överlagringar.</xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>       Asynkron autentisering-åtgärden måste utföras genom att anropa den <xref:System.Net.Security.NegotiateStream.EndAuthenticateAsClient%2A>metoden.</xref:System.Net.Security.NegotiateStream.EndAuthenticateAsClient%2A> Normalt metoden anropas av den `asyncCallback` delegera. Detaljerad information om hur du använder asynkrona programmeringsmiljö finns [anropar asynkront synkrona metoder](~/add/includes/ajax-current-ext-md.md) om autentiseringen misslyckas felmeddelandet <xref:System.Security.Authentication.AuthenticationException>eller <xref:System.Security.Authentication.InvalidCredentialException>.</xref:System.Security.Authentication.InvalidCredentialException> </xref:System.Security.Authentication.AuthenticationException> I det här fallet kan du försöka autentisering med en annan referens."
  syntax:
    content: public virtual IAsyncResult BeginAuthenticateAsClient (System.Net.NetworkCredential credential, string targetName, System.Net.Security.ProtectionLevel requiredProtectionLevel, System.Security.Principal.TokenImpersonationLevel allowedImpersonationLevel, AsyncCallback asyncCallback, object asyncState);
    parameters:
    - id: credential
      type: System.Net.NetworkCredential
      description: "Den <xref:System.Net.NetworkCredential>som används för att fastställa identiteten för klienten.</xref:System.Net.NetworkCredential>"
    - id: targetName
      type: System.String
      description: "Det namn SPN (Service Principal) som unikt identifierar servern för att autentisera."
    - id: requiredProtectionLevel
      type: System.Net.Security.ProtectionLevel
      description: "En av de <xref href=&quot;System.Net.Security.ProtectionLevel&quot;> </xref> värden, som anger säkerhetstjänsterna för dataströmmen."
    - id: allowedImpersonationLevel
      type: System.Security.Principal.TokenImpersonationLevel
      description: "En av de <xref:System.Security.Principal.TokenImpersonationLevel>värden, som anger hur servern kan använda klientens autentiseringsuppgifter för åtkomst till resurser.</xref:System.Security.Principal.TokenImpersonationLevel>"
    - id: asyncCallback
      type: System.AsyncCallback
      description: "En <xref:System.AsyncCallback>delegat som refererar till metoden som ska anropas när autentiseringen är slutförd.</xref:System.AsyncCallback>"
    - id: asyncState
      type: System.Object
      description: "Ett användardefinierat-objekt som innehåller information om åtgärden. Det här objektet har överförts till den `asyncCallback` delegera när åtgärden har slutförts."
    return:
      type: System.IAsyncResult
      description: "En <xref:System.IAsyncResult>objekt som anger status för den asynkrona åtgärden.</xref:System.IAsyncResult>"
  overload: System.Net.Security.NegotiateStream.BeginAuthenticateAsClient*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>credential</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.  \n  \n \\- or -  \n  \n <code>targetName</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."
  - type: System.Security.Authentication.AuthenticationException
    commentId: T:System.Security.Authentication.AuthenticationException
    description: "Autentiseringen misslyckades. Du kan använda det här objektet ska försöka utföra autentiseringen."
  - type: System.Security.Authentication.InvalidCredentialException
    commentId: T:System.Security.Authentication.InvalidCredentialException
    description: "Autentiseringen misslyckades. Du kan använda det här objektet ska försöka utföra autentiseringen."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Det här objektet har stängts."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Authentication has already occurred.  \n  \n \\- or -  \n  \n This stream was used previously to attempt authentication as the server. You cannot use the stream to retry authentication as the client."
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.BeginAuthenticateAsClient(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ChannelBinding,System.String,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel,System.AsyncCallback,System.Object)
  id: BeginAuthenticateAsClient(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ChannelBinding,System.String,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel,System.AsyncCallback,System.Object)
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: BeginAuthenticateAsClient(NetworkCredential,ChannelBinding,String,ProtectionLevel,TokenImpersonationLevel,AsyncCallback,Object)
  nameWithType: NegotiateStream.BeginAuthenticateAsClient(NetworkCredential,ChannelBinding,String,ProtectionLevel,TokenImpersonationLevel,AsyncCallback,Object)
  fullName: System.Net.Security.NegotiateStream.BeginAuthenticateAsClient(NetworkCredential,ChannelBinding,String,ProtectionLevel,TokenImpersonationLevel,AsyncCallback,Object)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Anropas av klienter för att påbörja en asynkron åtgärd för att autentisera klienten och eventuellt server i en klient / server-anslutning. Autentiseringen använder den angivna autentiseringsuppgifter och autentiseringsalternativ kanalbindning. Den här metoden blockerar inte."
  remarks: "Använd den `requiredProtectionLevel` parameter till begäran säkerhet för data som överförs med hjälp av autentiserade dataströmmen. Till exempel om du vill att de data som är krypterad och signerad, ange den <xref:System.Net.Security.ProtectionLevel>värde.</xref:System.Net.Security.ProtectionLevel> Autentiseringen garanterar inte som den begärda <xref:System.Net.Security.ProtectionLevel>har beviljats.</xref:System.Net.Security.ProtectionLevel> Du måste kontrollera <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A>och <xref:System.Net.Security.NegotiateStream.IsSigned%2A>Egenskaper för att avgöra vilka säkerhetstjänster som används av <xref:System.Net.Security.NegotiateStream>.</xref:System.Net.Security.NegotiateStream> </xref:System.Net.Security.NegotiateStream.IsSigned%2A> </xref:System.Net.Security.NegotiateStream.IsEncrypted%2A>       Den här metoden är asynkron och blockeras inte när åtgärden har slutförts. Om du vill blockera tills åtgärden har slutförts, kan du använda en av de <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>metoden överlagringar.</xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>       Asynkron autentisering-åtgärden måste utföras genom att anropa den <xref:System.Net.Security.NegotiateStream.EndAuthenticateAsClient%2A>metoden.</xref:System.Net.Security.NegotiateStream.EndAuthenticateAsClient%2A> Normalt metoden anropas av den `asyncCallback` delegera. Detaljerad information om hur du använder asynkrona programmeringsmiljö finns [anropar asynkront synkrona metoder](~/add/includes/ajax-current-ext-md.md) om autentiseringen misslyckas felmeddelandet <xref:System.Security.Authentication.AuthenticationException>eller <xref:System.Security.Authentication.InvalidCredentialException>.</xref:System.Security.Authentication.InvalidCredentialException> </xref:System.Security.Authentication.AuthenticationException> I det här fallet kan du försöka autentisering med en annan referens."
  syntax:
    content: public virtual IAsyncResult BeginAuthenticateAsClient (System.Net.NetworkCredential credential, System.Security.Authentication.ExtendedProtection.ChannelBinding binding, string targetName, System.Net.Security.ProtectionLevel requiredProtectionLevel, System.Security.Principal.TokenImpersonationLevel allowedImpersonationLevel, AsyncCallback asyncCallback, object asyncState);
    parameters:
    - id: credential
      type: System.Net.NetworkCredential
      description: "Den <xref:System.Net.NetworkCredential>som används för att fastställa identiteten för klienten.</xref:System.Net.NetworkCredential>"
    - id: binding
      type: System.Security.Authentication.ExtendedProtection.ChannelBinding
      description: "Den <xref:System.Security.Authentication.ExtendedProtection.ChannelBinding>som används för utökat skydd.</xref:System.Security.Authentication.ExtendedProtection.ChannelBinding>"
    - id: targetName
      type: System.String
      description: "Det namn SPN (Service Principal) som unikt identifierar servern för att autentisera."
    - id: requiredProtectionLevel
      type: System.Net.Security.ProtectionLevel
      description: "En av de <xref href=&quot;System.Net.Security.ProtectionLevel&quot;> </xref> värden, som anger säkerhetstjänsterna för dataströmmen."
    - id: allowedImpersonationLevel
      type: System.Security.Principal.TokenImpersonationLevel
      description: "En av de <xref:System.Security.Principal.TokenImpersonationLevel>värden, som anger hur servern kan använda klientens autentiseringsuppgifter för åtkomst till resurser.</xref:System.Security.Principal.TokenImpersonationLevel>"
    - id: asyncCallback
      type: System.AsyncCallback
      description: "En <xref:System.AsyncCallback>delegat som refererar till metoden som ska anropas när autentiseringen är slutförd.</xref:System.AsyncCallback>"
    - id: asyncState
      type: System.Object
      description: "Ett användardefinierat-objekt som innehåller information om åtgärden. Det här objektet har överförts till den `asyncCallback` delegera när åtgärden har slutförts."
    return:
      type: System.IAsyncResult
      description: "En <xref:System.IAsyncResult>objekt som anger status för den asynkrona åtgärden.</xref:System.IAsyncResult>"
  overload: System.Net.Security.NegotiateStream.BeginAuthenticateAsClient*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>credential</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.  \n  \n \\- or -  \n  \n <code>targetName</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."
  - type: System.Security.Authentication.AuthenticationException
    commentId: T:System.Security.Authentication.AuthenticationException
    description: "Autentiseringen misslyckades. Du kan använda det här objektet ska försöka utföra autentiseringen."
  - type: System.Security.Authentication.InvalidCredentialException
    commentId: T:System.Security.Authentication.InvalidCredentialException
    description: "Autentiseringen misslyckades. Du kan använda det här objektet ska försöka utföra autentiseringen."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Authentication has already occurred.  \n  \n \\- or -  \n  \n This stream was used previously to attempt authentication as the server. You cannot use the stream to retry authentication as the client."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Det här objektet har stängts."
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.BeginAuthenticateAsServer(System.AsyncCallback,System.Object)
  id: BeginAuthenticateAsServer(System.AsyncCallback,System.Object)
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: BeginAuthenticateAsServer(AsyncCallback,Object)
  nameWithType: NegotiateStream.BeginAuthenticateAsServer(AsyncCallback,Object)
  fullName: System.Net.Security.NegotiateStream.BeginAuthenticateAsServer(AsyncCallback,Object)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Anropas av servrar för att påbörja en asynkron åtgärd för att autentisera klienten och eventuellt server i en klient / server-anslutning. Den här metoden blockerar inte."
  remarks: "Autentiseringen använder serverns <xref:System.Net.CredentialCache.DefaultCredentials%2A>.</xref:System.Net.CredentialCache.DefaultCredentials%2A> Inga namn SPN (Service Principal) har angetts för servern. Personifieringsnivån är <xref:System.Security.Principal.TokenImpersonationLevel>säkerhetsnivån är <xref:System.Net.Security.ProtectionLevel>.</xref:System.Net.Security.ProtectionLevel> </xref:System.Security.Principal.TokenImpersonationLevel>       När autentiseringen lyckas, måste du kontrollera den <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A>och <xref:System.Net.Security.NegotiateStream.IsSigned%2A>Egenskaper för att avgöra vilka säkerhetstjänster som används av <xref:System.Net.Security.NegotiateStream>.</xref:System.Net.Security.NegotiateStream> </xref:System.Net.Security.NegotiateStream.IsSigned%2A> </xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> Kontrollera den <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A>egenskapen fastställa om ömsesidig autentisering inträffade.</xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A>       Om du vill blockera tills åtgärden har slutförts, kan du använda en av de <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>metoden överlagringar.</xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>       Om autentiseringen misslyckas felmeddelandet <xref:System.Security.Authentication.AuthenticationException>eller <xref:System.Security.Authentication.InvalidCredentialException>.</xref:System.Security.Authentication.InvalidCredentialException> </xref:System.Security.Authentication.AuthenticationException> I det här fallet kan du försöka autentisering med en annan referens."
  syntax:
    content: public virtual IAsyncResult BeginAuthenticateAsServer (AsyncCallback asyncCallback, object asyncState);
    parameters:
    - id: asyncCallback
      type: System.AsyncCallback
      description: "En <xref:System.AsyncCallback>delegat som refererar till metoden som ska anropas när autentiseringen är slutförd.</xref:System.AsyncCallback>"
    - id: asyncState
      type: System.Object
      description: "Ett användardefinierat-objekt som innehåller information om åtgärden. Det här objektet har överförts till den `asyncCallback` delegera när åtgärden har slutförts."
    return:
      type: System.IAsyncResult
      description: "En <xref:System.IAsyncResult>objekt som anger status för den asynkrona åtgärden.</xref:System.IAsyncResult>"
  overload: System.Net.Security.NegotiateStream.BeginAuthenticateAsServer*
  exceptions:
  - type: System.Security.Authentication.AuthenticationException
    commentId: T:System.Security.Authentication.AuthenticationException
    description: "Autentiseringen misslyckades. Du kan använda det här objektet ska försöka utföra autentiseringen."
  - type: System.Security.Authentication.InvalidCredentialException
    commentId: T:System.Security.Authentication.InvalidCredentialException
    description: "Autentiseringen misslyckades. Du kan använda det här objektet ska försöka utföra autentiseringen."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Det här objektet har stängts."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "Windows 95 och Windows 98 stöds inte."
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.BeginAuthenticateAsServer(System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy,System.AsyncCallback,System.Object)
  id: BeginAuthenticateAsServer(System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy,System.AsyncCallback,System.Object)
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: BeginAuthenticateAsServer(ExtendedProtectionPolicy,AsyncCallback,Object)
  nameWithType: NegotiateStream.BeginAuthenticateAsServer(ExtendedProtectionPolicy,AsyncCallback,Object)
  fullName: System.Net.Security.NegotiateStream.BeginAuthenticateAsServer(ExtendedProtectionPolicy,AsyncCallback,Object)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Anropas av servrar för att påbörja en asynkron åtgärd för att autentisera klienten och eventuellt server i en klient / server-anslutning. Autentiseringsprocessen används för angivna utökat skydd. Den här metoden blockerar inte."
  remarks: "Autentiseringen använder serverns <xref:System.Net.CredentialCache.DefaultCredentials%2A>.</xref:System.Net.CredentialCache.DefaultCredentials%2A> Inga namn SPN (Service Principal) har angetts för servern. Personifieringsnivån är <xref:System.Security.Principal.TokenImpersonationLevel>säkerhetsnivån är <xref:System.Net.Security.ProtectionLevel>.</xref:System.Net.Security.ProtectionLevel> </xref:System.Security.Principal.TokenImpersonationLevel>       Om den `policy` parametern är `null`, används en utökad skyddsprincip som har <xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.PolicyEnforcement%2A>angetts till <xref:System.Security.Authentication.ExtendedProtection.PolicyEnforcement>.</xref:System.Security.Authentication.ExtendedProtection.PolicyEnforcement> </xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.PolicyEnforcement%2A>       När autentiseringen lyckas, måste du kontrollera den <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A>och <xref:System.Net.Security.NegotiateStream.IsSigned%2A>Egenskaper för att avgöra vilka säkerhetstjänster som används av <xref:System.Net.Security.NegotiateStream>.</xref:System.Net.Security.NegotiateStream> </xref:System.Net.Security.NegotiateStream.IsSigned%2A> </xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> Kontrollera den <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A>egenskapen fastställa om ömsesidig autentisering inträffade.</xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A>       Om du vill blockera tills åtgärden har slutförts, kan du använda en av de <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>metoden överlagringar.</xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>       Om autentiseringen misslyckas felmeddelandet <xref:System.Security.Authentication.AuthenticationException>eller <xref:System.Security.Authentication.InvalidCredentialException>.</xref:System.Security.Authentication.InvalidCredentialException> </xref:System.Security.Authentication.AuthenticationException> I det här fallet kan du försöka autentisering med en annan referens."
  syntax:
    content: public virtual IAsyncResult BeginAuthenticateAsServer (System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy policy, AsyncCallback asyncCallback, object asyncState);
    parameters:
    - id: policy
      type: System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy
      description: "Den <xref href=&quot;System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy&quot;> </xref> som används för utökat skydd."
    - id: asyncCallback
      type: System.AsyncCallback
      description: "En <xref:System.AsyncCallback>delegat som refererar till metoden som ska anropas när autentiseringen är slutförd.</xref:System.AsyncCallback>"
    - id: asyncState
      type: System.Object
      description: "Ett användardefinierat-objekt som innehåller information om åtgärden. Det här objektet har överförts till den `asyncCallback` delegera när åtgärden har slutförts."
    return:
      type: System.IAsyncResult
      description: "En <xref:System.IAsyncResult>objekt som anger status för den asynkrona åtgärden.</xref:System.IAsyncResult>"
  overload: System.Net.Security.NegotiateStream.BeginAuthenticateAsServer*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Den <> </> *> och <> </> *> på den utökade skyddsprincipen som skickades i den <code> policy </code> parametern är båda <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  - type: System.Security.Authentication.AuthenticationException
    commentId: T:System.Security.Authentication.AuthenticationException
    description: "Autentiseringen misslyckades. Du kan använda det här objektet ska försöka utföra autentiseringen."
  - type: System.Security.Authentication.InvalidCredentialException
    commentId: T:System.Security.Authentication.InvalidCredentialException
    description: "Autentiseringen misslyckades. Du kan använda det här objektet ska försöka utföra autentiseringen."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "Windows 95 och Windows 98 stöds inte."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Det här objektet har stängts."
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "Den <code> policy </code> parameter angavs för <xref href=&quot;System.Security.Authentication.ExtendedProtection.PolicyEnforcement&quot;> </xref> på en plattform som inte stöder utökat skydd."
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.BeginAuthenticateAsServer(System.Net.NetworkCredential,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel,System.AsyncCallback,System.Object)
  id: BeginAuthenticateAsServer(System.Net.NetworkCredential,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel,System.AsyncCallback,System.Object)
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: BeginAuthenticateAsServer(NetworkCredential,ProtectionLevel,TokenImpersonationLevel,AsyncCallback,Object)
  nameWithType: NegotiateStream.BeginAuthenticateAsServer(NetworkCredential,ProtectionLevel,TokenImpersonationLevel,AsyncCallback,Object)
  fullName: System.Net.Security.NegotiateStream.BeginAuthenticateAsServer(NetworkCredential,ProtectionLevel,TokenImpersonationLevel,AsyncCallback,Object)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Anropas av servrar för att påbörja en asynkron åtgärd för att autentisera klienten och eventuellt server i en klient / server-anslutning. Autentiseringen använder angivna autentiseringsuppgifter och alternativ för autentisering. Den här metoden blockerar inte."
  remarks: "Använd den `requiredProtectionLevel` parameter till begäran säkerhet för data som överförs med hjälp av autentiserade dataströmmen. Till exempel om du vill att de data som är krypterad och signerad, ange den <xref:System.Net.Security.ProtectionLevel>värde.</xref:System.Net.Security.ProtectionLevel> Autentiseringen garanterar inte som den begärda <xref:System.Net.Security.ProtectionLevel>har beviljats.</xref:System.Net.Security.ProtectionLevel> Du måste kontrollera <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A>och <xref:System.Net.Security.NegotiateStream.IsSigned%2A>Egenskaper för att avgöra vilka säkerhetstjänster som används av <xref:System.Net.Security.NegotiateStream>.</xref:System.Net.Security.NegotiateStream> </xref:System.Net.Security.NegotiateStream.IsSigned%2A> </xref:System.Net.Security.NegotiateStream.IsEncrypted%2A>       Den här metoden är asynkron och blockeras inte när åtgärden har slutförts. Om du vill blockera tills åtgärden har slutförts, kan du använda en av de <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>metoden överlagringar.</xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>       Asynkron autentisering-åtgärden måste utföras genom att anropa den <xref:System.Net.Security.NegotiateStream.EndAuthenticateAsServer%2A>metoden.</xref:System.Net.Security.NegotiateStream.EndAuthenticateAsServer%2A> Normalt metoden anropas av den `asyncCallback` delegera. Detaljerad information om hur du använder asynkrona programmeringsmiljö finns [anropar asynkront synkrona metoder](~/add/includes/ajax-current-ext-md.md) om autentiseringen misslyckas felmeddelandet <xref:System.Security.Authentication.AuthenticationException>eller <xref:System.Security.Authentication.InvalidCredentialException>.</xref:System.Security.Authentication.InvalidCredentialException> </xref:System.Security.Authentication.AuthenticationException> I det här fallet kan du försöka autentisering med en annan referens."
  syntax:
    content: public virtual IAsyncResult BeginAuthenticateAsServer (System.Net.NetworkCredential credential, System.Net.Security.ProtectionLevel requiredProtectionLevel, System.Security.Principal.TokenImpersonationLevel requiredImpersonationLevel, AsyncCallback asyncCallback, object asyncState);
    parameters:
    - id: credential
      type: System.Net.NetworkCredential
      description: "Den <xref:System.Net.NetworkCredential>som används för att fastställa identiteten för klienten.</xref:System.Net.NetworkCredential>"
    - id: requiredProtectionLevel
      type: System.Net.Security.ProtectionLevel
      description: "En av de <xref href=&quot;System.Net.Security.ProtectionLevel&quot;> </xref> värden, som anger säkerhetstjänsterna för dataströmmen."
    - id: requiredImpersonationLevel
      type: System.Security.Principal.TokenImpersonationLevel
      description: "En av de <xref:System.Security.Principal.TokenImpersonationLevel>värden, som anger hur servern kan använda klientens autentiseringsuppgifter för åtkomst till resurser.</xref:System.Security.Principal.TokenImpersonationLevel>"
    - id: asyncCallback
      type: System.AsyncCallback
      description: "En <xref:System.AsyncCallback>delegat som refererar till metoden som ska anropas när autentiseringen är slutförd.</xref:System.AsyncCallback>"
    - id: asyncState
      type: System.Object
      description: "Ett användardefinierat-objekt som innehåller information om åtgärden. Det här objektet har överförts till den `asyncCallback` delegera när åtgärden har slutförts."
    return:
      type: System.IAsyncResult
      description: "En <xref:System.IAsyncResult>objekt som anger status för den asynkrona åtgärden.</xref:System.IAsyncResult>"
  overload: System.Net.Security.NegotiateStream.BeginAuthenticateAsServer*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>credential</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>requiredImpersonationLevel</code>must be <xref:System.Security.Principal.TokenImpersonationLevel>, <xref:System.Security.Principal.TokenImpersonationLevel>, or <xref:System.Security.Principal.TokenImpersonationLevel>,"
  - type: System.Security.Authentication.AuthenticationException
    commentId: T:System.Security.Authentication.AuthenticationException
    description: "Autentiseringen misslyckades. Du kan använda det här objektet ska försöka utföra autentiseringen."
  - type: System.Security.Authentication.InvalidCredentialException
    commentId: T:System.Security.Authentication.InvalidCredentialException
    description: "Autentiseringen misslyckades. Du kan använda det här objektet ska försöka utföra autentiseringen."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Det här objektet har stängts."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Authentication has already occurred.  \n  \n \\- or -  \n  \n This stream was used previously to attempt authentication as the client. You cannot use the stream to retry authentication as the server."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "Windows 95 och Windows 98 stöds inte."
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.BeginAuthenticateAsServer(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel,System.AsyncCallback,System.Object)
  id: BeginAuthenticateAsServer(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel,System.AsyncCallback,System.Object)
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: BeginAuthenticateAsServer(NetworkCredential,ExtendedProtectionPolicy,ProtectionLevel,TokenImpersonationLevel,AsyncCallback,Object)
  nameWithType: NegotiateStream.BeginAuthenticateAsServer(NetworkCredential,ExtendedProtectionPolicy,ProtectionLevel,TokenImpersonationLevel,AsyncCallback,Object)
  fullName: System.Net.Security.NegotiateStream.BeginAuthenticateAsServer(NetworkCredential,ExtendedProtectionPolicy,ProtectionLevel,TokenImpersonationLevel,AsyncCallback,Object)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Anropas av servrar för att påbörja en asynkron åtgärd för att autentisera klienten och eventuellt server i en klient / server-anslutning. Autentiseringen använder den angivna serverautentiseringsuppgifter autentiseringsalternativ och utökad skyddsprincip. Den här metoden blockerar inte."
  remarks: "Använd den `requiredProtectionLevel` parameter till begäran säkerhet för data som överförs med hjälp av autentiserade dataströmmen. Till exempel om du vill att de data som är krypterad och signerad, ange den <xref:System.Net.Security.ProtectionLevel>värde.</xref:System.Net.Security.ProtectionLevel> Autentiseringen garanterar inte som den begärda <xref:System.Net.Security.ProtectionLevel>har beviljats.</xref:System.Net.Security.ProtectionLevel> Du måste kontrollera <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A>och <xref:System.Net.Security.NegotiateStream.IsSigned%2A>Egenskaper för att avgöra vilka säkerhetstjänster som används av <xref:System.Net.Security.NegotiateStream>.</xref:System.Net.Security.NegotiateStream> </xref:System.Net.Security.NegotiateStream.IsSigned%2A> </xref:System.Net.Security.NegotiateStream.IsEncrypted%2A>       Om den `policy` parametern är `null`, används en utökad skyddsprincip som har <xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.PolicyEnforcement%2A>angetts till <xref:System.Security.Authentication.ExtendedProtection.PolicyEnforcement>.</xref:System.Security.Authentication.ExtendedProtection.PolicyEnforcement> </xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.PolicyEnforcement%2A>       Den här metoden är asynkron och blockeras inte när åtgärden har slutförts. Om du vill blockera tills åtgärden har slutförts, kan du använda en av de <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>metoden överlagringar.</xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>       Asynkron autentisering-åtgärden måste utföras genom att anropa den <xref:System.Net.Security.NegotiateStream.EndAuthenticateAsServer%2A>metoden.</xref:System.Net.Security.NegotiateStream.EndAuthenticateAsServer%2A> Normalt metoden anropas av den `asyncCallback` delegera. Detaljerad information om hur du använder asynkrona programmeringsmiljö finns [anropar asynkront synkrona metoder](~/add/includes/ajax-current-ext-md.md) om autentiseringen misslyckas felmeddelandet <xref:System.Security.Authentication.AuthenticationException>eller <xref:System.Security.Authentication.InvalidCredentialException>.</xref:System.Security.Authentication.InvalidCredentialException> </xref:System.Security.Authentication.AuthenticationException> I det här fallet kan du försöka autentisering med en annan referens."
  syntax:
    content: public virtual IAsyncResult BeginAuthenticateAsServer (System.Net.NetworkCredential credential, System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy policy, System.Net.Security.ProtectionLevel requiredProtectionLevel, System.Security.Principal.TokenImpersonationLevel requiredImpersonationLevel, AsyncCallback asyncCallback, object asyncState);
    parameters:
    - id: credential
      type: System.Net.NetworkCredential
      description: "Den <xref:System.Net.NetworkCredential>som används för att fastställa identiteten för klienten.</xref:System.Net.NetworkCredential>"
    - id: policy
      type: System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy
      description: "Den <xref href=&quot;System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy&quot;> </xref> som används för utökat skydd."
    - id: requiredProtectionLevel
      type: System.Net.Security.ProtectionLevel
      description: "En av de <xref href=&quot;System.Net.Security.ProtectionLevel&quot;> </xref> värden, som anger säkerhetstjänsterna för dataströmmen."
    - id: requiredImpersonationLevel
      type: System.Security.Principal.TokenImpersonationLevel
      description: "En av de <xref:System.Security.Principal.TokenImpersonationLevel>värden, som anger hur servern kan använda klientens autentiseringsuppgifter för åtkomst till resurser.</xref:System.Security.Principal.TokenImpersonationLevel>"
    - id: asyncCallback
      type: System.AsyncCallback
      description: "En <xref:System.AsyncCallback>delegat som refererar till metoden som ska anropas när autentiseringen är slutförd.</xref:System.AsyncCallback>"
    - id: asyncState
      type: System.Object
      description: "Ett användardefinierat-objekt som innehåller information om åtgärden. Det här objektet har överförts till den `asyncCallback` delegera när åtgärden har slutförts."
    return:
      type: System.IAsyncResult
      description: "En <xref:System.IAsyncResult>objekt som anger status för den asynkrona åtgärden.</xref:System.IAsyncResult>"
  overload: System.Net.Security.NegotiateStream.BeginAuthenticateAsServer*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Den <> </> *> och <> </> *> på den utökade skyddsprincipen som skickades i den <code> policy </code> parametern är båda <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>credential</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>requiredImpersonationLevel</code>must be <xref:System.Security.Principal.TokenImpersonationLevel>, <xref:System.Security.Principal.TokenImpersonationLevel>, or <xref:System.Security.Principal.TokenImpersonationLevel>,"
  - type: System.Security.Authentication.AuthenticationException
    commentId: T:System.Security.Authentication.AuthenticationException
    description: "Autentiseringen misslyckades. Du kan använda det här objektet ska försöka utföra autentiseringen."
  - type: System.Security.Authentication.InvalidCredentialException
    commentId: T:System.Security.Authentication.InvalidCredentialException
    description: "Autentiseringen misslyckades. Du kan använda det här objektet ska försöka utföra autentiseringen."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Authentication has already occurred.  \n  \n \\- or -  \n  \n This stream was used previously to attempt authentication as the client. You cannot use the stream to retry authentication as the server."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "Windows 95 och Windows 98 stöds inte."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Det här objektet har stängts."
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "Den <code> policy </code> parameter angavs för <xref href=&quot;System.Security.Authentication.ExtendedProtection.PolicyEnforcement&quot;> </xref> på en plattform som inte stöder utökat skydd."
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)
  id: BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: BeginRead(Byte[],Int32,Int32,AsyncCallback,Object)
  nameWithType: NegotiateStream.BeginRead(Byte[],Int32,Int32,AsyncCallback,Object)
  fullName: System.Net.Security.NegotiateStream.BeginRead(Byte[],Int32,Int32,AsyncCallback,Object)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Börjar en asynkron läsning som läser data från dataströmmen och lagrar den i den angivna matrisen."
  remarks: "Om kryptering, registrerar, eller kryptering och signering aktiveras Läsåtgärden läser data från den underliggande dataströmmen kontrollerar integriteten för data och dekrypterar den. Om ingen säkerhet tjänster som kryptering och signering som används, börjar den här metoden en asynkron läsåtgärd på den underliggande dataströmmen.       Den här metoden är asynkron och blockeras inte när åtgärden har slutförts. Använd för att blockera tills åtgärden har slutförts i <xref:System.Net.Security.NegotiateStream.Read%2A>metod.</xref:System.Net.Security.NegotiateStream.Read%2A>       Asynkron läsåtgärd måste utföras genom att anropa den <xref:System.Net.Security.NegotiateStream.EndRead%2A>metoden.</xref:System.Net.Security.NegotiateStream.EndRead%2A> Normalt metoden anropas av den `asyncCallback` delegera. Detaljerad information om hur du använder asynkrona programmeringsmiljö finns [anropar asynkront synkrona metoder](~/add/includes/ajax-current-ext-md.md) den <xref:System.Net.Security.NegotiateStream>klassen stöder inte flera samtidiga läsåtgärder.</xref:System.Net.Security.NegotiateStream> Om du försöker starta en Läsåtgärd när en annan åtgärd körs redan på samma dataström en <xref:System.NotSupportedException>undantag.</xref:System.NotSupportedException>       Du kan inte anropa den här metoden förrän du har autentiserats. För att autentisera, anropar en av de <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>, <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A>, <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>, eller <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A>metoder.</xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> </xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A> </xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A> </xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>"
  example:
  - "The following code example demonstrates starting an asynchronous read operation. This code example is part of a larger example provided for the <xref:System.Net.Security.NegotiateStream> class.  \n  \n [!code-cs[NclNegoAsyncServer#1](~/add/codesnippet/csharp/45085c2d-bb14-48e7-a75f-_1.cs)]\n [!code-cpp[NclNegoAsyncServer#1](~/add/codesnippet/cpp/45085c2d-bb14-48e7-a75f-_1.cpp)]"
  syntax:
    content: public override IAsyncResult BeginRead (byte[] buffer, int offset, int count, AsyncCallback asyncCallback, object asyncState);
    parameters:
    - id: buffer
      type: System.Byte[]
      description: "En <xref:System.Byte>matris som tar emot byte lästes in från strömmen.</xref:System.Byte>"
    - id: offset
      type: System.Int32
      description: "Den nollbaserade platsen i `buffer` som du vill börja lagra data läses från den här dataströmmen."
    - id: count
      type: System.Int32
      description: "Maximalt antal byte som ska läsas från dataströmmen."
    - id: asyncCallback
      type: System.AsyncCallback
      description: "En <xref:System.AsyncCallback>delegat som refererar till metoden som ska anropas när Läsåtgärden har slutförts.</xref:System.AsyncCallback>"
    - id: asyncState
      type: System.Object
      description: "Ett användardefinierat-objekt som innehåller information om läsningen. Det här objektet har överförts till den `asyncCallback` delegera när åtgärden har slutförts."
    return:
      type: System.IAsyncResult
      description: "En <xref:System.IAsyncResult>objekt som anger status för den asynkrona åtgärden.</xref:System.IAsyncResult>"
  overload: System.Net.Security.NegotiateStream.BeginRead*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>buffer</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>offset</code> is less than 0.  \n  \n \\- or -  \n  \n <code>offset</code> is greater than the length of <code>buffer</code>.  \n  \n \\- or -  \n  \n <code>offset</code> plus <code>count</code> is greater than the length of <code>buffer</code>."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "The read operation failed.  \n  \n \\- or -  \n  \n Encryption is in use, but the data could not be decrypted."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "Det finns redan en läsning pågår."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Det här objektet har stängts."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Autentiseringen har inte utförts."
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)
  id: BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: BeginWrite(Byte[],Int32,Int32,AsyncCallback,Object)
  nameWithType: NegotiateStream.BeginWrite(Byte[],Int32,Int32,AsyncCallback,Object)
  fullName: System.Net.Security.NegotiateStream.BeginWrite(Byte[],Int32,Int32,AsyncCallback,Object)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Börjar en asynkron skrivåtgärd som skriver <xref:System.Byte>s från den angivna bufferten till dataströmmen.</xref:System.Byte>"
  remarks: "Om kryptering, registrerar, eller kryptering och signering aktiveras den här metoden läser data från bufferten, krypterar, signerar eller krypterar och signerar den och skickar den med hjälp av den underliggande dataströmmen. Om ingen säkerhet tjänster som kryptering och signering som används, börjar den här metoden en asynkron skrivning-åtgärden på den underliggande dataströmmen.       Den här metoden är asynkron och blockeras inte när åtgärden har slutförts. Använd för att blockera tills åtgärden har slutförts i <xref:System.Net.Security.NegotiateStream.Read%2A>metod.</xref:System.Net.Security.NegotiateStream.Read%2A>       Asynkron läsåtgärd måste utföras genom att anropa den <xref:System.Net.Security.NegotiateStream.EndWrite%2A>metoden.</xref:System.Net.Security.NegotiateStream.EndWrite%2A> Normalt metoden anropas av den `asyncCallback` delegera. Detaljerad information om hur du använder asynkrona programmeringsmiljö finns [anropar asynkront synkrona metoder](~/add/includes/ajax-current-ext-md.md) den <xref:System.Net.Security.NegotiateStream>klassen stöder inte flera samtidiga skrivåtgärder.</xref:System.Net.Security.NegotiateStream> Om du försöker starta en skrivåtgärd medan en annan Skrivåtgärden körs redan på samma dataström en <xref:System.NotSupportedException>undantag.</xref:System.NotSupportedException>       Du kan inte anropa den här metoden förrän du har autentiserats. För att autentisera, anropar en av de <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>, <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A>, <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>, eller <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A>metoder.</xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> </xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A> </xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A> </xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>"
  example:
  - "The following code example demonstrates beginning an asynchronous write operation.  \n  \n [!code-cpp[NclNegoAsyncClient#3](~/add/codesnippet/cpp/5748c807-4e74-4d4c-a4e4-_1.cpp)]\n [!code-cs[NclNegoAsyncClient#3](~/add/codesnippet/csharp/5748c807-4e74-4d4c-a4e4-_1.cs)]  \n  \n The following method is called when the operation completes.  \n  \n [!code-cpp[NclNegoAsyncClient#4](~/add/codesnippet/cpp/5748c807-4e74-4d4c-a4e4-_2.cpp)]\n [!code-cs[NclNegoAsyncClient#4](~/add/codesnippet/csharp/5748c807-4e74-4d4c-a4e4-_2.cs)]"
  syntax:
    content: public override IAsyncResult BeginWrite (byte[] buffer, int offset, int count, AsyncCallback asyncCallback, object asyncState);
    parameters:
    - id: buffer
      type: System.Byte[]
      description: "En <xref:System.Byte>matris som tillhandahåller byte som ska skrivas till dataströmmen.</xref:System.Byte>"
    - id: offset
      type: System.Int32
      description: "Den nollbaserade platsen i `buffer` som du vill börja läsa byte som ska skrivas till dataströmmen."
    - id: count
      type: System.Int32
      description: "Ett <xref:System.Int32>värde som anger antalet byte som ska läsas från `buffer`.</xref:System.Int32>"
    - id: asyncCallback
      type: System.AsyncCallback
      description: "En <xref:System.AsyncCallback>delegat som refererar till metoden som ska anropas när åtgärden har slutförts.</xref:System.AsyncCallback>"
    - id: asyncState
      type: System.Object
      description: "Ett användardefinierat-objekt som innehåller information om åtgärden. Det här objektet har överförts till den `asyncCallback` delegera när åtgärden har slutförts."
    return:
      type: System.IAsyncResult
      description: "En <xref:System.IAsyncResult>objekt som anger status för den asynkrona åtgärden.</xref:System.IAsyncResult>"
  overload: System.Net.Security.NegotiateStream.BeginWrite*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>buffer</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>offset is less than 0</code>.  \n  \n \\- or -  \n  \n <code>offset</code> is greater than the length of <code>buffer</code>.  \n  \n \\- or -  \n  \n <code>offset</code> plus count is greater than the length of <code>buffer</code>."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "The write operation failed.  \n  \n \\- or -  \n  \n Encryption is in use, but the data could not be encrypted."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "Det finns redan pågår en skrivåtgärd."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Det här objektet har stängts."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Autentiseringen har inte utförts."
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.CanRead
  id: CanRead
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: CanRead
  nameWithType: NegotiateStream.CanRead
  fullName: System.Net.Security.NegotiateStream.CanRead
  type: Property
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Hämtar en <xref:System.Boolean>värde som anger om den underliggande dataströmmen är läsbar.</xref:System.Boolean>"
  remarks: "Om autentiseringen har inträffat, den här egenskapen returnerar värdet som returneras genom att anropa den <xref:System.IO.Stream.CanRead%2A>egenskapen på den underliggande dataströmmen.</xref:System.IO.Stream.CanRead%2A> Den underliggande dataströmmen som anges när du skapar en instans av <xref:System.Net.Security.NegotiateStream>klassen.</xref:System.Net.Security.NegotiateStream>"
  example:
  - "The following code example demonstrates displaying the value of this property.  \n  \n [!code-cs[NclNegoSyncClient#2](~/add/codesnippet/csharp/p-system.net.security.ne_4_1.cs)]\n [!code-cpp[NclNegoSyncClient#2](~/add/codesnippet/cpp/p-system.net.security.ne_4_1.cpp)]"
  syntax:
    content: public override bool CanRead { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Om autentisering har genomförts och den underliggande dataströmmen är läsbart; Annars <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Net.Security.NegotiateStream.CanRead*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.CanSeek
  id: CanSeek
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: CanSeek
  nameWithType: NegotiateStream.CanSeek
  fullName: System.Net.Security.NegotiateStream.CanSeek
  type: Property
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Hämtar en <xref:System.Boolean>värde som anger om den underliggande dataströmmen är sökbar.</xref:System.Boolean>"
  remarks: "Du bör inte försöka ange position för den <xref:System.Net.Security.NegotiateStream>objekt eller dess underliggande dataström.</xref:System.Net.Security.NegotiateStream> Den underliggande dataströmmen som anges när du skapar en instans av <xref:System.Net.Security.NegotiateStream>klassen.</xref:System.Net.Security.NegotiateStream>"
  example:
  - "The following code example demonstrates displaying the value of this property.  \n  \n [!code-cs[NclNegoSyncClient#2](~/add/codesnippet/csharp/p-system.net.security.ne_3_1.cs)]\n [!code-cpp[NclNegoSyncClient#2](~/add/codesnippet/cpp/p-system.net.security.ne_3_1.cpp)]"
  syntax:
    content: public override bool CanSeek { get; }
    return:
      type: System.Boolean
      description: "Den här egenskapen returnerar alltid <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Net.Security.NegotiateStream.CanSeek*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.CanTimeout
  id: CanTimeout
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: CanTimeout
  nameWithType: NegotiateStream.CanTimeout
  fullName: System.Net.Security.NegotiateStream.CanTimeout
  type: Property
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Hämtar en <xref:System.Boolean>värde som anger om den underliggande dataströmmen stöder timeout.</xref:System.Boolean>"
  remarks: "Den här egenskapen returnerar värdet som returneras genom att anropa den <xref:System.IO.Stream.CanTimeout%2A>egenskapen på den underliggande dataströmmen.</xref:System.IO.Stream.CanTimeout%2A> Den underliggande dataströmmen som anges när du skapar en instans av <xref:System.Net.Security.NegotiateStream>klassen.</xref:System.Net.Security.NegotiateStream>"
  example:
  - "The following code example demonstrates displaying the value of this property.  \n  \n [!code-cs[NclNegoSyncClient#2](~/add/codesnippet/csharp/p-system.net.security.ne_2_1.cs)]\n [!code-cpp[NclNegoSyncClient#2](~/add/codesnippet/cpp/p-system.net.security.ne_2_1.cpp)]"
  syntax:
    content: public override bool CanTimeout { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Om den underliggande dataströmmen stöder timeout; Annars <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Net.Security.NegotiateStream.CanTimeout*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.CanWrite
  id: CanWrite
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: CanWrite
  nameWithType: NegotiateStream.CanWrite
  fullName: System.Net.Security.NegotiateStream.CanWrite
  type: Property
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Hämtar en <xref:System.Boolean>värde som anger om den underliggande dataströmmen är skrivbar.</xref:System.Boolean>"
  remarks: "Om autentiseringen har inträffat, den här egenskapen returnerar värdet som returneras genom att anropa den <xref:System.IO.Stream.CanWrite%2A>egenskapen på den underliggande dataströmmen.</xref:System.IO.Stream.CanWrite%2A> Den underliggande dataströmmen som anges när du skapar en instans av <xref:System.Net.Security.NegotiateStream>klassen.</xref:System.Net.Security.NegotiateStream>"
  example:
  - "The following code example demonstrates displaying the value of this property.  \n  \n [!code-cs[NclNegoSyncClient#2](~/add/codesnippet/csharp/p-system.net.security.ne_6_1.cs)]\n [!code-cpp[NclNegoSyncClient#2](~/add/codesnippet/cpp/p-system.net.security.ne_6_1.cpp)]"
  syntax:
    content: public override bool CanWrite { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Om autentisering har genomförts och den underliggande dataströmmen är skrivbar; Annars <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Net.Security.NegotiateStream.CanWrite*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: NegotiateStream.Dispose(Boolean)
  fullName: System.Net.Security.NegotiateStream.Dispose(Boolean)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Släpper de ohanterade resurser som används av den <xref href=&quot;System.Net.Security.NegotiateStream&quot;> </xref> och släpper du de hantera resurserna."
  remarks: "Den här metoden anropas av allmänheten `Dispose()`metod och <xref:System.Object.Finalize%2A>metod.</xref:System.Object.Finalize%2A> `Dispose()`anropar den skyddade `Dispose(Boolean)` metod med den `disposing` parametern `true`. <xref:System.Object.Finalize%2A>anropar `Dispose` med `disposing` inställd på `false`.</xref:System.Object.Finalize%2A>       När den `disposing` parametern är true, den här metoden Frigör alla resurser som innehas av alla hanterade objekt som den här <xref:System.Net.Security.NegotiateStream>referenser.</xref:System.Net.Security.NegotiateStream> Den här metoden startar den `Dispose()` metod för varje refererade till objekt."
  syntax:
    content: protected override void Dispose (bool disposing);
    parameters:
    - id: disposing
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Frisläpp både hanterade och ohanterade resurser. <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> att släppa endast resurser som inte hanteras."
  overload: System.Net.Security.NegotiateStream.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.EndAuthenticateAsClient(System.IAsyncResult)
  id: EndAuthenticateAsClient(System.IAsyncResult)
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: EndAuthenticateAsClient(IAsyncResult)
  nameWithType: NegotiateStream.EndAuthenticateAsClient(IAsyncResult)
  fullName: System.Net.Security.NegotiateStream.EndAuthenticateAsClient(IAsyncResult)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Avslutar en väntande asynkron autentisering klientåtgärden som startades med ett anrop till <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient*>.</xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient*>"
  remarks: "Om åtgärden inte har slutförts, blockerar den här metoden tills det fungerar. När autentiseringen lyckas, måste du kontrollera den <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A>och <xref:System.Net.Security.NegotiateStream.IsSigned%2A>Egenskaper för att avgöra vilka säkerhetstjänster som används av <xref:System.Net.Security.NegotiateStream>.</xref:System.Net.Security.NegotiateStream> </xref:System.Net.Security.NegotiateStream.IsSigned%2A> </xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> Kontrollera den <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A>egenskapen fastställa om ömsesidig autentisering inträffade.</xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A>       Om autentiseringen misslyckas felmeddelandet <xref:System.Security.Authentication.AuthenticationException>eller <xref:System.Security.Authentication.InvalidCredentialException>.</xref:System.Security.Authentication.InvalidCredentialException> </xref:System.Security.Authentication.AuthenticationException> I det här fallet kan du försöka autentisering med en annan referens.       Om du vill utföra den här åtgärden synkront med någon av de <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>metod.</xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>"
  syntax:
    content: public virtual void EndAuthenticateAsClient (IAsyncResult asyncResult);
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: "En <xref:System.IAsyncResult>instans som returnerades av ett anrop till <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient*>.</xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient*> </xref:System.IAsyncResult>"
  overload: System.Net.Security.NegotiateStream.EndAuthenticateAsClient*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>asyncResult</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>asyncResult</code>skapades inte av ett anrop till <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient*>."
  - type: System.Security.Authentication.AuthenticationException
    commentId: T:System.Security.Authentication.AuthenticationException
    description: "Autentiseringen misslyckades. Du kan använda det här objektet ska försöka utföra autentiseringen."
  - type: System.Security.Authentication.InvalidCredentialException
    commentId: T:System.Security.Authentication.InvalidCredentialException
    description: "Autentiseringen misslyckades. Du kan använda det här objektet ska försöka utföra autentiseringen."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Det finns inga väntande klientautentisering för att slutföra."
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.EndAuthenticateAsServer(System.IAsyncResult)
  id: EndAuthenticateAsServer(System.IAsyncResult)
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: EndAuthenticateAsServer(IAsyncResult)
  nameWithType: NegotiateStream.EndAuthenticateAsServer(IAsyncResult)
  fullName: System.Net.Security.NegotiateStream.EndAuthenticateAsServer(IAsyncResult)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Avslutar en väntande asynkron autentisering klientåtgärden som startades med ett anrop till <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer*>.</xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer*>"
  remarks: "Om åtgärden inte har slutförts, blockerar den här metoden tills det fungerar.       När autentiseringen lyckas, måste du kontrollera den <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A>och <xref:System.Net.Security.NegotiateStream.IsSigned%2A>Egenskaper för att avgöra vilka säkerhetstjänster som används av <xref:System.Net.Security.NegotiateStream>.</xref:System.Net.Security.NegotiateStream> </xref:System.Net.Security.NegotiateStream.IsSigned%2A> </xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> Kontrollera den <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A>egenskapen fastställa om ömsesidig autentisering inträffade.</xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A>       Om autentiseringen misslyckas felmeddelandet <xref:System.Security.Authentication.AuthenticationException>eller <xref:System.Security.Authentication.InvalidCredentialException>.</xref:System.Security.Authentication.InvalidCredentialException> </xref:System.Security.Authentication.AuthenticationException> I det här fallet kan du försöka autentisering med en annan referens.       Använd för att utföra den här åtgärden synkront den <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>metoden.</xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>"
  syntax:
    content: public virtual void EndAuthenticateAsServer (IAsyncResult asyncResult);
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: "En <xref:System.IAsyncResult>instans som returnerades av ett anrop till <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer*>.</xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer*> </xref:System.IAsyncResult>"
  overload: System.Net.Security.NegotiateStream.EndAuthenticateAsServer*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>asyncResult</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>asyncResult</code>skapades inte av ett anrop till <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer*>."
  - type: System.Security.Authentication.AuthenticationException
    commentId: T:System.Security.Authentication.AuthenticationException
    description: "Autentiseringen misslyckades. Du kan använda det här objektet ska försöka utföra autentiseringen."
  - type: System.Security.Authentication.InvalidCredentialException
    commentId: T:System.Security.Authentication.InvalidCredentialException
    description: "Autentiseringen misslyckades. Du kan använda det här objektet ska försöka utföra autentiseringen."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Det finns ingen pågående autentisering ska slutföras."
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.EndRead(System.IAsyncResult)
  id: EndRead(System.IAsyncResult)
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: EndRead(IAsyncResult)
  nameWithType: NegotiateStream.EndRead(IAsyncResult)
  fullName: System.Net.Security.NegotiateStream.EndRead(IAsyncResult)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Avslutar en asynkron läsning startades med ett anrop till <xref:System.Net.Security.NegotiateStream.BeginRead*>.</xref:System.Net.Security.NegotiateStream.BeginRead*>"
  remarks: "Om åtgärden inte har slutförts, blockerar den här metoden tills det fungerar.       Använd för att utföra den här åtgärden synkront den <xref:System.Net.Security.NegotiateStream.Read%2A>metoden.</xref:System.Net.Security.NegotiateStream.Read%2A>       Du kan inte anropa den här metoden förrän du har autentiserats. För att autentisera, anropar en av de <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>, <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A>, <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>, eller <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A>metoder.</xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> </xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A> </xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A> </xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>"
  example:
  - "The following code example demonstrates ending an asynchronous read operation. For an example that demonstrates starting the operation, see <xref:System.Net.Security.NegotiateStream.BeginRead%2A>.  \n  \n [!code-cs[NclNegoAsyncServer#3](~/add/codesnippet/csharp/m-system.net.security.ne_2_1.cs)]\n [!code-cpp[NclNegoAsyncServer#3](~/add/codesnippet/cpp/m-system.net.security.ne_2_1.cpp)]"
  syntax:
    content: public override int EndRead (IAsyncResult asyncResult);
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: "En <xref:System.IAsyncResult>-instans som returnerades av ett anrop till <xref:System.Net.Security.NegotiateStream.BeginRead*></xref:System.Net.Security.NegotiateStream.BeginRead*> </xref:System.IAsyncResult>"
    return:
      type: System.Int32
      description: "En <xref:System.Int32>värde som anger antalet byte lästes in från strömmen underliggande.</xref:System.Int32>"
  overload: System.Net.Security.NegotiateStream.EndRead*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>asyncResult</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "AsyncResult skapades inte av ett anrop till <xref:System.Net.Security.NegotiateStream.BeginRead*>.</xref:System.Net.Security.NegotiateStream.BeginRead*>"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Autentiseringen har inte utförts."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "Läsningen misslyckades."
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.EndWrite(System.IAsyncResult)
  id: EndWrite(System.IAsyncResult)
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: EndWrite(IAsyncResult)
  nameWithType: NegotiateStream.EndWrite(IAsyncResult)
  fullName: System.Net.Security.NegotiateStream.EndWrite(IAsyncResult)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Avslutar en asynkron skrivning åtgärd som startades med ett anrop till <xref:System.Net.Security.NegotiateStream.BeginWrite*>.</xref:System.Net.Security.NegotiateStream.BeginWrite*>"
  remarks: "Om åtgärden inte har slutförts, blockerar den här metoden tills det fungerar.       Du kan inte anropa den här metoden förrän du har autentiserats. För att autentisera, anropar en av de <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>, <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A>, <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>, eller <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A>metoder.</xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> </xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A> </xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A> </xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>       Använd för att utföra den här åtgärden synkront den <xref:System.Net.Security.NegotiateStream.Write%2A>metoden.</xref:System.Net.Security.NegotiateStream.Write%2A>"
  example:
  - "The following code example demonstrates a method that is called to complete the asynchronous write operation. For an example that demonstrates starting the operation, see <xref:System.Net.Security.NegotiateStream.BeginWrite%2A>.  \n  \n [!code-cpp[NclNegoAsyncClient#4](~/add/codesnippet/cpp/m-system.net.security.ne_0_1.cpp)]\n [!code-cs[NclNegoAsyncClient#4](~/add/codesnippet/csharp/m-system.net.security.ne_0_1.cs)]"
  syntax:
    content: public override void EndWrite (IAsyncResult asyncResult);
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: "En <xref:System.IAsyncResult>-instans som returnerades av ett anrop till <xref:System.Net.Security.NegotiateStream.BeginWrite*></xref:System.Net.Security.NegotiateStream.BeginWrite*> </xref:System.IAsyncResult>"
  overload: System.Net.Security.NegotiateStream.EndWrite*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>asyncResult</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "AsyncResult skapades inte av ett anrop till <xref:System.Net.Security.NegotiateStream.BeginWrite*>.</xref:System.Net.Security.NegotiateStream.BeginWrite*>"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Autentiseringen har inte utförts."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "Skrivåtgärden misslyckades."
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.Flush
  id: Flush
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: Flush()
  nameWithType: NegotiateStream.Flush()
  fullName: System.Net.Security.NegotiateStream.Flush()
  type: Method
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Gör alla buffrade data skrivs till den underliggande enheten."
  remarks: "Den här metoden startar <xref:System.IO.Stream.Flush%2A>på den underliggande dataströmmen.</xref:System.IO.Stream.Flush%2A>"
  example:
  - "The following code example demonstrates flushing the stream.  \n  \n [!code-cs[NclNegoSyncClient#4](~/add/codesnippet/csharp/m-system.net.security.ne_3_1.cs)]\n [!code-cpp[NclNegoSyncClient#4](~/add/codesnippet/cpp/m-system.net.security.ne_3_1.cpp)]"
  syntax:
    content: public override void Flush ();
    parameters: []
  overload: System.Net.Security.NegotiateStream.Flush*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.ImpersonationLevel
  id: ImpersonationLevel
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: ImpersonationLevel
  nameWithType: NegotiateStream.ImpersonationLevel
  fullName: System.Net.Security.NegotiateStream.ImpersonationLevel
  type: Property
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Hämtar ett värde som anger hur servern kan använda klientens autentiseringsuppgifter."
  remarks: "Du måste autentisera innan denna metod anropas. Klienter anger personifieringsnivån när de begär autentisering genom att anropa en av de <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>eller <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A>metoder.</xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A> </xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A> Om du autentisera utan att ange en <xref:System.Security.Principal.TokenImpersonationLevel>, <xref:System.Security.Principal.TokenImpersonationLevel>används.</xref:System.Security.Principal.TokenImpersonationLevel> </xref:System.Security.Principal.TokenImpersonationLevel>"
  example:
  - "The following code example demonstrates displaying the value of this property.  \n  \n [!code-cs[NclNegoSyncClient#1](~/add/codesnippet/csharp/p-system.net.security.ne_5_1.cs)]\n [!code-cpp[NclNegoSyncClient#1](~/add/codesnippet/cpp/p-system.net.security.ne_5_1.cpp)]"
  syntax:
    content: public virtual System.Security.Principal.TokenImpersonationLevel ImpersonationLevel { get; }
    return:
      type: System.Security.Principal.TokenImpersonationLevel
      description: "En av de <xref:System.Security.Principal.TokenImpersonationLevel>värdena.</xref:System.Security.Principal.TokenImpersonationLevel>"
  overload: System.Net.Security.NegotiateStream.ImpersonationLevel*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Autentisering misslyckades eller inte har uppstått."
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.IsAuthenticated
  id: IsAuthenticated
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: IsAuthenticated
  nameWithType: NegotiateStream.IsAuthenticated
  fullName: System.Net.Security.NegotiateStream.IsAuthenticated
  type: Property
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Hämtar en <xref:System.Boolean>-värde som anger om autentisering lyckades.</xref:System.Boolean>"
  remarks: "Klienter autentiserar genom att anropa den <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>eller <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A>metoder.</xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A> </xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A> Servrar som autentiserar genom att anropa den <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>eller <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A>metoder.</xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> </xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>"
  example:
  - "The following code example demonstrates displaying the value of this property.  \n  \n [!code-cs[NclNegoSyncClient#1](~/add/codesnippet/csharp/p-system.net.security.ne_10_1.cs)]\n [!code-cpp[NclNegoSyncClient#1](~/add/codesnippet/cpp/p-system.net.security.ne_10_1.cpp)]"
  syntax:
    content: public override bool IsAuthenticated { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Om autentiseringen lyckas inträffade. Annars <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Net.Security.NegotiateStream.IsAuthenticated*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.IsEncrypted
  id: IsEncrypted
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: IsEncrypted
  nameWithType: NegotiateStream.IsEncrypted
  fullName: System.Net.Security.NegotiateStream.IsEncrypted
  type: Property
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Hämtar en <xref:System.Boolean>-värde som anger om detta <xref href=&quot;System.Net.Security.NegotiateStream&quot;> </xref> använder datakryptering.</xref:System.Boolean>"
  remarks: "Kryptering förhindrar för att skydda data. nämligen ser till att medan data under överföring inte kan den deschiffreras av tredje part."
  example:
  - "The following code example demonstrates displaying the value of this property.  \n  \n [!code-cs[NclNegoSyncClient#1](~/add/codesnippet/csharp/p-system.net.security.ne_8_1.cs)]\n [!code-cpp[NclNegoSyncClient#1](~/add/codesnippet/cpp/p-system.net.security.ne_8_1.cpp)]"
  syntax:
    content: public override bool IsEncrypted { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Om data krypteras innan det överförs i nätverket och dekrypteras när den når Fjärrslutpunkten; Annars <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Net.Security.NegotiateStream.IsEncrypted*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.IsMutuallyAuthenticated
  id: IsMutuallyAuthenticated
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: IsMutuallyAuthenticated
  nameWithType: NegotiateStream.IsMutuallyAuthenticated
  fullName: System.Net.Security.NegotiateStream.IsMutuallyAuthenticated
  type: Property
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Hämtar en <xref:System.Boolean>-värde som anger om både servern och klienten har autentiserats.</xref:System.Boolean>"
  remarks: "Ömsesidig autentisering har angetts av klienten när klienten vill servern för att ange autentiseringsuppgifter för autentisering. Klienter begär ömsesidig autentisering som standard.       Protokollet Negotiate väljer NTLM eller Kerberos beroende på säkerhetsprotokoll som stöds av klienten och servern. NTLM har inte stöd för ömsesidig autentisering."
  example:
  - "The following code example demonstrates displaying the value of this property.  \n  \n [!code-cs[NclNegoSyncClient#1](~/add/codesnippet/csharp/p-system.net.security.ne_7_1.cs)]\n [!code-cpp[NclNegoSyncClient#1](~/add/codesnippet/cpp/p-system.net.security.ne_7_1.cpp)]"
  syntax:
    content: public override bool IsMutuallyAuthenticated { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Om servern har verifierats; Annars <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Net.Security.NegotiateStream.IsMutuallyAuthenticated*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.IsServer
  id: IsServer
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: IsServer
  nameWithType: NegotiateStream.IsServer
  fullName: System.Net.Security.NegotiateStream.IsServer
  type: Property
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Hämtar en <xref:System.Boolean>-värde som anger om den lokala sidan för anslutningen används av det här <xref href=&quot;System.Net.Security.NegotiateStream&quot;> </xref> autentiserades som servern.</xref:System.Boolean>"
  remarks: "Om autentisering misslyckades inte eller, den här egenskapen returnerar `false`.       För att autentisera som servern anropar den <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>eller <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A>metoder.</xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> </xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>"
  example:
  - "The following code example demonstrates displaying the value of this property.  \n  \n [!code-cs[NclNegoSyncClient#1](~/add/codesnippet/csharp/p-system.net.security.ne_0_1.cs)]\n [!code-cpp[NclNegoSyncClient#1](~/add/codesnippet/cpp/p-system.net.security.ne_0_1.cpp)]"
  syntax:
    content: public override bool IsServer { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Om den lokala slutpunkten har autentiserats som serversidan av autentiserad anslutning; Annars <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Net.Security.NegotiateStream.IsServer*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.IsSigned
  id: IsSigned
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: IsSigned
  nameWithType: NegotiateStream.IsSigned
  fullName: System.Net.Security.NegotiateStream.IsSigned
  type: Property
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Hämtar en <xref:System.Boolean>-värde som anger om data som skickas med hjälp av den här dataströmmen är signerad.</xref:System.Boolean>"
  remarks: "Logga data hjälper till att skydda integriteten hos data. nämligen hjälper mottagaren att se om data har manipulerats under överföringen."
  example:
  - "The following code example demonstrates displaying the value of this property.  \n  \n [!code-cs[NclNegoSyncClient#1](~/add/codesnippet/csharp/p-system.net.security.ne_13_1.cs)]\n [!code-cpp[NclNegoSyncClient#1](~/add/codesnippet/cpp/p-system.net.security.ne_13_1.cpp)]"
  syntax:
    content: public override bool IsSigned { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Om data har signerats innan du kommer att sändas; Annars <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Net.Security.NegotiateStream.IsSigned*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.Length
  id: Length
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: Length
  nameWithType: NegotiateStream.Length
  fullName: System.Net.Security.NegotiateStream.Length
  type: Property
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Hämtar längden på den underliggande dataströmmen."
  remarks: "Den här egenskapen returnerar värdet som returneras genom att anropa den <xref:System.IO.Stream.Length%2A>egenskapen på den underliggande dataströmmen.</xref:System.IO.Stream.Length%2A> Om den underliggande dataströmmen inte är sökbar genereras vanligtvis ett undantag i den här egenskapen. Den körning av den underliggande dataströmmen bestämmer körning typ av undantag som genereras."
  example:
  - "The following code example demonstrates displaying the value of this property.  \n  \n [!code-cs[NclNegoSyncClient#2](~/add/codesnippet/csharp/p-system.net.security.ne_9_1.cs)]\n [!code-cpp[NclNegoSyncClient#2](~/add/codesnippet/cpp/p-system.net.security.ne_9_1.cpp)]"
  syntax:
    content: public override long Length { get; }
    return:
      type: System.Int64
      description: "En <xref:System.Int64>som anger längden på den underliggande dataströmmen.</xref:System.Int64>"
  overload: System.Net.Security.NegotiateStream.Length*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "Hämtar värdet för den här egenskapen stöds inte när den underliggande dataströmmen är en <xref href=&quot;System.Net.Sockets.NetworkStream&quot;> </xref>."
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.Position
  id: Position
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: Position
  nameWithType: NegotiateStream.Position
  fullName: System.Net.Security.NegotiateStream.Position
  type: Property
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Hämtar eller anger den aktuella positionen i den underliggande dataströmmen."
  remarks: "Den här egenskapen returnerar värdet som returneras genom att anropa den <xref:System.IO.Stream.Position%2A>egenskapen på den underliggande dataströmmen.</xref:System.IO.Stream.Position%2A> Om den underliggande dataströmmen inte är sökbar genereras vanligtvis ett undantag i den här egenskapen. Den körning av den underliggande dataströmmen bestämmer körning typ av undantag som genereras."
  syntax:
    content: public override long Position { get; set; }
    return:
      type: System.Int64
      description: "En <xref:System.Int64>som anger den aktuella positionen i den underliggande dataströmmen.</xref:System.Int64>"
  overload: System.Net.Security.NegotiateStream.Position*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "Setting this property is not supported.  \n  \n \\- or -  \n  \n Getting the value of this property is not supported when the underlying stream is a <xref href=\"System.Net.Sockets.NetworkStream\"></xref>."
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.Read(System.Byte[],System.Int32,System.Int32)
  id: Read(System.Byte[],System.Int32,System.Int32)
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: Read(Byte[],Int32,Int32)
  nameWithType: NegotiateStream.Read(Byte[],Int32,Int32)
  fullName: System.Net.Security.NegotiateStream.Read(Byte[],Int32,Int32)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Läser data från den här dataströmmen och lagrar den i den angivna matrisen."
  remarks: "Metoden läser maximalt `count` byte från aktuellt strömma och lagrar dem i `buffer` början på `offset`.       Du kan inte anropa den här metoden förrän du har autentiserats. För att autentisera, anropar en av de <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>, <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A>, <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>, eller <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A>metoder.</xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> </xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A> </xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A> </xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>       Använd för att utföra den här åtgärden asynkront den <xref:System.Net.Security.NegotiateStream.BeginRead%2A>metoden.</xref:System.Net.Security.NegotiateStream.BeginRead%2A>"
  example:
  - "The following code example demonstrates reading from a <xref:System.Net.Security.NegotiateStream>.  \n  \n [!code-cs[NclNegoSyncServer#1](~/add/codesnippet/csharp/e81792fe-7974-494d-8076-_1.cs)]\n [!code-cpp[NclNegoSyncServer#1](~/add/codesnippet/cpp/e81792fe-7974-494d-8076-_1.cpp)]"
  syntax:
    content: public override int Read (byte[] buffer, int offset, int count);
    parameters:
    - id: buffer
      type: System.Byte[]
      description: "En <xref:System.Byte>matris som tar emot byte lästes in från strömmen.</xref:System.Byte>"
    - id: offset
      type: System.Int32
      description: "En <xref:System.Int32>som innehåller den nollbaserade platsen i `buffer` som du vill börja lagra data läses från den här dataströmmen.</xref:System.Int32>"
    - id: count
      type: System.Int32
      description: "En <xref:System.Int32>som innehåller det maximala antalet byte som ska läsas från dataströmmen.</xref:System.Int32>"
    return:
      type: System.Int32
      description: "En <xref:System.Int32>värde som anger antalet byte lästes in från strömmen underliggande.</xref:System.Int32> Returnerar 0 om det finns inga fler data som ska läsas kan."
  overload: System.Net.Security.NegotiateStream.Read*
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "Läsningen misslyckades."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Autentiseringen har inte utförts."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "En Läsåtgärd pågår redan."
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.ReadTimeout
  id: ReadTimeout
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: ReadTimeout
  nameWithType: NegotiateStream.ReadTimeout
  fullName: System.Net.Security.NegotiateStream.ReadTimeout
  type: Property
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Hämtar eller anger hur lång tid en Läsåtgärd blockerar väntar på att data."
  remarks: "Den här egenskapen returnerar värdet som returneras genom att anropa den <xref:System.IO.Stream.ReadTimeout%2A>egenskapen på den underliggande dataströmmen.</xref:System.IO.Stream.ReadTimeout%2A> När du ställer in den här egenskapen den <xref:System.IO.Stream.ReadTimeout%2A>på den underliggande dataströmmen värdet till det angivna värdet.</xref:System.IO.Stream.ReadTimeout%2A>       Om den underliggande dataströmmen är en <xref:System.Net.Sockets.NetworkStream>, ReadTimeout anges i millisekunder och är inställd på <xref:System.Threading.Timeout.Infinite>som standard så som läsa operations saknar tidsgräns.</xref:System.Threading.Timeout.Infinite> </xref:System.Net.Sockets.NetworkStream>"
  example:
  - "The following code example demonstrates displaying the value of this property.  \n  \n [!code-cs[NclNegoSyncClient#2](~/add/codesnippet/csharp/p-system.net.security.ne_12_1.cs)]\n [!code-cpp[NclNegoSyncClient#2](~/add/codesnippet/cpp/p-system.net.security.ne_12_1.cpp)]"
  syntax:
    content: public override int ReadTimeout { get; set; }
    return:
      type: System.Int32
      description: "En <xref:System.Int32>som anger hur lång tid som ska förflyta innan en Läsåtgärd misslyckas.</xref:System.Int32>"
  overload: System.Net.Security.NegotiateStream.ReadTimeout*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.RemoteIdentity
  id: RemoteIdentity
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: RemoteIdentity
  nameWithType: NegotiateStream.RemoteIdentity
  fullName: System.Net.Security.NegotiateStream.RemoteIdentity
  type: Property
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Hämtar information om identiteten för fjärrparten delning autentiserad dataströmmen."
  remarks: "När de används av klienten den här egenskapen returnerar en <xref:System.Security.Principal.GenericIdentity>som innehåller det namnet SPN (Service Principal) på servern och autentiseringsprotokoll som används.</xref:System.Security.Principal.GenericIdentity> När de används av servern, den här egenskapen returnerar en <xref:System.Security.Principal.WindowsIdentity>som beskriver klienten.</xref:System.Security.Principal.WindowsIdentity> Om den <xref:System.Security.Principal.WindowsIdentity>är inte tillgänglig, klientinformation skickas tillbaka till servern i <xref:System.Security.Principal.GenericIdentity>.</xref:System.Security.Principal.GenericIdentity> </xref:System.Security.Principal.WindowsIdentity>"
  example:
  - "The following code example demonstrates displaying the value of this property.  \n  \n [!code-cs[NclNegoAsyncServer#2](~/add/codesnippet/csharp/p-system.net.security.ne_1_1.cs)]\n [!code-cpp[NclNegoAsyncServer#2](~/add/codesnippet/cpp/p-system.net.security.ne_1_1.cpp)]"
  syntax:
    content: public virtual System.Security.Principal.IIdentity RemoteIdentity { get; }
    return:
      type: System.Security.Principal.IIdentity
      description: "En <xref:System.Security.Principal.IIdentity>-objektet som beskriver identiteten för fjärrslutpunkten.</xref:System.Security.Principal.IIdentity>"
  overload: System.Net.Security.NegotiateStream.RemoteIdentity*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Autentisering misslyckades eller inte har uppstått."
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.Seek(System.Int64,System.IO.SeekOrigin)
  id: Seek(System.Int64,System.IO.SeekOrigin)
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: Seek(Int64,SeekOrigin)
  nameWithType: NegotiateStream.Seek(Int64,SeekOrigin)
  fullName: System.Net.Security.NegotiateStream.Seek(Int64,SeekOrigin)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Genererar <xref:System.NotSupportedException>.</xref:System.NotSupportedException>"
  remarks: "Anropa inte den här metoden. Den ärvs, men stöds inte av <xref:System.Net.Security.NegotiateStream>.</xref:System.Net.Security.NegotiateStream>"
  syntax:
    content: public override long Seek (long offset, System.IO.SeekOrigin origin);
    parameters:
    - id: offset
      type: System.Int64
      description: "Det här värdet ignoreras."
    - id: origin
      type: System.IO.SeekOrigin
      description: "Det här värdet ignoreras."
    return:
      type: System.Int64
      description: "Alltid utlöser <xref:System.NotSupportedException>.</xref:System.NotSupportedException>"
  overload: System.Net.Security.NegotiateStream.Seek*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "Sökning stöds inte på <xref href=&quot;System.Net.Security.NegotiateStream&quot;> </xref>."
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.SetLength(System.Int64)
  id: SetLength(System.Int64)
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: SetLength(Int64)
  nameWithType: NegotiateStream.SetLength(Int64)
  fullName: System.Net.Security.NegotiateStream.SetLength(Int64)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Anger längden på den underliggande dataströmmen."
  syntax:
    content: public override void SetLength (long value);
    parameters:
    - id: value
      type: System.Int64
      description: "Ett <xref:System.Int64>värde som anger längden på dataströmmen.</xref:System.Int64>"
  overload: System.Net.Security.NegotiateStream.SetLength*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.Write(System.Byte[],System.Int32,System.Int32)
  id: Write(System.Byte[],System.Int32,System.Int32)
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: Write(Byte[],Int32,Int32)
  nameWithType: NegotiateStream.Write(Byte[],Int32,Int32)
  fullName: System.Net.Security.NegotiateStream.Write(Byte[],Int32,Int32)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Skriv det angivna antalet <xref:System.Byte>s till en underliggande dataström med den angivna bufferten och offset.</xref:System.Byte>"
  remarks: "Om kryptering, registrerar, eller kryptering och signering aktiveras den här metoden läser data från bufferten, krypterar, signerar eller krypterar och signerar den och skickar den med hjälp av den underliggande dataströmmen. Om ingen säkerhet tjänster som kryptering och signering som används, anropar den här metoden <xref:System.IO.Stream.Write%2A>på den underliggande dataströmmen.</xref:System.IO.Stream.Write%2A>       Den här metoden blockerar när åtgärden har slutförts. Använd metoden Write för att förhindra blockerar när åtgärden har slutförts.       Du kan inte anropa den här metoden förrän du har autentiserats. För att autentisera, anropar en av de <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>, <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A>, <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>, eller <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A>metoder.</xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> </xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A> </xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A> </xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>       Den <xref:System.Net.Security.NegotiateStream>klassen stöder inte flera samtidiga skrivåtgärder.</xref:System.Net.Security.NegotiateStream> Om du försöker starta en skrivåtgärd medan en annan Skrivåtgärden körs redan på samma dataström en <xref:System.NotSupportedException>undantag.</xref:System.NotSupportedException>"
  example:
  - "The following code example demonstrates writing to a <xref:System.Net.Security.NegotiateStream>.  \n  \n [!code-cs[NclNegoSyncClient#4](~/add/codesnippet/csharp/1536316b-fecf-4b4a-b33a-_1.cs)]\n [!code-cpp[NclNegoSyncClient#4](~/add/codesnippet/cpp/1536316b-fecf-4b4a-b33a-_1.cpp)]"
  syntax:
    content: public override void Write (byte[] buffer, int offset, int count);
    parameters:
    - id: buffer
      type: System.Byte[]
      description: "En <xref:System.Byte>matris som tillhandahåller de byte som skrivs till dataströmmen.</xref:System.Byte>"
    - id: offset
      type: System.Int32
      description: "En <xref:System.Int32>som innehåller den nollbaserade platsen i `buffer` som du vill börja läsa byte som ska skrivas till dataströmmen.</xref:System.Int32>"
    - id: count
      type: System.Int32
      description: "En <xref:System.Int32>som innehåller det antal byte som ska läsas från `buffer`.</xref:System.Int32>"
  overload: System.Net.Security.NegotiateStream.Write*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>buffer</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>offset is less than 0</code>.  \n  \n \\- or -  \n  \n <code>offset</code> is greater than the length of <code>buffer</code>.  \n  \n \\- or -  \n  \n <code>offset</code> plus count is greater than the length of <code>buffer</code>."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "The write operation failed.  \n  \n \\- or -  \n  \n Encryption is in use, but the data could not be encrypted."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "Det finns redan pågår en skrivåtgärd."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Det här objektet har stängts."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Autentiseringen har inte utförts."
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.WriteTimeout
  id: WriteTimeout
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: WriteTimeout
  nameWithType: NegotiateStream.WriteTimeout
  fullName: System.Net.Security.NegotiateStream.WriteTimeout
  type: Property
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Hämtar eller anger tidsperiod som en skrivåtgärd blockerar väntar på att data."
  remarks: "Den här egenskapen returnerar värdet som returneras genom att anropa den <xref:System.IO.Stream.WriteTimeout%2A>egenskapen på den underliggande dataströmmen.</xref:System.IO.Stream.WriteTimeout%2A> För set-åtgärder, det angivna värdet anger den <xref:System.IO.Stream.WriteTimeout%2A>värde i den underliggande dataströmmen.</xref:System.IO.Stream.WriteTimeout%2A>       Om den underliggande dataströmmen är en <xref:System.Net.Sockets.NetworkStream>, WriteTimeout anges i millisekunder och är inställd på <xref:System.Threading.Timeout.Infinite>som standard så som skriva operations saknar tidsgräns.</xref:System.Threading.Timeout.Infinite> </xref:System.Net.Sockets.NetworkStream>"
  example:
  - "The following code example demonstrates displaying the value of this property.  \n  \n [!code-cs[NclNegoSyncClient#2](~/add/codesnippet/csharp/p-system.net.security.ne_11_1.cs)]\n [!code-cpp[NclNegoSyncClient#2](~/add/codesnippet/cpp/p-system.net.security.ne_11_1.cpp)]"
  syntax:
    content: public override int WriteTimeout { get; set; }
    return:
      type: System.Int32
      description: "En <xref:System.Int32>som anger hur lång tid som ska förflyta innan en skrivåtgärd misslyckas.</xref:System.Int32>"
  overload: System.Net.Security.NegotiateStream.WriteTimeout*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Net.Security.AuthenticatedStream
  isExternal: false
  name: System.Net.Security.AuthenticatedStream
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.Security.Authentication.AuthenticationException
  parent: System.Security.Authentication
  isExternal: false
  name: AuthenticationException
  nameWithType: AuthenticationException
  fullName: System.Security.Authentication.AuthenticationException
- uid: System.Security.Authentication.InvalidCredentialException
  parent: System.Security.Authentication
  isExternal: false
  name: InvalidCredentialException
  nameWithType: InvalidCredentialException
  fullName: System.Security.Authentication.InvalidCredentialException
- uid: System.ObjectDisposedException
  isExternal: true
  name: System.ObjectDisposedException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.NotSupportedException
  isExternal: true
  name: System.NotSupportedException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.PlatformNotSupportedException
  isExternal: true
  name: System.PlatformNotSupportedException
- uid: System.IO.IOException
  isExternal: true
  name: System.IO.IOException
- uid: System.Net.Security.NegotiateStream.#ctor(System.IO.Stream)
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: NegotiateStream(Stream)
  nameWithType: NegotiateStream.NegotiateStream(Stream)
  fullName: System.Net.Security.NegotiateStream.NegotiateStream(Stream)
- uid: System.IO.Stream
  parent: System.IO
  isExternal: true
  name: Stream
  nameWithType: Stream
  fullName: System.IO.Stream
- uid: System.Net.Security.NegotiateStream.#ctor(System.IO.Stream,System.Boolean)
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: NegotiateStream(Stream,Boolean)
  nameWithType: NegotiateStream.NegotiateStream(Stream,Boolean)
  fullName: System.Net.Security.NegotiateStream.NegotiateStream(Stream,Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Net.Security.NegotiateStream.AuthenticateAsClient
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: AuthenticateAsClient()
  nameWithType: NegotiateStream.AuthenticateAsClient()
  fullName: System.Net.Security.NegotiateStream.AuthenticateAsClient()
- uid: System.Net.Security.NegotiateStream.AuthenticateAsClient(System.Net.NetworkCredential,System.String)
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: AuthenticateAsClient(NetworkCredential,String)
  nameWithType: NegotiateStream.AuthenticateAsClient(NetworkCredential,String)
  fullName: System.Net.Security.NegotiateStream.AuthenticateAsClient(NetworkCredential,String)
- uid: System.Net.NetworkCredential
  parent: System.Net
  isExternal: true
  name: NetworkCredential
  nameWithType: NetworkCredential
  fullName: System.Net.NetworkCredential
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Net.Security.NegotiateStream.AuthenticateAsClient(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ChannelBinding,System.String)
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: AuthenticateAsClient(NetworkCredential,ChannelBinding,String)
  nameWithType: NegotiateStream.AuthenticateAsClient(NetworkCredential,ChannelBinding,String)
  fullName: System.Net.Security.NegotiateStream.AuthenticateAsClient(NetworkCredential,ChannelBinding,String)
- uid: System.Security.Authentication.ExtendedProtection.ChannelBinding
  parent: System.Security.Authentication.ExtendedProtection
  isExternal: true
  name: ChannelBinding
  nameWithType: ChannelBinding
  fullName: System.Security.Authentication.ExtendedProtection.ChannelBinding
- uid: System.Net.Security.NegotiateStream.AuthenticateAsClient(System.Net.NetworkCredential,System.String,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: AuthenticateAsClient(NetworkCredential,String,ProtectionLevel,TokenImpersonationLevel)
  nameWithType: NegotiateStream.AuthenticateAsClient(NetworkCredential,String,ProtectionLevel,TokenImpersonationLevel)
  fullName: System.Net.Security.NegotiateStream.AuthenticateAsClient(NetworkCredential,String,ProtectionLevel,TokenImpersonationLevel)
- uid: System.Net.Security.ProtectionLevel
  parent: System.Net.Security
  isExternal: false
  name: ProtectionLevel
  nameWithType: ProtectionLevel
  fullName: System.Net.Security.ProtectionLevel
- uid: System.Security.Principal.TokenImpersonationLevel
  parent: System.Security.Principal
  isExternal: true
  name: TokenImpersonationLevel
  nameWithType: TokenImpersonationLevel
  fullName: System.Security.Principal.TokenImpersonationLevel
- uid: System.Net.Security.NegotiateStream.AuthenticateAsClient(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ChannelBinding,System.String,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: AuthenticateAsClient(NetworkCredential,ChannelBinding,String,ProtectionLevel,TokenImpersonationLevel)
  nameWithType: NegotiateStream.AuthenticateAsClient(NetworkCredential,ChannelBinding,String,ProtectionLevel,TokenImpersonationLevel)
  fullName: System.Net.Security.NegotiateStream.AuthenticateAsClient(NetworkCredential,ChannelBinding,String,ProtectionLevel,TokenImpersonationLevel)
- uid: System.Net.Security.NegotiateStream.AuthenticateAsClientAsync
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: AuthenticateAsClientAsync()
  nameWithType: NegotiateStream.AuthenticateAsClientAsync()
  fullName: System.Net.Security.NegotiateStream.AuthenticateAsClientAsync()
- uid: System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: System.Net.Security.NegotiateStream.AuthenticateAsClientAsync(System.Net.NetworkCredential,System.String)
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: AuthenticateAsClientAsync(NetworkCredential,String)
  nameWithType: NegotiateStream.AuthenticateAsClientAsync(NetworkCredential,String)
  fullName: System.Net.Security.NegotiateStream.AuthenticateAsClientAsync(NetworkCredential,String)
- uid: System.Net.Security.NegotiateStream.AuthenticateAsClientAsync(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ChannelBinding,System.String)
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: AuthenticateAsClientAsync(NetworkCredential,ChannelBinding,String)
  nameWithType: NegotiateStream.AuthenticateAsClientAsync(NetworkCredential,ChannelBinding,String)
  fullName: System.Net.Security.NegotiateStream.AuthenticateAsClientAsync(NetworkCredential,ChannelBinding,String)
- uid: System.Net.Security.NegotiateStream.AuthenticateAsClientAsync(System.Net.NetworkCredential,System.String,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: AuthenticateAsClientAsync(NetworkCredential,String,ProtectionLevel,TokenImpersonationLevel)
  nameWithType: NegotiateStream.AuthenticateAsClientAsync(NetworkCredential,String,ProtectionLevel,TokenImpersonationLevel)
  fullName: System.Net.Security.NegotiateStream.AuthenticateAsClientAsync(NetworkCredential,String,ProtectionLevel,TokenImpersonationLevel)
- uid: System.Net.Security.NegotiateStream.AuthenticateAsClientAsync(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ChannelBinding,System.String,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: AuthenticateAsClientAsync(NetworkCredential,ChannelBinding,String,ProtectionLevel,TokenImpersonationLevel)
  nameWithType: NegotiateStream.AuthenticateAsClientAsync(NetworkCredential,ChannelBinding,String,ProtectionLevel,TokenImpersonationLevel)
  fullName: System.Net.Security.NegotiateStream.AuthenticateAsClientAsync(NetworkCredential,ChannelBinding,String,ProtectionLevel,TokenImpersonationLevel)
- uid: System.Net.Security.NegotiateStream.AuthenticateAsServer
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: AuthenticateAsServer()
  nameWithType: NegotiateStream.AuthenticateAsServer()
  fullName: System.Net.Security.NegotiateStream.AuthenticateAsServer()
- uid: System.Net.Security.NegotiateStream.AuthenticateAsServer(System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy)
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: AuthenticateAsServer(ExtendedProtectionPolicy)
  nameWithType: NegotiateStream.AuthenticateAsServer(ExtendedProtectionPolicy)
  fullName: System.Net.Security.NegotiateStream.AuthenticateAsServer(ExtendedProtectionPolicy)
- uid: System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy
  parent: System.Security.Authentication.ExtendedProtection
  isExternal: false
  name: ExtendedProtectionPolicy
  nameWithType: ExtendedProtectionPolicy
  fullName: System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy
- uid: System.Net.Security.NegotiateStream.AuthenticateAsServer(System.Net.NetworkCredential,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: AuthenticateAsServer(NetworkCredential,ProtectionLevel,TokenImpersonationLevel)
  nameWithType: NegotiateStream.AuthenticateAsServer(NetworkCredential,ProtectionLevel,TokenImpersonationLevel)
  fullName: System.Net.Security.NegotiateStream.AuthenticateAsServer(NetworkCredential,ProtectionLevel,TokenImpersonationLevel)
- uid: System.Net.Security.NegotiateStream.AuthenticateAsServer(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: AuthenticateAsServer(NetworkCredential,ExtendedProtectionPolicy,ProtectionLevel,TokenImpersonationLevel)
  nameWithType: NegotiateStream.AuthenticateAsServer(NetworkCredential,ExtendedProtectionPolicy,ProtectionLevel,TokenImpersonationLevel)
  fullName: System.Net.Security.NegotiateStream.AuthenticateAsServer(NetworkCredential,ExtendedProtectionPolicy,ProtectionLevel,TokenImpersonationLevel)
- uid: System.Net.Security.NegotiateStream.AuthenticateAsServerAsync
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: AuthenticateAsServerAsync()
  nameWithType: NegotiateStream.AuthenticateAsServerAsync()
  fullName: System.Net.Security.NegotiateStream.AuthenticateAsServerAsync()
- uid: System.Net.Security.NegotiateStream.AuthenticateAsServerAsync(System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy)
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: AuthenticateAsServerAsync(ExtendedProtectionPolicy)
  nameWithType: NegotiateStream.AuthenticateAsServerAsync(ExtendedProtectionPolicy)
  fullName: System.Net.Security.NegotiateStream.AuthenticateAsServerAsync(ExtendedProtectionPolicy)
- uid: System.Net.Security.NegotiateStream.AuthenticateAsServerAsync(System.Net.NetworkCredential,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: AuthenticateAsServerAsync(NetworkCredential,ProtectionLevel,TokenImpersonationLevel)
  nameWithType: NegotiateStream.AuthenticateAsServerAsync(NetworkCredential,ProtectionLevel,TokenImpersonationLevel)
  fullName: System.Net.Security.NegotiateStream.AuthenticateAsServerAsync(NetworkCredential,ProtectionLevel,TokenImpersonationLevel)
- uid: System.Net.Security.NegotiateStream.AuthenticateAsServerAsync(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: AuthenticateAsServerAsync(NetworkCredential,ExtendedProtectionPolicy,ProtectionLevel,TokenImpersonationLevel)
  nameWithType: NegotiateStream.AuthenticateAsServerAsync(NetworkCredential,ExtendedProtectionPolicy,ProtectionLevel,TokenImpersonationLevel)
  fullName: System.Net.Security.NegotiateStream.AuthenticateAsServerAsync(NetworkCredential,ExtendedProtectionPolicy,ProtectionLevel,TokenImpersonationLevel)
- uid: System.Net.Security.NegotiateStream.BeginAuthenticateAsClient(System.AsyncCallback,System.Object)
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: BeginAuthenticateAsClient(AsyncCallback,Object)
  nameWithType: NegotiateStream.BeginAuthenticateAsClient(AsyncCallback,Object)
  fullName: System.Net.Security.NegotiateStream.BeginAuthenticateAsClient(AsyncCallback,Object)
- uid: System.IAsyncResult
  parent: System
  isExternal: true
  name: IAsyncResult
  nameWithType: IAsyncResult
  fullName: System.IAsyncResult
- uid: System.AsyncCallback
  parent: System
  isExternal: true
  name: AsyncCallback
  nameWithType: AsyncCallback
  fullName: System.AsyncCallback
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Net.Security.NegotiateStream.BeginAuthenticateAsClient(System.Net.NetworkCredential,System.String,System.AsyncCallback,System.Object)
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: BeginAuthenticateAsClient(NetworkCredential,String,AsyncCallback,Object)
  nameWithType: NegotiateStream.BeginAuthenticateAsClient(NetworkCredential,String,AsyncCallback,Object)
  fullName: System.Net.Security.NegotiateStream.BeginAuthenticateAsClient(NetworkCredential,String,AsyncCallback,Object)
- uid: System.Net.Security.NegotiateStream.BeginAuthenticateAsClient(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ChannelBinding,System.String,System.AsyncCallback,System.Object)
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: BeginAuthenticateAsClient(NetworkCredential,ChannelBinding,String,AsyncCallback,Object)
  nameWithType: NegotiateStream.BeginAuthenticateAsClient(NetworkCredential,ChannelBinding,String,AsyncCallback,Object)
  fullName: System.Net.Security.NegotiateStream.BeginAuthenticateAsClient(NetworkCredential,ChannelBinding,String,AsyncCallback,Object)
- uid: System.Net.Security.NegotiateStream.BeginAuthenticateAsClient(System.Net.NetworkCredential,System.String,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel,System.AsyncCallback,System.Object)
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: BeginAuthenticateAsClient(NetworkCredential,String,ProtectionLevel,TokenImpersonationLevel,AsyncCallback,Object)
  nameWithType: NegotiateStream.BeginAuthenticateAsClient(NetworkCredential,String,ProtectionLevel,TokenImpersonationLevel,AsyncCallback,Object)
  fullName: System.Net.Security.NegotiateStream.BeginAuthenticateAsClient(NetworkCredential,String,ProtectionLevel,TokenImpersonationLevel,AsyncCallback,Object)
- uid: System.Net.Security.NegotiateStream.BeginAuthenticateAsClient(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ChannelBinding,System.String,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel,System.AsyncCallback,System.Object)
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: BeginAuthenticateAsClient(NetworkCredential,ChannelBinding,String,ProtectionLevel,TokenImpersonationLevel,AsyncCallback,Object)
  nameWithType: NegotiateStream.BeginAuthenticateAsClient(NetworkCredential,ChannelBinding,String,ProtectionLevel,TokenImpersonationLevel,AsyncCallback,Object)
  fullName: System.Net.Security.NegotiateStream.BeginAuthenticateAsClient(NetworkCredential,ChannelBinding,String,ProtectionLevel,TokenImpersonationLevel,AsyncCallback,Object)
- uid: System.Net.Security.NegotiateStream.BeginAuthenticateAsServer(System.AsyncCallback,System.Object)
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: BeginAuthenticateAsServer(AsyncCallback,Object)
  nameWithType: NegotiateStream.BeginAuthenticateAsServer(AsyncCallback,Object)
  fullName: System.Net.Security.NegotiateStream.BeginAuthenticateAsServer(AsyncCallback,Object)
- uid: System.Net.Security.NegotiateStream.BeginAuthenticateAsServer(System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy,System.AsyncCallback,System.Object)
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: BeginAuthenticateAsServer(ExtendedProtectionPolicy,AsyncCallback,Object)
  nameWithType: NegotiateStream.BeginAuthenticateAsServer(ExtendedProtectionPolicy,AsyncCallback,Object)
  fullName: System.Net.Security.NegotiateStream.BeginAuthenticateAsServer(ExtendedProtectionPolicy,AsyncCallback,Object)
- uid: System.Net.Security.NegotiateStream.BeginAuthenticateAsServer(System.Net.NetworkCredential,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel,System.AsyncCallback,System.Object)
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: BeginAuthenticateAsServer(NetworkCredential,ProtectionLevel,TokenImpersonationLevel,AsyncCallback,Object)
  nameWithType: NegotiateStream.BeginAuthenticateAsServer(NetworkCredential,ProtectionLevel,TokenImpersonationLevel,AsyncCallback,Object)
  fullName: System.Net.Security.NegotiateStream.BeginAuthenticateAsServer(NetworkCredential,ProtectionLevel,TokenImpersonationLevel,AsyncCallback,Object)
- uid: System.Net.Security.NegotiateStream.BeginAuthenticateAsServer(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel,System.AsyncCallback,System.Object)
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: BeginAuthenticateAsServer(NetworkCredential,ExtendedProtectionPolicy,ProtectionLevel,TokenImpersonationLevel,AsyncCallback,Object)
  nameWithType: NegotiateStream.BeginAuthenticateAsServer(NetworkCredential,ExtendedProtectionPolicy,ProtectionLevel,TokenImpersonationLevel,AsyncCallback,Object)
  fullName: System.Net.Security.NegotiateStream.BeginAuthenticateAsServer(NetworkCredential,ExtendedProtectionPolicy,ProtectionLevel,TokenImpersonationLevel,AsyncCallback,Object)
- uid: System.Net.Security.NegotiateStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: BeginRead(Byte[],Int32,Int32,AsyncCallback,Object)
  nameWithType: NegotiateStream.BeginRead(Byte[],Int32,Int32,AsyncCallback,Object)
  fullName: System.Net.Security.NegotiateStream.BeginRead(Byte[],Int32,Int32,AsyncCallback,Object)
- uid: System.Byte[]
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: Byte[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Net.Security.NegotiateStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: BeginWrite(Byte[],Int32,Int32,AsyncCallback,Object)
  nameWithType: NegotiateStream.BeginWrite(Byte[],Int32,Int32,AsyncCallback,Object)
  fullName: System.Net.Security.NegotiateStream.BeginWrite(Byte[],Int32,Int32,AsyncCallback,Object)
- uid: System.Net.Security.NegotiateStream.CanRead
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: CanRead
  nameWithType: NegotiateStream.CanRead
  fullName: System.Net.Security.NegotiateStream.CanRead
- uid: System.Net.Security.NegotiateStream.CanSeek
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: CanSeek
  nameWithType: NegotiateStream.CanSeek
  fullName: System.Net.Security.NegotiateStream.CanSeek
- uid: System.Net.Security.NegotiateStream.CanTimeout
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: CanTimeout
  nameWithType: NegotiateStream.CanTimeout
  fullName: System.Net.Security.NegotiateStream.CanTimeout
- uid: System.Net.Security.NegotiateStream.CanWrite
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: CanWrite
  nameWithType: NegotiateStream.CanWrite
  fullName: System.Net.Security.NegotiateStream.CanWrite
- uid: System.Net.Security.NegotiateStream.Dispose(System.Boolean)
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: NegotiateStream.Dispose(Boolean)
  fullName: System.Net.Security.NegotiateStream.Dispose(Boolean)
- uid: System.Net.Security.NegotiateStream.EndAuthenticateAsClient(System.IAsyncResult)
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: EndAuthenticateAsClient(IAsyncResult)
  nameWithType: NegotiateStream.EndAuthenticateAsClient(IAsyncResult)
  fullName: System.Net.Security.NegotiateStream.EndAuthenticateAsClient(IAsyncResult)
- uid: System.Net.Security.NegotiateStream.EndAuthenticateAsServer(System.IAsyncResult)
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: EndAuthenticateAsServer(IAsyncResult)
  nameWithType: NegotiateStream.EndAuthenticateAsServer(IAsyncResult)
  fullName: System.Net.Security.NegotiateStream.EndAuthenticateAsServer(IAsyncResult)
- uid: System.Net.Security.NegotiateStream.EndRead(System.IAsyncResult)
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: EndRead(IAsyncResult)
  nameWithType: NegotiateStream.EndRead(IAsyncResult)
  fullName: System.Net.Security.NegotiateStream.EndRead(IAsyncResult)
- uid: System.Net.Security.NegotiateStream.EndWrite(System.IAsyncResult)
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: EndWrite(IAsyncResult)
  nameWithType: NegotiateStream.EndWrite(IAsyncResult)
  fullName: System.Net.Security.NegotiateStream.EndWrite(IAsyncResult)
- uid: System.Net.Security.NegotiateStream.Flush
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: Flush()
  nameWithType: NegotiateStream.Flush()
  fullName: System.Net.Security.NegotiateStream.Flush()
- uid: System.Net.Security.NegotiateStream.ImpersonationLevel
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: ImpersonationLevel
  nameWithType: NegotiateStream.ImpersonationLevel
  fullName: System.Net.Security.NegotiateStream.ImpersonationLevel
- uid: System.Net.Security.NegotiateStream.IsAuthenticated
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: IsAuthenticated
  nameWithType: NegotiateStream.IsAuthenticated
  fullName: System.Net.Security.NegotiateStream.IsAuthenticated
- uid: System.Net.Security.NegotiateStream.IsEncrypted
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: IsEncrypted
  nameWithType: NegotiateStream.IsEncrypted
  fullName: System.Net.Security.NegotiateStream.IsEncrypted
- uid: System.Net.Security.NegotiateStream.IsMutuallyAuthenticated
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: IsMutuallyAuthenticated
  nameWithType: NegotiateStream.IsMutuallyAuthenticated
  fullName: System.Net.Security.NegotiateStream.IsMutuallyAuthenticated
- uid: System.Net.Security.NegotiateStream.IsServer
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: IsServer
  nameWithType: NegotiateStream.IsServer
  fullName: System.Net.Security.NegotiateStream.IsServer
- uid: System.Net.Security.NegotiateStream.IsSigned
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: IsSigned
  nameWithType: NegotiateStream.IsSigned
  fullName: System.Net.Security.NegotiateStream.IsSigned
- uid: System.Net.Security.NegotiateStream.Length
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: Length
  nameWithType: NegotiateStream.Length
  fullName: System.Net.Security.NegotiateStream.Length
- uid: System.Int64
  parent: System
  isExternal: true
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: System.Net.Security.NegotiateStream.Position
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: Position
  nameWithType: NegotiateStream.Position
  fullName: System.Net.Security.NegotiateStream.Position
- uid: System.Net.Security.NegotiateStream.Read(System.Byte[],System.Int32,System.Int32)
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: Read(Byte[],Int32,Int32)
  nameWithType: NegotiateStream.Read(Byte[],Int32,Int32)
  fullName: System.Net.Security.NegotiateStream.Read(Byte[],Int32,Int32)
- uid: System.Net.Security.NegotiateStream.ReadTimeout
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: ReadTimeout
  nameWithType: NegotiateStream.ReadTimeout
  fullName: System.Net.Security.NegotiateStream.ReadTimeout
- uid: System.Net.Security.NegotiateStream.RemoteIdentity
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: RemoteIdentity
  nameWithType: NegotiateStream.RemoteIdentity
  fullName: System.Net.Security.NegotiateStream.RemoteIdentity
- uid: System.Security.Principal.IIdentity
  parent: System.Security.Principal
  isExternal: true
  name: IIdentity
  nameWithType: IIdentity
  fullName: System.Security.Principal.IIdentity
- uid: System.Net.Security.NegotiateStream.Seek(System.Int64,System.IO.SeekOrigin)
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: Seek(Int64,SeekOrigin)
  nameWithType: NegotiateStream.Seek(Int64,SeekOrigin)
  fullName: System.Net.Security.NegotiateStream.Seek(Int64,SeekOrigin)
- uid: System.IO.SeekOrigin
  parent: System.IO
  isExternal: true
  name: SeekOrigin
  nameWithType: SeekOrigin
  fullName: System.IO.SeekOrigin
- uid: System.Net.Security.NegotiateStream.SetLength(System.Int64)
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: SetLength(Int64)
  nameWithType: NegotiateStream.SetLength(Int64)
  fullName: System.Net.Security.NegotiateStream.SetLength(Int64)
- uid: System.Net.Security.NegotiateStream.Write(System.Byte[],System.Int32,System.Int32)
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: Write(Byte[],Int32,Int32)
  nameWithType: NegotiateStream.Write(Byte[],Int32,Int32)
  fullName: System.Net.Security.NegotiateStream.Write(Byte[],Int32,Int32)
- uid: System.Net.Security.NegotiateStream.WriteTimeout
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: WriteTimeout
  nameWithType: NegotiateStream.WriteTimeout
  fullName: System.Net.Security.NegotiateStream.WriteTimeout
- uid: System.Net.Security.NegotiateStream.#ctor*
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: NegotiateStream
  nameWithType: NegotiateStream.NegotiateStream
- uid: System.Net.Security.NegotiateStream.AuthenticateAsClient*
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: AuthenticateAsClient
  nameWithType: NegotiateStream.AuthenticateAsClient
- uid: System.Net.Security.NegotiateStream.AuthenticateAsClientAsync*
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: AuthenticateAsClientAsync
  nameWithType: NegotiateStream.AuthenticateAsClientAsync
- uid: System.Net.Security.NegotiateStream.AuthenticateAsServer*
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: AuthenticateAsServer
  nameWithType: NegotiateStream.AuthenticateAsServer
- uid: System.Net.Security.NegotiateStream.AuthenticateAsServerAsync*
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: AuthenticateAsServerAsync
  nameWithType: NegotiateStream.AuthenticateAsServerAsync
- uid: System.Net.Security.NegotiateStream.BeginAuthenticateAsClient*
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: BeginAuthenticateAsClient
  nameWithType: NegotiateStream.BeginAuthenticateAsClient
- uid: System.Net.Security.NegotiateStream.BeginAuthenticateAsServer*
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: BeginAuthenticateAsServer
  nameWithType: NegotiateStream.BeginAuthenticateAsServer
- uid: System.Net.Security.NegotiateStream.BeginRead*
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: BeginRead
  nameWithType: NegotiateStream.BeginRead
- uid: System.Net.Security.NegotiateStream.BeginWrite*
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: BeginWrite
  nameWithType: NegotiateStream.BeginWrite
- uid: System.Net.Security.NegotiateStream.CanRead*
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: CanRead
  nameWithType: NegotiateStream.CanRead
- uid: System.Net.Security.NegotiateStream.CanSeek*
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: CanSeek
  nameWithType: NegotiateStream.CanSeek
- uid: System.Net.Security.NegotiateStream.CanTimeout*
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: CanTimeout
  nameWithType: NegotiateStream.CanTimeout
- uid: System.Net.Security.NegotiateStream.CanWrite*
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: CanWrite
  nameWithType: NegotiateStream.CanWrite
- uid: System.Net.Security.NegotiateStream.Dispose*
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: Dispose
  nameWithType: NegotiateStream.Dispose
- uid: System.Net.Security.NegotiateStream.EndAuthenticateAsClient*
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: EndAuthenticateAsClient
  nameWithType: NegotiateStream.EndAuthenticateAsClient
- uid: System.Net.Security.NegotiateStream.EndAuthenticateAsServer*
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: EndAuthenticateAsServer
  nameWithType: NegotiateStream.EndAuthenticateAsServer
- uid: System.Net.Security.NegotiateStream.EndRead*
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: EndRead
  nameWithType: NegotiateStream.EndRead
- uid: System.Net.Security.NegotiateStream.EndWrite*
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: EndWrite
  nameWithType: NegotiateStream.EndWrite
- uid: System.Net.Security.NegotiateStream.Flush*
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: Flush
  nameWithType: NegotiateStream.Flush
- uid: System.Net.Security.NegotiateStream.ImpersonationLevel*
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: ImpersonationLevel
  nameWithType: NegotiateStream.ImpersonationLevel
- uid: System.Net.Security.NegotiateStream.IsAuthenticated*
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: IsAuthenticated
  nameWithType: NegotiateStream.IsAuthenticated
- uid: System.Net.Security.NegotiateStream.IsEncrypted*
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: IsEncrypted
  nameWithType: NegotiateStream.IsEncrypted
- uid: System.Net.Security.NegotiateStream.IsMutuallyAuthenticated*
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: IsMutuallyAuthenticated
  nameWithType: NegotiateStream.IsMutuallyAuthenticated
- uid: System.Net.Security.NegotiateStream.IsServer*
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: IsServer
  nameWithType: NegotiateStream.IsServer
- uid: System.Net.Security.NegotiateStream.IsSigned*
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: IsSigned
  nameWithType: NegotiateStream.IsSigned
- uid: System.Net.Security.NegotiateStream.Length*
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: Length
  nameWithType: NegotiateStream.Length
- uid: System.Net.Security.NegotiateStream.Position*
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: Position
  nameWithType: NegotiateStream.Position
- uid: System.Net.Security.NegotiateStream.Read*
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: Read
  nameWithType: NegotiateStream.Read
- uid: System.Net.Security.NegotiateStream.ReadTimeout*
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: ReadTimeout
  nameWithType: NegotiateStream.ReadTimeout
- uid: System.Net.Security.NegotiateStream.RemoteIdentity*
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: RemoteIdentity
  nameWithType: NegotiateStream.RemoteIdentity
- uid: System.Net.Security.NegotiateStream.Seek*
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: Seek
  nameWithType: NegotiateStream.Seek
- uid: System.Net.Security.NegotiateStream.SetLength*
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: SetLength
  nameWithType: NegotiateStream.SetLength
- uid: System.Net.Security.NegotiateStream.Write*
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: Write
  nameWithType: NegotiateStream.Write
- uid: System.Net.Security.NegotiateStream.WriteTimeout*
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: WriteTimeout
  nameWithType: NegotiateStream.WriteTimeout
