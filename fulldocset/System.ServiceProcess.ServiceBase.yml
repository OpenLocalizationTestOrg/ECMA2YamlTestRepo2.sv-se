### YamlMime:ManagedReference
items:
- uid: System.ServiceProcess.ServiceBase
  id: ServiceBase
  children:
  - System.ServiceProcess.ServiceBase.#ctor
  - System.ServiceProcess.ServiceBase.AutoLog
  - System.ServiceProcess.ServiceBase.CanHandlePowerEvent
  - System.ServiceProcess.ServiceBase.CanHandleSessionChangeEvent
  - System.ServiceProcess.ServiceBase.CanPauseAndContinue
  - System.ServiceProcess.ServiceBase.CanShutdown
  - System.ServiceProcess.ServiceBase.CanStop
  - System.ServiceProcess.ServiceBase.Dispose(System.Boolean)
  - System.ServiceProcess.ServiceBase.EventLog
  - System.ServiceProcess.ServiceBase.ExitCode
  - System.ServiceProcess.ServiceBase.MaxNameLength
  - System.ServiceProcess.ServiceBase.OnContinue
  - System.ServiceProcess.ServiceBase.OnCustomCommand(System.Int32)
  - System.ServiceProcess.ServiceBase.OnPause
  - System.ServiceProcess.ServiceBase.OnPowerEvent(System.ServiceProcess.PowerBroadcastStatus)
  - System.ServiceProcess.ServiceBase.OnSessionChange(System.ServiceProcess.SessionChangeDescription)
  - System.ServiceProcess.ServiceBase.OnShutdown
  - System.ServiceProcess.ServiceBase.OnStart(System.String[])
  - System.ServiceProcess.ServiceBase.OnStop
  - System.ServiceProcess.ServiceBase.RequestAdditionalTime(System.Int32)
  - System.ServiceProcess.ServiceBase.Run(System.ServiceProcess.ServiceBase)
  - System.ServiceProcess.ServiceBase.Run(System.ServiceProcess.ServiceBase[])
  - System.ServiceProcess.ServiceBase.ServiceHandle
  - System.ServiceProcess.ServiceBase.ServiceMainCallback(System.Int32,System.IntPtr)
  - System.ServiceProcess.ServiceBase.ServiceName
  - System.ServiceProcess.ServiceBase.Stop
  langs:
  - csharp
  name: ServiceBase
  nameWithType: ServiceBase
  fullName: System.ServiceProcess.ServiceBase
  type: Class
  summary: "Tillhandahåller en basklass för en tjänst som kommer att finnas som en del av ett tjänstprogram. ServiceBase måste härledas från när du skapar en ny tjänsteklass med."
  remarks: "Derive from ServiceBase when defining your service class in a service application. Any useful service overrides the [OnStart(String\\[\\])](assetId:///M:System.ServiceProcess.ServiceBase.OnStart(System.String[])?qualifyHint=False&autoUpgrade=True) and <xref:System.ServiceProcess.ServiceBase.OnStop%2A> methods. For additional functionality, you can override <xref:System.ServiceProcess.ServiceBase.OnPause%2A> and <xref:System.ServiceProcess.ServiceBase.OnContinue%2A> with specific behavior in response to changes in the service state.  \n  \n A service is a long-running executable that does not support a user interface, and which might not run under the logged-on user account. The service can run without any user being logged on to the computer.  \n  \n By default, services run under the System account, which is not the same as the Administrator account. You cannot change the rights of the System account. Alternatively, you can use a <xref:System.ServiceProcess.ServiceProcessInstaller> to specify a user account under which the service will run.  \n  \n An executable can contain more than one service but must contain a separate <xref:System.ServiceProcess.ServiceInstaller> for each service. The <xref:System.ServiceProcess.ServiceInstaller> instance registers the service with the system. The installer also associates each service with an event log that you can use to record service commands. The `main()` function in the executable defines which services should run. The current working directory of the service is the system directory, not the directory in which the executable is located.  \n  \n When you start a service, the system locates the executable and runs the <xref:System.ServiceProcess.ServiceBase.OnStart%2A> method for that service, contained within the executable. However, running the service is not the same as running the executable. The executable only loads the service. The service is accessed (for example, started and stopped) through the Service Control Manager.  \n  \n The executable calls the ServiceBase derived class's constructor the first time you call Start on the service. The <xref:System.ServiceProcess.ServiceBase.OnStart%2A> command-handling method is called immediately after the constructor executes. The constructor is not executed again after the first time the service has been loaded, so it is necessary to separate the processing performed by the constructor from that performed by <xref:System.ServiceProcess.ServiceBase.OnStart%2A>. Any resources that can be released by <xref:System.ServiceProcess.ServiceBase.OnStop%2A> should be created in <xref:System.ServiceProcess.ServiceBase.OnStart%2A>. Creating resources in the constructor prevents them from being created properly if the service is started again after <xref:System.ServiceProcess.ServiceBase.OnStop%2A> has released the resources.  \n  \n The Service Control Manager (SCM) provides a way to interact with the service. You can use the SCM to pass Start, Stop, Pause, Continue, or custom commands into the service. The SCM uses the values of <xref:System.ServiceProcess.ServiceBase.CanStop%2A> and <xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A> to determine whether the service accepts Stop, Pause, or Continue commands. Stop, Pause, and Continue are enabled in the SCM's context menus only if the corresponding property <xref:System.ServiceProcess.ServiceBase.CanStop%2A> or <xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A> is `true` in the service class. If enabled, the command is passed to the service, and <xref:System.ServiceProcess.ServiceBase.OnStop%2A>, <xref:System.ServiceProcess.ServiceBase.OnPause%2A>, or <xref:System.ServiceProcess.ServiceBase.OnContinue%2A> is called. If <xref:System.ServiceProcess.ServiceBase.CanStop%2A>, <xref:System.ServiceProcess.ServiceBase.CanShutdown%2A>, or <xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A> is `false`, the corresponding command-handling method (such as <xref:System.ServiceProcess.ServiceBase.OnStop%2A>) will not be processed, even if you have implemented the method.  \n  \n You can use the <xref:System.ServiceProcess.ServiceController> class to do programmatically what the SCM does using a user interface. You can automate the tasks available in the console. If <xref:System.ServiceProcess.ServiceBase.CanStop%2A>, <xref:System.ServiceProcess.ServiceBase.CanShutdown%2A>, or <xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A> is `true` but you have not implemented a corresponding command-handling method (such as <xref:System.ServiceProcess.ServiceBase.OnStop%2A>) the system throws an exception and ignores the command.  \n  \n You do not have to implement <xref:System.ServiceProcess.ServiceBase.OnStart%2A>, <xref:System.ServiceProcess.ServiceBase.OnStop%2A>, or any other method in ServiceBase. However, the service's behavior is described in <xref:System.ServiceProcess.ServiceBase.OnStart%2A>, so at minimum, this member should be overridden. The `main()` function of the executable registers the service in the executable with the Service Control Manager by calling the <xref:System.ServiceProcess.ServiceBase.Run%2A> method. The <xref:System.ServiceProcess.ServiceBase.ServiceName%2A> property of the ServiceBase object passed to the <xref:System.ServiceProcess.ServiceBase.Run%2A> method must match the <xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A> property of the service installer for that service.  \n  \n You can use `InstallUtil.exe` to install services on your system.  \n  \n> [!NOTE]\n>  You can specify a log other than the Application event log to receive notification of service calls, but neither the <xref:System.ServiceProcess.ServiceBase.AutoLog%2A> nor the <xref:System.ServiceProcess.ServiceBase.EventLog%2A> property can write to a custom log. Set <xref:System.ServiceProcess.ServiceBase.AutoLog%2A> to `false` if you do not want to use automatic logging."
  syntax:
    content: >-
      [System.ComponentModel.InstallerType(typeof(System.ServiceProcess.ServiceProcessInstaller))]

      public class ServiceBase : System.ComponentModel.Component
  inheritance:
  - System.Object
  - System.MarshalByRefObject
  - System.ComponentModel.Component
  implements: []
  inheritedMembers:
  - System.ComponentModel.Component.CanRaiseEvents
  - System.ComponentModel.Component.Container
  - System.ComponentModel.Component.DesignMode
  - System.ComponentModel.Component.Dispose
  - System.ComponentModel.Component.Disposed
  - System.ComponentModel.Component.Events
  - System.ComponentModel.Component.GetService(System.Type)
  - System.ComponentModel.Component.Site
  - System.ComponentModel.Component.ToString
  - System.MarshalByRefObject.CreateObjRef(System.Type)
  - System.MarshalByRefObject.GetLifetimeService
  - System.MarshalByRefObject.InitializeLifetimeService
  - System.MarshalByRefObject.MemberwiseClone(System.Boolean)
  platform:
  - net462
- uid: System.ServiceProcess.ServiceBase.#ctor
  id: '#ctor'
  parent: System.ServiceProcess.ServiceBase
  langs:
  - csharp
  name: ServiceBase()
  nameWithType: ServiceBase.ServiceBase()
  fullName: System.ServiceProcess.ServiceBase.ServiceBase()
  type: Constructor
  assemblies:
  - System.ServiceProcess
  namespace: System.ServiceProcess
  summary: "Skapar en ny instans av den <xref href=&quot;System.ServiceProcess.ServiceBase&quot;> </xref> klass."
  remarks: "Skapa inte en instans av <xref:System.ServiceProcess.ServiceBase>klassen.</xref:System.ServiceProcess.ServiceBase> I stället härledd från <xref:System.ServiceProcess.ServiceBase>och skapa en instans av din härledd klass.</xref:System.ServiceProcess.ServiceBase> Minst som du behöver implementera i konstruktorn för en klass som ärvts från <xref:System.ServiceProcess.ServiceBase>är att ange den <xref:System.ServiceProcess.ServiceBase.ServiceName%2A>på komponenten.</xref:System.ServiceProcess.ServiceBase.ServiceName%2A> </xref:System.ServiceProcess.ServiceBase> Ingen vidare bearbetning krävs specifikt i konstruktorn. Du ska hantera de flesta initieringen i <xref:System.ServiceProcess.ServiceBase.OnStart%2A>i stället för i konstruktorn.</xref:System.ServiceProcess.ServiceBase.OnStart%2A> Annars finns ingen garanti objekten kommer att startas när du startar om en tjänst när den har stoppats.       Om du åsidosätta konstruktorn i den härledda klassen anropa konstruktorn basklass i koden.       Den <xref:System.ServiceProcess.ServiceBase>konstruktorn anger <xref:System.ServiceProcess.ServiceBase.AutoLog%2A>till `true`.</xref:System.ServiceProcess.ServiceBase.AutoLog%2A> </xref:System.ServiceProcess.ServiceBase> Om du inte vill logga automatiskt anrop till tjänsten från Service Control Manager (SCM) anger <xref:System.ServiceProcess.ServiceBase.AutoLog%2A>till `false`.</xref:System.ServiceProcess.ServiceBase.AutoLog%2A>       Om den körbara filen innehåller en enskild tjänst, anropar systemet tjänstens konstruktor när Start väljs från SCM och kör destruktorn om stoppa anropas.       Om den körbara filen innehåller flera tjänster, anropar Start på en tjänst gör konstruktorer ska anropas för alla tjänster i den körbara filen, men endast den angivna tjänsten är igång. Destruktorer för tjänsterna körs tillsammans när alla tjänster har stoppats, inte individuellt när varje tjänst har stoppats.      > [!NOTE] > Om du åsidosätta konstruktorn basklass du explicit anropa den i konstruktören för den härledda klassen."
  syntax:
    content: public ServiceBase ();
    parameters: []
  overload: System.ServiceProcess.ServiceBase.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceProcess.ServiceBase.AutoLog
  id: AutoLog
  parent: System.ServiceProcess.ServiceBase
  langs:
  - csharp
  name: AutoLog
  nameWithType: ServiceBase.AutoLog
  fullName: System.ServiceProcess.ServiceBase.AutoLog
  type: Property
  assemblies:
  - System.ServiceProcess
  namespace: System.ServiceProcess
  summary: "Anger om du vill rapportera Start, Stop, Pause och fortsätt kommandon i händelseloggen."
  remarks: "Ange AutoLog till `true` instruerar tjänsten använder programhändelseloggen till rapporten kommandot fel, samt information om entitetstillståndsändringar för Start, Stop, Pause och fortsätta händelser på tjänsten. Namnet på tjänsten som används som loggen <xref:System.Diagnostics.EventLog.Source%2A?displayProperty=fullName>.</xref:System.Diagnostics.EventLog.Source%2A?displayProperty=fullName>       Att rapportera information till en anpassad händelselogg i stället för programloggen genom att ange AutoLog `false` och skriva instruktioner i metoder för hantering av kommandot <xref:System.ServiceProcess.ServiceBase.OnContinue%2A>, <xref:System.ServiceProcess.ServiceBase.OnPause%2A>, eller <xref:System.ServiceProcess.ServiceBase.OnStop%2A>att skicka till lämplig loggen</xref:System.ServiceProcess.ServiceBase.OnStop%2A> </xref:System.ServiceProcess.ServiceBase.OnPause%2A> </xref:System.ServiceProcess.ServiceBase.OnContinue%2A>      > [!NOTE] > Den <xref:System.ServiceProcess.ServiceBase.ServiceName%2A>som tillhandahåller Källsträngen för händelseloggen, måste anges innan tjänsten försöker att skriva till händelseloggen.</xref:System.ServiceProcess.ServiceBase.ServiceName%2A> Försöker få åtkomst till händelseloggen innan källnamnet anges genereras ett undantag."
  syntax:
    content: public bool AutoLog { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>rapporten information i händelseloggen. Annars <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.ServiceProcess.ServiceBase.AutoLog*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceProcess.ServiceBase.CanHandlePowerEvent
  id: CanHandlePowerEvent
  parent: System.ServiceProcess.ServiceBase
  langs:
  - csharp
  name: CanHandlePowerEvent
  nameWithType: ServiceBase.CanHandlePowerEvent
  fullName: System.ServiceProcess.ServiceBase.CanHandlePowerEvent
  type: Property
  assemblies:
  - System.ServiceProcess
  namespace: System.ServiceProcess
  summary: "Hämtar eller anger ett värde som anger om tjänsten kan hantera meddelanden om datorn power status ändras."
  remarks: "När datorn power status ändras Service Control Manager (SCM) kontrollerar om tjänsten accepterar power händelse kommandon med hjälp av värdet för CanHandlePowerEvent.       Om CanHandlePowerEvent `true`, kommandot skickas till tjänsten och <xref:System.ServiceProcess.ServiceBase.OnPowerEvent%2A>metoden anropas om definierats.</xref:System.ServiceProcess.ServiceBase.OnPowerEvent%2A> Om <xref:System.ServiceProcess.ServiceBase.OnPowerEvent%2A>har inte implementerats i den härledda klassen hanterar SCM Strömfel via tom basklassen <xref:System.ServiceProcess.ServiceBase.OnPowerEvent%2A?displayProperty=fullName>metod.</xref:System.ServiceProcess.ServiceBase.OnPowerEvent%2A?displayProperty=fullName> </xref:System.ServiceProcess.ServiceBase.OnPowerEvent%2A>"
  syntax:
    content: public bool CanHandlePowerEvent { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Om tjänsten hanterar power datorstatus ändringar som anges i den <xref href=&quot;System.ServiceProcess.PowerBroadcastStatus&quot;> </xref> klass, annars <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.ServiceProcess.ServiceBase.CanHandlePowerEvent*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Den här egenskapen har ändrats sedan tjänsten startades."
  platform:
  - net462
- uid: System.ServiceProcess.ServiceBase.CanHandleSessionChangeEvent
  id: CanHandleSessionChangeEvent
  parent: System.ServiceProcess.ServiceBase
  langs:
  - csharp
  name: CanHandleSessionChangeEvent
  nameWithType: ServiceBase.CanHandleSessionChangeEvent
  fullName: System.ServiceProcess.ServiceBase.CanHandleSessionChangeEvent
  type: Property
  assemblies:
  - System.ServiceProcess
  namespace: System.ServiceProcess
  summary: "Hämtar eller anger ett värde som anger om tjänsten kan hantera session ändra händelser som tagits emot från en Terminal Server-session."
  syntax:
    content: public bool CanHandleSessionChangeEvent { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Om tjänsten kan hantera Ändringshändelser för Terminal Server-session; Annars <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.ServiceProcess.ServiceBase.CanHandleSessionChangeEvent*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Den här egenskapen har ändrats sedan tjänsten startades."
  platform:
  - net462
- uid: System.ServiceProcess.ServiceBase.CanPauseAndContinue
  id: CanPauseAndContinue
  parent: System.ServiceProcess.ServiceBase
  langs:
  - csharp
  name: CanPauseAndContinue
  nameWithType: ServiceBase.CanPauseAndContinue
  fullName: System.ServiceProcess.ServiceBase.CanPauseAndContinue
  type: Property
  assemblies:
  - System.ServiceProcess
  namespace: System.ServiceProcess
  summary: "Hämtar eller anger ett värde som anger om tjänsten pausas och återupptas."
  remarks: "Ange värdet på egenskapen CanPauseAndContinue i konstruktorn för tjänsten.       När en tjänst har pausats stoppas slutförts. När du vill fortsätta använda tjänsten (antingen via Service Control Manager eller programmässigt), <xref:System.ServiceProcess.ServiceBase.OnContinue%2A>körs.</xref:System.ServiceProcess.ServiceBase.OnContinue%2A>       Skicka en begäran om paus till tjänsten kan spara systemresurser. Frigör inte Pausa alla systemresurser, men gör stoppa. <xref:System.ServiceProcess.ServiceBase.OnPause%2A>och <xref:System.ServiceProcess.ServiceBase.OnContinue%2A>implementeras ofta för att utföra mindre bearbetning än <xref:System.ServiceProcess.ServiceBase.OnStop%2A>och <xref:System.ServiceProcess.ServiceBase.OnStart%2A>.</xref:System.ServiceProcess.ServiceBase.OnStart%2A> </xref:System.ServiceProcess.ServiceBase.OnStop%2A> </xref:System.ServiceProcess.ServiceBase.OnContinue%2A></xref:System.ServiceProcess.ServiceBase.OnPause%2A>       När CanPauseAndContinue är `true`, åsidosätta <xref:System.ServiceProcess.ServiceBase.OnPause%2A>och <xref:System.ServiceProcess.ServiceBase.OnContinue%2A>att ange bearbetning som ska utföras när Service Control Manager (SCM) skickar en begäran om paus eller Fortsätt till din tjänst.</xref:System.ServiceProcess.ServiceBase.OnContinue%2A> </xref:System.ServiceProcess.ServiceBase.OnPause%2A> <xref:System.ServiceProcess.ServiceBase.OnContinue%2A>bör genomföras om du vill ångra bearbetning i <xref:System.ServiceProcess.ServiceBase.OnPause%2A>.</xref:System.ServiceProcess.ServiceBase.OnPause%2A></xref:System.ServiceProcess.ServiceBase.OnContinue%2A>       Om CanPauseAndContinue `false`, SCM inte skickar paus eller Fortsätt förfrågningar till tjänsten, så den <xref:System.ServiceProcess.ServiceBase.OnPause%2A>och <xref:System.ServiceProcess.ServiceBase.OnContinue%2A>metoder anropas inte även om de är implementerade.</xref:System.ServiceProcess.ServiceBase.OnContinue%2A> </xref:System.ServiceProcess.ServiceBase.OnPause%2A> I SCM, den `Pause` och `Continue` kontrollerna är inaktiverade när CanPauseAndContinue är `false`."
  syntax:
    content: public bool CanPauseAndContinue { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Om tjänsten kan pausas; Annars <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.ServiceProcess.ServiceBase.CanPauseAndContinue*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Tjänsten har redan startats. Egenskapen CanPauseAndContinue kan inte ändras när tjänsten har startats."
  platform:
  - net462
- uid: System.ServiceProcess.ServiceBase.CanShutdown
  id: CanShutdown
  parent: System.ServiceProcess.ServiceBase
  langs:
  - csharp
  name: CanShutdown
  nameWithType: ServiceBase.CanShutdown
  fullName: System.ServiceProcess.ServiceBase.CanShutdown
  type: Property
  assemblies:
  - System.ServiceProcess
  namespace: System.ServiceProcess
  summary: "Hämtar eller anger ett värde som anger om tjänsten ska aviseras när systemet stängs av."
  remarks: "Om CanShutdown är `true`, tjänsten meddelas när systemet stängs av. Vid avslutning, som <xref:System.ServiceProcess.ServiceBase.OnShutdown%2A>metoden anropas om det har implementerats i din härledda klass.</xref:System.ServiceProcess.ServiceBase.OnShutdown%2A>      > [!NOTE] > Endast systemet ska orsaka det <xref:System.ServiceProcess.ServiceBase.OnShutdown%2A>metod för att köra; tjänsten så att den kan anropa, men detta rekommenderas inte.</xref:System.ServiceProcess.ServiceBase.OnShutdown%2A>"
  syntax:
    content: public bool CanShutdown { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Om tjänsten ska aviseras när systemet stängs av; Annars <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>.  Standardvärdet är <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.ServiceProcess.ServiceBase.CanShutdown*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Tjänsten har redan startats. Egenskapen CanShutdown kan inte ändras när tjänsten har startats."
  platform:
  - net462
- uid: System.ServiceProcess.ServiceBase.CanStop
  id: CanStop
  parent: System.ServiceProcess.ServiceBase
  langs:
  - csharp
  name: CanStop
  nameWithType: ServiceBase.CanStop
  fullName: System.ServiceProcess.ServiceBase.CanStop
  type: Property
  assemblies:
  - System.ServiceProcess
  namespace: System.ServiceProcess
  summary: "Hämtar eller anger ett värde som anger om tjänsten kan stoppas när den har startats."
  remarks: "När stoppa anropas på en tjänst, kontrollerar Service Control Manager (SCM) om tjänsten accepterar stoppa kommandon med hjälp av värdet för egenskapsvärdena för CanStop. Värdet för egenskapsvärdena för CanStop är för de flesta tjänster `true`, men vissa tjänster för operativsystemet, exempelvis inte tillåter användare att stoppa dem.       Om egenskapsvärdena för CanStop `true`, kommandot Stop skickas till tjänsten och <xref:System.ServiceProcess.ServiceBase.OnStop%2A>metoden anropas om det har definierats.</xref:System.ServiceProcess.ServiceBase.OnStop%2A> Om <xref:System.ServiceProcess.ServiceBase.OnStop%2A>har inte implementerats i den härledda klassen SCM-referenser för att stoppa kommandot via tom basklassen <xref:System.ServiceProcess.ServiceBase.OnStop%2A?displayProperty=fullName>metod.</xref:System.ServiceProcess.ServiceBase.OnStop%2A?displayProperty=fullName> </xref:System.ServiceProcess.ServiceBase.OnStop%2A>"
  syntax:
    content: public bool CanStop { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Om tjänsten kan stoppas och <xref:System.ServiceProcess.ServiceBase.OnStop*>metoden anropas; annars <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>.</xref:System.ServiceProcess.ServiceBase.OnStop*>"
  overload: System.ServiceProcess.ServiceBase.CanStop*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Tjänsten har redan startats. Egenskapen egenskapsvärdena för CanStop kan inte ändras när tjänsten har startats."
  platform:
  - net462
- uid: System.ServiceProcess.ServiceBase.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.ServiceProcess.ServiceBase
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: ServiceBase.Dispose(Boolean)
  fullName: System.ServiceProcess.ServiceBase.Dispose(Boolean)
  type: Method
  assemblies:
  - System.ServiceProcess
  namespace: System.ServiceProcess
  summary: "Omhändertar resurser (andra än minne) som används av den <xref href=&quot;System.ServiceProcess.ServiceBase&quot;> </xref>."
  remarks: "Anropa Dispose i den härledda klassen (och igenom dem i den <xref:System.ServiceProcess.ServiceBase>klassen) när du är klar med härledd klass.</xref:System.ServiceProcess.ServiceBase> Metoden Dispose lämnar den härledda klassen oanvändbar. När du anropar Dispose, måste du släppa alla referenser till den härledda klassen och <xref:System.ServiceProcess.ServiceBase>så att det minne som de använder kan frigöras genom skräpinsamling.</xref:System.ServiceProcess.ServiceBase>      > [!NOTE] > Alltid anropet Dispose innan du släpper senaste referens till klassen som härleds från <xref:System.ServiceProcess.ServiceBase>.</xref:System.ServiceProcess.ServiceBase> Annars resurserna <xref:System.ServiceProcess.ServiceBase>och den härledda klassen använder kommer inte att frigöra förrän skräpinsamling anropar objektens destruktorer.</xref:System.ServiceProcess.ServiceBase>       <xref:System.ServiceProcess.ServiceBase.OnStop%2A>implementeras ofta för att bearbeta koden i <xref:System.ServiceProcess.ServiceBase.OnPause%2A>, kombinerat med ett anrop till Dispose.</xref:System.ServiceProcess.ServiceBase.OnPause%2A></xref:System.ServiceProcess.ServiceBase.OnStop%2A> Om du väljer att göra detta i den härledda klassen är det vanligt att implementera <xref:System.ServiceProcess.ServiceBase.OnStart%2A>att allokera allt Dispose släpps.</xref:System.ServiceProcess.ServiceBase.OnStart%2A>"
  syntax:
    content: protected override void Dispose (bool disposing);
    parameters:
    - id: disposing
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Frisläpp både hanterade och ohanterade resurser. <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> att släppa endast resurser som inte hanteras."
  overload: System.ServiceProcess.ServiceBase.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceProcess.ServiceBase.EventLog
  id: EventLog
  parent: System.ServiceProcess.ServiceBase
  langs:
  - csharp
  name: EventLog
  nameWithType: ServiceBase.EventLog
  fullName: System.ServiceProcess.ServiceBase.EventLog
  type: Property
  assemblies:
  - System.ServiceProcess
  namespace: System.ServiceProcess
  summary: "Hämtar en händelselogg som du kan använda för att skriva meddelanden om kommando-anrop, till exempel Start och stopp, till programmets händelselogg."
  remarks: "Standardkonstruktören EventLog-egenskapen till en instans med det <xref:System.Diagnostics.EventLog.Source%2A?displayProperty=fullName>och <xref:System.Diagnostics.EventLog.Log%2A?displayProperty=fullName>Egenskaper definierade.</xref:System.Diagnostics.EventLog.Log%2A?displayProperty=fullName> </xref:System.Diagnostics.EventLog.Source%2A?displayProperty=fullName> Källan är den <xref:System.ServiceProcess.ServiceBase.ServiceName%2A>av tjänsten, och loggen är datorns Programlogg.</xref:System.ServiceProcess.ServiceBase.ServiceName%2A> Dessa värden anges automatiskt och kan inte ändras för automatisk loggning av kommandon.       När <xref:System.ServiceProcess.ServiceBase.AutoLog%2A>är `true`, starta, stoppa, pausa, fortsätta och anpassade kommandon registreras automatiskt i programmets händelselogg.</xref:System.ServiceProcess.ServiceBase.AutoLog%2A> Du kan använda egenskapen EventLog skriva ytterligare meddelanden till den loggen samt. Komponenten anrop <xref:System.Diagnostics.EventLog.WriteEntry%2A?displayProperty=fullName>med hjälp av den här medlemmen EventLog.</xref:System.Diagnostics.EventLog.WriteEntry%2A?displayProperty=fullName>       Ange om du vill rapportera information till en anpassad händelselogg i stället för programloggen <xref:System.ServiceProcess.ServiceBase.AutoLog%2A>till `false` och skriva instruktioner i metoder för hantering av kommandot <xref:System.ServiceProcess.ServiceBase.OnContinue%2A>, <xref:System.ServiceProcess.ServiceBase.OnPause%2A>, eller <xref:System.ServiceProcess.ServiceBase.OnStop%2A>att skicka till lämplig loggen</xref:System.ServiceProcess.ServiceBase.OnStop%2A> </xref:System.ServiceProcess.ServiceBase.OnPause%2A> </xref:System.ServiceProcess.ServiceBase.OnContinue%2A> </xref:System.ServiceProcess.ServiceBase.AutoLog%2A>"
  syntax:
    content: public virtual System.Diagnostics.EventLog EventLog { get; }
    return:
      type: System.Diagnostics.EventLog
      description: "En <xref href=&quot;System.Diagnostics.EventLog&quot;> </xref> instans vars källa har registrerats i programloggen."
  overload: System.ServiceProcess.ServiceBase.EventLog*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceProcess.ServiceBase.ExitCode
  id: ExitCode
  parent: System.ServiceProcess.ServiceBase
  langs:
  - csharp
  name: ExitCode
  nameWithType: ServiceBase.ExitCode
  fullName: System.ServiceProcess.ServiceBase.ExitCode
  type: Property
  assemblies:
  - System.ServiceProcess
  namespace: System.ServiceProcess
  summary: "Hämtar eller anger slutkoden för tjänsten."
  remarks: "Egenskapen ExitCode till ett noll-värde innan den stoppas för att indikera ett fel till Service Control Manager."
  syntax:
    content: public int ExitCode { get; set; }
    return:
      type: System.Int32
      description: "Slutkoden för tjänsten."
  overload: System.ServiceProcess.ServiceBase.ExitCode*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceProcess.ServiceBase.MaxNameLength
  id: MaxNameLength
  parent: System.ServiceProcess.ServiceBase
  langs:
  - csharp
  name: MaxNameLength
  nameWithType: ServiceBase.MaxNameLength
  fullName: System.ServiceProcess.ServiceBase.MaxNameLength
  type: Field
  assemblies:
  - System.ServiceProcess
  namespace: System.ServiceProcess
  summary: "Anger den maximala storleken för ett tjänstnamn."
  remarks: "ServiceName och DisplayName har båda storlek restriktioner som måste beaktas när du anger egenskaperna för service-klassen."
  syntax:
    content: public const int MaxNameLength = 80;
    return:
      type: System.Int32
      description: "Som ska läggas till."
  exceptions: []
  platform:
  - net462
- uid: System.ServiceProcess.ServiceBase.OnContinue
  id: OnContinue
  parent: System.ServiceProcess.ServiceBase
  langs:
  - csharp
  name: OnContinue()
  nameWithType: ServiceBase.OnContinue()
  fullName: System.ServiceProcess.ServiceBase.OnContinue()
  type: Method
  assemblies:
  - System.ServiceProcess
  namespace: System.ServiceProcess
  summary: "Implementeras i en härledd klass körs OnContinue när ett kommando Fortsätt skickas till tjänsten genom att Service Control Manager (SCM). Anger åtgärder som ska vidtas när en tjänst återställs normala funktion efter en paus."
  remarks: "Implementera OnContinue för spegling av programmets svar på <xref:System.ServiceProcess.ServiceBase.OnPause%2A>.</xref:System.ServiceProcess.ServiceBase.OnPause%2A> När du fortsätta använda tjänsten (antingen via konsolen tjänster eller programmässigt), OnContinue bearbetning körs och tjänsten aktiveras igen.       OnContinue förväntas vara åsidosättas när den <xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A>egenskapen är `true`.</xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A>       Om <xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A>är `false`, SCM inte skickar paus eller Fortsätt begär tjänsten, så den <xref:System.ServiceProcess.ServiceBase.OnPause%2A>och kommer inte att anropa OnContinue metoder även om de är implementerade.</xref:System.ServiceProcess.ServiceBase.OnPause%2A> </xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A> I SCM, den `Pause` och `Continue` kontroller är inaktiverade när <xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A>är `false`.</xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A>"
  syntax:
    content: protected virtual void OnContinue ();
    parameters: []
  overload: System.ServiceProcess.ServiceBase.OnContinue*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceProcess.ServiceBase.OnCustomCommand(System.Int32)
  id: OnCustomCommand(System.Int32)
  parent: System.ServiceProcess.ServiceBase
  langs:
  - csharp
  name: OnCustomCommand(Int32)
  nameWithType: ServiceBase.OnCustomCommand(Int32)
  fullName: System.ServiceProcess.ServiceBase.OnCustomCommand(Int32)
  type: Method
  assemblies:
  - System.ServiceProcess
  namespace: System.ServiceProcess
  summary: "Implementeras i en härledd klass kör OnCustomCommand när Service Control Manager (SCM) skickar ett anpassat kommando till tjänsten. Anger åtgärder som ska vidtas när ett kommando med angivet parametervärde inträffar."
  remarks: "OnCustomCommand kan du ange ytterligare funktionalitet utöver starta, stoppa, pausa och fortsätter tjänster.       SCM inte undersöka anpassade kommando för att kontrollera om tjänsten stöder den `command` parameter skickades. Anpassat kommando överförs direkt till tjänsten. Om tjänsten inte känner igen det `command` parameter, inget händer.       Anpassade kommandon aktiveras av en <xref:System.ServiceProcess.ServiceController.ExecuteCommand%2A>-instruktionen i en <xref:System.ServiceProcess.ServiceController>komponent.</xref:System.ServiceProcess.ServiceController> </xref:System.ServiceProcess.ServiceController.ExecuteCommand%2A> Använd en switch-sats eller om... sedan villkoret för att hantera anpassade kommandon som du definierar på din tjänst.       De enda värdena för ett anpassat kommando som du kan definiera i ditt program eller använda i OnCustomCommand är de mellan 128 och 255. Heltal nedan 128 motsvarar systemreserverat värden.       Om den <xref:System.ServiceProcess.ServiceBase.AutoLog%2A>egenskapen är `true`, anpassade kommandon som andra kommandon, skriva poster i händelseloggen för att rapportera om metoden körningen lyckades eller misslyckades.</xref:System.ServiceProcess.ServiceBase.AutoLog%2A>"
  syntax:
    content: protected virtual void OnCustomCommand (int command);
    parameters:
    - id: command
      type: System.Int32
      description: "Kommandot meddelandet som skickas till tjänsten."
  overload: System.ServiceProcess.ServiceBase.OnCustomCommand*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceProcess.ServiceBase.OnPause
  id: OnPause
  parent: System.ServiceProcess.ServiceBase
  langs:
  - csharp
  name: OnPause()
  nameWithType: ServiceBase.OnPause()
  fullName: System.ServiceProcess.ServiceBase.OnPause()
  type: Method
  assemblies:
  - System.ServiceProcess
  namespace: System.ServiceProcess
  summary: "Implementeras i en härledd klass körs när kommandot pausa skickas till tjänsten genom att Service Control Manager (SCM). Anger åtgärder när du pausar en tjänst."
  remarks: "Använd OnPause för att ange om bearbetningen som utförs när tjänsten tar emot en paus-kommandot. OnPause förväntas vara åsidosättas när den <xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A>egenskapen är `true`.</xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A>       När du fortsätter en pausad tjänst (antingen via konsolen tjänster eller programmässigt), den <xref:System.ServiceProcess.ServiceBase.OnContinue%2A>bearbetning körs, och tjänsten aktiveras igen.</xref:System.ServiceProcess.ServiceBase.OnContinue%2A>       Pausa-kommandot tillåter endast tillämpningsprogrammet att reagera på en viss händelse. OnPause ingenting att den tjänst som du inte definierar den att göra.       Skicka en begäran om paus till tjänsten kan spara systemresurser eftersom paus inte Frigör behöver alla systemresurser. Till exempel om trådar som har öppnats av processen, pausar en tjänst i stället för att stoppa den tillåta trådar för att förbli öppen, slipper omfördela dem när tjänsten fortsätter. Om du definierar paus att släppa alla systemresurser, fungerar den som ett Stop-kommando.       Ange <xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A>till `true`, och åsidosätta OnPause och <xref:System.ServiceProcess.ServiceBase.OnContinue%2A>att ange bearbetning som ska utföras när SCM skickar en begäran om paus eller Fortsätt till din tjänst.</xref:System.ServiceProcess.ServiceBase.OnContinue%2A> </xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A> <xref:System.ServiceProcess.ServiceBase.OnContinue%2A>bör genomföras om du vill ångra bearbetning i OnPause.</xref:System.ServiceProcess.ServiceBase.OnContinue%2A>       Om <xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A>är `false`, SCM inte skickar paus eller Fortsätt förfrågningar till tjänsten, så OnPause och <xref:System.ServiceProcess.ServiceBase.OnContinue%2A>metoder anropas inte även om implementeras.</xref:System.ServiceProcess.ServiceBase.OnContinue%2A> </xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A> I SCM, den `Pause` och `Continue` kontroller är inaktiverade när <xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A>är `false`.</xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A>"
  syntax:
    content: protected virtual void OnPause ();
    parameters: []
  overload: System.ServiceProcess.ServiceBase.OnPause*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceProcess.ServiceBase.OnPowerEvent(System.ServiceProcess.PowerBroadcastStatus)
  id: OnPowerEvent(System.ServiceProcess.PowerBroadcastStatus)
  parent: System.ServiceProcess.ServiceBase
  langs:
  - csharp
  name: OnPowerEvent(PowerBroadcastStatus)
  nameWithType: ServiceBase.OnPowerEvent(PowerBroadcastStatus)
  fullName: System.ServiceProcess.ServiceBase.OnPowerEvent(PowerBroadcastStatus)
  type: Method
  assemblies:
  - System.ServiceProcess
  namespace: System.ServiceProcess
  summary: "Implementeras i en härledd klass körs när datorns power status har ändrats. Detta gäller för bärbara datorer när de hamnar i pausat läge som inte är samma som en systemavstängning."
  remarks: "Använd OnPowerEvent för att ange om bearbetningen som utförs när händelsen system som anges i den <xref:System.ServiceProcess.PowerBroadcastStatus>uppräkningen inträffar – exempelvis när datorn är placerad i pausat läge eller anger lågt batteri.</xref:System.ServiceProcess.PowerBroadcastStatus>       OnPowerEvent förväntas vara åsidosättas när den <xref:System.ServiceProcess.ServiceBase.CanHandlePowerEvent%2A>egenskapen är `true`.</xref:System.ServiceProcess.ServiceBase.CanHandlePowerEvent%2A>"
  syntax:
    content: protected virtual bool OnPowerEvent (System.ServiceProcess.PowerBroadcastStatus powerStatus);
    parameters:
    - id: powerStatus
      type: System.ServiceProcess.PowerBroadcastStatus
      description: "En <xref href=&quot;System.ServiceProcess.PowerBroadcastStatus&quot;> </xref> som anger att ett meddelande från systemet power statusmeddelanden."
    return:
      type: System.Boolean
      description: "Implementeras i en härledd klass avgör behoven för ditt program vilket värde som ska returneras. Till exempel om en <xref uid=&quot;langword_csharp_QuerySuspend&quot; name=&quot;QuerySuspend&quot; href=&quot;&quot;> </xref> broadcast status har gått ut, kan det orsaka tillämpningsprogrammet att avvisa frågan genom att returnera <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.ServiceProcess.ServiceBase.OnPowerEvent*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceProcess.ServiceBase.OnSessionChange(System.ServiceProcess.SessionChangeDescription)
  id: OnSessionChange(System.ServiceProcess.SessionChangeDescription)
  parent: System.ServiceProcess.ServiceBase
  langs:
  - csharp
  name: OnSessionChange(SessionChangeDescription)
  nameWithType: ServiceBase.OnSessionChange(SessionChangeDescription)
  fullName: System.ServiceProcess.ServiceBase.OnSessionChange(SessionChangeDescription)
  type: Method
  assemblies:
  - System.ServiceProcess
  namespace: System.ServiceProcess
  summary: "Kör när händelsen ändring tas emot från en Terminal Server-session."
  remarks: "Du måste ange den <xref:System.ServiceProcess.ServiceBase.CanHandleSessionChangeEvent%2A>egenskapen `true` att körningen av den här metoden.</xref:System.ServiceProcess.ServiceBase.CanHandleSessionChangeEvent%2A>"
  syntax:
    content: protected virtual void OnSessionChange (System.ServiceProcess.SessionChangeDescription changeDescription);
    parameters:
    - id: changeDescription
      type: System.ServiceProcess.SessionChangeDescription
      description: "En struktur som identifierar ändringstyp."
  overload: System.ServiceProcess.ServiceBase.OnSessionChange*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceProcess.ServiceBase.OnShutdown
  id: OnShutdown
  parent: System.ServiceProcess.ServiceBase
  langs:
  - csharp
  name: OnShutdown()
  nameWithType: ServiceBase.OnShutdown()
  fullName: System.ServiceProcess.ServiceBase.OnShutdown()
  type: Method
  assemblies:
  - System.ServiceProcess
  namespace: System.ServiceProcess
  summary: "Implementeras i en härledd klass körs när systemet stängs av. Anger vad som ska hända omedelbart innan systemet avslutas."
  remarks: "Använd OnShutdown för att ange om bearbetningen som utförs när systemet stängs av.       Den här händelsen inträffar bara när operativsystemet är avstängd, inte när datorn är avstängd.       OnShutdown förväntas vara åsidosättas när den <xref:System.ServiceProcess.ServiceBase.CanShutdown%2A>egenskapen är `true`.</xref:System.ServiceProcess.ServiceBase.CanShutdown%2A>"
  syntax:
    content: protected virtual void OnShutdown ();
    parameters: []
  overload: System.ServiceProcess.ServiceBase.OnShutdown*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceProcess.ServiceBase.OnStart(System.String[])
  id: OnStart(System.String[])
  parent: System.ServiceProcess.ServiceBase
  langs:
  - csharp
  name: OnStart(String[])
  nameWithType: ServiceBase.OnStart(String[])
  fullName: System.ServiceProcess.ServiceBase.OnStart(String[])
  type: Method
  assemblies:
  - System.ServiceProcess
  namespace: System.ServiceProcess
  summary: "Implementeras i en härledd klass körs när en Start-kommandot skickas till tjänsten genom att Service Control Manager (SCM) eller när operativsystemet startas (för en tjänst som startar automatiskt). Anger åtgärder som ska vidtas när tjänsten startas."
  remarks: "Use OnStart to specify the processing that occurs when the service receives a Start command. OnStart is the method in which you specify the behavior of the service. OnStart can take arguments as a way to pass data, but this usage is rare.  \n  \n> [!CAUTION]\n>  Do not use the constructor to perform processing that should be in OnStart. Use OnStart to handle all initialization of your service. The constructor is called when the application's executable runs, not when the service runs. The executable runs before OnStart. When you continue, for example, the constructor is not called again because the SCM already holds the object in memory. If <xref:System.ServiceProcess.ServiceBase.OnStop%2A> releases resources allocated in the constructor rather than in OnStart, the needed resources would not be created again the second time the service is called.  \n  \n Services can be set to start automatically when the computer reboots by setting the <xref:System.ServiceProcess.ServiceInstaller.StartType%2A> on the service's installer to <xref:System.ServiceProcess.ServiceStartMode>. In such a situation, OnStart would be called at system startup.  \n  \n OnStart is expected to be overridden in the derived class. For the service to be useful, OnStart and <xref:System.ServiceProcess.ServiceBase.OnStop%2A> should both be implemented in your service class.  \n  \n Process initialization arguments for the service in the OnStart method, not in the Main method. The arguments in the `args` parameter array can be set manually in the properties window for the service in the Services console. The arguments entered in the console are not saved; they are passed to the service on a one-time basis when the service is started from the control panel. Arguments that must be present when the service is automatically started can be placed in the ImagePath string value for the service's registry key (HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\\\*\\<service name>*). You can obtain the arguments from the registry using the <xref:System.Environment.GetCommandLineArgs%2A> method, for example:  `string[] imagePathArgs = Environment.GetCommandLineArgs();`."
  syntax:
    content: protected virtual void OnStart (string[] args);
    parameters:
    - id: args
      type: System.String[]
      description: "Data som skickas av startkommandot."
  overload: System.ServiceProcess.ServiceBase.OnStart*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceProcess.ServiceBase.OnStop
  id: OnStop
  parent: System.ServiceProcess.ServiceBase
  langs:
  - csharp
  name: OnStop()
  nameWithType: ServiceBase.OnStop()
  fullName: System.ServiceProcess.ServiceBase.OnStop()
  type: Method
  assemblies:
  - System.ServiceProcess
  namespace: System.ServiceProcess
  summary: "Implementeras i en härledd klass körs när stoppkommandot skickas till tjänsten genom att Service Control Manager (SCM). Anger åtgärder som ska vidtas när en tjänst har körts."
  remarks: "Använd OnStop för att ange om bearbetningen som utförs när tjänsten tar emot ett Stop-kommando.       När SCM tar emot ett Stop-kommando, används värdet för <xref:System.ServiceProcess.ServiceBase.CanStop%2A>att verifiera om tjänsten accepterar stoppa kommandon.</xref:System.ServiceProcess.ServiceBase.CanStop%2A> Om <xref:System.ServiceProcess.ServiceBase.CanStop%2A>är `true`kommandot Stop skickas till tjänsten och OnStop-metoden anropas om det har definierats.</xref:System.ServiceProcess.ServiceBase.CanStop%2A> Om OnStop inte är implementerad i tjänsten, hanterar SCM kommandot Stop.       Om <xref:System.ServiceProcess.ServiceBase.CanStop%2A>är `false`, SCM ignorerar kommandot Stop.</xref:System.ServiceProcess.ServiceBase.CanStop%2A> Det är inte skickas till tjänsten. Kommandot Stop returnerar och genererar ett undantag.       OnStop förväntas åsidosättas i den härledda klassen. För tjänsten för att användas, <xref:System.ServiceProcess.ServiceBase.OnStart%2A>och OnStop bör båda implementeras i din tjänst klass.</xref:System.ServiceProcess.ServiceBase.OnStart%2A>"
  syntax:
    content: protected virtual void OnStop ();
    parameters: []
  overload: System.ServiceProcess.ServiceBase.OnStop*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceProcess.ServiceBase.RequestAdditionalTime(System.Int32)
  id: RequestAdditionalTime(System.Int32)
  parent: System.ServiceProcess.ServiceBase
  langs:
  - csharp
  name: RequestAdditionalTime(Int32)
  nameWithType: ServiceBase.RequestAdditionalTime(Int32)
  fullName: System.ServiceProcess.ServiceBase.RequestAdditionalTime(Int32)
  type: Method
  assemblies:
  - System.ServiceProcess
  namespace: System.ServiceProcess
  summary: "Begäranden extra tid för en väntande åtgärd."
  remarks: "Metoden RequestAdditionalTime är avsedd att anropas av den åsidosatt <xref:System.ServiceProcess.ServiceBase.OnContinue%2A>, <xref:System.ServiceProcess.ServiceBase.OnPause%2A>, <xref:System.ServiceProcess.ServiceBase.OnStart%2A>, eller <xref:System.ServiceProcess.ServiceBase.OnStop%2A>metoder för att begära ytterligare tid för en väntande åtgärd för att förhindra att Service Control Manager (SCM) markerar du tjänsten som inte svarar.</xref:System.ServiceProcess.ServiceBase.OnStop%2A> </xref:System.ServiceProcess.ServiceBase.OnStart%2A> </xref:System.ServiceProcess.ServiceBase.OnPause%2A> </xref:System.ServiceProcess.ServiceBase.OnContinue%2A>  Om den pågående åtgärden inte är en Fortsätt, pausa, starta eller stoppa, en <xref:System.InvalidOperationException>genereras.</xref:System.InvalidOperationException>"
  syntax:
    content: public void RequestAdditionalTime (int milliseconds);
    parameters:
    - id: milliseconds
      type: System.Int32
      description: "Den begärda tiden i millisekunder."
  overload: System.ServiceProcess.ServiceBase.RequestAdditionalTime*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Tjänsten är inte i ett väntande tillstånd."
  platform:
  - net462
- uid: System.ServiceProcess.ServiceBase.Run(System.ServiceProcess.ServiceBase)
  id: Run(System.ServiceProcess.ServiceBase)
  parent: System.ServiceProcess.ServiceBase
  langs:
  - csharp
  name: Run(ServiceBase)
  nameWithType: ServiceBase.Run(ServiceBase)
  fullName: System.ServiceProcess.ServiceBase.Run(ServiceBase)
  type: Method
  assemblies:
  - System.ServiceProcess
  namespace: System.ServiceProcess
  summary: "Registrerar den körbara filen för en tjänst med Service Control Manager (SCM)."
  remarks: "Anropa den här överlagring i den `main()` funktion av tjänstens körbara fil att registrera service med Service Control Manager. När du anropar kör Service Control Manager skickar en startkommandot, vilket resulterar i ett anrop till den <xref:System.ServiceProcess.ServiceBase.OnStart%2A>metod i tjänsten.</xref:System.ServiceProcess.ServiceBase.OnStart%2A> Tjänsten startar inte förrän Start-kommandot körs.       Kör metoden anropas på ungefär samma sätt som <xref:System.Windows.Forms.Application.Run%2A?displayProperty=fullName>för Windows Forms-program.</xref:System.Windows.Forms.Application.Run%2A?displayProperty=fullName>       Om <xref:System.ServiceProcess.ServiceBase.AutoLog%2A>är `true`, skrivs en post i händelseloggen om tjänsten som anges av den `service` parametern kan inte startas.</xref:System.ServiceProcess.ServiceBase.AutoLog%2A>"
  syntax:
    content: public static void Run (System.ServiceProcess.ServiceBase service);
    parameters:
    - id: service
      type: System.ServiceProcess.ServiceBase
      description: "En <xref href=&quot;System.ServiceProcess.ServiceBase&quot;> </xref> som anger att en tjänst som ska startas."
  overload: System.ServiceProcess.ServiceBase.Run*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>service</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.ServiceProcess.ServiceBase.Run(System.ServiceProcess.ServiceBase[])
  id: Run(System.ServiceProcess.ServiceBase[])
  parent: System.ServiceProcess.ServiceBase
  langs:
  - csharp
  name: Run(ServiceBase[])
  nameWithType: ServiceBase.Run(ServiceBase[])
  fullName: System.ServiceProcess.ServiceBase.Run(ServiceBase[])
  type: Method
  assemblies:
  - System.ServiceProcess
  namespace: System.ServiceProcess
  summary: "Registrerar den körbara filen för flera tjänster med Service Control Manager (SCM)."
  remarks: "Anropa den här överlagring i den `main()` funktion av tjänstens körbara fil att registrera tjänster med Service Control Manager. När du anropar kör Service Control Manager utfärdar Start-kommandon, vilket resulterar i anrop till den <xref:System.ServiceProcess.ServiceBase.OnStart%2A>metoder i tjänsterna.</xref:System.ServiceProcess.ServiceBase.OnStart%2A> Tjänsterna startas inte förrän Start-kommandon körs.       Kör metoden anropas på ungefär samma sätt som den <xref:System.Windows.Forms.Application.Run%2A?displayProperty=fullName>metod för Windows Forms-program.</xref:System.Windows.Forms.Application.Run%2A?displayProperty=fullName>       Om <xref:System.ServiceProcess.ServiceBase.AutoLog%2A>är `true`, skrivs en post i händelseloggen om alla tjänster i matrisen inte kan startas.</xref:System.ServiceProcess.ServiceBase.AutoLog%2A>"
  syntax:
    content: public static void Run (System.ServiceProcess.ServiceBase[] services);
    parameters:
    - id: services
      type: System.ServiceProcess.ServiceBase[]
      description: "En matris med ServiceBase instanser som indikerar att tjänsten ska starta."
  overload: System.ServiceProcess.ServiceBase.Run*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Du inte ange en tjänst som ska startas. Matrisen kan vara <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> eller tomt."
  platform:
  - net462
- uid: System.ServiceProcess.ServiceBase.ServiceHandle
  id: ServiceHandle
  parent: System.ServiceProcess.ServiceBase
  langs:
  - csharp
  name: ServiceHandle
  nameWithType: ServiceBase.ServiceHandle
  fullName: System.ServiceProcess.ServiceBase.ServiceHandle
  type: Property
  assemblies:
  - System.ServiceProcess
  namespace: System.ServiceProcess
  summary: "Hämtar service control referensen för tjänsten."
  remarks: "Kontrollen tjänstreferens används för att kommunicera med Service Control Manager (SCM).  Referensen kan användas för att uppdatera service control manager statusinformation för anropa tjänsten med den ohanterade `SetServiceStatus` funktion."
  syntax:
    content: protected IntPtr ServiceHandle { get; }
    return:
      type: System.IntPtr
      description: "En <xref:System.IntPtr>struktur som innehåller kontrollen tjänstreferens för tjänsten.</xref:System.IntPtr>"
  overload: System.ServiceProcess.ServiceBase.ServiceHandle*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceProcess.ServiceBase.ServiceMainCallback(System.Int32,System.IntPtr)
  id: ServiceMainCallback(System.Int32,System.IntPtr)
  parent: System.ServiceProcess.ServiceBase
  langs:
  - csharp
  name: ServiceMainCallback(Int32,IntPtr)
  nameWithType: ServiceBase.ServiceMainCallback(Int32,IntPtr)
  fullName: System.ServiceProcess.ServiceBase.ServiceMainCallback(Int32,IntPtr)
  type: Method
  assemblies:
  - System.ServiceProcess
  namespace: System.ServiceProcess
  summary: "Registrerar kommandohanteraren och startar tjänsten."
  syntax:
    content: public void ServiceMainCallback (int argCount, IntPtr argPointer);
    parameters:
    - id: argCount
      type: System.Int32
      description: "Antalet argument i argumentmatrisen."
    - id: argPointer
      type: System.IntPtr
      description: "En <xref:System.IntPtr>struktur som pekar på en matris med argument.</xref:System.IntPtr>"
  overload: System.ServiceProcess.ServiceBase.ServiceMainCallback*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceProcess.ServiceBase.ServiceName
  id: ServiceName
  parent: System.ServiceProcess.ServiceBase
  langs:
  - csharp
  name: ServiceName
  nameWithType: ServiceBase.ServiceName
  fullName: System.ServiceProcess.ServiceBase.ServiceName
  type: Property
  assemblies:
  - System.ServiceProcess
  namespace: System.ServiceProcess
  summary: "Hämtar eller anger det korta namnet som används för att identifiera tjänsten i systemet."
  remarks: "ServiceName identifierar tjänsten till Service Control Manager. Värdet för den här egenskapen måste vara identiskt med namnet registreras för tjänsten i <xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A?displayProperty=fullName>egenskapen för motsvarande installer klass.</xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A?displayProperty=fullName> I koden anges vanligtvis ServiceName för tjänsten i den `main()` funktionen för den körbara filen.       ServiceName används också för att ange den <xref:System.Diagnostics.EventLog.Source%2A?displayProperty=fullName>som är associerade med den <xref:System.ServiceProcess.ServiceBase.EventLog%2A>egenskapen.</xref:System.ServiceProcess.ServiceBase.EventLog%2A> </xref:System.Diagnostics.EventLog.Source%2A?displayProperty=fullName> Det här <xref:System.ServiceProcess.ServiceBase.EventLog%2A>är en instans som skriver kommandot tjänstinformation till programmets.</xref:System.ServiceProcess.ServiceBase.EventLog%2A>       Tjänstnamn, som ger Källsträngen för händelseloggen måste anges innan tjänsten skrivs till händelseloggen. Försöker få åtkomst till händelseloggen innan källnamnet anges gör ett undantagsfel."
  syntax:
    content: public string ServiceName { get; set; }
    return:
      type: System.String
      description: "Namnet på tjänsten."
  overload: System.ServiceProcess.ServiceBase.ServiceName*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Tjänsten har redan startats. Egenskapen ServiceName kan inte ändras när tjänsten har startats."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Det angivna namnet är en tom sträng eller längre än <xref href=&quot;System.ServiceProcess.ServiceBase.MaxNameLength&quot;> </xref>, eller det angivna namnet innehåller vidarebefordra snedstreck eller omvänt snedstreck tecken."
  platform:
  - net462
- uid: System.ServiceProcess.ServiceBase.Stop
  id: Stop
  parent: System.ServiceProcess.ServiceBase
  langs:
  - csharp
  name: Stop()
  nameWithType: ServiceBase.Stop()
  fullName: System.ServiceProcess.ServiceBase.Stop()
  type: Method
  assemblies:
  - System.ServiceProcess
  namespace: System.ServiceProcess
  summary: "Stoppar tjänsten körs."
  remarks: "Stop-metoden anger tillstånd att indikera ett stopp väntar och anrop i <xref:System.ServiceProcess.ServiceBase.OnStop%2A>metod.</xref:System.ServiceProcess.ServiceBase.OnStop%2A>  Tjänstens tillstånd anges till stoppad när programmet har stoppats. Om programmet är en värdbaserad tjänst, tas programdomänen bort."
  syntax:
    content: public void Stop ();
    parameters: []
  overload: System.ServiceProcess.ServiceBase.Stop*
  exceptions: []
  platform:
  - net462
references:
- uid: System.ComponentModel.Component
  isExternal: false
  name: System.ComponentModel.Component
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.ServiceProcess.ServiceBase.#ctor
  parent: System.ServiceProcess.ServiceBase
  isExternal: false
  name: ServiceBase()
  nameWithType: ServiceBase.ServiceBase()
  fullName: System.ServiceProcess.ServiceBase.ServiceBase()
- uid: System.ServiceProcess.ServiceBase.AutoLog
  parent: System.ServiceProcess.ServiceBase
  isExternal: false
  name: AutoLog
  nameWithType: ServiceBase.AutoLog
  fullName: System.ServiceProcess.ServiceBase.AutoLog
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.ServiceProcess.ServiceBase.CanHandlePowerEvent
  parent: System.ServiceProcess.ServiceBase
  isExternal: false
  name: CanHandlePowerEvent
  nameWithType: ServiceBase.CanHandlePowerEvent
  fullName: System.ServiceProcess.ServiceBase.CanHandlePowerEvent
- uid: System.ServiceProcess.ServiceBase.CanHandleSessionChangeEvent
  parent: System.ServiceProcess.ServiceBase
  isExternal: false
  name: CanHandleSessionChangeEvent
  nameWithType: ServiceBase.CanHandleSessionChangeEvent
  fullName: System.ServiceProcess.ServiceBase.CanHandleSessionChangeEvent
- uid: System.ServiceProcess.ServiceBase.CanPauseAndContinue
  parent: System.ServiceProcess.ServiceBase
  isExternal: false
  name: CanPauseAndContinue
  nameWithType: ServiceBase.CanPauseAndContinue
  fullName: System.ServiceProcess.ServiceBase.CanPauseAndContinue
- uid: System.ServiceProcess.ServiceBase.CanShutdown
  parent: System.ServiceProcess.ServiceBase
  isExternal: false
  name: CanShutdown
  nameWithType: ServiceBase.CanShutdown
  fullName: System.ServiceProcess.ServiceBase.CanShutdown
- uid: System.ServiceProcess.ServiceBase.CanStop
  parent: System.ServiceProcess.ServiceBase
  isExternal: false
  name: CanStop
  nameWithType: ServiceBase.CanStop
  fullName: System.ServiceProcess.ServiceBase.CanStop
- uid: System.ServiceProcess.ServiceBase.Dispose(System.Boolean)
  parent: System.ServiceProcess.ServiceBase
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: ServiceBase.Dispose(Boolean)
  fullName: System.ServiceProcess.ServiceBase.Dispose(Boolean)
- uid: System.ServiceProcess.ServiceBase.EventLog
  parent: System.ServiceProcess.ServiceBase
  isExternal: false
  name: EventLog
  nameWithType: ServiceBase.EventLog
  fullName: System.ServiceProcess.ServiceBase.EventLog
- uid: System.Diagnostics.EventLog
  parent: System.Diagnostics
  isExternal: false
  name: EventLog
  nameWithType: EventLog
  fullName: System.Diagnostics.EventLog
- uid: System.ServiceProcess.ServiceBase.ExitCode
  parent: System.ServiceProcess.ServiceBase
  isExternal: false
  name: ExitCode
  nameWithType: ServiceBase.ExitCode
  fullName: System.ServiceProcess.ServiceBase.ExitCode
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.ServiceProcess.ServiceBase.MaxNameLength
  parent: System.ServiceProcess.ServiceBase
  isExternal: false
  name: MaxNameLength
  nameWithType: ServiceBase.MaxNameLength
  fullName: System.ServiceProcess.ServiceBase.MaxNameLength
- uid: System.ServiceProcess.ServiceBase.OnContinue
  parent: System.ServiceProcess.ServiceBase
  isExternal: false
  name: OnContinue()
  nameWithType: ServiceBase.OnContinue()
  fullName: System.ServiceProcess.ServiceBase.OnContinue()
- uid: System.ServiceProcess.ServiceBase.OnCustomCommand(System.Int32)
  parent: System.ServiceProcess.ServiceBase
  isExternal: false
  name: OnCustomCommand(Int32)
  nameWithType: ServiceBase.OnCustomCommand(Int32)
  fullName: System.ServiceProcess.ServiceBase.OnCustomCommand(Int32)
- uid: System.ServiceProcess.ServiceBase.OnPause
  parent: System.ServiceProcess.ServiceBase
  isExternal: false
  name: OnPause()
  nameWithType: ServiceBase.OnPause()
  fullName: System.ServiceProcess.ServiceBase.OnPause()
- uid: System.ServiceProcess.ServiceBase.OnPowerEvent(System.ServiceProcess.PowerBroadcastStatus)
  parent: System.ServiceProcess.ServiceBase
  isExternal: false
  name: OnPowerEvent(PowerBroadcastStatus)
  nameWithType: ServiceBase.OnPowerEvent(PowerBroadcastStatus)
  fullName: System.ServiceProcess.ServiceBase.OnPowerEvent(PowerBroadcastStatus)
- uid: System.ServiceProcess.PowerBroadcastStatus
  parent: System.ServiceProcess
  isExternal: false
  name: PowerBroadcastStatus
  nameWithType: PowerBroadcastStatus
  fullName: System.ServiceProcess.PowerBroadcastStatus
- uid: System.ServiceProcess.ServiceBase.OnSessionChange(System.ServiceProcess.SessionChangeDescription)
  parent: System.ServiceProcess.ServiceBase
  isExternal: false
  name: OnSessionChange(SessionChangeDescription)
  nameWithType: ServiceBase.OnSessionChange(SessionChangeDescription)
  fullName: System.ServiceProcess.ServiceBase.OnSessionChange(SessionChangeDescription)
- uid: System.ServiceProcess.SessionChangeDescription
  parent: System.ServiceProcess
  isExternal: false
  name: SessionChangeDescription
  nameWithType: SessionChangeDescription
  fullName: System.ServiceProcess.SessionChangeDescription
- uid: System.ServiceProcess.ServiceBase.OnShutdown
  parent: System.ServiceProcess.ServiceBase
  isExternal: false
  name: OnShutdown()
  nameWithType: ServiceBase.OnShutdown()
  fullName: System.ServiceProcess.ServiceBase.OnShutdown()
- uid: System.ServiceProcess.ServiceBase.OnStart(System.String[])
  parent: System.ServiceProcess.ServiceBase
  isExternal: false
  name: OnStart(String[])
  nameWithType: ServiceBase.OnStart(String[])
  fullName: System.ServiceProcess.ServiceBase.OnStart(String[])
- uid: System.String[]
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String[]
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.ServiceProcess.ServiceBase.OnStop
  parent: System.ServiceProcess.ServiceBase
  isExternal: false
  name: OnStop()
  nameWithType: ServiceBase.OnStop()
  fullName: System.ServiceProcess.ServiceBase.OnStop()
- uid: System.ServiceProcess.ServiceBase.RequestAdditionalTime(System.Int32)
  parent: System.ServiceProcess.ServiceBase
  isExternal: false
  name: RequestAdditionalTime(Int32)
  nameWithType: ServiceBase.RequestAdditionalTime(Int32)
  fullName: System.ServiceProcess.ServiceBase.RequestAdditionalTime(Int32)
- uid: System.ServiceProcess.ServiceBase.Run(System.ServiceProcess.ServiceBase)
  parent: System.ServiceProcess.ServiceBase
  isExternal: false
  name: Run(ServiceBase)
  nameWithType: ServiceBase.Run(ServiceBase)
  fullName: System.ServiceProcess.ServiceBase.Run(ServiceBase)
- uid: System.ServiceProcess.ServiceBase
  parent: System.ServiceProcess
  isExternal: false
  name: ServiceBase
  nameWithType: ServiceBase
  fullName: System.ServiceProcess.ServiceBase
- uid: System.ServiceProcess.ServiceBase.Run(System.ServiceProcess.ServiceBase[])
  parent: System.ServiceProcess.ServiceBase
  isExternal: false
  name: Run(ServiceBase[])
  nameWithType: ServiceBase.Run(ServiceBase[])
  fullName: System.ServiceProcess.ServiceBase.Run(ServiceBase[])
- uid: System.ServiceProcess.ServiceBase[]
  parent: System.ServiceProcess
  isExternal: false
  name: ServiceBase
  nameWithType: ServiceBase
  fullName: System.ServiceProcess.ServiceBase[]
  spec.csharp:
  - uid: System.ServiceProcess.ServiceBase
    name: ServiceBase
    nameWithType: ServiceBase
    fullName: ServiceBase[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.ServiceProcess.ServiceBase.ServiceHandle
  parent: System.ServiceProcess.ServiceBase
  isExternal: false
  name: ServiceHandle
  nameWithType: ServiceBase.ServiceHandle
  fullName: System.ServiceProcess.ServiceBase.ServiceHandle
- uid: System.IntPtr
  parent: System
  isExternal: true
  name: IntPtr
  nameWithType: IntPtr
  fullName: System.IntPtr
- uid: System.ServiceProcess.ServiceBase.ServiceMainCallback(System.Int32,System.IntPtr)
  parent: System.ServiceProcess.ServiceBase
  isExternal: false
  name: ServiceMainCallback(Int32,IntPtr)
  nameWithType: ServiceBase.ServiceMainCallback(Int32,IntPtr)
  fullName: System.ServiceProcess.ServiceBase.ServiceMainCallback(Int32,IntPtr)
- uid: System.ServiceProcess.ServiceBase.ServiceName
  parent: System.ServiceProcess.ServiceBase
  isExternal: false
  name: ServiceName
  nameWithType: ServiceBase.ServiceName
  fullName: System.ServiceProcess.ServiceBase.ServiceName
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.ServiceProcess.ServiceBase.Stop
  parent: System.ServiceProcess.ServiceBase
  isExternal: false
  name: Stop()
  nameWithType: ServiceBase.Stop()
  fullName: System.ServiceProcess.ServiceBase.Stop()
- uid: System.ServiceProcess.ServiceBase.#ctor*
  parent: System.ServiceProcess.ServiceBase
  isExternal: false
  name: ServiceBase
  nameWithType: ServiceBase.ServiceBase
- uid: System.ServiceProcess.ServiceBase.AutoLog*
  parent: System.ServiceProcess.ServiceBase
  isExternal: false
  name: AutoLog
  nameWithType: ServiceBase.AutoLog
- uid: System.ServiceProcess.ServiceBase.CanHandlePowerEvent*
  parent: System.ServiceProcess.ServiceBase
  isExternal: false
  name: CanHandlePowerEvent
  nameWithType: ServiceBase.CanHandlePowerEvent
- uid: System.ServiceProcess.ServiceBase.CanHandleSessionChangeEvent*
  parent: System.ServiceProcess.ServiceBase
  isExternal: false
  name: CanHandleSessionChangeEvent
  nameWithType: ServiceBase.CanHandleSessionChangeEvent
- uid: System.ServiceProcess.ServiceBase.CanPauseAndContinue*
  parent: System.ServiceProcess.ServiceBase
  isExternal: false
  name: CanPauseAndContinue
  nameWithType: ServiceBase.CanPauseAndContinue
- uid: System.ServiceProcess.ServiceBase.CanShutdown*
  parent: System.ServiceProcess.ServiceBase
  isExternal: false
  name: CanShutdown
  nameWithType: ServiceBase.CanShutdown
- uid: System.ServiceProcess.ServiceBase.CanStop*
  parent: System.ServiceProcess.ServiceBase
  isExternal: false
  name: CanStop
  nameWithType: ServiceBase.CanStop
- uid: System.ServiceProcess.ServiceBase.Dispose*
  parent: System.ServiceProcess.ServiceBase
  isExternal: false
  name: Dispose
  nameWithType: ServiceBase.Dispose
- uid: System.ServiceProcess.ServiceBase.EventLog*
  parent: System.ServiceProcess.ServiceBase
  isExternal: false
  name: EventLog
  nameWithType: ServiceBase.EventLog
- uid: System.ServiceProcess.ServiceBase.ExitCode*
  parent: System.ServiceProcess.ServiceBase
  isExternal: false
  name: ExitCode
  nameWithType: ServiceBase.ExitCode
- uid: System.ServiceProcess.ServiceBase.OnContinue*
  parent: System.ServiceProcess.ServiceBase
  isExternal: false
  name: OnContinue
  nameWithType: ServiceBase.OnContinue
- uid: System.ServiceProcess.ServiceBase.OnCustomCommand*
  parent: System.ServiceProcess.ServiceBase
  isExternal: false
  name: OnCustomCommand
  nameWithType: ServiceBase.OnCustomCommand
- uid: System.ServiceProcess.ServiceBase.OnPause*
  parent: System.ServiceProcess.ServiceBase
  isExternal: false
  name: OnPause
  nameWithType: ServiceBase.OnPause
- uid: System.ServiceProcess.ServiceBase.OnPowerEvent*
  parent: System.ServiceProcess.ServiceBase
  isExternal: false
  name: OnPowerEvent
  nameWithType: ServiceBase.OnPowerEvent
- uid: System.ServiceProcess.ServiceBase.OnSessionChange*
  parent: System.ServiceProcess.ServiceBase
  isExternal: false
  name: OnSessionChange
  nameWithType: ServiceBase.OnSessionChange
- uid: System.ServiceProcess.ServiceBase.OnShutdown*
  parent: System.ServiceProcess.ServiceBase
  isExternal: false
  name: OnShutdown
  nameWithType: ServiceBase.OnShutdown
- uid: System.ServiceProcess.ServiceBase.OnStart*
  parent: System.ServiceProcess.ServiceBase
  isExternal: false
  name: OnStart
  nameWithType: ServiceBase.OnStart
- uid: System.ServiceProcess.ServiceBase.OnStop*
  parent: System.ServiceProcess.ServiceBase
  isExternal: false
  name: OnStop
  nameWithType: ServiceBase.OnStop
- uid: System.ServiceProcess.ServiceBase.RequestAdditionalTime*
  parent: System.ServiceProcess.ServiceBase
  isExternal: false
  name: RequestAdditionalTime
  nameWithType: ServiceBase.RequestAdditionalTime
- uid: System.ServiceProcess.ServiceBase.Run*
  parent: System.ServiceProcess.ServiceBase
  isExternal: false
  name: Run
  nameWithType: ServiceBase.Run
- uid: System.ServiceProcess.ServiceBase.ServiceHandle*
  parent: System.ServiceProcess.ServiceBase
  isExternal: false
  name: ServiceHandle
  nameWithType: ServiceBase.ServiceHandle
- uid: System.ServiceProcess.ServiceBase.ServiceMainCallback*
  parent: System.ServiceProcess.ServiceBase
  isExternal: false
  name: ServiceMainCallback
  nameWithType: ServiceBase.ServiceMainCallback
- uid: System.ServiceProcess.ServiceBase.ServiceName*
  parent: System.ServiceProcess.ServiceBase
  isExternal: false
  name: ServiceName
  nameWithType: ServiceBase.ServiceName
- uid: System.ServiceProcess.ServiceBase.Stop*
  parent: System.ServiceProcess.ServiceBase
  isExternal: false
  name: Stop
  nameWithType: ServiceBase.Stop
