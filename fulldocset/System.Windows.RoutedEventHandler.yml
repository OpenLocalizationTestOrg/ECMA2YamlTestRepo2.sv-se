### YamlMime:ManagedReference
items:
- uid: System.Windows.RoutedEventHandler
  id: RoutedEventHandler
  langs:
  - csharp
  name: RoutedEventHandler
  nameWithType: RoutedEventHandler
  fullName: System.Windows.RoutedEventHandler
  type: Delegate
  summary: "Representerar den metod som ska hantera olika dirigerade händelser som inte har specifika händelsedata utöver de data som är gemensamma för alla dirigerade händelser."
  remarks: "Delegaten RoutedEventHandler används för dirigerade händelser som inte rapporterar händelse-specifik information i informationen om händelsen. Det finns många sådana dirigerade händelser; framträdande exempel <xref:System.Windows.Controls.Primitives.ButtonBase.Click>och <xref:System.Windows.FrameworkElement.Loaded>.</xref:System.Windows.FrameworkElement.Loaded> </xref:System.Windows.Controls.Primitives.ButtonBase.Click>       Mest anmärkningsvärda skillnaden mellan en hanterare för en dirigeras till skillnad från en allmän [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] händelse är att den `sender` för händelse (elementet där hanteraren är ansluten och anropas) kan inte anses vara nödvändigtvis källan för händelsen. Källan rapporteras som en egenskap i informationen om händelsen (<xref:System.Windows.RoutedEventArgs.Source%2A>).</xref:System.Windows.RoutedEventArgs.Source%2A> Skillnad mellan `sender`och <xref:System.Windows.RoutedEventArgs.Source%2A>är resultatet av händelsen dirigeras till olika element under iterering av händelsen dirigeras via ett element-träd.</xref:System.Windows.RoutedEventArgs.Source%2A>       Du kan använda antingen `sender` eller <xref:System.Windows.RoutedEventArgs.Source%2A>för ett objekt referens om du avsiktligt inte är intresserad av Routning beteendet för en direkt eller genomströmning routade händelse och du tänker hantera dirigerade händelser på elementen där de aktiveras först.</xref:System.Windows.RoutedEventArgs.Source%2A> I en sådan situation `sender` och <xref:System.Windows.RoutedEventArgs.Source%2A>är samma objekt.</xref:System.Windows.RoutedEventArgs.Source%2A>       Om du vill dra nytta av de inbyggda funktionerna i dirigerade händelser och därefter skriva din hanterare, är de två viktigaste egenskaperna i händelsedata som du ska arbeta med när du skriver händelsehanterare <xref:System.Windows.RoutedEventArgs.Source%2A>och <xref:System.Windows.RoutedEventArgs.Handled%2A>.</xref:System.Windows.RoutedEventArgs.Handled%2A> </xref:System.Windows.RoutedEventArgs.Source%2A>       För vissa kombinationer av inkommande händelser och [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)] kontrollen klasser, elementet som aktiverar händelsen är inte första elementet som har möjlighet att hantera den. Om inkommande händelsen har en förhandsversion av händelsen, sedan roten i trädet element har första möjligheten kan ange <xref:System.Windows.RoutedEventArgs.Handled%2A>till `true` i den delade händelsedata och kan påverka hur indatahändelsen rapporteras till resten av elementen i händelsen vägen.</xref:System.Windows.RoutedEventArgs.Handled%2A> Förhandsgranska hantering beteende kan ge effekten av att en viss routade händelse inte är aktiveras som förväntat. Mer information finns i [Förhandsgranskningshändelserna](~/add/includes/ajax-current-ext-md.md) och [indata översikt](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public delegate void RoutedEventHandler(object sender, RoutedEventArgs e);
  inheritance:
  - System.Delegate
  platform:
  - net462
references:
- uid: System.Delegate
  isExternal: false
  name: System.Delegate
