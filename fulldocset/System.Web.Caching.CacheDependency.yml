### YamlMime:ManagedReference
items:
- uid: System.Web.Caching.CacheDependency
  id: CacheDependency
  children:
  - System.Web.Caching.CacheDependency.#ctor
  - System.Web.Caching.CacheDependency.#ctor(System.String)
  - System.Web.Caching.CacheDependency.#ctor(System.String[])
  - System.Web.Caching.CacheDependency.#ctor(System.String,System.DateTime)
  - System.Web.Caching.CacheDependency.#ctor(System.String[],System.DateTime)
  - System.Web.Caching.CacheDependency.#ctor(System.String[],System.String[])
  - System.Web.Caching.CacheDependency.#ctor(System.String[],System.String[],System.DateTime)
  - System.Web.Caching.CacheDependency.#ctor(System.String[],System.String[],System.Web.Caching.CacheDependency)
  - System.Web.Caching.CacheDependency.#ctor(System.String[],System.String[],System.Web.Caching.CacheDependency,System.DateTime)
  - System.Web.Caching.CacheDependency.DependencyDispose
  - System.Web.Caching.CacheDependency.Dispose
  - System.Web.Caching.CacheDependency.FinishInit
  - System.Web.Caching.CacheDependency.GetFileDependencies
  - System.Web.Caching.CacheDependency.GetUniqueID
  - System.Web.Caching.CacheDependency.HasChanged
  - System.Web.Caching.CacheDependency.NotifyDependencyChanged(System.Object,System.EventArgs)
  - System.Web.Caching.CacheDependency.SetUtcLastModified(System.DateTime)
  - System.Web.Caching.CacheDependency.UtcLastModified
  langs:
  - csharp
  name: CacheDependency
  nameWithType: CacheDependency
  fullName: System.Web.Caching.CacheDependency
  type: Class
  summary: "Upprättar en beroenderelationen mellan ett objekt som lagras i ett ASP.NET-program <xref href=&quot;System.Web.Caching.Cache&quot;> </xref> objekt och en fil, cachenyckel, en matris med antingen eller en annan CacheDependency-objekt. Klassen CacheDependency övervakar beroenden så att när någon av dem ändras det cachelagra objektet tas automatiskt bort."
  remarks: "Om du lägger till ett objekt i cacheminnet som är beroende av ett annat objekt, till exempel en fil eller en matris med filer, är det beroende objektet automatiskt bort från cachen när objektet ändras. Anta att du skapar en <xref:System.Data.DataSet>objekt baserat på data i en XML-fil.</xref:System.Data.DataSet> Du kan lägga till den <xref:System.Data.DataSet>i cachen med ett CacheDependency-objekt som gör det <xref:System.Data.DataSet>beroende på XML-filen.</xref:System.Data.DataSet> </xref:System.Data.DataSet> Om XML-filen ändras, den <xref:System.Data.DataSet>tas bort från cachen.</xref:System.Data.DataSet>       Du kan lägga till objekt med beroenden i cachen för ditt program med den <xref:System.Web.Caching.Cache.Add%2A>och <xref:System.Web.Caching.Cache.Insert%2A?displayProperty=fullName>metoder.</xref:System.Web.Caching.Cache.Insert%2A?displayProperty=fullName> </xref:System.Web.Caching.Cache.Add%2A> Du kan inte använda den <xref:System.Web.Caching.Cache.Item%2A>egenskapen att lägga till objekt till cache med beroenden.</xref:System.Web.Caching.Cache.Item%2A>       Om du vill konfigurera ett beroende, skapa en instans av klassen CacheDependency ange filer, nycklar eller kataloger som objektet är beroende och skicka beroende till den <xref:System.Web.Caching.Cache.Add%2A>eller <xref:System.Web.Caching.Cache.Insert%2A?displayProperty=fullName>metod.</xref:System.Web.Caching.Cache.Insert%2A?displayProperty=fullName> </xref:System.Web.Caching.Cache.Add%2A> CacheDependency-instans kan representera en fil eller katalog, en matris av filer och kataloger eller en matris av filer och kataloger tillsammans med en matris av cache-nycklar (dessa motsvarar andra objekt som lagras i den <xref:System.Web.Caching.Cache>objekt).</xref:System.Web.Caching.Cache>"
  example:
  - "The following code example demonstrates using the <xref:System.Web.Caching.CacheDependency.HasChanged%2A> property to determine whether a CacheDependency changed since the previous request for an item in the <xref:System.Web.Caching.Cache>. The `dt` value passed in the `start` parameter is set to <xref:System.DateTime.Now%2A?displayProperty=fullName>.  \n  \n [!code-vb[System.Web.Caching.CacheDependency_HasChanged#1](~/add/codesnippet/visualbasic/t-system.web.caching.cac_3_1.aspx)]\n [!code-cs[System.Web.Caching.CacheDependency_HasChanged#1](~/add/codesnippet/csharp/t-system.web.caching.cac_3_1.aspx)]"
  syntax:
    content: 'public class CacheDependency : IDisposable'
  inheritance:
  - System.Object
  implements:
  - System.IDisposable
  inheritedMembers: []
  platform:
  - net462
- uid: System.Web.Caching.CacheDependency.#ctor
  id: '#ctor'
  parent: System.Web.Caching.CacheDependency
  langs:
  - csharp
  name: CacheDependency()
  nameWithType: CacheDependency.CacheDependency()
  fullName: System.Web.Caching.CacheDependency.CacheDependency()
  type: Constructor
  assemblies:
  - System.Web
  namespace: System.Web.Caching
  summary: "Initierar en ny instans av den <xref href=&quot;System.Web.Caching.CacheDependency&quot;> </xref> klass."
  remarks: "Om du vill ha en egen klass från <xref:System.Web.Caching.CacheDependency>, implementera den här versionen av CacheDependency-konstruktorn.</xref:System.Web.Caching.CacheDependency>"
  example:
  - "The following code example is a class that implements this version of the <xref:System.Web.Caching.CacheDependency> constructor as all classes that derive from <xref:System.Web.Caching.CacheDependency> are required to.  \n  \n [!code-vb[CacheDependency_Whidbey_Example1#1](~/add/codesnippet/visualbasic/m-system.web.caching.cac_2_1.vb)]"
  syntax:
    content: protected CacheDependency ();
    parameters: []
  overload: System.Web.Caching.CacheDependency.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Caching.CacheDependency.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: System.Web.Caching.CacheDependency
  langs:
  - csharp
  name: CacheDependency(String)
  nameWithType: CacheDependency.CacheDependency(String)
  fullName: System.Web.Caching.CacheDependency.CacheDependency(String)
  type: Constructor
  assemblies:
  - System.Web
  namespace: System.Web.Caching
  summary: "Initierar en ny instans av den <xref href=&quot;System.Web.Caching.CacheDependency&quot;> </xref> klass som övervakar en fil eller katalog för ändringar."
  remarks: "If the directory or file specified in the `filename` parameter is not found in the file system, it will be treated as missing. If the directory or file is missing when the object with the dependency is added to the <xref:System.Web.Caching.Cache>, the cached object will be removed from the <xref:System.Web.Caching.Cache> when the directory or file is created.  \n  \n For example, assume that you add an object to the <xref:System.Web.Caching.Cache> with a dependency on the following file path: c:\\stocks\\xyz.dat. If that file is not found when the <xref:System.Web.Caching.CacheDependency> object is created, but is created later, the cached object is removed upon the creation of the xyz.dat file."
  example:
  - "The following code example creates an instance of the <xref:System.Web.Caching.CacheDependency> class with a dependency on an XML file. The <xref:System.Web.Caching.Cache.Insert%2A?displayProperty=fullName> method then adds an item to the <xref:System.Web.Caching.Cache> that is dependent upon that file.  \n  \n [!code-vb[Classic CacheDependency.CacheDependency Example#1](~/add/codesnippet/visualbasic/m-system.web.caching.cac_5_1.vb)]\n [!code-cs[Classic CacheDependency.CacheDependency Example#1](~/add/codesnippet/csharp/m-system.web.caching.cac_5_1.cs)]  \n  \n You can also use the following technique to add an item to the <xref:System.Web.Caching.Cache> with a dependency on a file.  \n  \n [!code-cs[Single File Dependency Cache entry#1](~/add/codesnippet/csharp/m-system.web.caching.cac_5_2.aspx)]\n [!code-vb[Single File Dependency Cache entry#1](~/add/codesnippet/visualbasic/m-system.web.caching.cac_5_2.aspx)]"
  syntax:
    content: public CacheDependency (string filename);
    parameters:
    - id: filename
      type: System.String
      description: "Sökvägen till en fil eller katalog som cachelagrade objekt är beroende av. När den här resursen ändras det cachelagrade objektet blir inaktuella och tas bort från cachen."
  overload: System.Web.Caching.CacheDependency.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Caching.CacheDependency.#ctor(System.String[])
  id: '#ctor(System.String[])'
  parent: System.Web.Caching.CacheDependency
  langs:
  - csharp
  name: CacheDependency(String[])
  nameWithType: CacheDependency.CacheDependency(String[])
  fullName: System.Web.Caching.CacheDependency.CacheDependency(String[])
  type: Constructor
  assemblies:
  - System.Web
  namespace: System.Web.Caching
  summary: "Initierar en ny instans av den <xref href=&quot;System.Web.Caching.CacheDependency&quot;> </xref> klass som övervakar en matris med-sökvägar (till filer eller kataloger) för ändringar."
  remarks: "If any of the files or directories in the array changes or is removed from the array, the cached item becomes obsolete and is removed from the application's <xref:System.Web.Caching.Cache> object.  \n  \n Also, if any of the directories or files specified in the `filenames` parameter is not found in the file system, it is treated as missing. If a directory or file is missing when the object with the dependency is added to the <xref:System.Web.Caching.Cache>, the cached object will be removed from the <xref:System.Web.Caching.Cache> when that directory or file is created.  \n  \n For example, assume that you add an object to the <xref:System.Web.Caching.Cache> with a dependency on the following file path: c:\\stocks\\xyz.dat. If that file is not found when the <xref:System.Web.Caching.CacheDependency> object is created, but is created later, the cached object is removed upon the creation of the xyz.dat file.  \n  \n> [!NOTE]\n>  When you create the array that contains the file dependencies, you must define the number of files that the item you are adding to the <xref:System.Web.Caching.Cache> is dependent on."
  example:
  - "The following code example demonstrates how to use the <xref:System.Web.Caching.Cache.Insert%2A?displayProperty=fullName> method to add an item to the <xref:System.Web.Caching.Cache> with dependencies on an array of files. You can also make the item dependent on an array of directories.  \n  \n [!code-vb[Multiple file based dependency#1](~/add/codesnippet/visualbasic/m-system.web.caching.cac_12_1.aspx)]\n [!code-cs[Multiple file based dependency#1](~/add/codesnippet/csharp/m-system.web.caching.cac_12_1.aspx)]"
  syntax:
    content: public CacheDependency (string[] filenames);
    parameters:
    - id: filenames
      type: System.String[]
      description: "En matris med sökvägar (till filer eller kataloger) som cachelagrade objekt är beroende av. När något av dessa resurser ändringar, det cachelagrade objektet blir inaktuella och tas bort från cachen."
  overload: System.Web.Caching.CacheDependency.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Caching.CacheDependency.#ctor(System.String,System.DateTime)
  id: '#ctor(System.String,System.DateTime)'
  parent: System.Web.Caching.CacheDependency
  langs:
  - csharp
  name: CacheDependency(String,DateTime)
  nameWithType: CacheDependency.CacheDependency(String,DateTime)
  fullName: System.Web.Caching.CacheDependency.CacheDependency(String,DateTime)
  type: Constructor
  assemblies:
  - System.Web
  namespace: System.Web.Caching
  summary: "Initierar en ny instans av den <xref href=&quot;System.Web.Caching.CacheDependency&quot;> </xref> klass som övervakar en fil eller katalog för ändringar."
  remarks: "If the directory or file specified in the `filename` parameter is not found in the file system, it will be treated as missing. If the directory or file is missing when the object with the dependency is added to the <xref:System.Web.Caching.Cache>, the cached object will be removed from the <xref:System.Web.Caching.Cache> when the directory or file is created.  \n  \n For example, assume that you add an object to the <xref:System.Web.Caching.Cache> with a dependency on the following file path: c:\\stocks\\xyz.dat. If that file is not found when the <xref:System.Web.Caching.CacheDependency> object is created, but is created later, the cached object is removed upon the creation of the xyz.dat file.  \n  \n> [!NOTE]\n>  Change tracking begins immediately and is not directly based on the `start` parameter. Use the `start` parameter to pass a date and time in the past against which you want to check the last modified date of the directory or file passed in the `filename` parameter. If the last modified date is later than the date and time set passed in the `start` parameter, the cached item is removed from the <xref:System.Web.Caching.Cache>."
  example:
  - "The following code example uses this constructor to instantiate a <xref:System.Web.Caching.CacheDependency> object, then inserts an item into the <xref:System.Web.Caching.Cache> with that dependency. The `dt` value passed in the `start` parameter is set to <xref:System.DateTime.Now%2A?displayProperty=fullName>.  \n  \n [!code-vb[System.Web.Caching.CacheDependency_HasChanged#1](~/add/codesnippet/visualbasic/m-system.web.caching.cac_0_1.aspx)]\n [!code-cs[System.Web.Caching.CacheDependency_HasChanged#1](~/add/codesnippet/csharp/m-system.web.caching.cac_0_1.aspx)]"
  syntax:
    content: public CacheDependency (string filename, DateTime start);
    parameters:
    - id: filename
      type: System.String
      description: "Sökvägen till en fil eller katalog som cachelagrade objekt är beroende av. När den här resursen ändras det cachelagrade objektet blir inaktuella och tas bort från cachen."
    - id: start
      type: System.DateTime
      description: "Den tid som ska kontrollera senaste ändringsdatum för katalogen eller filen mot."
  overload: System.Web.Caching.CacheDependency.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Caching.CacheDependency.#ctor(System.String[],System.DateTime)
  id: '#ctor(System.String[],System.DateTime)'
  parent: System.Web.Caching.CacheDependency
  langs:
  - csharp
  name: CacheDependency(String[],DateTime)
  nameWithType: CacheDependency.CacheDependency(String[],DateTime)
  fullName: System.Web.Caching.CacheDependency.CacheDependency(String[],DateTime)
  type: Constructor
  assemblies:
  - System.Web
  namespace: System.Web.Caching
  summary: "Initierar en ny instans av den <xref href=&quot;System.Web.Caching.CacheDependency&quot;> </xref> klass som övervakar en matris med-sökvägar (till filer eller kataloger) för ändringar och anger en tid då ändringen övervakning börjar."
  remarks: "If any of the directories or files specified in the `filenames` parameter is not found in the file system, it is treated as missing. If a directory or file is missing when the object with the dependency is added to the <xref:System.Web.Caching.Cache>, the cached object will be removed from the <xref:System.Web.Caching.Cache> when that directory or file is created.  \n  \n For example, assume that you add an object to the <xref:System.Web.Caching.Cache> with a dependency on the following file path: c:\\stocks\\xyz.dat. If that file is not found when the <xref:System.Web.Caching.CacheDependency> object is created, but is created later, the cached object is removed upon the creation of the xyz.dat file.  \n  \n> [!NOTE]\n>  Change tracking begins immediately and is not directly based on the `start` parameter. Use the `start` parameter to pass a date and time in the past against which you want to check the last modified date of the array passed in the `filenames` parameter. If the last modified date of any object in the array is later than the date and time set passed in the `start` parameter, the cached item is removed from the <xref:System.Web.Caching.Cache>."
  example:
  - "The following code example creates a <xref:System.Web.Caching.CacheDependency> object that passes two XML files and a <xref:System.DateTime.Now%2A?displayProperty=fullName> value when the object is included as a parameter argument in an <xref:System.Web.Caching.Cache.Insert%2A?displayProperty=fullName> method call.  \n  \n [!code-vb[CacheDependency Constructor4#1](~/add/codesnippet/visualbasic/m-system.web.caching.cac_10_1.aspx)]\n [!code-cs[CacheDependency Constructor4#1](~/add/codesnippet/csharp/m-system.web.caching.cac_10_1.aspx)]"
  syntax:
    content: public CacheDependency (string[] filenames, DateTime start);
    parameters:
    - id: filenames
      type: System.String[]
      description: "En matris med sökvägar (till filer eller kataloger) som cachelagrade objekt är beroende av. När något av dessa resurser ändringar, det cachelagrade objektet blir inaktuella och tas bort från cachen."
    - id: start
      type: System.DateTime
      description: "Den tid som ska kontrollera senaste ändringsdatum för objekt i matrisen mot."
  overload: System.Web.Caching.CacheDependency.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Caching.CacheDependency.#ctor(System.String[],System.String[])
  id: '#ctor(System.String[],System.String[])'
  parent: System.Web.Caching.CacheDependency
  langs:
  - csharp
  name: CacheDependency(String[],String[])
  nameWithType: CacheDependency.CacheDependency(String[],String[])
  fullName: System.Web.Caching.CacheDependency.CacheDependency(String[],String[])
  type: Constructor
  assemblies:
  - System.Web
  namespace: System.Web.Caching
  summary: "Initierar en ny instans av den <xref href=&quot;System.Web.Caching.CacheDependency&quot;> </xref> klass som övervakar en matris med-sökvägar (till filer eller kataloger), en matris av cache-nycklar eller båda för ändringar."
  remarks: "Also, if any of the directories or files specified in the `filenames` parameter is not found in the file system, it is treated as missing. If a directory or file is missing when the object with the dependency is added to the <xref:System.Web.Caching.Cache>, the cached object will be removed from the <xref:System.Web.Caching.Cache> when that directory or file is created.  \n  \n For example, assume that you add an object to the <xref:System.Web.Caching.Cache> with a dependency on the following file path: c:\\stocks\\xyz.dat. If that file is not found when the <xref:System.Web.Caching.CacheDependency> object is created, but is created later, the cached object is removed upon the creation of the xyz.dat file."
  example:
  - "The following code fragment demonstrates how to insert an item into your application's <xref:System.Web.Caching.Cache> with a dependency on a key to another item placed in the cache. Since this method uses array syntax, you must define the number of keys on which the item you are adding to the <xref:System.Web.Caching.Cache> is dependent.  \n  \n [!code-vb[Key based dependency#1](~/add/codesnippet/visualbasic/m-system.web.caching.cac_11_1.aspx)]\n [!code-cs[Key based dependency#1](~/add/codesnippet/csharp/m-system.web.caching.cac_11_1.aspx)]"
  syntax:
    content: public CacheDependency (string[] filenames, string[] cachekeys);
    parameters:
    - id: filenames
      type: System.String[]
      description: "En matris med sökvägar (till filer eller kataloger) som cachelagrade objekt är beroende av. När något av dessa resurser ändringar, det cachelagrade objektet blir inaktuella och tas bort från cachen."
    - id: cachekeys
      type: System.String[]
      description: "En matris med cache nycklar som det nya objektet övervakar ändringar. När något av dessa ändringar för cache-nycklar, cachelagrade objekt som är associerade med detta beroendeobjekt blir inaktuella och tas bort från cachen."
  overload: System.Web.Caching.CacheDependency.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Caching.CacheDependency.#ctor(System.String[],System.String[],System.DateTime)
  id: '#ctor(System.String[],System.String[],System.DateTime)'
  parent: System.Web.Caching.CacheDependency
  langs:
  - csharp
  name: CacheDependency(String[],String[],DateTime)
  nameWithType: CacheDependency.CacheDependency(String[],String[],DateTime)
  fullName: System.Web.Caching.CacheDependency.CacheDependency(String[],String[],DateTime)
  type: Constructor
  assemblies:
  - System.Web
  namespace: System.Web.Caching
  summary: "Initierar en ny instans av den <xref href=&quot;System.Web.Caching.CacheDependency&quot;> </xref> klass som övervakar en matris med-sökvägar (till filer eller kataloger), en matris av cache-nycklar eller båda för ändringar."
  remarks: "Also, if any of the directories or files specified in the `filenames` parameter is not found in the file system, it is treated as missing. If a directory or file is missing when the object with the dependency is added to the <xref:System.Web.Caching.Cache>, the cached object will be removed from the <xref:System.Web.Caching.Cache> when that directory or file is created.  \n  \n For example, assume that you add an object to the <xref:System.Web.Caching.Cache> with a dependency on the following file path: c:\\stocks\\xyz.dat. If that file is not found when the <xref:System.Web.Caching.CacheDependency> object is created, but is created later, the cached object is removed upon the creation of the xyz.dat file.  \n  \n> [!NOTE]\n>  Change tracking begins immediately and is not directly based on the `start` parameter. Use the `start` parameter to pass a date and time in the past against which you want to check the last modified date of any object passed in the `filenames` or `cachekeys` parameters. If the last modified date of any of those objects is later than the date and time set passed in the `start` parameter, the cached item is removed from the <xref:System.Web.Caching.Cache>."
  example:
  - "The following code example creates a `CreateDependency` method. When this method is called, it creates a <xref:System.DateTime> object and the <xref:System.Web.Caching.Cache.Item%2A?displayProperty=fullName> property is used to add an item to the cache with a `key` parameter of `key1` and a value of `Value 1`. An array of strings, `dependencyKey`, is then created with the value of `key1` as well. This <xref:System.Web.Caching.CacheDependency> constructor then instantiates a <xref:System.Web.Caching.CacheDependency> object that passes `dependencyKey` and the <xref:System.DateTime> object as parameter arguments. The <xref:System.Web.Caching.Cache.Insert%2A?displayProperty=fullName> method is called next, using the <xref:System.Web.Caching.CacheDependency> object as a parameter. This makes the object added to the cache using the <xref:System.Web.Caching.Cache.Insert%2A> method dependent on the `key1` key.  \n  \n [!code-cs[CacheDependency Constructor6#1](~/add/codesnippet/csharp/8a673c60-cf9e-4171-bfff-_1.aspx)]\n [!code-vb[CacheDependency Constructor6#1](~/add/codesnippet/visualbasic/8a673c60-cf9e-4171-bfff-_1.aspx)]"
  syntax:
    content: public CacheDependency (string[] filenames, string[] cachekeys, DateTime start);
    parameters:
    - id: filenames
      type: System.String[]
      description: "En matris med sökvägar (till filer eller kataloger) som cachelagrade objekt är beroende av. När något av dessa resurser ändringar, det cachelagrade objektet blir inaktuella och tas bort från cachen."
    - id: cachekeys
      type: System.String[]
      description: "En matris med cache nycklar som det nya objektet övervakar ändringar. När något av dessa ändringar för cache-nycklar, cachelagrade objekt som är associerade med detta beroendeobjekt blir inaktuella och tas bort från cachen."
    - id: start
      type: System.DateTime
      description: "Datum och tid mot för kontroll av datum för senaste ändring av objekt som överförts i det `filenames` och `cachekeys` matriser."
  overload: System.Web.Caching.CacheDependency.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Caching.CacheDependency.#ctor(System.String[],System.String[],System.Web.Caching.CacheDependency)
  id: '#ctor(System.String[],System.String[],System.Web.Caching.CacheDependency)'
  parent: System.Web.Caching.CacheDependency
  langs:
  - csharp
  name: CacheDependency(String[],String[],CacheDependency)
  nameWithType: CacheDependency.CacheDependency(String[],String[],CacheDependency)
  fullName: System.Web.Caching.CacheDependency.CacheDependency(String[],String[],CacheDependency)
  type: Constructor
  assemblies:
  - System.Web
  namespace: System.Web.Caching
  summary: "Initierar en ny instans av den <xref href=&quot;System.Web.Caching.CacheDependency&quot;> </xref> klass som övervakar en matris med-sökvägar (till filer eller kataloger), en matris av cache-nycklar eller båda för ändringar. Gör det också själva beroende av en separat instans av den <xref href=&quot;System.Web.Caching.CacheDependency&quot;> </xref> klass."
  remarks: "Also, if any of the directories or files specified in the `filenames` parameter is not found in the file system, it is treated as missing. If a directory or file is missing when the object with the dependency is added to the <xref:System.Web.Caching.Cache>, the cached object will be removed from the <xref:System.Web.Caching.Cache> when that directory or file is created.  \n  \n For example, assume that you add an object to the <xref:System.Web.Caching.Cache> with a dependency on the following file path: c:\\stocks\\xyz.dat. If that file is not found when the <xref:System.Web.Caching.CacheDependency> object is created, but is created later, the cached object is removed upon the creation of the xyz.dat file."
  example:
  - "The following code example creates a `CreateDependency` method. When this method is called, it uses the <xref:System.Web.Caching.Cache.Item%2A?displayProperty=fullName> property to add an item to the cache with a `key` parameter of `key1` and a value of `Value 1`. An array of strings, `dependencyKey`, is then created with the value of `key1` as well. The <xref:System.Web.Caching.CacheDependency.%23ctor%2A?displayProperty=fullName> constructor is used to create a <xref:System.Web.Caching.CacheDependency> object, `dep1`, which passes `dependencyKey` as a parameter argument. A second <xref:System.Web.Caching.CacheDependency> object, `dep2`, is created using this constructor, with `dep1` passed as the third parameter argument. This second dependency is dependent on the first. The <xref:System.Web.Caching.Cache.Insert%2A?displayProperty=fullName> method is called next, using the second <xref:System.Web.Caching.CacheDependency> object as a parameter. If the first dependency changes in any way, the cached item will be invalidated.  \n  \n [!code-vb[CacheDependency Constructor7#1](~/add/codesnippet/visualbasic/e6e24549-1cfa-4cc8-9d48-_1.aspx)]\n [!code-cs[CacheDependency Constructor7#1](~/add/codesnippet/csharp/e6e24549-1cfa-4cc8-9d48-_1.aspx)]"
  syntax:
    content: public CacheDependency (string[] filenames, string[] cachekeys, System.Web.Caching.CacheDependency dependency);
    parameters:
    - id: filenames
      type: System.String[]
      description: "En matris med sökvägar (till filer eller kataloger) som cachelagrade objekt är beroende av. När något av dessa resurser ändringar, det cachelagrade objektet blir inaktuella och tas bort från cachen."
    - id: cachekeys
      type: System.String[]
      description: "En matris med cache nycklar som det nya objektet övervakar ändringar. När något av dessa ändringar för cache-nycklar, cachelagrade objekt som är associerade med detta beroendeobjekt blir inaktuella och tas bort från cachen."
    - id: dependency
      type: System.Web.Caching.CacheDependency
      description: "En annan instans av den <xref href=&quot;System.Web.Caching.CacheDependency&quot;> </xref> klass som den här instansen är beroende av."
  overload: System.Web.Caching.CacheDependency.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Caching.CacheDependency.#ctor(System.String[],System.String[],System.Web.Caching.CacheDependency,System.DateTime)
  id: '#ctor(System.String[],System.String[],System.Web.Caching.CacheDependency,System.DateTime)'
  parent: System.Web.Caching.CacheDependency
  langs:
  - csharp
  name: CacheDependency(String[],String[],CacheDependency,DateTime)
  nameWithType: CacheDependency.CacheDependency(String[],String[],CacheDependency,DateTime)
  fullName: System.Web.Caching.CacheDependency.CacheDependency(String[],String[],CacheDependency,DateTime)
  type: Constructor
  assemblies:
  - System.Web
  namespace: System.Web.Caching
  summary: "Initierar en ny instans av den <xref href=&quot;System.Web.Caching.CacheDependency&quot;> </xref> klass som övervakar en matris med-sökvägar (till filer eller kataloger), en matris av cache-nycklar eller båda för ändringar. Gör det också själva beroende av en annan instans av den <xref href=&quot;System.Web.Caching.CacheDependency&quot;> </xref> klass och tid då ändringen övervakningen börjar."
  remarks: "Also, if any of the directories or files specified in the `filenames` parameter is not found in the file system, it is treated as missing. If a directory or file is missing when the object with the dependency is added to the <xref:System.Web.Caching.Cache>, the cached object will be removed from the <xref:System.Web.Caching.Cache> when that directory or file is created.  \n  \n For example, assume that you add an object to the <xref:System.Web.Caching.Cache> with a dependency on the following file path: c:\\stocks\\xyz.dat. If that file is not found when the <xref:System.Web.Caching.CacheDependency> object is created, but is created later, the cached object is removed upon the creation of the xyz.dat file.  \n  \n> [!NOTE]\n>  Change tracking begins immediately and is not directly based on the `start` parameter. Use the `start` parameter to pass a date and time in the past against which you want to check the last modified date of any of the objects passed in the `filenames`, `cachekeys`, or `dependency` parameters. If the last modified date for any of those objects is later than the date and time passed in the `start` parameter, the cached item is removed from the <xref:System.Web.Caching.Cache>."
  example:
  - "The following code example shows a `CreateDependency` method. When this method is called, it creates a <xref:System.DateTime> object and the <xref:System.Web.Caching.Cache.Item%2A?displayProperty=fullName> property is used to add an item to the cache with a key parameter of `key1` and a value of `Value 1`. An array of strings, `dependencyKey`, is then created with the value at its first (and only) index set to the value of `key1` as well. The <xref:System.Web.Caching.CacheDependency.%23ctor%2A?displayProperty=fullName> constructor is then used to create a <xref:System.Web.Caching.CacheDependency> object, `dep1`, which passes `dependencyKey` as a parameter argument. A second <xref:System.Web.Caching.CacheDependency> object, `dep2`, is then created using this constructor, with `dep1` and the <xref:System.DateTime> object passed as parameter arguments. This second dependency is dependent on the first, and dependency monitoring will begin 10 seconds after the `CreateDependency` method is called. The <xref:System.Web.Caching.Cache.Insert%2A?displayProperty=fullName> method is called next, using the second <xref:System.Web.Caching.CacheDependency> object as a parameter. If the first dependency changes in any way, the cached item will be invalidated.  \n  \n [!code-cs[CacheDependency Constructor8#1](~/add/codesnippet/csharp/b4a521ab-493f-41c7-94fa-_1.aspx)]\n [!code-vb[CacheDependency Constructor8#1](~/add/codesnippet/visualbasic/b4a521ab-493f-41c7-94fa-_1.aspx)]"
  syntax:
    content: public CacheDependency (string[] filenames, string[] cachekeys, System.Web.Caching.CacheDependency dependency, DateTime start);
    parameters:
    - id: filenames
      type: System.String[]
      description: "En matris med sökvägar (till filer eller kataloger) som cachelagrade objekt är beroende av. När något av dessa resurser ändringar, det cachelagrade objektet blir inaktuella och tas bort från cachen."
    - id: cachekeys
      type: System.String[]
      description: "En matris med cache nycklar som det nya objektet övervakar ändringar. När något av dessa ändringar för cache-nycklar, cachelagrade objekt som är associerade med detta beroendeobjekt blir inaktuella och tas bort från cachen."
    - id: dependency
      type: System.Web.Caching.CacheDependency
      description: "En annan instans av den <xref href=&quot;System.Web.Caching.CacheDependency&quot;> </xref> klass som den här instansen är beroende av."
    - id: start
      type: System.DateTime
      description: "Den tid som ska kontrollera senaste ändringsdatum för objekt i matriser mot och <xref href=&quot;System.Web.Caching.CacheDependency&quot;> </xref> objekt."
  overload: System.Web.Caching.CacheDependency.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Caching.CacheDependency.DependencyDispose
  id: DependencyDispose
  parent: System.Web.Caching.CacheDependency
  langs:
  - csharp
  name: DependencyDispose()
  nameWithType: CacheDependency.DependencyDispose()
  fullName: System.Web.Caching.CacheDependency.DependencyDispose()
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Caching
  summary: "Släpper de resurser som används av den <xref href=&quot;System.Web.Caching.CacheDependency&quot;> </xref> klassen och alla klasser som härleds från <xref href=&quot;System.Web.Caching.CacheDependency&quot;> </xref>."
  remarks: "En klass som härleds från den <xref:System.Web.Caching.CacheDependency>klassen krävs för att implementera den här metoden för att rensa resurser som har använts för den härledda klassen.</xref:System.Web.Caching.CacheDependency>"
  example:
  - "The following code example shows a class that inherits from the <xref:System.Web.Caching.CacheDependency> class and overrides the DependencyDispose method. When this method is called, it sets a custom Boolean property named `Disposed` to `true`.  \n  \n [!code-vb[CacheDependency_Whidbey_Example1#1](~/add/codesnippet/visualbasic/m-system.web.caching.cac_7_1.vb)]"
  syntax:
    content: protected virtual void DependencyDispose ();
    parameters: []
  overload: System.Web.Caching.CacheDependency.DependencyDispose*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Caching.CacheDependency.Dispose
  id: Dispose
  parent: System.Web.Caching.CacheDependency
  langs:
  - csharp
  name: Dispose()
  nameWithType: CacheDependency.Dispose()
  fullName: System.Web.Caching.CacheDependency.Dispose()
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Caching
  summary: "Släpper de resurser som används av den <xref href=&quot;System.Web.Caching.CacheDependency&quot;> </xref> objekt."
  syntax:
    content: public void Dispose ();
    parameters: []
  overload: System.Web.Caching.CacheDependency.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Caching.CacheDependency.FinishInit
  id: FinishInit
  parent: System.Web.Caching.CacheDependency
  langs:
  - csharp
  name: FinishInit()
  nameWithType: CacheDependency.FinishInit()
  fullName: System.Web.Caching.CacheDependency.FinishInit()
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Caching
  summary: "Slutför initieringen av den <xref href=&quot;System.Web.Caching.CacheDependency&quot;> </xref> objekt."
  remarks: "Metoden FinishInit har slutförts initieringen av den <xref:System.Web.Caching.CacheDependency>objekt.</xref:System.Web.Caching.CacheDependency> Den här metoden anropas av alla <xref:System.Web.Caching.CacheDependency>konstruktorer.</xref:System.Web.Caching.CacheDependency>"
  syntax:
    content: protected void FinishInit ();
    parameters: []
  overload: System.Web.Caching.CacheDependency.FinishInit*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Caching.CacheDependency.GetFileDependencies
  id: GetFileDependencies
  parent: System.Web.Caching.CacheDependency
  langs:
  - csharp
  name: GetFileDependencies()
  nameWithType: CacheDependency.GetFileDependencies()
  fullName: System.Web.Caching.CacheDependency.GetFileDependencies()
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Caching
  summary: "Hämtar filen beroenden."
  syntax:
    content: public virtual string[] GetFileDependencies ();
    parameters: []
    return:
      type: System.String[]
      description: "Filberoenden."
  overload: System.Web.Caching.CacheDependency.GetFileDependencies*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Caching.CacheDependency.GetUniqueID
  id: GetUniqueID
  parent: System.Web.Caching.CacheDependency
  langs:
  - csharp
  name: GetUniqueID()
  nameWithType: CacheDependency.GetUniqueID()
  fullName: System.Web.Caching.CacheDependency.GetUniqueID()
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Caching
  summary: "Hämtar en unik identifierare för en <xref href=&quot;System.Web.Caching.CacheDependency&quot;> </xref> objekt."
  remarks: "Den här metoden kan vara användbart för att spåra flera instanser av den <xref:System.Web.Caching.CacheDependency>klass som är kopplad till ett objekt eller ett program.</xref:System.Web.Caching.CacheDependency>       Identifieraren är en kombination av filnamnet (för ett beroende fil) eller nyckelnamnet (för ett beroende för cache-nyckel) och en sträng som den här metoden tilldelar beroendet. I klasserna som härleds från den <xref:System.Web.Caching.CacheDependency>klass, kan du åsidosätta den här metoden om du vill anpassa hur det genererar den unika identifieraren.</xref:System.Web.Caching.CacheDependency>"
  example:
  - "The following code example creates an <xref:System.Web.Caching.AggregateCacheDependency> object, named `aggDep`, with two <xref:System.Web.Caching.CacheDependency> objects in its array. Once `aggDep` is instantiated, the code calls the GetUniqueID method to generate a unique identifier for both dependencies that `aggDep` contains and displays the identifiers to the containing page. An item is then added to the <xref:System.Web.Caching.Cache>, using the <xref:System.Web.Caching.Cache.Insert%2A> method, with `aggDep` as a dependency.  \n  \n [!code-vb[CachingSamples_AggregateCacheDependency1#3](~/add/codesnippet/visualbasic/m-system.web.caching.cac_1_1.aspx)]"
  syntax:
    content: public virtual string GetUniqueID ();
    parameters: []
    return:
      type: System.String
      description: "Den unika identifieraren för den <xref href=&quot;System.Web.Caching.CacheDependency&quot;> </xref> objekt."
  overload: System.Web.Caching.CacheDependency.GetUniqueID*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Caching.CacheDependency.HasChanged
  id: HasChanged
  parent: System.Web.Caching.CacheDependency
  langs:
  - csharp
  name: HasChanged
  nameWithType: CacheDependency.HasChanged
  fullName: System.Web.Caching.CacheDependency.HasChanged
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.Caching
  summary: "Hämtar ett värde som anger om den <xref href=&quot;System.Web.Caching.CacheDependency&quot;> </xref> objektet har ändrats."
  remarks: "Du kan lägga till ett objekt till ett ASP.NET-program <xref:System.Web.Caching.Cache>med en <xref:System.Web.Caching.CacheDependency>.</xref:System.Web.Caching.CacheDependency> </xref:System.Web.Caching.Cache> När den <xref:System.Web.Caching.CacheDependency>ändras objektet som läggs till i <xref:System.Web.Caching.Cache>är ogiltiga och tas bort från cachen.</xref:System.Web.Caching.Cache> </xref:System.Web.Caching.CacheDependency> Du kan använda den här egenskapen för att avgöra om en <xref:System.Web.Caching.CacheDependency>har ändrats och återskapa objektet i den <xref:System.Web.Caching.Cache>om som har inträffat.</xref:System.Web.Caching.Cache> </xref:System.Web.Caching.CacheDependency>"
  example:
  - "The following code example demonstrates using the HasChanged property to determine whether a <xref:System.Web.Caching.CacheDependency> changed since the previous request for an item in the <xref:System.Web.Caching.Cache>. The `dt` value passed in the `start` parameter is set to <xref:System.DateTime.Now%2A?displayProperty=fullName>.  \n  \n [!code-vb[System.Web.Caching.CacheDependency_HasChanged#1](~/add/codesnippet/visualbasic/p-system.web.caching.cac_1_1.aspx)]\n [!code-cs[System.Web.Caching.CacheDependency_HasChanged#1](~/add/codesnippet/csharp/p-system.web.caching.cac_1_1.aspx)]"
  syntax:
    content: public bool HasChanged { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Om den <xref href=&quot;System.Web.Caching.CacheDependency&quot;> </xref> objektet har ändrats, annars <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. Standardvärdet är <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Web.Caching.CacheDependency.HasChanged*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Caching.CacheDependency.NotifyDependencyChanged(System.Object,System.EventArgs)
  id: NotifyDependencyChanged(System.Object,System.EventArgs)
  parent: System.Web.Caching.CacheDependency
  langs:
  - csharp
  name: NotifyDependencyChanged(Object,EventArgs)
  nameWithType: CacheDependency.NotifyDependencyChanged(Object,EventArgs)
  fullName: System.Web.Caching.CacheDependency.NotifyDependencyChanged(Object,EventArgs)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Caching
  summary: "Meddelar basen <xref href=&quot;System.Web.Caching.CacheDependency&quot;> </xref> objekt som beroendet representeras av en härledd <xref href=&quot;System.Web.Caching.CacheDependency&quot;> </xref> klass har ändrats."
  remarks: "En klass som härleds från den <xref:System.Web.Caching.CacheDependency>klassen måste implementera den här metoden.</xref:System.Web.Caching.CacheDependency>       När du härledd från den <xref:System.Web.Caching.CacheDependency>klass som du använder funktionen grundläggande metod eller egenskap som inte har åsidosatts.</xref:System.Web.Caching.CacheDependency> När du skapar en instans av den härledda klassen representerar filerna cache nycklar, databastabeller eller andra godtyckligt objekt som du vill göra ett cachelagrade objekt som är beroende av. När ett beroende objekt ändras den här metoden meddelar grundläggande funktionerna i den <xref:System.Web.Caching.CacheDependency>klass som objektet har ändrats så att värdena för den <xref:System.Web.Caching.CacheDependency.HasChanged%2A>och <xref:System.Web.Caching.CacheDependency.UtcLastModified%2A>Egenskaper kan uppdateras.</xref:System.Web.Caching.CacheDependency.UtcLastModified%2A> </xref:System.Web.Caching.CacheDependency.HasChanged%2A> </xref:System.Web.Caching.CacheDependency>"
  example:
  - "The following code example shows a class that inherits from the <xref:System.Web.Caching.CacheDependency> class. It creates a public method, `ResetDependency`, that uses the <xref:System.Web.Caching.CacheDependency.SetUtcLastModified%2A> method to change the time at which the dependency was modified, and then calls the NotifyDependencyChanged method.  \n  \n [!code-vb[CacheDependency_Whidbey_Example1#1](~/add/codesnippet/visualbasic/0410edfc-9961-4a15-80eb-_1.vb)]"
  syntax:
    content: protected void NotifyDependencyChanged (object sender, EventArgs e);
    parameters:
    - id: sender
      type: System.Object
      description: "Källan för händelsen."
    - id: e
      type: System.EventArgs
      description: "En &lt;xref:System.EventArgs?displayProperty=fullName&gt; objekt som innehåller informationen om händelsen."
  overload: System.Web.Caching.CacheDependency.NotifyDependencyChanged*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Caching.CacheDependency.SetUtcLastModified(System.DateTime)
  id: SetUtcLastModified(System.DateTime)
  parent: System.Web.Caching.CacheDependency
  langs:
  - csharp
  name: SetUtcLastModified(DateTime)
  nameWithType: CacheDependency.SetUtcLastModified(DateTime)
  fullName: System.Web.Caching.CacheDependency.SetUtcLastModified(DateTime)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Caching
  summary: "Anger den tidpunkt då ett beroende senast ändrades."
  remarks: ''
  example:
  - "The following code example shows a class that inherits from the <xref:System.Web.Caching.CacheDependency> class. It creates a public method, `ResetDependency`, that uses the SetUtcLastModified method to change the time at which the dependency was modified, and then calls the <xref:System.Web.Caching.CacheDependency.NotifyDependencyChanged%2A> method.  \n  \n [!code-vb[CacheDependency_Whidbey_Example1#1](~/add/codesnippet/visualbasic/m-system.web.caching.cac_6_1.vb)]"
  syntax:
    content: protected void SetUtcLastModified (DateTime utcLastModified);
    parameters:
    - id: utcLastModified
      type: System.DateTime
      description: "Den tid då beroendet senast ändrades."
  overload: System.Web.Caching.CacheDependency.SetUtcLastModified*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Caching.CacheDependency.UtcLastModified
  id: UtcLastModified
  parent: System.Web.Caching.CacheDependency
  langs:
  - csharp
  name: UtcLastModified
  nameWithType: CacheDependency.UtcLastModified
  fullName: System.Web.Caching.CacheDependency.UtcLastModified
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.Caching
  summary: "Hämtar den tidpunkt då beroendet senast ändrades."
  remarks: "Den här egenskapen mäts i Coordinated Universal Time (UTC) (även kallat Greenwich Mean Time)."
  example:
  - "The following code example uses the <xref:System.Web.Caching.AggregateCacheDependency> class to add an item, with two <xref:System.Web.Caching.CacheDependency> object dependencies, to the <xref:System.Web.Caching.Cache>. When a request for the <xref:System.Web.Caching.Cache> item is made, the code checks whether the item is in the <xref:System.Web.Caching.Cache>. If it is, the UtcLastModified property is converted to a string and displayed on the page. If it is not, the item and its two dependencies are created and added to the <xref:System.Web.Caching.Cache>.  \n  \n [!code-vb[CachingSamples_AggregateCacheDependency1#2](~/add/codesnippet/visualbasic/p-system.web.caching.cac_0_1.aspx)]"
  syntax:
    content: public DateTime UtcLastModified { get; }
    return:
      type: System.DateTime
      description: "Den tid då beroendet senast ändrades."
  overload: System.Web.Caching.CacheDependency.UtcLastModified*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Web.Caching.CacheDependency.#ctor
  parent: System.Web.Caching.CacheDependency
  isExternal: false
  name: CacheDependency()
  nameWithType: CacheDependency.CacheDependency()
  fullName: System.Web.Caching.CacheDependency.CacheDependency()
- uid: System.Web.Caching.CacheDependency.#ctor(System.String)
  parent: System.Web.Caching.CacheDependency
  isExternal: false
  name: CacheDependency(String)
  nameWithType: CacheDependency.CacheDependency(String)
  fullName: System.Web.Caching.CacheDependency.CacheDependency(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Web.Caching.CacheDependency.#ctor(System.String[])
  parent: System.Web.Caching.CacheDependency
  isExternal: false
  name: CacheDependency(String[])
  nameWithType: CacheDependency.CacheDependency(String[])
  fullName: System.Web.Caching.CacheDependency.CacheDependency(String[])
- uid: System.String[]
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String[]
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Web.Caching.CacheDependency.#ctor(System.String,System.DateTime)
  parent: System.Web.Caching.CacheDependency
  isExternal: false
  name: CacheDependency(String,DateTime)
  nameWithType: CacheDependency.CacheDependency(String,DateTime)
  fullName: System.Web.Caching.CacheDependency.CacheDependency(String,DateTime)
- uid: System.DateTime
  parent: System
  isExternal: true
  name: DateTime
  nameWithType: DateTime
  fullName: System.DateTime
- uid: System.Web.Caching.CacheDependency.#ctor(System.String[],System.DateTime)
  parent: System.Web.Caching.CacheDependency
  isExternal: false
  name: CacheDependency(String[],DateTime)
  nameWithType: CacheDependency.CacheDependency(String[],DateTime)
  fullName: System.Web.Caching.CacheDependency.CacheDependency(String[],DateTime)
- uid: System.Web.Caching.CacheDependency.#ctor(System.String[],System.String[])
  parent: System.Web.Caching.CacheDependency
  isExternal: false
  name: CacheDependency(String[],String[])
  nameWithType: CacheDependency.CacheDependency(String[],String[])
  fullName: System.Web.Caching.CacheDependency.CacheDependency(String[],String[])
- uid: System.Web.Caching.CacheDependency.#ctor(System.String[],System.String[],System.DateTime)
  parent: System.Web.Caching.CacheDependency
  isExternal: false
  name: CacheDependency(String[],String[],DateTime)
  nameWithType: CacheDependency.CacheDependency(String[],String[],DateTime)
  fullName: System.Web.Caching.CacheDependency.CacheDependency(String[],String[],DateTime)
- uid: System.Web.Caching.CacheDependency.#ctor(System.String[],System.String[],System.Web.Caching.CacheDependency)
  parent: System.Web.Caching.CacheDependency
  isExternal: false
  name: CacheDependency(String[],String[],CacheDependency)
  nameWithType: CacheDependency.CacheDependency(String[],String[],CacheDependency)
  fullName: System.Web.Caching.CacheDependency.CacheDependency(String[],String[],CacheDependency)
- uid: System.Web.Caching.CacheDependency
  parent: System.Web.Caching
  isExternal: false
  name: CacheDependency
  nameWithType: CacheDependency
  fullName: System.Web.Caching.CacheDependency
- uid: System.Web.Caching.CacheDependency.#ctor(System.String[],System.String[],System.Web.Caching.CacheDependency,System.DateTime)
  parent: System.Web.Caching.CacheDependency
  isExternal: false
  name: CacheDependency(String[],String[],CacheDependency,DateTime)
  nameWithType: CacheDependency.CacheDependency(String[],String[],CacheDependency,DateTime)
  fullName: System.Web.Caching.CacheDependency.CacheDependency(String[],String[],CacheDependency,DateTime)
- uid: System.Web.Caching.CacheDependency.DependencyDispose
  parent: System.Web.Caching.CacheDependency
  isExternal: false
  name: DependencyDispose()
  nameWithType: CacheDependency.DependencyDispose()
  fullName: System.Web.Caching.CacheDependency.DependencyDispose()
- uid: System.Web.Caching.CacheDependency.Dispose
  parent: System.Web.Caching.CacheDependency
  isExternal: false
  name: Dispose()
  nameWithType: CacheDependency.Dispose()
  fullName: System.Web.Caching.CacheDependency.Dispose()
- uid: System.Web.Caching.CacheDependency.FinishInit
  parent: System.Web.Caching.CacheDependency
  isExternal: false
  name: FinishInit()
  nameWithType: CacheDependency.FinishInit()
  fullName: System.Web.Caching.CacheDependency.FinishInit()
- uid: System.Web.Caching.CacheDependency.GetFileDependencies
  parent: System.Web.Caching.CacheDependency
  isExternal: false
  name: GetFileDependencies()
  nameWithType: CacheDependency.GetFileDependencies()
  fullName: System.Web.Caching.CacheDependency.GetFileDependencies()
- uid: System.Web.Caching.CacheDependency.GetUniqueID
  parent: System.Web.Caching.CacheDependency
  isExternal: false
  name: GetUniqueID()
  nameWithType: CacheDependency.GetUniqueID()
  fullName: System.Web.Caching.CacheDependency.GetUniqueID()
- uid: System.Web.Caching.CacheDependency.HasChanged
  parent: System.Web.Caching.CacheDependency
  isExternal: false
  name: HasChanged
  nameWithType: CacheDependency.HasChanged
  fullName: System.Web.Caching.CacheDependency.HasChanged
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Web.Caching.CacheDependency.NotifyDependencyChanged(System.Object,System.EventArgs)
  parent: System.Web.Caching.CacheDependency
  isExternal: false
  name: NotifyDependencyChanged(Object,EventArgs)
  nameWithType: CacheDependency.NotifyDependencyChanged(Object,EventArgs)
  fullName: System.Web.Caching.CacheDependency.NotifyDependencyChanged(Object,EventArgs)
- uid: System.EventArgs
  parent: System
  isExternal: true
  name: EventArgs
  nameWithType: EventArgs
  fullName: System.EventArgs
- uid: System.Web.Caching.CacheDependency.SetUtcLastModified(System.DateTime)
  parent: System.Web.Caching.CacheDependency
  isExternal: false
  name: SetUtcLastModified(DateTime)
  nameWithType: CacheDependency.SetUtcLastModified(DateTime)
  fullName: System.Web.Caching.CacheDependency.SetUtcLastModified(DateTime)
- uid: System.Web.Caching.CacheDependency.UtcLastModified
  parent: System.Web.Caching.CacheDependency
  isExternal: false
  name: UtcLastModified
  nameWithType: CacheDependency.UtcLastModified
  fullName: System.Web.Caching.CacheDependency.UtcLastModified
- uid: System.Web.Caching.CacheDependency.#ctor*
  parent: System.Web.Caching.CacheDependency
  isExternal: false
  name: CacheDependency
  nameWithType: CacheDependency.CacheDependency
- uid: System.Web.Caching.CacheDependency.DependencyDispose*
  parent: System.Web.Caching.CacheDependency
  isExternal: false
  name: DependencyDispose
  nameWithType: CacheDependency.DependencyDispose
- uid: System.Web.Caching.CacheDependency.Dispose*
  parent: System.Web.Caching.CacheDependency
  isExternal: false
  name: Dispose
  nameWithType: CacheDependency.Dispose
- uid: System.Web.Caching.CacheDependency.FinishInit*
  parent: System.Web.Caching.CacheDependency
  isExternal: false
  name: FinishInit
  nameWithType: CacheDependency.FinishInit
- uid: System.Web.Caching.CacheDependency.GetFileDependencies*
  parent: System.Web.Caching.CacheDependency
  isExternal: false
  name: GetFileDependencies
  nameWithType: CacheDependency.GetFileDependencies
- uid: System.Web.Caching.CacheDependency.GetUniqueID*
  parent: System.Web.Caching.CacheDependency
  isExternal: false
  name: GetUniqueID
  nameWithType: CacheDependency.GetUniqueID
- uid: System.Web.Caching.CacheDependency.HasChanged*
  parent: System.Web.Caching.CacheDependency
  isExternal: false
  name: HasChanged
  nameWithType: CacheDependency.HasChanged
- uid: System.Web.Caching.CacheDependency.NotifyDependencyChanged*
  parent: System.Web.Caching.CacheDependency
  isExternal: false
  name: NotifyDependencyChanged
  nameWithType: CacheDependency.NotifyDependencyChanged
- uid: System.Web.Caching.CacheDependency.SetUtcLastModified*
  parent: System.Web.Caching.CacheDependency
  isExternal: false
  name: SetUtcLastModified
  nameWithType: CacheDependency.SetUtcLastModified
- uid: System.Web.Caching.CacheDependency.UtcLastModified*
  parent: System.Web.Caching.CacheDependency
  isExternal: false
  name: UtcLastModified
  nameWithType: CacheDependency.UtcLastModified
