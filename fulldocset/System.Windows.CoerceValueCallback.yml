### YamlMime:ManagedReference
items:
- uid: System.Windows.CoerceValueCallback
  id: CoerceValueCallback
  langs:
  - csharp
  name: CoerceValueCallback
  nameWithType: CoerceValueCallback
  fullName: System.Windows.CoerceValueCallback
  type: Delegate
  summary: "Innehåller en mall för en metod som anropas när ett värde för egenskapen beroende utvärderas igen eller tvång begärt."
  remarks: "Återanrop baserat på CoerceValueCallback kan tilldelas till en beroendeegenskap med flera olika metoder. Var och en av dessa metoder kräver att du först skapa ett nytt objekt i egenskapen metadata (<xref:System.Windows.PropertyMetadata>, eller en härledd klass som <xref:System.Windows.FrameworkPropertyMetadata>).</xref:System.Windows.FrameworkPropertyMetadata> </xref:System.Windows.PropertyMetadata> Skapa Metadataobjektet med en konstruktörsignatur som tar den `coerceValueCallback` parameter, och tilldela den parametern till callback-hanteraren. Eller skapa metadata av någon signatur och ange den <xref:System.Windows.PropertyMetadata.CoerceValueCallback%2A>egenskapen innan du placerar metadata i användning.</xref:System.Windows.PropertyMetadata.CoerceValueCallback%2A>       När du har dessa metadata kan du:-definiera en ny beroendeegenskap på en ny klass med hjälp av antingen signaturen för <xref:System.Windows.DependencyProperty.Register%2A>, ger metadata som den `typeMetadata` värde.</xref:System.Windows.DependencyProperty.Register%2A>      -Åsidosätt metadata (anropa <xref:System.Windows.DependencyProperty.OverrideMetadata%28System.Type%2CSystem.Windows.PropertyMetadata%29>) för en befintlig beroendeegenskap när du härleds från klassen som äger beroendeegenskapen.</xref:System.Windows.DependencyProperty.OverrideMetadata%28System.Type%2CSystem.Windows.PropertyMetadata%29>      -Lägg till en befintlig beroendeegenskap i en ny <xref:System.Windows.DependencyObject>klass, med nya metadata genom att anropa <xref:System.Windows.DependencyProperty.AddOwner%28System.Type%2CSystem.Windows.PropertyMetadata%29>.</xref:System.Windows.DependencyProperty.AddOwner%28System.Type%2CSystem.Windows.PropertyMetadata%29> </xref:System.Windows.DependencyObject>       Implementeringar av den här motringning ska kontrollera värdet i `baseValue` och fastställa baserat på värdet eller typen om det här är ett värde som måste omvandlas ytterligare.       Den <xref:System.Windows.PropertyMetadata.CoerceValueCallback%2A>för ett beroende egenskapen startas varje gång som egenskapen systemet eller andra anropare anropar <xref:System.Windows.DependencyObject.CoerceValue%2A>på en <xref:System.Windows.DependencyObject>instans, ange egenskapens ID som den `dp`.</xref:System.Windows.DependencyObject> </xref:System.Windows.DependencyObject.CoerceValue%2A> </xref:System.Windows.PropertyMetadata.CoerceValueCallback%2A>       Ändringar av egenskapsvärdet har kanske från alla möjliga deltagare i egenskapen systemet. Detta inkluderar format, generiska ogiltigförklarade, utlösare, värdet egenskapsarv och lokalt värde inställningen.       Normalt bör du undvika att ange fler än en <xref:System.Windows.PropertyMetadata.CoerceValueCallback%2A>för alla de angivna beroendeegenskap (åsidosätter eller lägga till med nya metadata för en beroendeegenskap som redan hade en <xref:System.Windows.PropertyMetadata.CoerceValueCallback%2A>).</xref:System.Windows.PropertyMetadata.CoerceValueCallback%2A> </xref:System.Windows.PropertyMetadata.CoerceValueCallback%2A> Endast en av återanrop kommer att kunna fungera. Agerar återanropet blir det som tillämpades på den mest härledda klassen i ärvda jämfört med den <xref:System.Windows.DependencyObject>anroparen.</xref:System.Windows.DependencyObject> Andra återanrop som tilldelats till metadata för beroendegenskapen som den högre såg i hierarkin ägare ersätts när metadata åsidosätts."
  example:
  - "The following example includes an implementation of this callback to coerce the stored value of a dependency property based on other inputs, such as another property's value. In this case, the callback checks to see whether the `ShirtType` property corresponds to a type of shirt that has buttons; if so it establishes a starting default color for the `ButtonColor`, if the shirt type has no buttons, it coerces the `ButtonColor` value back to a starting value, which causes the [!INCLUDE[TLA2#tla_ui](~/add/includes/ajax-current-ext-md.md)] (not shown) to remove that dropdown from the effective choices.  \n  \n [!code-cs[DPCustom#CoerceValueCallback](~/add/codesnippet/csharp/DPCustom/default.xaml.cs#coercevaluecallback)]\n [!code-vb[DPCustom#CoerceValueCallback](~/add/codesnippet/visualbasic/dpcustom/default.xaml.vb#coercevaluecallback)]"
  syntax:
    content: public delegate object CoerceValueCallback(DependencyObject d, object baseValue);
  inheritance:
  - System.Delegate
  platform:
  - net462
references:
- uid: System.Delegate
  isExternal: false
  name: System.Delegate
