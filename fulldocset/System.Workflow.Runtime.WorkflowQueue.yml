### YamlMime:ManagedReference
items:
- uid: System.Workflow.Runtime.WorkflowQueue
  id: WorkflowQueue
  children:
  - System.Workflow.Runtime.WorkflowQueue.Count
  - System.Workflow.Runtime.WorkflowQueue.Dequeue
  - System.Workflow.Runtime.WorkflowQueue.Enabled
  - System.Workflow.Runtime.WorkflowQueue.Enqueue(System.Object)
  - System.Workflow.Runtime.WorkflowQueue.Peek
  - System.Workflow.Runtime.WorkflowQueue.QueueItemArrived
  - System.Workflow.Runtime.WorkflowQueue.QueueItemAvailable
  - System.Workflow.Runtime.WorkflowQueue.QueueName
  - System.Workflow.Runtime.WorkflowQueue.QueuingService
  - System.Workflow.Runtime.WorkflowQueue.RegisterForQueueItemArrived(System.Workflow.ComponentModel.IActivityEventListener{System.Workflow.ComponentModel.QueueEventArgs})
  - System.Workflow.Runtime.WorkflowQueue.RegisterForQueueItemAvailable(System.Workflow.ComponentModel.IActivityEventListener{System.Workflow.ComponentModel.QueueEventArgs})
  - System.Workflow.Runtime.WorkflowQueue.RegisterForQueueItemAvailable(System.Workflow.ComponentModel.IActivityEventListener{System.Workflow.ComponentModel.QueueEventArgs},System.String)
  - System.Workflow.Runtime.WorkflowQueue.UnregisterForQueueItemArrived(System.Workflow.ComponentModel.IActivityEventListener{System.Workflow.ComponentModel.QueueEventArgs})
  - System.Workflow.Runtime.WorkflowQueue.UnregisterForQueueItemAvailable(System.Workflow.ComponentModel.IActivityEventListener{System.Workflow.ComponentModel.QueueEventArgs})
  langs:
  - csharp
  name: WorkflowQueue
  nameWithType: WorkflowQueue
  fullName: System.Workflow.Runtime.WorkflowQueue
  type: Class
  summary: "Representerar en arbetsflödeskö."
  remarks: "> [!NOTE] >  [!INCLUDE[DeprecatedContent](~/add/includes/ajax-current-ext-md.md)]Arbetsflödet köer för att skicka meddelanden mellan en värd eller värdtjänsterna och aktiviteterna i ett arbetsflöde. Alla aktiviteter som kan skapa en WorkflowQueue genom att anropa <xref:System.Workflow.Runtime.WorkflowQueuingService.CreateWorkflowQueue%2A?displayProperty=fullName>, och en värd, en tjänst eller en annan aktivitet kan anropa <xref:System.Workflow.Runtime.WorkflowQueue.Enqueue%2A>lägga till ett objekt som WorkflowQueue.</xref:System.Workflow.Runtime.WorkflowQueue.Enqueue%2A> </xref:System.Workflow.Runtime.WorkflowQueuingService.CreateWorkflowQueue%2A?displayProperty=fullName> Du kan prenumerera på den <xref:System.Workflow.Runtime.WorkflowQueue.QueueItemAvailable>händelse som ska aviseras när ett objekt som anländer på WorkflowQueue.</xref:System.Workflow.Runtime.WorkflowQueue.QueueItemAvailable> Du kan använda <xref:System.Workflow.Runtime.WorkflowQueue.Peek%2A>att undersöka ett objekt i början av WorkflowQueue och <xref:System.Workflow.Runtime.WorkflowQueue.Dequeue%2A>att ta bort ett objekt från WorkflowQueue.</xref:System.Workflow.Runtime.WorkflowQueue.Dequeue%2A> </xref:System.Workflow.Runtime.WorkflowQueue.Peek%2A> Varje WorkflowQueue är associerad med en <xref:System.Workflow.Runtime.WorkflowQueuingService>som du kan använda för att utföra andra hanteringsåtgärder på WorkflowQueue, till exempel ta bort kön.</xref:System.Workflow.Runtime.WorkflowQueuingService> <xref:System.Workflow.Runtime.WorkflowQueue.QueuingService%2A>Visar den <xref:System.Workflow.Runtime.WorkflowQueuingService>som är associerade med den här WorkflowQueue.</xref:System.Workflow.Runtime.WorkflowQueuingService></xref:System.Workflow.Runtime.WorkflowQueue.QueuingService%2A>"
  example:
  - "The following code example demonstrates how you can create a WorkflowQueue by calling the <xref:System.Workflow.Runtime.WorkflowQueuingService.GetWorkflowQueue%2A?displayProperty=fullName> method. It also uses the <xref:System.Workflow.Runtime.WorkflowQueue.Count%2A> property to determine whether any messages exist in the current queue. Finally, the code uses the <xref:System.Workflow.Runtime.WorkflowQueue.Dequeue%2A> method to remove and return the first object in the queue.  \n  \n This code example is part of the File Watcher Activity SDK Sample from the FileSystemEvent.cs file. For more information, see [File System Watcher Activity](http://msdn.microsoft.com/en-us/5442b63a-bdad-43d0-b7cf-f0b5d8b56a99).  \n  \n [!code-cs[WF_Samples#227](~/add/codesnippet/csharp/wf_snippets/snippets24.cs#227)]\n [!code-vb[WF_Samples#227](~/add/codesnippet/visualbasic/wf_snippets/snippets24.vb#227)]"
  syntax:
    content: >-
      [System.Obsolete("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]

      public class WorkflowQueue
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Workflow.Runtime.WorkflowQueue.Count
  id: Count
  parent: System.Workflow.Runtime.WorkflowQueue
  langs:
  - csharp
  name: Count
  nameWithType: WorkflowQueue.Count
  fullName: System.Workflow.Runtime.WorkflowQueue.Count
  type: Property
  assemblies:
  - System.Workflow.Runtime
  namespace: System.Workflow.Runtime
  summary: "Hämtar antalet objekt i den <xref href=&quot;System.Workflow.Runtime.WorkflowQueue&quot;> </xref>."
  remarks: ''
  example:
  - "The following code example demonstrates how you can create a <xref:System.Workflow.Runtime.WorkflowQueue> by calling the <xref:System.Workflow.Runtime.WorkflowQueuingService.GetWorkflowQueue%2A?displayProperty=fullName> method. It also uses the Count property to determine whether any messages exist in the current queue. Finally, the code uses the <xref:System.Workflow.Runtime.WorkflowQueue.Dequeue%2A> method to remove and return the first object in the queue.  \n  \n This code example is part of the File Watcher Activity SDK Sample from the FileSystemEvent.cs file. For more information, see [File System Watcher Activity](http://msdn.microsoft.com/en-us/5442b63a-bdad-43d0-b7cf-f0b5d8b56a99).  \n  \n [!code-cs[WF_Samples#227](~/add/codesnippet/csharp/wf_snippets/snippets24.cs#227)]\n [!code-vb[WF_Samples#227](~/add/codesnippet/visualbasic/wf_snippets/snippets24.vb#227)]"
  syntax:
    content: public int Count { get; }
    return:
      type: System.Int32
      description: "Antal objekt i arbetsflödeskö."
  overload: System.Workflow.Runtime.WorkflowQueue.Count*
  exceptions: []
  platform:
  - net462
- uid: System.Workflow.Runtime.WorkflowQueue.Dequeue
  id: Dequeue
  parent: System.Workflow.Runtime.WorkflowQueue
  langs:
  - csharp
  name: Dequeue()
  nameWithType: WorkflowQueue.Dequeue()
  fullName: System.Workflow.Runtime.WorkflowQueue.Dequeue()
  type: Method
  assemblies:
  - System.Workflow.Runtime
  namespace: System.Workflow.Runtime
  summary: "Tar bort och returnerar objektet i början av den <xref href=&quot;System.Workflow.Runtime.WorkflowQueue&quot;> </xref>."
  remarks: "Du kan kontrollera <xref:System.Workflow.Runtime.WorkflowQueue.Count%2A>att avgöra om den <xref:System.Workflow.Runtime.WorkflowQueue>är tom innan du anropar Dequeue, eller kan du fånga <xref:System.InvalidOperationException>.</xref:System.InvalidOperationException> </xref:System.Workflow.Runtime.WorkflowQueue> </xref:System.Workflow.Runtime.WorkflowQueue.Count%2A>"
  example:
  - "The following code example demonstrates how you can create a <xref:System.Workflow.Runtime.WorkflowQueue> by calling the <xref:System.Workflow.Runtime.WorkflowQueuingService.GetWorkflowQueue%2A?displayProperty=fullName> method. It also uses the <xref:System.Workflow.Runtime.WorkflowQueue.Count%2A> property to determine whether any messages exist in the current queue. Finally, the code uses the Dequeue method to remove and return the first object in the queue.  \n  \n This code example is part of the File Watcher Activity SDK Sample from the FileSystemEvent.cs file. For more information, see [File System Watcher Activity](http://msdn.microsoft.com/en-us/5442b63a-bdad-43d0-b7cf-f0b5d8b56a99).  \n  \n [!code-cs[WF_Samples#227](~/add/codesnippet/csharp/wf_snippets/snippets24.cs#227)]\n [!code-vb[WF_Samples#227](~/add/codesnippet/visualbasic/wf_snippets/snippets24.vb#227)]"
  syntax:
    content: public object Dequeue ();
    parameters: []
    return:
      type: System.Object
      description: "Det objekt som tas bort från början av den <xref href=&quot;System.Workflow.Runtime.WorkflowQueue&quot;> </xref>."
  overload: System.Workflow.Runtime.WorkflowQueue.Dequeue*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Den <xref href=&quot;System.Workflow.Runtime.WorkflowQueue&quot;> </xref> är tom."
  platform:
  - net462
- uid: System.Workflow.Runtime.WorkflowQueue.Enabled
  id: Enabled
  parent: System.Workflow.Runtime.WorkflowQueue
  langs:
  - csharp
  name: Enabled
  nameWithType: WorkflowQueue.Enabled
  fullName: System.Workflow.Runtime.WorkflowQueue.Enabled
  type: Property
  assemblies:
  - System.Workflow.Runtime
  namespace: System.Workflow.Runtime
  summary: "Hämtar eller anger ett värde som anger om den <xref href=&quot;System.Workflow.Runtime.WorkflowQueue&quot;> </xref> är aktiverad."
  syntax:
    content: public bool Enabled { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Om den <xref href=&quot;System.Workflow.Runtime.WorkflowQueue&quot;> </xref> är aktiverade, annars <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Workflow.Runtime.WorkflowQueue.Enabled*
  exceptions: []
  platform:
  - net462
- uid: System.Workflow.Runtime.WorkflowQueue.Enqueue(System.Object)
  id: Enqueue(System.Object)
  parent: System.Workflow.Runtime.WorkflowQueue
  langs:
  - csharp
  name: Enqueue(Object)
  nameWithType: WorkflowQueue.Enqueue(Object)
  fullName: System.Workflow.Runtime.WorkflowQueue.Enqueue(Object)
  type: Method
  assemblies:
  - System.Workflow.Runtime
  namespace: System.Workflow.Runtime
  summary: "Lägger till ett objekt i slutet av den <xref href=&quot;System.Workflow.Runtime.WorkflowQueue&quot;> </xref>."
  syntax:
    content: public void Enqueue (object item);
    parameters:
    - id: item
      type: System.Object
      description: "Objektet för att lägga till den <xref href=&quot;System.Workflow.Runtime.WorkflowQueue&quot;> </xref>."
  overload: System.Workflow.Runtime.WorkflowQueue.Enqueue*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Den <xref href=&quot;System.Workflow.Runtime.WorkflowQueue&quot;> </xref> har inte aktiverats."
  platform:
  - net462
- uid: System.Workflow.Runtime.WorkflowQueue.Peek
  id: Peek
  parent: System.Workflow.Runtime.WorkflowQueue
  langs:
  - csharp
  name: Peek()
  nameWithType: WorkflowQueue.Peek()
  fullName: System.Workflow.Runtime.WorkflowQueue.Peek()
  type: Method
  assemblies:
  - System.Workflow.Runtime
  namespace: System.Workflow.Runtime
  summary: "Returnerar objekt i början av den <xref href=&quot;System.Workflow.Runtime.WorkflowQueue&quot;> </xref> utan att ta bort den."
  remarks: "Den här metoden liknar <xref:System.Workflow.Runtime.WorkflowQueue.Dequeue%2A>metoden, men titt inte ändrar <xref:System.Workflow.Runtime.WorkflowQueue>.</xref:System.Workflow.Runtime.WorkflowQueue> </xref:System.Workflow.Runtime.WorkflowQueue.Dequeue%2A> Du kan kontrollera <xref:System.Workflow.Runtime.WorkflowQueue.Count%2A>att avgöra om den <xref:System.Workflow.Runtime.WorkflowQueue>är tom innan du anropar <xref:System.Workflow.Runtime.WorkflowQueue.Dequeue%2A>, eller kan du fånga <xref:System.InvalidOperationException>.</xref:System.InvalidOperationException> </xref:System.Workflow.Runtime.WorkflowQueue.Dequeue%2A> </xref:System.Workflow.Runtime.WorkflowQueue> </xref:System.Workflow.Runtime.WorkflowQueue.Count%2A>"
  syntax:
    content: public object Peek ();
    parameters: []
    return:
      type: System.Object
      description: "Objektet i början av den <xref href=&quot;System.Workflow.Runtime.WorkflowQueue&quot;> </xref>."
  overload: System.Workflow.Runtime.WorkflowQueue.Peek*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Den <xref href=&quot;System.Workflow.Runtime.WorkflowQueue&quot;> </xref> är tom."
  platform:
  - net462
- uid: System.Workflow.Runtime.WorkflowQueue.QueueItemArrived
  id: QueueItemArrived
  parent: System.Workflow.Runtime.WorkflowQueue
  langs:
  - csharp
  name: QueueItemArrived
  nameWithType: WorkflowQueue.QueueItemArrived
  fullName: System.Workflow.Runtime.WorkflowQueue.QueueItemArrived
  type: Event
  assemblies:
  - System.Workflow.Runtime
  namespace: System.Workflow.Runtime
  summary: "Inträffar när ett objekt levereras på den här <xref href=&quot;System.Workflow.Runtime.WorkflowQueue&quot;> </xref>."
  remarks: "Den här händelsen används endast för bearbetning som måste sker synkront med händelsen leverans till arbetsflödesinstansen. Händelsehanteraren kan köras på en arbetsflödestråd så åtkomst till någon delad arbetsflödesobjekt, till exempel alla <xref:System.Workflow.ComponentModel.DependencyObject>, måste skyddas.</xref:System.Workflow.ComponentModel.DependencyObject>"
  syntax:
    content: public event EventHandler<System.Workflow.ComponentModel.QueueEventArgs> QueueItemArrived;
    return:
      type: System.EventHandler{System.Workflow.ComponentModel.QueueEventArgs}
      description: "Som ska läggas till."
  exceptions: []
  platform:
  - net462
- uid: System.Workflow.Runtime.WorkflowQueue.QueueItemAvailable
  id: QueueItemAvailable
  parent: System.Workflow.Runtime.WorkflowQueue
  langs:
  - csharp
  name: QueueItemAvailable
  nameWithType: WorkflowQueue.QueueItemAvailable
  fullName: System.Workflow.Runtime.WorkflowQueue.QueueItemAvailable
  type: Event
  assemblies:
  - System.Workflow.Runtime
  namespace: System.Workflow.Runtime
  summary: "Inträffar när ett objekt som är tillgängligt på den här <xref href=&quot;System.Workflow.Runtime.WorkflowQueue&quot;> </xref>."
  remarks: "QueueItemAvailable händelsen inträffar på ett asynkront sätt. Avsändaren för händelsen QueueItemAvailable kommer att vara <xref:System.Workflow.ComponentModel.ActivityExecutionContext>i prenumerationsapp <xref:System.Workflow.ComponentModel.Activity>.</xref:System.Workflow.ComponentModel.Activity> </xref:System.Workflow.ComponentModel.ActivityExecutionContext>"
  syntax:
    content: public event EventHandler<System.Workflow.ComponentModel.QueueEventArgs> QueueItemAvailable;
    return:
      type: System.EventHandler{System.Workflow.ComponentModel.QueueEventArgs}
      description: "Som ska läggas till."
  exceptions: []
  platform:
  - net462
- uid: System.Workflow.Runtime.WorkflowQueue.QueueName
  id: QueueName
  parent: System.Workflow.Runtime.WorkflowQueue
  langs:
  - csharp
  name: QueueName
  nameWithType: WorkflowQueue.QueueName
  fullName: System.Workflow.Runtime.WorkflowQueue.QueueName
  type: Property
  assemblies:
  - System.Workflow.Runtime
  namespace: System.Workflow.Runtime
  summary: "Hämtar namnet på arbetsflödet kön."
  remarks: "Namnet på arbetsflödet kön har angetts av den <xref:System.Workflow.Runtime.WorkflowQueuingService.CreateWorkflowQueue%2A>metoden.</xref:System.Workflow.Runtime.WorkflowQueuingService.CreateWorkflowQueue%2A>"
  syntax:
    content: public IComparable QueueName { get; }
    return:
      type: System.IComparable
      description: "Namnet på den <xref href=&quot;System.Workflow.Runtime.WorkflowQueue&quot;> </xref>."
  overload: System.Workflow.Runtime.WorkflowQueue.QueueName*
  exceptions: []
  platform:
  - net462
- uid: System.Workflow.Runtime.WorkflowQueue.QueuingService
  id: QueuingService
  parent: System.Workflow.Runtime.WorkflowQueue
  langs:
  - csharp
  name: QueuingService
  nameWithType: WorkflowQueue.QueuingService
  fullName: System.Workflow.Runtime.WorkflowQueue.QueuingService
  type: Property
  assemblies:
  - System.Workflow.Runtime
  namespace: System.Workflow.Runtime
  summary: "Hämtar kötjänsten som är associerade med den här <xref href=&quot;System.Workflow.Runtime.WorkflowQueue&quot;> </xref>."
  syntax:
    content: public System.Workflow.Runtime.WorkflowQueuingService QueuingService { get; }
    return:
      type: System.Workflow.Runtime.WorkflowQueuingService
      description: "En <xref href=&quot;System.Workflow.Runtime.WorkflowQueuingService&quot;> </xref> som representerar kötjänsten som är associerade med den här <xref href=&quot;System.Workflow.Runtime.WorkflowQueue&quot;> </xref>."
  overload: System.Workflow.Runtime.WorkflowQueue.QueuingService*
  exceptions: []
  platform:
  - net462
- uid: System.Workflow.Runtime.WorkflowQueue.RegisterForQueueItemArrived(System.Workflow.ComponentModel.IActivityEventListener{System.Workflow.ComponentModel.QueueEventArgs})
  id: RegisterForQueueItemArrived(System.Workflow.ComponentModel.IActivityEventListener{System.Workflow.ComponentModel.QueueEventArgs})
  parent: System.Workflow.Runtime.WorkflowQueue
  langs:
  - csharp
  name: RegisterForQueueItemArrived(IActivityEventListener<QueueEventArgs>)
  nameWithType: WorkflowQueue.RegisterForQueueItemArrived(IActivityEventListener<QueueEventArgs>)
  fullName: System.Workflow.Runtime.WorkflowQueue.RegisterForQueueItemArrived(IActivityEventListener<QueueEventArgs>)
  type: Method
  assemblies:
  - System.Workflow.Runtime
  namespace: System.Workflow.Runtime
  summary: "Registrerar en prenumerant till den <xref href=&quot;System.Workflow.Runtime.WorkflowQueue.QueueItemArrived&quot;> </xref> händelse."
  syntax:
    content: public void RegisterForQueueItemArrived (System.Workflow.ComponentModel.IActivityEventListener<System.Workflow.ComponentModel.QueueEventArgs> eventListener);
    parameters:
    - id: eventListener
      type: System.Workflow.ComponentModel.IActivityEventListener{System.Workflow.ComponentModel.QueueEventArgs}
      description: "En prenumerant för <xref href=&quot;System.Workflow.ComponentModel.QueueEventArgs&quot;> </xref> som implementerar det &lt;xref:System.Workflow.ComponentModel.IActivityEventListener%601&gt; gränssnitt."
  overload: System.Workflow.Runtime.WorkflowQueue.RegisterForQueueItemArrived*
  exceptions: []
  platform:
  - net462
- uid: System.Workflow.Runtime.WorkflowQueue.RegisterForQueueItemAvailable(System.Workflow.ComponentModel.IActivityEventListener{System.Workflow.ComponentModel.QueueEventArgs})
  id: RegisterForQueueItemAvailable(System.Workflow.ComponentModel.IActivityEventListener{System.Workflow.ComponentModel.QueueEventArgs})
  parent: System.Workflow.Runtime.WorkflowQueue
  langs:
  - csharp
  name: RegisterForQueueItemAvailable(IActivityEventListener<QueueEventArgs>)
  nameWithType: WorkflowQueue.RegisterForQueueItemAvailable(IActivityEventListener<QueueEventArgs>)
  fullName: System.Workflow.Runtime.WorkflowQueue.RegisterForQueueItemAvailable(IActivityEventListener<QueueEventArgs>)
  type: Method
  assemblies:
  - System.Workflow.Runtime
  namespace: System.Workflow.Runtime
  summary: "Registrerar en prenumerant till den <xref href=&quot;System.Workflow.Runtime.WorkflowQueue.QueueItemAvailable&quot;> </xref> händelse."
  remarks: ''
  example:
  - "The following code example demonstrates how you can create a <xref:System.Workflow.Runtime.WorkflowQueue> by calling the <xref:System.Workflow.Runtime.WorkflowQueuingService.GetWorkflowQueue%2A?displayProperty=fullName> method. It also uses the RegisterForQueueItemAvailable to register the specified listener.  \n  \n This code example is part of the File Watcher Activity SDK Sample from the FileSystemEvent.cs file. For more information, see [File System Watcher Activity](http://msdn.microsoft.com/en-us/5442b63a-bdad-43d0-b7cf-f0b5d8b56a99).  \n  \n [!code-cs[WF_Samples#225](~/add/codesnippet/csharp/wf_snippets/snippets24.cs#225)]\n [!code-vb[WF_Samples#225](~/add/codesnippet/visualbasic/wf_snippets/snippets24.vb#225)]"
  syntax:
    content: public void RegisterForQueueItemAvailable (System.Workflow.ComponentModel.IActivityEventListener<System.Workflow.ComponentModel.QueueEventArgs> eventListener);
    parameters:
    - id: eventListener
      type: System.Workflow.ComponentModel.IActivityEventListener{System.Workflow.ComponentModel.QueueEventArgs}
      description: "En prenumerant för <xref href=&quot;System.Workflow.ComponentModel.QueueEventArgs&quot;> </xref> som implementerar det &lt;xref:System.Workflow.ComponentModel.IActivityEventListener%601&gt; gränssnitt."
  overload: System.Workflow.Runtime.WorkflowQueue.RegisterForQueueItemAvailable*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>eventListener</code>är en null-referens (<xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref> i Visual Basic)."
  platform:
  - net462
- uid: System.Workflow.Runtime.WorkflowQueue.RegisterForQueueItemAvailable(System.Workflow.ComponentModel.IActivityEventListener{System.Workflow.ComponentModel.QueueEventArgs},System.String)
  id: RegisterForQueueItemAvailable(System.Workflow.ComponentModel.IActivityEventListener{System.Workflow.ComponentModel.QueueEventArgs},System.String)
  parent: System.Workflow.Runtime.WorkflowQueue
  langs:
  - csharp
  name: RegisterForQueueItemAvailable(IActivityEventListener<QueueEventArgs>,String)
  nameWithType: WorkflowQueue.RegisterForQueueItemAvailable(IActivityEventListener<QueueEventArgs>,String)
  fullName: System.Workflow.Runtime.WorkflowQueue.RegisterForQueueItemAvailable(IActivityEventListener<QueueEventArgs>,String)
  type: Method
  assemblies:
  - System.Workflow.Runtime
  namespace: System.Workflow.Runtime
  summary: "Registrerar en prenumerant till den <xref href=&quot;System.Workflow.Runtime.WorkflowQueue.QueueItemAvailable&quot;> </xref> händelse."
  remarks: "Om det kvalificerade namnet på aktiviteten prenumerationsapp tillhandahålls av `subscriberQualifiedName`, returneras i <xref:System.Workflow.Runtime.WorkflowQueueInfo.SubscribedActivityNames%2A?displayProperty=fullName>av <xref:System.Workflow.Runtime.WorkflowQueueInfo>som är associerade med den här kön när <xref:System.Workflow.Runtime.WorkflowInstance.GetWorkflowQueueData%2A?displayProperty=fullName>anropas.</xref:System.Workflow.Runtime.WorkflowInstance.GetWorkflowQueueData%2A?displayProperty=fullName> </xref:System.Workflow.Runtime.WorkflowQueueInfo> </xref:System.Workflow.Runtime.WorkflowQueueInfo.SubscribedActivityNames%2A?displayProperty=fullName>"
  syntax:
    content: public void RegisterForQueueItemAvailable (System.Workflow.ComponentModel.IActivityEventListener<System.Workflow.ComponentModel.QueueEventArgs> eventListener, string subscriberQualifiedName);
    parameters:
    - id: eventListener
      type: System.Workflow.ComponentModel.IActivityEventListener{System.Workflow.ComponentModel.QueueEventArgs}
      description: "En prenumerant för <xref href=&quot;System.Workflow.ComponentModel.QueueEventArgs&quot;> </xref> som implementerar det &lt;xref:System.Workflow.ComponentModel.IActivityEventListener%601&gt; gränssnitt."
    - id: subscriberQualifiedName
      type: System.String
      description: "Den <xref:System.Workflow.ComponentModel.Activity.QualifiedName*>av aktiviteten för att prenumerera på den <xref href=&quot;System.Workflow.Runtime.WorkflowQueue.QueueItemAvailable&quot;> </xref> händelse eller en null-referens (<xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref> i Visual Basic).</xref:System.Workflow.ComponentModel.Activity.QualifiedName*>"
  overload: System.Workflow.Runtime.WorkflowQueue.RegisterForQueueItemAvailable*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>eventListener</code>är en null-referens (<xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;></xref>)."
  platform:
  - net462
- uid: System.Workflow.Runtime.WorkflowQueue.UnregisterForQueueItemArrived(System.Workflow.ComponentModel.IActivityEventListener{System.Workflow.ComponentModel.QueueEventArgs})
  id: UnregisterForQueueItemArrived(System.Workflow.ComponentModel.IActivityEventListener{System.Workflow.ComponentModel.QueueEventArgs})
  parent: System.Workflow.Runtime.WorkflowQueue
  langs:
  - csharp
  name: UnregisterForQueueItemArrived(IActivityEventListener<QueueEventArgs>)
  nameWithType: WorkflowQueue.UnregisterForQueueItemArrived(IActivityEventListener<QueueEventArgs>)
  fullName: System.Workflow.Runtime.WorkflowQueue.UnregisterForQueueItemArrived(IActivityEventListener<QueueEventArgs>)
  type: Method
  assemblies:
  - System.Workflow.Runtime
  namespace: System.Workflow.Runtime
  summary: "Avregistrerar en prenumerant till den <xref href=&quot;System.Workflow.Runtime.WorkflowQueue.QueueItemArrived&quot;> </xref> händelse."
  remarks: "Den här metoden är reserverad för internt bruk."
  syntax:
    content: public void UnregisterForQueueItemArrived (System.Workflow.ComponentModel.IActivityEventListener<System.Workflow.ComponentModel.QueueEventArgs> eventListener);
    parameters:
    - id: eventListener
      type: System.Workflow.ComponentModel.IActivityEventListener{System.Workflow.ComponentModel.QueueEventArgs}
      description: "En prenumerant för <xref href=&quot;System.Workflow.ComponentModel.QueueEventArgs&quot;> </xref> som implementerar det &lt;xref:System.Workflow.ComponentModel.IActivityEventListener%601&gt; gränssnitt."
  overload: System.Workflow.Runtime.WorkflowQueue.UnregisterForQueueItemArrived*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>eventListener</code>är en null-referens (<xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref> i Visual Basic)."
  platform:
  - net462
- uid: System.Workflow.Runtime.WorkflowQueue.UnregisterForQueueItemAvailable(System.Workflow.ComponentModel.IActivityEventListener{System.Workflow.ComponentModel.QueueEventArgs})
  id: UnregisterForQueueItemAvailable(System.Workflow.ComponentModel.IActivityEventListener{System.Workflow.ComponentModel.QueueEventArgs})
  parent: System.Workflow.Runtime.WorkflowQueue
  langs:
  - csharp
  name: UnregisterForQueueItemAvailable(IActivityEventListener<QueueEventArgs>)
  nameWithType: WorkflowQueue.UnregisterForQueueItemAvailable(IActivityEventListener<QueueEventArgs>)
  fullName: System.Workflow.Runtime.WorkflowQueue.UnregisterForQueueItemAvailable(IActivityEventListener<QueueEventArgs>)
  type: Method
  assemblies:
  - System.Workflow.Runtime
  namespace: System.Workflow.Runtime
  summary: "Avregistrerar en prenumerant till den <xref href=&quot;System.Workflow.Runtime.WorkflowQueue.QueueItemAvailable&quot;> </xref> händelse."
  remarks: ''
  example:
  - "The following code example demonstrates how you can create a <xref:System.Workflow.Runtime.WorkflowQueue> by calling the <xref:System.Workflow.Runtime.WorkflowQueuingService.GetWorkflowQueue%2A?displayProperty=fullName> method. It also uses the UnregisterForQueueItemAvailable to unregister the specified listener.  \n  \n This code example is part of the File Watcher Activity SDK Sample from the FileSystemEvent.cs file. For more information, see [File System Watcher Activity](http://msdn.microsoft.com/en-us/5442b63a-bdad-43d0-b7cf-f0b5d8b56a99).  \n  \n [!code-cs[WF_Samples#226](~/add/codesnippet/csharp/wf_snippets/snippets24.cs#226)]\n [!code-vb[WF_Samples#226](~/add/codesnippet/visualbasic/wf_snippets/snippets24.vb#226)]"
  syntax:
    content: public void UnregisterForQueueItemAvailable (System.Workflow.ComponentModel.IActivityEventListener<System.Workflow.ComponentModel.QueueEventArgs> eventListener);
    parameters:
    - id: eventListener
      type: System.Workflow.ComponentModel.IActivityEventListener{System.Workflow.ComponentModel.QueueEventArgs}
      description: "En prenumerant för <xref href=&quot;System.Workflow.ComponentModel.QueueEventArgs&quot;> </xref> som implementerar det &lt;xref:System.Workflow.ComponentModel.IActivityEventListener%601&gt; gränssnitt."
  overload: System.Workflow.Runtime.WorkflowQueue.UnregisterForQueueItemAvailable*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>eventListener</code>är en null-referens (<xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref> i Visual Basic)."
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.Workflow.Runtime.WorkflowQueue.Count
  parent: System.Workflow.Runtime.WorkflowQueue
  isExternal: false
  name: Count
  nameWithType: WorkflowQueue.Count
  fullName: System.Workflow.Runtime.WorkflowQueue.Count
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Workflow.Runtime.WorkflowQueue.Dequeue
  parent: System.Workflow.Runtime.WorkflowQueue
  isExternal: false
  name: Dequeue()
  nameWithType: WorkflowQueue.Dequeue()
  fullName: System.Workflow.Runtime.WorkflowQueue.Dequeue()
- uid: System.Workflow.Runtime.WorkflowQueue.Enabled
  parent: System.Workflow.Runtime.WorkflowQueue
  isExternal: false
  name: Enabled
  nameWithType: WorkflowQueue.Enabled
  fullName: System.Workflow.Runtime.WorkflowQueue.Enabled
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Workflow.Runtime.WorkflowQueue.Enqueue(System.Object)
  parent: System.Workflow.Runtime.WorkflowQueue
  isExternal: false
  name: Enqueue(Object)
  nameWithType: WorkflowQueue.Enqueue(Object)
  fullName: System.Workflow.Runtime.WorkflowQueue.Enqueue(Object)
- uid: System.Workflow.Runtime.WorkflowQueue.Peek
  parent: System.Workflow.Runtime.WorkflowQueue
  isExternal: false
  name: Peek()
  nameWithType: WorkflowQueue.Peek()
  fullName: System.Workflow.Runtime.WorkflowQueue.Peek()
- uid: System.Workflow.Runtime.WorkflowQueue.QueueItemArrived
  parent: System.Workflow.Runtime.WorkflowQueue
  isExternal: false
  name: QueueItemArrived
  nameWithType: WorkflowQueue.QueueItemArrived
  fullName: System.Workflow.Runtime.WorkflowQueue.QueueItemArrived
- uid: System.EventHandler{System.Workflow.ComponentModel.QueueEventArgs}
  parent: System
  isExternal: true
  name: EventHandler<QueueEventArgs>
  nameWithType: EventHandler<QueueEventArgs>
  fullName: System.EventHandler<System.Workflow.ComponentModel.QueueEventArgs>
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: EventHandler<System.Workflow.ComponentModel.QueueEventArgs>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Workflow.ComponentModel.QueueEventArgs
    name: QueueEventArgs
    nameWithType: QueueEventArgs
    fullName: QueueEventArgs
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Workflow.Runtime.WorkflowQueue.QueueItemAvailable
  parent: System.Workflow.Runtime.WorkflowQueue
  isExternal: false
  name: QueueItemAvailable
  nameWithType: WorkflowQueue.QueueItemAvailable
  fullName: System.Workflow.Runtime.WorkflowQueue.QueueItemAvailable
- uid: System.Workflow.Runtime.WorkflowQueue.QueueName
  parent: System.Workflow.Runtime.WorkflowQueue
  isExternal: false
  name: QueueName
  nameWithType: WorkflowQueue.QueueName
  fullName: System.Workflow.Runtime.WorkflowQueue.QueueName
- uid: System.IComparable
  parent: System
  isExternal: true
  name: IComparable
  nameWithType: IComparable
  fullName: System.IComparable
- uid: System.Workflow.Runtime.WorkflowQueue.QueuingService
  parent: System.Workflow.Runtime.WorkflowQueue
  isExternal: false
  name: QueuingService
  nameWithType: WorkflowQueue.QueuingService
  fullName: System.Workflow.Runtime.WorkflowQueue.QueuingService
- uid: System.Workflow.Runtime.WorkflowQueuingService
  parent: System.Workflow.Runtime
  isExternal: false
  name: WorkflowQueuingService
  nameWithType: WorkflowQueuingService
  fullName: System.Workflow.Runtime.WorkflowQueuingService
- uid: System.Workflow.Runtime.WorkflowQueue.RegisterForQueueItemArrived(System.Workflow.ComponentModel.IActivityEventListener{System.Workflow.ComponentModel.QueueEventArgs})
  parent: System.Workflow.Runtime.WorkflowQueue
  isExternal: false
  name: RegisterForQueueItemArrived(IActivityEventListener<QueueEventArgs>)
  nameWithType: WorkflowQueue.RegisterForQueueItemArrived(IActivityEventListener<QueueEventArgs>)
  fullName: System.Workflow.Runtime.WorkflowQueue.RegisterForQueueItemArrived(IActivityEventListener<QueueEventArgs>)
- uid: System.Workflow.ComponentModel.IActivityEventListener{System.Workflow.ComponentModel.QueueEventArgs}
  parent: System.Workflow.ComponentModel
  isExternal: false
  name: IActivityEventListener<QueueEventArgs>
  nameWithType: IActivityEventListener<QueueEventArgs>
  fullName: System.Workflow.ComponentModel.IActivityEventListener<System.Workflow.ComponentModel.QueueEventArgs>
  spec.csharp:
  - uid: System.Workflow.ComponentModel.IActivityEventListener`1
    name: IActivityEventListener
    nameWithType: IActivityEventListener
    fullName: IActivityEventListener<System.Workflow.ComponentModel.QueueEventArgs>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Workflow.ComponentModel.QueueEventArgs
    name: QueueEventArgs
    nameWithType: QueueEventArgs
    fullName: QueueEventArgs
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Workflow.Runtime.WorkflowQueue.RegisterForQueueItemAvailable(System.Workflow.ComponentModel.IActivityEventListener{System.Workflow.ComponentModel.QueueEventArgs})
  parent: System.Workflow.Runtime.WorkflowQueue
  isExternal: false
  name: RegisterForQueueItemAvailable(IActivityEventListener<QueueEventArgs>)
  nameWithType: WorkflowQueue.RegisterForQueueItemAvailable(IActivityEventListener<QueueEventArgs>)
  fullName: System.Workflow.Runtime.WorkflowQueue.RegisterForQueueItemAvailable(IActivityEventListener<QueueEventArgs>)
- uid: System.Workflow.Runtime.WorkflowQueue.RegisterForQueueItemAvailable(System.Workflow.ComponentModel.IActivityEventListener{System.Workflow.ComponentModel.QueueEventArgs},System.String)
  parent: System.Workflow.Runtime.WorkflowQueue
  isExternal: false
  name: RegisterForQueueItemAvailable(IActivityEventListener<QueueEventArgs>,String)
  nameWithType: WorkflowQueue.RegisterForQueueItemAvailable(IActivityEventListener<QueueEventArgs>,String)
  fullName: System.Workflow.Runtime.WorkflowQueue.RegisterForQueueItemAvailable(IActivityEventListener<QueueEventArgs>,String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Workflow.Runtime.WorkflowQueue.UnregisterForQueueItemArrived(System.Workflow.ComponentModel.IActivityEventListener{System.Workflow.ComponentModel.QueueEventArgs})
  parent: System.Workflow.Runtime.WorkflowQueue
  isExternal: false
  name: UnregisterForQueueItemArrived(IActivityEventListener<QueueEventArgs>)
  nameWithType: WorkflowQueue.UnregisterForQueueItemArrived(IActivityEventListener<QueueEventArgs>)
  fullName: System.Workflow.Runtime.WorkflowQueue.UnregisterForQueueItemArrived(IActivityEventListener<QueueEventArgs>)
- uid: System.Workflow.Runtime.WorkflowQueue.UnregisterForQueueItemAvailable(System.Workflow.ComponentModel.IActivityEventListener{System.Workflow.ComponentModel.QueueEventArgs})
  parent: System.Workflow.Runtime.WorkflowQueue
  isExternal: false
  name: UnregisterForQueueItemAvailable(IActivityEventListener<QueueEventArgs>)
  nameWithType: WorkflowQueue.UnregisterForQueueItemAvailable(IActivityEventListener<QueueEventArgs>)
  fullName: System.Workflow.Runtime.WorkflowQueue.UnregisterForQueueItemAvailable(IActivityEventListener<QueueEventArgs>)
- uid: System.Workflow.Runtime.WorkflowQueue.Count*
  parent: System.Workflow.Runtime.WorkflowQueue
  isExternal: false
  name: Count
  nameWithType: WorkflowQueue.Count
- uid: System.Workflow.Runtime.WorkflowQueue.Dequeue*
  parent: System.Workflow.Runtime.WorkflowQueue
  isExternal: false
  name: Dequeue
  nameWithType: WorkflowQueue.Dequeue
- uid: System.Workflow.Runtime.WorkflowQueue.Enabled*
  parent: System.Workflow.Runtime.WorkflowQueue
  isExternal: false
  name: Enabled
  nameWithType: WorkflowQueue.Enabled
- uid: System.Workflow.Runtime.WorkflowQueue.Enqueue*
  parent: System.Workflow.Runtime.WorkflowQueue
  isExternal: false
  name: Enqueue
  nameWithType: WorkflowQueue.Enqueue
- uid: System.Workflow.Runtime.WorkflowQueue.Peek*
  parent: System.Workflow.Runtime.WorkflowQueue
  isExternal: false
  name: Peek
  nameWithType: WorkflowQueue.Peek
- uid: System.Workflow.Runtime.WorkflowQueue.QueueName*
  parent: System.Workflow.Runtime.WorkflowQueue
  isExternal: false
  name: QueueName
  nameWithType: WorkflowQueue.QueueName
- uid: System.Workflow.Runtime.WorkflowQueue.QueuingService*
  parent: System.Workflow.Runtime.WorkflowQueue
  isExternal: false
  name: QueuingService
  nameWithType: WorkflowQueue.QueuingService
- uid: System.Workflow.Runtime.WorkflowQueue.RegisterForQueueItemArrived*
  parent: System.Workflow.Runtime.WorkflowQueue
  isExternal: false
  name: RegisterForQueueItemArrived
  nameWithType: WorkflowQueue.RegisterForQueueItemArrived
- uid: System.Workflow.Runtime.WorkflowQueue.RegisterForQueueItemAvailable*
  parent: System.Workflow.Runtime.WorkflowQueue
  isExternal: false
  name: RegisterForQueueItemAvailable
  nameWithType: WorkflowQueue.RegisterForQueueItemAvailable
- uid: System.Workflow.Runtime.WorkflowQueue.UnregisterForQueueItemArrived*
  parent: System.Workflow.Runtime.WorkflowQueue
  isExternal: false
  name: UnregisterForQueueItemArrived
  nameWithType: WorkflowQueue.UnregisterForQueueItemArrived
- uid: System.Workflow.Runtime.WorkflowQueue.UnregisterForQueueItemAvailable*
  parent: System.Workflow.Runtime.WorkflowQueue
  isExternal: false
  name: UnregisterForQueueItemAvailable
  nameWithType: WorkflowQueue.UnregisterForQueueItemAvailable
