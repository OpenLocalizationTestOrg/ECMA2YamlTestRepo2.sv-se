### YamlMime:ManagedReference
items:
- uid: System.Diagnostics.ProcessModule
  id: ProcessModule
  children:
  - System.Diagnostics.ProcessModule.BaseAddress
  - System.Diagnostics.ProcessModule.EntryPointAddress
  - System.Diagnostics.ProcessModule.FileName
  - System.Diagnostics.ProcessModule.FileVersionInfo
  - System.Diagnostics.ProcessModule.ModuleMemorySize
  - System.Diagnostics.ProcessModule.ModuleName
  - System.Diagnostics.ProcessModule.ToString
  langs:
  - csharp
  name: ProcessModule
  nameWithType: ProcessModule
  fullName: System.Diagnostics.ProcessModule
  type: Class
  summary: "Representerar a.dll eller .exe-fil som läses in i en viss process."
  remarks: "En modul är en körbar fil eller dynamiska länkbibliotek (DLL). Varje process består av en eller flera moduler. Du kan använda den här klassen för att få information om modulen.      > [!IMPORTANT] > Den här typen implementerar den <xref:System.IDisposable>gränssnitt.</xref:System.IDisposable> När du är klar med typ, ta bort den direkt eller indirekt. Om du vill ta bort av typen direkt, anropa dess <xref:System.IDisposable.Dispose%2A>metod i en `try` / `catch` block.</xref:System.IDisposable.Dispose%2A> Om du vill ta hand om den indirekt, använda en språk-konstruktion som `using` (i C#) eller `Using` (i Visual Basic). Mer information finns i avsnittet &quot;Med hjälp av ett objekt som implementerar IDisposable&quot; i den <xref:System.IDisposable>gränssnittet avsnittet.</xref:System.IDisposable>"
  example:
  - "The following code sample demonstrates how to use the ProcessModule class to get and display information about all the modules that are used by the Notepad.exe application.  \n  \n [!code-cpp[ProcessModule#1](~/add/codesnippet/cpp/t-system.diagnostics.pro_0_1.cpp)]\n [!code-cs[ProcessModule#1](~/add/codesnippet/csharp/t-system.diagnostics.pro_0_1.cs)]\n [!code-vb[ProcessModule#1](~/add/codesnippet/visualbasic/t-system.diagnostics.pro_0_1.vb)]"
  syntax:
    content: >-
      [System.ComponentModel.Designer("System.Diagnostics.Design.ProcessModuleDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]

      public class ProcessModule : System.ComponentModel.Component
  inheritance:
  - System.Object
  - System.MarshalByRefObject
  - System.ComponentModel.Component
  implements: []
  inheritedMembers:
  - System.ComponentModel.Component.CanRaiseEvents
  - System.ComponentModel.Component.Container
  - System.ComponentModel.Component.DesignMode
  - System.ComponentModel.Component.Dispose
  - System.ComponentModel.Component.Dispose(System.Boolean)
  - System.ComponentModel.Component.Disposed
  - System.ComponentModel.Component.Events
  - System.ComponentModel.Component.GetService(System.Type)
  - System.ComponentModel.Component.Site
  - System.MarshalByRefObject.CreateObjRef(System.Type)
  - System.MarshalByRefObject.GetLifetimeService
  - System.MarshalByRefObject.InitializeLifetimeService
  - System.MarshalByRefObject.MemberwiseClone(System.Boolean)
  platform:
  - net462
- uid: System.Diagnostics.ProcessModule.BaseAddress
  id: BaseAddress
  parent: System.Diagnostics.ProcessModule
  langs:
  - csharp
  name: BaseAddress
  nameWithType: ProcessModule.BaseAddress
  fullName: System.Diagnostics.ProcessModule.BaseAddress
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Hämtar minnesadressen som modulen lästes in."
  remarks: ''
  example:
  - "The following code example creates a new process for the Notepad.exe application. The code iterates through the <xref:System.Diagnostics.ProcessModuleCollection> class to obtain a <xref:System.Diagnostics.ProcessModule> object for each module in the collection. The <xref:System.Diagnostics.ProcessModule.ModuleName%2A> and  BaseAddress properties are used to display the module name and the memory address where each module was loaded.  \n  \n [!code-cpp[ProcessModule_BaseAddress#1](~/add/codesnippet/cpp/p-system.diagnostics.pro_30_1.cpp)]\n [!code-vb[ProcessModule_BaseAddress#1](~/add/codesnippet/visualbasic/p-system.diagnostics.pro_30_1.vb)]\n [!code-cs[ProcessModule_BaseAddress#1](~/add/codesnippet/csharp/p-system.diagnostics.pro_30_1.cs)]"
  syntax:
    content: public IntPtr BaseAddress { get; }
    return:
      type: System.IntPtr
      description: "Läs in adressen till modulen."
  overload: System.Diagnostics.ProcessModule.BaseAddress*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.ProcessModule.EntryPointAddress
  id: EntryPointAddress
  parent: System.Diagnostics.ProcessModule
  langs:
  - csharp
  name: EntryPointAddress
  nameWithType: ProcessModule.EntryPointAddress
  fullName: System.Diagnostics.ProcessModule.EntryPointAddress
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Hämtar minnesadressen för den funktion som körs när systemet läser in och kör modulen."
  remarks: "Modulens startadressen är platsen för den funktion som anropas under processen startades, tråden startades, processavstängning och tråd avstängning. Startpunkten är inte adressen för funktionen DllMain, bör vara tillräckligt för de flesta ändamål nära.      > [!NOTE] > På grund av ändringar på sätt att laddas sammansättningar EntryPointAddress returnerar alltid 0 på [!INCLUDE[win8](~/add/includes/ajax-current-ext-md.md)] eller [!INCLUDE[win81](~/add/includes/ajax-current-ext-md.md)] och bör inte förlita sig på för dessa plattformar."
  example:
  - "The following code example creates a new process for the Notepad.exe application. The code iterates through the <xref:System.Diagnostics.ProcessModuleCollection> class to obtain a <xref:System.Diagnostics.ProcessModule> object for each module in the collection. The <xref:System.Diagnostics.ProcessModule.ModuleName%2A> and EntryPointAddress properties are used to display the name and the entry point address for each module.  \n  \n [!code-cpp[ProcessModule_EntryPoint#1](~/add/codesnippet/cpp/p-system.diagnostics.pro_4_1.cpp)]\n [!code-cs[ProcessModule_EntryPoint#1](~/add/codesnippet/csharp/p-system.diagnostics.pro_4_1.cs)]\n [!code-vb[ProcessModule_EntryPoint#1](~/add/codesnippet/visualbasic/p-system.diagnostics.pro_4_1.vb)]"
  syntax:
    content: public IntPtr EntryPointAddress { get; }
    return:
      type: System.IntPtr
      description: "Startadress i modulen."
  overload: System.Diagnostics.ProcessModule.EntryPointAddress*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.ProcessModule.FileName
  id: FileName
  parent: System.Diagnostics.ProcessModule
  langs:
  - csharp
  name: FileName
  nameWithType: ProcessModule.FileName
  fullName: System.Diagnostics.ProcessModule.FileName
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Hämtar den fullständiga sökvägen till modulen."
  remarks: "Om namnet är längre än det maximala antalet tillåtna tecken trunkeras filnamnet."
  example:
  - "The following code example creates a new process for the Notepad.exe application. The code iterates through the <xref:System.Diagnostics.ProcessModuleCollection> class to obtain a <xref:System.Diagnostics.ProcessModule> object for each module in the collection. The <xref:System.Diagnostics.ProcessModule.ModuleName%2A> and FileName properties are used to display the module name and the full path information for each module.  \n  \n [!code-cs[ProcessModule_FileName#1](~/add/codesnippet/csharp/p-system.diagnostics.pro_5_1.cs)]\n [!code-cpp[ProcessModule_FileName#1](~/add/codesnippet/cpp/p-system.diagnostics.pro_5_1.cpp)]\n [!code-vb[ProcessModule_FileName#1](~/add/codesnippet/visualbasic/p-system.diagnostics.pro_5_1.vb)]"
  syntax:
    content: public string FileName { get; }
    return:
      type: System.String
      description: "Den fullständiga sökvägen som anger var i modulen."
  overload: System.Diagnostics.ProcessModule.FileName*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.ProcessModule.FileVersionInfo
  id: FileVersionInfo
  parent: System.Diagnostics.ProcessModule
  langs:
  - csharp
  name: FileVersionInfo
  nameWithType: ProcessModule.FileVersionInfo
  fullName: System.Diagnostics.ProcessModule.FileVersionInfo
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Hämtar versionsinformation om modulen."
  remarks: ''
  example:
  - "The following code example creates a new process for the Notepad.exe application. The code iterates through the <xref:System.Diagnostics.ProcessModuleCollection> class to obtain a <xref:System.Diagnostics.ProcessModule> object for each module in the collection. The <xref:System.Diagnostics.ProcessModule.ModuleName%2A> and FileVersionInfo properties are used to display the module name and the file version information for each module.  \n  \n [!code-cs[ProcessModule_FileVersionInfo#1](~/add/codesnippet/csharp/p-system.diagnostics.pro_1_1.cs)]\n [!code-cpp[ProcessModule_FileVersionInfo#1](~/add/codesnippet/cpp/p-system.diagnostics.pro_1_1.cpp)]\n [!code-vb[ProcessModule_FileVersionInfo#1](~/add/codesnippet/visualbasic/p-system.diagnostics.pro_1_1.vb)]"
  syntax:
    content: public System.Diagnostics.FileVersionInfo FileVersionInfo { get; }
    return:
      type: System.Diagnostics.FileVersionInfo
      description: "En <xref href=&quot;System.Diagnostics.FileVersionInfo&quot;> </xref> som innehåller version modulinformation."
  overload: System.Diagnostics.ProcessModule.FileVersionInfo*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.ProcessModule.ModuleMemorySize
  id: ModuleMemorySize
  parent: System.Diagnostics.ProcessModule
  langs:
  - csharp
  name: ModuleMemorySize
  nameWithType: ProcessModule.ModuleMemorySize
  fullName: System.Diagnostics.ProcessModule.ModuleMemorySize
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Hämtar mängden minne som krävs för att läsa in modulen."
  remarks: "ModuleMemorySize innehåller inte några ytterligare minnesallokering som modulen gör när den körs på. den innehåller endast storleken på statisk koden och data i modulfilen."
  example:
  - "The following code example creates a new process for the Notepad.exe application. The code iterates through the <xref:System.Diagnostics.ProcessModuleCollection> class to obtain a <xref:System.Diagnostics.ProcessModule> object for each module in the collection. The <xref:System.Diagnostics.ProcessModule.ModuleName%2A> and ModuleMemorySize properties are used to display the module name and the amount of memory needed for each module.  \n  \n [!code-vb[ProcessModule_ModuleMemorySize#1](~/add/codesnippet/visualbasic/p-system.diagnostics.pro_16_1.vb)]\n [!code-cs[ProcessModule_ModuleMemorySize#1](~/add/codesnippet/csharp/p-system.diagnostics.pro_16_1.cs)]\n [!code-cpp[ProcessModule_ModuleMemorySize#1](~/add/codesnippet/cpp/p-system.diagnostics.pro_16_1.cpp)]"
  syntax:
    content: public int ModuleMemorySize { get; }
    return:
      type: System.Int32
      description: "Storlek i byte av minne som är inrymd i modulen."
  overload: System.Diagnostics.ProcessModule.ModuleMemorySize*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.ProcessModule.ModuleName
  id: ModuleName
  parent: System.Diagnostics.ProcessModule
  langs:
  - csharp
  name: ModuleName
  nameWithType: ProcessModule.ModuleName
  fullName: System.Diagnostics.ProcessModule.ModuleName
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Hämtar namnet på processmodulen som."
  remarks: "Om namnet är längre än det maximala antalet tillåtna tecken trunkeras."
  example:
  - "The following code example creates a new process for the Notepad.exe application. The code iterates through the <xref:System.Diagnostics.ProcessModuleCollection> class to obtain a <xref:System.Diagnostics.ProcessModule> object for each module in the collection. The ModuleName property is used to display the name of each module.  \n  \n [!code-vb[ProcessModule_ModuleName#1](~/add/codesnippet/visualbasic/p-system.diagnostics.pro_8_1.vb)]\n [!code-cs[ProcessModule_ModuleName#1](~/add/codesnippet/csharp/p-system.diagnostics.pro_8_1.cs)]\n [!code-cpp[ProcessModule_ModuleName#1](~/add/codesnippet/cpp/p-system.diagnostics.pro_8_1.cpp)]"
  syntax:
    content: public string ModuleName { get; }
    return:
      type: System.String
      description: "Namnet på modulen."
  overload: System.Diagnostics.ProcessModule.ModuleName*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.ProcessModule.ToString
  id: ToString
  parent: System.Diagnostics.ProcessModule
  langs:
  - csharp
  name: ToString()
  nameWithType: ProcessModule.ToString()
  fullName: System.Diagnostics.ProcessModule.ToString()
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Konverterar modulens namn till en sträng."
  remarks: ''
  example:
  - "The following code example creates a new process for the Notepad.exe application. The code iterates through the <xref:System.Diagnostics.ProcessModuleCollection> class to obtain a <xref:System.Diagnostics.ProcessModule> object for each module in the collection. The ToString method is used to display the name for each module.  \n  \n [!code-cs[ProcessModule_ToString#1](~/add/codesnippet/csharp/m-system.diagnostics.pro_5_1.cs)]\n [!code-vb[ProcessModule_ToString#1](~/add/codesnippet/visualbasic/m-system.diagnostics.pro_5_1.vb)]\n [!code-cpp[ProcessModule_ToString#1](~/add/codesnippet/cpp/m-system.diagnostics.pro_5_1.cpp)]"
  syntax:
    content: public override string ToString ();
    parameters: []
    return:
      type: System.String
      description: "Värdet för den <xref:System.Diagnostics.ProcessModule.ModuleName*>egenskapen.</xref:System.Diagnostics.ProcessModule.ModuleName*>"
  overload: System.Diagnostics.ProcessModule.ToString*
  exceptions: []
  platform:
  - net462
references:
- uid: System.ComponentModel.Component
  isExternal: false
  name: System.ComponentModel.Component
- uid: System.Diagnostics.ProcessModule.BaseAddress
  parent: System.Diagnostics.ProcessModule
  isExternal: false
  name: BaseAddress
  nameWithType: ProcessModule.BaseAddress
  fullName: System.Diagnostics.ProcessModule.BaseAddress
- uid: System.IntPtr
  parent: System
  isExternal: true
  name: IntPtr
  nameWithType: IntPtr
  fullName: System.IntPtr
- uid: System.Diagnostics.ProcessModule.EntryPointAddress
  parent: System.Diagnostics.ProcessModule
  isExternal: false
  name: EntryPointAddress
  nameWithType: ProcessModule.EntryPointAddress
  fullName: System.Diagnostics.ProcessModule.EntryPointAddress
- uid: System.Diagnostics.ProcessModule.FileName
  parent: System.Diagnostics.ProcessModule
  isExternal: false
  name: FileName
  nameWithType: ProcessModule.FileName
  fullName: System.Diagnostics.ProcessModule.FileName
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Diagnostics.ProcessModule.FileVersionInfo
  parent: System.Diagnostics.ProcessModule
  isExternal: false
  name: FileVersionInfo
  nameWithType: ProcessModule.FileVersionInfo
  fullName: System.Diagnostics.ProcessModule.FileVersionInfo
- uid: System.Diagnostics.FileVersionInfo
  parent: System.Diagnostics
  isExternal: false
  name: FileVersionInfo
  nameWithType: FileVersionInfo
  fullName: System.Diagnostics.FileVersionInfo
- uid: System.Diagnostics.ProcessModule.ModuleMemorySize
  parent: System.Diagnostics.ProcessModule
  isExternal: false
  name: ModuleMemorySize
  nameWithType: ProcessModule.ModuleMemorySize
  fullName: System.Diagnostics.ProcessModule.ModuleMemorySize
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Diagnostics.ProcessModule.ModuleName
  parent: System.Diagnostics.ProcessModule
  isExternal: false
  name: ModuleName
  nameWithType: ProcessModule.ModuleName
  fullName: System.Diagnostics.ProcessModule.ModuleName
- uid: System.Diagnostics.ProcessModule.ToString
  parent: System.Diagnostics.ProcessModule
  isExternal: false
  name: ToString()
  nameWithType: ProcessModule.ToString()
  fullName: System.Diagnostics.ProcessModule.ToString()
- uid: System.Diagnostics.ProcessModule.BaseAddress*
  parent: System.Diagnostics.ProcessModule
  isExternal: false
  name: BaseAddress
  nameWithType: ProcessModule.BaseAddress
- uid: System.Diagnostics.ProcessModule.EntryPointAddress*
  parent: System.Diagnostics.ProcessModule
  isExternal: false
  name: EntryPointAddress
  nameWithType: ProcessModule.EntryPointAddress
- uid: System.Diagnostics.ProcessModule.FileName*
  parent: System.Diagnostics.ProcessModule
  isExternal: false
  name: FileName
  nameWithType: ProcessModule.FileName
- uid: System.Diagnostics.ProcessModule.FileVersionInfo*
  parent: System.Diagnostics.ProcessModule
  isExternal: false
  name: FileVersionInfo
  nameWithType: ProcessModule.FileVersionInfo
- uid: System.Diagnostics.ProcessModule.ModuleMemorySize*
  parent: System.Diagnostics.ProcessModule
  isExternal: false
  name: ModuleMemorySize
  nameWithType: ProcessModule.ModuleMemorySize
- uid: System.Diagnostics.ProcessModule.ModuleName*
  parent: System.Diagnostics.ProcessModule
  isExternal: false
  name: ModuleName
  nameWithType: ProcessModule.ModuleName
- uid: System.Diagnostics.ProcessModule.ToString*
  parent: System.Diagnostics.ProcessModule
  isExternal: false
  name: ToString
  nameWithType: ProcessModule.ToString
