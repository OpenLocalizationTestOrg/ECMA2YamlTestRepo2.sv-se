### YamlMime:ManagedReference
items:
- uid: System.Windows.Forms.SendKeys
  id: SendKeys
  children:
  - System.Windows.Forms.SendKeys.Flush
  - System.Windows.Forms.SendKeys.Send(System.String)
  - System.Windows.Forms.SendKeys.SendWait(System.String)
  langs:
  - csharp
  name: SendKeys
  nameWithType: SendKeys
  fullName: System.Windows.Forms.SendKeys
  type: Class
  summary: "Innehåller metoder för att skicka tangenttryckningar till ett program."
  remarks: "Använd SendKeys för att skicka tangenttryckningar och formulärmanipulation kombinationer för att det aktiva programmet. Den här klassen kan inte initieras. Om du vill skicka en tangenttryckning till en klass och fortsätta direkt i ditt program, använder du <xref:System.Windows.Forms.SendKeys.Send%2A>.</xref:System.Windows.Forms.SendKeys.Send%2A> Om du vill vänta tills alla processer som startas av tangenttryckningen Använd <xref:System.Windows.Forms.SendKeys.SendWait%2A>.</xref:System.Windows.Forms.SendKeys.SendWait%2A>       Varje nyckel representeras av ett eller flera tecken. Om du vill ange tecknet tangentbord, använder du själva tecknet. Till exempel för att representera bokstaven A skickar du i strängen &quot;A&quot; till metoden. Lägg till varje ytterligare tecken till den föregående för att representera mer än ett tecken. Ange parametern för att representera bokstäverna A, B och C som &quot;ABC&quot;.       Har speciella betydelser till SendKeys plustecken (+), hatt (^), procenttecken (%), tilde (~) och parenteser (). Om du vill ange ett av dessa tecken omger du det inom klammerparenteser ({}). Använd till exempel &quot;{+}&quot; om du vill ange tecknet. Ange klammerparentes tecken, Använd &quot;{{}&quot; och &quot;{}}&quot;. Hakparenteser ([]) har ingen särskild innebörd för SendKeys, men måste de omges av klammerparenteser. I andra program har hakparenteser en särskild innebörd som kan vara betydande när dynamiska data DDE (exchange) inträffar.      > [!CAUTION] > Om programmet är avsett för internationella med en rad olika tangentbord, användning av <xref:System.Windows.Forms.SendKeys.Send%2A>kan ge oväntade resultat och bör undvikas.</xref:System.Windows.Forms.SendKeys.Send%2A>       Tecken som inte visas när du trycker på en nyckel, till exempel RETUR eller TABB och nycklar som motsvarar de åtgärder i stället för tecken, Använd de som finns i följande tabell.      | Nyckel | Koden |   |---------|----------|   | BACKSTEG | {BACKSTEG}, {BS} eller {BKSP} |   | BRYT | {BRYT} |   | CAPSLOCK | {CAPSLOCK} |   | DEL eller ta bort | {Ta bort} eller {DEL} |   | NEDPIL | {NED} |   | END | {SLUTET} |   | ANGE | {Ange} eller ~ |   | ESC | {ESC} |   | HJÄLP | {HJÄLPA} |   | START | {START} |   | Moduler eller infoga | {Infoga} eller {moduler} |   | VÄNSTERPIL | {LEFT} |   | NUMLOCK | {NUMLOCK} |   | PGDN | {PGDN} |   | SIDAN KONFIGURERA | {PGUP} |   | PRINT SCREEN | {TANGENTEN HETA PRTSC} (reserverad för framtida bruk) |   | HÖGERPIL | {HÖGER} |   | RULLNINGSLÅS | {SCROLLLOCK} |   | FLIKEN | {FLIKEN} |   | UPPIL | {UPP} |   | F1 | {F1} |   | F2 | {F2} |   | F3 | {F3} |   | F4 | {F4} |   | F5 | {F5} |   | F6 | {F6} |   | F7 | {F7} |   | F8 | {F8} |   | F9 | {F9} |   | F10 | {F10} |   | F11 | {F11} |   | F12 | {F12} |   | F13 | {F13} |   | F14 | {F14} |   | F15 | {F15} |   | F16 | {F16} |   | Lägg till tangentbordet | {LÄGGA TILL} |   | Tangentbordet subtrahera | {SUBTRAHERA} |   | Tangentbordet multiplicera | {MULTIPLICERA} |   | Tangentbordet division | {DELA} |       Om du vill ange nycklar som kombineras med valfri kombination av SKIFT, CTRL och ALT-tangenterna före viktiga koden med en eller flera av följande koder.      | Nyckel | Koden |   |---------|----------|   | SKIFT | + |   | CTRL | ^ |   | ALT | % |       Om du vill ange att valfri kombination av SKIFT och CTRL ALT bör behållas medan andra nycklar trycks ned omges av koden för dessa nycklar parenteser. Till exempel vill ange för att hålla ned SKIFT medan E och C trycks ned, använda &quot;+ (EC)&quot;. Om du vill ange för att hålla ned SKIFT medan E trycks ned, följt av C utan SKIFT, &quot;+ EC&quot;.       Använd formatet {nyckel number} upprepas nycklar. Du måste placera ett blanksteg mellan nyckel och nummer. {LEFT 42} innebär till exempel trycka på tangenten VÄNSTERPIL 42 gånger. {h 10} innebär tryck på H 10 gånger.      > [!NOTE] > Eftersom det finns ingen hanterade metod för att aktivera ett annat program, kan du antingen använda den här klassen i det aktuella programmet eller använda intern Windows-metoder som `FindWindow` och `SetForegroundWindow`, för att tvinga fokus på andra program.      > [!NOTE] > I SendKeys-klassen har uppdaterats för .NET Framework 3.0 att aktivera används i program som körs på Windows Vista. Förbättrad säkerhet i Windows Vista (kallas även User Account Control eller UAC) förhindrar att den tidigare implementeringen inte fungerar som förväntat.   >> SendKeys-klassen kan timingproblem vissa utvecklare har varit tvungna att kringgå. Den uppdaterade implementeringen är fortfarande sårbara för timingproblem, men är något snabbare och kan kräva ändringar lösningarna. SendKeys-klassen försöker först använda den tidigare implementeringen och om problemet kvarstår använder den nya implementeringen. Därför kan SendKeys-klassen fungera annorlunda på olika operativsystem. Dessutom när SendKeys-klassen använder den nya implementeringen i <xref:System.Windows.Forms.SendKeys.SendWait%2A>metoden väntar inte på meddelanden som ska bearbetas när de skickas till en annan process.</xref:System.Windows.Forms.SendKeys.SendWait%2A>   >> Om programmet är beroende av konsekvent beteende oberoende av operativsystemet, kan du tvinga SendKeys-klass för att använda den nya implementeringen genom att lägga till följande inställningen app.config-fil.   >> `<appSettings>` >> `<add key=&quot;SendKeys&quot; value=&quot;SendInput&quot;/>` >> `</appSettings>` >> Om du vill tvinga SendKeys-klass för att använda den tidigare implementeringen, använder du värdet `&quot;JournalHook&quot;` i stället."
  example:
  - "The following code example demonstrates how to use the <xref:System.Windows.Forms.SendKeys.Send%2A> method. To run the example, paste the following code in a form called Form1 containing a button called Button1. Ensure the click events are associated with their event-handling methods in this example. The button control's <xref:System.Windows.Forms.Control.TabIndex%2A> property should be set to 0. When the example is running, double-click the form to trigger the button's click event.  \n  \n [!code-cs[System.Windows.Forms.SendKeys#1](~/add/codesnippet/csharp/t-system.windows.forms.s_16_1.cs)]\n [!code-cpp[System.Windows.Forms.SendKeys#1](~/add/codesnippet/cpp/t-system.windows.forms.s_16_1.cpp)]\n [!code-vb[System.Windows.Forms.SendKeys#1](~/add/codesnippet/visualbasic/t-system.windows.forms.s_16_1.vb)]"
  syntax:
    content: public class SendKeys
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Windows.Forms.SendKeys.Flush
  id: Flush
  parent: System.Windows.Forms.SendKeys
  langs:
  - csharp
  name: Flush()
  nameWithType: SendKeys.Flush()
  fullName: System.Windows.Forms.SendKeys.Flush()
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Bearbetar alla Windows-meddelanden som finns i meddelandekön."
  remarks: "Använd Flush för att vänta på att programmet ska kunna bearbeta tangenttryckningar och andra operativsystem meddelanden i meddelandekön. Detta motsvarar anropar <xref:System.Windows.Forms.Application.DoEvents%2A?displayProperty=fullName>tills det finns inga fler nycklar att bearbeta.</xref:System.Windows.Forms.Application.DoEvents%2A?displayProperty=fullName>      > [!NOTE] > Eftersom det finns ingen hanterade metod för att aktivera ett annat program, kan du antingen använda den här klassen i det aktuella programmet eller använda intern Windows-metoder som `FindWindow` och `SetForegroundWindow`, för att tvinga fokus på andra program."
  syntax:
    content: public static void Flush ();
    parameters: []
  overload: System.Windows.Forms.SendKeys.Flush*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.SendKeys.Send(System.String)
  id: Send(System.String)
  parent: System.Windows.Forms.SendKeys
  langs:
  - csharp
  name: Send(String)
  nameWithType: SendKeys.Send(String)
  fullName: System.Windows.Forms.SendKeys.Send(String)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Skickar tangenttryckningar till det aktiva programmet."
  remarks: "Varje nyckel representeras av ett eller flera tecken. Om du vill ange tecknet tangentbord, använder du själva tecknet. Till exempel för att representera bokstaven A skickar du i strängen &quot;A&quot; till metoden. Lägg till varje ytterligare tecken till den föregående för att representera mer än ett tecken. Ange parametern för att representera bokstäverna A, B och C som &quot;ABC&quot;.       Har speciella betydelser <xref:System.Windows.Forms.SendKeys>.</xref:System.Windows.Forms.SendKeys> plustecken (+), hatt (^), procenttecken (%), tilde (~) och parenteser) Om du vill ange ett av dessa tecken omger du det inom klammerparenteser ({}). Använd till exempel &quot;{+}&quot; om du vill ange tecknet. Ange klammerparentes tecken, Använd &quot;{{}&quot; och &quot;{}}&quot;. Hakparenteser ([]) har ingen särskild innebörd för <xref:System.Windows.Forms.SendKeys>, men måste de omges av klammerparenteser.</xref:System.Windows.Forms.SendKeys> I andra program har hakparenteser en särskild innebörd som kan vara betydande när dynamiska data DDE (exchange) inträffar.      > [!CAUTION] > Om programmet är avsett för internationella med en rad olika tangentbord, skicka kan ge oväntade resultat och bör undvikas.       Tecken som inte visas när du trycker på en nyckel, till exempel RETUR eller TABB och nycklar som motsvarar de åtgärder i stället för tecken, Använd de som finns i följande tabell.      | Nyckel | Koden |   |---------|----------|   | BACKSTEG | {BACKSTEG}, {BS} eller {BKSP} |   | BRYT | {BRYT} |   | CAPSLOCK | {CAPSLOCK} |   | DEL eller ta bort | {Ta bort} eller {DEL} |   | NEDPIL | {NED} |   | END | {SLUTET} |   | ANGE | {Ange} eller ~ |   | ESC | {ESC} |   | HJÄLP | {HJÄLPA} |   | START | {START} |   | Moduler eller infoga | {Infoga} eller {moduler} |   | VÄNSTERPIL | {LEFT} |   | NUMLOCK | {NUMLOCK} |   | PGDN | {PGDN} |   | SIDAN KONFIGURERA | {PGUP} |   | PRINT SCREEN | {TANGENTEN HETA PRTSC} (reserverad för framtida bruk) |   | HÖGERPIL | {HÖGER} |   | RULLNINGSLÅS | {SCROLLLOCK} |   | FLIKEN | {FLIKEN} |   | UPPIL | {UPP} |   | F1 | {F1} |   | F2 | {F2} |   | F3 | {F3} |   | F4 | {F4} |   | F5 | {F5} |   | F6 | {F6} |   | F7 | {F7} |   | F8 | {F8} |   | F9 | {F9} |   | F10 | {F10} |   | F11 | {F11} |   | F12 | {F12} |   | F13 | {F13} |   | F14 | {F14} |   | F15 | {F15} |   | F16 | {F16} |   | Lägg till tangentbordet | {LÄGGA TILL} |   | Tangentbordet subtrahera | {SUBTRAHERA} |   | Tangentbordet multiplicera | {MULTIPLICERA} |   | Tangentbordet division | {DELA} |       Om du vill ange nycklar som kombineras med valfri kombination av SKIFT, CTRL och ALT-tangenterna före viktiga koden med en eller flera av följande koder.      | Nyckel | Koden |   |---------|----------|   | SKIFT | + |   | CTRL | ^ |   | ALT | % |       Om du vill ange att valfri kombination av SKIFT och CTRL ALT bör behållas medan andra nycklar trycks ned omges av koden för dessa nycklar parenteser. Till exempel vill ange för att hålla ned SKIFT medan E och C trycks ned, använda &quot;+ (EC)&quot;. Om du vill ange för att hålla ned SKIFT medan E trycks ned, följt av C utan SKIFT, &quot;+ EC&quot;.       Använd formatet {nyckel number} upprepas nycklar. Du måste placera ett blanksteg mellan nyckel och nummer. {LEFT 42} innebär till exempel trycka på tangenten VÄNSTERPIL 42 gånger. {h 10} innebär tryck på H 10 gånger.      > [!NOTE] > Eftersom det finns ingen hanterade metod för att aktivera ett annat program, kan du antingen använda den här klassen i det aktuella programmet eller använda intern Windows-metoder som `FindWindow` och `SetForegroundWindow`, för att tvinga fokus på andra program.      > [!NOTE] > Den <xref:System.Windows.Forms.SendKeys>klass har uppdaterats för .NET Framework 3.0 att aktivera används i program som körs på Windows Vista.</xref:System.Windows.Forms.SendKeys> Förbättrad säkerhet i Windows Vista (kallas även User Account Control eller UAC) förhindrar att den tidigare implementeringen inte fungerar som förväntat.   >> Det <xref:System.Windows.Forms.SendKeys>klassen är sårbara för timingproblem vissa utvecklare har varit tvungna att kringgå.</xref:System.Windows.Forms.SendKeys> Den uppdaterade implementeringen är fortfarande sårbara för timingproblem, men är något snabbare och kan kräva ändringar lösningarna. Den <xref:System.Windows.Forms.SendKeys>klassen försöker först använda den tidigare implementeringen och om problemet kvarstår använder du den nya implementeringen.</xref:System.Windows.Forms.SendKeys> Därför kan den <xref:System.Windows.Forms.SendKeys>klassen fungera annorlunda på olika operativsystem.</xref:System.Windows.Forms.SendKeys> Dessutom, när den <xref:System.Windows.Forms.SendKeys>klassen använder den nya implementeringen i <xref:System.Windows.Forms.SendKeys.SendWait%2A>metoden väntar inte på meddelanden som ska bearbetas när de skickas till en annan process.</xref:System.Windows.Forms.SendKeys.SendWait%2A> </xref:System.Windows.Forms.SendKeys>   >> Om programmet är beroende av konsekvent beteende oberoende av operativsystemet, kan du tvinga den <xref:System.Windows.Forms.SendKeys>klass för att använda den nya implementeringen genom att lägga till följande inställningen i filen app.config.</xref:System.Windows.Forms.SendKeys>   >> `<appSettings>` >> `<add key=&quot;SendKeys&quot; value=&quot;SendInput&quot;/>` >> `</appSettings>` >> Att tvinga den <xref:System.Windows.Forms.SendKeys>klassen om du vill använda den tidigare implementeringen, använder du värdet `&quot;JournalHook&quot;` i stället.</xref:System.Windows.Forms.SendKeys>"
  example:
  - "The following code example demonstrates how to use the Send method.To run the example, paste the following code in a form called Form1 containing a button called Button1. Ensure the click events are associated with their event-handling methods in this example. The button control's <xref:System.Windows.Forms.Control.TabIndex%2A> property should be set to 0. When the example is running, double-click the form to trigger the button's click event.  \n  \n [!code-cs[System.Windows.Forms.SendKeys#1](~/add/codesnippet/csharp/m-system.windows.forms.s_9_1.cs)]\n [!code-cpp[System.Windows.Forms.SendKeys#1](~/add/codesnippet/cpp/m-system.windows.forms.s_9_1.cpp)]\n [!code-vb[System.Windows.Forms.SendKeys#1](~/add/codesnippet/visualbasic/m-system.windows.forms.s_9_1.vb)]"
  syntax:
    content: public static void Send (string keys);
    parameters:
    - id: keys
      type: System.String
      description: "Sträng av tangenttryckningar att skicka."
  overload: System.Windows.Forms.SendKeys.Send*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Det är inte ett aktivt program att skicka tecken till."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>keys</code>är inte ett giltigt tangenttryckningar"
  platform:
  - net462
- uid: System.Windows.Forms.SendKeys.SendWait(System.String)
  id: SendWait(System.String)
  parent: System.Windows.Forms.SendKeys
  langs:
  - csharp
  name: SendWait(String)
  nameWithType: SendKeys.SendWait(String)
  fullName: System.Windows.Forms.SendKeys.SendWait(String)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Skickar de angivna nycklarna till det aktiva programmet och väntar sedan på meddelanden som ska bearbetas."
  remarks: "Använd SendWait för att skicka tangenttryckningar eller kombinationer av tangenttryckningar till det aktiva programmet och vänta tills tangenttryckning meddelanden som ska bearbetas. Du kan använda den här metoden för att skicka tecken till ett program och vänta tills alla processer som startas av tangenttryckningar ska slutföras. Det kan vara viktigt om det andra programmet måste slutföras innan programmet kan fortsätta.      > [!NOTE] > Eftersom det finns ingen hanterade metod för att aktivera ett annat program, kan du antingen använda den här klassen i det aktuella programmet eller använda intern Windows-metoder som `FindWindow` och `SetForegroundWindow`, för att tvinga fokus på andra program.      > [!NOTE] > Den <xref:System.Windows.Forms.SendKeys>klass har uppdaterats för .NET Framework 3.0 att aktivera används i program som körs på Windows Vista.</xref:System.Windows.Forms.SendKeys> Förbättrad säkerhet i Windows Vista (kallas även User Account Control eller UAC) förhindrar att den tidigare implementeringen inte fungerar som förväntat.   >> Det <xref:System.Windows.Forms.SendKeys>klassen är sårbara för timingproblem vissa utvecklare har varit tvungna att kringgå.</xref:System.Windows.Forms.SendKeys> Den uppdaterade implementeringen är fortfarande sårbara för timingproblem, men är något snabbare och kan kräva ändringar lösningarna. Den <xref:System.Windows.Forms.SendKeys>klassen försöker först använda den tidigare implementeringen och om problemet kvarstår använder du den nya implementeringen.</xref:System.Windows.Forms.SendKeys> Därför kan den <xref:System.Windows.Forms.SendKeys>klassen fungera annorlunda på olika operativsystem.</xref:System.Windows.Forms.SendKeys> Dessutom, när den <xref:System.Windows.Forms.SendKeys>klassen använder den nya implementeringen, metoden SendWait väntar inte på meddelanden som ska bearbetas när de skickas till en annan process.</xref:System.Windows.Forms.SendKeys>   >> Om programmet är beroende av konsekvent beteende oberoende av operativsystemet, kan du tvinga den <xref:System.Windows.Forms.SendKeys>klass för att använda den nya implementeringen genom att lägga till följande inställningen i filen app.config.</xref:System.Windows.Forms.SendKeys>   >> `<appSettings>` >> `<add key=&quot;SendKeys&quot; value=&quot;SendInput&quot;/>` >> `</appSettings>` >> Att tvinga den <xref:System.Windows.Forms.SendKeys>klassen om du vill använda den tidigare implementeringen, använder du värdet `&quot;JournalHook&quot;` i stället.</xref:System.Windows.Forms.SendKeys>"
  syntax:
    content: public static void SendWait (string keys);
    parameters:
    - id: keys
      type: System.String
      description: "Sträng av tangenttryckningar att skicka."
  overload: System.Windows.Forms.SendKeys.SendWait*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.Windows.Forms.SendKeys.Flush
  parent: System.Windows.Forms.SendKeys
  isExternal: false
  name: Flush()
  nameWithType: SendKeys.Flush()
  fullName: System.Windows.Forms.SendKeys.Flush()
- uid: System.Windows.Forms.SendKeys.Send(System.String)
  parent: System.Windows.Forms.SendKeys
  isExternal: false
  name: Send(String)
  nameWithType: SendKeys.Send(String)
  fullName: System.Windows.Forms.SendKeys.Send(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Windows.Forms.SendKeys.SendWait(System.String)
  parent: System.Windows.Forms.SendKeys
  isExternal: false
  name: SendWait(String)
  nameWithType: SendKeys.SendWait(String)
  fullName: System.Windows.Forms.SendKeys.SendWait(String)
- uid: System.Windows.Forms.SendKeys.Flush*
  parent: System.Windows.Forms.SendKeys
  isExternal: false
  name: Flush
  nameWithType: SendKeys.Flush
- uid: System.Windows.Forms.SendKeys.Send*
  parent: System.Windows.Forms.SendKeys
  isExternal: false
  name: Send
  nameWithType: SendKeys.Send
- uid: System.Windows.Forms.SendKeys.SendWait*
  parent: System.Windows.Forms.SendKeys
  isExternal: false
  name: SendWait
  nameWithType: SendKeys.SendWait
