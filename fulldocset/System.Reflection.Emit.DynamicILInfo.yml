### YamlMime:ManagedReference
items:
- uid: System.Reflection.Emit.DynamicILInfo
  id: DynamicILInfo
  children:
  - System.Reflection.Emit.DynamicILInfo.DynamicMethod
  - System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.Byte[])
  - System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.Reflection.Emit.DynamicMethod)
  - System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeFieldHandle)
  - System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeMethodHandle)
  - System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeTypeHandle)
  - System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.String)
  - System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeFieldHandle,System.RuntimeTypeHandle)
  - System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeMethodHandle,System.RuntimeTypeHandle)
  - System.Reflection.Emit.DynamicILInfo.SetCode(System.Byte[],System.Int32)
  - System.Reflection.Emit.DynamicILInfo.SetCode(System.Byte*,System.Int32,System.Int32)
  - System.Reflection.Emit.DynamicILInfo.SetExceptions(System.Byte[])
  - System.Reflection.Emit.DynamicILInfo.SetExceptions(System.Byte*,System.Int32)
  - System.Reflection.Emit.DynamicILInfo.SetLocalSignature(System.Byte[])
  - System.Reflection.Emit.DynamicILInfo.SetLocalSignature(System.Byte*,System.Int32)
  langs:
  - csharp
  name: DynamicILInfo
  nameWithType: DynamicILInfo
  fullName: System.Reflection.Emit.DynamicILInfo
  type: Class
  summary: "Ger stöd för alternativa sätt att generera Microsoft mellanliggande språk (MSIL) och metadata för en dynamisk metod, inklusive metoder för att skapa token och för att infoga kod, undantagshantering och lokal variabel signatur blobbar."
  remarks: "Klassen DynamicILInfo kan utvecklare skriva sina egna MSIL generatorer istället för att använda <xref:System.Reflection.Emit.ILGenerator>.</xref:System.Reflection.Emit.ILGenerator>       Om du vill skapa instanser av andra typer anropa metoder och så vidare, inkludera MSIL du generera token för dessa enheter. DynamicILInfo-klassen innehåller flera överlagringar av den <xref:System.Reflection.Emit.DynamicILInfo.GetTokenFor%2A>metod som returnerar token ogiltig i omfånget för den aktuella DynamicILInfo.</xref:System.Reflection.Emit.DynamicILInfo.GetTokenFor%2A> Om du behöver anropa en överlagring av till exempel den <xref:System.Console.WriteLine%2A?displayProperty=fullName>metoden som du kan hämta en <xref:System.RuntimeMethodHandle>för att överlagra och skicka det till den <xref:System.Reflection.Emit.DynamicILInfo.GetTokenFor%2A>metod för att hämta en token för att bädda in i din MSIL.</xref:System.Reflection.Emit.DynamicILInfo.GetTokenFor%2A> </xref:System.RuntimeMethodHandle> </xref:System.Console.WriteLine%2A?displayProperty=fullName>       När du har skapat <xref:System.Byte>matriser för din lokala variabeln signatur, undantag och brödtext i koden som du kan använda den <xref:System.Reflection.Emit.DynamicILInfo.SetCode%2A>, <xref:System.Reflection.Emit.DynamicILInfo.SetExceptions%2A>, och <xref:System.Reflection.Emit.DynamicILInfo.SetLocalSignature%2A>metoder för att infoga dem till den <xref:System.Reflection.Emit.DynamicMethod>som är associerade med objektet DynamicILInfo.</xref:System.Reflection.Emit.DynamicMethod> </xref:System.Reflection.Emit.DynamicILInfo.SetLocalSignature%2A> </xref:System.Reflection.Emit.DynamicILInfo.SetExceptions%2A> </xref:System.Reflection.Emit.DynamicILInfo.SetCode%2A> </xref:System.Byte>       Generera en egen metadata och MSIL kräver kunskap om Common Language Infrastructure (CLI)-dokumentation, &quot;särskilt Partition II: Metadata Definition och semantik&quot; och &quot;Partition III: CIL instruktion ange&quot;. Dokumentationen finns online. Se [ECMA C# och gemensamma Language Infrastructure standarder](http://go.microsoft.com/fwlink/?LinkID=99212) på MSDN och [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) på Ecma International-webbplatsen.      > [!NOTE] > Inte använder DynamicILInfo för att generera kod som skapar en delegat till en annan dynamisk metod genom att anropa konstruktorn ombud direkt. Använd i stället den <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A>metoden för att skapa delegaten.</xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A> En delegat som skapas med konstruktorn ombud har inte en referens till målet dynamisk metod. Metoden dynamiska kan frigöras genom skräpinsamling medan delegaten fortfarande används."
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public class DynamicILInfo
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Reflection.Emit.DynamicILInfo.DynamicMethod
  id: DynamicMethod
  parent: System.Reflection.Emit.DynamicILInfo
  langs:
  - csharp
  name: DynamicMethod
  nameWithType: DynamicILInfo.DynamicMethod
  fullName: System.Reflection.Emit.DynamicILInfo.DynamicMethod
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: "Hämtar metoden dynamiska vars brödtext genereras av den aktuella instansen."
  remarks: "En <xref:System.Reflection.Emit.DynamicILInfo>objekt alltid är associerat med en dynamisk metod.</xref:System.Reflection.Emit.DynamicILInfo> Syftet med <xref:System.Reflection.Emit.DynamicILInfo>klassen är att ange ett annat sätt att lägga till MSIL stream, undantagshantering, och lokala variabeln signaturen i en dynamisk metod för utvecklare som vill generera MSIL utan att använda <xref:System.Reflection.Emit.ILGenerator>klassen.</xref:System.Reflection.Emit.ILGenerator> </xref:System.Reflection.Emit.DynamicILInfo>"
  syntax:
    content: public System.Reflection.Emit.DynamicMethod DynamicMethod { get; }
    return:
      type: System.Reflection.Emit.DynamicMethod
      description: "En <xref:System.Reflection.Emit.DynamicMethod>-objekt som representerar den dynamiska metoden som aktuellt <xref href=&quot;System.Reflection.Emit.DynamicILInfo&quot;> </xref> objekt kodgenerering.</xref:System.Reflection.Emit.DynamicMethod>"
  overload: System.Reflection.Emit.DynamicILInfo.DynamicMethod*
  exceptions: []
  platform:
  - net462
- uid: System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.Byte[])
  id: GetTokenFor(System.Byte[])
  parent: System.Reflection.Emit.DynamicILInfo
  langs:
  - csharp
  name: GetTokenFor(Byte[])
  nameWithType: DynamicILInfo.GetTokenFor(Byte[])
  fullName: System.Reflection.Emit.DynamicILInfo.GetTokenFor(Byte[])
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: "Hämtar en token som giltiga i omfånget för aktuellt <xref href=&quot;System.Reflection.Emit.DynamicILInfo&quot;> </xref>, som representerar signaturen för metoden associerade dynamisk."
  remarks: 'Information om signatur BLOB dokumentationen Common Language Infrastructure (CLI), särskilt &quot;Partition II: Metadata Definition och semantik&quot;. Dokumentationen finns online. Se [ECMA C# och gemensamma Language Infrastructure standarder](http://go.microsoft.com/fwlink/?LinkID=99212) på MSDN och [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) på Ecma International-webbplatsen.'
  syntax:
    content: public int GetTokenFor (byte[] signature);
    parameters:
    - id: signature
      type: System.Byte[]
      description: "En matris som innehåller signaturen."
    return:
      type: System.Int32
      description: "En token som kan vara inbäddat i metadata och MSIL strömmen för den associera dynamisk metoden."
  overload: System.Reflection.Emit.DynamicILInfo.GetTokenFor*
  exceptions: []
  platform:
  - net462
- uid: System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.Reflection.Emit.DynamicMethod)
  id: GetTokenFor(System.Reflection.Emit.DynamicMethod)
  parent: System.Reflection.Emit.DynamicILInfo
  langs:
  - csharp
  name: GetTokenFor(DynamicMethod)
  nameWithType: DynamicILInfo.GetTokenFor(DynamicMethod)
  fullName: System.Reflection.Emit.DynamicILInfo.GetTokenFor(DynamicMethod)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: "Hämtar en token som giltiga i omfånget för aktuellt <xref href=&quot;System.Reflection.Emit.DynamicILInfo&quot;> </xref>, som representerar en dynamisk metod anropas från den associerade metoden."
  remarks: "Den token som returneras av den här metodöverlagringen kan du anropa en dynamisk metod från dynamisk metod som är associerade med aktuellt <xref:System.Reflection.Emit.DynamicILInfo>objektet.</xref:System.Reflection.Emit.DynamicILInfo> För att anropa den associerade dynamiska metod rekursivt, överföra den <xref:System.Reflection.Emit.DynamicILInfo.DynamicMethod%2A>egenskapen.</xref:System.Reflection.Emit.DynamicILInfo.DynamicMethod%2A>"
  syntax:
    content: public int GetTokenFor (System.Reflection.Emit.DynamicMethod method);
    parameters:
    - id: method
      type: System.Reflection.Emit.DynamicMethod
      description: "Dynamisk metod som ska anropas."
    return:
      type: System.Int32
      description: "En token som kan vara inbäddat i MSIL strömmen för den associera dynamisk metoden som mål för en MSIL-instruktionen."
  overload: System.Reflection.Emit.DynamicILInfo.GetTokenFor*
  exceptions: []
  platform:
  - net462
- uid: System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeFieldHandle)
  id: GetTokenFor(System.RuntimeFieldHandle)
  parent: System.Reflection.Emit.DynamicILInfo
  langs:
  - csharp
  name: GetTokenFor(RuntimeFieldHandle)
  nameWithType: DynamicILInfo.GetTokenFor(RuntimeFieldHandle)
  fullName: System.Reflection.Emit.DynamicILInfo.GetTokenFor(RuntimeFieldHandle)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: "Hämtar en token som giltiga i omfånget för aktuellt <xref href=&quot;System.Reflection.Emit.DynamicILInfo&quot;> </xref>, som representerar ett fält som kan nås från den associera dynamisk metoden."
  remarks: "Du måste hämta en token för alla fält som ska användas av dynamisk metod som är associerade med aktuellt <xref:System.Reflection.Emit.DynamicILInfo>objektet.</xref:System.Reflection.Emit.DynamicILInfo> Använd <xref:System.Type.GetField%2A?displayProperty=fullName>metoden för att hämta en <xref:System.Reflection.FieldInfo>för fältet som du vill komma åt, och sedan använda <xref:System.Reflection.FieldInfo.FieldHandle%2A>egenskapen för att hämta <xref:System.RuntimeFieldHandle>.</xref:System.RuntimeFieldHandle> </xref:System.Reflection.FieldInfo.FieldHandle%2A> </xref:System.Reflection.FieldInfo> </xref:System.Type.GetField%2A?displayProperty=fullName>"
  syntax:
    content: public int GetTokenFor (RuntimeFieldHandle field);
    parameters:
    - id: field
      type: System.RuntimeFieldHandle
      description: "Fältet som ska användas."
    return:
      type: System.Int32
      description: "En token som kan användas som operand av MSIL-instruktionen som har åtkomst till fält i omfånget för aktuellt <xref href=&quot;System.Reflection.Emit.DynamicILInfo&quot;> </xref> objekt."
  overload: System.Reflection.Emit.DynamicILInfo.GetTokenFor*
  exceptions: []
  platform:
  - net462
- uid: System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeMethodHandle)
  id: GetTokenFor(System.RuntimeMethodHandle)
  parent: System.Reflection.Emit.DynamicILInfo
  langs:
  - csharp
  name: GetTokenFor(RuntimeMethodHandle)
  nameWithType: DynamicILInfo.GetTokenFor(RuntimeMethodHandle)
  fullName: System.Reflection.Emit.DynamicILInfo.GetTokenFor(RuntimeMethodHandle)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: "Hämtar en token som giltiga i omfånget för aktuellt <xref href=&quot;System.Reflection.Emit.DynamicILInfo&quot;> </xref>, som representerar en metod för att komma åt från den associera dynamisk metoden."
  remarks: "Du måste hämta en token för en metod som ska användas av dynamisk metod som är associerade med aktuellt <xref:System.Reflection.Emit.DynamicILInfo>objektet.</xref:System.Reflection.Emit.DynamicILInfo> Använd <xref:System.Type.GetMethod%2A?displayProperty=fullName>metoden för att hämta en <xref:System.Reflection.MethodInfo>för den metod som du vill komma åt, och sedan använda <xref:System.Reflection.MethodBase.MethodHandle%2A>egenskapen för att hämta <xref:System.RuntimeMethodHandle>.</xref:System.RuntimeMethodHandle> </xref:System.Reflection.MethodBase.MethodHandle%2A> </xref:System.Reflection.MethodInfo> </xref:System.Type.GetMethod%2A?displayProperty=fullName>      > [!NOTE] > För en metod som tillhör en generisk typ, använder den <xref:System.Reflection.Emit.DynamicILInfo.GetTokenFor%28System.RuntimeMethodHandle%2CSystem.RuntimeTypeHandle%29>metoden överlagra och ange en <xref:System.RuntimeTypeHandle>för den generiska typen.</xref:System.RuntimeTypeHandle> </xref:System.Reflection.Emit.DynamicILInfo.GetTokenFor%28System.RuntimeMethodHandle%2CSystem.RuntimeTypeHandle%29>"
  syntax:
    content: public int GetTokenFor (RuntimeMethodHandle method);
    parameters:
    - id: method
      type: System.RuntimeMethodHandle
      description: "Metoden som kan nås."
    return:
      type: System.Int32
      description: "En token som kan användas som operand av MSIL-instruktionen som har åtkomst till metoder, till exempel <xref:System.Reflection.Emit.OpCodes.Call>eller <xref:System.Reflection.Emit.OpCodes.Ldtoken>, i omfånget för aktuellt <xref href=&quot;System.Reflection.Emit.DynamicILInfo&quot;> </xref> objekt.</xref:System.Reflection.Emit.OpCodes.Ldtoken> </xref:System.Reflection.Emit.OpCodes.Call>"
  overload: System.Reflection.Emit.DynamicILInfo.GetTokenFor*
  exceptions: []
  platform:
  - net462
- uid: System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeTypeHandle)
  id: GetTokenFor(System.RuntimeTypeHandle)
  parent: System.Reflection.Emit.DynamicILInfo
  langs:
  - csharp
  name: GetTokenFor(RuntimeTypeHandle)
  nameWithType: DynamicILInfo.GetTokenFor(RuntimeTypeHandle)
  fullName: System.Reflection.Emit.DynamicILInfo.GetTokenFor(RuntimeTypeHandle)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: "Hämtar en token som giltiga i omfånget för aktuellt <xref href=&quot;System.Reflection.Emit.DynamicILInfo&quot;> </xref>, som representerar en typ som ska användas i den associera dynamisk metoden."
  remarks: "Den token som returneras av den här metodöverlagringen kan du definiera en lokal variabeltyp och generera MSIL för att skapa en instans av en typ i dynamisk metod som är associerade med aktuellt <xref:System.Reflection.Emit.DynamicILInfo>objektet.</xref:System.Reflection.Emit.DynamicILInfo>       Få en <xref:System.RuntimeTypeHandle>som representerar en typ, använder den <xref:System.Type.TypeHandle%2A?displayProperty=fullName>egenskapen.</xref:System.Type.TypeHandle%2A?displayProperty=fullName> </xref:System.RuntimeTypeHandle>"
  syntax:
    content: public int GetTokenFor (RuntimeTypeHandle type);
    parameters:
    - id: type
      type: System.RuntimeTypeHandle
      description: "Den typ som ska användas."
    return:
      type: System.Int32
      description: "En token som kan användas som operand av MSIL-instruktionen som kräver en typ i omfånget för aktuellt <xref href=&quot;System.Reflection.Emit.DynamicILInfo&quot;> </xref> objekt."
  overload: System.Reflection.Emit.DynamicILInfo.GetTokenFor*
  exceptions: []
  platform:
  - net462
- uid: System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.String)
  id: GetTokenFor(System.String)
  parent: System.Reflection.Emit.DynamicILInfo
  langs:
  - csharp
  name: GetTokenFor(String)
  nameWithType: DynamicILInfo.GetTokenFor(String)
  fullName: System.Reflection.Emit.DynamicILInfo.GetTokenFor(String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: "Hämtar en token som giltiga i omfånget för aktuellt <xref href=&quot;System.Reflection.Emit.DynamicILInfo&quot;> </xref>, som representerar en teckensträng som ska användas i den associera dynamisk metoden."
  syntax:
    content: public int GetTokenFor (string literal);
    parameters:
    - id: literal
      type: System.String
      description: "Strängen som ska användas."
    return:
      type: System.Int32
      description: "En token som kan användas som operand av MSIL-instruktionen som kräver en sträng i omfånget för aktuellt <xref href=&quot;System.Reflection.Emit.DynamicILInfo&quot;> </xref> objekt."
  overload: System.Reflection.Emit.DynamicILInfo.GetTokenFor*
  exceptions: []
  platform:
  - net462
- uid: System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeFieldHandle,System.RuntimeTypeHandle)
  id: GetTokenFor(System.RuntimeFieldHandle,System.RuntimeTypeHandle)
  parent: System.Reflection.Emit.DynamicILInfo
  langs:
  - csharp
  name: GetTokenFor(RuntimeFieldHandle,RuntimeTypeHandle)
  nameWithType: DynamicILInfo.GetTokenFor(RuntimeFieldHandle,RuntimeTypeHandle)
  fullName: System.Reflection.Emit.DynamicILInfo.GetTokenFor(RuntimeFieldHandle,RuntimeTypeHandle)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: "Hämtar en token som giltiga i omfånget för aktuellt <xref href=&quot;System.Reflection.Emit.DynamicILInfo&quot;> </xref>, som representerar ett fält som kan nås från den associerade dynamiska metoden; fältet finns på den angivna generiska typen."
  remarks: "Du måste hämta en token för alla fält som ska användas av dynamisk metod som är associerade med aktuellt <xref:System.Reflection.Emit.DynamicILInfo>objektet.</xref:System.Reflection.Emit.DynamicILInfo> Använd <xref:System.Type.GetField%2A?displayProperty=fullName>metoden för att hämta en <xref:System.Reflection.FieldInfo>för fältet som du vill komma åt, och sedan använda <xref:System.Reflection.FieldInfo.FieldHandle%2A>egenskapen för att hämta <xref:System.RuntimeFieldHandle>.</xref:System.RuntimeFieldHandle> </xref:System.Reflection.FieldInfo.FieldHandle%2A> </xref:System.Reflection.FieldInfo> </xref:System.Type.GetField%2A?displayProperty=fullName>"
  syntax:
    content: public int GetTokenFor (RuntimeFieldHandle field, RuntimeTypeHandle contextType);
    parameters:
    - id: field
      type: System.RuntimeFieldHandle
      description: "Fältet som ska användas."
    - id: contextType
      type: System.RuntimeTypeHandle
      description: "Den generiska typen fältet tillhör."
    return:
      type: System.Int32
      description: "En token som kan användas som operand av MSIL-instruktionen som har åtkomst till fält i omfånget för aktuellt <xref href=&quot;System.Reflection.Emit.DynamicILInfo&quot;> </xref> objekt."
  overload: System.Reflection.Emit.DynamicILInfo.GetTokenFor*
  exceptions: []
  platform:
  - net462
- uid: System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeMethodHandle,System.RuntimeTypeHandle)
  id: GetTokenFor(System.RuntimeMethodHandle,System.RuntimeTypeHandle)
  parent: System.Reflection.Emit.DynamicILInfo
  langs:
  - csharp
  name: GetTokenFor(RuntimeMethodHandle,RuntimeTypeHandle)
  nameWithType: DynamicILInfo.GetTokenFor(RuntimeMethodHandle,RuntimeTypeHandle)
  fullName: System.Reflection.Emit.DynamicILInfo.GetTokenFor(RuntimeMethodHandle,RuntimeTypeHandle)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: "Hämtar en token som giltiga i omfånget för aktuellt <xref href=&quot;System.Reflection.Emit.DynamicILInfo&quot;> </xref>, som representerar en metod i en generisk typ."
  remarks: "Du måste hämta en token för en metod som kommer att anropas av dynamisk metod som är associerade med aktuellt <xref:System.Reflection.Emit.DynamicILInfo>objektet.</xref:System.Reflection.Emit.DynamicILInfo> Använd <xref:System.Type.GetMethod%2A?displayProperty=fullName>metoden för att hämta en <xref:System.Reflection.MethodInfo>för den metod du vill anropa, och sedan använda <xref:System.Reflection.MethodBase.MethodHandle%2A>egenskapen för att hämta <xref:System.RuntimeMethodHandle>.</xref:System.RuntimeMethodHandle> </xref:System.Reflection.MethodBase.MethodHandle%2A> </xref:System.Reflection.MethodInfo> </xref:System.Type.GetMethod%2A?displayProperty=fullName>"
  syntax:
    content: public int GetTokenFor (RuntimeMethodHandle method, RuntimeTypeHandle contextType);
    parameters:
    - id: method
      type: System.RuntimeMethodHandle
      description: "Metoden."
    - id: contextType
      type: System.RuntimeTypeHandle
      description: "Den generiska typen metoden tillhör."
    return:
      type: System.Int32
      description: "En token som kan användas som operand av MSIL-instruktionen som har åtkomst till metoder, till exempel <xref:System.Reflection.Emit.OpCodes.Call>eller <xref:System.Reflection.Emit.OpCodes.Ldtoken>, i omfånget för aktuellt <xref href=&quot;System.Reflection.Emit.DynamicILInfo&quot;> </xref> objekt.</xref:System.Reflection.Emit.OpCodes.Ldtoken> </xref:System.Reflection.Emit.OpCodes.Call>"
  overload: System.Reflection.Emit.DynamicILInfo.GetTokenFor*
  exceptions: []
  platform:
  - net462
- uid: System.Reflection.Emit.DynamicILInfo.SetCode(System.Byte[],System.Int32)
  id: SetCode(System.Byte[],System.Int32)
  parent: System.Reflection.Emit.DynamicILInfo
  langs:
  - csharp
  name: SetCode(Byte[],Int32)
  nameWithType: DynamicILInfo.SetCode(Byte[],Int32)
  fullName: System.Reflection.Emit.DynamicILInfo.SetCode(Byte[],Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: "Anger koden innehållet i den associera dynamisk metoden."
  remarks: "Inga giltigheten kontroller utförs på MSIL-dataströmmen.       Den här metoden anropas en gång ersätter den första MSIL-dataströmmen med andra.       Generera en egen metadata och MSIL kräver kunskap om Common Language Infrastructure (CLI)-dokumentation, &quot;särskilt Partition II: Metadata Definition och semantik&quot; och &quot;Partition III: CIL instruktion ange&quot;. Dokumentationen finns online. Se [ECMA C# och gemensamma Language Infrastructure standarder](http://go.microsoft.com/fwlink/?LinkID=99212) på MSDN och [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) på Ecma International-webbplatsen."
  syntax:
    content: public void SetCode (byte[] code, int maxStackSize);
    parameters:
    - id: code
      type: System.Byte[]
      description: "En matris som innehåller MSIL-dataströmmen."
    - id: maxStackSize
      type: System.Int32
      description: "Maximalt antal objekt i stacken operanden när metoden körs."
  overload: System.Reflection.Emit.DynamicILInfo.SetCode*
  exceptions: []
  platform:
  - net462
- uid: System.Reflection.Emit.DynamicILInfo.SetCode(System.Byte*,System.Int32,System.Int32)
  id: SetCode(System.Byte*,System.Int32,System.Int32)
  parent: System.Reflection.Emit.DynamicILInfo
  langs:
  - csharp
  name: SetCode(Byte*,Int32,Int32)
  nameWithType: DynamicILInfo.SetCode(Byte*,Int32,Int32)
  fullName: System.Reflection.Emit.DynamicILInfo.SetCode(Byte*,Int32,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: "Anger koden innehållet i den associera dynamisk metoden."
  remarks: "Inga giltigheten kontroller utförs på MSIL-dataströmmen.       Den här metoden anropas en gång ersätter den första MSIL-dataströmmen med andra.       Generera en egen metadata och MSIL kräver kunskap om Common Language Infrastructure (CLI)-dokumentation, särskilt &quot;Partition II: Metadata Definition och semantik&quot; och &quot;Partition III: CIL instruktionen Set.&quot; Dokumentationen finns online. Se [ECMA C# och gemensamma Language Infrastructure standarder](http://go.microsoft.com/fwlink/?LinkID=99212) på MSDN och [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) på Ecma International-webbplatsen."
  syntax:
    content: public void SetCode (byte* code, int codeSize, int maxStackSize);
    parameters:
    - id: code
      type: System.Byte*
      description: "En pekare till en bytematris som innehåller MSIL-dataströmmen."
    - id: codeSize
      type: System.Int32
      description: "Antal byte i MSIL-dataströmmen."
    - id: maxStackSize
      type: System.Int32
      description: "Maximalt antal objekt i stacken operanden när metoden körs."
  overload: System.Reflection.Emit.DynamicILInfo.SetCode*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>code</code>är <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> och <code>codeSize</code> är större än 0."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>codeSize</code>är mindre än 0."
  platform:
  - net462
- uid: System.Reflection.Emit.DynamicILInfo.SetExceptions(System.Byte[])
  id: SetExceptions(System.Byte[])
  parent: System.Reflection.Emit.DynamicILInfo
  langs:
  - csharp
  name: SetExceptions(Byte[])
  nameWithType: DynamicILInfo.SetExceptions(Byte[])
  fullName: System.Reflection.Emit.DynamicILInfo.SetExceptions(Byte[])
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: "Anger Undantagsmetadata för den associera dynamisk metoden."
  remarks: 'Undantagsmetadata för en metod definierar placeringen och storleken på alla `try`, `catch`, `finally`, filter och fel-block. Information om layouten för dessa metadata dokumentationen Common Language Infrastructure (CLI), särskilt &quot;Partition II: Metadata Definition och semantik&quot;. Dokumentationen finns online. Se [ECMA C# och gemensamma Language Infrastructure standarder](http://go.microsoft.com/fwlink/?LinkID=99212) på MSDN och [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) på Ecma International-webbplatsen.'
  syntax:
    content: public void SetExceptions (byte[] exceptions);
    parameters:
    - id: exceptions
      type: System.Byte[]
      description: "En matris som innehåller Undantagsmetadata."
  overload: System.Reflection.Emit.DynamicILInfo.SetExceptions*
  exceptions: []
  platform:
  - net462
- uid: System.Reflection.Emit.DynamicILInfo.SetExceptions(System.Byte*,System.Int32)
  id: SetExceptions(System.Byte*,System.Int32)
  parent: System.Reflection.Emit.DynamicILInfo
  langs:
  - csharp
  name: SetExceptions(Byte*,Int32)
  nameWithType: DynamicILInfo.SetExceptions(Byte*,Int32)
  fullName: System.Reflection.Emit.DynamicILInfo.SetExceptions(Byte*,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: "Anger Undantagsmetadata för den associera dynamisk metoden."
  remarks: 'Undantagsmetadata för en metod definierar placeringen och storleken på alla `try`, `catch`, `finally`, filter och fel-block. Information om layouten för dessa metadata dokumentationen Common Language Infrastructure (CLI), &quot;särskilt Partition II: Metadata Definition och semantik&quot; och &quot;Partition III: CIL instruktion ange&quot;. Dokumentationen finns online. Se [ECMA C# och gemensamma Language Infrastructure standarder](http://go.microsoft.com/fwlink/?LinkID=99212) på MSDN och [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) på Ecma International-webbplatsen.'
  syntax:
    content: public void SetExceptions (byte* exceptions, int exceptionsSize);
    parameters:
    - id: exceptions
      type: System.Byte*
      description: "En pekare till en bytematris som innehåller Undantagsmetadata."
    - id: exceptionsSize
      type: System.Int32
      description: "Antal byte av Undantagsmetadata."
  overload: System.Reflection.Emit.DynamicILInfo.SetExceptions*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>exceptions</code>är <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> och <code>exceptionSize</code> är större än 0."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>exceptionSize</code>är mindre än 0."
  platform:
  - net462
- uid: System.Reflection.Emit.DynamicILInfo.SetLocalSignature(System.Byte[])
  id: SetLocalSignature(System.Byte[])
  parent: System.Reflection.Emit.DynamicILInfo
  langs:
  - csharp
  name: SetLocalSignature(Byte[])
  nameWithType: DynamicILInfo.SetLocalSignature(Byte[])
  fullName: System.Reflection.Emit.DynamicILInfo.SetLocalSignature(Byte[])
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: "Anger den lokala variabeln signaturen som beskrivs layouten i lokala variabler för den associera dynamisk metoden."
  remarks: "Den lokala variabeln signaturen beskrivs layouten i en metod lokala variabler. För att förenkla konstruktion av den lokala variabeln signaturen, använder den `static` (`Shared` i Visual Basic) <xref:System.Reflection.Emit.SignatureHelper.GetLocalVarSigHelper%2A?displayProperty=fullName>metod för att hämta en <xref:System.Reflection.Emit.SignatureHelper>för den lokala signaturen.</xref:System.Reflection.Emit.SignatureHelper> </xref:System.Reflection.Emit.SignatureHelper.GetLocalVarSigHelper%2A?displayProperty=fullName>       Information om lokala variabeln signaturer dokumentationen Common Language Infrastructure (CLI), särskilt &quot;Partition II: Metadata Definition och semantik&quot;. Dokumentationen finns online. Se [ECMA C# och gemensamma Language Infrastructure standarder](http://go.microsoft.com/fwlink/?LinkID=99212) på MSDN och [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) på Ecma International-webbplatsen."
  syntax:
    content: public void SetLocalSignature (byte[] localSignature);
    parameters:
    - id: localSignature
      type: System.Byte[]
      description: "En matris som innehåller layouten för lokala variabler för associerade <xref:System.Reflection.Emit.DynamicMethod>.</xref:System.Reflection.Emit.DynamicMethod>"
  overload: System.Reflection.Emit.DynamicILInfo.SetLocalSignature*
  exceptions: []
  platform:
  - net462
- uid: System.Reflection.Emit.DynamicILInfo.SetLocalSignature(System.Byte*,System.Int32)
  id: SetLocalSignature(System.Byte*,System.Int32)
  parent: System.Reflection.Emit.DynamicILInfo
  langs:
  - csharp
  name: SetLocalSignature(Byte*,Int32)
  nameWithType: DynamicILInfo.SetLocalSignature(Byte*,Int32)
  fullName: System.Reflection.Emit.DynamicILInfo.SetLocalSignature(Byte*,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: "Anger den lokala variabeln signaturen som beskrivs layouten i lokala variabler för den associera dynamisk metoden."
  remarks: "Den lokala variabeln signaturen beskrivs layouten i en metod lokala variabler. För att förenkla konstruktion av den lokala variabeln signaturen, använder den `static` (`Shared` i Visual Basic) <xref:System.Reflection.Emit.SignatureHelper.GetLocalVarSigHelper%2A?displayProperty=fullName>metod för att hämta en <xref:System.Reflection.Emit.SignatureHelper>för den lokala signaturen.</xref:System.Reflection.Emit.SignatureHelper> </xref:System.Reflection.Emit.SignatureHelper.GetLocalVarSigHelper%2A?displayProperty=fullName>       Information om lokala variabeln signaturer dokumentationen Common Language Infrastructure (CLI), särskilt &quot;Partition II: Metadata Definition och semantik&quot;. Dokumentationen finns online. Se [ECMA C# och gemensamma Language Infrastructure standarder](http://go.microsoft.com/fwlink/?LinkID=99212) på MSDN och [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) på Ecma International-webbplatsen."
  syntax:
    content: public void SetLocalSignature (byte* localSignature, int signatureSize);
    parameters:
    - id: localSignature
      type: System.Byte*
      description: "En matris som innehåller layouten för lokala variabler för associerade <xref:System.Reflection.Emit.DynamicMethod>.</xref:System.Reflection.Emit.DynamicMethod>"
    - id: signatureSize
      type: System.Int32
      description: "Antal byte i signaturen."
  overload: System.Reflection.Emit.DynamicILInfo.SetLocalSignature*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>localSignature</code>är <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> och <code>signatureSize</code> är större än 0."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>signatureSize</code>är mindre än 0."
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.Reflection.Emit.DynamicILInfo.DynamicMethod
  parent: System.Reflection.Emit.DynamicILInfo
  isExternal: false
  name: DynamicMethod
  nameWithType: DynamicILInfo.DynamicMethod
  fullName: System.Reflection.Emit.DynamicILInfo.DynamicMethod
- uid: System.Reflection.Emit.DynamicMethod
  parent: System.Reflection.Emit
  isExternal: true
  name: DynamicMethod
  nameWithType: DynamicMethod
  fullName: System.Reflection.Emit.DynamicMethod
- uid: System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.Byte[])
  parent: System.Reflection.Emit.DynamicILInfo
  isExternal: false
  name: GetTokenFor(Byte[])
  nameWithType: DynamicILInfo.GetTokenFor(Byte[])
  fullName: System.Reflection.Emit.DynamicILInfo.GetTokenFor(Byte[])
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Byte[]
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: Byte[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.Reflection.Emit.DynamicMethod)
  parent: System.Reflection.Emit.DynamicILInfo
  isExternal: false
  name: GetTokenFor(DynamicMethod)
  nameWithType: DynamicILInfo.GetTokenFor(DynamicMethod)
  fullName: System.Reflection.Emit.DynamicILInfo.GetTokenFor(DynamicMethod)
- uid: System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeFieldHandle)
  parent: System.Reflection.Emit.DynamicILInfo
  isExternal: false
  name: GetTokenFor(RuntimeFieldHandle)
  nameWithType: DynamicILInfo.GetTokenFor(RuntimeFieldHandle)
  fullName: System.Reflection.Emit.DynamicILInfo.GetTokenFor(RuntimeFieldHandle)
- uid: System.RuntimeFieldHandle
  parent: System
  isExternal: true
  name: RuntimeFieldHandle
  nameWithType: RuntimeFieldHandle
  fullName: System.RuntimeFieldHandle
- uid: System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeMethodHandle)
  parent: System.Reflection.Emit.DynamicILInfo
  isExternal: false
  name: GetTokenFor(RuntimeMethodHandle)
  nameWithType: DynamicILInfo.GetTokenFor(RuntimeMethodHandle)
  fullName: System.Reflection.Emit.DynamicILInfo.GetTokenFor(RuntimeMethodHandle)
- uid: System.RuntimeMethodHandle
  parent: System
  isExternal: true
  name: RuntimeMethodHandle
  nameWithType: RuntimeMethodHandle
  fullName: System.RuntimeMethodHandle
- uid: System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeTypeHandle)
  parent: System.Reflection.Emit.DynamicILInfo
  isExternal: false
  name: GetTokenFor(RuntimeTypeHandle)
  nameWithType: DynamicILInfo.GetTokenFor(RuntimeTypeHandle)
  fullName: System.Reflection.Emit.DynamicILInfo.GetTokenFor(RuntimeTypeHandle)
- uid: System.RuntimeTypeHandle
  parent: System
  isExternal: true
  name: RuntimeTypeHandle
  nameWithType: RuntimeTypeHandle
  fullName: System.RuntimeTypeHandle
- uid: System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.String)
  parent: System.Reflection.Emit.DynamicILInfo
  isExternal: false
  name: GetTokenFor(String)
  nameWithType: DynamicILInfo.GetTokenFor(String)
  fullName: System.Reflection.Emit.DynamicILInfo.GetTokenFor(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeFieldHandle,System.RuntimeTypeHandle)
  parent: System.Reflection.Emit.DynamicILInfo
  isExternal: false
  name: GetTokenFor(RuntimeFieldHandle,RuntimeTypeHandle)
  nameWithType: DynamicILInfo.GetTokenFor(RuntimeFieldHandle,RuntimeTypeHandle)
  fullName: System.Reflection.Emit.DynamicILInfo.GetTokenFor(RuntimeFieldHandle,RuntimeTypeHandle)
- uid: System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeMethodHandle,System.RuntimeTypeHandle)
  parent: System.Reflection.Emit.DynamicILInfo
  isExternal: false
  name: GetTokenFor(RuntimeMethodHandle,RuntimeTypeHandle)
  nameWithType: DynamicILInfo.GetTokenFor(RuntimeMethodHandle,RuntimeTypeHandle)
  fullName: System.Reflection.Emit.DynamicILInfo.GetTokenFor(RuntimeMethodHandle,RuntimeTypeHandle)
- uid: System.Reflection.Emit.DynamicILInfo.SetCode(System.Byte[],System.Int32)
  parent: System.Reflection.Emit.DynamicILInfo
  isExternal: false
  name: SetCode(Byte[],Int32)
  nameWithType: DynamicILInfo.SetCode(Byte[],Int32)
  fullName: System.Reflection.Emit.DynamicILInfo.SetCode(Byte[],Int32)
- uid: System.Reflection.Emit.DynamicILInfo.SetCode(System.Byte*,System.Int32,System.Int32)
  parent: System.Reflection.Emit.DynamicILInfo
  isExternal: false
  name: SetCode(Byte*,Int32,Int32)
  nameWithType: DynamicILInfo.SetCode(Byte*,Int32,Int32)
  fullName: System.Reflection.Emit.DynamicILInfo.SetCode(Byte*,Int32,Int32)
- uid: System.Reflection.Emit.DynamicILInfo.SetExceptions(System.Byte[])
  parent: System.Reflection.Emit.DynamicILInfo
  isExternal: false
  name: SetExceptions(Byte[])
  nameWithType: DynamicILInfo.SetExceptions(Byte[])
  fullName: System.Reflection.Emit.DynamicILInfo.SetExceptions(Byte[])
- uid: System.Reflection.Emit.DynamicILInfo.SetExceptions(System.Byte*,System.Int32)
  parent: System.Reflection.Emit.DynamicILInfo
  isExternal: false
  name: SetExceptions(Byte*,Int32)
  nameWithType: DynamicILInfo.SetExceptions(Byte*,Int32)
  fullName: System.Reflection.Emit.DynamicILInfo.SetExceptions(Byte*,Int32)
- uid: System.Reflection.Emit.DynamicILInfo.SetLocalSignature(System.Byte[])
  parent: System.Reflection.Emit.DynamicILInfo
  isExternal: false
  name: SetLocalSignature(Byte[])
  nameWithType: DynamicILInfo.SetLocalSignature(Byte[])
  fullName: System.Reflection.Emit.DynamicILInfo.SetLocalSignature(Byte[])
- uid: System.Reflection.Emit.DynamicILInfo.SetLocalSignature(System.Byte*,System.Int32)
  parent: System.Reflection.Emit.DynamicILInfo
  isExternal: false
  name: SetLocalSignature(Byte*,Int32)
  nameWithType: DynamicILInfo.SetLocalSignature(Byte*,Int32)
  fullName: System.Reflection.Emit.DynamicILInfo.SetLocalSignature(Byte*,Int32)
- uid: System.Reflection.Emit.DynamicILInfo.DynamicMethod*
  parent: System.Reflection.Emit.DynamicILInfo
  isExternal: false
  name: DynamicMethod
  nameWithType: DynamicILInfo.DynamicMethod
- uid: System.Reflection.Emit.DynamicILInfo.GetTokenFor*
  parent: System.Reflection.Emit.DynamicILInfo
  isExternal: false
  name: GetTokenFor
  nameWithType: DynamicILInfo.GetTokenFor
- uid: System.Reflection.Emit.DynamicILInfo.SetCode*
  parent: System.Reflection.Emit.DynamicILInfo
  isExternal: false
  name: SetCode
  nameWithType: DynamicILInfo.SetCode
- uid: System.Reflection.Emit.DynamicILInfo.SetExceptions*
  parent: System.Reflection.Emit.DynamicILInfo
  isExternal: false
  name: SetExceptions
  nameWithType: DynamicILInfo.SetExceptions
- uid: System.Reflection.Emit.DynamicILInfo.SetLocalSignature*
  parent: System.Reflection.Emit.DynamicILInfo
  isExternal: false
  name: SetLocalSignature
  nameWithType: DynamicILInfo.SetLocalSignature
