### YamlMime:ManagedReference
items:
- uid: System.ComponentModel.LicenseManager
  id: LicenseManager
  children:
  - System.ComponentModel.LicenseManager.CreateWithContext(System.Type,System.ComponentModel.LicenseContext)
  - System.ComponentModel.LicenseManager.CreateWithContext(System.Type,System.ComponentModel.LicenseContext,System.Object[])
  - System.ComponentModel.LicenseManager.CurrentContext
  - System.ComponentModel.LicenseManager.IsLicensed(System.Type)
  - System.ComponentModel.LicenseManager.IsValid(System.Type)
  - System.ComponentModel.LicenseManager.IsValid(System.Type,System.Object,System.ComponentModel.License@)
  - System.ComponentModel.LicenseManager.LockContext(System.Object)
  - System.ComponentModel.LicenseManager.UnlockContext(System.Object)
  - System.ComponentModel.LicenseManager.UsageMode
  - System.ComponentModel.LicenseManager.Validate(System.Type)
  - System.ComponentModel.LicenseManager.Validate(System.Type,System.Object)
  langs:
  - csharp
  name: LicenseManager
  nameWithType: LicenseManager
  fullName: System.ComponentModel.LicenseManager
  type: Class
  summary: "Ger egenskaper och metoder för att lägga till en licens till en komponent och hantera en <xref href=&quot;System.ComponentModel.LicenseProvider&quot;> </xref>. Den här klassen kan inte ärvas."
  remarks: "Klassen LicenseManager innehåller följande `static` egenskaper: <xref:System.ComponentModel.LicenseManager.CurrentContext%2A>och <xref:System.ComponentModel.LicenseManager.UsageMode%2A>.</xref:System.ComponentModel.LicenseManager.UsageMode%2A> </xref:System.ComponentModel.LicenseManager.CurrentContext%2A> Klassen innehåller också följande `static` metoder: <xref:System.ComponentModel.LicenseManager.CreateWithContext%2A>, <xref:System.ComponentModel.LicenseManager.IsValid%2A>, och <xref:System.ComponentModel.LicenseManager.Validate%2A>.</xref:System.ComponentModel.LicenseManager.Validate%2A> </xref:System.ComponentModel.LicenseManager.IsValid%2A> </xref:System.ComponentModel.LicenseManager.CreateWithContext%2A>       När du skapar en komponent som du vill licens, måste du göra följande: 1.  Ange <xref:System.ComponentModel.LicenseProvider>genom att markera komponent med en <xref:System.ComponentModel.LicenseProviderAttribute>.</xref:System.ComponentModel.LicenseProviderAttribute> </xref:System.ComponentModel.LicenseProvider>      2.  Anropa <xref:System.ComponentModel.LicenseManager.Validate%2A>eller <xref:System.ComponentModel.LicenseManager.IsValid%2A>i konstruktorn för komponenten.</xref:System.ComponentModel.LicenseManager.IsValid%2A> </xref:System.ComponentModel.LicenseManager.Validate%2A> <xref:System.ComponentModel.LicenseManager.Validate%2A>genererar en <xref:System.ComponentModel.LicenseException>när den försöker att skapa en instans utan en giltig licens.</xref:System.ComponentModel.LicenseException></xref:System.ComponentModel.LicenseManager.Validate%2A> <xref:System.ComponentModel.LicenseManager.IsValid%2A>Inget genereras ett undantag.</xref:System.ComponentModel.LicenseManager.IsValid%2A>      3.  Anropa <xref:System.ComponentModel.License.Dispose%2A>för en licens som beviljas när komponenten har tagits bort eller slutförd.</xref:System.ComponentModel.License.Dispose%2A>       Mer information om licensiering finns [så här: licens komponenter och kontroller](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following code example creates a licensed control using the <xref:System.ComponentModel.LicenseManager.Validate%2A> method. It uses a <xref:System.ComponentModel.LicenseProvider> that is implemented by the <xref:System.ComponentModel.LicFileLicenseProvider> class.  \n  \n [!code-cs[Classic LicenseManager Example#1](~/add/codesnippet/csharp/t-system.componentmodel._63_1.cs)]\n [!code-vb[Classic LicenseManager Example#1](~/add/codesnippet/visualbasic/t-system.componentmodel._63_1.vb)]\n [!code-cpp[Classic LicenseManager Example#1](~/add/codesnippet/cpp/t-system.componentmodel._63_1.cpp)]"
  syntax:
    content: public sealed class LicenseManager
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.ComponentModel.LicenseManager.CreateWithContext(System.Type,System.ComponentModel.LicenseContext)
  id: CreateWithContext(System.Type,System.ComponentModel.LicenseContext)
  parent: System.ComponentModel.LicenseManager
  langs:
  - csharp
  name: CreateWithContext(Type,LicenseContext)
  nameWithType: LicenseManager.CreateWithContext(Type,LicenseContext)
  fullName: System.ComponentModel.LicenseManager.CreateWithContext(Type,LicenseContext)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Skapar en instans av den angivna typen utifrån en kontext som du kan använda den licensierade instansen."
  remarks: "Den <xref:System.ComponentModel.LicenseContext>du anger som den `creationContext` parametern används som <xref:System.ComponentModel.LicenseManager.CurrentContext%2A>för denna <xref:System.ComponentModel.License>.</xref:System.ComponentModel.License> </xref:System.ComponentModel.LicenseManager.CurrentContext%2A> </xref:System.ComponentModel.LicenseContext> Metoden CreateWithContext blockerar alla andra trådar den <xref:System.AppDomain>från att modifiera den <xref:System.ComponentModel.LicenseManager.CurrentContext%2A>, vilket gör att CreateWithContext fungerar som en atomisk åtgärd.</xref:System.ComponentModel.LicenseManager.CurrentContext%2A> </xref:System.AppDomain>"
  syntax:
    content: public static object CreateWithContext (Type type, System.ComponentModel.LicenseContext creationContext);
    parameters:
    - id: type
      type: System.Type
      description: "En <xref:System.Type>som representerar typen för att skapa.</xref:System.Type>"
    - id: creationContext
      type: System.ComponentModel.LicenseContext
      description: "En <xref href=&quot;System.ComponentModel.LicenseContext&quot;> </xref> som anger när du kan använda den licensierade instansen."
    return:
      type: System.Object
      description: "En instans av den angivna typen."
  overload: System.ComponentModel.LicenseManager.CreateWithContext*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.LicenseManager.CreateWithContext(System.Type,System.ComponentModel.LicenseContext,System.Object[])
  id: CreateWithContext(System.Type,System.ComponentModel.LicenseContext,System.Object[])
  parent: System.ComponentModel.LicenseManager
  langs:
  - csharp
  name: CreateWithContext(Type,LicenseContext,Object[])
  nameWithType: LicenseManager.CreateWithContext(Type,LicenseContext,Object[])
  fullName: System.ComponentModel.LicenseManager.CreateWithContext(Type,LicenseContext,Object[])
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Skapar en instans av den angivna typen med de angivna argumenten utifrån en kontext som du kan använda den licensierade instansen."
  remarks: "Den <xref:System.ComponentModel.LicenseContext>du anger som den `creationContext` parametern används som <xref:System.ComponentModel.LicenseManager.CurrentContext%2A>för denna <xref:System.ComponentModel.License>.</xref:System.ComponentModel.License> </xref:System.ComponentModel.LicenseManager.CurrentContext%2A> </xref:System.ComponentModel.LicenseContext> Den här metoden blockerar alla andra trådar den <xref:System.AppDomain>från att modifiera den <xref:System.ComponentModel.LicenseManager.CurrentContext%2A>, så att <xref:System.ComponentModel.LicenseManager.CreateWithContext%2A>fungerar som en atomisk åtgärd.</xref:System.ComponentModel.LicenseManager.CreateWithContext%2A> </xref:System.ComponentModel.LicenseManager.CurrentContext%2A> </xref:System.AppDomain>"
  syntax:
    content: public static object CreateWithContext (Type type, System.ComponentModel.LicenseContext creationContext, object[] args);
    parameters:
    - id: type
      type: System.Type
      description: "En <xref:System.Type>som representerar typen för att skapa.</xref:System.Type>"
    - id: creationContext
      type: System.ComponentModel.LicenseContext
      description: "En <xref href=&quot;System.ComponentModel.LicenseContext&quot;> </xref> som anger när du kan använda den licensierade instansen."
    - id: args
      type: System.Object[]
      description: "En matris av typen <xref:System.Object>som representerar argumenten för typen.</xref:System.Object>"
    return:
      type: System.Object
      description: "En instans av den angivna typen med den angivna matrisen med argument."
  overload: System.ComponentModel.LicenseManager.CreateWithContext*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.LicenseManager.CurrentContext
  id: CurrentContext
  parent: System.ComponentModel.LicenseManager
  langs:
  - csharp
  name: CurrentContext
  nameWithType: LicenseManager.CurrentContext
  fullName: System.ComponentModel.LicenseManager.CurrentContext
  type: Property
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Hämtar eller anger aktuellt <xref href=&quot;System.ComponentModel.LicenseContext&quot;> </xref>, vilket innebär att när du kan använda objektet licensierade."
  remarks: "När användaren begär en giltig <xref:System.ComponentModel.License>, användaren måste uppge kontexten där den <xref:System.ComponentModel.License>får den <xref:System.ComponentModel.LicenseProvider.GetLicense%2A?displayProperty=fullName>metoden.</xref:System.ComponentModel.LicenseProvider.GetLicense%2A?displayProperty=fullName> </xref:System.ComponentModel.License> </xref:System.ComponentModel.License> Den <xref:System.ComponentModel.LicenseContext>som returneras av den här egenskapen ska skickas till alla <xref:System.ComponentModel.LicenseProvider>klasser.</xref:System.ComponentModel.LicenseProvider> </xref:System.ComponentModel.LicenseContext>"
  syntax:
    content: public static System.ComponentModel.LicenseContext CurrentContext { get; set; }
    return:
      type: System.ComponentModel.LicenseContext
      description: "En <xref href=&quot;System.ComponentModel.LicenseContext&quot;> </xref> som anger när du kan använda objektet licensierade."
  overload: System.ComponentModel.LicenseManager.CurrentContext*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "CurrentContext-egenskapen är låst och kan inte ändras."
  platform:
  - net462
- uid: System.ComponentModel.LicenseManager.IsLicensed(System.Type)
  id: IsLicensed(System.Type)
  parent: System.ComponentModel.LicenseManager
  langs:
  - csharp
  name: IsLicensed(Type)
  nameWithType: LicenseManager.IsLicensed(Type)
  fullName: System.ComponentModel.LicenseManager.IsLicensed(Type)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Returnerar om den angivna typen har en giltig licens."
  syntax:
    content: public static bool IsLicensed (Type type);
    parameters:
    - id: type
      type: System.Type
      description: "För <xref:System.Type>att hitta en giltig licens efter.</xref:System.Type>"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Om den angivna typen är licensierad; Annars <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.ComponentModel.LicenseManager.IsLicensed*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.LicenseManager.IsValid(System.Type)
  id: IsValid(System.Type)
  parent: System.ComponentModel.LicenseManager
  langs:
  - csharp
  name: IsValid(Type)
  nameWithType: LicenseManager.IsValid(Type)
  fullName: System.ComponentModel.LicenseManager.IsValid(Type)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Anger om du kan bevilja en giltig licens för den angivna typen."
  remarks: "IsValid-metoden returnerar `true` när typen licensieras inte eller är licensierad och licensen är giltig.       Den här metoden genereras inget ett <xref:System.ComponentModel.LicenseException>när den går inte att bevilja en giltig <xref:System.ComponentModel.License>.</xref:System.ComponentModel.License> </xref:System.ComponentModel.LicenseException> Den <xref:System.ComponentModel.LicenseManager.Validate%2A>metoden utlöser undantag.</xref:System.ComponentModel.LicenseManager.Validate%2A>"
  syntax:
    content: public static bool IsValid (Type type);
    parameters:
    - id: type
      type: System.Type
      description: "En <xref:System.Type>som representerar typen av objekt som begär den <xref href=&quot;System.ComponentModel.License&quot;> </xref>.</xref:System.Type>"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Om en giltig licens kan beviljas; Annars <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.ComponentModel.LicenseManager.IsValid*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.LicenseManager.IsValid(System.Type,System.Object,System.ComponentModel.License@)
  id: IsValid(System.Type,System.Object,System.ComponentModel.License@)
  parent: System.ComponentModel.LicenseManager
  langs:
  - csharp
  name: IsValid(Type,Object,License)
  nameWithType: LicenseManager.IsValid(Type,Object,License)
  fullName: System.ComponentModel.LicenseManager.IsValid(Type,Object,License)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Anger om du kan bevilja en giltig licens för den angivna instansen av typen. Den här metoden skapar en giltig <xref href=&quot;System.ComponentModel.License&quot;> </xref>."
  remarks: "Den <xref:System.ComponentModel.LicenseManager.IsValid%2A>metoden returnerar `true` när den `type` parameter är inte licensierad eller när den är licensierad och `license` parametern är giltig.</xref:System.ComponentModel.LicenseManager.IsValid%2A>       Den här metoden genereras inget ett <xref:System.ComponentModel.LicenseException>när den går inte att bevilja en giltig <xref:System.ComponentModel.License>.</xref:System.ComponentModel.License> </xref:System.ComponentModel.LicenseException> Den <xref:System.ComponentModel.LicenseManager.Validate%2A>metoden utlöser undantag.</xref:System.ComponentModel.LicenseManager.Validate%2A>       Om den `license` parametern är inte `null` efter det här anropet objektet ber om en <xref:System.ComponentModel.License>måste avyttra licensen genom att anropa den <xref:System.ComponentModel.License.Dispose%2A>metoden när objektet avyttras eller slutförd.</xref:System.ComponentModel.License.Dispose%2A> </xref:System.ComponentModel.License>"
  syntax:
    content: public static bool IsValid (Type type, object instance, out System.ComponentModel.License license);
    parameters:
    - id: type
      type: System.Type
      description: "En <xref:System.Type>som representerar typen av objekt som kräver licensen.</xref:System.Type>"
    - id: instance
      type: System.Object
      description: "Ett objekt av den angivna typen eller en typ som härleds från den angivna typen."
    - id: license
      type: System.ComponentModel.License
      description: "En <xref href=&quot;System.ComponentModel.License&quot;> </xref> som är en giltig licens eller <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> om det går inte att bevilja en giltig licens."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Om ett giltigt <xref href=&quot;System.ComponentModel.License&quot;> </xref> kan vara beviljade, annars <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.ComponentModel.LicenseManager.IsValid*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.LicenseManager.LockContext(System.Object)
  id: LockContext(System.Object)
  parent: System.ComponentModel.LicenseManager
  langs:
  - csharp
  name: LockContext(Object)
  nameWithType: LicenseManager.LockContext(Object)
  fullName: System.ComponentModel.LicenseManager.LockContext(Object)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Förhindrar ändringar i aktuellt <xref href=&quot;System.ComponentModel.LicenseContext&quot;> </xref> av angivet objekt."
  remarks: "Använd den <xref:System.ComponentModel.LicenseContext>att hämta den <xref:System.ComponentModel.License>för ett objekt.</xref:System.ComponentModel.License> </xref:System.ComponentModel.LicenseContext> Den här metoden låser den <xref:System.ComponentModel.LicenseContext>, förhindra den <xref:System.ComponentModel.License>hämtas.</xref:System.ComponentModel.License> </xref:System.ComponentModel.LicenseContext>"
  syntax:
    content: public static void LockContext (object contextUser);
    parameters:
    - id: contextUser
      type: System.Object
      description: "Objekt vars kontext som du vill låsa."
  overload: System.ComponentModel.LicenseManager.LockContext*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Kontexten är redan låst."
  platform:
  - net462
- uid: System.ComponentModel.LicenseManager.UnlockContext(System.Object)
  id: UnlockContext(System.Object)
  parent: System.ComponentModel.LicenseManager
  langs:
  - csharp
  name: UnlockContext(Object)
  nameWithType: LicenseManager.UnlockContext(Object)
  fullName: System.ComponentModel.LicenseManager.UnlockContext(Object)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Gör ändringar till aktuellt <xref href=&quot;System.ComponentModel.LicenseContext&quot;> </xref> av angivet objekt."
  remarks: "Använd den <xref:System.ComponentModel.LicenseContext>att hämta den <xref:System.ComponentModel.License>för ett objekt.</xref:System.ComponentModel.License> </xref:System.ComponentModel.LicenseContext> Den här metoden låser upp det <xref:System.ComponentModel.LicenseContext>, så att den <xref:System.ComponentModel.License>som ska hämtas.</xref:System.ComponentModel.License> </xref:System.ComponentModel.LicenseContext>"
  syntax:
    content: public static void UnlockContext (object contextUser);
    parameters:
    - id: contextUser
      type: System.Object
      description: "Objekt vars kontext som du vill låsa upp."
  overload: System.ComponentModel.LicenseManager.UnlockContext*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>contextUser</code>representerar en annan användare än den som angetts i ett tidigare anrop till <xref:System.ComponentModel.LicenseManager.LockContext*>."
  platform:
  - net462
- uid: System.ComponentModel.LicenseManager.UsageMode
  id: UsageMode
  parent: System.ComponentModel.LicenseManager
  langs:
  - csharp
  name: UsageMode
  nameWithType: LicenseManager.UsageMode
  fullName: System.ComponentModel.LicenseManager.UsageMode
  type: Property
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Hämtar den <xref href=&quot;System.ComponentModel.LicenseUsageMode&quot;> </xref> som anger när du kan använda objektet licensierad för <xref:System.ComponentModel.LicenseManager.CurrentContext*>.</xref:System.ComponentModel.LicenseManager.CurrentContext*>"
  remarks: "Om den här egenskapen inte kan hitta ett <xref:System.ComponentModel.LicenseManager.CurrentContext%2A>värde, returneras <xref:System.ComponentModel.LicenseUsageMode>.</xref:System.ComponentModel.LicenseUsageMode> </xref:System.ComponentModel.LicenseManager.CurrentContext%2A>"
  syntax:
    content: public static System.ComponentModel.LicenseUsageMode UsageMode { get; }
    return:
      type: System.ComponentModel.LicenseUsageMode
      description: "En av de <xref href=&quot;System.ComponentModel.LicenseUsageMode&quot;> </xref> värden som anges i den <xref:System.ComponentModel.LicenseManager.CurrentContext*>egenskapen.</xref:System.ComponentModel.LicenseManager.CurrentContext*>"
  overload: System.ComponentModel.LicenseManager.UsageMode*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.LicenseManager.Validate(System.Type)
  id: Validate(System.Type)
  parent: System.ComponentModel.LicenseManager
  langs:
  - csharp
  name: Validate(Type)
  nameWithType: LicenseManager.Validate(Type)
  fullName: System.ComponentModel.LicenseManager.Validate(Type)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Anger om du kan bevilja en licens för den angivna typen."
  remarks: "Den här metoden genererar en <xref:System.ComponentModel.LicenseException>när en giltig <xref:System.ComponentModel.License>går inte att bevilja.</xref:System.ComponentModel.License> </xref:System.ComponentModel.LicenseException> Den <xref:System.ComponentModel.LicenseManager.IsValid%2A>metoden inte utlösa ett undantag.</xref:System.ComponentModel.LicenseManager.IsValid%2A>"
  syntax:
    content: public static void Validate (Type type);
    parameters:
    - id: type
      type: System.Type
      description: "En <xref:System.Type>som representerar typen av objekt som kräver licensen.</xref:System.Type>"
  overload: System.ComponentModel.LicenseManager.Validate*
  exceptions:
  - type: System.ComponentModel.LicenseException
    commentId: T:System.ComponentModel.LicenseException
    description: "En <xref href=&quot;System.ComponentModel.License&quot;> </xref> inte beviljas."
  platform:
  - net462
- uid: System.ComponentModel.LicenseManager.Validate(System.Type,System.Object)
  id: Validate(System.Type,System.Object)
  parent: System.ComponentModel.LicenseManager
  langs:
  - csharp
  name: Validate(Type,Object)
  nameWithType: LicenseManager.Validate(Type,Object)
  fullName: System.ComponentModel.LicenseManager.Validate(Type,Object)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Anger om du kan bevilja en licens för instansen av den angivna typen."
  remarks: "Den här metoden genererar en <xref:System.ComponentModel.LicenseException>när en giltig <xref:System.ComponentModel.License>går inte att bevilja.</xref:System.ComponentModel.License> </xref:System.ComponentModel.LicenseException> Den <xref:System.ComponentModel.LicenseManager.IsValid%2A>metoden inte utlösa ett undantag.</xref:System.ComponentModel.LicenseManager.IsValid%2A>       Alla objekt som ber om en <xref:System.ComponentModel.License>måste avyttra licensen genom att anropa den <xref:System.ComponentModel.License.Dispose%2A>metoden när objektet avyttras eller slutförd.</xref:System.ComponentModel.License.Dispose%2A> </xref:System.ComponentModel.License>"
  syntax:
    content: public static System.ComponentModel.License Validate (Type type, object instance);
    parameters:
    - id: type
      type: System.Type
      description: "En <xref:System.Type>som representerar typen av objekt som kräver licensen.</xref:System.Type>"
    - id: instance
      type: System.Object
      description: "En <xref:System.Object>angiven typ eller av en typ som härleds från den angivna typen.</xref:System.Object>"
    return:
      type: System.ComponentModel.License
      description: "A valid <xref href=&quot;System.ComponentModel.License&quot;></xref>."
  overload: System.ComponentModel.LicenseManager.Validate*
  exceptions:
  - type: System.ComponentModel.LicenseException
    commentId: T:System.ComponentModel.LicenseException
    description: "Typen är licensierad, men en <xref href=&quot;System.ComponentModel.License&quot;> </xref> inte beviljas."
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.ComponentModel.LicenseException
  parent: System.ComponentModel
  isExternal: false
  name: LicenseException
  nameWithType: LicenseException
  fullName: System.ComponentModel.LicenseException
- uid: System.ComponentModel.LicenseManager.CreateWithContext(System.Type,System.ComponentModel.LicenseContext)
  parent: System.ComponentModel.LicenseManager
  isExternal: false
  name: CreateWithContext(Type,LicenseContext)
  nameWithType: LicenseManager.CreateWithContext(Type,LicenseContext)
  fullName: System.ComponentModel.LicenseManager.CreateWithContext(Type,LicenseContext)
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.ComponentModel.LicenseContext
  parent: System.ComponentModel
  isExternal: false
  name: LicenseContext
  nameWithType: LicenseContext
  fullName: System.ComponentModel.LicenseContext
- uid: System.ComponentModel.LicenseManager.CreateWithContext(System.Type,System.ComponentModel.LicenseContext,System.Object[])
  parent: System.ComponentModel.LicenseManager
  isExternal: false
  name: CreateWithContext(Type,LicenseContext,Object[])
  nameWithType: LicenseManager.CreateWithContext(Type,LicenseContext,Object[])
  fullName: System.ComponentModel.LicenseManager.CreateWithContext(Type,LicenseContext,Object[])
- uid: System.Object[]
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object[]
  spec.csharp:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: Object[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.ComponentModel.LicenseManager.CurrentContext
  parent: System.ComponentModel.LicenseManager
  isExternal: false
  name: CurrentContext
  nameWithType: LicenseManager.CurrentContext
  fullName: System.ComponentModel.LicenseManager.CurrentContext
- uid: System.ComponentModel.LicenseManager.IsLicensed(System.Type)
  parent: System.ComponentModel.LicenseManager
  isExternal: false
  name: IsLicensed(Type)
  nameWithType: LicenseManager.IsLicensed(Type)
  fullName: System.ComponentModel.LicenseManager.IsLicensed(Type)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.ComponentModel.LicenseManager.IsValid(System.Type)
  parent: System.ComponentModel.LicenseManager
  isExternal: false
  name: IsValid(Type)
  nameWithType: LicenseManager.IsValid(Type)
  fullName: System.ComponentModel.LicenseManager.IsValid(Type)
- uid: System.ComponentModel.LicenseManager.IsValid(System.Type,System.Object,System.ComponentModel.License@)
  parent: System.ComponentModel.LicenseManager
  isExternal: false
  name: IsValid(Type,Object,License)
  nameWithType: LicenseManager.IsValid(Type,Object,License)
  fullName: System.ComponentModel.LicenseManager.IsValid(Type,Object,License)
- uid: System.ComponentModel.License
  parent: System.ComponentModel
  isExternal: false
  name: License
  nameWithType: License
  fullName: System.ComponentModel.License
- uid: System.ComponentModel.LicenseManager.LockContext(System.Object)
  parent: System.ComponentModel.LicenseManager
  isExternal: false
  name: LockContext(Object)
  nameWithType: LicenseManager.LockContext(Object)
  fullName: System.ComponentModel.LicenseManager.LockContext(Object)
- uid: System.ComponentModel.LicenseManager.UnlockContext(System.Object)
  parent: System.ComponentModel.LicenseManager
  isExternal: false
  name: UnlockContext(Object)
  nameWithType: LicenseManager.UnlockContext(Object)
  fullName: System.ComponentModel.LicenseManager.UnlockContext(Object)
- uid: System.ComponentModel.LicenseManager.UsageMode
  parent: System.ComponentModel.LicenseManager
  isExternal: false
  name: UsageMode
  nameWithType: LicenseManager.UsageMode
  fullName: System.ComponentModel.LicenseManager.UsageMode
- uid: System.ComponentModel.LicenseUsageMode
  parent: System.ComponentModel
  isExternal: false
  name: LicenseUsageMode
  nameWithType: LicenseUsageMode
  fullName: System.ComponentModel.LicenseUsageMode
- uid: System.ComponentModel.LicenseManager.Validate(System.Type)
  parent: System.ComponentModel.LicenseManager
  isExternal: false
  name: Validate(Type)
  nameWithType: LicenseManager.Validate(Type)
  fullName: System.ComponentModel.LicenseManager.Validate(Type)
- uid: System.ComponentModel.LicenseManager.Validate(System.Type,System.Object)
  parent: System.ComponentModel.LicenseManager
  isExternal: false
  name: Validate(Type,Object)
  nameWithType: LicenseManager.Validate(Type,Object)
  fullName: System.ComponentModel.LicenseManager.Validate(Type,Object)
- uid: System.ComponentModel.LicenseManager.CreateWithContext*
  parent: System.ComponentModel.LicenseManager
  isExternal: false
  name: CreateWithContext
  nameWithType: LicenseManager.CreateWithContext
- uid: System.ComponentModel.LicenseManager.CurrentContext*
  parent: System.ComponentModel.LicenseManager
  isExternal: false
  name: CurrentContext
  nameWithType: LicenseManager.CurrentContext
- uid: System.ComponentModel.LicenseManager.IsLicensed*
  parent: System.ComponentModel.LicenseManager
  isExternal: false
  name: IsLicensed
  nameWithType: LicenseManager.IsLicensed
- uid: System.ComponentModel.LicenseManager.IsValid*
  parent: System.ComponentModel.LicenseManager
  isExternal: false
  name: IsValid
  nameWithType: LicenseManager.IsValid
- uid: System.ComponentModel.LicenseManager.LockContext*
  parent: System.ComponentModel.LicenseManager
  isExternal: false
  name: LockContext
  nameWithType: LicenseManager.LockContext
- uid: System.ComponentModel.LicenseManager.UnlockContext*
  parent: System.ComponentModel.LicenseManager
  isExternal: false
  name: UnlockContext
  nameWithType: LicenseManager.UnlockContext
- uid: System.ComponentModel.LicenseManager.UsageMode*
  parent: System.ComponentModel.LicenseManager
  isExternal: false
  name: UsageMode
  nameWithType: LicenseManager.UsageMode
- uid: System.ComponentModel.LicenseManager.Validate*
  parent: System.ComponentModel.LicenseManager
  isExternal: false
  name: Validate
  nameWithType: LicenseManager.Validate
