### YamlMime:ManagedReference
items:
- uid: System.Windows.Forms.NativeWindow
  id: NativeWindow
  children:
  - System.Windows.Forms.NativeWindow.#ctor
  - System.Windows.Forms.NativeWindow.AssignHandle(System.IntPtr)
  - System.Windows.Forms.NativeWindow.CreateHandle(System.Windows.Forms.CreateParams)
  - System.Windows.Forms.NativeWindow.DefWndProc(System.Windows.Forms.Message@)
  - System.Windows.Forms.NativeWindow.DestroyHandle
  - System.Windows.Forms.NativeWindow.Finalize
  - System.Windows.Forms.NativeWindow.FromHandle(System.IntPtr)
  - System.Windows.Forms.NativeWindow.Handle
  - System.Windows.Forms.NativeWindow.OnHandleChange
  - System.Windows.Forms.NativeWindow.OnThreadException(System.Exception)
  - System.Windows.Forms.NativeWindow.ReleaseHandle
  - System.Windows.Forms.NativeWindow.WndProc(System.Windows.Forms.Message@)
  langs:
  - csharp
  name: NativeWindow
  nameWithType: NativeWindow
  fullName: System.Windows.Forms.NativeWindow
  type: Class
  summary: "Tillhandahåller en låg nivå inkapsling av en fönsterreferens och en procedur i fönstret."
  remarks: "Den här klassen hanterar automatiskt skapande av fönstret klass och registrering.       Ett fönster är inte tillämplig för skräpinsamling när den är associerad med en fönsterreferens. För att säkerställa rätt skräpinsamling måste referenser antingen förstöras manuellt med hjälp av <xref:System.Windows.Forms.NativeWindow.DestroyHandle%2A>eller släppts med <xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A>.</xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A> </xref:System.Windows.Forms.NativeWindow.DestroyHandle%2A>      > [!NOTE] > Den <xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A>metoden anropas när WM_NCDESTROY meddelandet bearbetas.</xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A> Detta innebär att det finns fall där om du behöver du inte manuellt anropar <xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A>, men det är bra att göra detta.</xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A>       NativeWindow-klassen innehåller följande egenskaper och metoder för att hantera referenser: <xref:System.Windows.Forms.NativeWindow.Handle%2A>, <xref:System.Windows.Forms.NativeWindow.CreateHandle%2A>, <xref:System.Windows.Forms.NativeWindow.AssignHandle%2A>, <xref:System.Windows.Forms.NativeWindow.DestroyHandle%2A>, och <xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A>.</xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A> </xref:System.Windows.Forms.NativeWindow.DestroyHandle%2A> </xref:System.Windows.Forms.NativeWindow.AssignHandle%2A> </xref:System.Windows.Forms.NativeWindow.CreateHandle%2A> </xref:System.Windows.Forms.NativeWindow.Handle%2A>"
  example:
  - "The following code example demonstrates intercepting operating system window messages in a window procedure, and creating a window with a specific operating system window class name. The example creates two classes that inherit from NativeWindow that accomplish this.  \n  \n The `MyNativeWindowListener` class hooks into the window procedure of the form passed into the constructor, and overrides the <xref:System.Windows.Forms.NativeWindow.WndProc%2A> method to intercept the `WM_ACTIVATEAPP` window message. The class demonstrates the usage of the <xref:System.Windows.Forms.NativeWindow.AssignHandle%2A> and <xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A> methods to identify the window handle the NativeWindow will use. The handle is assign based upon the <xref:System.Windows.Forms.Control.HandleCreated?displayProperty=fullName> and <xref:System.Windows.Forms.Control.HandleDestroyed?displayProperty=fullName> events. When the `WM_ACTIVATEAPP` window message is received, the class calls the `form1``ApplicationActivated` method.  \n  \n The `MyNativeWindow` class creates a new window with the <xref:System.Windows.Forms.CreateParams.ClassName%2A> set to `BUTTON`. The class demonstrates using the <xref:System.Windows.Forms.NativeWindow.CreateHandle%2A> method and overriding the <xref:System.Windows.Forms.NativeWindow.WndProc%2A> method to intercept window messages that are received.  \n  \n [!code-cpp[NativeWindow#1](~/add/codesnippet/cpp/t-system.windows.forms.n_0_1.cpp)]\n [!code-cs[NativeWindow#1](~/add/codesnippet/csharp/t-system.windows.forms.n_0_1.cs)]\n [!code-vb[NativeWindow#1](~/add/codesnippet/visualbasic/t-system.windows.forms.n_0_1.vb)]"
  syntax:
    content: 'public class NativeWindow : MarshalByRefObject, System.Windows.Forms.IWin32Window'
  inheritance:
  - System.Object
  - System.MarshalByRefObject
  implements:
  - System.Windows.Forms.IWin32Window
  inheritedMembers:
  - System.MarshalByRefObject.CreateObjRef(System.Type)
  - System.MarshalByRefObject.GetLifetimeService
  - System.MarshalByRefObject.InitializeLifetimeService
  - System.MarshalByRefObject.MemberwiseClone(System.Boolean)
  platform:
  - net462
- uid: System.Windows.Forms.NativeWindow.#ctor
  id: '#ctor'
  parent: System.Windows.Forms.NativeWindow
  langs:
  - csharp
  name: NativeWindow()
  nameWithType: NativeWindow.NativeWindow()
  fullName: System.Windows.Forms.NativeWindow.NativeWindow()
  type: Constructor
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Initierar en instans av den <xref href=&quot;System.Windows.Forms.NativeWindow&quot;> </xref> klass."
  remarks: "Detta är NativeWindow Standardkonstruktorn tillhandahålls av kompileraren. Den <xref:System.Windows.Forms.NativeWindow>klassen har också en statisk konstruktor som initierar program domänomfattande meddelandehanterare och hash-tabeller.</xref:System.Windows.Forms.NativeWindow>"
  syntax:
    content: public NativeWindow ();
    parameters: []
  overload: System.Windows.Forms.NativeWindow.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.NativeWindow.AssignHandle(System.IntPtr)
  id: AssignHandle(System.IntPtr)
  parent: System.Windows.Forms.NativeWindow
  langs:
  - csharp
  name: AssignHandle(IntPtr)
  nameWithType: NativeWindow.AssignHandle(IntPtr)
  fullName: System.Windows.Forms.NativeWindow.AssignHandle(IntPtr)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Tilldelar en referens till det här fönstret."
  remarks: "<xref:System.Windows.Forms.NativeWindow.WndProc%2A>fångar upp fönstret meddelanden som skickas till den `handle` parameter.</xref:System.Windows.Forms.NativeWindow.WndProc%2A> Använd <xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A>att återställa den referensen fönstret proceduren till standard fönstret proceduren.</xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A>       Metodanrop AssignHandle den <xref:System.Windows.Forms.NativeWindow.OnHandleChange%2A>metoden som indikerar att värdet för den <xref:System.Windows.Forms.NativeWindow.Handle%2A>egenskap har ändrats.</xref:System.Windows.Forms.NativeWindow.Handle%2A> </xref:System.Windows.Forms.NativeWindow.OnHandleChange%2A>      > [!NOTE] > Referensen till tilldela får inte finnas i en annan programprocessen."
  example:
  - "The following code example demonstrates intercepting operating system window messages in a window procedure. The example creates a class that inherits from <xref:System.Windows.Forms.NativeWindow> to accomplish this.  \n  \n The `MyNativeWindowListener` class hooks into the window procedure of the form passed into the constructor, and overrides the <xref:System.Windows.Forms.NativeWindow.WndProc%2A> method to intercepts the `WM_ACTIVATEAPP` window message. The class demonstrates the use of the AssignHandle and <xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A> methods to identify which window handle the <xref:System.Windows.Forms.NativeWindow> will use. The handle is assigned based upon the <xref:System.Windows.Forms.Control.HandleCreated?displayProperty=fullName> and <xref:System.Windows.Forms.Control.HandleDestroyed?displayProperty=fullName> events. When the `WM_ACTIVATEAPP` window message is received, the class calls the `form1``ApplicationActivated` method.  \n  \n This code is an excerpt from the example shown in the <xref:System.Windows.Forms.NativeWindow> class overview. Some code is not shown for the purpose of brevity. See <xref:System.Windows.Forms.NativeWindow> for the whole code listing.  \n  \n [!code-cpp[NativeWindow#2](~/add/codesnippet/cpp/m-system.windows.forms.n_4_1.cpp)]\n [!code-cs[NativeWindow#2](~/add/codesnippet/csharp/m-system.windows.forms.n_4_1.cs)]\n [!code-vb[NativeWindow#2](~/add/codesnippet/visualbasic/m-system.windows.forms.n_4_1.vb)]"
  syntax:
    content: public void AssignHandle (IntPtr handle);
    parameters:
    - id: handle
      type: System.IntPtr
      description: "Referensen till tilldela det här fönstret."
  overload: System.Windows.Forms.NativeWindow.AssignHandle*
  exceptions:
  - type: System.Exception
    commentId: T:System.Exception
    description: "Det här fönstret har redan en referens."
  - type: System.ComponentModel.Win32Exception
    commentId: T:System.ComponentModel.Win32Exception
    description: "Det gick inte att hämta windows-proceduren för det associerade interna fönstret."
  platform:
  - net462
- uid: System.Windows.Forms.NativeWindow.CreateHandle(System.Windows.Forms.CreateParams)
  id: CreateHandle(System.Windows.Forms.CreateParams)
  parent: System.Windows.Forms.NativeWindow
  langs:
  - csharp
  name: CreateHandle(CreateParams)
  nameWithType: NativeWindow.CreateHandle(CreateParams)
  fullName: System.Windows.Forms.NativeWindow.CreateHandle(CreateParams)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Skapar ett fönster och dess handtag med angivna skapandeparametrarna."
  remarks: "Den `cp` parametern anger det värde som skickas till interna Win32 `CreateWindowEx` metod för att skapa ett fönster och dess handtag.       När den <xref:System.Windows.Forms.CreateParams.ClassName%2A>fältet är inte `null`, nyskapade fönsterreferensen ärver från den angivna klassen</xref:System.Windows.Forms.CreateParams.ClassName%2A> Till exempel om <xref:System.Windows.Forms.CreateParams.ClassName%2A>är inställd på `BUTTON`, fönstret nyligen skapade baseras på Win32 `BUTTON` fönstret klass</xref:System.Windows.Forms.CreateParams.ClassName%2A> Den <xref:System.Windows.Forms.CreateParams.Param%2A>egenskapen för den <xref:System.Windows.Forms.CreateParams.ClassName%2A>objektet måste antingen vara `null` eller referera till en instans av en klass som har deklarerats som en struktur.</xref:System.Windows.Forms.CreateParams.ClassName%2A> </xref:System.Windows.Forms.CreateParams.Param%2A>       Den här koden är hämtad från exemplet som visas i den <xref:System.Windows.Forms.NativeWindow>Översikt över klassen.</xref:System.Windows.Forms.NativeWindow> Kod visas inte för planeringsaspekter. Se <xref:System.Windows.Forms.NativeWindow>för hela koden.</xref:System.Windows.Forms.NativeWindow>      > [!NOTE] > Klassnamn som har registrerats med operativsystemet."
  example:
  - "The following code example demonstrates creating a window with a specific operating system window class name. The example creates a class that inherits from <xref:System.Windows.Forms.NativeWindow> to accomplish this.  \n  \n The `MyNativeWindow` class creates a new window with the <xref:System.Windows.Forms.CreateParams.ClassName%2A> set to `BUTTON`. This creates a Win32 button window. The location and size of the button is set, along with specifying additional window styles. The class demonstrates how to use the CreateHandle method and override the <xref:System.Windows.Forms.NativeWindow.WndProc%2A> method to intercept window messages that are received. Although the example looks for the WM_ACTIVATEAPP message, this can be replaced in a real program with window messages specific to the type created.  \n  \n> [!NOTE]\n>  Some control types send their window messages to the window parent instead of the window. See the Windows Platform SDK for more information.  \n  \n [!code-cpp[NativeWindow#3](~/add/codesnippet/cpp/4bc4c996-2177-4901-b43d-_1.cpp)]\n [!code-cs[NativeWindow#3](~/add/codesnippet/csharp/4bc4c996-2177-4901-b43d-_1.cs)]\n [!code-vb[NativeWindow#3](~/add/codesnippet/visualbasic/4bc4c996-2177-4901-b43d-_1.vb)]"
  syntax:
    content: public virtual void CreateHandle (System.Windows.Forms.CreateParams cp);
    parameters:
    - id: cp
      type: System.Windows.Forms.CreateParams
      description: "En <xref href=&quot;System.Windows.Forms.CreateParams&quot;> </xref> som anger skapandeparametrarna för det här fönstret."
  overload: System.Windows.Forms.NativeWindow.CreateHandle*
  exceptions:
  - type: System.OutOfMemoryException
    commentId: T:System.OutOfMemoryException
    description: "Operativsystemet fick slut på resurser vid försök att skapa fönstret native."
  - type: System.ComponentModel.Win32Exception
    commentId: T:System.ComponentModel.Win32Exception
    description: "Ursprunglig Win32 API kunde inte skapa den angivna tidsperioden."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Referensen till det aktuella interna fönstret har redan tilldelats; i förklaring, <xref:System.Windows.Forms.NativeWindow.Handle*>egenskapen är inte lika med <xref:System.IntPtr.Zero>.</xref:System.IntPtr.Zero> </xref:System.Windows.Forms.NativeWindow.Handle*>"
  platform:
  - net462
- uid: System.Windows.Forms.NativeWindow.DefWndProc(System.Windows.Forms.Message@)
  id: DefWndProc(System.Windows.Forms.Message@)
  parent: System.Windows.Forms.NativeWindow
  langs:
  - csharp
  name: DefWndProc(Message)
  nameWithType: NativeWindow.DefWndProc(Message)
  fullName: System.Windows.Forms.NativeWindow.DefWndProc(Message)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Anropar standard fönstret proceduren som är associerade med det här fönstret."
  remarks: "Normalt anropa du bara metoden DefWndProc när du avlyssna fönstret meddelanden och som standard fönster för att hantera meddelandet. DefWndProc ska inte anropas för att skicka ett meddelande i fönstret till fönstret. anropa Win32 `SendMessage` fungerar i stället.       Det går inte att anropa DefWndProc när den <xref:System.Windows.Forms.NativeWindow.Handle%2A>egenskapen är 0.</xref:System.Windows.Forms.NativeWindow.Handle%2A>"
  syntax:
    content: public void DefWndProc (ref System.Windows.Forms.Message m);
    parameters:
    - id: m
      type: System.Windows.Forms.Message
      description: "Det meddelande som håller på att behandlas."
  overload: System.Windows.Forms.NativeWindow.DefWndProc*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.NativeWindow.DestroyHandle
  id: DestroyHandle
  parent: System.Windows.Forms.NativeWindow
  langs:
  - csharp
  name: DestroyHandle()
  nameWithType: NativeWindow.DestroyHandle()
  fullName: System.Windows.Forms.NativeWindow.DestroyHandle()
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Förstör fönstret och dess handtag."
  remarks: "Den här metoden förstör fönstret som är associerade med den <xref:System.Windows.Forms.NativeWindow.Handle%2A>, anger den <xref:System.Windows.Forms.NativeWindow.Handle%2A>egenskapen till 0 och anrop i <xref:System.Windows.Forms.NativeWindow.OnHandleChange%2A>metod för att avspegla ändringen.</xref:System.Windows.Forms.NativeWindow.OnHandleChange%2A> </xref:System.Windows.Forms.NativeWindow.Handle%2A> </xref:System.Windows.Forms.NativeWindow.Handle%2A> Normalt anropa du bara DestroyHandle när du är klar med det inbyggda fönstret.      > [!NOTE] > Den <xref:System.Windows.Forms.NativeWindow>klassen automatiskt ska ta bort den associerade fönstret och släpp dess resurser som svar på meddelandet WM_DESTROY.</xref:System.Windows.Forms.NativeWindow>"
  syntax:
    content: public virtual void DestroyHandle ();
    parameters: []
  overload: System.Windows.Forms.NativeWindow.DestroyHandle*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.NativeWindow.Finalize
  id: Finalize
  parent: System.Windows.Forms.NativeWindow
  langs:
  - csharp
  name: Finalize()
  nameWithType: NativeWindow.Finalize()
  fullName: System.Windows.Forms.NativeWindow.Finalize()
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Släpper de resurser som är associerade med det här fönstret."
  remarks: "Finalize-metoden tar bort Win32 härledda klassen som är associerade med aktuellt <xref:System.Windows.Forms.NativeWindow>instans, släpper referensen och skickar ett meddelande om WM_CLOSE till det associerade fönstret.</xref:System.Windows.Forms.NativeWindow>"
  syntax:
    content: ~NativeWindow ();
    parameters: []
  overload: System.Windows.Forms.NativeWindow.Finalize*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.NativeWindow.FromHandle(System.IntPtr)
  id: FromHandle(System.IntPtr)
  parent: System.Windows.Forms.NativeWindow
  langs:
  - csharp
  name: FromHandle(IntPtr)
  nameWithType: NativeWindow.FromHandle(IntPtr)
  fullName: System.Windows.Forms.NativeWindow.FromHandle(IntPtr)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Hämtar fönstret som är associerade med den angivna referensen."
  remarks: "Om du får en referens från en annan metod kan du använda den här metoden för att hämta fönstret som är associerad med referensen. Referensen redan måste ägas av en annan <xref:System.Windows.Forms.NativeWindow>i aktuellt processen, annars `null` returneras.</xref:System.Windows.Forms.NativeWindow>"
  syntax:
    content: public static System.Windows.Forms.NativeWindow FromHandle (IntPtr handle);
    parameters:
    - id: handle
      type: System.IntPtr
      description: "En referens till ett fönster."
    return:
      type: System.Windows.Forms.NativeWindow
      description: "Den <xref href=&quot;System.Windows.Forms.NativeWindow&quot;> </xref> som är associerade med den angivna referensen. Den här metoden returnerar <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> när referensen inte har en associerad fönster."
  overload: System.Windows.Forms.NativeWindow.FromHandle*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.NativeWindow.Handle
  id: Handle
  parent: System.Windows.Forms.NativeWindow
  langs:
  - csharp
  name: Handle
  nameWithType: NativeWindow.Handle
  fullName: System.Windows.Forms.NativeWindow.Handle
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Hämtar referensen för det här fönstret."
  remarks: "Använd den här metoden när du anropar Windows API-metoder som kräver en referens för ett fönster eller en kontroll."
  example:
  - "The following code example demonstrates creating a window with a specific operating system window class name. The example creates a class that inherits from <xref:System.Windows.Forms.NativeWindow> to accomplish this. The example also demonstrates overriding the <xref:System.Windows.Forms.NativeWindow.OnHandleChange%2A> method to be notified when the Handle changes.  \n  \n The `MyNativeWindow` class creates a new window with the <xref:System.Windows.Forms.CreateParams.ClassName%2A> set to BUTTON. This creates a Win32 button window. The location and size of the button is set, along with specifying additional window styles. The class demonstrates how to use the <xref:System.Windows.Forms.NativeWindow.CreateHandle%2A> method and override the <xref:System.Windows.Forms.NativeWindow.WndProc%2A> method to intercept window messages that are received. Although the example looks for the WM_ACTIVATEAPP message, this could be replaced in a real program with window messages specific to the type created.  \n  \n> [!NOTE]\n>  Some control types send their window messages to the window parent instead of the window. See the Windows Platform SDK for more information.  \n  \n [!code-cpp[NativeWindow#3](~/add/codesnippet/cpp/p-system.windows.forms.n_14_1.cpp)]\n [!code-cs[NativeWindow#3](~/add/codesnippet/csharp/p-system.windows.forms.n_14_1.cs)]\n [!code-vb[NativeWindow#3](~/add/codesnippet/visualbasic/p-system.windows.forms.n_14_1.vb)]"
  syntax:
    content: public IntPtr Handle { get; }
    return:
      type: System.IntPtr
      description: "Om det lyckas, en <xref:System.IntPtr>som representerar referensen till det associerade interna Win32 fönstret; annars 0 om inget handtag är associerad med fönstret.</xref:System.IntPtr>"
  overload: System.Windows.Forms.NativeWindow.Handle*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.NativeWindow.OnHandleChange
  id: OnHandleChange
  parent: System.Windows.Forms.NativeWindow
  langs:
  - csharp
  name: OnHandleChange()
  nameWithType: NativeWindow.OnHandleChange()
  fullName: System.Windows.Forms.NativeWindow.OnHandleChange()
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Anger en notification-metod som anropas när referensen för ett fönster har ändrats."
  remarks: "Den här metoden anropas när värdet för den <xref:System.Windows.Forms.NativeWindow.Handle%2A>egenskap har ändrats.</xref:System.Windows.Forms.NativeWindow.Handle%2A>"
  example:
  - "The following code example demonstrates creating a window with a specific operating system window class name. The example creates a class that inherits from <xref:System.Windows.Forms.NativeWindow> to accomplish this. The example also demonstrates overriding the OnHandleChange method to be notified when the <xref:System.Windows.Forms.NativeWindow.Handle%2A> changes.  \n  \n The `MyNativeWindow` class creates a new window with the <xref:System.Windows.Forms.CreateParams.ClassName%2A> set to `BUTTON`. This creates a Win32 button window. The location and size of the button is set, along with specifying additional window styles. The class demonstrates how to use the <xref:System.Windows.Forms.NativeWindow.CreateHandle%2A> method and override the <xref:System.Windows.Forms.NativeWindow.WndProc%2A> method to intercept window messages that are received. Although the example looks for the WM_ACTIVATEAPP message, this can be replaced in a real program with window messages specific to the type created.  \n  \n This code is an excerpt from the example shown in the <xref:System.Windows.Forms.NativeWindow> class overview. Some code is not shown for the purpose of brevity. See <xref:System.Windows.Forms.NativeWindow> for the whole code listing.  \n  \n> [!NOTE]\n>  Some control types send their window messages to the window parent instead of the window. See the Windows Platform SDK for more information.  \n  \n [!code-cpp[NativeWindow#3](~/add/codesnippet/cpp/m-system.windows.forms.n_1_1.cpp)]\n [!code-cs[NativeWindow#3](~/add/codesnippet/csharp/m-system.windows.forms.n_1_1.cs)]\n [!code-vb[NativeWindow#3](~/add/codesnippet/visualbasic/m-system.windows.forms.n_1_1.vb)]"
  syntax:
    content: protected virtual void OnHandleChange ();
    parameters: []
  overload: System.Windows.Forms.NativeWindow.OnHandleChange*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.NativeWindow.OnThreadException(System.Exception)
  id: OnThreadException(System.Exception)
  parent: System.Windows.Forms.NativeWindow
  langs:
  - csharp
  name: OnThreadException(Exception)
  nameWithType: NativeWindow.OnThreadException(Exception)
  fullName: System.Windows.Forms.NativeWindow.OnThreadException(Exception)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Hanterar ett ohanterat undantag när åsidosätts i en härledd klass."
  remarks: "Normalt <xref:System.Windows.Forms.Application.OnThreadException%2A>handtag tråd undantag.</xref:System.Windows.Forms.Application.OnThreadException%2A>"
  syntax:
    content: protected virtual void OnThreadException (Exception e);
    parameters:
    - id: e
      type: System.Exception
      description: "En <xref:System.Exception>som anger det ohanterat undantaget.</xref:System.Exception>"
  overload: System.Windows.Forms.NativeWindow.OnThreadException*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.NativeWindow.ReleaseHandle
  id: ReleaseHandle
  parent: System.Windows.Forms.NativeWindow
  langs:
  - csharp
  name: ReleaseHandle()
  nameWithType: NativeWindow.ReleaseHandle()
  fullName: System.Windows.Forms.NativeWindow.ReleaseHandle()
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Frigör den referens som är associerade med det här fönstret."
  remarks: "Den här metoden förstör inte fönsterreferensen. I stället anger den referensen fönstret proceduren till standard fönstret proceduren. Anger den <xref:System.Windows.Forms.NativeWindow.Handle%2A>egenskapen till 0 och anrop <xref:System.Windows.Forms.NativeWindow.OnHandleChange%2A>att avspegla ändringen.</xref:System.Windows.Forms.NativeWindow.OnHandleChange%2A> </xref:System.Windows.Forms.NativeWindow.Handle%2A>       Ett fönster anropar automatiskt den här metoden om den tar emot en inbyggd Win32 WM_NCDESTROY meddelande som anger att Windows har förstörts referensen."
  example:
  - "The following code example demonstrates intercepting operating system window messages in a window procedure. The example creates a class that inherits from <xref:System.Windows.Forms.NativeWindow> to accomplish this.  \n  \n The `MyNativeWindowListener` class hooks into the window procedure of the form passed into the constructor, and overrides the <xref:System.Windows.Forms.NativeWindow.WndProc%2A> method to intercepts the `WM_ACTIVATEAPP` window message. The class demonstrates the use of the <xref:System.Windows.Forms.NativeWindow.AssignHandle%2A> and ReleaseHandle methods to identify the window handle the <xref:System.Windows.Forms.NativeWindow> will use. The handle is assign based upon the <xref:System.Windows.Forms.Control.HandleCreated?displayProperty=fullName> and <xref:System.Windows.Forms.Control.HandleDestroyed?displayProperty=fullName> events. When the `WM_ACTIVATEAPP` window message is received, the class calls the `form1``ApplicationActivated` method.  \n  \n This code is an excerpt from the example shown in the <xref:System.Windows.Forms.NativeWindow> class overview. Some code is not shown for the purpose of brevity. See <xref:System.Windows.Forms.NativeWindow> for the whole code listing.  \n  \n [!code-cpp[NativeWindow#2](~/add/codesnippet/cpp/m-system.windows.forms.n_0_1.cpp)]\n [!code-cs[NativeWindow#2](~/add/codesnippet/csharp/m-system.windows.forms.n_0_1.cs)]\n [!code-vb[NativeWindow#2](~/add/codesnippet/visualbasic/m-system.windows.forms.n_0_1.vb)]"
  syntax:
    content: public virtual void ReleaseHandle ();
    parameters: []
  overload: System.Windows.Forms.NativeWindow.ReleaseHandle*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.NativeWindow.WndProc(System.Windows.Forms.Message@)
  id: WndProc(System.Windows.Forms.Message@)
  parent: System.Windows.Forms.NativeWindow
  langs:
  - csharp
  name: WndProc(Message)
  nameWithType: NativeWindow.WndProc(Message)
  fullName: System.Windows.Forms.NativeWindow.WndProc(Message)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Anropar standard fönstret proceduren som är associerade med det här fönstret."
  remarks: "Den här metoden anropas när ett fönster-meddelande skickas till referensen i fönstret."
  example:
  - "The following code example demonstrates intercepting operating system window messages in a window procedure. The example creates a class that inherits from <xref:System.Windows.Forms.NativeWindow> to accomplish this.  \n  \n The `MyNativeWindowListener` class hooks into the window procedure of the form passed into the constructor, and overrides the WndProc method to intercept the `WM_ACTIVATEAPP` window message. The class demonstrates the use of the <xref:System.Windows.Forms.NativeWindow.AssignHandle%2A> and <xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A> methods to identify the window handle the <xref:System.Windows.Forms.NativeWindow> will use. The handle is assigned based upon the <xref:System.Windows.Forms.Control.HandleCreated?displayProperty=fullName> and <xref:System.Windows.Forms.Control.HandleDestroyed?displayProperty=fullName> events. When the `WM_ACTIVATEAPP` window message is received, the class calls the `form1``ApplicationActivated` method.  \n  \n This code is an excerpt from the example shown in the <xref:System.Windows.Forms.NativeWindow> class overview. Some code is not shown for the purpose of brevity. See <xref:System.Windows.Forms.NativeWindow> for the whole code listing.  \n  \n [!code-cpp[NativeWindow#2](~/add/codesnippet/cpp/m-system.windows.forms.n_3_1.cpp)]\n [!code-cs[NativeWindow#2](~/add/codesnippet/csharp/m-system.windows.forms.n_3_1.cs)]\n [!code-vb[NativeWindow#2](~/add/codesnippet/visualbasic/m-system.windows.forms.n_3_1.vb)]"
  syntax:
    content: protected virtual void WndProc (ref System.Windows.Forms.Message m);
    parameters:
    - id: m
      type: System.Windows.Forms.Message
      description: "En <xref href=&quot;System.Windows.Forms.Message&quot;> </xref> som är associerad med det aktuella meddelandet i Windows."
  overload: System.Windows.Forms.NativeWindow.WndProc*
  exceptions: []
  platform:
  - net462
references:
- uid: System.MarshalByRefObject
  isExternal: false
  name: System.MarshalByRefObject
- uid: System.Exception
  isExternal: true
  name: System.Exception
- uid: System.ComponentModel.Win32Exception
  parent: System.ComponentModel
  isExternal: false
  name: Win32Exception
  nameWithType: Win32Exception
  fullName: System.ComponentModel.Win32Exception
- uid: System.OutOfMemoryException
  isExternal: true
  name: System.OutOfMemoryException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.Windows.Forms.NativeWindow.#ctor
  parent: System.Windows.Forms.NativeWindow
  isExternal: false
  name: NativeWindow()
  nameWithType: NativeWindow.NativeWindow()
  fullName: System.Windows.Forms.NativeWindow.NativeWindow()
- uid: System.Windows.Forms.NativeWindow.AssignHandle(System.IntPtr)
  parent: System.Windows.Forms.NativeWindow
  isExternal: false
  name: AssignHandle(IntPtr)
  nameWithType: NativeWindow.AssignHandle(IntPtr)
  fullName: System.Windows.Forms.NativeWindow.AssignHandle(IntPtr)
- uid: System.IntPtr
  parent: System
  isExternal: true
  name: IntPtr
  nameWithType: IntPtr
  fullName: System.IntPtr
- uid: System.Windows.Forms.NativeWindow.CreateHandle(System.Windows.Forms.CreateParams)
  parent: System.Windows.Forms.NativeWindow
  isExternal: false
  name: CreateHandle(CreateParams)
  nameWithType: NativeWindow.CreateHandle(CreateParams)
  fullName: System.Windows.Forms.NativeWindow.CreateHandle(CreateParams)
- uid: System.Windows.Forms.CreateParams
  parent: System.Windows.Forms
  isExternal: false
  name: CreateParams
  nameWithType: CreateParams
  fullName: System.Windows.Forms.CreateParams
- uid: System.Windows.Forms.NativeWindow.DefWndProc(System.Windows.Forms.Message@)
  parent: System.Windows.Forms.NativeWindow
  isExternal: false
  name: DefWndProc(Message)
  nameWithType: NativeWindow.DefWndProc(Message)
  fullName: System.Windows.Forms.NativeWindow.DefWndProc(Message)
- uid: System.Windows.Forms.Message
  parent: System.Windows.Forms
  isExternal: false
  name: Message
  nameWithType: Message
  fullName: System.Windows.Forms.Message
- uid: System.Windows.Forms.NativeWindow.DestroyHandle
  parent: System.Windows.Forms.NativeWindow
  isExternal: false
  name: DestroyHandle()
  nameWithType: NativeWindow.DestroyHandle()
  fullName: System.Windows.Forms.NativeWindow.DestroyHandle()
- uid: System.Windows.Forms.NativeWindow.Finalize
  parent: System.Windows.Forms.NativeWindow
  isExternal: false
  name: Finalize()
  nameWithType: NativeWindow.Finalize()
  fullName: System.Windows.Forms.NativeWindow.Finalize()
- uid: System.Windows.Forms.NativeWindow.FromHandle(System.IntPtr)
  parent: System.Windows.Forms.NativeWindow
  isExternal: false
  name: FromHandle(IntPtr)
  nameWithType: NativeWindow.FromHandle(IntPtr)
  fullName: System.Windows.Forms.NativeWindow.FromHandle(IntPtr)
- uid: System.Windows.Forms.NativeWindow
  parent: System.Windows.Forms
  isExternal: false
  name: NativeWindow
  nameWithType: NativeWindow
  fullName: System.Windows.Forms.NativeWindow
- uid: System.Windows.Forms.NativeWindow.Handle
  parent: System.Windows.Forms.NativeWindow
  isExternal: false
  name: Handle
  nameWithType: NativeWindow.Handle
  fullName: System.Windows.Forms.NativeWindow.Handle
- uid: System.Windows.Forms.NativeWindow.OnHandleChange
  parent: System.Windows.Forms.NativeWindow
  isExternal: false
  name: OnHandleChange()
  nameWithType: NativeWindow.OnHandleChange()
  fullName: System.Windows.Forms.NativeWindow.OnHandleChange()
- uid: System.Windows.Forms.NativeWindow.OnThreadException(System.Exception)
  parent: System.Windows.Forms.NativeWindow
  isExternal: false
  name: OnThreadException(Exception)
  nameWithType: NativeWindow.OnThreadException(Exception)
  fullName: System.Windows.Forms.NativeWindow.OnThreadException(Exception)
- uid: System.Windows.Forms.NativeWindow.ReleaseHandle
  parent: System.Windows.Forms.NativeWindow
  isExternal: false
  name: ReleaseHandle()
  nameWithType: NativeWindow.ReleaseHandle()
  fullName: System.Windows.Forms.NativeWindow.ReleaseHandle()
- uid: System.Windows.Forms.NativeWindow.WndProc(System.Windows.Forms.Message@)
  parent: System.Windows.Forms.NativeWindow
  isExternal: false
  name: WndProc(Message)
  nameWithType: NativeWindow.WndProc(Message)
  fullName: System.Windows.Forms.NativeWindow.WndProc(Message)
- uid: System.Windows.Forms.NativeWindow.#ctor*
  parent: System.Windows.Forms.NativeWindow
  isExternal: false
  name: NativeWindow
  nameWithType: NativeWindow.NativeWindow
- uid: System.Windows.Forms.NativeWindow.AssignHandle*
  parent: System.Windows.Forms.NativeWindow
  isExternal: false
  name: AssignHandle
  nameWithType: NativeWindow.AssignHandle
- uid: System.Windows.Forms.NativeWindow.CreateHandle*
  parent: System.Windows.Forms.NativeWindow
  isExternal: false
  name: CreateHandle
  nameWithType: NativeWindow.CreateHandle
- uid: System.Windows.Forms.NativeWindow.DefWndProc*
  parent: System.Windows.Forms.NativeWindow
  isExternal: false
  name: DefWndProc
  nameWithType: NativeWindow.DefWndProc
- uid: System.Windows.Forms.NativeWindow.DestroyHandle*
  parent: System.Windows.Forms.NativeWindow
  isExternal: false
  name: DestroyHandle
  nameWithType: NativeWindow.DestroyHandle
- uid: System.Windows.Forms.NativeWindow.Finalize*
  parent: System.Windows.Forms.NativeWindow
  isExternal: false
  name: Finalize
  nameWithType: NativeWindow.Finalize
- uid: System.Windows.Forms.NativeWindow.FromHandle*
  parent: System.Windows.Forms.NativeWindow
  isExternal: false
  name: FromHandle
  nameWithType: NativeWindow.FromHandle
- uid: System.Windows.Forms.NativeWindow.Handle*
  parent: System.Windows.Forms.NativeWindow
  isExternal: false
  name: Handle
  nameWithType: NativeWindow.Handle
- uid: System.Windows.Forms.NativeWindow.OnHandleChange*
  parent: System.Windows.Forms.NativeWindow
  isExternal: false
  name: OnHandleChange
  nameWithType: NativeWindow.OnHandleChange
- uid: System.Windows.Forms.NativeWindow.OnThreadException*
  parent: System.Windows.Forms.NativeWindow
  isExternal: false
  name: OnThreadException
  nameWithType: NativeWindow.OnThreadException
- uid: System.Windows.Forms.NativeWindow.ReleaseHandle*
  parent: System.Windows.Forms.NativeWindow
  isExternal: false
  name: ReleaseHandle
  nameWithType: NativeWindow.ReleaseHandle
- uid: System.Windows.Forms.NativeWindow.WndProc*
  parent: System.Windows.Forms.NativeWindow
  isExternal: false
  name: WndProc
  nameWithType: NativeWindow.WndProc
