### YamlMime:ManagedReference
items:
- uid: System.Threading.ParameterizedThreadStart
  id: ParameterizedThreadStart
  langs:
  - csharp
  name: ParameterizedThreadStart
  nameWithType: ParameterizedThreadStart
  fullName: System.Threading.ParameterizedThreadStart
  type: Delegate
  summary: "Representerar den metod som körs på en <xref href=&quot;System.Threading.Thread&quot;> </xref>."
  remarks: "När en hanterad tråd skapas den metod som körs på tråden representeras: – en <xref:System.Threading.ThreadStart>delegat som skickas till den <xref:System.Threading.Thread.%23ctor%28System.Threading.ThreadStart%29?displayProperty=fullName>konstruktor.</xref:System.Threading.Thread.%23ctor%28System.Threading.ThreadStart%29?displayProperty=fullName> </xref:System.Threading.ThreadStart>  En metod som har inga parametrar och som returnerar `void` i C# eller är en `Sub` procedur i Visual Basic kan representera delegaten.      -ParameterizedThreadStart ombud som skickas till den <xref:System.Threading.Thread.%23ctor%28System.Threading.ParameterizedThreadStart%2CSystem.Int32%29?displayProperty=fullName>konstruktor.</xref:System.Threading.Thread.%23ctor%28System.Threading.ParameterizedThreadStart%2CSystem.Int32%29?displayProperty=fullName> En metod som har en parameter av typen <xref:System.Object>och som returnerar void i C# eller är en Sub-procedur i Visual Basic kan representera delegaten.</xref:System.Object>       Tråden börjar inte körs förrän den <xref:System.Threading.Thread.Start%2A?displayProperty=fullName>metoden anropas.</xref:System.Threading.Thread.Start%2A?displayProperty=fullName> Den <xref:System.Threading.ThreadStart>ParameterizedThreadStart ombud anropas på tråden och körningen börjar vid den första raden i metoden som representeras av delegaten.</xref:System.Threading.ThreadStart> När det gäller ParameterizedThreadStart ombud kan det objekt som har överförts till den <xref:System.Threading.Thread.Start%28System.Object%29>metoden har överförts till delegaten.</xref:System.Threading.Thread.Start%28System.Object%29>      > [!NOTE] > Visual Basic och C#-användare kan utelämna den <xref:System.Threading.ThreadStart>eller ParameterizedThreadStart delegatkonstruktor när du skapar en tråd.</xref:System.Threading.ThreadStart> I Visual Basic kan du använda den `AddressOf` operatorn när metoden att den <xref:System.Threading.Thread.%23ctor%2A>konstruktor, till exempel `Dim t As New Thread(AddressOf ThreadProc)`.</xref:System.Threading.Thread.%23ctor%2A> Ange namnet på tråden procedur i C#. Kompilatorn väljer rätt delegatkonstruktor.      > [!NOTE] > När du skapar ParameterizedThreadStart ombud för en instansmetod i C++ kan den första parametern för konstruktorn är instans-variabeln. För en statisk metod är den första parametern i konstruktorn noll. För en statisk metod i delegatkonstruktor kräver endast en parameter: adressen Återanropsmetoden kvalificerat av klassnamnet.       Delegaten ParameterizedThreadStart och <xref:System.Threading.Thread.Start%28System.Object%29?displayProperty=fullName>metoden överlagring gör det enkelt att skicka data till en tråd procedur, men den här tekniken är inte typen säker eftersom ett objekt kan skickas till <xref:System.Threading.Thread.Start%28System.Object%29?displayProperty=fullName>.</xref:System.Threading.Thread.Start%28System.Object%29?displayProperty=fullName> </xref:System.Threading.Thread.Start%28System.Object%29?displayProperty=fullName> Stabilare sätt att skicka data till en tråd procedur är att placera datafälten och tråd-proceduren i en worker-objektet. Mer information finns i [trådar för att skapa och skicka Data vid Start](~/add/includes/ajax-current-ext-md.md).       ParameterizedThreadStart ombud stöder bara en enda parameter. Du kan lägga till flera element i ParameterizedThreadStart genom att göra något av följande parametern: - en-matris.      -En samlingstyp, om alla dataobjekt är av samma typ.      -En tuppel typ, till exempel <xref:System.Tuple%602>eller <xref:System.Tuple%604>.</xref:System.Tuple%604> </xref:System.Tuple%602>"
  example:
  - "The following code example uses a ParameterizedThreadStart delegate with to execute a static method and an instance method. The first ParameterizedThreadStart delegate is represented by the static `DoWork` method and the second is represented by the instance `DoMoreWork` method. Both methods match the ParameterizedThreadStart delegate signature; that is, they have a single parameter of type <xref:System.Object> and don't return a value.  \n  \n> [!NOTE]\n>  The Visual Basic and C# compilers infer the ParameterizedThreadStart delegate from the signatures of the `DoWork` and `DoMoreWork` methods, and call the correct constructor. Thus, there is no explicit constructor call in the code.  \n  \n [!code-cpp[System.Threading.ParameterizedThreadStart#1](~/add/codesnippet/cpp/t-system.threading.param_1.cpp)]\n [!code-vb[System.Threading.ParameterizedThreadStart#1](~/add/codesnippet/visualbasic/t-system.threading.param_1.vb)]\n [!code-cs[System.Threading.ParameterizedThreadStart#1](~/add/codesnippet/csharp/t-system.threading.param_1.cs)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(false)]

      public delegate void ParameterizedThreadStart(object obj);
  inheritance:
  - System.Delegate
  platform:
  - net462
references:
- uid: System.Delegate
  isExternal: false
  name: System.Delegate
