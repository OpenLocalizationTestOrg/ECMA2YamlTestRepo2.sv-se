### YamlMime:ManagedReference
items:
- uid: System.Windows.LostFocusEventManager
  id: LostFocusEventManager
  children:
  - System.Windows.LostFocusEventManager.AddHandler(System.Windows.DependencyObject,System.EventHandler{System.Windows.RoutedEventArgs})
  - System.Windows.LostFocusEventManager.AddListener(System.Windows.DependencyObject,System.Windows.IWeakEventListener)
  - System.Windows.LostFocusEventManager.NewListenerList
  - System.Windows.LostFocusEventManager.RemoveHandler(System.Windows.DependencyObject,System.EventHandler{System.Windows.RoutedEventArgs})
  - System.Windows.LostFocusEventManager.RemoveListener(System.Windows.DependencyObject,System.Windows.IWeakEventListener)
  - System.Windows.LostFocusEventManager.StartListening(System.Object)
  - System.Windows.LostFocusEventManager.StopListening(System.Object)
  langs:
  - csharp
  name: LostFocusEventManager
  nameWithType: LostFocusEventManager
  fullName: System.Windows.LostFocusEventManager
  type: Class
  summary: "Ger en <xref href=&quot;System.Windows.WeakEventManager&quot;> </xref> implementeringen så att du kan använda mönstret &quot;svaga händelselyssnaren&quot; för att koppla-lyssnare för den <xref href=&quot;System.Windows.UIElement.LostFocus&quot;> </xref> eller <xref href=&quot;System.Windows.ContentElement.LostFocus&quot;> </xref> händelser."
  remarks: "För att vara lyssnare i det här mönstret måste lyssnare-objekt implementera <xref:System.Windows.IWeakEventListener>.</xref:System.Windows.IWeakEventListener> Du behöver inte implementera <xref:System.Windows.IWeakEventListener>på den klass som är källan till händelserna.</xref:System.Windows.IWeakEventListener>       [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]databindning används <xref:System.Windows.WeakEventManager>interna klasser som uppdaterar bindningar går att koppla-lyssnare för en <xref:System.Windows.UIElement.LostFocus?displayProperty=fullName>eller <xref:System.Windows.ContentElement.LostFocus?displayProperty=fullName>händelse på ett objekt som är mål för en bindning.</xref:System.Windows.ContentElement.LostFocus?displayProperty=fullName> </xref:System.Windows.UIElement.LostFocus?displayProperty=fullName> </xref:System.Windows.WeakEventManager> Det ger stöd för meddelande för den <xref:System.Windows.Data.UpdateSourceTrigger>läge för databindning utan att skapa starka referenser till data bindning mål.</xref:System.Windows.Data.UpdateSourceTrigger>"
  syntax:
    content: 'public class LostFocusEventManager : System.Windows.WeakEventManager'
  inheritance:
  - System.Object
  - System.Windows.Threading.DispatcherObject
  - System.Windows.WeakEventManager
  implements: []
  inheritedMembers:
  - System.Windows.Threading.DispatcherObject.CheckAccess
  - System.Windows.Threading.DispatcherObject.Dispatcher
  - System.Windows.Threading.DispatcherObject.VerifyAccess
  - System.Windows.WeakEventManager.DeliverEvent(System.Object,System.EventArgs)
  - System.Windows.WeakEventManager.DeliverEventToList(System.Object,System.EventArgs,System.Windows.WeakEventManager.ListenerList)
  - System.Windows.WeakEventManager.GetCurrentManager(System.Type)
  - System.Windows.WeakEventManager.Item(System.Object)
  - System.Windows.WeakEventManager.ProtectedAddHandler(System.Object,System.Delegate)
  - System.Windows.WeakEventManager.ProtectedAddListener(System.Object,System.Windows.IWeakEventListener)
  - System.Windows.WeakEventManager.ProtectedRemoveHandler(System.Object,System.Delegate)
  - System.Windows.WeakEventManager.ProtectedRemoveListener(System.Object,System.Windows.IWeakEventListener)
  - System.Windows.WeakEventManager.Purge(System.Object,System.Object,System.Boolean)
  - System.Windows.WeakEventManager.ReadLock
  - System.Windows.WeakEventManager.Remove(System.Object)
  - System.Windows.WeakEventManager.ScheduleCleanup
  - System.Windows.WeakEventManager.SetCurrentManager(System.Type,System.Windows.WeakEventManager)
  - System.Windows.WeakEventManager.WriteLock
  platform:
  - net462
- uid: System.Windows.LostFocusEventManager.AddHandler(System.Windows.DependencyObject,System.EventHandler{System.Windows.RoutedEventArgs})
  id: AddHandler(System.Windows.DependencyObject,System.EventHandler{System.Windows.RoutedEventArgs})
  parent: System.Windows.LostFocusEventManager
  langs:
  - csharp
  name: AddHandler(DependencyObject,EventHandler<RoutedEventArgs>)
  nameWithType: LostFocusEventManager.AddHandler(DependencyObject,EventHandler<RoutedEventArgs>)
  fullName: System.Windows.LostFocusEventManager.AddHandler(DependencyObject,EventHandler<RoutedEventArgs>)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "Lägger till den angivna händelsehanteraren som anropas när angiven källa genererar den <xref href=&quot;System.Windows.UIElement.LostFocus&quot;> </xref> eller <xref href=&quot;System.Windows.ContentElement.LostFocus&quot;> </xref> händelse."
  remarks: "Använd den här metoden för att ange händelsehanteraren som du vill använda för att prenumerera på <xref:System.Windows.UIElement.LostFocus?displayProperty=fullName>eller <xref:System.Windows.ContentElement.LostFocus?displayProperty=fullName>händelse...</xref:System.Windows.ContentElement.LostFocus?displayProperty=fullName> </xref:System.Windows.UIElement.LostFocus?displayProperty=fullName>  När du använder den här metoden lyssnare objektet behöver inte implementera den <xref:System.Windows.IWeakEventListener>gränssnitt.</xref:System.Windows.IWeakEventListener>"
  syntax:
    content: public static void AddHandler (System.Windows.DependencyObject source, EventHandler<System.Windows.RoutedEventArgs> handler);
    parameters:
    - id: source
      type: System.Windows.DependencyObject
      description: "Käll-objektet som aktiverar den <xref href=&quot;System.Windows.UIElement.LostFocus&quot;> </xref> eller <xref href=&quot;System.Windows.ContentElement.LostFocus&quot;> </xref> händelse."
    - id: handler
      type: System.EventHandler{System.Windows.RoutedEventArgs}
      description: "Det ombud som hanterar den <xref href=&quot;System.Windows.UIElement.LostFocus&quot;> </xref> eller <xref href=&quot;System.Windows.ContentElement.LostFocus&quot;> </xref> händelse."
  overload: System.Windows.LostFocusEventManager.AddHandler*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>handler</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Windows.LostFocusEventManager.AddListener(System.Windows.DependencyObject,System.Windows.IWeakEventListener)
  id: AddListener(System.Windows.DependencyObject,System.Windows.IWeakEventListener)
  parent: System.Windows.LostFocusEventManager
  langs:
  - csharp
  name: AddListener(DependencyObject,IWeakEventListener)
  nameWithType: LostFocusEventManager.AddListener(DependencyObject,IWeakEventListener)
  fullName: System.Windows.LostFocusEventManager.AddListener(DependencyObject,IWeakEventListener)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "Lägger till den angivna lyssnaren i listan över lyssnare på den angivna källan."
  syntax:
    content: public static void AddListener (System.Windows.DependencyObject source, System.Windows.IWeakEventListener listener);
    parameters:
    - id: source
      type: System.Windows.DependencyObject
      description: "Objektet med händelsen."
    - id: listener
      type: System.Windows.IWeakEventListener
      description: "Objektet som ska läggas till som en lyssnare."
  overload: System.Windows.LostFocusEventManager.AddListener*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.LostFocusEventManager.NewListenerList
  id: NewListenerList
  parent: System.Windows.LostFocusEventManager
  langs:
  - csharp
  name: NewListenerList()
  nameWithType: LostFocusEventManager.NewListenerList()
  fullName: System.Windows.LostFocusEventManager.NewListenerList()
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "Returnerar ett nytt objekt att innehålla lyssnare till den <xref href=&quot;System.Windows.UIElement.LostFocus&quot;> </xref> eller <xref href=&quot;System.Windows.ContentElement.LostFocus&quot;> </xref> händelse."
  syntax:
    content: protected override System.Windows.WeakEventManager.ListenerList NewListenerList ();
    parameters: []
    return:
      type: System.Windows.WeakEventManager.ListenerList
      description: "Ett nytt objekt att innehålla lyssnare till den <xref href=&quot;System.Windows.UIElement.LostFocus&quot;> </xref> eller <xref href=&quot;System.Windows.ContentElement.LostFocus&quot;> </xref> händelse."
  overload: System.Windows.LostFocusEventManager.NewListenerList*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.LostFocusEventManager.RemoveHandler(System.Windows.DependencyObject,System.EventHandler{System.Windows.RoutedEventArgs})
  id: RemoveHandler(System.Windows.DependencyObject,System.EventHandler{System.Windows.RoutedEventArgs})
  parent: System.Windows.LostFocusEventManager
  langs:
  - csharp
  name: RemoveHandler(DependencyObject,EventHandler<RoutedEventArgs>)
  nameWithType: LostFocusEventManager.RemoveHandler(DependencyObject,EventHandler<RoutedEventArgs>)
  fullName: System.Windows.LostFocusEventManager.RemoveHandler(DependencyObject,EventHandler<RoutedEventArgs>)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "Tar bort den angivna händelsehanteraren från angiven källa."
  syntax:
    content: public static void RemoveHandler (System.Windows.DependencyObject source, EventHandler<System.Windows.RoutedEventArgs> handler);
    parameters:
    - id: source
      type: System.Windows.DependencyObject
      description: "Käll-objektet som aktiverar den <xref href=&quot;System.Windows.UIElement.LostFocus&quot;> </xref> eller <xref href=&quot;System.Windows.ContentElement.LostFocus&quot;> </xref> händelse."
    - id: handler
      type: System.EventHandler{System.Windows.RoutedEventArgs}
      description: "Det ombud som hanterar den <xref href=&quot;System.Windows.UIElement.LostFocus&quot;> </xref> eller <xref href=&quot;System.Windows.ContentElement.LostFocus&quot;> </xref> händelse."
  overload: System.Windows.LostFocusEventManager.RemoveHandler*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>handler</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Windows.LostFocusEventManager.RemoveListener(System.Windows.DependencyObject,System.Windows.IWeakEventListener)
  id: RemoveListener(System.Windows.DependencyObject,System.Windows.IWeakEventListener)
  parent: System.Windows.LostFocusEventManager
  langs:
  - csharp
  name: RemoveListener(DependencyObject,IWeakEventListener)
  nameWithType: LostFocusEventManager.RemoveListener(DependencyObject,IWeakEventListener)
  fullName: System.Windows.LostFocusEventManager.RemoveListener(DependencyObject,IWeakEventListener)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "Tar bort den angivna lyssnaren från listan över lyssnare på den angivna källan."
  syntax:
    content: public static void RemoveListener (System.Windows.DependencyObject source, System.Windows.IWeakEventListener listener);
    parameters:
    - id: source
      type: System.Windows.DependencyObject
      description: "Objekt att ta bort lyssnaren från."
    - id: listener
      type: System.Windows.IWeakEventListener
      description: "Lyssnaren ska tas bort."
  overload: System.Windows.LostFocusEventManager.RemoveListener*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.LostFocusEventManager.StartListening(System.Object)
  id: StartListening(System.Object)
  parent: System.Windows.LostFocusEventManager
  langs:
  - csharp
  name: StartListening(Object)
  nameWithType: LostFocusEventManager.StartListening(Object)
  fullName: System.Windows.LostFocusEventManager.StartListening(Object)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "Börjar lyssna efter den <xref href=&quot;System.Windows.UIElement.LostFocus&quot;> </xref> händelsen på den angivna källan kopplar en intern klass hanterare till den här källan."
  remarks: "Den angivna källan kontrolleras att se om det är <xref:System.Windows.UIElement>eller <xref:System.Windows.ContentElement>, och lägger sedan till klassen hanteraren för händelsen till den här källan.</xref:System.Windows.ContentElement> </xref:System.Windows.UIElement>"
  syntax:
    content: protected override void StartListening (object source);
    parameters:
    - id: source
      type: System.Object
      description: "Objektet som du vill påbörja avlyssning för den relevanta <xref href=&quot;System.Windows.UIElement.LostFocus&quot;> </xref> händelse."
  overload: System.Windows.LostFocusEventManager.StartListening*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.LostFocusEventManager.StopListening(System.Object)
  id: StopListening(System.Object)
  parent: System.Windows.LostFocusEventManager
  langs:
  - csharp
  name: StopListening(Object)
  nameWithType: LostFocusEventManager.StopListening(Object)
  fullName: System.Windows.LostFocusEventManager.StopListening(Object)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "Slutar lyssna efter den <xref href=&quot;System.Windows.UIElement.LostFocus&quot;> </xref> händelsen på den angivna källan."
  syntax:
    content: protected override void StopListening (object source);
    parameters:
    - id: source
      type: System.Object
      description: "Källobjektet som slutar lyssna efter <xref href=&quot;System.Windows.UIElement.LostFocus&quot;> </xref>."
  overload: System.Windows.LostFocusEventManager.StopListening*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Windows.WeakEventManager
  isExternal: false
  name: System.Windows.WeakEventManager
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.Windows.LostFocusEventManager.AddHandler(System.Windows.DependencyObject,System.EventHandler{System.Windows.RoutedEventArgs})
  parent: System.Windows.LostFocusEventManager
  isExternal: false
  name: AddHandler(DependencyObject,EventHandler<RoutedEventArgs>)
  nameWithType: LostFocusEventManager.AddHandler(DependencyObject,EventHandler<RoutedEventArgs>)
  fullName: System.Windows.LostFocusEventManager.AddHandler(DependencyObject,EventHandler<RoutedEventArgs>)
- uid: System.Windows.DependencyObject
  parent: System.Windows
  isExternal: false
  name: DependencyObject
  nameWithType: DependencyObject
  fullName: System.Windows.DependencyObject
- uid: System.EventHandler{System.Windows.RoutedEventArgs}
  parent: System
  isExternal: true
  name: EventHandler<RoutedEventArgs>
  nameWithType: EventHandler<RoutedEventArgs>
  fullName: System.EventHandler<System.Windows.RoutedEventArgs>
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: EventHandler<System.Windows.RoutedEventArgs>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Windows.RoutedEventArgs
    name: RoutedEventArgs
    nameWithType: RoutedEventArgs
    fullName: RoutedEventArgs
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Windows.LostFocusEventManager.AddListener(System.Windows.DependencyObject,System.Windows.IWeakEventListener)
  parent: System.Windows.LostFocusEventManager
  isExternal: false
  name: AddListener(DependencyObject,IWeakEventListener)
  nameWithType: LostFocusEventManager.AddListener(DependencyObject,IWeakEventListener)
  fullName: System.Windows.LostFocusEventManager.AddListener(DependencyObject,IWeakEventListener)
- uid: System.Windows.IWeakEventListener
  parent: System.Windows
  isExternal: false
  name: IWeakEventListener
  nameWithType: IWeakEventListener
  fullName: System.Windows.IWeakEventListener
- uid: System.Windows.LostFocusEventManager.NewListenerList
  parent: System.Windows.LostFocusEventManager
  isExternal: false
  name: NewListenerList()
  nameWithType: LostFocusEventManager.NewListenerList()
  fullName: System.Windows.LostFocusEventManager.NewListenerList()
- uid: System.Windows.WeakEventManager.ListenerList
  parent: System.Windows
  isExternal: false
  name: WeakEventManager+ListenerList
  nameWithType: WeakEventManager+ListenerList
  fullName: System.Windows.WeakEventManager+ListenerList
- uid: System.Windows.LostFocusEventManager.RemoveHandler(System.Windows.DependencyObject,System.EventHandler{System.Windows.RoutedEventArgs})
  parent: System.Windows.LostFocusEventManager
  isExternal: false
  name: RemoveHandler(DependencyObject,EventHandler<RoutedEventArgs>)
  nameWithType: LostFocusEventManager.RemoveHandler(DependencyObject,EventHandler<RoutedEventArgs>)
  fullName: System.Windows.LostFocusEventManager.RemoveHandler(DependencyObject,EventHandler<RoutedEventArgs>)
- uid: System.Windows.LostFocusEventManager.RemoveListener(System.Windows.DependencyObject,System.Windows.IWeakEventListener)
  parent: System.Windows.LostFocusEventManager
  isExternal: false
  name: RemoveListener(DependencyObject,IWeakEventListener)
  nameWithType: LostFocusEventManager.RemoveListener(DependencyObject,IWeakEventListener)
  fullName: System.Windows.LostFocusEventManager.RemoveListener(DependencyObject,IWeakEventListener)
- uid: System.Windows.LostFocusEventManager.StartListening(System.Object)
  parent: System.Windows.LostFocusEventManager
  isExternal: false
  name: StartListening(Object)
  nameWithType: LostFocusEventManager.StartListening(Object)
  fullName: System.Windows.LostFocusEventManager.StartListening(Object)
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Windows.LostFocusEventManager.StopListening(System.Object)
  parent: System.Windows.LostFocusEventManager
  isExternal: false
  name: StopListening(Object)
  nameWithType: LostFocusEventManager.StopListening(Object)
  fullName: System.Windows.LostFocusEventManager.StopListening(Object)
- uid: System.Windows.LostFocusEventManager.AddHandler*
  parent: System.Windows.LostFocusEventManager
  isExternal: false
  name: AddHandler
  nameWithType: LostFocusEventManager.AddHandler
- uid: System.Windows.LostFocusEventManager.AddListener*
  parent: System.Windows.LostFocusEventManager
  isExternal: false
  name: AddListener
  nameWithType: LostFocusEventManager.AddListener
- uid: System.Windows.LostFocusEventManager.NewListenerList*
  parent: System.Windows.LostFocusEventManager
  isExternal: false
  name: NewListenerList
  nameWithType: LostFocusEventManager.NewListenerList
- uid: System.Windows.LostFocusEventManager.RemoveHandler*
  parent: System.Windows.LostFocusEventManager
  isExternal: false
  name: RemoveHandler
  nameWithType: LostFocusEventManager.RemoveHandler
- uid: System.Windows.LostFocusEventManager.RemoveListener*
  parent: System.Windows.LostFocusEventManager
  isExternal: false
  name: RemoveListener
  nameWithType: LostFocusEventManager.RemoveListener
- uid: System.Windows.LostFocusEventManager.StartListening*
  parent: System.Windows.LostFocusEventManager
  isExternal: false
  name: StartListening
  nameWithType: LostFocusEventManager.StartListening
- uid: System.Windows.LostFocusEventManager.StopListening*
  parent: System.Windows.LostFocusEventManager
  isExternal: false
  name: StopListening
  nameWithType: LostFocusEventManager.StopListening
