### YamlMime:ManagedReference
items:
- uid: System.Security.IPermission
  id: IPermission
  children:
  - System.Security.IPermission.Copy
  - System.Security.IPermission.Demand
  - System.Security.IPermission.Intersect(System.Security.IPermission)
  - System.Security.IPermission.IsSubsetOf(System.Security.IPermission)
  - System.Security.IPermission.Union(System.Security.IPermission)
  langs:
  - csharp
  name: IPermission
  nameWithType: IPermission
  fullName: System.Security.IPermission
  type: Interface
  summary: "Definierar metoder som införts av behörighetstyper."
  remarks: "Behörigheter i common language runtime är objekt som beskriver uppsättningar av åtgärder som kan skyddas för angivna resurserna. Ett behörighetsobjekt beskriver åtgärder eller åtkomst som omfattas av säkerhetskontroll; Det är inte ett åtkomst eller rättigheter att utföra åtgärder. Behörigheter som används av både programkoden och .NET Framework säkerhetssystem på följande sätt.      -Kod begär de behörigheter som behövs för att kunna köra.      -System säkerhetsprincipen ger behörighet till kod för att det ska köras.      -Kod, kräver att anropa kod innehåller en behörighet.      -Koden åsidosätter security-stacken använder assert/neka/bevilja-only.      > [!NOTE] > Om du skriver en ny behörighet, måste du implementera gränssnittet i klassen.      > [!IMPORTANT] > En behörighet kan kommas åt av flera trådar. När du implementerar gränssnittet måste garantera att den <xref:System.Security.IPermission.IsSubsetOf%2A>, <xref:System.Security.IPermission.Intersect%2A>, <xref:System.Security.IPermission.Union%2A>, och <xref:System.Security.IPermission.Copy%2A>implementeringar av metoden är trådsäkra.</xref:System.Security.IPermission.Copy%2A> </xref:System.Security.IPermission.Union%2A> </xref:System.Security.IPermission.Intersect%2A> </xref:System.Security.IPermission.IsSubsetOf%2A>"
  example:
  - "This example shows how to define a permission class for use with code access security. All of the necessary permission interfaces are implemented.  \n  \n [!code-cs[Permission#1](~/add/codesnippet/csharp/t-system.security.ipermi_1.cs)]\n [!code-vb[Permission#1](~/add/codesnippet/visualbasic/t-system.security.ipermi_1.vb)]\n [!code-cpp[Permission#1](~/add/codesnippet/cpp/t-system.security.ipermi_1.cpp)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public interface IPermission : System.Security.ISecurityEncodable
  implements:
  - System.Security.ISecurityEncodable
  platform:
  - net462
- uid: System.Security.IPermission.Copy
  id: Copy
  parent: System.Security.IPermission
  langs:
  - csharp
  name: Copy()
  nameWithType: IPermission.Copy()
  fullName: System.Security.IPermission.Copy()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "Skapar och returnerar en identisk kopia av den aktuella tillstånd."
  remarks: "En kopia av en behörighet representerar samma åtkomst till resurser som den ursprungliga tillstånd."
  example:
  - "The following code example demonstrates implementing the Copy method. This code example is part of a larger example provided for the <xref:System.Security.IPermission> class.  \n  \n [!code-cs[Permission#4](~/add/codesnippet/csharp/m-system.security.ipermi_2_1.cs)]\n [!code-vb[Permission#4](~/add/codesnippet/visualbasic/m-system.security.ipermi_2_1.vb)]\n [!code-cpp[Permission#4](~/add/codesnippet/cpp/m-system.security.ipermi_2_1.cpp)]"
  syntax:
    content: public System.Security.IPermission Copy ();
    parameters: []
    return:
      type: System.Security.IPermission
      description: "En kopia av den aktuella tillstånd."
  overload: System.Security.IPermission.Copy*
  exceptions: []
  platform:
  - net462
- uid: System.Security.IPermission.Demand
  id: Demand
  parent: System.Security.IPermission
  langs:
  - csharp
  name: Demand()
  nameWithType: IPermission.Demand()
  fullName: System.Security.IPermission.Demand()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "Genererar en <xref:System.Security.SecurityException>under körning om säkerhetskraven är inte uppfyllt.</xref:System.Security.SecurityException>"
  remarks: "Den här metoden används vanligtvis av säker bibliotek för att säkerställa att anropare har behörighet att komma åt en resurs. Till exempel en fil klass i en säker klassbiblioteket anropar <xref:System.Security.CodeAccessPermission.Demand%2A>för nödvändiga <xref:System.Security.Permissions.FileIOPermission>innan du utför en åtgärd för filen som angavs av anroparen.</xref:System.Security.Permissions.FileIOPermission> </xref:System.Security.CodeAccessPermission.Demand%2A>       Även om flesta klasser som implementerar det här gränssnittsmetod uppfyller säkerhetskriterierna genom att utföra en fullständig stackstegningen, utförs en stackstegningen inte nödvändigtvis. Ett exempel på en implementering som inte utföra en stackstegningen är <xref:System.Security.Permissions.PrincipalPermission.Demand%2A?displayProperty=fullName>.</xref:System.Security.Permissions.PrincipalPermission.Demand%2A?displayProperty=fullName>       När en stackstegningen utförs granskas inte behörigheterna för den kod som anropar den här metoden; kontrollen börjar från den omedelbara anroparen av koden och fortsätter uppåt i stapeln. Anropsstacken representeras vanligtvis växande ned, så att metoder högre upp i anropsstacken anropa metoder lägre i anropsstacken. <xref:System.Security.CodeAccessPermission.Demand%2A>fungerar endast om ingen <xref:System.Security.SecurityException>utlöses.</xref:System.Security.SecurityException></xref:System.Security.CodeAccessPermission.Demand%2A>"
  syntax:
    content: public void Demand ();
    parameters: []
  overload: System.Security.IPermission.Demand*
  exceptions: []
  platform:
  - net462
- uid: System.Security.IPermission.Intersect(System.Security.IPermission)
  id: Intersect(System.Security.IPermission)
  parent: System.Security.IPermission
  langs:
  - csharp
  name: Intersect(IPermission)
  nameWithType: IPermission.Intersect(IPermission)
  fullName: System.Security.IPermission.Intersect(IPermission)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "Skapar och returnerar en behörighet som är skärningspunkten för den aktuella angivna behörigheterna och."
  remarks: "Skärningspunkten för två behörigheter är en behörighet som beskriver uppsättningen åtgärder som de båda beskriver gemensamma. Skärningspunkten skickar en begäran som passerar både ursprungliga behörigheter.       Följande uttryck måste vara true för alla implementeringar av metoden Intersect. `X`och `Y` representerar <xref:System.Security.IPermission>objektreferenser som inte är `null`.</xref:System.Security.IPermission>      -   `X`. INTERSECT (`X`) returnerar ett värde som är lika med `X`.      -   `X`. INTERSECT (`Y`) returnerar samma värde som `Y`. INTERSECT (`X`).      -   `X`. INTERSECT (`null`) returnerar `null`."
  example:
  - "The following code example demonstrates implementing the Intersect method. This code example is part of a larger example provided for the <xref:System.Security.IPermission> class.  \n  \n [!code-cs[Permission#2](~/add/codesnippet/csharp/m-system.security.ipermi_3_1.cs)]\n [!code-vb[Permission#2](~/add/codesnippet/visualbasic/m-system.security.ipermi_3_1.vb)]\n [!code-cpp[Permission#2](~/add/codesnippet/cpp/m-system.security.ipermi_3_1.cpp)]"
  syntax:
    content: public System.Security.IPermission Intersect (System.Security.IPermission target);
    parameters:
    - id: target
      type: System.Security.IPermission
      description: "En behörighet till intersect med aktuella tillstånd. Det måste vara av samma typ som den aktuella tillstånd."
    return:
      type: System.Security.IPermission
      description: "En ny behörighet som representerar skärningspunkten för den aktuella angivna behörigheterna och. Den här nya behörigheten är <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> om skärningspunkten är tom."
  overload: System.Security.IPermission.Intersect*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Den <code> target </code> parametern är inte <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> och är inte en instans av samma klass som den aktuella tillstånd."
  platform:
  - net462
- uid: System.Security.IPermission.IsSubsetOf(System.Security.IPermission)
  id: IsSubsetOf(System.Security.IPermission)
  parent: System.Security.IPermission
  langs:
  - csharp
  name: IsSubsetOf(IPermission)
  nameWithType: IPermission.IsSubsetOf(IPermission)
  fullName: System.Security.IPermission.IsSubsetOf(IPermission)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "Anger om aktuella behörigheten är en delmängd av den angivna behörigheten."
  remarks: "The current permission is a subset of the specified permission if the current permission specifies a set of operations that is wholly contained by the specified permission. For example, a permission that represents access to C:\\example.txt is a subset of a permission that represents access to C:\\\\. If this method returns `true`, the current permission represents no more access to the protected resource than does the specified permission.  \n  \n The following statements are required to be true for all implementations of the IsSubsetOf method. `X`, `Y`, and `Z` represent <xref:System.Security.IPermission> objects that are not `null`.  \n  \n-   `X`.IsSubsetOf(`X`) returns `true`.  \n  \n-   `X`.IsSubsetOf(`Y`) returns the same value as `Y`.IsSubsetOf(`X`) if and only if `X` and `Y` represent the same set of permissions.  \n  \n-   If `X`.IsSubsetOf(`Y`) and `Y`.IsSubsetOf(`Z`) both return `true`, `X`.IsSubsetOf(`Z`) returns `true`.  \n  \n If `X` represents an empty <xref:System.Security.IPermission> object with a permission state of <xref:System.Security.Permissions.PermissionState> and `Y` represents an <xref:System.Security.IPermission> object that is `null`, `X`.IsSubsetOf(`Y`) returns `true`. If `Z` is also an empty permission, the compound set operation `X`.Union(Z).IsSubsetOf(Y) also returns `true` because the union of two empty permissions is an empty permission."
  example:
  - "The following code example demonstrates implementing the IsSubsetOf method. This code example is part of a larger example provided for the <xref:System.Security.IPermission> class.  \n  \n [!code-cs[Permission#3](~/add/codesnippet/csharp/m-system.security.ipermi_1_1.cs)]\n [!code-vb[Permission#3](~/add/codesnippet/visualbasic/m-system.security.ipermi_1_1.vb)]\n [!code-cpp[Permission#3](~/add/codesnippet/cpp/m-system.security.ipermi_1_1.cpp)]"
  syntax:
    content: public bool IsSubsetOf (System.Security.IPermission target);
    parameters:
    - id: target
      type: System.Security.IPermission
      description: "Behörigheter som ska testas för delmängd relationen. Den här behörigheten måste vara av samma typ som den aktuella tillstånd."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Om den aktuella behörigheten är en delmängd av den angivna behörigheten; Annars <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Security.IPermission.IsSubsetOf*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Den <code> target </code> parametern är inte <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> och är inte av samma typ som den aktuella tillstånd."
  platform:
  - net462
- uid: System.Security.IPermission.Union(System.Security.IPermission)
  id: Union(System.Security.IPermission)
  parent: System.Security.IPermission
  langs:
  - csharp
  name: Union(IPermission)
  nameWithType: IPermission.Union(IPermission)
  fullName: System.Security.IPermission.Union(IPermission)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "Skapar en behörighet som är unionen av den aktuella angivna behörigheterna och."
  remarks: "Resultatet av ett anrop till Union är en behörighet som representerar alla åtgärder som representeras av både den aktuella angivna behörigheterna och. Varje begäran som skickas antingen behörighet skickar sina union.       Följande uttryck måste vara true för alla implementeringar av metoden Union. `X`och `Y` representerar <xref:System.Security.IPermission>objekt som inte är `null`.</xref:System.Security.IPermission>      -   `X`. Union (`X`) returnerar ett objekt som har samma värde som `X`.      -   `X`. Union (`Y`) returnerar ett objekt som har samma värde som returneras av-objektet `Y`. Union (`X`).      -   `X`. Union (`null`) returnerar ett objekt som har samma värde som `X`."
  example:
  - "The following code example demonstrates implementing the Union method. This code example is part of a larger example provided for the <xref:System.Security.IPermission> class.  \n  \n [!code-cs[Permission#5](~/add/codesnippet/csharp/m-system.security.ipermi_0_1.cs)]\n [!code-vb[Permission#5](~/add/codesnippet/visualbasic/m-system.security.ipermi_0_1.vb)]\n [!code-cpp[Permission#5](~/add/codesnippet/cpp/m-system.security.ipermi_0_1.cpp)]  \n  \n-"
  syntax:
    content: public System.Security.IPermission Union (System.Security.IPermission target);
    parameters:
    - id: target
      type: System.Security.IPermission
      description: "En behörighet för att kombinera med aktuella tillstånd. Det måste vara av samma typ som den aktuella tillstånd."
    return:
      type: System.Security.IPermission
      description: "En ny behörighet som representerar unionen av den aktuella angivna behörigheterna och."
  overload: System.Security.IPermission.Union*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Den <code> target </code> parametern är inte <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> och är inte av samma typ som den aktuella tillstånd."
  platform:
  - net462
references:
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.Security.IPermission.Copy
  parent: System.Security.IPermission
  isExternal: false
  name: Copy()
  nameWithType: IPermission.Copy()
  fullName: System.Security.IPermission.Copy()
- uid: System.Security.IPermission
  parent: System.Security
  isExternal: false
  name: IPermission
  nameWithType: IPermission
  fullName: System.Security.IPermission
- uid: System.Security.IPermission.Demand
  parent: System.Security.IPermission
  isExternal: false
  name: Demand()
  nameWithType: IPermission.Demand()
  fullName: System.Security.IPermission.Demand()
- uid: System.Security.IPermission.Intersect(System.Security.IPermission)
  parent: System.Security.IPermission
  isExternal: false
  name: Intersect(IPermission)
  nameWithType: IPermission.Intersect(IPermission)
  fullName: System.Security.IPermission.Intersect(IPermission)
- uid: System.Security.IPermission.IsSubsetOf(System.Security.IPermission)
  parent: System.Security.IPermission
  isExternal: false
  name: IsSubsetOf(IPermission)
  nameWithType: IPermission.IsSubsetOf(IPermission)
  fullName: System.Security.IPermission.IsSubsetOf(IPermission)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Security.IPermission.Union(System.Security.IPermission)
  parent: System.Security.IPermission
  isExternal: false
  name: Union(IPermission)
  nameWithType: IPermission.Union(IPermission)
  fullName: System.Security.IPermission.Union(IPermission)
- uid: System.Security.IPermission.Copy*
  parent: System.Security.IPermission
  isExternal: false
  name: Copy
  nameWithType: IPermission.Copy
- uid: System.Security.IPermission.Demand*
  parent: System.Security.IPermission
  isExternal: false
  name: Demand
  nameWithType: IPermission.Demand
- uid: System.Security.IPermission.Intersect*
  parent: System.Security.IPermission
  isExternal: false
  name: Intersect
  nameWithType: IPermission.Intersect
- uid: System.Security.IPermission.IsSubsetOf*
  parent: System.Security.IPermission
  isExternal: false
  name: IsSubsetOf
  nameWithType: IPermission.IsSubsetOf
- uid: System.Security.IPermission.Union*
  parent: System.Security.IPermission
  isExternal: false
  name: Union
  nameWithType: IPermission.Union
