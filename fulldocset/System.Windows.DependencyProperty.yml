### YamlMime:ManagedReference
items:
- uid: System.Windows.DependencyProperty
  id: DependencyProperty
  children:
  - System.Windows.DependencyProperty.AddOwner(System.Type)
  - System.Windows.DependencyProperty.AddOwner(System.Type,System.Windows.PropertyMetadata)
  - System.Windows.DependencyProperty.DefaultMetadata
  - System.Windows.DependencyProperty.GetHashCode
  - System.Windows.DependencyProperty.GetMetadata(System.Type)
  - System.Windows.DependencyProperty.GetMetadata(System.Windows.DependencyObject)
  - System.Windows.DependencyProperty.GetMetadata(System.Windows.DependencyObjectType)
  - System.Windows.DependencyProperty.GlobalIndex
  - System.Windows.DependencyProperty.IsValidType(System.Object)
  - System.Windows.DependencyProperty.IsValidValue(System.Object)
  - System.Windows.DependencyProperty.Name
  - System.Windows.DependencyProperty.OverrideMetadata(System.Type,System.Windows.PropertyMetadata)
  - System.Windows.DependencyProperty.OverrideMetadata(System.Type,System.Windows.PropertyMetadata,System.Windows.DependencyPropertyKey)
  - System.Windows.DependencyProperty.OwnerType
  - System.Windows.DependencyProperty.PropertyType
  - System.Windows.DependencyProperty.ReadOnly
  - System.Windows.DependencyProperty.Register(System.String,System.Type,System.Type)
  - System.Windows.DependencyProperty.Register(System.String,System.Type,System.Type,System.Windows.PropertyMetadata)
  - System.Windows.DependencyProperty.Register(System.String,System.Type,System.Type,System.Windows.PropertyMetadata,System.Windows.ValidateValueCallback)
  - System.Windows.DependencyProperty.RegisterAttached(System.String,System.Type,System.Type)
  - System.Windows.DependencyProperty.RegisterAttached(System.String,System.Type,System.Type,System.Windows.PropertyMetadata)
  - System.Windows.DependencyProperty.RegisterAttached(System.String,System.Type,System.Type,System.Windows.PropertyMetadata,System.Windows.ValidateValueCallback)
  - System.Windows.DependencyProperty.RegisterAttachedReadOnly(System.String,System.Type,System.Type,System.Windows.PropertyMetadata)
  - System.Windows.DependencyProperty.RegisterAttachedReadOnly(System.String,System.Type,System.Type,System.Windows.PropertyMetadata,System.Windows.ValidateValueCallback)
  - System.Windows.DependencyProperty.RegisterReadOnly(System.String,System.Type,System.Type,System.Windows.PropertyMetadata)
  - System.Windows.DependencyProperty.RegisterReadOnly(System.String,System.Type,System.Type,System.Windows.PropertyMetadata,System.Windows.ValidateValueCallback)
  - System.Windows.DependencyProperty.ToString
  - System.Windows.DependencyProperty.UnsetValue
  - System.Windows.DependencyProperty.ValidateValueCallback
  langs:
  - csharp
  name: DependencyProperty
  nameWithType: DependencyProperty
  fullName: System.Windows.DependencyProperty
  type: Class
  summary: "Representerar en egenskap som kan anges via metoder som formatmalls, databindning, animering och arv."
  remarks: "DependencyProperty stöder följande funktioner i [!INCLUDE[TLA#tla_winclient](~/add/includes/ajax-current-ext-md.md)]:-egenskapen kan anges i ett format. Mer information finns i [design och Templating](~/add/includes/ajax-current-ext-md.md).      -Egenskapen kan anges via databindning. Mer information om egenskaper för databindning beroende finns [så här: binda egenskaper för två kontroller](~/add/includes/ajax-current-ext-md.md).      -Egenskapen kan anges med en dynamisk resurs-referens. Mer information finns i [XAML resurser](~/add/includes/ajax-current-ext-md.md).      -Egenskapen kan automatiskt ärver sitt värde från ett överordnat element i trädet element. Mer information finns i [värdet egenskapsarv](~/add/includes/ajax-current-ext-md.md).      -Egenskapen kan animeras. Mer information finns i [översikt över animering](~/add/includes/ajax-current-ext-md.md).      -Egenskapen kan rapportera när det tidigare värdet på egenskapen har ändrats och egenskapsvärdet kan tvingas. Mer information finns i [beroende egenskapen återanrop och validering](~/add/includes/ajax-current-ext-md.md).      -Egenskapen rapporterar information till [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)], till exempel om du ändrar ett egenskapsvärde bör kräver layout systemet att ordna om visuell information för ett element.      -Egenskapen får stöd i den [!INCLUDE[wpfdesigner_current_long](~/add/includes/wpfdesigner-current-long-md.md)].  Exempelvis egenskapen kan ändras i den **egenskaper** fönster.       Läs mer om beroendeegenskaper i [beroende Egenskapsöversikt](~/add/includes/ajax-current-ext-md.md). Om du vill egenskaper på din anpassade typer som stöd för funktionerna i listan ovan, bör du skapa en beroendeegenskap.  Information om hur du skapar anpassade beroendeegenskaper finns [anpassade beroendeegenskaper](~/add/includes/ajax-current-ext-md.md).       En bifogad egenskap är en egenskap som gör att alla objekt till information till den typ som definierar den bifogade egenskapen. I [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)], typer som ärver från <xref:System.Windows.DependencyObject>kan använda en bifogad egenskap oavsett om typen ärver från den typ som definierar egenskapen.</xref:System.Windows.DependencyObject> En bifogad egenskap är en funktion i den [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] språk.  Ange en bifogad egenskap i [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)], använda den *ownerType*.* propertyName* syntax. Ett exempel på en bifogad egenskap är den <xref:System.Windows.Controls.DockPanel.Dock%2A?displayProperty=fullName>egenskapen.</xref:System.Windows.Controls.DockPanel.Dock%2A?displayProperty=fullName> Om du vill skapa en egenskap som kan användas på alla <xref:System.Windows.DependencyObject>typer, och du bör skapa en bifogad egenskap.</xref:System.Windows.DependencyObject> Mer information om bifogade egenskaper, inklusive hur du skapar dem, se [kopplade Egenskapsöversikt](~/add/includes/ajax-current-ext-md.md).      <a name=&quot;xamlAttributeUsage_DependencyProperty&quot;></a>## XAML attributsyntax ```   <object property=&quot;dependencyPropertyName&quot;/>   - or -   <object property=&quot;ownerType.dependencyPropertyName&quot;/>   - or -   <object property=&quot;attachedPropertyOwnerType.attachedPropertyName&quot;/>   ``` <a name=&quot;xamlValues_DependencyProperty&quot;> </a> ## XAML värden `dependencyPropertyName` en sträng som anger den <xref:System.Windows.DependencyProperty.Name%2A?displayProperty=fullName>av önskade beroendeegenskap.</xref:System.Windows.DependencyProperty.Name%2A?displayProperty=fullName>       Detta kan föregås av en XML-namnområdesprefix om egenskapen inte är i XML-standardnamnområdet (Mer information finns i [XAML namnområden och Namespace mappning för WPF XAML](~/add/includes/ajax-current-ext-md.md).)       `ownerType`.`dependencyPropertyName`    En sträng som anger en typ för ägare av en beroendeegenskap, en punkt (.) och sedan <xref:System.Windows.DependencyProperty.Name%2A?displayProperty=fullName>.</xref:System.Windows.DependencyProperty.Name%2A?displayProperty=fullName> `ownerType`kan också föregås av en XML-namnområdesprefix. Denna användning som är specifika för sent bundna format och mallar, där beroendegenskapen ägare måste anges för parsning av kontext eftersom den `TargetType` ännu inte är känd. Mer information finns i [design och Templating](../Topic/Styling%20and%20Templating.md).       `attachedPropertyOwnerType` *.* `attachedPropertyName`En sträng som anger ägaren till en bifogad egenskap, en punkt (.) och sedan bifogade egenskapens namn. `attachedPropertyOwnerType`kan också föregås av en XML-namnområdesprefix."
  syntax:
    content: >-
      [System.ComponentModel.TypeConverter("System.Windows.Markup.DependencyPropertyConverter, PresentationFramework, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, Custom=null")]

      [System.Windows.Markup.ValueSerializer(typeof(System.Windows.DependencyPropertyValueSerializer))]

      public sealed class DependencyProperty
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Windows.DependencyProperty.AddOwner(System.Type)
  id: AddOwner(System.Type)
  parent: System.Windows.DependencyProperty
  langs:
  - csharp
  name: AddOwner(Type)
  nameWithType: DependencyProperty.AddOwner(Type)
  fullName: System.Windows.DependencyProperty.AddOwner(Type)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Lägger till en annan typ som ägare av en beroendeegenskap har redan registrerats."
  remarks: "Den här metoden kan egenskapen systemet att känna igen en beroendeegenskap i en typ som inte hade registrerat att viss beroendeegenskap först.       Normalt AddOwner används för att lägga till beroendeegenskaper klasser som inte redan exponerar beroende egenskapen genom hanterade klassarv (klassarv skulle orsaka wrapper-egenskaper som kan ärvas av den härledda klassen, och därför skulle ge allmän medlemmar-tabellen tillgång till beroendegenskapen redan). AddOwner kan egenskapen systemet att känna igen en beroendeegenskap i en typ som inte hade registrerat som beroendeegenskap först.       Den här signaturen tillåter inte att ange metadata.  När du använder den här metoden genereras automatiskt metadata för den nya <xref:System.Windows.DependencyProperty>och dess ägartyp.</xref:System.Windows.DependencyProperty> Automatiskt genererade metadata är resultatet av sammanslagna metadata från alla grundläggande typer som har den här egenskapen som definierats. Om det finns inga sammanslagna metadata används standard-metadata för egenskapen. Om egenskapen är registrerad med hjälp av den <xref:System.Windows.DependencyProperty.RegisterAttached%2A>metoden och sedan metadata som standard är samma som de metadata som skapas när <xref:System.Windows.DependencyProperty.RegisterAttached%2A>anropades.</xref:System.Windows.DependencyProperty.RegisterAttached%2A> </xref:System.Windows.DependencyProperty.RegisterAttached%2A> I annat fall den <xref:System.Windows.PropertyMetadata>objektet har skapats med den <xref:System.Windows.PropertyMetadata.DefaultValue%2A>-egenskapen angetts till egenskapen standardtyp och alla andra egenskaper för den <xref:System.Windows.PropertyMetadata>anges till `null`.</xref:System.Windows.PropertyMetadata> </xref:System.Windows.PropertyMetadata.DefaultValue%2A> </xref:System.Windows.PropertyMetadata> Använd den <xref:System.Windows.DependencyProperty.AddOwner%28System.Type%2CSystem.Windows.PropertyMetadata%29>signatur om du vill ange metadata för versionen av beroendegenskapen som lagts till i den angivna typen.</xref:System.Windows.DependencyProperty.AddOwner%28System.Type%2CSystem.Windows.PropertyMetadata%29>       Returvärdet för den här metoden används vanligtvis för att deklarera och exponera beroendeegenskapen genom att lagra ett egenskapsvärde för beroende. Identifieraren ger åtkomst till beroendegenskapen om du vill anropa egenskapen system [!INCLUDE[TLA2#tla_api#plural](~/add/includes/tla2sharptla-apisharpplural-md.md)] mot beroendeegenskap, särskilt eftersom den finns på klassen för att lägga till ägaren. Samma egenskapsnamn för både ursprungliga ägaren och tillagda ägare bör användas för att visa liknande funktionalitet. Du bör använda den <xref:System.Windows.DependencyProperty>returvärde för metoden AddOwner definiera egenskapen Beroendeidentifierare och även för att deklarera [!INCLUDE[TLA2#tla_clr](~/add/includes/tla2sharptla-clr-md.md)] egenskapen omslutningar för beroendeegenskaper som läggs till med hjälp av AddOwner.</xref:System.Windows.DependencyProperty>       AddOwner-metod som rekommenderas ovan för att skapa beroendeegenskaper som deklareras i [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]. Till exempel både <xref:System.Windows.Controls.Border>och <xref:System.Windows.Controls.Control>definiera en `BorderBrush` beroendeegenskap som har liknande funktionalitet.</xref:System.Windows.Controls.Control> </xref:System.Windows.Controls.Border> <xref:System.Windows.Controls.Control>definierar dess `BorderBrush` egenskap till egenskapen systemet genom att anropa AddOwner baserat på den ursprungliga ägaren <xref:System.Windows.Controls.Border>och dess registrerade <xref:System.Windows.Controls.Border.BorderBrushProperty>beroende egenskapen Identiferare.</xref:System.Windows.Controls.Border.BorderBrushProperty> </xref:System.Windows.Controls.Border></xref:System.Windows.Controls.Control> AddOwner returnera värdet används sedan för att upprätta en ny statisk <xref:System.Windows.DependencyProperty>fält (<xref:System.Windows.Controls.Control.BorderBrushProperty>) för denna egenskap i tillagda ägare och en `BorderBrush` egenskapen wrapper deklareras även.</xref:System.Windows.Controls.Control.BorderBrushProperty> </xref:System.Windows.DependencyProperty>"
  syntax:
    content: public System.Windows.DependencyProperty AddOwner (Type ownerType);
    parameters:
    - id: ownerType
      type: System.Type
      description: "Den typ som ska läggas till som en ägare av den här beroendeegenskap."
    return:
      type: System.Windows.DependencyProperty
      description: "En referens till ursprungligt <xref href=&quot;System.Windows.DependencyProperty&quot;> </xref> ID som identifierar beroendeegenskapen. Den här identifieraren bör exponeras genom att lägga till klassen som en <xref uid=&quot;langword_csharp_public static readonly&quot; name=&quot;public static readonly&quot; href=&quot;&quot;> </xref> fältet."
  overload: System.Windows.DependencyProperty.AddOwner*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.DependencyProperty.AddOwner(System.Type,System.Windows.PropertyMetadata)
  id: AddOwner(System.Type,System.Windows.PropertyMetadata)
  parent: System.Windows.DependencyProperty
  langs:
  - csharp
  name: AddOwner(Type,PropertyMetadata)
  nameWithType: DependencyProperty.AddOwner(Type,PropertyMetadata)
  fullName: System.Windows.DependencyProperty.AddOwner(Type,PropertyMetadata)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Lägger till en annan typ som ägare till en beroendeegenskap som redan har registrerats, att ange beroende egenskapens metadata för beroendegenskapen som kommer att finnas på den angivna ägare-typen."
  remarks: "Den här metoden kan egenskapen systemet att känna igen en beroendeegenskap i en typ som inte hade registrerat att viss beroendeegenskap först.       Returvärdet för den här metoden används för att deklarera och exponera beroendeegenskap, särskilt eftersom den finns på klassen för att lägga till ägaren. I allmänhet bör samma egenskapsnamn för både ursprungliga ägaren och tillagda ägare användas för att visa liknande funktionalitet. Det är bra att exponera identifierare, samt som ny [!INCLUDE[TLA2#tla_clr](~/add/includes/tla2sharptla-clr-md.md)] egenskapen omslutningar för beroendeegenskaper som läggs till med hjälp av <xref:System.Windows.DependencyProperty.AddOwner%2A>.</xref:System.Windows.DependencyProperty.AddOwner%2A>       Den <xref:System.Windows.DependencyProperty.AddOwner%2A>metod som rekommenderas ovan för att skapa [!INCLUDE[TLA2#tla_api#plural](~/add/includes/tla2sharptla-apisharpplural-md.md)] deklareras i [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)].</xref:System.Windows.DependencyProperty.AddOwner%2A> Till exempel både <xref:System.Windows.Controls.Border>och <xref:System.Windows.Controls.Control>definiera en `BorderBrush` beroendeegenskap som har liknande funktionalitet.</xref:System.Windows.Controls.Control> </xref:System.Windows.Controls.Border> <xref:System.Windows.Controls.Control>definierar dess `BorderBrush` egenskap till egenskapen systemet genom att anropa <xref:System.Windows.DependencyProperty.AddOwner%2A>på ursprungliga ägaren <xref:System.Windows.Controls.Border>och dess registrerade <xref:System.Windows.Controls.Border.BorderBrushProperty>beroende egenskapen Identiferare.</xref:System.Windows.Controls.Border.BorderBrushProperty> </xref:System.Windows.Controls.Border> </xref:System.Windows.DependencyProperty.AddOwner%2A></xref:System.Windows.Controls.Control> Den <xref:System.Windows.DependencyProperty.AddOwner%2A>returnera värdet används sedan för att upprätta en statisk <xref:System.Windows.DependencyProperty>fält (<xref:System.Windows.Controls.Control.BorderBrushProperty>) för denna egenskap i tillagda ägare och en `BorderBrush` egenskapen wrapper deklareras även.</xref:System.Windows.Controls.Control.BorderBrushProperty> </xref:System.Windows.DependencyProperty> </xref:System.Windows.DependencyProperty.AddOwner%2A>       Tillagda ägaren Beroendeidentifierare för egenskapen ska användas för åtgärder som till exempel <xref:System.Windows.DependencyObject.GetValue%2A>.</xref:System.Windows.DependencyObject.GetValue%2A> Dock returnera typspecifika åtgärder som rör typer eller instanser av klassen som har lagts till som ägare med olika metadata fortfarande förväntat resultat även om ursprungligt (inte lagts till ägarens) beroende egenskapsvärde angavs i anrop till metoder som <xref:System.Windows.DependencyObject.GetValue%2A>eller <xref:System.Windows.DependencyProperty.GetMetadata%2A>.</xref:System.Windows.DependencyProperty.GetMetadata%2A> </xref:System.Windows.DependencyObject.GetValue%2A> Metadata för tillagda ägaren perpetuated av AddOwner anropa sig själv, inte nödvändigtvis refereras uteslutande av fältet att lägga till ägare för klass-ID. Dock är det bra idé att visa ID, samt som ny [!INCLUDE[TLA2#tla_clr](~/add/includes/tla2sharptla-clr-md.md)] egenskapen omslutningar för beroendeegenskaper som läggs till med hjälp av AddOwner, eftersom du inte kan göra det skapar skillnader mellan den [!INCLUDE[TLA2#tla_clr](~/add/includes/tla2sharptla-clr-md.md)] och [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] representationer av dina egenskaper.       Angivna metadata är sammanfogat med egenskapmetadata för beroendegenskapen på grundläggande ägare. Alla egenskaper som har angetts i den ursprungliga basens metadata finns kvar. De egenskaper som uttryckligen har ändrats i den nya metadata åsidosätter egenskaper basens metadata. Vissa egenskaper som <xref:System.Windows.PropertyMetadata.DefaultValue%2A>, ersätts om de har angetts i nya metadata.</xref:System.Windows.PropertyMetadata.DefaultValue%2A> Andra, som <xref:System.Windows.PropertyChangedCallback>, kombineras.</xref:System.Windows.PropertyChangedCallback> Slutligen merge beteende beror på vilken egenskap metadata som används för åsidosättningen, det beteende som beskrivs här gäller de befintliga egenskapen metadata klasser som används av [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)] beroendeegenskaper. Mer information finns i [beroende egenskapens Metadata](~/add/includes/ajax-current-ext-md.md) och [Framework egenskapens Metadata](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public System.Windows.DependencyProperty AddOwner (Type ownerType, System.Windows.PropertyMetadata typeMetadata);
    parameters:
    - id: ownerType
      type: System.Type
      description: "Att lägga till som ägare av den här beroendeegenskap typ."
    - id: typeMetadata
      type: System.Windows.PropertyMetadata
      description: "Metadata som kvalificerar beroendegenskapen på den angivna typen."
    return:
      type: System.Windows.DependencyProperty
      description: "En referens till ursprungligt <xref href=&quot;System.Windows.DependencyProperty&quot;> </xref> ID som identifierar beroendeegenskapen. Den här identifieraren bör exponeras genom att lägga till klassen som en <xref uid=&quot;langword_csharp_public static readonly&quot; name=&quot;public static readonly&quot; href=&quot;&quot;> </xref> fältet."
  overload: System.Windows.DependencyProperty.AddOwner*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.DependencyProperty.DefaultMetadata
  id: DefaultMetadata
  parent: System.Windows.DependencyProperty
  langs:
  - csharp
  name: DefaultMetadata
  nameWithType: DependencyProperty.DefaultMetadata
  fullName: System.Windows.DependencyProperty.DefaultMetadata
  type: Property
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Hämtar standard metadata för beroendegenskapen."
  remarks: "Standard-metadata är egenskapmetadata som är tillgänglig för som ett visst objekt eller ett objekt av en härledd typ där inga alternativa metadata angavs av ett explicit <xref:System.Windows.DependencyProperty.Register%2A>eller <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>anropa.</xref:System.Windows.DependencyProperty.OverrideMetadata%2A> </xref:System.Windows.DependencyProperty.Register%2A>       Om den ursprungliga ägaren tillämpas metadata till först <xref:System.Windows.DependencyProperty.Register%2A>anrop som upprättats beroendeegenskap, returneras den metadata som DefaultMetadata.</xref:System.Windows.DependencyProperty.Register%2A>       Om inga metadata användes i ursprungligt <xref:System.Windows.DependencyProperty.Register%2A>anropa sedan standard metadata skapas inifrån den <xref:System.Windows.DependencyProperty.Register%2A>anrop och detta värde returneras som DefaultMetadata.</xref:System.Windows.DependencyProperty.Register%2A> </xref:System.Windows.DependencyProperty.Register%2A>       Huvudsyftet med med standard-metadata som associeras med en <xref:System.Windows.DependencyProperty>är att ange ett standardvärde för denna egenskap på någon <xref:System.Windows.DependencyObject>eller en härledd typ..</xref:System.Windows.DependencyObject> </xref:System.Windows.DependencyProperty>       Bilaga egenskaper metadatatypen som returnerades av den här egenskapen kan inte typkonverteras till härledda typer av <xref:System.Windows.PropertyMetadata>skriver, även om egenskapen ursprungligen har registrerats med en härledd metadatatyp.</xref:System.Windows.PropertyMetadata> Om du vill att ursprungligen registrerade metadata, inklusive dess ursprungliga eventuellt härledda metadatatyp anropa <xref:System.Windows.DependencyProperty.GetMetadata%28System.Type%29>i stället skicka den ursprungliga registrerar skriver som en parameter.</xref:System.Windows.DependencyProperty.GetMetadata%28System.Type%29>       För bifogade egenskaper matchar typ av de metadata som returneras av den här egenskapen den typ som anges i ursprungligt <xref:System.Windows.DependencyProperty.RegisterAttached%2A>registreringsmetod.</xref:System.Windows.DependencyProperty.RegisterAttached%2A>"
  example:
  - "[!code-cs[PropertySystemEsoterics#DPGetMetadataSingle](~/add/codesnippet/csharp/PropertySystemEsoterics/XAMLAPP/page2.xaml.cs#dpgetmetadatasingle)]\n [!code-vb[PropertySystemEsoterics#DPGetMetadataSingle](~/add/codesnippet/visualbasic/xamlapp/page2.xaml.vb#dpgetmetadatasingle)]  \n[!code-cs[PropertySystemEsoterics#DPDefaultValue](~/add/codesnippet/csharp/PropertySystemEsoterics/XAMLAPP/page2.xaml.cs#dpdefaultvalue)]\n[!code-vb[PropertySystemEsoterics#DPDefaultValue](~/add/codesnippet/visualbasic/xamlapp/page2.xaml.vb#dpdefaultvalue)]"
  syntax:
    content: public System.Windows.PropertyMetadata DefaultMetadata { get; }
    return:
      type: System.Windows.PropertyMetadata
      description: "Standard-metadata för beroendegenskapen."
  overload: System.Windows.DependencyProperty.DefaultMetadata*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.DependencyProperty.GetHashCode
  id: GetHashCode
  parent: System.Windows.DependencyProperty
  langs:
  - csharp
  name: GetHashCode()
  nameWithType: DependencyProperty.GetHashCode()
  fullName: System.Windows.DependencyProperty.GetHashCode()
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Returnerar en Hashkod för den här <xref href=&quot;System.Windows.DependencyProperty&quot;> </xref>."
  remarks: "Egenskapen används sin egen unika identifierare <xref:System.Windows.DependencyProperty.GlobalIndex%2A>, och värdet för egenskapen returneras av GetHashCode.</xref:System.Windows.DependencyProperty.GlobalIndex%2A>"
  syntax:
    content: public override int GetHashCode ();
    parameters: []
    return:
      type: System.Int32
      description: "Hash-koden för den här <xref href=&quot;System.Windows.DependencyProperty&quot;> </xref>."
  overload: System.Windows.DependencyProperty.GetHashCode*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.DependencyProperty.GetMetadata(System.Type)
  id: GetMetadata(System.Type)
  parent: System.Windows.DependencyProperty
  langs:
  - csharp
  name: GetMetadata(Type)
  nameWithType: DependencyProperty.GetMetadata(Type)
  fullName: System.Windows.DependencyProperty.GetMetadata(Type)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Returnerar metadata för den här beroendeegenskap eftersom den finns på en viss typ av befintliga."
  remarks: "Ange typ eller en objektreferens ska användas som typen är nödvändigt eftersom metadata kan skilja sig från den ursprungliga registreringen på grund av antingen <xref:System.Windows.DependencyProperty.AddOwner%2A>eller <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>anrop som alter metadata för beroendegenskapen på typen.</xref:System.Windows.DependencyProperty.OverrideMetadata%2A> </xref:System.Windows.DependencyProperty.AddOwner%2A>"
  example:
  - "The following example gets metadata for a dependency property based on its type. The type is obtained by using a `typeof` operator.  \n  \n [!code-cs[PropertySystemEsoterics#GetMetadataType](~/add/codesnippet/csharp/PropertySystemEsoterics/XAMLAPP/default.xaml.cs#getmetadatatype)]\n [!code-vb[PropertySystemEsoterics#GetMetadataType](~/add/codesnippet/visualbasic/xamlapp/default.xaml.vb#getmetadatatype)]"
  syntax:
    content: public System.Windows.PropertyMetadata GetMetadata (Type forType);
    parameters:
    - id: forType
      type: System.Type
      description: "Den speciella typ från vilka du vill hämta beroende egenskapens metadata."
    return:
      type: System.Windows.PropertyMetadata
      description: "Ett metadataobjekt för egenskapen."
  overload: System.Windows.DependencyProperty.GetMetadata*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.DependencyProperty.GetMetadata(System.Windows.DependencyObject)
  id: GetMetadata(System.Windows.DependencyObject)
  parent: System.Windows.DependencyProperty
  langs:
  - csharp
  name: GetMetadata(DependencyObject)
  nameWithType: DependencyProperty.GetMetadata(DependencyObject)
  fullName: System.Windows.DependencyProperty.GetMetadata(DependencyObject)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Returnerar metadata för den här beroendeegenskap eftersom den finns på den angivna objektinstansen."
  remarks: "Ange typ eller en objektreferens krävs eftersom metadata för alla angivna beroendegenskapen kan skilja sig från den ursprungliga registreringen på grund av antingen <xref:System.Windows.DependencyProperty.AddOwner%2A>eller <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>-anrop som kan begränsa egenskapens metadata eftersom den finns i en typ.</xref:System.Windows.DependencyProperty.OverrideMetadata%2A> </xref:System.Windows.DependencyProperty.AddOwner%2A>       När du begär egenskapens metadata baserat på en instans kan skickar du enkelt instansen så att dess typ som kan utvärderas internt. Varierar beroende egenskapens metadata inte per instans. Det är alltid konsekvent för alla angivna typegenskapen kombination."
  example:
  - "The following example gets metadata for a dependency property based on a specific <xref:System.Windows.DependencyObject> instance.  \n  \n [!code-cs[PropertySystemEsoterics#GetMetadataDOInstance](~/add/codesnippet/csharp/PropertySystemEsoterics/XAMLAPP/default.xaml.cs#getmetadatadoinstance)]\n [!code-vb[PropertySystemEsoterics#GetMetadataDOInstance](~/add/codesnippet/visualbasic/xamlapp/default.xaml.vb#getmetadatadoinstance)]"
  syntax:
    content: public System.Windows.PropertyMetadata GetMetadata (System.Windows.DependencyObject dependencyObject);
    parameters:
    - id: dependencyObject
      type: System.Windows.DependencyObject
      description: "Ett beroendeobjekt som kontrolleras för att avgöra vilken typspecifika version av beroendegenskapen metadata ska hämtas från."
    return:
      type: System.Windows.PropertyMetadata
      description: "Ett metadataobjekt för egenskapen."
  overload: System.Windows.DependencyProperty.GetMetadata*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.DependencyProperty.GetMetadata(System.Windows.DependencyObjectType)
  id: GetMetadata(System.Windows.DependencyObjectType)
  parent: System.Windows.DependencyProperty
  langs:
  - csharp
  name: GetMetadata(DependencyObjectType)
  nameWithType: DependencyProperty.GetMetadata(DependencyObjectType)
  fullName: System.Windows.DependencyProperty.GetMetadata(DependencyObjectType)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Returnerar metadata för den här beroendeegenskap eftersom den finns på en viss typ av."
  remarks: "Ange typ eller en objektreferens krävs eftersom metadata för alla angivna beroendegenskapen kan skilja sig från den ursprungliga registreringen på grund av antingen <xref:System.Windows.DependencyProperty.AddOwner%2A>eller <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>-anrop som kan begränsa egenskapens metadata eftersom den finns i en typ.</xref:System.Windows.DependencyProperty.OverrideMetadata%2A> </xref:System.Windows.DependencyProperty.AddOwner%2A>"
  example:
  - "The following example gets metadata for a dependency property based on its <xref:System.Windows.DependencyObjectType>.  \n  \n [!code-cs[PropertySystemEsoterics#GetMetadataDOType](~/add/codesnippet/csharp/PropertySystemEsoterics/XAMLAPP/default.xaml.cs#getmetadatadotype)]\n [!code-vb[PropertySystemEsoterics#GetMetadataDOType](~/add/codesnippet/visualbasic/xamlapp/default.xaml.vb#getmetadatadotype)]"
  syntax:
    content: public System.Windows.PropertyMetadata GetMetadata (System.Windows.DependencyObjectType dependencyObjectType);
    parameters:
    - id: dependencyObjectType
      type: System.Windows.DependencyObjectType
      description: "Ett specifikt objekt som innehåller beroendeobjektstyp som önskas beroende egenskapens metadata."
    return:
      type: System.Windows.PropertyMetadata
      description: "Ett metadataobjekt för egenskapen."
  overload: System.Windows.DependencyProperty.GetMetadata*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.DependencyProperty.GlobalIndex
  id: GlobalIndex
  parent: System.Windows.DependencyProperty
  langs:
  - csharp
  name: GlobalIndex
  nameWithType: DependencyProperty.GlobalIndex
  fullName: System.Windows.DependencyProperty.GlobalIndex
  type: Property
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Hämtar ett internt genererat värde som unikt identifierar beroendeegenskapen."
  remarks: "Det här värdet är inte ett heltal, ett [!INCLUDE[TLA#tla_guid](~/add/includes/ajax-current-ext-md.md)]. I allmänhet med hjälp av den här indexvärde behövs inte och det finns ingen index åtkomst till tabeller för alla beroendeegenskaper. Beroendeegenskaper bör i stället refereras av fälten identifierare.       GlobalIndex används internt för snabbare åtkomst till datastrukturer som använder GlobalIndex som en Nollbaserad matris-index. Användning av en liknande kanske program för designers och verktyg."
  syntax:
    content: public int GlobalIndex { get; }
    return:
      type: System.Int32
      description: "En unik numerisk identifierare."
  overload: System.Windows.DependencyProperty.GlobalIndex*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.DependencyProperty.IsValidType(System.Object)
  id: IsValidType(System.Object)
  parent: System.Windows.DependencyProperty
  langs:
  - csharp
  name: IsValidType(Object)
  nameWithType: DependencyProperty.IsValidType(Object)
  fullName: System.Windows.DependencyProperty.IsValidType(Object)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Anger om ett angivet värde är godkänd för den här beroendeegenskap typ som kontrolleras mot egenskapstyp i den ursprungliga beroende egenskap registreringen."
  remarks: "Ett värde av `null` är en giltig typ för referens beroendeegenskaper eller för en <xref:System.Nullable%601>beroendeegenskap, och returnerar `true` i dessa fall.</xref:System.Nullable%601> I fall där beroendegenskapen är varken en referens eller en <xref:System.Nullable%601>typ, IsValidType returnerar `false` för en null-värde i stället för generera ett undantag.</xref:System.Nullable%601>"
  example:
  - "The following example uses IsValidType as a check before calling <xref:System.Windows.DependencyObject.SetValue%2A> on the dependency property.  \n  \n [!code-cs[PropertySystemEsoterics#TrySetValue](~/add/codesnippet/csharp/PropertySystemEsoterics/XAMLAPP/page2.xaml.cs#trysetvalue)]\n [!code-vb[PropertySystemEsoterics#TrySetValue](~/add/codesnippet/visualbasic/xamlapp/page2.xaml.vb#trysetvalue)]"
  syntax:
    content: public bool IsValidType (object value);
    parameters:
    - id: value
      type: System.Object
      description: "Värdet för att kontrollera."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Om det angivna värdet är den registrerad egenskap eller en acceptabel härledd typ; Annars <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.DependencyProperty.IsValidType*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.DependencyProperty.IsValidValue(System.Object)
  id: IsValidValue(System.Object)
  parent: System.Windows.DependencyProperty
  langs:
  - csharp
  name: IsValidValue(Object)
  nameWithType: DependencyProperty.IsValidValue(Object)
  fullName: System.Windows.DependencyProperty.IsValidValue(Object)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Anger om det angivna värdet accepteras för typ av egenskapen genom kontroll av grundläggande typ och möjligen också om det är inom det tillåtna värdeintervallet för den typen."
  remarks: "För en beroendeegenskap en tillåtna värdeintervallet för kan anges via en <xref:System.Windows.ValidateValueCallback>som har angetts i registreringen beroende egenskap.</xref:System.Windows.ValidateValueCallback>       Den här metoden anropar <xref:System.Windows.DependencyProperty.IsValidType%2A>internt.</xref:System.Windows.DependencyProperty.IsValidType%2A> Om beroendegenskapen i fråga har ingen <xref:System.Windows.ValidateValueCallback>anropar den här metoden motsvarar ett effektivt sätt att anropa <xref:System.Windows.DependencyProperty.IsValidType%2A>.</xref:System.Windows.DependencyProperty.IsValidType%2A> </xref:System.Windows.ValidateValueCallback> Om beroendegenskapen har en <xref:System.Windows.ValidateValueCallback>, och om <xref:System.Windows.DependencyProperty.IsValidType%2A>skulle ha returnerat `true`, och sedan det returnerade värdet blir som implementerats i återanropet.</xref:System.Windows.DependencyProperty.IsValidType%2A> </xref:System.Windows.ValidateValueCallback>       Ett null-värde är ett giltigt värde för referens beroendeegenskaper eller för en <xref:System.Nullable%601>beroendeegenskap, och returnerar `true` i dessa fall.</xref:System.Nullable%601> I fall där beroendegenskapen är varken en referens eller en <xref:System.Nullable%601>typ, <xref:System.Windows.DependencyProperty.IsValidType%2A>returnerar `false` för en null-värde i stället för generera ett undantag.</xref:System.Windows.DependencyProperty.IsValidType%2A> </xref:System.Nullable%601>"
  example:
  - "The following example uses IsValidValue as a check before calling <xref:System.Windows.DependencyObject.SetValue%2A> on the dependency property.  \n  \n [!code-cs[PropertySystemEsoterics#TrySetValueWithValidate](~/add/codesnippet/csharp/PropertySystemEsoterics/XAMLAPP/page2.xaml.cs#trysetvaluewithvalidate)]\n [!code-vb[PropertySystemEsoterics#TrySetValueWithValidate](~/add/codesnippet/visualbasic/xamlapp/page2.xaml.vb#trysetvaluewithvalidate)]"
  syntax:
    content: public bool IsValidValue (object value);
    parameters:
    - id: value
      type: System.Object
      description: "Värdet för att kontrollera."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Om värdet är acceptabel och är av rätt typ eller en härledd typ; Annars <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.DependencyProperty.IsValidValue*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.DependencyProperty.Name
  id: Name
  parent: System.Windows.DependencyProperty
  langs:
  - csharp
  name: Name
  nameWithType: DependencyProperty.Name
  fullName: System.Windows.DependencyProperty.Name
  type: Property
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Hämtar namnet på beroendegenskapen."
  remarks: "Den här egenskapen hämtar namnet som angetts för den `name` parametern vid registrering av cacheberoenden egenskapen. Det här namnet är oföränderlig och kan inte vara `null` eller en tom sträng. Dubblettnamn registreringar på samma Ägartypen tillåts inte och genereras ett undantagsfel när du försöker registrera dubbletten.      > [!IMPORTANT] > I namnet på en beroendeegenskap måste följa konventionen av matchar namnet på dess beroende egenskapsvärde minus suffixet &quot;Egenskap&quot;. Mer information finns i [anpassad beroendeegenskaper](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following example queries various characteristics of a dependency property identifier, including the Name.  \n  \n [!code-cs[PropertySystemEsoterics#DPProps](~/add/codesnippet/csharp/PropertySystemEsoterics/XAMLAPP/page2.xaml.cs#dpprops)]\n [!code-vb[PropertySystemEsoterics#DPProps](~/add/codesnippet/visualbasic/xamlapp/page2.xaml.vb#dpprops)]"
  syntax:
    content: public string Name { get; }
    return:
      type: System.String
      description: "Namnet på egenskapen."
  overload: System.Windows.DependencyProperty.Name*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.DependencyProperty.OverrideMetadata(System.Type,System.Windows.PropertyMetadata)
  id: OverrideMetadata(System.Type,System.Windows.PropertyMetadata)
  parent: System.Windows.DependencyProperty
  langs:
  - csharp
  name: OverrideMetadata(Type,PropertyMetadata)
  nameWithType: DependencyProperty.OverrideMetadata(Type,PropertyMetadata)
  fullName: System.Windows.DependencyProperty.OverrideMetadata(Type,PropertyMetadata)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Anger alternativa metadata för den här beroendeegenskap när den är installerad på instanser av en viss typ, åsidosätter metadata som fanns för beroendegenskapen eftersom den ärvts från bastyper."
  remarks: "Beroende egenskapens metadata bör åsidosättas innan egenskapen används beroendeegenskapen. Detta är lika med den tid som specifika instanser skapas med hjälp av klassen som registrerar beroendeegenskapen. Anrop till OverrideMetadata bör endast utföras i de statiska konstruktörer för den typ som innehåller sig själv som den `forType` parameter för den här metoden eller via liknande instansiering. Försök att ändra metadata efter instanser av typen ägare finns kommer inte att aktivera undantag, men leder inkonsekvent beteende i egenskapen systemet.       När metadata för en viss härledda klass åsidosättning har etablerats med den här metoden kan ska efterföljande försök att ändra metadata på den här samma härledd klass generera ett undantag.       Angivna metadata är sammanfogat med egenskapmetadata för beroendegenskapen på grundläggande ägare. Alla egenskaper som har angetts i den ursprungliga basens metadata behålls; de egenskaper som uttryckligen har ändrats i den nya metadata åsidosätter egenskaper basens metadata. Vissa egenskaper som <xref:System.Windows.PropertyMetadata.DefaultValue%2A>ersätts om angetts med nya metadata.</xref:System.Windows.PropertyMetadata.DefaultValue%2A> Andra, som <xref:System.Windows.PropertyChangedCallback>, kombineras.</xref:System.Windows.PropertyChangedCallback> Slutligen merge beteende beror på vilken egenskap metadata som används för åsidosättningen, det beteende som beskrivs här gäller de befintliga egenskapen metadata klasser som används av [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)] beroendeegenskaper. Mer information finns i [beroende egenskapens Metadata](~/add/includes/ajax-current-ext-md.md) och [Framework egenskapens Metadata](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public void OverrideMetadata (Type forType, System.Windows.PropertyMetadata typeMetadata);
    parameters:
    - id: forType
      type: System.Type
      description: "Typen där den här beroendeegenskap ärvs och där den angivna alternativa metadata kan tillämpas."
    - id: typeMetadata
      type: System.Windows.PropertyMetadata
      description: "Metadata som ska tillämpas för beroendegenskapen på vilken åsidosättning."
  overload: System.Windows.DependencyProperty.OverrideMetadata*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Ett försök gjordes att ändra metadata på en skrivskyddad beroendeegenskap (åtgärden inte kan utföras med hjälp av denna signatur)."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Metadata har redan upprättats för beroendegenskapen på den angivna typen."
  platform:
  - net462
- uid: System.Windows.DependencyProperty.OverrideMetadata(System.Type,System.Windows.PropertyMetadata,System.Windows.DependencyPropertyKey)
  id: OverrideMetadata(System.Type,System.Windows.PropertyMetadata,System.Windows.DependencyPropertyKey)
  parent: System.Windows.DependencyProperty
  langs:
  - csharp
  name: OverrideMetadata(Type,PropertyMetadata,DependencyPropertyKey)
  nameWithType: DependencyProperty.OverrideMetadata(Type,PropertyMetadata,DependencyPropertyKey)
  fullName: System.Windows.DependencyProperty.OverrideMetadata(Type,PropertyMetadata,DependencyPropertyKey)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Leveranser alternativa metadata för en skrivskyddad beroendeegenskap när den är installerad på instanser av en viss typ, åsidosätter metadata som angavs i egenskapen registreringen inledande beroende. Du måste skicka den <xref href=&quot;System.Windows.DependencyPropertyKey&quot;> </xref> för den skrivskyddade beroendegenskapen att undvika att skapa ett undantagsfel."
  remarks: "Den här signaturen innehåller underliggande implementering för en skrivskyddad egenskap Beroendeidentifierare (<xref:System.Windows.DependencyPropertyKey>) metoden.</xref:System.Windows.DependencyPropertyKey> Om åsidosätter metadata för en skrivskyddad beroendeegenskap Använd <xref:System.Windows.DependencyProperty.OverrideMetadata%28System.Type%2CSystem.Windows.PropertyMetadata%29>.</xref:System.Windows.DependencyProperty.OverrideMetadata%28System.Type%2CSystem.Windows.PropertyMetadata%29>       Beroende egenskapens metadata bör åsidosättas innan egenskapen används beroendeegenskapen. Detta är lika med den tid som specifika objekt som skapas för klassen som registrerar beroendeegenskapen. Anrop till <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>bör endast utföras i de statiska konstruktörer för den typ som innehåller sig själv som den `forType` parameter för den här metoden eller via liknande instansiering.</xref:System.Windows.DependencyProperty.OverrideMetadata%2A> Försök att ändra metadata efter instanser av typen ägare finns kommer inte att aktivera undantag, men leder inkonsekvent beteende i egenskapen systemet.       När metadata för en viss härledda klass åsidosättning har etablerats med den här metoden kan ska efterföljande försök att ändra metadata på den här samma härledd klass generera ett undantag.       Angivna metadata är sammanfogat med egenskapmetadata för beroendegenskapen på grundläggande ägare. Alla egenskaper som har angetts i den ursprungliga basens metadata behålls; de egenskaper som uttryckligen har ändrats i den nya metadata åsidosätter egenskaper basens metadata. Vissa egenskaper som <xref:System.Windows.PropertyMetadata.DefaultValue%2A>ersätts om angetts med nya metadata.</xref:System.Windows.PropertyMetadata.DefaultValue%2A> Andra, som <xref:System.Windows.PropertyChangedCallback>, kombineras.</xref:System.Windows.PropertyChangedCallback> Merge-beteende beror på vilken egenskap metadata som används för åsidosättningen. Mer information finns i [beroende egenskapens Metadata](~/add/includes/ajax-current-ext-md.md) och [Framework egenskapens Metadata](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public void OverrideMetadata (Type forType, System.Windows.PropertyMetadata typeMetadata, System.Windows.DependencyPropertyKey key);
    parameters:
    - id: forType
      type: System.Type
      description: "Typen där den här beroendeegenskap ärvs och där den angivna alternativa metadata kan tillämpas."
    - id: typeMetadata
      type: System.Windows.PropertyMetadata
      description: "Metadata som ska tillämpas för beroendegenskapen på vilken åsidosättning."
    - id: key
      type: System.Windows.DependencyPropertyKey
      description: "Åtkomstnyckeln för en skrivskyddad beroendeegenskap."
  overload: System.Windows.DependencyProperty.OverrideMetadata*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.DependencyProperty.OwnerType
  id: OwnerType
  parent: System.Windows.DependencyProperty
  langs:
  - csharp
  name: OwnerType
  nameWithType: DependencyProperty.OwnerType
  fullName: System.Windows.DependencyProperty.OwnerType
  type: Property
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Hämtar typ av objekt som registrerats i beroendeegenskap med egenskapen systemet eller lägga till sig själv som ägare av egenskapen."
  remarks: "Det här värdet har angetts under registreringen av egenskapen. Ägaren ska vara antingen den ursprungliga registrera typen för en <xref:System.Windows.DependencyProperty>identifierare som genereras från en <xref:System.Windows.DependencyProperty.Register%2A>samtal eller typen som lagts till sig själv som ägare för en <xref:System.Windows.DependencyProperty>identifierare som genereras från en <xref:System.Windows.DependencyProperty.AddOwner%2A>anropa.</xref:System.Windows.DependencyProperty.AddOwner%2A> </xref:System.Windows.DependencyProperty> </xref:System.Windows.DependencyProperty.Register%2A> </xref:System.Windows.DependencyProperty>       OwnerType på någon angivna <xref:System.Windows.DependencyProperty>är oföränderlig och kan inte vara `null` i ett giltigt <xref:System.Windows.DependencyProperty>.</xref:System.Windows.DependencyProperty> </xref:System.Windows.DependencyProperty>"
  example:
  - "The following example gets the owner type based on a dependency property identifier `dp`, and then gets metadata on the owner type for that same identifier. This operation is actually equivalent to getting <xref:System.Windows.DependencyProperty.DefaultMetadata%2A> on `dp`.  \n  \n [!code-cs[PropertySystemEsoterics#DPGetMetadataSingle](~/add/codesnippet/csharp/PropertySystemEsoterics/XAMLAPP/page2.xaml.cs#dpgetmetadatasingle)]\n [!code-vb[PropertySystemEsoterics#DPGetMetadataSingle](~/add/codesnippet/visualbasic/xamlapp/page2.xaml.vb#dpgetmetadatasingle)]"
  syntax:
    content: public Type OwnerType { get; }
    return:
      type: System.Type
      description: "Typ av objekt som registrerats egenskapen eller lägga till sig själv som ägare av egenskapen."
  overload: System.Windows.DependencyProperty.OwnerType*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.DependencyProperty.PropertyType
  id: PropertyType
  parent: System.Windows.DependencyProperty
  langs:
  - csharp
  name: PropertyType
  nameWithType: DependencyProperty.PropertyType
  fullName: System.Windows.DependencyProperty.PropertyType
  type: Property
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Hämtar den typ som beroendegenskapen använder det här värdet."
  remarks: "Den här egenskapen rapporterar typ av egenskapens värde som anges av den ursprungliga egenskap registreringen via den `propertyType` parameter. Liknar den <xref:System.Windows.DependencyProperty.Name%2A>, en beroendeegenskap egenskapstypen kan inte ändras efter registrering.</xref:System.Windows.DependencyProperty.Name%2A>"
  example:
  - "The following example queries various characteristics of a dependency property identifier, including the PropertyType. The type name string of the PropertyType is obtained from the returned <xref:System.Type>.  \n  \n [!code-cs[PropertySystemEsoterics#DPProps](~/add/codesnippet/csharp/PropertySystemEsoterics/XAMLAPP/page2.xaml.cs#dpprops)]\n [!code-vb[PropertySystemEsoterics#DPProps](~/add/codesnippet/visualbasic/xamlapp/page2.xaml.vb#dpprops)]"
  syntax:
    content: public Type PropertyType { get; }
    return:
      type: System.Type
      description: "Den <xref:System.Type>för egenskapsvärdet.</xref:System.Type>"
  overload: System.Windows.DependencyProperty.PropertyType*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.DependencyProperty.ReadOnly
  id: ReadOnly
  parent: System.Windows.DependencyProperty
  langs:
  - csharp
  name: ReadOnly
  nameWithType: DependencyProperty.ReadOnly
  fullName: System.Windows.DependencyProperty.ReadOnly
  type: Property
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Hämtar ett värde som anger om beroendegenskapen identifieras av detta <xref href=&quot;System.Windows.DependencyProperty&quot;> </xref> -instansen är en skrivskyddad beroendeegenskap."
  remarks: "Skrivskyddad beroendeegenskaper registreras i systemet egenskapen genom att anropa den <xref:System.Windows.DependencyProperty.RegisterReadOnly%2A>metoden inte den <xref:System.Windows.DependencyProperty.Register%2A>metoden.</xref:System.Windows.DependencyProperty.Register%2A> </xref:System.Windows.DependencyProperty.RegisterReadOnly%2A> Bifogade egenskaper kan också registreras som skrivskyddade. Se <xref:System.Windows.DependencyProperty.RegisterAttachedReadOnly%2A>.</xref:System.Windows.DependencyProperty.RegisterAttachedReadOnly%2A>       Skrivskyddad beroendeegenskaper kräver en <xref:System.Windows.DependencyPropertyKey>identifierare i stället för en <xref:System.Windows.DependencyProperty>identifierare för att utföra metadataåtgärder som åsidosätter metadata eller ange värdet.</xref:System.Windows.DependencyProperty> </xref:System.Windows.DependencyPropertyKey> Om du har köpt en samling <xref:System.Windows.DependencyProperty>identifierare via ett anrop till <xref:System.Windows.DependencyObject.GetLocalValueEnumerator%2A>eller någon annan [!INCLUDE[TLA2#tla_api](~/add/includes/tla2sharptla-api-md.md)] som visar identifierare, kontrollera att värdet för ReadOnly innan du försöker anropa <xref:System.Windows.DependencyObject.SetValue%2A>eller <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>med hjälp av den beroende egenskapen ID som indataparameter, för att verifiera att beroendeegenskap som representerar ID inte är skrivskyddad.</xref:System.Windows.DependencyProperty.OverrideMetadata%2A> </xref:System.Windows.DependencyObject.SetValue%2A> </xref:System.Windows.DependencyObject.GetLocalValueEnumerator%2A> </xref:System.Windows.DependencyProperty> Om värdet för ReadOnly är `true` på en beroendeegenskap det finns inget programmässiga sätt att hämta en referens till den <xref:System.Windows.DependencyPropertyKey>identifierare för den beroendeegenskap från metadata eller från den <xref:System.Windows.DependencyProperty>identifierare; identifieraren måste vara tillgänglig som ett statiskt fält för att anropa <xref:System.Windows.DependencyObject.SetValue%28System.Windows.DependencyPropertyKey%2CSystem.Object%29>mot en skrivskyddad beroendeegenskap.</xref:System.Windows.DependencyObject.SetValue%28System.Windows.DependencyPropertyKey%2CSystem.Object%29> </xref:System.Windows.DependencyProperty> </xref:System.Windows.DependencyPropertyKey>       När du skapar en anpassad beroendeegenskap och registrera den som skrivskyddad, bör du definiera endast en get-accessorn för den [!INCLUDE[TLA2#tla_clr](~/add/includes/tla2sharptla-clr-md.md)] wrapper-egenskapen. I annat fall har din klass en förvirrande objektmodell för egenskapen wrapper jämfört med åtkomst till stödjande beroendeegenskap. Mer information finns i [anpassad beroendeegenskaper](~/add/includes/ajax-current-ext-md.md) eller [skrivskyddad beroendeegenskaper](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following example obtains the default metadata and the dependency property identifier properties from various dependency property fields, and uses the information to populate a table to implement a \"metadata browser\".  \n  \n [!code-cs[PropertySystemEsoterics#DPProps](~/add/codesnippet/csharp/PropertySystemEsoterics/XAMLAPP/page2.xaml.cs#dpprops)]\n [!code-vb[PropertySystemEsoterics#DPProps](~/add/codesnippet/visualbasic/xamlapp/page2.xaml.vb#dpprops)]"
  syntax:
    content: public bool ReadOnly { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Om beroendegenskapen är skrivskyddade. Annars <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.DependencyProperty.ReadOnly*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.DependencyProperty.Register(System.String,System.Type,System.Type)
  id: Register(System.String,System.Type,System.Type)
  parent: System.Windows.DependencyProperty
  langs:
  - csharp
  name: Register(String,Type,Type)
  nameWithType: DependencyProperty.Register(String,Type,Type)
  fullName: System.Windows.DependencyProperty.Register(String,Type,Type)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Registrerar en beroendeegenskap med den angivna egenskapsnamnet och egenskapstyp typen ägare."
  remarks: "Mer information om registrering av cacheberoenden egenskapen finns <xref:System.Windows.DependencyProperty>.</xref:System.Windows.DependencyProperty>"
  example:
  - >-
    [!code-cs[WPFAquariumSln#Register3Param](~/add/codesnippet/csharp/WPFAquariumSln/WPFAquariumObjects/Class1.cs#register3param)]
     [!code-vb[WPFAquariumSln#Register3Param](~/add/codesnippet/visualbasic/wpfaquariumobjects/class1.vb#register3param)]
  syntax:
    content: public static System.Windows.DependencyProperty Register (string name, Type propertyType, Type ownerType);
    parameters:
    - id: name
      type: System.String
      description: "Namnet på beroendeegenskap att registrera. Namnet måste vara unikt inom namnområdet för registrering av typen ägare."
    - id: propertyType
      type: System.Type
      description: "Typ av egenskapen."
    - id: ownerType
      type: System.Type
      description: "Ägartypen som registrerar beroendeegenskapen."
    return:
      type: System.Windows.DependencyProperty
      description: "En beroende egenskap identifierare som ska användas för att ange värdet för en <xref uid=&quot;langword_csharp_public static readonly&quot; name=&quot;public static readonly&quot; href=&quot;&quot;> </xref> i klassen. Som sedan används för att referera till beroendeegenskapen senare, för till exempel ange värdet programmässigt eller hämtning av metadata."
  overload: System.Windows.DependencyProperty.Register*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.DependencyProperty.Register(System.String,System.Type,System.Type,System.Windows.PropertyMetadata)
  id: Register(System.String,System.Type,System.Type,System.Windows.PropertyMetadata)
  parent: System.Windows.DependencyProperty
  langs:
  - csharp
  name: Register(String,Type,Type,PropertyMetadata)
  nameWithType: DependencyProperty.Register(String,Type,Type,PropertyMetadata)
  fullName: System.Windows.DependencyProperty.Register(String,Type,Type,PropertyMetadata)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Registrerar en beroendeegenskap med angivna egenskapsnamnet, egenskapstyp, typ och egenskapens metadata."
  remarks: "Mer information om registrering av cacheberoenden egenskapen finns <xref:System.Windows.DependencyProperty>.</xref:System.Windows.DependencyProperty>"
  syntax:
    content: public static System.Windows.DependencyProperty Register (string name, Type propertyType, Type ownerType, System.Windows.PropertyMetadata typeMetadata);
    parameters:
    - id: name
      type: System.String
      description: "Namnet på beroendeegenskap att registrera."
    - id: propertyType
      type: System.Type
      description: "Typ av egenskapen."
    - id: ownerType
      type: System.Type
      description: "Ägartypen som registrerar beroendeegenskapen."
    - id: typeMetadata
      type: System.Windows.PropertyMetadata
      description: "Egenskapmetadata för beroendegenskapen."
    return:
      type: System.Windows.DependencyProperty
      description: "En beroende egenskap identifierare som ska användas för att ange värdet för en <xref uid=&quot;langword_csharp_public static readonly&quot; name=&quot;public static readonly&quot; href=&quot;&quot;> </xref> i klassen. Som sedan används för att referera till beroendeegenskapen senare, för till exempel ange värdet programmässigt eller hämtning av metadata."
  overload: System.Windows.DependencyProperty.Register*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.DependencyProperty.Register(System.String,System.Type,System.Type,System.Windows.PropertyMetadata,System.Windows.ValidateValueCallback)
  id: Register(System.String,System.Type,System.Type,System.Windows.PropertyMetadata,System.Windows.ValidateValueCallback)
  parent: System.Windows.DependencyProperty
  langs:
  - csharp
  name: Register(String,Type,Type,PropertyMetadata,ValidateValueCallback)
  nameWithType: DependencyProperty.Register(String,Type,Type,PropertyMetadata,ValidateValueCallback)
  fullName: System.Windows.DependencyProperty.Register(String,Type,Type,PropertyMetadata,ValidateValueCallback)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Registrerar en beroendeegenskap med det angivna egenskapsnamnet egenskapstyp, typen ägare, egenskapens metadata och ett återanrop för verifiering av värdet för egenskapen."
  remarks: "Mer information om registrering av cacheberoenden egenskapen finns <xref:System.Windows.DependencyProperty>.</xref:System.Windows.DependencyProperty>"
  example:
  - "The following example registers a dependency property, including a validation callback (the callback definition is not shown; for details on the callback definition, see <xref:System.Windows.ValidateValueCallback>).  \n  \n [!code-cs[DPCallbackOverride#CurrentDefinitionWithWrapper](~/add/codesnippet/csharp/DPCallbackOverride/SDKSampleLibrary/class1.cs#currentdefinitionwithwrapper)]\n [!code-vb[DPCallbackOverride#CurrentDefinitionWithWrapper](~/add/codesnippet/visualbasic/DPCallbackOverride.sdksamplelibrary/class1.vb#currentdefinitionwithwrapper)]"
  syntax:
    content: public static System.Windows.DependencyProperty Register (string name, Type propertyType, Type ownerType, System.Windows.PropertyMetadata typeMetadata, System.Windows.ValidateValueCallback validateValueCallback);
    parameters:
    - id: name
      type: System.String
      description: "Namnet på beroendeegenskap att registrera."
    - id: propertyType
      type: System.Type
      description: "Typ av egenskapen."
    - id: ownerType
      type: System.Type
      description: "Ägartypen som registrerar beroendeegenskapen."
    - id: typeMetadata
      type: System.Windows.PropertyMetadata
      description: "Egenskapmetadata för beroendegenskapen."
    - id: validateValueCallback
      type: System.Windows.ValidateValueCallback
      description: "En referens till ett återanrop som utför alla anpassade validering av egenskapsvärdet beroende utöver vanliga typverifieringen."
    return:
      type: System.Windows.DependencyProperty
      description: "En beroende egenskap identifierare som ska användas för att ange värdet för en <xref uid=&quot;langword_csharp_public static readonly&quot; name=&quot;public static readonly&quot; href=&quot;&quot;> </xref> i klassen. Som sedan används för att referera till beroendeegenskapen senare, för till exempel ange värdet programmässigt eller hämtning av metadata."
  overload: System.Windows.DependencyProperty.Register*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.DependencyProperty.RegisterAttached(System.String,System.Type,System.Type)
  id: RegisterAttached(System.String,System.Type,System.Type)
  parent: System.Windows.DependencyProperty
  langs:
  - csharp
  name: RegisterAttached(String,Type,Type)
  nameWithType: DependencyProperty.RegisterAttached(String,Type,Type)
  fullName: System.Windows.DependencyProperty.RegisterAttached(String,Type,Type)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Registrerar en bifogad egenskap med det angivna egenskapsnamnet och egenskapstyp ägartyp."
  remarks: "En bifogad egenskap är ett koncept för egenskapen som definierats av [!INCLUDE[TLA#tla_xaml](~/add/includes/tlasharptla-xaml-md.md)]. [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]implementerar kopplade egenskaper som beroendeegenskaper. Eftersom den [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)] bifogade egenskaper är beroendeegenskaper, kan de ha metadata som används som kan användas av systemet allmän egenskap för åtgärder som till exempel reporting layout egenskaper. Mer information finns i [kopplade Egenskapsöversikt](~/add/includes/ajax-current-ext-md.md).       Mer information om registrering av cacheberoenden egenskapen finns <xref:System.Windows.DependencyProperty>.</xref:System.Windows.DependencyProperty>"
  example:
  - "The following example registers an attached property on an abstract class using this RegisterAttached signature.  \n  \n [!code-cs[WPFAquariumSln#RegisterAttachedBubbler2](~/add/codesnippet/csharp/WPFAquariumSln/WPFAquariumObjects/Class1.cs#registerattachedbubbler2)]\n [!code-vb[WPFAquariumSln#RegisterAttachedBubbler2](~/add/codesnippet/visualbasic/wpfaquariumobjects/class1.vb#registerattachedbubbler2)]"
  syntax:
    content: public static System.Windows.DependencyProperty RegisterAttached (string name, Type propertyType, Type ownerType);
    parameters:
    - id: name
      type: System.String
      description: "Namnet på beroendeegenskap att registrera."
    - id: propertyType
      type: System.Type
      description: "Typ av egenskapen."
    - id: ownerType
      type: System.Type
      description: "Ägartypen som registrerar beroendeegenskapen."
    return:
      type: System.Windows.DependencyProperty
      description: "En beroende egenskap identifierare som ska användas för att ange värdet för en <xref uid=&quot;langword_csharp_public static readonly&quot; name=&quot;public static readonly&quot; href=&quot;&quot;> </xref> i klassen. Som sedan används för att referera till beroendeegenskapen senare, för till exempel ange värdet programmässigt eller hämtning av metadata."
  overload: System.Windows.DependencyProperty.RegisterAttached*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.DependencyProperty.RegisterAttached(System.String,System.Type,System.Type,System.Windows.PropertyMetadata)
  id: RegisterAttached(System.String,System.Type,System.Type,System.Windows.PropertyMetadata)
  parent: System.Windows.DependencyProperty
  langs:
  - csharp
  name: RegisterAttached(String,Type,Type,PropertyMetadata)
  nameWithType: DependencyProperty.RegisterAttached(String,Type,Type,PropertyMetadata)
  fullName: System.Windows.DependencyProperty.RegisterAttached(String,Type,Type,PropertyMetadata)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Registrerar en bifogad egenskap med angivna egenskapsnamnet, egenskapstyp, typ och egenskapens metadata."
  remarks: "An attached property is a property concept defined by [!INCLUDE[TLA#tla_xaml](~/add/includes/tlasharptla-xaml-md.md)]. [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)] implements attached properties as dependency properties. Because the [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)] attached properties are dependency properties, they can have metadata applied that can be used by the general property system for operations such as reporting layout characteristics. For more information, see [Attached Properties Overview](~/add/includes/ajax-current-ext-md.md).  \n  \n For more information on dependency property registration, see <xref:System.Windows.DependencyProperty>.  \n  \n## Use RegisterAttached for Value-inheriting Dependency Properties  \n One particular scenario for registering a dependency property with RegisterAttached instead of <xref:System.Windows.DependencyProperty.Register%2A> is to support property value inheritance. You should register value-inheriting dependency properties with RegisterAttached even if the class defines property wrapper accessors that expose the dependency property, and even if you do not intend to expose Get* and Set\\* static methods to provide true attached property support accessors.   Although property value inheritance might appear to work for nonattached dependency properties, the inheritance behavior for a nonattached property through certain element boundaries in the runtime tree is undefined. Registering the property as attached effectively makes the attached property a global property to the property system, and assures that property value inheritance works across all boundaries in an element tree. Always use RegisterAttached to register properties where you specify <xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A> in the metadata. For more information, see [Property Value Inheritance](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public static System.Windows.DependencyProperty RegisterAttached (string name, Type propertyType, Type ownerType, System.Windows.PropertyMetadata defaultMetadata);
    parameters:
    - id: name
      type: System.String
      description: "Namnet på beroendeegenskap att registrera."
    - id: propertyType
      type: System.Type
      description: "Typ av egenskapen."
    - id: ownerType
      type: System.Type
      description: "Ägartypen som registrerar beroendeegenskapen."
    - id: defaultMetadata
      type: System.Windows.PropertyMetadata
      description: "Egenskapmetadata för beroendegenskapen. Detta kan inkludera standardvärdet samt andra egenskaper."
    return:
      type: System.Windows.DependencyProperty
      description: "En beroende egenskap identifierare som ska användas för att ange värdet för en <xref uid=&quot;langword_csharp_public static readonly&quot; name=&quot;public static readonly&quot; href=&quot;&quot;> </xref> i klassen. Som sedan används för att referera till beroendeegenskapen senare, för till exempel ange värdet programmässigt eller hämtning av metadata."
  overload: System.Windows.DependencyProperty.RegisterAttached*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.DependencyProperty.RegisterAttached(System.String,System.Type,System.Type,System.Windows.PropertyMetadata,System.Windows.ValidateValueCallback)
  id: RegisterAttached(System.String,System.Type,System.Type,System.Windows.PropertyMetadata,System.Windows.ValidateValueCallback)
  parent: System.Windows.DependencyProperty
  langs:
  - csharp
  name: RegisterAttached(String,Type,Type,PropertyMetadata,ValidateValueCallback)
  nameWithType: DependencyProperty.RegisterAttached(String,Type,Type,PropertyMetadata,ValidateValueCallback)
  fullName: System.Windows.DependencyProperty.RegisterAttached(String,Type,Type,PropertyMetadata,ValidateValueCallback)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Registrerar en bifogad egenskap med angivna egenskapstypen, typen ägare, egenskapens metadata och värdet validering återanrop för egenskapen."
  remarks: "An attached property is a property concept defined by [!INCLUDE[TLA#tla_xaml](~/add/includes/tlasharptla-xaml-md.md)]. [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)] implements attached properties as dependency properties. Because the [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)] attached properties are dependency properties, they can have metadata applied that can be used by the general property system for operations such as reporting layout characteristics. For more information, see [Attached Properties Overview](~/add/includes/ajax-current-ext-md.md).  \n  \n For more information on dependency property registration, see <xref:System.Windows.DependencyProperty>.  \n  \n## Use RegisterAttached for Value-inheriting Dependency Properties  \n One particular scenario for registering a dependency property with <xref:System.Windows.DependencyProperty.RegisterAttached%2A> instead of <xref:System.Windows.DependencyProperty.Register%2A> is to support property value inheritance. You should register value-inheriting dependency properties with <xref:System.Windows.DependencyProperty.RegisterAttached%2A> even if the class defines property wrapper accessors that expose the dependency property, and even if you do not intend to expose Get* and Set\\* static methods to provide true attached property support accessors.   Although property value inheritance might appear to work for nonattached dependency properties, the inheritance behavior for a nonattached property through certain element boundaries in the runtime tree is undefined. Registering the property as attached effectively makes the attached property a global property to the property system, and assures that property value inheritance works across all boundaries in an element tree. Always use <xref:System.Windows.DependencyProperty.RegisterAttached%2A> to register properties where you specify <xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A> in the metadata. For more information, see [Property Value Inheritance](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following example registers an attached property on an abstract class using this RegisterAttached signature. This attached property is an enumeration type property, and the registration adds a validation callback to verify that the provided value is a value of the enumeration.  \n  \n [!code-cs[WPFAquariumSln#RegisterAttachedBubbler2](~/add/codesnippet/csharp/WPFAquariumSln/WPFAquariumObjects/Class1.cs#registerattachedbubbler2)]\n [!code-vb[WPFAquariumSln#RegisterAttachedBubbler2](~/add/codesnippet/visualbasic/wpfaquariumobjects/class1.vb#registerattachedbubbler2)]"
  syntax:
    content: public static System.Windows.DependencyProperty RegisterAttached (string name, Type propertyType, Type ownerType, System.Windows.PropertyMetadata defaultMetadata, System.Windows.ValidateValueCallback validateValueCallback);
    parameters:
    - id: name
      type: System.String
      description: "Namnet på beroendeegenskap att registrera."
    - id: propertyType
      type: System.Type
      description: "Typ av egenskapen."
    - id: ownerType
      type: System.Type
      description: "Ägartypen som registrerar beroendeegenskapen."
    - id: defaultMetadata
      type: System.Windows.PropertyMetadata
      description: "Egenskapmetadata för beroendegenskapen. Detta kan inkludera standardvärdet samt andra egenskaper."
    - id: validateValueCallback
      type: System.Windows.ValidateValueCallback
      description: "En referens till ett återanrop som utför alla anpassade validering av egenskapsvärdet beroende utöver vanliga typverifieringen."
    return:
      type: System.Windows.DependencyProperty
      description: "En beroende egenskap identifierare som ska användas för att ange värdet för en <xref uid=&quot;langword_csharp_public static readonly&quot; name=&quot;public static readonly&quot; href=&quot;&quot;> </xref> i klassen. Som sedan används för att referera till beroendeegenskapen senare, för till exempel ange värdet programmässigt eller hämtning av metadata."
  overload: System.Windows.DependencyProperty.RegisterAttached*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.DependencyProperty.RegisterAttachedReadOnly(System.String,System.Type,System.Type,System.Windows.PropertyMetadata)
  id: RegisterAttachedReadOnly(System.String,System.Type,System.Type,System.Windows.PropertyMetadata)
  parent: System.Windows.DependencyProperty
  langs:
  - csharp
  name: RegisterAttachedReadOnly(String,Type,Type,PropertyMetadata)
  nameWithType: DependencyProperty.RegisterAttachedReadOnly(String,Type,Type,PropertyMetadata)
  fullName: System.Windows.DependencyProperty.RegisterAttachedReadOnly(String,Type,Type,PropertyMetadata)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Registrerar en skrivskyddad bifogad egenskap, med den angivna egenskapstypen och ägartyp egenskapens metadata."
  remarks: "This method returns the type <xref:System.Windows.DependencyPropertyKey>, whereas <xref:System.Windows.DependencyProperty.RegisterAttached%2A> returns the type <xref:System.Windows.DependencyProperty>. Typically, the keys that represent read-only properties are not made public, because the keys can be used to set the dependency property value by calling <xref:System.Windows.DependencyObject.SetValue%28System.Windows.DependencyPropertyKey%2CSystem.Object%29>. Your class design will affect your requirements, but it is generally recommended to limit the access and visibility of any <xref:System.Windows.DependencyPropertyKey> to only those parts of your code that are necessary to set that dependency property as part of class or application logic. It is also recommended that you expose a dependency property identifier for the read-only dependency property, by exposing the value of <xref:System.Windows.DependencyPropertyKey.DependencyProperty%2A?displayProperty=fullName> as a `public static readonly` field on your class.  \n  \n Read-only attached properties are a rare scenario, because the primary scenario for an attached property is its use in [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]. Without a public setter, an attached property cannot be set in [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] syntax.  \n  \n For more information on dependency property registration, see <xref:System.Windows.DependencyProperty>.  \n  \n## Use RegisterAttached for Value-inheriting Dependency Properties  \n One particular scenario for registering a dependency property as attached is to support property value inheritance. You should register value-inheriting dependency properties with <xref:System.Windows.DependencyProperty.RegisterAttached%2A> even if the class defines property wrapper accessors that expose the dependency property, and even if you do not intend to expose Get* and Set\\* static methods to provide true attached property support accessors.   Although property value inheritance might appear to work for nonattached dependency properties, the inheritance behavior for a nonattached property through certain element boundaries in the runtime tree is undefined. Registering the property as attached effectively makes the attached property a global property to the property system, and assures that property value inheritance works across all boundaries in an element tree. Always use <xref:System.Windows.DependencyProperty.RegisterAttached%2A> to register properties where you specify <xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A> in the metadata. For more information, see [Property Value Inheritance](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public static System.Windows.DependencyPropertyKey RegisterAttachedReadOnly (string name, Type propertyType, Type ownerType, System.Windows.PropertyMetadata defaultMetadata);
    parameters:
    - id: name
      type: System.String
      description: "Namnet på beroendeegenskap att registrera."
    - id: propertyType
      type: System.Type
      description: "Typ av egenskapen."
    - id: ownerType
      type: System.Type
      description: "Ägartypen som registrerar beroendeegenskapen."
    - id: defaultMetadata
      type: System.Windows.PropertyMetadata
      description: "Egenskapmetadata för beroendegenskapen."
    return:
      type: System.Windows.DependencyPropertyKey
      description: "En beroende Egenskapsnyckel som ska användas för att ange värdet för ett statiskt skrivskyddat fält i din klass, som sedan används för att referera till beroendeegenskapen senare."
  overload: System.Windows.DependencyProperty.RegisterAttachedReadOnly*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.DependencyProperty.RegisterAttachedReadOnly(System.String,System.Type,System.Type,System.Windows.PropertyMetadata,System.Windows.ValidateValueCallback)
  id: RegisterAttachedReadOnly(System.String,System.Type,System.Type,System.Windows.PropertyMetadata,System.Windows.ValidateValueCallback)
  parent: System.Windows.DependencyProperty
  langs:
  - csharp
  name: RegisterAttachedReadOnly(String,Type,Type,PropertyMetadata,ValidateValueCallback)
  nameWithType: DependencyProperty.RegisterAttachedReadOnly(String,Type,Type,PropertyMetadata,ValidateValueCallback)
  fullName: System.Windows.DependencyProperty.RegisterAttachedReadOnly(String,Type,Type,PropertyMetadata,ValidateValueCallback)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Registrerar en skrivskyddad bifogad egenskap, med den angivna egenskapstypen, typen ägare, egenskapens metadata och ett återanrop för verifiering."
  remarks: "This method returns the type <xref:System.Windows.DependencyPropertyKey>, whereas <xref:System.Windows.DependencyProperty.RegisterAttached%2A> returns the type <xref:System.Windows.DependencyProperty>. Typically, the keys that represent the type <xref:System.Windows.DependencyProperty>. Typically, the keys that represent read-only properties are not made public, because the keys can be used to set the dependency property value by calling <xref:System.Windows.DependencyObject.SetValue%28System.Windows.DependencyPropertyKey%2CSystem.Object%29>. Your class design will affect your requirements, but it is generally recommended to limit the access and visibility of any <xref:System.Windows.DependencyPropertyKey> to only those parts of your code that are necessary to set that dependency property as part of class or application logic. It is also recommended that you expose a dependency property identifier for the read-only dependency property, by exposing the value of <xref:System.Windows.DependencyPropertyKey.DependencyProperty%2A?displayProperty=fullName> as a `public static readonly` field on your class.  \n  \n Read-only attached properties are a rare scenario, because the primary scenario for an attached property is its use in [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]. Without a public setter, an attached property cannot be set in [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] syntax.  \n  \n For more information on dependency property registration, see <xref:System.Windows.DependencyProperty>.  \n  \n## Use RegisterAttached for Value-inheriting Dependency Properties  \n One particular scenario for registering a dependency property as attached instead of <xref:System.Windows.DependencyProperty.Register%2A> is to support property value inheritance. You should register value-inheriting dependency properties with <xref:System.Windows.DependencyProperty.RegisterAttached%2A> even if the class defines property wrapper accessors that expose the dependency property, and even if you do not intend to expose Get* and Set\\* static methods to provide true attached property support accessors.   Although property value inheritance might appear to work for nonattached dependency properties, the inheritance behavior for a nonattached property through certain element boundaries in the runtime tree is undefined. Registering the property as attached effectively makes the attached property a global property to the property system, and assures that property value inheritance works across all boundaries in an element tree. Always use <xref:System.Windows.DependencyProperty.RegisterAttached%2A> to register properties where you specify <xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A> in the metadata. For more information, see [Property Value Inheritance](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public static System.Windows.DependencyPropertyKey RegisterAttachedReadOnly (string name, Type propertyType, Type ownerType, System.Windows.PropertyMetadata defaultMetadata, System.Windows.ValidateValueCallback validateValueCallback);
    parameters:
    - id: name
      type: System.String
      description: "Namnet på beroendeegenskap att registrera."
    - id: propertyType
      type: System.Type
      description: "Typ av egenskapen."
    - id: ownerType
      type: System.Type
      description: "Ägartypen som registrerar beroendeegenskapen."
    - id: defaultMetadata
      type: System.Windows.PropertyMetadata
      description: "Egenskapmetadata för beroendegenskapen."
    - id: validateValueCallback
      type: System.Windows.ValidateValueCallback
      description: "En referens till ett användarskapade återanrop som utför alla anpassade validering av egenskapsvärdet beroende utöver vanliga typverifieringen."
    return:
      type: System.Windows.DependencyPropertyKey
      description: "En beroende Egenskapsnyckel som ska användas för att ange värdet för ett statiskt skrivskyddat fält i klassen, som sedan används för att referera till beroendeegenskapen."
  overload: System.Windows.DependencyProperty.RegisterAttachedReadOnly*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.DependencyProperty.RegisterReadOnly(System.String,System.Type,System.Type,System.Windows.PropertyMetadata)
  id: RegisterReadOnly(System.String,System.Type,System.Type,System.Windows.PropertyMetadata)
  parent: System.Windows.DependencyProperty
  langs:
  - csharp
  name: RegisterReadOnly(String,Type,Type,PropertyMetadata)
  nameWithType: DependencyProperty.RegisterReadOnly(String,Type,Type,PropertyMetadata)
  fullName: System.Windows.DependencyProperty.RegisterReadOnly(String,Type,Type,PropertyMetadata)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Registrerar en skrivskyddad beroendeegenskap med den angivna egenskapstypen och ägartyp egenskapens metadata."
  remarks: "Den här metoden returnerar typen <xref:System.Windows.DependencyPropertyKey>, men <xref:System.Windows.DependencyProperty.RegisterAttached%2A>returnerar typen <xref:System.Windows.DependencyProperty>.</xref:System.Windows.DependencyProperty> </xref:System.Windows.DependencyProperty.RegisterAttached%2A> </xref:System.Windows.DependencyPropertyKey> Normalt blir nycklar som motsvarar de skrivskyddade egenskaper inte offentliga, eftersom nycklarna kan användas för att ange egenskapsvärdet beroende genom att anropa <xref:System.Windows.DependencyObject.SetValue%28System.Windows.DependencyPropertyKey%2CSystem.Object%29>.</xref:System.Windows.DependencyObject.SetValue%28System.Windows.DependencyPropertyKey%2CSystem.Object%29> Utformningen av din klass påverkar dina krav, men det rekommenderas vanligtvis att begränsa åtkomst och synlighet för alla <xref:System.Windows.DependencyPropertyKey>till endast de delar av din kod som krävs för att ange att beroendeegenskap som en del av klassen eller program logik.</xref:System.Windows.DependencyPropertyKey> Vi rekommenderar också att du exponera en beroende egenskap identifierare för skrivskyddade beroendeegenskap genom att exponera värdet för <xref:System.Windows.DependencyPropertyKey.DependencyProperty%2A?displayProperty=fullName>som en `public static readonly` på sammanfattningen</xref:System.Windows.DependencyPropertyKey.DependencyProperty%2A?displayProperty=fullName>       Skrivskyddad dependency-egenskaper är ett relativt vanligt scenario både i den befintliga [!INCLUDE[TLA2#tla_api](~/add/includes/tla2sharptla-api-md.md)] och anpassning scenarier eftersom andra [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)] funktioner kan kräva en beroendeegenskap även om egenskapen inte är avsedd att vara går genom anropare. Du kan använda värdet för en skrivskyddad beroendeegenskap som bas för andra egenskapen systemåtgärder som tar en beroendeegenskap, till exempel basera en <xref:System.Windows.Trigger>på beroendeegenskap i en style.</xref:System.Windows.Trigger>       Mer information om registrering av cacheberoenden egenskapen finns <xref:System.Windows.DependencyProperty>.</xref:System.Windows.DependencyProperty>"
  example:
  - "The following example registers an `AquariumSize` dependency property as read-only. The example defines `AquariumSizeKey` as an internal key (so that other classes in the assembly could override metadata) and exposes the dependency property identifier based on that key as `AquariumSizeProperty`. Also, a wrapper is created for `AquariumSize`, with only a get accessor.  \n  \n [!code-cs[WPFAquariumSln#RODP](~/add/codesnippet/csharp/WPFAquariumSln/WPFAquariumObjects/Class1.cs#rodp)]\n [!code-vb[WPFAquariumSln#RODP](~/add/codesnippet/visualbasic/wpfaquariumobjects/class1.vb#rodp)]"
  syntax:
    content: public static System.Windows.DependencyPropertyKey RegisterReadOnly (string name, Type propertyType, Type ownerType, System.Windows.PropertyMetadata typeMetadata);
    parameters:
    - id: name
      type: System.String
      description: "Namnet på beroendeegenskap att registrera."
    - id: propertyType
      type: System.Type
      description: "Typ av egenskapen."
    - id: ownerType
      type: System.Type
      description: "Ägartypen som registrerar beroendeegenskapen."
    - id: typeMetadata
      type: System.Windows.PropertyMetadata
      description: "Egenskapmetadata för beroendegenskapen."
    return:
      type: System.Windows.DependencyPropertyKey
      description: "En beroende Egenskapsnyckel som ska användas för att ange värdet för ett statiskt skrivskyddat fält i klassen, som sedan används för att referera till beroendeegenskapen."
  overload: System.Windows.DependencyProperty.RegisterReadOnly*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.DependencyProperty.RegisterReadOnly(System.String,System.Type,System.Type,System.Windows.PropertyMetadata,System.Windows.ValidateValueCallback)
  id: RegisterReadOnly(System.String,System.Type,System.Type,System.Windows.PropertyMetadata,System.Windows.ValidateValueCallback)
  parent: System.Windows.DependencyProperty
  langs:
  - csharp
  name: RegisterReadOnly(String,Type,Type,PropertyMetadata,ValidateValueCallback)
  nameWithType: DependencyProperty.RegisterReadOnly(String,Type,Type,PropertyMetadata,ValidateValueCallback)
  fullName: System.Windows.DependencyProperty.RegisterReadOnly(String,Type,Type,PropertyMetadata,ValidateValueCallback)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Registrerar en skrivskyddad beroendeegenskap med den angivna egenskapstypen, typen ägare, egenskapens metadata och ett återanrop för verifiering."
  remarks: "Den här metoden returnerar typen <xref:System.Windows.DependencyPropertyKey>, men <xref:System.Windows.DependencyProperty.RegisterAttached%2A>returnerar typen <xref:System.Windows.DependencyProperty>.</xref:System.Windows.DependencyProperty> </xref:System.Windows.DependencyProperty.RegisterAttached%2A> </xref:System.Windows.DependencyPropertyKey> Normalt blir nycklar som motsvarar de skrivskyddade egenskaper inte offentliga, eftersom nycklarna kan användas för att ange egenskapsvärdet beroende genom att anropa <xref:System.Windows.DependencyObject.SetValue%28System.Windows.DependencyPropertyKey%2CSystem.Object%29>.</xref:System.Windows.DependencyObject.SetValue%28System.Windows.DependencyPropertyKey%2CSystem.Object%29> Utformningen av din klass påverkar dina krav, men det rekommenderas vanligtvis att begränsa åtkomst och synlighet för alla <xref:System.Windows.DependencyPropertyKey>till endast de delar av din kod som krävs för att ange att beroendeegenskap som en del av klassen eller program logik.</xref:System.Windows.DependencyPropertyKey> Vi rekommenderar också att du exponera en beroende egenskap identifierare för skrivskyddade beroendeegenskap genom att exponera värdet för <xref:System.Windows.DependencyPropertyKey.DependencyProperty%2A?displayProperty=fullName>som en `public static readonly` på sammanfattningen</xref:System.Windows.DependencyPropertyKey.DependencyProperty%2A?displayProperty=fullName>       Skrivskyddad dependency-egenskaper är ett relativt vanligt scenario. Du kan använda värdet för en skrivskyddad beroendeegenskap som bas för andra egenskapen systemåtgärder som tar en beroendeegenskap, till exempel basera en <xref:System.Windows.Trigger>på beroendeegenskap i en style.</xref:System.Windows.Trigger>       Mer information om registrering av cacheberoenden egenskapen finns <xref:System.Windows.DependencyProperty>.</xref:System.Windows.DependencyProperty>       Validering av en skrivskyddad beroendeegenskap kanske mindre viktiga. Icke allmän åtkomstnivå som du anger för nyckeln minskar sannolikheten för valfri ogiltiga indata."
  syntax:
    content: public static System.Windows.DependencyPropertyKey RegisterReadOnly (string name, Type propertyType, Type ownerType, System.Windows.PropertyMetadata typeMetadata, System.Windows.ValidateValueCallback validateValueCallback);
    parameters:
    - id: name
      type: System.String
      description: "Namnet på beroendeegenskap att registrera."
    - id: propertyType
      type: System.Type
      description: "Typ av egenskapen."
    - id: ownerType
      type: System.Type
      description: "Ägartypen som registrerar beroendeegenskapen."
    - id: typeMetadata
      type: System.Windows.PropertyMetadata
      description: "Egenskapmetadata för beroendegenskapen."
    - id: validateValueCallback
      type: System.Windows.ValidateValueCallback
      description: "En referens till ett användarskapade återanrop som utför alla anpassade validering av egenskapsvärdet beroende utöver vanliga typverifieringen."
    return:
      type: System.Windows.DependencyPropertyKey
      description: "En beroende Egenskapsnyckel som ska användas för att ange värdet för ett statiskt skrivskyddat fält i din klass, som sedan används för att referera till beroendeegenskapen senare."
  overload: System.Windows.DependencyProperty.RegisterReadOnly*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.DependencyProperty.ToString
  id: ToString
  parent: System.Windows.DependencyProperty
  langs:
  - csharp
  name: ToString()
  nameWithType: DependencyProperty.ToString()
  fullName: System.Windows.DependencyProperty.ToString()
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Returnerar en strängrepresentation av beroendegenskapen."
  remarks: "Returnerar den här implementeringen av <xref:System.Windows.DependencyProperty.Name%2A>egenskapsvärde.</xref:System.Windows.DependencyProperty.Name%2A>"
  syntax:
    content: public override string ToString ();
    parameters: []
    return:
      type: System.String
      description: "Strängrepresentation av beroendegenskapen."
  overload: System.Windows.DependencyProperty.ToString*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.DependencyProperty.UnsetValue
  id: UnsetValue
  parent: System.Windows.DependencyProperty
  langs:
  - csharp
  name: UnsetValue
  nameWithType: DependencyProperty.UnsetValue
  fullName: System.Windows.DependencyProperty.UnsetValue
  type: Field
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Anger ett statiskt värde som används av den [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)] egenskapen system i stället <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> vill ange att egenskapen finns men har inte värdet av egenskapen systemet."
  remarks: "UnsetValue är ett sentinel-värde som används för scenarier där det [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)] egenskapen system kan inte fastställa en begärda <xref:System.Windows.DependencyProperty>värde.</xref:System.Windows.DependencyProperty> UnsetValue används i stället `null`eftersom `null` kan vara ett giltigt värde för egenskap som en giltig (och som används ofta) <xref:System.Windows.PropertyMetadata.DefaultValue%2A>.</xref:System.Windows.PropertyMetadata.DefaultValue%2A>       UnsetValue returneras aldrig utanför <xref:System.Windows.DependencyObject.GetValue%2A?displayProperty=fullName>.</xref:System.Windows.DependencyObject.GetValue%2A?displayProperty=fullName> När du anropar <xref:System.Windows.DependencyObject.GetValue%2A?displayProperty=fullName>på en beroendeegenskap i en <xref:System.Windows.DependencyObject>instans, något av följande gäller: – en beroendeegenskap har ett standardvärde som upprättats i metadata och returneras värdet.</xref:System.Windows.DependencyObject> </xref:System.Windows.DependencyObject.GetValue%2A?displayProperty=fullName> Det här värdet kan komma från <xref:System.Windows.DependencyProperty.DefaultMetadata%2A>.</xref:System.Windows.DependencyProperty.DefaultMetadata%2A>      -Ett annat värde har upprättats av egenskapen systemet och standardvärdet är inte längre är relevanta. Mer information finns i [beroende egenskapen värdet prioritet](~/add/includes/ajax-current-ext-md.md).       Ange en <xref:System.Windows.PropertyMetadata.DefaultValue%2A>av UnsetValue uttryckligen tillåts inte.</xref:System.Windows.PropertyMetadata.DefaultValue%2A>       <xref:System.Windows.DependencyObject.ReadLocalValue%2A?displayProperty=fullName>Returnerar UnsetValue när den begärda egenskapen inte har angetts lokalt.</xref:System.Windows.DependencyObject.ReadLocalValue%2A?displayProperty=fullName>       UnsetValue har en särskild innebörd när det används som returvärde av <xref:System.Windows.CoerceValueCallback>.</xref:System.Windows.CoerceValueCallback> Mer information finns i [beroende egenskapen återanrop och validering](~/add/includes/ajax-current-ext-md.md).       Om du binder till en databas, Observera att UnsetValue inte motsvarar <xref:System.DBNull.Value>, på liknande sätt som i hur <xref:System.DBNull.Value>motsvarar inte ett true null.</xref:System.DBNull.Value> </xref:System.DBNull.Value>"
  syntax:
    content: public static readonly object UnsetValue;
    return:
      type: System.Object
      description: "Som ska läggas till."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.DependencyProperty.ValidateValueCallback
  id: ValidateValueCallback
  parent: System.Windows.DependencyProperty
  langs:
  - csharp
  name: ValidateValueCallback
  nameWithType: DependencyProperty.ValidateValueCallback
  fullName: System.Windows.DependencyProperty.ValidateValueCallback
  type: Property
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Hämtar värdet validering återanropet för beroendegenskapen."
  remarks: "Den här egenskapen innehåller `null` för alla beroendeegenskap med callback registrerade validering.       Verifiera värde återanrop måste fungera i en statisk mening: verifiering som tillämpas via den <xref:System.Windows.ValidateValueCallback>kan inte avgöra om det angivna värdet är giltigt för en viss instans.</xref:System.Windows.ValidateValueCallback> Återanropet kan endast avgöra om alla objekt som har beroendeegenskapen bör eller accepterar inte det angivna värdet som giltig. Om du behöver utföra verifiering som förlitar sig på att känna till värdena för andra beroendeegenskaper på en viss instans, Använd en <xref:System.Windows.CoerceValueCallback>i stället.</xref:System.Windows.CoerceValueCallback> Den <xref:System.Windows.CoerceValueCallback>registreras som en del av beroende egenskapens metadata i stället för direkt i egenskapen Beroendeidentifierare.</xref:System.Windows.CoerceValueCallback> Mer information finns i [beroende egenskapen återanrop och validering](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public System.Windows.ValidateValueCallback ValidateValueCallback { get; }
    return:
      type: System.Windows.ValidateValueCallback
      description: "Värdet validering återanropet för den här beroendeegenskap enligt den <code> validateValueCallback </code> parameter i den ursprungliga beroende egenskapen registreringen."
  overload: System.Windows.DependencyProperty.ValidateValueCallback*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.Windows.DependencyProperty.AddOwner(System.Type)
  parent: System.Windows.DependencyProperty
  isExternal: false
  name: AddOwner(Type)
  nameWithType: DependencyProperty.AddOwner(Type)
  fullName: System.Windows.DependencyProperty.AddOwner(Type)
- uid: System.Windows.DependencyProperty
  parent: System.Windows
  isExternal: false
  name: DependencyProperty
  nameWithType: DependencyProperty
  fullName: System.Windows.DependencyProperty
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Windows.DependencyProperty.AddOwner(System.Type,System.Windows.PropertyMetadata)
  parent: System.Windows.DependencyProperty
  isExternal: false
  name: AddOwner(Type,PropertyMetadata)
  nameWithType: DependencyProperty.AddOwner(Type,PropertyMetadata)
  fullName: System.Windows.DependencyProperty.AddOwner(Type,PropertyMetadata)
- uid: System.Windows.PropertyMetadata
  parent: System.Windows
  isExternal: false
  name: PropertyMetadata
  nameWithType: PropertyMetadata
  fullName: System.Windows.PropertyMetadata
- uid: System.Windows.DependencyProperty.DefaultMetadata
  parent: System.Windows.DependencyProperty
  isExternal: false
  name: DefaultMetadata
  nameWithType: DependencyProperty.DefaultMetadata
  fullName: System.Windows.DependencyProperty.DefaultMetadata
- uid: System.Windows.DependencyProperty.GetHashCode
  parent: System.Windows.DependencyProperty
  isExternal: false
  name: GetHashCode()
  nameWithType: DependencyProperty.GetHashCode()
  fullName: System.Windows.DependencyProperty.GetHashCode()
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Windows.DependencyProperty.GetMetadata(System.Type)
  parent: System.Windows.DependencyProperty
  isExternal: false
  name: GetMetadata(Type)
  nameWithType: DependencyProperty.GetMetadata(Type)
  fullName: System.Windows.DependencyProperty.GetMetadata(Type)
- uid: System.Windows.DependencyProperty.GetMetadata(System.Windows.DependencyObject)
  parent: System.Windows.DependencyProperty
  isExternal: false
  name: GetMetadata(DependencyObject)
  nameWithType: DependencyProperty.GetMetadata(DependencyObject)
  fullName: System.Windows.DependencyProperty.GetMetadata(DependencyObject)
- uid: System.Windows.DependencyObject
  parent: System.Windows
  isExternal: false
  name: DependencyObject
  nameWithType: DependencyObject
  fullName: System.Windows.DependencyObject
- uid: System.Windows.DependencyProperty.GetMetadata(System.Windows.DependencyObjectType)
  parent: System.Windows.DependencyProperty
  isExternal: false
  name: GetMetadata(DependencyObjectType)
  nameWithType: DependencyProperty.GetMetadata(DependencyObjectType)
  fullName: System.Windows.DependencyProperty.GetMetadata(DependencyObjectType)
- uid: System.Windows.DependencyObjectType
  parent: System.Windows
  isExternal: false
  name: DependencyObjectType
  nameWithType: DependencyObjectType
  fullName: System.Windows.DependencyObjectType
- uid: System.Windows.DependencyProperty.GlobalIndex
  parent: System.Windows.DependencyProperty
  isExternal: false
  name: GlobalIndex
  nameWithType: DependencyProperty.GlobalIndex
  fullName: System.Windows.DependencyProperty.GlobalIndex
- uid: System.Windows.DependencyProperty.IsValidType(System.Object)
  parent: System.Windows.DependencyProperty
  isExternal: false
  name: IsValidType(Object)
  nameWithType: DependencyProperty.IsValidType(Object)
  fullName: System.Windows.DependencyProperty.IsValidType(Object)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Windows.DependencyProperty.IsValidValue(System.Object)
  parent: System.Windows.DependencyProperty
  isExternal: false
  name: IsValidValue(Object)
  nameWithType: DependencyProperty.IsValidValue(Object)
  fullName: System.Windows.DependencyProperty.IsValidValue(Object)
- uid: System.Windows.DependencyProperty.Name
  parent: System.Windows.DependencyProperty
  isExternal: false
  name: Name
  nameWithType: DependencyProperty.Name
  fullName: System.Windows.DependencyProperty.Name
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Windows.DependencyProperty.OverrideMetadata(System.Type,System.Windows.PropertyMetadata)
  parent: System.Windows.DependencyProperty
  isExternal: false
  name: OverrideMetadata(Type,PropertyMetadata)
  nameWithType: DependencyProperty.OverrideMetadata(Type,PropertyMetadata)
  fullName: System.Windows.DependencyProperty.OverrideMetadata(Type,PropertyMetadata)
- uid: System.Windows.DependencyProperty.OverrideMetadata(System.Type,System.Windows.PropertyMetadata,System.Windows.DependencyPropertyKey)
  parent: System.Windows.DependencyProperty
  isExternal: false
  name: OverrideMetadata(Type,PropertyMetadata,DependencyPropertyKey)
  nameWithType: DependencyProperty.OverrideMetadata(Type,PropertyMetadata,DependencyPropertyKey)
  fullName: System.Windows.DependencyProperty.OverrideMetadata(Type,PropertyMetadata,DependencyPropertyKey)
- uid: System.Windows.DependencyPropertyKey
  parent: System.Windows
  isExternal: false
  name: DependencyPropertyKey
  nameWithType: DependencyPropertyKey
  fullName: System.Windows.DependencyPropertyKey
- uid: System.Windows.DependencyProperty.OwnerType
  parent: System.Windows.DependencyProperty
  isExternal: false
  name: OwnerType
  nameWithType: DependencyProperty.OwnerType
  fullName: System.Windows.DependencyProperty.OwnerType
- uid: System.Windows.DependencyProperty.PropertyType
  parent: System.Windows.DependencyProperty
  isExternal: false
  name: PropertyType
  nameWithType: DependencyProperty.PropertyType
  fullName: System.Windows.DependencyProperty.PropertyType
- uid: System.Windows.DependencyProperty.ReadOnly
  parent: System.Windows.DependencyProperty
  isExternal: false
  name: ReadOnly
  nameWithType: DependencyProperty.ReadOnly
  fullName: System.Windows.DependencyProperty.ReadOnly
- uid: System.Windows.DependencyProperty.Register(System.String,System.Type,System.Type)
  parent: System.Windows.DependencyProperty
  isExternal: false
  name: Register(String,Type,Type)
  nameWithType: DependencyProperty.Register(String,Type,Type)
  fullName: System.Windows.DependencyProperty.Register(String,Type,Type)
- uid: System.Windows.DependencyProperty.Register(System.String,System.Type,System.Type,System.Windows.PropertyMetadata)
  parent: System.Windows.DependencyProperty
  isExternal: false
  name: Register(String,Type,Type,PropertyMetadata)
  nameWithType: DependencyProperty.Register(String,Type,Type,PropertyMetadata)
  fullName: System.Windows.DependencyProperty.Register(String,Type,Type,PropertyMetadata)
- uid: System.Windows.DependencyProperty.Register(System.String,System.Type,System.Type,System.Windows.PropertyMetadata,System.Windows.ValidateValueCallback)
  parent: System.Windows.DependencyProperty
  isExternal: false
  name: Register(String,Type,Type,PropertyMetadata,ValidateValueCallback)
  nameWithType: DependencyProperty.Register(String,Type,Type,PropertyMetadata,ValidateValueCallback)
  fullName: System.Windows.DependencyProperty.Register(String,Type,Type,PropertyMetadata,ValidateValueCallback)
- uid: System.Windows.ValidateValueCallback
  parent: System.Windows
  isExternal: false
  name: ValidateValueCallback
  nameWithType: ValidateValueCallback
  fullName: System.Windows.ValidateValueCallback
- uid: System.Windows.DependencyProperty.RegisterAttached(System.String,System.Type,System.Type)
  parent: System.Windows.DependencyProperty
  isExternal: false
  name: RegisterAttached(String,Type,Type)
  nameWithType: DependencyProperty.RegisterAttached(String,Type,Type)
  fullName: System.Windows.DependencyProperty.RegisterAttached(String,Type,Type)
- uid: System.Windows.DependencyProperty.RegisterAttached(System.String,System.Type,System.Type,System.Windows.PropertyMetadata)
  parent: System.Windows.DependencyProperty
  isExternal: false
  name: RegisterAttached(String,Type,Type,PropertyMetadata)
  nameWithType: DependencyProperty.RegisterAttached(String,Type,Type,PropertyMetadata)
  fullName: System.Windows.DependencyProperty.RegisterAttached(String,Type,Type,PropertyMetadata)
- uid: System.Windows.DependencyProperty.RegisterAttached(System.String,System.Type,System.Type,System.Windows.PropertyMetadata,System.Windows.ValidateValueCallback)
  parent: System.Windows.DependencyProperty
  isExternal: false
  name: RegisterAttached(String,Type,Type,PropertyMetadata,ValidateValueCallback)
  nameWithType: DependencyProperty.RegisterAttached(String,Type,Type,PropertyMetadata,ValidateValueCallback)
  fullName: System.Windows.DependencyProperty.RegisterAttached(String,Type,Type,PropertyMetadata,ValidateValueCallback)
- uid: System.Windows.DependencyProperty.RegisterAttachedReadOnly(System.String,System.Type,System.Type,System.Windows.PropertyMetadata)
  parent: System.Windows.DependencyProperty
  isExternal: false
  name: RegisterAttachedReadOnly(String,Type,Type,PropertyMetadata)
  nameWithType: DependencyProperty.RegisterAttachedReadOnly(String,Type,Type,PropertyMetadata)
  fullName: System.Windows.DependencyProperty.RegisterAttachedReadOnly(String,Type,Type,PropertyMetadata)
- uid: System.Windows.DependencyProperty.RegisterAttachedReadOnly(System.String,System.Type,System.Type,System.Windows.PropertyMetadata,System.Windows.ValidateValueCallback)
  parent: System.Windows.DependencyProperty
  isExternal: false
  name: RegisterAttachedReadOnly(String,Type,Type,PropertyMetadata,ValidateValueCallback)
  nameWithType: DependencyProperty.RegisterAttachedReadOnly(String,Type,Type,PropertyMetadata,ValidateValueCallback)
  fullName: System.Windows.DependencyProperty.RegisterAttachedReadOnly(String,Type,Type,PropertyMetadata,ValidateValueCallback)
- uid: System.Windows.DependencyProperty.RegisterReadOnly(System.String,System.Type,System.Type,System.Windows.PropertyMetadata)
  parent: System.Windows.DependencyProperty
  isExternal: false
  name: RegisterReadOnly(String,Type,Type,PropertyMetadata)
  nameWithType: DependencyProperty.RegisterReadOnly(String,Type,Type,PropertyMetadata)
  fullName: System.Windows.DependencyProperty.RegisterReadOnly(String,Type,Type,PropertyMetadata)
- uid: System.Windows.DependencyProperty.RegisterReadOnly(System.String,System.Type,System.Type,System.Windows.PropertyMetadata,System.Windows.ValidateValueCallback)
  parent: System.Windows.DependencyProperty
  isExternal: false
  name: RegisterReadOnly(String,Type,Type,PropertyMetadata,ValidateValueCallback)
  nameWithType: DependencyProperty.RegisterReadOnly(String,Type,Type,PropertyMetadata,ValidateValueCallback)
  fullName: System.Windows.DependencyProperty.RegisterReadOnly(String,Type,Type,PropertyMetadata,ValidateValueCallback)
- uid: System.Windows.DependencyProperty.ToString
  parent: System.Windows.DependencyProperty
  isExternal: false
  name: ToString()
  nameWithType: DependencyProperty.ToString()
  fullName: System.Windows.DependencyProperty.ToString()
- uid: System.Windows.DependencyProperty.UnsetValue
  parent: System.Windows.DependencyProperty
  isExternal: false
  name: UnsetValue
  nameWithType: DependencyProperty.UnsetValue
  fullName: System.Windows.DependencyProperty.UnsetValue
- uid: System.Windows.DependencyProperty.ValidateValueCallback
  parent: System.Windows.DependencyProperty
  isExternal: false
  name: ValidateValueCallback
  nameWithType: DependencyProperty.ValidateValueCallback
  fullName: System.Windows.DependencyProperty.ValidateValueCallback
- uid: System.Windows.DependencyProperty.AddOwner*
  parent: System.Windows.DependencyProperty
  isExternal: false
  name: AddOwner
  nameWithType: DependencyProperty.AddOwner
- uid: System.Windows.DependencyProperty.DefaultMetadata*
  parent: System.Windows.DependencyProperty
  isExternal: false
  name: DefaultMetadata
  nameWithType: DependencyProperty.DefaultMetadata
- uid: System.Windows.DependencyProperty.GetHashCode*
  parent: System.Windows.DependencyProperty
  isExternal: false
  name: GetHashCode
  nameWithType: DependencyProperty.GetHashCode
- uid: System.Windows.DependencyProperty.GetMetadata*
  parent: System.Windows.DependencyProperty
  isExternal: false
  name: GetMetadata
  nameWithType: DependencyProperty.GetMetadata
- uid: System.Windows.DependencyProperty.GlobalIndex*
  parent: System.Windows.DependencyProperty
  isExternal: false
  name: GlobalIndex
  nameWithType: DependencyProperty.GlobalIndex
- uid: System.Windows.DependencyProperty.IsValidType*
  parent: System.Windows.DependencyProperty
  isExternal: false
  name: IsValidType
  nameWithType: DependencyProperty.IsValidType
- uid: System.Windows.DependencyProperty.IsValidValue*
  parent: System.Windows.DependencyProperty
  isExternal: false
  name: IsValidValue
  nameWithType: DependencyProperty.IsValidValue
- uid: System.Windows.DependencyProperty.Name*
  parent: System.Windows.DependencyProperty
  isExternal: false
  name: Name
  nameWithType: DependencyProperty.Name
- uid: System.Windows.DependencyProperty.OverrideMetadata*
  parent: System.Windows.DependencyProperty
  isExternal: false
  name: OverrideMetadata
  nameWithType: DependencyProperty.OverrideMetadata
- uid: System.Windows.DependencyProperty.OwnerType*
  parent: System.Windows.DependencyProperty
  isExternal: false
  name: OwnerType
  nameWithType: DependencyProperty.OwnerType
- uid: System.Windows.DependencyProperty.PropertyType*
  parent: System.Windows.DependencyProperty
  isExternal: false
  name: PropertyType
  nameWithType: DependencyProperty.PropertyType
- uid: System.Windows.DependencyProperty.ReadOnly*
  parent: System.Windows.DependencyProperty
  isExternal: false
  name: ReadOnly
  nameWithType: DependencyProperty.ReadOnly
- uid: System.Windows.DependencyProperty.Register*
  parent: System.Windows.DependencyProperty
  isExternal: false
  name: Register
  nameWithType: DependencyProperty.Register
- uid: System.Windows.DependencyProperty.RegisterAttached*
  parent: System.Windows.DependencyProperty
  isExternal: false
  name: RegisterAttached
  nameWithType: DependencyProperty.RegisterAttached
- uid: System.Windows.DependencyProperty.RegisterAttachedReadOnly*
  parent: System.Windows.DependencyProperty
  isExternal: false
  name: RegisterAttachedReadOnly
  nameWithType: DependencyProperty.RegisterAttachedReadOnly
- uid: System.Windows.DependencyProperty.RegisterReadOnly*
  parent: System.Windows.DependencyProperty
  isExternal: false
  name: RegisterReadOnly
  nameWithType: DependencyProperty.RegisterReadOnly
- uid: System.Windows.DependencyProperty.ToString*
  parent: System.Windows.DependencyProperty
  isExternal: false
  name: ToString
  nameWithType: DependencyProperty.ToString
- uid: System.Windows.DependencyProperty.ValidateValueCallback*
  parent: System.Windows.DependencyProperty
  isExternal: false
  name: ValidateValueCallback
  nameWithType: DependencyProperty.ValidateValueCallback
