### YamlMime:ManagedReference
items:
- uid: System.Runtime.Remoting.Messaging.AsyncResult
  id: AsyncResult
  children:
  - System.Runtime.Remoting.Messaging.AsyncResult.AsyncDelegate
  - System.Runtime.Remoting.Messaging.AsyncResult.AsyncProcessMessage(System.Runtime.Remoting.Messaging.IMessage,System.Runtime.Remoting.Messaging.IMessageSink)
  - System.Runtime.Remoting.Messaging.AsyncResult.AsyncState
  - System.Runtime.Remoting.Messaging.AsyncResult.AsyncWaitHandle
  - System.Runtime.Remoting.Messaging.AsyncResult.CompletedSynchronously
  - System.Runtime.Remoting.Messaging.AsyncResult.EndInvokeCalled
  - System.Runtime.Remoting.Messaging.AsyncResult.GetReplyMessage
  - System.Runtime.Remoting.Messaging.AsyncResult.IsCompleted
  - System.Runtime.Remoting.Messaging.AsyncResult.NextSink
  - System.Runtime.Remoting.Messaging.AsyncResult.SetMessageCtrl(System.Runtime.Remoting.Messaging.IMessageCtrl)
  - System.Runtime.Remoting.Messaging.AsyncResult.SyncProcessMessage(System.Runtime.Remoting.Messaging.IMessage)
  langs:
  - csharp
  name: AsyncResult
  nameWithType: AsyncResult
  fullName: System.Runtime.Remoting.Messaging.AsyncResult
  type: Class
  summary: "Kapslar in resultatet av en asynkron åtgärd på en delegat."
  remarks: "Klassen AsyncResult används tillsammans med asynkrona metodanrop gjordes med delegater. Den <xref:System.IAsyncResult>returneras från ombudet `BeginInvoke` metod kan omvandlas till ett AsyncResult.</xref:System.IAsyncResult> AsyncResult har den <xref:System.Runtime.Remoting.Messaging.AsyncResult.AsyncDelegate%2A>egenskapen som innehåller delegaten objekt på vilket asynkront anrop anropades.</xref:System.Runtime.Remoting.Messaging.AsyncResult.AsyncDelegate%2A>       Mer information om `BeginInvoke` och asynkrona anrop med ombud, se [asynkron programmering med delegater](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following example demonstrates how to use the <xref:System.Runtime.Remoting.Messaging.AsyncResult.AsyncWaitHandle%2A> property to get a <xref:System.Threading.WaitHandle>, and how to wait for an asynchronous call on a delegate. The <xref:System.Threading.WaitHandle> is signaled when the asynchronous call completes, and you can wait for it by calling the <xref:System.Threading.WaitHandle.WaitOne%2A> method.  \n  \n The example consists of two classes, the class that contains the method which is called asynchronously, and the class that contains the `Main` method that makes the call.  \n  \n For more information and more examples of calling methods asynchronously by using delegates, see [Calling Synchronous Methods Asynchronously](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-vb[AsyncDelegateExamples#1](~/add/codesnippet/visualbasic/t-system.runtime.remotin_18_1.vb)]\n [!code-cs[AsyncDelegateExamples#1](~/add/codesnippet/csharp/t-system.runtime.remotin_18_1.cs)]\n [!code-cpp[AsyncDelegateExamples#1](~/add/codesnippet/cpp/t-system.runtime.remotin_18_1.cpp)]  \n[!code-vb[AsyncDelegateExamples#3](~/add/codesnippet/visualbasic/t-system.runtime.remotin_18_2.vb)]\n[!code-cpp[AsyncDelegateExamples#3](~/add/codesnippet/cpp/t-system.runtime.remotin_18_2.cpp)]\n[!code-cs[AsyncDelegateExamples#3](~/add/codesnippet/csharp/t-system.runtime.remotin_18_2.cs)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public class AsyncResult : IAsyncResult, System.Runtime.Remoting.Messaging.IMessageSink
  inheritance:
  - System.Object
  implements:
  - System.IAsyncResult
  - System.Runtime.Remoting.Messaging.IMessageSink
  inheritedMembers: []
  platform:
  - net462
- uid: System.Runtime.Remoting.Messaging.AsyncResult.AsyncDelegate
  id: AsyncDelegate
  parent: System.Runtime.Remoting.Messaging.AsyncResult
  langs:
  - csharp
  name: AsyncDelegate
  nameWithType: AsyncResult.AsyncDelegate
  fullName: System.Runtime.Remoting.Messaging.AsyncResult.AsyncDelegate
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Runtime.Remoting.Messaging
  summary: "Hämtar objektet ombud som anropades asynkront anrop."
  remarks: "Egenskapen AsyncDelegate kan omvandlas till den faktiska klassen på det användardefinierade ombudet.       Om exempelvis det ombud som användes för att göra asynkrona anrop är av typen `MyDelegate`, det ombud som returneras av den här egenskapen måste omvandlas till `MyDelegate`. Motringningsmetoden kan sedan anropa ombudet `EndInvoke` metoden med rätt signatur för att få resultaten för asynkrona metodanrop."
  example:
  - "The following code example demonstrates how to use the AsyncDelegate property to get the delegate that was used to make the asynchronous call, in order to call `EndInvoke`. The example casts the <xref:System.IAsyncResult>, which is the only parameter of the callback method, to an <xref:System.Runtime.Remoting.Messaging.AsyncResult> object.  \n  \n The example consists of two classes, the class that contains the method which is called asynchronously, and the class that contains the `Main` method that makes the call.  \n  \n For more information on the way this callback example works, and more examples of calling methods asynchronously by using delegates, see [Calling Synchronous Methods Asynchronously](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-vb[AsyncDelegateExamples#1](~/add/codesnippet/visualbasic/p-system.runtime.remotin_95_1.vb)]\n [!code-cs[AsyncDelegateExamples#1](~/add/codesnippet/csharp/p-system.runtime.remotin_95_1.cs)]\n [!code-cpp[AsyncDelegateExamples#1](~/add/codesnippet/cpp/p-system.runtime.remotin_95_1.cpp)]  \n[!code-cs[AsyncDelegateExamples#5](~/add/codesnippet/csharp/p-system.runtime.remotin_95_2.cs)]\n[!code-cpp[AsyncDelegateExamples#5](~/add/codesnippet/cpp/p-system.runtime.remotin_95_2.cpp)]\n[!code-vb[AsyncDelegateExamples#5](~/add/codesnippet/visualbasic/p-system.runtime.remotin_95_2.vb)]"
  syntax:
    content: public virtual object AsyncDelegate { get; }
    return:
      type: System.Object
      description: "Delegera objektet som anropas asynkront anrop."
  overload: System.Runtime.Remoting.Messaging.AsyncResult.AsyncDelegate*
  exceptions: []
  platform:
  - net462
- uid: System.Runtime.Remoting.Messaging.AsyncResult.AsyncProcessMessage(System.Runtime.Remoting.Messaging.IMessage,System.Runtime.Remoting.Messaging.IMessageSink)
  id: AsyncProcessMessage(System.Runtime.Remoting.Messaging.IMessage,System.Runtime.Remoting.Messaging.IMessageSink)
  parent: System.Runtime.Remoting.Messaging.AsyncResult
  langs:
  - csharp
  name: AsyncProcessMessage(IMessage,IMessageSink)
  nameWithType: AsyncResult.AsyncProcessMessage(IMessage,IMessageSink)
  fullName: System.Runtime.Remoting.Messaging.AsyncResult.AsyncProcessMessage(IMessage,IMessageSink)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Runtime.Remoting.Messaging
  summary: "Implementerar den <xref href=&quot;System.Runtime.Remoting.Messaging.IMessageSink&quot;> </xref> gränssnitt."
  remarks: "AsyncProcessMessage-metoden i <xref:System.Runtime.Remoting.Messaging.IMessageSink>gränssnittet är inte relevant för <xref:System.Runtime.Remoting.Messaging.AsyncResult>klass.</xref:System.Runtime.Remoting.Messaging.AsyncResult> </xref:System.Runtime.Remoting.Messaging.IMessageSink> Implementering av <xref:System.Runtime.Remoting.Messaging.AsyncResult>utlöser <xref:System.NotSupportedException>.</xref:System.NotSupportedException> </xref:System.Runtime.Remoting.Messaging.AsyncResult> Hämta i stället en <xref:System.Runtime.Remoting.Messaging.AsyncResult>genom att omvandla den <xref:System.IAsyncResult>gränssnitt som returnerades av ett asynkront anrop gjordes med en delegat.</xref:System.IAsyncResult> </xref:System.Runtime.Remoting.Messaging.AsyncResult>"
  syntax:
    content: public virtual System.Runtime.Remoting.Messaging.IMessageCtrl AsyncProcessMessage (System.Runtime.Remoting.Messaging.IMessage msg, System.Runtime.Remoting.Messaging.IMessageSink replySink);
    parameters:
    - id: msg
      type: System.Runtime.Remoting.Messaging.IMessage
      description: "Begäran <xref href=&quot;System.Runtime.Remoting.Messaging.IMessage&quot;> </xref> gränssnitt."
    - id: replySink
      type: System.Runtime.Remoting.Messaging.IMessageSink
      description: "Svaret <xref href=&quot;System.Runtime.Remoting.Messaging.IMessageSink&quot;> </xref> gränssnitt."
    return:
      type: System.Runtime.Remoting.Messaging.IMessageCtrl
      description: "Inget värde returneras."
  overload: System.Runtime.Remoting.Messaging.AsyncResult.AsyncProcessMessage*
  exceptions: []
  platform:
  - net462
- uid: System.Runtime.Remoting.Messaging.AsyncResult.AsyncState
  id: AsyncState
  parent: System.Runtime.Remoting.Messaging.AsyncResult
  langs:
  - csharp
  name: AsyncState
  nameWithType: AsyncResult.AsyncState
  fullName: System.Runtime.Remoting.Messaging.AsyncResult.AsyncState
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Runtime.Remoting.Messaging
  summary: "Hämtar det angivna objektet som den sista parametern för en <xref uid=&quot;langword_csharp_BeginInvoke&quot; name=&quot;BeginInvoke&quot; href=&quot;&quot;> </xref> metodanrop."
  remarks: "Mer information om den `BeginInvoke` -metoden finns [asynkron programmering med delegater](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following code example demonstrates how the AsyncState property is used to pass information to a callback method. The last parameter of the `BeginInvoke` method call is a format string, which the callback method uses to format an output message.  \n  \n The example consists of two classes, the class that contains the method which is called asynchronously, and the class that contains the `Main` method that makes the call.  \n  \n For more information on the way this callback example works, and more examples of calling methods asynchronously by using delegates, see [Calling Synchronous Methods Asynchronously](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-vb[AsyncDelegateExamples#1](~/add/codesnippet/visualbasic/p-system.runtime.remotin_83_1.vb)]\n [!code-cs[AsyncDelegateExamples#1](~/add/codesnippet/csharp/p-system.runtime.remotin_83_1.cs)]\n [!code-cpp[AsyncDelegateExamples#1](~/add/codesnippet/cpp/p-system.runtime.remotin_83_1.cpp)]  \n[!code-cs[AsyncDelegateExamples#5](~/add/codesnippet/csharp/p-system.runtime.remotin_83_2.cs)]\n[!code-cpp[AsyncDelegateExamples#5](~/add/codesnippet/cpp/p-system.runtime.remotin_83_2.cpp)]\n[!code-vb[AsyncDelegateExamples#5](~/add/codesnippet/visualbasic/p-system.runtime.remotin_83_2.vb)]"
  syntax:
    content: public virtual object AsyncState { get; }
    return:
      type: System.Object
      description: "Det angivna objektet som den sista parametern för en <xref uid=&quot;langword_csharp_BeginInvoke&quot; name=&quot;BeginInvoke&quot; href=&quot;&quot;> </xref> metodanrop."
  overload: System.Runtime.Remoting.Messaging.AsyncResult.AsyncState*
  exceptions: []
  platform:
  - net462
- uid: System.Runtime.Remoting.Messaging.AsyncResult.AsyncWaitHandle
  id: AsyncWaitHandle
  parent: System.Runtime.Remoting.Messaging.AsyncResult
  langs:
  - csharp
  name: AsyncWaitHandle
  nameWithType: AsyncResult.AsyncWaitHandle
  fullName: System.Runtime.Remoting.Messaging.AsyncResult.AsyncWaitHandle
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Runtime.Remoting.Messaging
  summary: "Hämtar en <xref:System.Threading.WaitHandle>som kapslar in Win32-Synkroniseringsreferenserna och tillåter att genomföra olika scheman för synkronisering.</xref:System.Threading.WaitHandle>"
  remarks: "Den <xref:System.Threading.WaitHandle>som returneras av den här metoden signaleras automatiskt när den asynkrona åtgärden har slutförts.</xref:System.Threading.WaitHandle>       Vänta referensen inte stängs automatiskt när du anropar `EndInvoke` på det ombud som användes för att göra den asynkrona metodanrop. Om du släpper alla referenser till vänta referensen frigörs systemresurser när skräpinsamlingen återtar vänta referensen. För att frigöra systemresurser som du är klar med referensen vänta, anropa den <xref:System.Threading.WaitHandle.Close%2A?displayProperty=fullName>metoden.</xref:System.Threading.WaitHandle.Close%2A?displayProperty=fullName> Skräpinsamling fungerar mer effektivt när tillgänglig objekt uttryckligen stängts eller tagits bort.      > [!CAUTION] > I <xref:System.Threading.WaitHandle>i AsyncWaitHandle egenskapen kan användas för att blockera den aktuella tråden tills asynkront anrop har slutförts.</xref:System.Threading.WaitHandle> Men den <xref:System.Threading.WaitHandle>ignoreras den <xref:System.AsyncCallback>, om du har angett under den `BeginInvoke` anropa.</xref:System.AsyncCallback> </xref:System.Threading.WaitHandle> Därför en situation kan inträffa när programmet stängs av innan den <xref:System.AsyncCallback>har avslutats, även om en <xref:System.Threading.WaitHandle>används för att blockera all relevant asynkront anrop.</xref:System.Threading.WaitHandle> </xref:System.AsyncCallback> Ett exempel på en sådan ser i exemplet på <xref:System.Runtime.Remoting.Messaging.AsyncResult>klassen och ta bort den <xref:System.Threading.Thread.Sleep%2A?displayProperty=fullName>instruktionen.</xref:System.Threading.Thread.Sleep%2A?displayProperty=fullName> </xref:System.Runtime.Remoting.Messaging.AsyncResult>"
  example:
  - "The following example demonstrates how to use the AsyncWaitHandle property to get a <xref:System.Threading.WaitHandle>, and how to wait for an asynchronous call on a delegate. The <xref:System.Threading.WaitHandle> is signaled when the asynchronous call completes, and you can wait for it by calling the <xref:System.Threading.WaitHandle.WaitOne%2A> method.  \n  \n The example consists of two classes, the class that contains the method which is called asynchronously, and the class that contains the `Main` method that makes the call.  \n  \n For more information and more examples of calling methods asynchronously by using delegates, see [Calling Synchronous Methods Asynchronously](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-vb[AsyncDelegateExamples#1](~/add/codesnippet/visualbasic/p-system.runtime.remotin_47_1.vb)]\n [!code-cs[AsyncDelegateExamples#1](~/add/codesnippet/csharp/p-system.runtime.remotin_47_1.cs)]\n [!code-cpp[AsyncDelegateExamples#1](~/add/codesnippet/cpp/p-system.runtime.remotin_47_1.cpp)]  \n[!code-vb[AsyncDelegateExamples#3](~/add/codesnippet/visualbasic/p-system.runtime.remotin_47_2.vb)]\n[!code-cpp[AsyncDelegateExamples#3](~/add/codesnippet/cpp/p-system.runtime.remotin_47_2.cpp)]\n[!code-cs[AsyncDelegateExamples#3](~/add/codesnippet/csharp/p-system.runtime.remotin_47_2.cs)]"
  syntax:
    content: public virtual System.Threading.WaitHandle AsyncWaitHandle { get; }
    return:
      type: System.Threading.WaitHandle
      description: "En <xref:System.Threading.WaitHandle>som kapslar in Win32-Synkroniseringsreferenserna och tillåter att genomföra olika scheman för synkronisering.</xref:System.Threading.WaitHandle>"
  overload: System.Runtime.Remoting.Messaging.AsyncResult.AsyncWaitHandle*
  exceptions: []
  platform:
  - net462
- uid: System.Runtime.Remoting.Messaging.AsyncResult.CompletedSynchronously
  id: CompletedSynchronously
  parent: System.Runtime.Remoting.Messaging.AsyncResult
  langs:
  - csharp
  name: CompletedSynchronously
  nameWithType: AsyncResult.CompletedSynchronously
  fullName: System.Runtime.Remoting.Messaging.AsyncResult.CompletedSynchronously
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Runtime.Remoting.Messaging
  summary: "Hämtar ett värde som anger om den <xref uid=&quot;langword_csharp_BeginInvoke&quot; name=&quot;BeginInvoke&quot; href=&quot;&quot;> </xref> anropet slutfördes synkront."
  remarks: "Om det upptäcks som den `BeginInvoke` anropet slutfördes synkront i den <xref:System.AsyncCallback>ombud, är det troligt att den tråd som kallas BeginInvoke är den aktuella tråden.</xref:System.AsyncCallback> De flesta leverantörer av den <xref:System.IAsyncResult>gränssnittet kommer inte att använda funktionen och returnerar ett standardvärde `false`.</xref:System.IAsyncResult>       Aktuella implementationen av CompletedSynchronously alltid returnerar `false`."
  syntax:
    content: public virtual bool CompletedSynchronously { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Om den <xref uid=&quot;langword_csharp_BeginInvoke&quot; name=&quot;BeginInvoke&quot; href=&quot;&quot;> </xref> anropet slutfördes synkront, annars <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Runtime.Remoting.Messaging.AsyncResult.CompletedSynchronously*
  exceptions: []
  platform:
  - net462
- uid: System.Runtime.Remoting.Messaging.AsyncResult.EndInvokeCalled
  id: EndInvokeCalled
  parent: System.Runtime.Remoting.Messaging.AsyncResult
  langs:
  - csharp
  name: EndInvokeCalled
  nameWithType: AsyncResult.EndInvokeCalled
  fullName: System.Runtime.Remoting.Messaging.AsyncResult.EndInvokeCalled
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Runtime.Remoting.Messaging
  summary: "Hämtar eller anger ett värde som anger om <xref uid=&quot;langword_csharp_EndInvoke&quot; name=&quot;EndInvoke&quot; href=&quot;&quot;> </xref> har anropats för aktuellt <xref href=&quot;System.Runtime.Remoting.Messaging.AsyncResult&quot;> </xref>."
  syntax:
    content: public bool EndInvokeCalled { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Om <xref uid=&quot;langword_csharp_EndInvoke&quot; name=&quot;EndInvoke&quot; href=&quot;&quot;> </xref> har anropats för aktuellt <xref href=&quot;System.Runtime.Remoting.Messaging.AsyncResult&quot;> </xref>, annars <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Runtime.Remoting.Messaging.AsyncResult.EndInvokeCalled*
  exceptions: []
  platform:
  - net462
- uid: System.Runtime.Remoting.Messaging.AsyncResult.GetReplyMessage
  id: GetReplyMessage
  parent: System.Runtime.Remoting.Messaging.AsyncResult
  langs:
  - csharp
  name: GetReplyMessage()
  nameWithType: AsyncResult.GetReplyMessage()
  fullName: System.Runtime.Remoting.Messaging.AsyncResult.GetReplyMessage()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Runtime.Remoting.Messaging
  summary: "Hämtar svarsmeddelandet för asynkront anrop."
  remarks: "GetReplyMessage-metoden kan returnera ett objekt efter den <xref:System.Runtime.Remoting.Messaging.AsyncResult.SyncProcessMessage%2A>metoden anropas.</xref:System.Runtime.Remoting.Messaging.AsyncResult.SyncProcessMessage%2A> <xref:System.Runtime.Remoting.Messaging.IMessage>Returnera värdet kan typkonverteras till <xref:System.Runtime.Remoting.Messaging.IMethodReturnMessage>.</xref:System.Runtime.Remoting.Messaging.IMethodReturnMessage> </xref:System.Runtime.Remoting.Messaging.IMessage>       Du behöver inte anropar någon av dessa metoder direkt. De är avsedd för användning av fjärrinfrastrukturen av .NET Framework."
  syntax:
    content: public virtual System.Runtime.Remoting.Messaging.IMessage GetReplyMessage ();
    parameters: []
    return:
      type: System.Runtime.Remoting.Messaging.IMessage
      description: "Ett fjärrkommunikation meddelande som ska representera ett svar på ett metodanrop i ett fjärrobjekt."
  overload: System.Runtime.Remoting.Messaging.AsyncResult.GetReplyMessage*
  exceptions: []
  platform:
  - net462
- uid: System.Runtime.Remoting.Messaging.AsyncResult.IsCompleted
  id: IsCompleted
  parent: System.Runtime.Remoting.Messaging.AsyncResult
  langs:
  - csharp
  name: IsCompleted
  nameWithType: AsyncResult.IsCompleted
  fullName: System.Runtime.Remoting.Messaging.AsyncResult.IsCompleted
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Runtime.Remoting.Messaging
  summary: "Hämtar ett värde som anger om servern har slutfört anropet."
  remarks: "Servern måste inte använda några klienten resurser utanför den överenskomna vid delning semantik när det anges egenskapen IsCompleted till `true`. Därför är det säkra för klienten att ta bort resurser när egenskapen IsCompleted returnerar `true`."
  example:
  - "The following example shows how to use the <xref:System.IAsyncResult.IsCompleted%2A> property of the <xref:System.Runtime.Remoting.Messaging.AsyncResult> returned by `BeginInvoke` to discover when an asynchronous call completes. You might do this when making the asynchronous call from a thread that services the user interface. Polling for completion allows the calling thread to continue executing while the asynchronous call executes on a <xref:System.Threading.ThreadPool> thread.  \n  \n The example consists of two classes, the class that contains the method which is called asynchronously, and the class that contains the `Main` method that makes the call.  \n  \n For more information and more examples of calling methods asynchronously by using delegates, see [Calling Synchronous Methods Asynchronously](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-vb[AsyncDelegateExamples#1](~/add/codesnippet/visualbasic/p-system.runtime.remotin_39_1.vb)]\n [!code-cs[AsyncDelegateExamples#1](~/add/codesnippet/csharp/p-system.runtime.remotin_39_1.cs)]\n [!code-cpp[AsyncDelegateExamples#1](~/add/codesnippet/cpp/p-system.runtime.remotin_39_1.cpp)]  \n[!code-cpp[AsyncDelegateExamples#4](~/add/codesnippet/cpp/p-system.runtime.remotin_39_2.cpp)]\n[!code-cs[AsyncDelegateExamples#4](~/add/codesnippet/csharp/p-system.runtime.remotin_39_2.cs)]\n[!code-vb[AsyncDelegateExamples#4](~/add/codesnippet/visualbasic/p-system.runtime.remotin_39_2.vb)]"
  syntax:
    content: public virtual bool IsCompleted { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>När servern har slutförts anropet; Annars <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Runtime.Remoting.Messaging.AsyncResult.IsCompleted*
  exceptions: []
  platform:
  - net462
- uid: System.Runtime.Remoting.Messaging.AsyncResult.NextSink
  id: NextSink
  parent: System.Runtime.Remoting.Messaging.AsyncResult
  langs:
  - csharp
  name: NextSink
  nameWithType: AsyncResult.NextSink
  fullName: System.Runtime.Remoting.Messaging.AsyncResult.NextSink
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Runtime.Remoting.Messaging
  summary: "Hämtar nästa meddelande sink i kedjan mottagare."
  remarks: "Returnerar den aktuella implementationen av NextSink `null`."
  syntax:
    content: public System.Runtime.Remoting.Messaging.IMessageSink NextSink { get; }
    return:
      type: System.Runtime.Remoting.Messaging.IMessageSink
      description: "En <xref href=&quot;System.Runtime.Remoting.Messaging.IMessageSink&quot;> </xref> gränssnitt som representerar nästa meddelande sink i kedjan mottagare."
  overload: System.Runtime.Remoting.Messaging.AsyncResult.NextSink*
  exceptions: []
  platform:
  - net462
- uid: System.Runtime.Remoting.Messaging.AsyncResult.SetMessageCtrl(System.Runtime.Remoting.Messaging.IMessageCtrl)
  id: SetMessageCtrl(System.Runtime.Remoting.Messaging.IMessageCtrl)
  parent: System.Runtime.Remoting.Messaging.AsyncResult
  langs:
  - csharp
  name: SetMessageCtrl(IMessageCtrl)
  nameWithType: AsyncResult.SetMessageCtrl(IMessageCtrl)
  fullName: System.Runtime.Remoting.Messaging.AsyncResult.SetMessageCtrl(IMessageCtrl)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Runtime.Remoting.Messaging
  summary: "Anger en <xref href=&quot;System.Runtime.Remoting.Messaging.IMessageCtrl&quot;> </xref> för det aktuella fjärrmetod-anropet som gör det möjligt att styra asynkrona meddelanden när de har skickats."
  remarks: "Du behöver inte att anropa metoden SetMessageCtrl."
  syntax:
    content: public virtual void SetMessageCtrl (System.Runtime.Remoting.Messaging.IMessageCtrl mc);
    parameters:
    - id: mc
      type: System.Runtime.Remoting.Messaging.IMessageCtrl
      description: "Den <xref href=&quot;System.Runtime.Remoting.Messaging.IMessageCtrl&quot;> </xref> för det aktuella remote metodanropet."
  overload: System.Runtime.Remoting.Messaging.AsyncResult.SetMessageCtrl*
  exceptions: []
  platform:
  - net462
- uid: System.Runtime.Remoting.Messaging.AsyncResult.SyncProcessMessage(System.Runtime.Remoting.Messaging.IMessage)
  id: SyncProcessMessage(System.Runtime.Remoting.Messaging.IMessage)
  parent: System.Runtime.Remoting.Messaging.AsyncResult
  langs:
  - csharp
  name: SyncProcessMessage(IMessage)
  nameWithType: AsyncResult.SyncProcessMessage(IMessage)
  fullName: System.Runtime.Remoting.Messaging.AsyncResult.SyncProcessMessage(IMessage)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Runtime.Remoting.Messaging
  summary: "Synkront bearbetar ett svarsmeddelande som returneras av ett metodanrop i ett fjärrobjekt."
  remarks: "Metoden SyncProcessMessage implementerar den <xref:System.Runtime.Remoting.Messaging.IMessageSink>gränssnitt.</xref:System.Runtime.Remoting.Messaging.IMessageSink> Du behöver inte anropa den här metoden direkt. Den är avsedd för användning av fjärrinfrastrukturen av .NET Framework.       SyncProcessMessage anropar koden konsumenten <xref:System.AsyncCallback>Delegera.</xref:System.AsyncCallback> Den anger också den <xref:System.Runtime.Remoting.Messaging.IMethodReturnMessage>instans som returneras av den <xref:System.Runtime.Remoting.Messaging.AsyncResult.GetReplyMessage%2A>metoden.</xref:System.Runtime.Remoting.Messaging.AsyncResult.GetReplyMessage%2A> </xref:System.Runtime.Remoting.Messaging.IMethodReturnMessage> Om den `msg` parametern är av typen <xref:System.Runtime.Remoting.Messaging.IMethodReturnMessage>samma objekt returneras av <xref:System.Runtime.Remoting.Messaging.AsyncResult.GetReplyMessage%2A>.</xref:System.Runtime.Remoting.Messaging.AsyncResult.GetReplyMessage%2A> </xref:System.Runtime.Remoting.Messaging.IMethodReturnMessage> I annat fall returneras ett reply-meddelande som innehåller ett undantag för fjärrkommunikation.       SyncProcessMessage ändrar också värdet som returneras av den <xref:System.Runtime.Remoting.Messaging.AsyncResult.IsCompleted%2A>egenskapen.</xref:System.Runtime.Remoting.Messaging.AsyncResult.IsCompleted%2A>"
  syntax:
    content: public virtual System.Runtime.Remoting.Messaging.IMessage SyncProcessMessage (System.Runtime.Remoting.Messaging.IMessage msg);
    parameters:
    - id: msg
      type: System.Runtime.Remoting.Messaging.IMessage
      description: "Ett svarsmeddelande till ett metodanrop i ett fjärrobjekt."
    return:
      type: System.Runtime.Remoting.Messaging.IMessage
      description: "Returns <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  overload: System.Runtime.Remoting.Messaging.AsyncResult.SyncProcessMessage*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Runtime.Remoting.Messaging.AsyncResult.AsyncDelegate
  parent: System.Runtime.Remoting.Messaging.AsyncResult
  isExternal: false
  name: AsyncDelegate
  nameWithType: AsyncResult.AsyncDelegate
  fullName: System.Runtime.Remoting.Messaging.AsyncResult.AsyncDelegate
- uid: System.Runtime.Remoting.Messaging.AsyncResult.AsyncProcessMessage(System.Runtime.Remoting.Messaging.IMessage,System.Runtime.Remoting.Messaging.IMessageSink)
  parent: System.Runtime.Remoting.Messaging.AsyncResult
  isExternal: false
  name: AsyncProcessMessage(IMessage,IMessageSink)
  nameWithType: AsyncResult.AsyncProcessMessage(IMessage,IMessageSink)
  fullName: System.Runtime.Remoting.Messaging.AsyncResult.AsyncProcessMessage(IMessage,IMessageSink)
- uid: System.Runtime.Remoting.Messaging.IMessageCtrl
  parent: System.Runtime.Remoting.Messaging
  isExternal: false
  name: IMessageCtrl
  nameWithType: IMessageCtrl
  fullName: System.Runtime.Remoting.Messaging.IMessageCtrl
- uid: System.Runtime.Remoting.Messaging.IMessage
  parent: System.Runtime.Remoting.Messaging
  isExternal: false
  name: IMessage
  nameWithType: IMessage
  fullName: System.Runtime.Remoting.Messaging.IMessage
- uid: System.Runtime.Remoting.Messaging.IMessageSink
  parent: System.Runtime.Remoting.Messaging
  isExternal: false
  name: IMessageSink
  nameWithType: IMessageSink
  fullName: System.Runtime.Remoting.Messaging.IMessageSink
- uid: System.Runtime.Remoting.Messaging.AsyncResult.AsyncState
  parent: System.Runtime.Remoting.Messaging.AsyncResult
  isExternal: false
  name: AsyncState
  nameWithType: AsyncResult.AsyncState
  fullName: System.Runtime.Remoting.Messaging.AsyncResult.AsyncState
- uid: System.Runtime.Remoting.Messaging.AsyncResult.AsyncWaitHandle
  parent: System.Runtime.Remoting.Messaging.AsyncResult
  isExternal: false
  name: AsyncWaitHandle
  nameWithType: AsyncResult.AsyncWaitHandle
  fullName: System.Runtime.Remoting.Messaging.AsyncResult.AsyncWaitHandle
- uid: System.Threading.WaitHandle
  parent: System.Threading
  isExternal: true
  name: WaitHandle
  nameWithType: WaitHandle
  fullName: System.Threading.WaitHandle
- uid: System.Runtime.Remoting.Messaging.AsyncResult.CompletedSynchronously
  parent: System.Runtime.Remoting.Messaging.AsyncResult
  isExternal: false
  name: CompletedSynchronously
  nameWithType: AsyncResult.CompletedSynchronously
  fullName: System.Runtime.Remoting.Messaging.AsyncResult.CompletedSynchronously
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Runtime.Remoting.Messaging.AsyncResult.EndInvokeCalled
  parent: System.Runtime.Remoting.Messaging.AsyncResult
  isExternal: false
  name: EndInvokeCalled
  nameWithType: AsyncResult.EndInvokeCalled
  fullName: System.Runtime.Remoting.Messaging.AsyncResult.EndInvokeCalled
- uid: System.Runtime.Remoting.Messaging.AsyncResult.GetReplyMessage
  parent: System.Runtime.Remoting.Messaging.AsyncResult
  isExternal: false
  name: GetReplyMessage()
  nameWithType: AsyncResult.GetReplyMessage()
  fullName: System.Runtime.Remoting.Messaging.AsyncResult.GetReplyMessage()
- uid: System.Runtime.Remoting.Messaging.AsyncResult.IsCompleted
  parent: System.Runtime.Remoting.Messaging.AsyncResult
  isExternal: false
  name: IsCompleted
  nameWithType: AsyncResult.IsCompleted
  fullName: System.Runtime.Remoting.Messaging.AsyncResult.IsCompleted
- uid: System.Runtime.Remoting.Messaging.AsyncResult.NextSink
  parent: System.Runtime.Remoting.Messaging.AsyncResult
  isExternal: false
  name: NextSink
  nameWithType: AsyncResult.NextSink
  fullName: System.Runtime.Remoting.Messaging.AsyncResult.NextSink
- uid: System.Runtime.Remoting.Messaging.AsyncResult.SetMessageCtrl(System.Runtime.Remoting.Messaging.IMessageCtrl)
  parent: System.Runtime.Remoting.Messaging.AsyncResult
  isExternal: false
  name: SetMessageCtrl(IMessageCtrl)
  nameWithType: AsyncResult.SetMessageCtrl(IMessageCtrl)
  fullName: System.Runtime.Remoting.Messaging.AsyncResult.SetMessageCtrl(IMessageCtrl)
- uid: System.Runtime.Remoting.Messaging.AsyncResult.SyncProcessMessage(System.Runtime.Remoting.Messaging.IMessage)
  parent: System.Runtime.Remoting.Messaging.AsyncResult
  isExternal: false
  name: SyncProcessMessage(IMessage)
  nameWithType: AsyncResult.SyncProcessMessage(IMessage)
  fullName: System.Runtime.Remoting.Messaging.AsyncResult.SyncProcessMessage(IMessage)
- uid: System.Runtime.Remoting.Messaging.AsyncResult.AsyncDelegate*
  parent: System.Runtime.Remoting.Messaging.AsyncResult
  isExternal: false
  name: AsyncDelegate
  nameWithType: AsyncResult.AsyncDelegate
- uid: System.Runtime.Remoting.Messaging.AsyncResult.AsyncProcessMessage*
  parent: System.Runtime.Remoting.Messaging.AsyncResult
  isExternal: false
  name: AsyncProcessMessage
  nameWithType: AsyncResult.AsyncProcessMessage
- uid: System.Runtime.Remoting.Messaging.AsyncResult.AsyncState*
  parent: System.Runtime.Remoting.Messaging.AsyncResult
  isExternal: false
  name: AsyncState
  nameWithType: AsyncResult.AsyncState
- uid: System.Runtime.Remoting.Messaging.AsyncResult.AsyncWaitHandle*
  parent: System.Runtime.Remoting.Messaging.AsyncResult
  isExternal: false
  name: AsyncWaitHandle
  nameWithType: AsyncResult.AsyncWaitHandle
- uid: System.Runtime.Remoting.Messaging.AsyncResult.CompletedSynchronously*
  parent: System.Runtime.Remoting.Messaging.AsyncResult
  isExternal: false
  name: CompletedSynchronously
  nameWithType: AsyncResult.CompletedSynchronously
- uid: System.Runtime.Remoting.Messaging.AsyncResult.EndInvokeCalled*
  parent: System.Runtime.Remoting.Messaging.AsyncResult
  isExternal: false
  name: EndInvokeCalled
  nameWithType: AsyncResult.EndInvokeCalled
- uid: System.Runtime.Remoting.Messaging.AsyncResult.GetReplyMessage*
  parent: System.Runtime.Remoting.Messaging.AsyncResult
  isExternal: false
  name: GetReplyMessage
  nameWithType: AsyncResult.GetReplyMessage
- uid: System.Runtime.Remoting.Messaging.AsyncResult.IsCompleted*
  parent: System.Runtime.Remoting.Messaging.AsyncResult
  isExternal: false
  name: IsCompleted
  nameWithType: AsyncResult.IsCompleted
- uid: System.Runtime.Remoting.Messaging.AsyncResult.NextSink*
  parent: System.Runtime.Remoting.Messaging.AsyncResult
  isExternal: false
  name: NextSink
  nameWithType: AsyncResult.NextSink
- uid: System.Runtime.Remoting.Messaging.AsyncResult.SetMessageCtrl*
  parent: System.Runtime.Remoting.Messaging.AsyncResult
  isExternal: false
  name: SetMessageCtrl
  nameWithType: AsyncResult.SetMessageCtrl
- uid: System.Runtime.Remoting.Messaging.AsyncResult.SyncProcessMessage*
  parent: System.Runtime.Remoting.Messaging.AsyncResult
  isExternal: false
  name: SyncProcessMessage
  nameWithType: AsyncResult.SyncProcessMessage
