### YamlMime:ManagedReference
items:
- uid: System.Windows.WeakEventManager
  id: WeakEventManager
  children:
  - System.Windows.WeakEventManager.#ctor
  - System.Windows.WeakEventManager.DeliverEvent(System.Object,System.EventArgs)
  - System.Windows.WeakEventManager.DeliverEventToList(System.Object,System.EventArgs,System.Windows.WeakEventManager.ListenerList)
  - System.Windows.WeakEventManager.GetCurrentManager(System.Type)
  - System.Windows.WeakEventManager.Item(System.Object)
  - System.Windows.WeakEventManager.NewListenerList
  - System.Windows.WeakEventManager.ProtectedAddHandler(System.Object,System.Delegate)
  - System.Windows.WeakEventManager.ProtectedAddListener(System.Object,System.Windows.IWeakEventListener)
  - System.Windows.WeakEventManager.ProtectedRemoveHandler(System.Object,System.Delegate)
  - System.Windows.WeakEventManager.ProtectedRemoveListener(System.Object,System.Windows.IWeakEventListener)
  - System.Windows.WeakEventManager.Purge(System.Object,System.Object,System.Boolean)
  - System.Windows.WeakEventManager.ReadLock
  - System.Windows.WeakEventManager.Remove(System.Object)
  - System.Windows.WeakEventManager.ScheduleCleanup
  - System.Windows.WeakEventManager.SetCurrentManager(System.Type,System.Windows.WeakEventManager)
  - System.Windows.WeakEventManager.StartListening(System.Object)
  - System.Windows.WeakEventManager.StopListening(System.Object)
  - System.Windows.WeakEventManager.WriteLock
  langs:
  - csharp
  name: WeakEventManager
  nameWithType: WeakEventManager
  fullName: System.Windows.WeakEventManager
  type: Class
  summary: "Innehåller en basklass för händelsehanteraren för som används i den *svaga händelse mönster*. Hanteraren lägger till och tar bort lyssnare för händelser (eller återanrop) som också använder mönstret."
  remarks: "Normalt använder du svaga händelse mönstret när händelsekällan har en livslängd för objekt som är oberoende av händelseavlyssnare. Om du använder centrala händelse avsändande möjligheterna för en WeakEventManager kan på lyssnaren hanterare på att skräpinsamlas även om källobjektet kvarstår. Däremot kommer en vanlig händelse hookup med hjälp av den `+=` operatorn orsakar potentiellt frånkopplade källan ska innehålla en referens till lyssnarna. Detta förhindrar att mottagaren skräpinsamlats inom rimlig tid.       En gemensam situation där livstid relationerna mellan datakällor och lyssnare ska använda svaga händelse mönstret är hantering av update-händelser som kommer från databindningar.       Svag händelse mönster kan också användas för återanrop och regelbundna händelser."
  syntax:
    content: 'public abstract class WeakEventManager : System.Windows.Threading.DispatcherObject'
  inheritance:
  - System.Object
  - System.Windows.Threading.DispatcherObject
  implements: []
  inheritedMembers:
  - System.Windows.Threading.DispatcherObject.CheckAccess
  - System.Windows.Threading.DispatcherObject.Dispatcher
  - System.Windows.Threading.DispatcherObject.VerifyAccess
  platform:
  - net462
- uid: System.Windows.WeakEventManager.#ctor
  id: '#ctor'
  parent: System.Windows.WeakEventManager
  langs:
  - csharp
  name: WeakEventManager()
  nameWithType: WeakEventManager.WeakEventManager()
  fullName: System.Windows.WeakEventManager.WeakEventManager()
  type: Constructor
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Initierar basera klassen värden när den används som initieraren i konstruktorn i en härledd klass."
  syntax:
    content: protected WeakEventManager ();
    parameters: []
  overload: System.Windows.WeakEventManager.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.WeakEventManager.DeliverEvent(System.Object,System.EventArgs)
  id: DeliverEvent(System.Object,System.EventArgs)
  parent: System.Windows.WeakEventManager
  langs:
  - csharp
  name: DeliverEvent(Object,EventArgs)
  nameWithType: WeakEventManager.DeliverEvent(Object,EventArgs)
  fullName: System.Windows.WeakEventManager.DeliverEvent(Object,EventArgs)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Levererar händelsen hanteras varje lyssnaren."
  remarks: "Anropa metoden DeliverEvent från händelsehanterare som läggs till eller tas bort med den <xref:System.Windows.WeakEventManager.StartListening%2A>och <xref:System.Windows.WeakEventManager.StopListening%2A>implementeringar av underklasser.</xref:System.Windows.WeakEventManager.StopListening%2A> </xref:System.Windows.WeakEventManager.StartListening%2A>       Om du anropar den <xref:System.Windows.WeakEventManager.ProtectedAddListener%2A>metod i din `AddListener` implementering av din klass i listan över lyssnare som tar emot händelsen sparas i en underliggande samling.</xref:System.Windows.WeakEventManager.ProtectedAddListener%2A> (`AddListener` ingår inte i ett gränssnitt eller klassen avtal. `AddListener`är det föreslagna namnet för metoden i klassen manager som anropar <xref:System.Windows.WeakEventManager.ProtectedAddListener%2A>och lägger till svaga händelse mönster lyssnare för händelsen.)       <xref:System.Windows.WeakEventManager.ProtectedAddListener%2A>lägger till lyssnare i en lista.</xref:System.Windows.WeakEventManager.ProtectedAddListener%2A> </xref:System.Windows.WeakEventManager.ProtectedAddListener%2A> Om din implementering manager upprätthåller mer än en lista över lyssnare per händelse, Använd inte DeliverEvent eller <xref:System.Windows.WeakEventManager.ProtectedAddListener%2A>.</xref:System.Windows.WeakEventManager.ProtectedAddListener%2A> I stället implementeringen ska skapa en egen <xref:System.Windows.WeakEventManager.ListenerList>instanser `AddListener` bör lägga till lyssnare i listan med lämpliga och händelser som ska levereras till lämplig lyssnare listan genom att anropa <xref:System.Windows.WeakEventManager.DeliverEventToList%2A>.</xref:System.Windows.WeakEventManager.DeliverEventToList%2A> </xref:System.Windows.WeakEventManager.ListenerList>"
  syntax:
    content: protected void DeliverEvent (object sender, EventArgs args);
    parameters:
    - id: sender
      type: System.Object
      description: "Det objekt som händelsen hanteras."
    - id: args
      type: System.EventArgs
      description: "En <xref:System.EventArgs>som innehåller informationen om händelsen för händelsen att leverera.</xref:System.EventArgs>"
  overload: System.Windows.WeakEventManager.DeliverEvent*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.WeakEventManager.DeliverEventToList(System.Object,System.EventArgs,System.Windows.WeakEventManager.ListenerList)
  id: DeliverEventToList(System.Object,System.EventArgs,System.Windows.WeakEventManager.ListenerList)
  parent: System.Windows.WeakEventManager
  langs:
  - csharp
  name: DeliverEventToList(Object,EventArgs,WeakEventManager+ListenerList)
  nameWithType: WeakEventManager.DeliverEventToList(Object,EventArgs,WeakEventManager+ListenerList)
  fullName: System.Windows.WeakEventManager.DeliverEventToList(Object,EventArgs,WeakEventManager+ListenerList)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  syntax:
    content: protected void DeliverEventToList (object sender, EventArgs args, System.Windows.WeakEventManager.ListenerList list);
    parameters:
    - id: sender
      type: System.Object
      description: "Som ska läggas till."
    - id: args
      type: System.EventArgs
      description: "Som ska läggas till."
    - id: list
      type: System.Windows.WeakEventManager.ListenerList
      description: "Som ska läggas till."
  overload: System.Windows.WeakEventManager.DeliverEventToList*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.WeakEventManager.GetCurrentManager(System.Type)
  id: GetCurrentManager(System.Type)
  parent: System.Windows.WeakEventManager
  langs:
  - csharp
  name: GetCurrentManager(Type)
  nameWithType: WeakEventManager.GetCurrentManager(Type)
  fullName: System.Windows.WeakEventManager.GetCurrentManager(Type)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Returnerar den <xref href=&quot;System.Windows.WeakEventManager&quot;> </xref> implementering som används för den angivna typen."
  remarks: "<xref:System.Windows.IWeakEventListener.ReceiveWeakEvent%2A>implementeringar anropa den här metoden med deras skickade `managerType`.</xref:System.Windows.IWeakEventListener.ReceiveWeakEvent%2A> Den returnerade <xref:System.Windows.WeakEventManager>används sedan som fördelar som avgör vilken händelse som togs emot och vilka privata klass-hanterare för att anropa.</xref:System.Windows.WeakEventManager>"
  syntax:
    content: protected static System.Windows.WeakEventManager GetCurrentManager (Type managerType);
    parameters:
    - id: managerType
      type: System.Type
      description: "Typen för att hämta den <xref href=&quot;System.Windows.WeakEventManager&quot;> </xref> för."
    return:
      type: System.Windows.WeakEventManager
      description: "Det matchande <xref href=&quot;System.Windows.WeakEventManager&quot;> </xref> implementering."
  overload: System.Windows.WeakEventManager.GetCurrentManager*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.WeakEventManager.Item(System.Object)
  id: Item(System.Object)
  parent: System.Windows.WeakEventManager
  langs:
  - csharp
  name: Item(Object)
  nameWithType: WeakEventManager.Item(Object)
  fullName: System.Windows.WeakEventManager.Item(Object)
  type: Property
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Hämtar eller anger den data som lagras för den angivna källan."
  remarks: "Härledda klasser kan välja vilka data och för lagring i indexeraren. Vanligtvis det implementeras som en <xref:System.Windows.WeakEventManager.ListenerList>, vilket är en lista över svaga referenser till lyssnare.</xref:System.Windows.WeakEventManager.ListenerList> Du behöver bara ändra den här typen om det <xref:System.Windows.WeakEventManager.ListenerList>typ får inte innehålla informationen som krävs.</xref:System.Windows.WeakEventManager.ListenerList> Om så behöver du åsidosätta den <xref:System.Windows.WeakEventManager.Purge%2A>metoden så att alla rensning av den underliggande typen utförs på rätt sätt.</xref:System.Windows.WeakEventManager.Purge%2A>"
  syntax:
    content: protected object this[object source] { get; set; }
    parameters:
    - id: source
      type: System.Object
      description: "Det nollbaserade indexet för den begärda källan."
    return:
      type: System.Object
      description: "Data som lagras av hanteraren för den här källan."
  overload: System.Windows.WeakEventManager.Item*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.WeakEventManager.NewListenerList
  id: NewListenerList
  parent: System.Windows.WeakEventManager
  langs:
  - csharp
  name: NewListenerList()
  nameWithType: WeakEventManager.NewListenerList()
  fullName: System.Windows.WeakEventManager.NewListenerList()
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Returnerar ett nytt objekt att innehålla lyssnare på en händelse."
  syntax:
    content: protected virtual System.Windows.WeakEventManager.ListenerList NewListenerList ();
    parameters: []
    return:
      type: System.Windows.WeakEventManager.ListenerList
      description: "Ett nytt objekt att innehålla lyssnare på en händelse."
  overload: System.Windows.WeakEventManager.NewListenerList*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.WeakEventManager.ProtectedAddHandler(System.Object,System.Delegate)
  id: ProtectedAddHandler(System.Object,System.Delegate)
  parent: System.Windows.WeakEventManager
  langs:
  - csharp
  name: ProtectedAddHandler(Object,Delegate)
  nameWithType: WeakEventManager.ProtectedAddHandler(Object,Delegate)
  fullName: System.Windows.WeakEventManager.ProtectedAddHandler(Object,Delegate)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Lägger till angivna delegat som en händelsehanterare för den angivna källan."
  syntax:
    content: protected void ProtectedAddHandler (object source, Delegate handler);
    parameters:
    - id: source
      type: System.Object
      description: "Källobjektet som hanterardelegaten prenumererar på."
    - id: handler
      type: System.Delegate
      description: "Det ombud som hanterar den händelse som aktiveras av `source`."
  overload: System.Windows.WeakEventManager.ProtectedAddHandler*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.WeakEventManager.ProtectedAddListener(System.Object,System.Windows.IWeakEventListener)
  id: ProtectedAddListener(System.Object,System.Windows.IWeakEventListener)
  parent: System.Windows.WeakEventManager
  langs:
  - csharp
  name: ProtectedAddListener(Object,IWeakEventListener)
  nameWithType: WeakEventManager.ProtectedAddListener(Object,IWeakEventListener)
  fullName: System.Windows.WeakEventManager.ProtectedAddListener(Object,IWeakEventListener)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Lägger till den angivna lyssnaren till den angivna källan för händelsen hanteras."
  remarks: "Anropa den här metoden i klassen manager `AddListener` metoder i <xref:System.Windows.WeakEventManager>implementeringar.</xref:System.Windows.WeakEventManager> `AddListener`är det föreslagna namnet för den statiska metoden som du definierar på manager-klass för att aktivera andra klasser att lägga till en lyssnare för svag händelse mönstret. `AddListener`tar två parametrar: den `source` där lyssnaren är ansluten och `listener` instans. För din `AddListener` -implementering måste anropa metoden ProtectedAddListener aktuella manager och skicka samma två parametrar.       Om listan över lyssnare var tidigare tomt ProtectedAddListener anropar den <xref:System.Windows.WeakEventManager.StartListening%2A>metoden internt, som anropar ditt specifika <xref:System.Windows.WeakEventManager.StartListening%2A>åsidosätta via polymorfism.</xref:System.Windows.WeakEventManager.StartListening%2A> </xref:System.Windows.WeakEventManager.StartListening%2A>       ProtectedAddListener lägger till lyssnare för en enskild interna <xref:System.Windows.WeakEventManager.ListenerList>per `source`.</xref:System.Windows.WeakEventManager.ListenerList> Om din implementering manager upprätthåller mer än en lista över lyssnare för varje händelsekälla kombination, Använd inte ProtectedAddListener. I stället implementeringen ska skapa en egen <xref:System.Windows.WeakEventManager.ListenerList>instanser `AddListener` bör lägga till lyssnare i listan med lämpliga och händelser som ska levereras till lämplig lyssnare listan genom att anropa den <xref:System.Windows.WeakEventManager.DeliverEventToList%2A>händelsen i stället för den <xref:System.Windows.WeakEventManager.DeliverEvent%2A>metoden.</xref:System.Windows.WeakEventManager.DeliverEvent%2A> </xref:System.Windows.WeakEventManager.DeliverEventToList%2A> </xref:System.Windows.WeakEventManager.ListenerList>"
  syntax:
    content: protected void ProtectedAddListener (object source, System.Windows.IWeakEventListener listener);
    parameters:
    - id: source
      type: System.Object
      description: "Källan för att bifoga lyssnare till."
    - id: listener
      type: System.Windows.IWeakEventListener
      description: "Klassen lyssnande (som måste implementera <xref href=&quot;System.Windows.IWeakEventListener&quot;> </xref>)."
  overload: System.Windows.WeakEventManager.ProtectedAddListener*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.WeakEventManager.ProtectedRemoveHandler(System.Object,System.Delegate)
  id: ProtectedRemoveHandler(System.Object,System.Delegate)
  parent: System.Windows.WeakEventManager
  langs:
  - csharp
  name: ProtectedRemoveHandler(Object,Delegate)
  nameWithType: WeakEventManager.ProtectedRemoveHandler(Object,Delegate)
  fullName: System.Windows.WeakEventManager.ProtectedRemoveHandler(Object,Delegate)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Tar bort tillagd hanteraren från angiven källa."
  syntax:
    content: protected void ProtectedRemoveHandler (object source, Delegate handler);
    parameters:
    - id: source
      type: System.Object
      description: "Källan för att ta bort från hanteraren."
    - id: handler
      type: System.Delegate
      description: "Delegaten att ta bort från `source`."
  overload: System.Windows.WeakEventManager.ProtectedRemoveHandler*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.WeakEventManager.ProtectedRemoveListener(System.Object,System.Windows.IWeakEventListener)
  id: ProtectedRemoveListener(System.Object,System.Windows.IWeakEventListener)
  parent: System.Windows.WeakEventManager
  langs:
  - csharp
  name: ProtectedRemoveListener(Object,IWeakEventListener)
  nameWithType: WeakEventManager.ProtectedRemoveListener(Object,IWeakEventListener)
  fullName: System.Windows.WeakEventManager.ProtectedRemoveListener(Object,IWeakEventListener)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Tar bort en lyssnare har redan lagts till från den angivna källan."
  remarks: "Anropa den här metoden i klassen manager `RemoveListener` metoder i <xref:System.Windows.WeakEventManager>implementeringar.</xref:System.Windows.WeakEventManager> `RemoveListener`är det föreslagna namnet för den statiska metoden som du definierar på manager-klass för att aktivera andra klasser för att ta bort en lyssnare för svag händelse mönstret. `RemoveListener`tar två parametrar: den `source` där lyssnaren tas bort och `listener` klass. För din `RemoveListener` -implementering måste anropa metoden ProtectedRemoveListener aktuella manager och skicka samma två parametrar.       Om ett anrop till ProtectedRemoveListener tar bort den sista lyssnaren i listan, ProtectedRemoveListener anropar den <xref:System.Windows.WeakEventManager.StopListening%2A>metoden internt, som anropar ditt specifika <xref:System.Windows.WeakEventManager.StopListening%2A>åsidosätta via polymorfism.</xref:System.Windows.WeakEventManager.StopListening%2A> </xref:System.Windows.WeakEventManager.StopListening%2A>       ProtectedRemoveListener tar bort lyssnare från en enda interna <xref:System.Windows.WeakEventManager.ListenerList>per `source`.</xref:System.Windows.WeakEventManager.ListenerList> Om din implementering manager upprätthåller mer än en lista över lyssnare för varje händelsekälla kombination, Använd inte ProtectedRemoveListener. I stället implementeringen ska skapa en egen <xref:System.Windows.WeakEventManager.ListenerList>instanser `RemoveListener` bör ta bort lyssnare från listan över lämpliga och händelser som ska levereras till lämplig lyssnare listan genom att anropa den <xref:System.Windows.WeakEventManager.DeliverEventToList%2A>metoden i stället för den <xref:System.Windows.WeakEventManager.DeliverEvent%2A>metoden.</xref:System.Windows.WeakEventManager.DeliverEvent%2A> </xref:System.Windows.WeakEventManager.DeliverEventToList%2A> </xref:System.Windows.WeakEventManager.ListenerList>"
  syntax:
    content: protected void ProtectedRemoveListener (object source, System.Windows.IWeakEventListener listener);
    parameters:
    - id: source
      type: System.Object
      description: "Källan för att ta bort lyssnare från."
    - id: listener
      type: System.Windows.IWeakEventListener
      description: "Klassen lyssnande (som måste implementera <xref href=&quot;System.Windows.IWeakEventListener&quot;> </xref>)."
  overload: System.Windows.WeakEventManager.ProtectedRemoveListener*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.WeakEventManager.Purge(System.Object,System.Object,System.Boolean)
  id: Purge(System.Object,System.Object,System.Boolean)
  parent: System.Windows.WeakEventManager
  langs:
  - csharp
  name: Purge(Object,Object,Boolean)
  nameWithType: WeakEventManager.Purge(Object,Object,Boolean)
  fullName: System.Windows.WeakEventManager.Purge(Object,Object,Boolean)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Inaktiva lyssnare poster tas bort från datalistan över för den angivna källan. Returnerar <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref> om vissa poster faktiskt har tagits bort från listan."
  remarks: "Rensa-metoden har en standardimplementering som tar bort alla poster när data är ett <xref:System.Windows.WeakEventManager.ListenerList>.</xref:System.Windows.WeakEventManager.ListenerList>"
  syntax:
    content: protected virtual bool Purge (object source, object data, bool purgeAll);
    parameters:
    - id: source
      type: System.Object
      description: "Källan för händelser som lyssnar på."
    - id: data
      type: System.Object
      description: "Data att kontrollera. Det här objektet förväntas vara en <xref:System.Windows.WeakEventManager.ListenerList>implementering.</xref:System.Windows.WeakEventManager.ListenerList>"
    - id: purgeAll
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>slutar att lyssna till `source`, och ta bort alla poster från `data`."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Om vissa poster togs bort faktiskt; Annars <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.WeakEventManager.Purge*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.WeakEventManager.ReadLock
  id: ReadLock
  parent: System.Windows.WeakEventManager
  langs:
  - csharp
  name: ReadLock
  nameWithType: WeakEventManager.ReadLock
  fullName: System.Windows.WeakEventManager.ReadLock
  type: Property
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Upprättar en Läs-Lås för underliggande tabellen och returnerar <xref:System.IDisposable>.</xref:System.IDisposable>"
  remarks: "I härledda klasser frågor till tabellen som ingår i <xref:System.Windows.WeakEventManager.Item%2A>ska alltid ske inom en `using (ReadLock) { ... }` -satsen, förutom frågor som redan finns inom ett skrivlås.</xref:System.Windows.WeakEventManager.Item%2A> Dessa frågor kan vara nödvändigt om klassen stöder en mer avancerad `AddListener` implementering som kräver mer data utöver den `source` och `listener`, och använder den <xref:System.Windows.WeakEventManager.Item%2A>samling för att lagra den extra informationen.</xref:System.Windows.WeakEventManager.Item%2A>"
  syntax:
    content: protected IDisposable ReadLock { get; }
    return:
      type: System.IDisposable
      description: "Ett objekt som kan användas för att upprätta ett lås på tabellen datamedlemmar och klicka sedan på lämpligt sätt tas bort med en <xref uid=&quot;langword_csharp_using&quot; name=&quot;using&quot; href=&quot;&quot;> </xref> konstruera."
  overload: System.Windows.WeakEventManager.ReadLock*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.WeakEventManager.Remove(System.Object)
  id: Remove(System.Object)
  parent: System.Windows.WeakEventManager
  langs:
  - csharp
  name: Remove(Object)
  nameWithType: WeakEventManager.Remove(Object)
  fullName: System.Windows.WeakEventManager.Remove(Object)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Tar bort alla lyssnare för den angivna källan."
  syntax:
    content: protected void Remove (object source);
    parameters:
    - id: source
      type: System.Object
      description: "Källan för att ta bort informationen om lyssnaren för."
  overload: System.Windows.WeakEventManager.Remove*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.WeakEventManager.ScheduleCleanup
  id: ScheduleCleanup
  parent: System.Windows.WeakEventManager
  langs:
  - csharp
  name: ScheduleCleanup()
  nameWithType: WeakEventManager.ScheduleCleanup()
  fullName: System.Windows.WeakEventManager.ScheduleCleanup()
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Begäranden om att en rensning av oanvända poster i den underliggande listan lyssnare ska utföras på en lägre prioritet tråd."
  remarks: "Att anropa metoden ScheduleCleanup liknar anropar den <xref:System.Windows.WeakEventManager.Purge%2A>metoden på den aktuella hanteraren listan på lägre trådprioritet med den `purgeAll` parametern `false`.</xref:System.Windows.WeakEventManager.Purge%2A>"
  syntax:
    content: protected void ScheduleCleanup ();
    parameters: []
  overload: System.Windows.WeakEventManager.ScheduleCleanup*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.WeakEventManager.SetCurrentManager(System.Type,System.Windows.WeakEventManager)
  id: SetCurrentManager(System.Type,System.Windows.WeakEventManager)
  parent: System.Windows.WeakEventManager
  langs:
  - csharp
  name: SetCurrentManager(Type,WeakEventManager)
  nameWithType: WeakEventManager.SetCurrentManager(Type,WeakEventManager)
  fullName: System.Windows.WeakEventManager.SetCurrentManager(Type,WeakEventManager)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Anger den aktuella hanteraren för den angivna manager."
  remarks: "Anropa metoden SetCurrentManager för att initiera en hanterare om som krävs av ett anrop till din `CurrentManager` -egenskapen i en <xref:System.Windows.WeakEventManager>implementering.</xref:System.Windows.WeakEventManager>"
  syntax:
    content: protected static void SetCurrentManager (Type managerType, System.Windows.WeakEventManager manager);
    parameters:
    - id: managerType
      type: System.Type
      description: "Ange nya händelsehanteraren typ."
    - id: manager
      type: System.Windows.WeakEventManager
      description: "Händelsehanteraren."
  overload: System.Windows.WeakEventManager.SetCurrentManager*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.WeakEventManager.StartListening(System.Object)
  id: StartListening(System.Object)
  parent: System.Windows.WeakEventManager
  langs:
  - csharp
  name: StartListening(Object)
  nameWithType: WeakEventManager.StartListening(Object)
  fullName: System.Windows.WeakEventManager.StartListening(Object)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "När åsidosätts i en härledd klass börjar lyssna efter händelsen hanteras. När metoden StartListening först anropas hanteraren måste vara i tillståndet för anropar <> </> *> eller <> </> *> när den relevanta händelsen från den angivna källan hanteras."
  syntax:
    content: protected abstract void StartListening (object source);
    parameters:
    - id: source
      type: System.Object
      description: "Källan för att börja lyssna på."
  overload: System.Windows.WeakEventManager.StartListening*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.WeakEventManager.StopListening(System.Object)
  id: StopListening(System.Object)
  parent: System.Windows.WeakEventManager
  langs:
  - csharp
  name: StopListening(Object)
  nameWithType: WeakEventManager.StopListening(Object)
  fullName: System.Windows.WeakEventManager.StopListening(Object)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "När åsidosätts i en härledd klass, stoppar du lyssnar på den angivna källan för händelsen hanteras."
  syntax:
    content: protected abstract void StopListening (object source);
    parameters:
    - id: source
      type: System.Object
      description: "Källan slutar att lyssna på."
  overload: System.Windows.WeakEventManager.StopListening*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.WeakEventManager.WriteLock
  id: WriteLock
  parent: System.Windows.WeakEventManager
  langs:
  - csharp
  name: WriteLock
  nameWithType: WeakEventManager.WriteLock
  fullName: System.Windows.WeakEventManager.WriteLock
  type: Property
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Upprättar ett skrivlås på underliggande tabellen och returnerar<xref:System.IDisposable>.</xref:System.IDisposable>"
  remarks: "I härledda klasser alla ändringar i den underliggande datatabellen ska ske inom en `using (WriteLock) { ... }` satsen. De här ändringarna kan vara nödvändigt om klassen stöder en mer avancerad `AddListener` implementering som kräver mer data utöver den `source` och `listener`, och använder den <xref:System.Windows.WeakEventManager.Item%2A>samling för att lagra den extra informationen.</xref:System.Windows.WeakEventManager.Item%2A>"
  syntax:
    content: protected IDisposable WriteLock { get; }
    return:
      type: System.IDisposable
      description: "Ett objekt som kan användas för att upprätta ett lås på tabellen datamedlemmar och klicka sedan på lämpligt sätt tas bort med en <xref uid=&quot;langword_csharp_using&quot; name=&quot;using&quot; href=&quot;&quot;> </xref> konstruera."
  overload: System.Windows.WeakEventManager.WriteLock*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Windows.Threading.DispatcherObject
  isExternal: false
  name: System.Windows.Threading.DispatcherObject
- uid: System.Windows.WeakEventManager.#ctor
  parent: System.Windows.WeakEventManager
  isExternal: false
  name: WeakEventManager()
  nameWithType: WeakEventManager.WeakEventManager()
  fullName: System.Windows.WeakEventManager.WeakEventManager()
- uid: System.Windows.WeakEventManager.DeliverEvent(System.Object,System.EventArgs)
  parent: System.Windows.WeakEventManager
  isExternal: false
  name: DeliverEvent(Object,EventArgs)
  nameWithType: WeakEventManager.DeliverEvent(Object,EventArgs)
  fullName: System.Windows.WeakEventManager.DeliverEvent(Object,EventArgs)
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.EventArgs
  parent: System
  isExternal: true
  name: EventArgs
  nameWithType: EventArgs
  fullName: System.EventArgs
- uid: System.Windows.WeakEventManager.DeliverEventToList(System.Object,System.EventArgs,System.Windows.WeakEventManager.ListenerList)
  parent: System.Windows.WeakEventManager
  isExternal: false
  name: DeliverEventToList(Object,EventArgs,WeakEventManager+ListenerList)
  nameWithType: WeakEventManager.DeliverEventToList(Object,EventArgs,WeakEventManager+ListenerList)
  fullName: System.Windows.WeakEventManager.DeliverEventToList(Object,EventArgs,WeakEventManager+ListenerList)
- uid: System.Windows.WeakEventManager.ListenerList
  parent: System.Windows
  isExternal: false
  name: WeakEventManager+ListenerList
  nameWithType: WeakEventManager+ListenerList
  fullName: System.Windows.WeakEventManager+ListenerList
- uid: System.Windows.WeakEventManager.GetCurrentManager(System.Type)
  parent: System.Windows.WeakEventManager
  isExternal: false
  name: GetCurrentManager(Type)
  nameWithType: WeakEventManager.GetCurrentManager(Type)
  fullName: System.Windows.WeakEventManager.GetCurrentManager(Type)
- uid: System.Windows.WeakEventManager
  parent: System.Windows
  isExternal: false
  name: WeakEventManager
  nameWithType: WeakEventManager
  fullName: System.Windows.WeakEventManager
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Windows.WeakEventManager.Item(System.Object)
  parent: System.Windows.WeakEventManager
  isExternal: false
  name: Item(Object)
  nameWithType: WeakEventManager.Item(Object)
  fullName: System.Windows.WeakEventManager.Item(Object)
- uid: System.Windows.WeakEventManager.NewListenerList
  parent: System.Windows.WeakEventManager
  isExternal: false
  name: NewListenerList()
  nameWithType: WeakEventManager.NewListenerList()
  fullName: System.Windows.WeakEventManager.NewListenerList()
- uid: System.Windows.WeakEventManager.ProtectedAddHandler(System.Object,System.Delegate)
  parent: System.Windows.WeakEventManager
  isExternal: false
  name: ProtectedAddHandler(Object,Delegate)
  nameWithType: WeakEventManager.ProtectedAddHandler(Object,Delegate)
  fullName: System.Windows.WeakEventManager.ProtectedAddHandler(Object,Delegate)
- uid: System.Delegate
  parent: System
  isExternal: true
  name: Delegate
  nameWithType: Delegate
  fullName: System.Delegate
- uid: System.Windows.WeakEventManager.ProtectedAddListener(System.Object,System.Windows.IWeakEventListener)
  parent: System.Windows.WeakEventManager
  isExternal: false
  name: ProtectedAddListener(Object,IWeakEventListener)
  nameWithType: WeakEventManager.ProtectedAddListener(Object,IWeakEventListener)
  fullName: System.Windows.WeakEventManager.ProtectedAddListener(Object,IWeakEventListener)
- uid: System.Windows.IWeakEventListener
  parent: System.Windows
  isExternal: false
  name: IWeakEventListener
  nameWithType: IWeakEventListener
  fullName: System.Windows.IWeakEventListener
- uid: System.Windows.WeakEventManager.ProtectedRemoveHandler(System.Object,System.Delegate)
  parent: System.Windows.WeakEventManager
  isExternal: false
  name: ProtectedRemoveHandler(Object,Delegate)
  nameWithType: WeakEventManager.ProtectedRemoveHandler(Object,Delegate)
  fullName: System.Windows.WeakEventManager.ProtectedRemoveHandler(Object,Delegate)
- uid: System.Windows.WeakEventManager.ProtectedRemoveListener(System.Object,System.Windows.IWeakEventListener)
  parent: System.Windows.WeakEventManager
  isExternal: false
  name: ProtectedRemoveListener(Object,IWeakEventListener)
  nameWithType: WeakEventManager.ProtectedRemoveListener(Object,IWeakEventListener)
  fullName: System.Windows.WeakEventManager.ProtectedRemoveListener(Object,IWeakEventListener)
- uid: System.Windows.WeakEventManager.Purge(System.Object,System.Object,System.Boolean)
  parent: System.Windows.WeakEventManager
  isExternal: false
  name: Purge(Object,Object,Boolean)
  nameWithType: WeakEventManager.Purge(Object,Object,Boolean)
  fullName: System.Windows.WeakEventManager.Purge(Object,Object,Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Windows.WeakEventManager.ReadLock
  parent: System.Windows.WeakEventManager
  isExternal: false
  name: ReadLock
  nameWithType: WeakEventManager.ReadLock
  fullName: System.Windows.WeakEventManager.ReadLock
- uid: System.IDisposable
  parent: System
  isExternal: true
  name: IDisposable
  nameWithType: IDisposable
  fullName: System.IDisposable
- uid: System.Windows.WeakEventManager.Remove(System.Object)
  parent: System.Windows.WeakEventManager
  isExternal: false
  name: Remove(Object)
  nameWithType: WeakEventManager.Remove(Object)
  fullName: System.Windows.WeakEventManager.Remove(Object)
- uid: System.Windows.WeakEventManager.ScheduleCleanup
  parent: System.Windows.WeakEventManager
  isExternal: false
  name: ScheduleCleanup()
  nameWithType: WeakEventManager.ScheduleCleanup()
  fullName: System.Windows.WeakEventManager.ScheduleCleanup()
- uid: System.Windows.WeakEventManager.SetCurrentManager(System.Type,System.Windows.WeakEventManager)
  parent: System.Windows.WeakEventManager
  isExternal: false
  name: SetCurrentManager(Type,WeakEventManager)
  nameWithType: WeakEventManager.SetCurrentManager(Type,WeakEventManager)
  fullName: System.Windows.WeakEventManager.SetCurrentManager(Type,WeakEventManager)
- uid: System.Windows.WeakEventManager.StartListening(System.Object)
  parent: System.Windows.WeakEventManager
  isExternal: false
  name: StartListening(Object)
  nameWithType: WeakEventManager.StartListening(Object)
  fullName: System.Windows.WeakEventManager.StartListening(Object)
- uid: System.Windows.WeakEventManager.StopListening(System.Object)
  parent: System.Windows.WeakEventManager
  isExternal: false
  name: StopListening(Object)
  nameWithType: WeakEventManager.StopListening(Object)
  fullName: System.Windows.WeakEventManager.StopListening(Object)
- uid: System.Windows.WeakEventManager.WriteLock
  parent: System.Windows.WeakEventManager
  isExternal: false
  name: WriteLock
  nameWithType: WeakEventManager.WriteLock
  fullName: System.Windows.WeakEventManager.WriteLock
- uid: System.Windows.WeakEventManager.#ctor*
  parent: System.Windows.WeakEventManager
  isExternal: false
  name: WeakEventManager
  nameWithType: WeakEventManager.WeakEventManager
- uid: System.Windows.WeakEventManager.DeliverEvent*
  parent: System.Windows.WeakEventManager
  isExternal: false
  name: DeliverEvent
  nameWithType: WeakEventManager.DeliverEvent
- uid: System.Windows.WeakEventManager.DeliverEventToList*
  parent: System.Windows.WeakEventManager
  isExternal: false
  name: DeliverEventToList
  nameWithType: WeakEventManager.DeliverEventToList
- uid: System.Windows.WeakEventManager.GetCurrentManager*
  parent: System.Windows.WeakEventManager
  isExternal: false
  name: GetCurrentManager
  nameWithType: WeakEventManager.GetCurrentManager
- uid: System.Windows.WeakEventManager.Item*
  parent: System.Windows.WeakEventManager
  isExternal: false
  name: Item
  nameWithType: WeakEventManager.Item
- uid: System.Windows.WeakEventManager.NewListenerList*
  parent: System.Windows.WeakEventManager
  isExternal: false
  name: NewListenerList
  nameWithType: WeakEventManager.NewListenerList
- uid: System.Windows.WeakEventManager.ProtectedAddHandler*
  parent: System.Windows.WeakEventManager
  isExternal: false
  name: ProtectedAddHandler
  nameWithType: WeakEventManager.ProtectedAddHandler
- uid: System.Windows.WeakEventManager.ProtectedAddListener*
  parent: System.Windows.WeakEventManager
  isExternal: false
  name: ProtectedAddListener
  nameWithType: WeakEventManager.ProtectedAddListener
- uid: System.Windows.WeakEventManager.ProtectedRemoveHandler*
  parent: System.Windows.WeakEventManager
  isExternal: false
  name: ProtectedRemoveHandler
  nameWithType: WeakEventManager.ProtectedRemoveHandler
- uid: System.Windows.WeakEventManager.ProtectedRemoveListener*
  parent: System.Windows.WeakEventManager
  isExternal: false
  name: ProtectedRemoveListener
  nameWithType: WeakEventManager.ProtectedRemoveListener
- uid: System.Windows.WeakEventManager.Purge*
  parent: System.Windows.WeakEventManager
  isExternal: false
  name: Purge
  nameWithType: WeakEventManager.Purge
- uid: System.Windows.WeakEventManager.ReadLock*
  parent: System.Windows.WeakEventManager
  isExternal: false
  name: ReadLock
  nameWithType: WeakEventManager.ReadLock
- uid: System.Windows.WeakEventManager.Remove*
  parent: System.Windows.WeakEventManager
  isExternal: false
  name: Remove
  nameWithType: WeakEventManager.Remove
- uid: System.Windows.WeakEventManager.ScheduleCleanup*
  parent: System.Windows.WeakEventManager
  isExternal: false
  name: ScheduleCleanup
  nameWithType: WeakEventManager.ScheduleCleanup
- uid: System.Windows.WeakEventManager.SetCurrentManager*
  parent: System.Windows.WeakEventManager
  isExternal: false
  name: SetCurrentManager
  nameWithType: WeakEventManager.SetCurrentManager
- uid: System.Windows.WeakEventManager.StartListening*
  parent: System.Windows.WeakEventManager
  isExternal: false
  name: StartListening
  nameWithType: WeakEventManager.StartListening
- uid: System.Windows.WeakEventManager.StopListening*
  parent: System.Windows.WeakEventManager
  isExternal: false
  name: StopListening
  nameWithType: WeakEventManager.StopListening
- uid: System.Windows.WeakEventManager.WriteLock*
  parent: System.Windows.WeakEventManager
  isExternal: false
  name: WriteLock
  nameWithType: WeakEventManager.WriteLock
