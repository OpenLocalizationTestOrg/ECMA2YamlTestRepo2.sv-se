### YamlMime:ManagedReference
items:
- uid: System.Security.SecureString
  id: SecureString
  children:
  - System.Security.SecureString.#ctor
  - System.Security.SecureString.#ctor(System.Char*,System.Int32)
  - System.Security.SecureString.AppendChar(System.Char)
  - System.Security.SecureString.Clear
  - System.Security.SecureString.Copy
  - System.Security.SecureString.Dispose
  - System.Security.SecureString.InsertAt(System.Int32,System.Char)
  - System.Security.SecureString.IsReadOnly
  - System.Security.SecureString.Length
  - System.Security.SecureString.MakeReadOnly
  - System.Security.SecureString.RemoveAt(System.Int32)
  - System.Security.SecureString.SetAt(System.Int32,System.Char)
  langs:
  - csharp
  name: SecureString
  nameWithType: SecureString
  fullName: System.Security.SecureString
  type: Class
  summary: "Representerar text som bör vara konfidentiell, exempelvis genom att ta bort den från datorminne när de inte längre behövs. Den här klassen kan inte ärvas."
  remarks: "SecureString är en strängtyp som ger ett mått på säkerhet. Försök att undvika lagring av potentiellt känsliga strängar i processminnet som oformaterad text.  (Begränsningar, men finns det [hur säker är SecureString?](#HowSecure) avsnitt.) Värdet för en instans av SecureString skyddas automatiskt med hjälp av en mekanism som stöds av den underliggande plattformen när instansen initieras eller när värdet ändras. Programmet kan återge instansen ändras och förhindra att ytterligare ändras genom att anropa den <xref:System.Security.SecureString.MakeReadOnly%2A>metoden.</xref:System.Security.SecureString.MakeReadOnly%2A>       Den maximala längden på en instans av SecureString är 65 536 tecken.      > [!IMPORTANT] > Den här typen implementerar den <xref:System.IDisposable>gränssnitt.</xref:System.IDisposable> När du är klar med en instans av typen, ta bort den direkt eller indirekt. Om du vill ta bort av typen direkt, anropa dess <xref:System.IDisposable.Dispose%2A>metod i en `try` / `catch` block.</xref:System.IDisposable.Dispose%2A> Om du vill ta hand om den indirekt, använda en språk-konstruktion som `using` (i C#) eller `Using` (i Visual Basic). Mer information finns i avsnittet &quot;Med hjälp av ett objekt som implementerar IDisposable&quot; i den <xref:System.IDisposable>gränssnittet avsnittet.</xref:System.IDisposable>       Klassen SecureString och dess medlemmar är inte synligt för COM. Mer information finns i <xref:System.Runtime.InteropServices.ComVisibleAttribute>.</xref:System.Runtime.InteropServices.ComVisibleAttribute>       I det här avsnittet: [String vs. SecureString](#vsString)[SecureString operations](#Ops)[SecureString och interop](#interop)[hur säker är SecureString?               ](#HowSecure)      <a name=&quot;vsString&quot;></a>## String jämfört med SecureString en instans av den <xref:System.String?displayProperty=fullName>klass är både ändras och när de inte längre behövs kan inte schemaläggas programmässigt för skräpinsamling; instansen är skrivskyddad efter att den har skapats och det går inte att förutsäga när instansen tas bort från minnet.</xref:System.String?displayProperty=fullName> Eftersom <xref:System.String?displayProperty=fullName>instanser är oföränderliga, åtgärder som visas för att ändra en befintlig instans skapar en kopia av den att manipulera.</xref:System.String?displayProperty=fullName> Därför om en <xref:System.String>objektet innehåller känslig information, till exempel lösenord, kreditkortsnummer eller personliga data, finns det en risk för informationen som kan visas när den används eftersom programmet inte kan ta bort data från minnet.</xref:System.String>       Ett objekt SecureString liknar en <xref:System.String>objekt i att den har ett textvärde.</xref:System.String> Men värdet för en SecureString objektet är fäst i minnet, kan använda en skyddsmekanism, som kryptering som tillhandahålls av det underliggande operativsystemet kan ändras tills programmet markeras som skrivskyddad och kan tas bort från minnet av ditt program anropar den <xref:System.Security.SecureString.Dispose%2A>metoden eller av .NET Framework skräpinsamlingen.</xref:System.Security.SecureString.Dispose%2A>       En beskrivning av begränsningar i klassen SecureString finns i [hur säker är SecureString?](#HowSecure) avsnitt.       [Överst på sidan](#top) <a name=&quot;Ops&quot;> </a> ## SecureString åtgärder i SecureString klassen innehåller medlemmar som kan du göra följande: initiera en SecureString objekt du initiera en SecureString objekt genom att anropa dess parameterlösa konstruktor.             Lägga till tecken som en sträng objekt du kan lägga till ett enskilt tecken i taget till ett SecureString objekt genom att anropa dess <xref:System.Security.SecureString.AppendChar%2A>eller <xref:System.Security.SecureString.InsertAt%2A>metod.</xref:System.Security.SecureString.InsertAt%2A> </xref:System.Security.SecureString.AppendChar%2A>      > [!IMPORTANT] > A SecureString objektet aldrig ska konstrueras från en <xref:System.String>eftersom känsliga data som redan omfattas minne beständiga konsekvenserna av ändras <xref:System.String>klass.</xref:System.String> </xref:System.String> Är det bästa sättet att konstruera ett SecureString objekt från en ohanterad källa tecken i taget, som den <xref:System.Console.ReadKey%2A?displayProperty=fullName>metoden.</xref:System.Console.ReadKey%2A?displayProperty=fullName>       Ta bort tecken från en sträng objekt du kan ersätta ett enskilt tecken genom att anropa den <xref:System.Security.SecureString.SetAt%2A>metod, ta bort ett enskilt tecken genom att anropa den <xref:System.Security.SecureString.RemoveAt%2A>metoden eller ta bort alla tecken från SecureString instansen genom att anropa den <xref:System.Security.SecureString.Clear%2A>metoden.</xref:System.Security.SecureString.Clear%2A> </xref:System.Security.SecureString.RemoveAt%2A> </xref:System.Security.SecureString.SetAt%2A>       Skrivskydda SecureString objektet när du har definierat den sträng som representerar SecureString objektet kan du anropa dess <xref:System.Security.SecureString.MakeReadOnly%2A>metod för att skrivskydda strängen.</xref:System.Security.SecureString.MakeReadOnly%2A>       Hämta information om objektet SecureString i SecureString klass har bara två medlemmar som innehåller information om strängen: dess <xref:System.Security.SecureString.Length%2A>-egenskap som anger antalet UTF16-kodad kod enheter i strängen; och <xref:System.Security.SecureString.IsReadOnly%2A>, metod som anger om instansen är skrivskyddad.</xref:System.Security.SecureString.IsReadOnly%2A> </xref:System.Security.SecureString.Length%2A>       Frigör minne som allokerats till SecureString-instansen eftersom SecureString implementerar den <xref:System.IDisposable>gränssnittet du släpper minnet genom att anropa den <xref:System.Security.SecureString.Dispose%2A>metoden.</xref:System.Security.SecureString.Dispose%2A> </xref:System.IDisposable>       SecureString klassen har inga medlemmar som inspektera, jämför, eller konvertering av en SecureString. Frånvaron av sådana medlemmar skyddar värdet för instansen av misstag eller skadliga exponering. Använda lämpliga medlemmar i den <xref:System.Runtime.InteropServices.Marshal?displayProperty=fullName>klassen som den <xref:System.Runtime.InteropServices.Marshal.SecureStringToBSTR%2A>metod för att ändra värdet för ett objekt SecureString.</xref:System.Runtime.InteropServices.Marshal.SecureStringToBSTR%2A> </xref:System.Runtime.InteropServices.Marshal?displayProperty=fullName>       .NET Framework-klassbiblioteket används ofta SecureString instanser på följande sätt: – för att tillhandahålla lösenordsinformation till en process med hjälp av den <xref:System.Diagnostics.ProcessStartInfo>strukturen som anropas av en överlagring av den <xref:System.Diagnostics.Process.Start%2A?displayProperty=fullName>metod som har en parameter av typen SecureString.</xref:System.Diagnostics.Process.Start%2A?displayProperty=fullName> </xref:System.Diagnostics.ProcessStartInfo>      -Om du vill ange information om nätverk lösenord genom att anropa en <xref:System.Net.NetworkCredential>klasskonstruktor som har en parameter av typen SecureString eller genom att använda den <xref:System.Net.NetworkCredential.SecurePassword%2A?displayProperty=fullName>egenskapen.</xref:System.Net.NetworkCredential.SecurePassword%2A?displayProperty=fullName> </xref:System.Net.NetworkCredential>      -Om du vill ange lösenordsinformation för SQL Server-autentisering genom att anropa den <xref:System.Data.SqlClient.SqlCredential.%23ctor%2A?displayProperty=fullName>konstruktor eller hämta värdet för den <xref:System.Data.SqlClient.SqlCredential.Password%2A?displayProperty=fullName>egenskapen.</xref:System.Data.SqlClient.SqlCredential.Password%2A?displayProperty=fullName> </xref:System.Data.SqlClient.SqlCredential.%23ctor%2A?displayProperty=fullName>      -Om du vill skicka en sträng till ohanterad kod. Mer information finns i [SecureString och interop](#interop) avsnitt.       [Överst på sidan](#top) <a name=&quot;interop&quot;> </a> ## SecureString och interop eftersom operativsystemet inte stöder direkt SecureString, måste du konvertera värdet för objektet SecureString till typen krävs innan informationen skickas strängen till en inbyggd metod.        Den <xref:System.Runtime.InteropServices.Marshal>klassen har fem metoder som gör:- <xref:System.Runtime.InteropServices.Marshal.SecureStringToBSTR%2A?displayProperty=fullName>, som konverterar SecureString strängvärde till en binär sträng (BSTR) som identifieras av COM.</xref:System.Runtime.InteropServices.Marshal.SecureStringToBSTR%2A?displayProperty=fullName> </xref:System.Runtime.InteropServices.Marshal>      - <xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemAnsi%2A?displayProperty=fullName>och <xref:System.Runtime.InteropServices.Marshal.SecureStringToGlobalAllocAnsi%2A?displayProperty=fullName>, som kopierar strängvärdet SecureString till en ANSI-sträng i det ohanterade minnet.</xref:System.Runtime.InteropServices.Marshal.SecureStringToGlobalAllocAnsi%2A?displayProperty=fullName> </xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemAnsi%2A?displayProperty=fullName>      - <xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemUnicode%2A?displayProperty=fullName>och <xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemUnicode%2A?displayProperty=fullName>, som kopierar strängvärdet SecureString till en Unicode-sträng i det ohanterade minnet.</xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemUnicode%2A?displayProperty=fullName> </xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemUnicode%2A?displayProperty=fullName>       Var och en av dessa metoder skapar en sträng i klartext i ohanterade minnet. Ansvarar för utvecklare till noll och det minne som inte längre behövs. De sträng konvertering och minne allokering metoderna har en motsvarande metod till noll och frigör det allokerade minnet: | Tilldelning och konvertering metoden | Noll och free-metoden |   |--------------------------------------|--------------------------|   | <xref:System.Runtime.InteropServices.Marshal.SecureStringToBSTR%2A?displayProperty=fullName>| <xref:System.Runtime.InteropServices.Marshal.ZeroFreeBSTR%2A?displayProperty=fullName>|   | <xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemAnsi%2A?displayProperty=fullName>| <xref:System.Runtime.InteropServices.Marshal.ZeroFreeCoTaskMemAnsi%2A?displayProperty=fullName>|   | <xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemUnicode%2A?displayProperty=fullName>| <xref:System.Runtime.InteropServices.Marshal.ZeroFreeCoTaskMemUnicode%2A?displayProperty=fullName>|   | <xref:System.Runtime.InteropServices.Marshal.SecureStringToGlobalAllocAnsi%2A?displayProperty=fullName>| <xref:System.Runtime.InteropServices.Marshal.ZeroFreeGlobalAllocAnsi%2A?displayProperty=fullName>|   | <xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemUnicode%2A?displayProperty=fullName>| <xref:System.Runtime.InteropServices.Marshal.ZeroFreeGlobalAllocUnicode%2A?displayProperty=fullName>|       [Back to top](#top)      <a name=&quot;HowSecure&quot;></a>    ## How secure is SecureString?</xref:System.Runtime.InteropServices.Marshal.ZeroFreeGlobalAllocUnicode%2A?displayProperty=fullName></xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemUnicode%2A?displayProperty=fullName></xref:System.Runtime.InteropServices.Marshal.ZeroFreeGlobalAllocAnsi%2A?displayProperty=fullName></xref:System.Runtime.InteropServices.Marshal.SecureStringToGlobalAllocAnsi%2A?displayProperty=fullName></xref:System.Runtime.InteropServices.Marshal.ZeroFreeCoTaskMemUnicode%2A?displayProperty=fullName></xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemUnicode%2A?displayProperty=fullName></xref:System.Runtime.InteropServices.Marshal.ZeroFreeCoTaskMemAnsi%2A?displayProperty=fullName></xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemAnsi%2A?displayProperty=fullName></xref:System.Runtime.InteropServices.Marshal.ZeroFreeBSTR%2A?displayProperty=fullName></xref:System.Runtime.InteropServices.Marshal.SecureStringToBSTR%2A?displayProperty=fullName>    När skapade korrekt skyddar förekomsten SecureString mer data än <xref:System.String>.</xref:System.String> När du skapar en sträng från en källa för tecknet i taget, <xref:System.String>skapar flera mellanliggande i minnet, medan SecureString skapar bara en enda instans.</xref:System.String>  Skräpinsamling för <xref:System.String>objekt är inte entydigt.</xref:System.String> Dessutom, eftersom dess minne inte är fäst skräpinsamlingen ska göra fler kopior av <xref:System.String>värdena när flytta och komprimera minne.</xref:System.String> Däremot är Fäst det minne som allokerats till en sträng objekt och att minnet kan frigöras genom att anropa den <xref:System.Security.SecureString.Dispose%2A>metoden.</xref:System.Security.SecureString.Dispose%2A>       Även om data som lagras i en SecureString-instans är mer säker än data som lagras i en <xref:System.String>instans, det finns betydande begränsningar för hur säker en SecureString instans är nu.</xref:System.String> Dessa omfattar: plattform på Windows operativsystem, innehållet i en SecureString instans interna tecken matrisen är krypterad. Men om på grund av saknas API: er eller problem med nyckelhantering, är kryptering inte tillgänglig på alla plattformar. Därför finns SecureString på skrivbordet (endast Windows) och inte på .NET Core.       Varaktighet jämnt om genomförandet SecureString kan dra nytta av kryptering, den oformaterade texten som tilldelats SecureString instans kan exponeras vid olika tidpunkter: – eftersom Windows inte erbjuder en säker sträng implementering på nivån operativsystem fortfarande .NET Framework har att konvertera strängvärdet säker till dess framställning för oformaterad text för att kunna använda den.      -När värdet för säker sträng ändras av metoder som <xref:System.Security.SecureString.AppendChar%2A>eller <xref:System.Security.SecureString.RemoveAt%2A>, den måste dekrypteras (d.v.s. konverterade tillbaka till oformaterad text), ändras och sedan krypteras de igen.</xref:System.Security.SecureString.RemoveAt%2A> </xref:System.Security.SecureString.AppendChar%2A>      – Om säker sträng används i ett interop-anrop, måste du konvertera den till en ANSI-sträng, en Unicode-sträng eller en binär sträng (BSTR). Mer information finns i [SecureString och interop](#interop) avsnitt.       Tidsintervall som instansen SecureString värdet exponeras förkortas bara jämförelse med <xref:System.String>klass.</xref:System.String>       Lagring jämfört med användningen generellt klassen SecureString definierar du en mekanism för lagring för strängvärden som ska skyddas eller konfidentiella. Men stöder ingen mekanism för användning utanför .NET Framework själva SecureString. Detta innebär att säker sträng måste konverteras till ett användbart format (vanligtvis klartext formulär) som kan tolkas av mål och dekryptering och konvertering måste ske i Användarutrymmet.       Generellt sett SecureString är säkrare än <xref:System.String>eftersom det begränsar exponering av känsliga strängdata.</xref:System.String> Dessa strängar kan dock fortfarande exponeras för varje process eller åtgärd som har tillgång till rå minne, t.ex en skadlig process som körs på värddatorn, en processdump eller en användare visas växlingsfil. I stället för SecureString för skydda lösenord, är det rekommenderade alternativet att använda en täckande referens till autentiseringsuppgifter som lagras utanför processen.       [Överst på sidan](#top)"
  example:
  - "The following example demonstrates how to use a SecureString to secure a user’s password for use as a credential to start a new process.  \n  \n [!code-vb[System.Security.SecureString.Ctor#4](~/add/codesnippet/visualbasic/t-system.security.secure_1.vb)]\n [!code-cs[System.Security.SecureString.Ctor#4](~/add/codesnippet/csharp/t-system.security.secure_1.cs)]"
  syntax:
    content: 'public sealed class SecureString : IDisposable'
  inheritance:
  - System.Object
  implements:
  - System.IDisposable
  inheritedMembers: []
  platform:
  - net462
- uid: System.Security.SecureString.#ctor
  id: '#ctor'
  parent: System.Security.SecureString
  langs:
  - csharp
  name: SecureString()
  nameWithType: SecureString.SecureString()
  fullName: System.Security.SecureString.SecureString()
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "Initierar en ny instans av den <xref href=&quot;System.Security.SecureString&quot;> </xref> klass."
  remarks: ''
  example:
  - "The following example uses the default (or parameterless) constructor to instantiate a new <xref:System.Security.SecureString> object. It then calls the <xref:System.Security.SecureString.AppendChar%2A> method to add an array of characters to it.  \n  \n [!code-cs[System.Security.SecureString.Ctor#2](~/add/codesnippet/csharp/m-system.security.secure_7_1.cs)]\n [!code-cpp[System.Security.SecureString.Ctor#2](~/add/codesnippet/cpp/m-system.security.secure_7_1.cpp)]\n [!code-vb[System.Security.SecureString.Ctor#2](~/add/codesnippet/visualbasic/m-system.security.secure_7_1.vb)]  \n  \n The following example creates a <xref:System.Security.SecureString> object from the value of a <xref:System.String> object.  \n  \n [!code-vb[System.Security.SecureString.Ctor#3](~/add/codesnippet/visualbasic/m-system.security.secure_7_2.vb)]\n [!code-cpp[System.Security.SecureString.Ctor#3](~/add/codesnippet/cpp/m-system.security.secure_7_2.cpp)]\n [!code-cs[System.Security.SecureString.Ctor#3](~/add/codesnippet/csharp/m-system.security.secure_7_2.cs)]"
  syntax:
    content: public SecureString ();
    parameters: []
  overload: System.Security.SecureString.#ctor*
  exceptions:
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "Ett fel uppstod när skyddar eller ändringshistorian bort värdet för den här instansen."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "Den här åtgärden stöds inte på den här plattformen."
  platform:
  - net462
- uid: System.Security.SecureString.#ctor(System.Char*,System.Int32)
  id: '#ctor(System.Char*,System.Int32)'
  parent: System.Security.SecureString
  langs:
  - csharp
  name: SecureString(Char*,Int32)
  nameWithType: SecureString.SecureString(Char*,Int32)
  fullName: System.Security.SecureString.SecureString(Char*,Int32)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "Initierar en ny instans av den <xref href=&quot;System.Security.SecureString&quot;> </xref> klass från en subarray av &lt;xref:System.Char?displayProperty=fullName&gt; objekt.       Den här konstruktorn är inte CLS-kompatibel. Det CLS-kompatibla alternativet är &lt;xref:System.Security.SecureString.%23ctor?displayProperty=fullName&gt;."
  remarks: "Den här konstruktorn initieras den nya <xref:System.Security.SecureString>objekt till antalet tecken i `value` anges av `length`; krypteras sedan värdet för instansen.</xref:System.Security.SecureString>       Den här konstruktorn har definierats i sammanhanget av osäker kod i C#."
  example:
  - "The following example instantiates a new <xref:System.Security.SecureString> object by passing its constructor a pointer to a character array.  \n  \n [!code-cpp[System.Security.SecureString.Ctor2#1](~/add/codesnippet/cpp/m-system.security.secure_3_1.cpp)]\n [!code-cs[System.Security.SecureString.Ctor2#1](~/add/codesnippet/csharp/securestringctor/ctor1.cs#1)]"
  syntax:
    content: public SecureString (char* value, int length);
    parameters:
    - id: value
      type: System.Char*
      description: "En pekare till en matris med &lt;xref:System.Char?displayProperty=fullName&gt; objekt."
    - id: length
      type: System.Int32
      description: "Antalet element i `value` ska ingå i den nya instansen."
  overload: System.Security.SecureString.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>value</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>length</code>är mindre än noll eller större än 65 536."
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "Ett fel uppstod när skyddar eller ändringshistorian bort värdet för den här säker sträng."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "Den här åtgärden stöds inte på den här plattformen."
  platform:
  - net462
- uid: System.Security.SecureString.AppendChar(System.Char)
  id: AppendChar(System.Char)
  parent: System.Security.SecureString
  langs:
  - csharp
  name: AppendChar(Char)
  nameWithType: SecureString.AppendChar(Char)
  fullName: System.Security.SecureString.AppendChar(Char)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "Lägger till ett tecken till slutet av den aktuella säker strängen."
  remarks: "Om implementeringen använder en skyddsmekanism, till exempel kryptering, är värdet för den här säker sträng om någon, som oskyddade; `c` läggs; sedan det nya värdet för säker sträng är skyddad igen."
  example:
  - "The following example demonstrates how the AppendChar, <xref:System.Security.SecureString.InsertAt%2A>, <xref:System.Security.SecureString.RemoveAt%2A>, <xref:System.Security.SecureString.SetAt%2A>, and <xref:System.Security.SecureString.Clear%2A> methods affect the value of a <xref:System.Security.SecureString> object.  \n  \n [!code-cpp[SecureString.xAt#1](~/add/codesnippet/cpp/m-system.security.secure_6_1.cpp)]\n [!code-cs[SecureString.xAt#1](~/add/codesnippet/csharp/m-system.security.secure_6_1.cs)]\n [!code-vb[SecureString.xAt#1](~/add/codesnippet/visualbasic/m-system.security.secure_6_1.vb)]  \n  \n The following example demonstrates how the AppendChar and <xref:System.Security.SecureString.RemoveAt%2A> methods can be used to collect the characters in a password.  \n  \n [!code-cpp[SecureString.xChar#1](~/add/codesnippet/cpp/m-system.security.secure_6_2.cpp)]\n [!code-vb[SecureString.xChar#1](~/add/codesnippet/visualbasic/m-system.security.secure_6_2.vb)]\n [!code-cs[SecureString.xChar#1](~/add/codesnippet/csharp/m-system.security.secure_6_2.cs)]"
  syntax:
    content: public void AppendChar (char c);
    parameters:
    - id: c
      type: System.Char
      description: "Ett tecken som läggs till i den här säker sträng."
  overload: System.Security.SecureString.AppendChar*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Den här säker sträng har redan tagits bort."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Säker strängen är skrivskyddad."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "Utför den här åtgärden gör den här säker strängens längd större än 65 536 tecken."
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "Ett fel uppstod när skyddar eller ändringshistorian bort värdet för den här säker sträng."
  platform:
  - net462
- uid: System.Security.SecureString.Clear
  id: Clear
  parent: System.Security.SecureString
  langs:
  - csharp
  name: Clear()
  nameWithType: SecureString.Clear()
  fullName: System.Security.SecureString.Clear()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "Tar bort värdet för den aktuella säker strängen."
  remarks: "Det minne som innehåller värdet för den här säker sträng nollställs sedan längden på värdet för den här säker sträng har angetts till noll."
  example:
  - "The following example demonstrates how the <xref:System.Security.SecureString.AppendChar%2A>, <xref:System.Security.SecureString.InsertAt%2A>, <xref:System.Security.SecureString.RemoveAt%2A>, <xref:System.Security.SecureString.SetAt%2A>, and Clear methods affect the value of a <xref:System.Security.SecureString> object.  \n  \n [!code-cpp[SecureString.xAt#1](~/add/codesnippet/cpp/m-system.security.secure_5_1.cpp)]\n [!code-cs[SecureString.xAt#1](~/add/codesnippet/csharp/m-system.security.secure_5_1.cs)]\n [!code-vb[SecureString.xAt#1](~/add/codesnippet/visualbasic/m-system.security.secure_5_1.vb)]"
  syntax:
    content: public void Clear ();
    parameters: []
  overload: System.Security.SecureString.Clear*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Den här säker sträng har redan tagits bort."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Säker strängen är skrivskyddad."
  platform:
  - net462
- uid: System.Security.SecureString.Copy
  id: Copy
  parent: System.Security.SecureString
  langs:
  - csharp
  name: Copy()
  nameWithType: SecureString.Copy()
  fullName: System.Security.SecureString.Copy()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "Skapar en kopia av den aktuella säker strängen."
  remarks: "Om en instans av en <xref:System.Security.SecureString>är skrivskyddad, kopiering av instansen är inte skrivskyddad.</xref:System.Security.SecureString>"
  syntax:
    content: public System.Security.SecureString Copy ();
    parameters: []
    return:
      type: System.Security.SecureString
      description: "En dubblett av den här säker sträng."
  overload: System.Security.SecureString.Copy*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Den här säker sträng har redan tagits bort."
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "Ett fel uppstod när skyddar eller ändringshistorian bort värdet för den här säker sträng."
  platform:
  - net462
- uid: System.Security.SecureString.Dispose
  id: Dispose
  parent: System.Security.SecureString
  langs:
  - csharp
  name: Dispose()
  nameWithType: SecureString.Dispose()
  fullName: System.Security.SecureString.Dispose()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "Frigör alla resurser som används av aktuellt <xref href=&quot;System.Security.SecureString&quot;> </xref> objekt."
  remarks: "Metoden Dispose skriver binära nollor till allokerat minne som innehåller värdet för det här <xref:System.Security.SecureString>objekt och frigör det allokerade minnet.</xref:System.Security.SecureString>       Mer information finns i [skräpinsamling](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public void Dispose ();
    parameters: []
  overload: System.Security.SecureString.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Security.SecureString.InsertAt(System.Int32,System.Char)
  id: InsertAt(System.Int32,System.Char)
  parent: System.Security.SecureString
  langs:
  - csharp
  name: InsertAt(Int32,Char)
  nameWithType: SecureString.InsertAt(Int32,Char)
  fullName: System.Security.SecureString.InsertAt(Int32,Char)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "Infogar ett tecken i den här säker sträng vid den angivna positionen."
  remarks: "Indexet är nollbaserade; Det första tecknet i den här säker sträng är vid indexposition noll.       Om implementeringen använder en skyddsmekanism, till exempel kryptering, är värdet för en säker sträng, om någon, som oskyddade; `c` infogas i den angivna indexpositionen; sedan det nya värdet är skyddad igen. Metoden InsertAt ger samma resultat som den <xref:System.Security.SecureString.AppendChar%2A>metod som infogar ett tecken i slutet av en säker sträng om den `index` parameter av InsertAt är inställd på längden på den här instansen.</xref:System.Security.SecureString.AppendChar%2A>"
  example:
  - "The following example demonstrates how the <xref:System.Security.SecureString.AppendChar%2A>, InsertAt, <xref:System.Security.SecureString.RemoveAt%2A>, <xref:System.Security.SecureString.SetAt%2A>, and <xref:System.Security.SecureString.Clear%2A> methods affect the value of a <xref:System.Security.SecureString> object.  \n  \n [!code-cpp[SecureString.xAt#1](~/add/codesnippet/cpp/m-system.security.secure_0_1.cpp)]\n [!code-cs[SecureString.xAt#1](~/add/codesnippet/csharp/m-system.security.secure_0_1.cs)]\n [!code-vb[SecureString.xAt#1](~/add/codesnippet/visualbasic/m-system.security.secure_0_1.vb)]"
  syntax:
    content: public void InsertAt (int index, char c);
    parameters:
    - id: index
      type: System.Int32
      description: "Indexet position där parametern `c` infogas."
    - id: c
      type: System.Char
      description: "Tecknet som ska infogas."
  overload: System.Security.SecureString.InsertAt*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Den här säker sträng har redan tagits bort."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Säker strängen är skrivskyddad."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>index</code>är mindre än noll eller större än längden på den här säker sträng.       - eller - utför den här åtgärden gör den här säker strängens längd större än 65 536 tecken."
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "Ett fel uppstod när skyddar eller ändringshistorian bort värdet för den här säker sträng."
  platform:
  - net462
- uid: System.Security.SecureString.IsReadOnly
  id: IsReadOnly
  parent: System.Security.SecureString
  langs:
  - csharp
  name: IsReadOnly()
  nameWithType: SecureString.IsReadOnly()
  fullName: System.Security.SecureString.IsReadOnly()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "Anger om den här säker sträng är skrivskyddad."
  remarks: "När en instans av <xref:System.Security.SecureString>är skrivskyddad av- <xref:System.Security.SecureString.MakeReadOnly%2A>metoden alla försök att ändra värdet för instansen returnerar <xref:System.InvalidOperationException>.</xref:System.InvalidOperationException> </xref:System.Security.SecureString.MakeReadOnly%2A> </xref:System.Security.SecureString> Använda IsReadOnly-metoden för att testa om en <xref:System.Security.SecureString>är skrivskyddad innan du försöker ändra det.</xref:System.Security.SecureString>"
  syntax:
    content: public bool IsReadOnly ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Om den här säker sträng är skrivskyddad; Annars <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Security.SecureString.IsReadOnly*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Den här säker sträng har redan tagits bort."
  platform:
  - net462
- uid: System.Security.SecureString.Length
  id: Length
  parent: System.Security.SecureString
  langs:
  - csharp
  name: Length
  nameWithType: SecureString.Length
  fullName: System.Security.SecureString.Length
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "Hämtar antalet tecken i den aktuella säker strängen."
  remarks: "Egenskapen Length returnerar antalet <xref:System.Char>objekt i den här instansen, inte antalet Unicode-tecken.</xref:System.Char> Ett Unicode-tecken kan representeras av fler än ett <xref:System.Char>objekt.</xref:System.Char>       Den maximala längden på en <xref:System.Security.SecureString>-instansen är 65 536 tecken.</xref:System.Security.SecureString>"
  syntax:
    content: public int Length { get; }
    return:
      type: System.Int32
      description: "Antalet &lt;xref:System.Char?displayProperty=fullName&gt; objekt i den här säker sträng."
  overload: System.Security.SecureString.Length*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Den här säker sträng har redan tagits bort."
  platform:
  - net462
- uid: System.Security.SecureString.MakeReadOnly
  id: MakeReadOnly
  parent: System.Security.SecureString
  langs:
  - csharp
  name: MakeReadOnly()
  nameWithType: SecureString.MakeReadOnly()
  fullName: System.Security.SecureString.MakeReadOnly()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "Skrivskyddar textvärdet för den här säker sträng."
  remarks: "Initiera textvärdet för en instans av den <xref:System.Security.SecureString>klassen med den <xref:System.Security.SecureString.%23ctor%2A>konstruktorer, och ändra värdet med den <xref:System.Security.SecureString.Clear%2A>, <xref:System.Security.SecureString.RemoveAt%2A>, <xref:System.Security.SecureString.SetAt%2A>, <xref:System.Security.SecureString.InsertAt%2A>, och <xref:System.Security.SecureString.AppendChar%2A>metoder.</xref:System.Security.SecureString.AppendChar%2A> </xref:System.Security.SecureString.InsertAt%2A> </xref:System.Security.SecureString.SetAt%2A> </xref:System.Security.SecureString.RemoveAt%2A> </xref:System.Security.SecureString.Clear%2A> </xref:System.Security.SecureString.%23ctor%2A> </xref:System.Security.SecureString>       När du har gjort ändringarna sista använda metoden MakeReadOnly för att kontrollera värdet för instansen ändras (skrivskyddad). När värdet har markerats som skrivskyddad kan utlöser alla ytterligare försök att ändra den <xref:System.InvalidOperationException>.</xref:System.InvalidOperationException>       Effekten av anropar MakeReadOnly är permanent eftersom den <xref:System.Security.SecureString>klassen inte ger någon möjlighet att göra säker sträng ändringsbar igen.</xref:System.Security.SecureString> Använd den <xref:System.Security.SecureString.IsReadOnly%2A>metod för att testa om en instans av <xref:System.Security.SecureString>är skrivskyddad.</xref:System.Security.SecureString> </xref:System.Security.SecureString.IsReadOnly%2A>"
  example:
  - "The following example demonstrates how the <xref:System.Security.SecureString.AppendChar%2A> and <xref:System.Security.SecureString.RemoveAt%2A> methods can be used to collect the characters in a password. After the password is collected, it is made read-only.  \n  \n [!code-cpp[SecureString.xChar#1](~/add/codesnippet/cpp/m-system.security.secure_1_1.cpp)]\n [!code-vb[SecureString.xChar#1](~/add/codesnippet/visualbasic/m-system.security.secure_1_1.vb)]\n [!code-cs[SecureString.xChar#1](~/add/codesnippet/csharp/m-system.security.secure_1_1.cs)]"
  syntax:
    content: public void MakeReadOnly ();
    parameters: []
  overload: System.Security.SecureString.MakeReadOnly*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Den här säker sträng har redan tagits bort."
  platform:
  - net462
- uid: System.Security.SecureString.RemoveAt(System.Int32)
  id: RemoveAt(System.Int32)
  parent: System.Security.SecureString
  langs:
  - csharp
  name: RemoveAt(Int32)
  nameWithType: SecureString.RemoveAt(Int32)
  fullName: System.Security.SecureString.RemoveAt(Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "Tar bort tecknet vid angivet indexposition från den här säker sträng."
  remarks: "Indexet är nollbaserade; Det första tecknet i den här instansen är vid indexposition noll.       Om implementeringen använder en skyddsmekanism, till exempel kryptering, är värdet för den här säker sträng om någon, som oskyddade; tecknet vid angivet indexposition tas bort. sedan är det nya värdet skyddad igen."
  example:
  - "The following example demonstrates how the <xref:System.Security.SecureString.AppendChar%2A>, <xref:System.Security.SecureString.InsertAt%2A>, RemoveAt, <xref:System.Security.SecureString.SetAt%2A>, and <xref:System.Security.SecureString.Clear%2A> methods affect the value of a <xref:System.Security.SecureString> object.  \n  \n [!code-cpp[SecureString.xAt#1](~/add/codesnippet/cpp/m-system.security.secure_2_1.cpp)]\n [!code-cs[SecureString.xAt#1](~/add/codesnippet/csharp/m-system.security.secure_2_1.cs)]\n [!code-vb[SecureString.xAt#1](~/add/codesnippet/visualbasic/m-system.security.secure_2_1.vb)]  \n  \n The following example demonstrates how the <xref:System.Security.SecureString.AppendChar%2A> and RemoveAt methods can be used to collect the characters in a password.  \n  \n [!code-cpp[SecureString.xChar#1](~/add/codesnippet/cpp/m-system.security.secure_2_2.cpp)]\n [!code-vb[SecureString.xChar#1](~/add/codesnippet/visualbasic/m-system.security.secure_2_2.vb)]\n [!code-cs[SecureString.xChar#1](~/add/codesnippet/csharp/m-system.security.secure_2_2.cs)]"
  syntax:
    content: public void RemoveAt (int index);
    parameters:
    - id: index
      type: System.Int32
      description: "Indexpositionen för tecknet i den här säker sträng."
  overload: System.Security.SecureString.RemoveAt*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Den här säker sträng har redan tagits bort."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Säker strängen är skrivskyddad."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>index</code>är mindre än noll eller större än eller lika med längden på den här säker sträng."
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "Ett fel uppstod när skyddar eller ändringshistorian bort värdet för den här säker sträng."
  platform:
  - net462
- uid: System.Security.SecureString.SetAt(System.Int32,System.Char)
  id: SetAt(System.Int32,System.Char)
  parent: System.Security.SecureString
  langs:
  - csharp
  name: SetAt(Int32,Char)
  nameWithType: SecureString.SetAt(Int32,Char)
  fullName: System.Security.SecureString.SetAt(Int32,Char)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "Ersätter det befintliga tecknet vid position angivna indexet med ett annat tecken."
  remarks: "Indexet är nollbaserade; Det första tecknet i den här instansen är vid indexposition noll.       Om implementeringen använder en skyddsmekanism, till exempel kryptering, är värdet för en säker sträng, om någon, som oskyddade; `c` tilldelas till den angivna indexpositionen; sedan det nya värdet är skyddad igen."
  example:
  - "The following example demonstrates how the <xref:System.Security.SecureString.AppendChar%2A>, <xref:System.Security.SecureString.InsertAt%2A>, <xref:System.Security.SecureString.RemoveAt%2A>, SetAt, and <xref:System.Security.SecureString.Clear%2A> methods affect the value of a <xref:System.Security.SecureString> object.  \n  \n [!code-cpp[SecureString.xAt#1](~/add/codesnippet/cpp/m-system.security.secure_4_1.cpp)]\n [!code-cs[SecureString.xAt#1](~/add/codesnippet/csharp/m-system.security.secure_4_1.cs)]\n [!code-vb[SecureString.xAt#1](~/add/codesnippet/visualbasic/m-system.security.secure_4_1.vb)]"
  syntax:
    content: public void SetAt (int index, char c);
    parameters:
    - id: index
      type: System.Int32
      description: "Indexpositionen för ett befintligt tecken i den här säker sträng"
    - id: c
      type: System.Char
      description: "Ett tecken som ersätter det befintliga tecknet."
  overload: System.Security.SecureString.SetAt*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Den här säker sträng har redan tagits bort."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Säker strängen är skrivskyddad."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>index</code>är mindre än noll eller större än eller lika med längden på den här säker sträng."
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "Ett fel uppstod när skyddar eller ändringshistorian bort värdet för den här säker sträng."
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Security.Cryptography.CryptographicException
  parent: System.Security.Cryptography
  isExternal: false
  name: CryptographicException
  nameWithType: CryptographicException
  fullName: System.Security.Cryptography.CryptographicException
- uid: System.NotSupportedException
  isExternal: true
  name: System.NotSupportedException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.ObjectDisposedException
  isExternal: true
  name: System.ObjectDisposedException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.Security.SecureString.#ctor
  parent: System.Security.SecureString
  isExternal: false
  name: SecureString()
  nameWithType: SecureString.SecureString()
  fullName: System.Security.SecureString.SecureString()
- uid: System.Security.SecureString.#ctor(System.Char*,System.Int32)
  parent: System.Security.SecureString
  isExternal: false
  name: SecureString(Char*,Int32)
  nameWithType: SecureString.SecureString(Char*,Int32)
  fullName: System.Security.SecureString.SecureString(Char*,Int32)
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Security.SecureString.AppendChar(System.Char)
  parent: System.Security.SecureString
  isExternal: false
  name: AppendChar(Char)
  nameWithType: SecureString.AppendChar(Char)
  fullName: System.Security.SecureString.AppendChar(Char)
- uid: System.Char
  parent: System
  isExternal: true
  name: Char
  nameWithType: Char
  fullName: System.Char
- uid: System.Security.SecureString.Clear
  parent: System.Security.SecureString
  isExternal: false
  name: Clear()
  nameWithType: SecureString.Clear()
  fullName: System.Security.SecureString.Clear()
- uid: System.Security.SecureString.Copy
  parent: System.Security.SecureString
  isExternal: false
  name: Copy()
  nameWithType: SecureString.Copy()
  fullName: System.Security.SecureString.Copy()
- uid: System.Security.SecureString
  parent: System.Security
  isExternal: false
  name: SecureString
  nameWithType: SecureString
  fullName: System.Security.SecureString
- uid: System.Security.SecureString.Dispose
  parent: System.Security.SecureString
  isExternal: false
  name: Dispose()
  nameWithType: SecureString.Dispose()
  fullName: System.Security.SecureString.Dispose()
- uid: System.Security.SecureString.InsertAt(System.Int32,System.Char)
  parent: System.Security.SecureString
  isExternal: false
  name: InsertAt(Int32,Char)
  nameWithType: SecureString.InsertAt(Int32,Char)
  fullName: System.Security.SecureString.InsertAt(Int32,Char)
- uid: System.Security.SecureString.IsReadOnly
  parent: System.Security.SecureString
  isExternal: false
  name: IsReadOnly()
  nameWithType: SecureString.IsReadOnly()
  fullName: System.Security.SecureString.IsReadOnly()
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Security.SecureString.Length
  parent: System.Security.SecureString
  isExternal: false
  name: Length
  nameWithType: SecureString.Length
  fullName: System.Security.SecureString.Length
- uid: System.Security.SecureString.MakeReadOnly
  parent: System.Security.SecureString
  isExternal: false
  name: MakeReadOnly()
  nameWithType: SecureString.MakeReadOnly()
  fullName: System.Security.SecureString.MakeReadOnly()
- uid: System.Security.SecureString.RemoveAt(System.Int32)
  parent: System.Security.SecureString
  isExternal: false
  name: RemoveAt(Int32)
  nameWithType: SecureString.RemoveAt(Int32)
  fullName: System.Security.SecureString.RemoveAt(Int32)
- uid: System.Security.SecureString.SetAt(System.Int32,System.Char)
  parent: System.Security.SecureString
  isExternal: false
  name: SetAt(Int32,Char)
  nameWithType: SecureString.SetAt(Int32,Char)
  fullName: System.Security.SecureString.SetAt(Int32,Char)
- uid: System.Security.SecureString.#ctor*
  parent: System.Security.SecureString
  isExternal: false
  name: SecureString
  nameWithType: SecureString.SecureString
- uid: System.Security.SecureString.AppendChar*
  parent: System.Security.SecureString
  isExternal: false
  name: AppendChar
  nameWithType: SecureString.AppendChar
- uid: System.Security.SecureString.Clear*
  parent: System.Security.SecureString
  isExternal: false
  name: Clear
  nameWithType: SecureString.Clear
- uid: System.Security.SecureString.Copy*
  parent: System.Security.SecureString
  isExternal: false
  name: Copy
  nameWithType: SecureString.Copy
- uid: System.Security.SecureString.Dispose*
  parent: System.Security.SecureString
  isExternal: false
  name: Dispose
  nameWithType: SecureString.Dispose
- uid: System.Security.SecureString.InsertAt*
  parent: System.Security.SecureString
  isExternal: false
  name: InsertAt
  nameWithType: SecureString.InsertAt
- uid: System.Security.SecureString.IsReadOnly*
  parent: System.Security.SecureString
  isExternal: false
  name: IsReadOnly
  nameWithType: SecureString.IsReadOnly
- uid: System.Security.SecureString.Length*
  parent: System.Security.SecureString
  isExternal: false
  name: Length
  nameWithType: SecureString.Length
- uid: System.Security.SecureString.MakeReadOnly*
  parent: System.Security.SecureString
  isExternal: false
  name: MakeReadOnly
  nameWithType: SecureString.MakeReadOnly
- uid: System.Security.SecureString.RemoveAt*
  parent: System.Security.SecureString
  isExternal: false
  name: RemoveAt
  nameWithType: SecureString.RemoveAt
- uid: System.Security.SecureString.SetAt*
  parent: System.Security.SecureString
  isExternal: false
  name: SetAt
  nameWithType: SecureString.SetAt
