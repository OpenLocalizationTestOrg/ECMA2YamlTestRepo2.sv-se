### YamlMime:ManagedReference
items:
- uid: System.Security.Cryptography.ICryptoTransform
  id: ICryptoTransform
  children:
  - System.Security.Cryptography.ICryptoTransform.CanReuseTransform
  - System.Security.Cryptography.ICryptoTransform.CanTransformMultipleBlocks
  - System.Security.Cryptography.ICryptoTransform.InputBlockSize
  - System.Security.Cryptography.ICryptoTransform.OutputBlockSize
  - System.Security.Cryptography.ICryptoTransform.TransformBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)
  - System.Security.Cryptography.ICryptoTransform.TransformFinalBlock(System.Byte[],System.Int32,System.Int32)
  langs:
  - csharp
  name: ICryptoTransform
  nameWithType: ICryptoTransform
  fullName: System.Security.Cryptography.ICryptoTransform
  type: Interface
  summary: "Definierar de grundläggande åtgärderna kryptografiska transformationer."
  remarks: "Hash-algoritmer är ett exempel på kryptografiska transformationer (<xref:System.Security.Cryptography.HashAlgorithm>).</xref:System.Security.Cryptography.HashAlgorithm>"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public interface ICryptoTransform : IDisposable
  implements:
  - System.IDisposable
  platform:
  - net462
- uid: System.Security.Cryptography.ICryptoTransform.CanReuseTransform
  id: CanReuseTransform
  parent: System.Security.Cryptography.ICryptoTransform
  langs:
  - csharp
  name: CanReuseTransform
  nameWithType: ICryptoTransform.CanReuseTransform
  fullName: System.Security.Cryptography.ICryptoTransform.CanReuseTransform
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Hämtar ett värde som anger om den aktuella transformeringen kan återanvändas."
  syntax:
    content: public bool CanReuseTransform { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Om den aktuella transformeringen kan återanvändas; Annars <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Security.Cryptography.ICryptoTransform.CanReuseTransform*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.ICryptoTransform.CanTransformMultipleBlocks
  id: CanTransformMultipleBlocks
  parent: System.Security.Cryptography.ICryptoTransform
  langs:
  - csharp
  name: CanTransformMultipleBlocks
  nameWithType: ICryptoTransform.CanTransformMultipleBlocks
  fullName: System.Security.Cryptography.ICryptoTransform.CanTransformMultipleBlocks
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Hämtar ett värde som anger om flera block kan omvandlas."
  syntax:
    content: public bool CanTransformMultipleBlocks { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Om flera block kan omvandlas; Annars <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Security.Cryptography.ICryptoTransform.CanTransformMultipleBlocks*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.ICryptoTransform.InputBlockSize
  id: InputBlockSize
  parent: System.Security.Cryptography.ICryptoTransform
  langs:
  - csharp
  name: InputBlockSize
  nameWithType: ICryptoTransform.InputBlockSize
  fullName: System.Security.Cryptography.ICryptoTransform.InputBlockSize
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Hämtar inkommande blockstorleken."
  syntax:
    content: public int InputBlockSize { get; }
    return:
      type: System.Int32
      description: "Storleken på indata blockerar i byte."
  overload: System.Security.Cryptography.ICryptoTransform.InputBlockSize*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.ICryptoTransform.OutputBlockSize
  id: OutputBlockSize
  parent: System.Security.Cryptography.ICryptoTransform
  langs:
  - csharp
  name: OutputBlockSize
  nameWithType: ICryptoTransform.OutputBlockSize
  fullName: System.Security.Cryptography.ICryptoTransform.OutputBlockSize
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Hämtar blockstorleken utdata."
  syntax:
    content: public int OutputBlockSize { get; }
    return:
      type: System.Int32
      description: "Storleken på utdata blockerar i byte."
  overload: System.Security.Cryptography.ICryptoTransform.OutputBlockSize*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.ICryptoTransform.TransformBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)
  id: TransformBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)
  parent: System.Security.Cryptography.ICryptoTransform
  langs:
  - csharp
  name: TransformBlock(Byte[],Int32,Int32,Byte[],Int32)
  nameWithType: ICryptoTransform.TransformBlock(Byte[],Int32,Int32,Byte[],Int32)
  fullName: System.Security.Cryptography.ICryptoTransform.TransformBlock(Byte[],Int32,Int32,Byte[],Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Omvandlar regionen för inkommande byte-matris och kopierar den resulterande transformeringen till den angivna regionen av utgående byte-matris."
  syntax:
    content: public int TransformBlock (byte[] inputBuffer, int inputOffset, int inputCount, byte[] outputBuffer, int outputOffset);
    parameters:
    - id: inputBuffer
      type: System.Byte[]
      description: "Indata som du vill beräkna transformationen."
    - id: inputOffset
      type: System.Int32
      description: "Förskjutning i inkommande byte-matris som du vill börja använda data."
    - id: inputCount
      type: System.Int32
      description: "Antal byte i den inkommande Bytematrisen ska användas som data."
    - id: outputBuffer
      type: System.Byte[]
      description: "Utdata som du vill skriva transformeringen."
    - id: outputOffset
      type: System.Int32
      description: "Förskjutningen i byte-matris för utdata som du vill börja skriva data."
    return:
      type: System.Int32
      description: "Antalet skrivna byte."
  overload: System.Security.Cryptography.ICryptoTransform.TransformBlock*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.ICryptoTransform.TransformFinalBlock(System.Byte[],System.Int32,System.Int32)
  id: TransformFinalBlock(System.Byte[],System.Int32,System.Int32)
  parent: System.Security.Cryptography.ICryptoTransform
  langs:
  - csharp
  name: TransformFinalBlock(Byte[],Int32,Int32)
  nameWithType: ICryptoTransform.TransformFinalBlock(Byte[],Int32,Int32)
  fullName: System.Security.Cryptography.ICryptoTransform.TransformFinalBlock(Byte[],Int32,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Transformerar regionen för den angivna byte-matrisen."
  remarks: "TransformFinalBlock är en särskild funktion för att överföra det sista blocket eller ett partiellt block i dataströmmen. Returnerar en ny matris som innehåller de återstående omvandlade byte. En ny matris returneras eftersom mängden information som returneras i slutet kan vara större än ett enda block när utfyllnad läggs."
  syntax:
    content: public byte[] TransformFinalBlock (byte[] inputBuffer, int inputOffset, int inputCount);
    parameters:
    - id: inputBuffer
      type: System.Byte[]
      description: "Indata som du vill beräkna transformationen."
    - id: inputOffset
      type: System.Int32
      description: "Förskjutningen i Bytematrisen som du vill börja använda data."
    - id: inputCount
      type: System.Int32
      description: "Antal byte i byte-matris ska användas som data."
    return:
      type: System.Byte[]
      description: "Beräknad transformeringen."
  overload: System.Security.Cryptography.ICryptoTransform.TransformFinalBlock*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Security.Cryptography.ICryptoTransform.CanReuseTransform
  parent: System.Security.Cryptography.ICryptoTransform
  isExternal: false
  name: CanReuseTransform
  nameWithType: ICryptoTransform.CanReuseTransform
  fullName: System.Security.Cryptography.ICryptoTransform.CanReuseTransform
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Security.Cryptography.ICryptoTransform.CanTransformMultipleBlocks
  parent: System.Security.Cryptography.ICryptoTransform
  isExternal: false
  name: CanTransformMultipleBlocks
  nameWithType: ICryptoTransform.CanTransformMultipleBlocks
  fullName: System.Security.Cryptography.ICryptoTransform.CanTransformMultipleBlocks
- uid: System.Security.Cryptography.ICryptoTransform.InputBlockSize
  parent: System.Security.Cryptography.ICryptoTransform
  isExternal: false
  name: InputBlockSize
  nameWithType: ICryptoTransform.InputBlockSize
  fullName: System.Security.Cryptography.ICryptoTransform.InputBlockSize
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Security.Cryptography.ICryptoTransform.OutputBlockSize
  parent: System.Security.Cryptography.ICryptoTransform
  isExternal: false
  name: OutputBlockSize
  nameWithType: ICryptoTransform.OutputBlockSize
  fullName: System.Security.Cryptography.ICryptoTransform.OutputBlockSize
- uid: System.Security.Cryptography.ICryptoTransform.TransformBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)
  parent: System.Security.Cryptography.ICryptoTransform
  isExternal: false
  name: TransformBlock(Byte[],Int32,Int32,Byte[],Int32)
  nameWithType: ICryptoTransform.TransformBlock(Byte[],Int32,Int32,Byte[],Int32)
  fullName: System.Security.Cryptography.ICryptoTransform.TransformBlock(Byte[],Int32,Int32,Byte[],Int32)
- uid: System.Byte[]
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: Byte[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Security.Cryptography.ICryptoTransform.TransformFinalBlock(System.Byte[],System.Int32,System.Int32)
  parent: System.Security.Cryptography.ICryptoTransform
  isExternal: false
  name: TransformFinalBlock(Byte[],Int32,Int32)
  nameWithType: ICryptoTransform.TransformFinalBlock(Byte[],Int32,Int32)
  fullName: System.Security.Cryptography.ICryptoTransform.TransformFinalBlock(Byte[],Int32,Int32)
- uid: System.Security.Cryptography.ICryptoTransform.CanReuseTransform*
  parent: System.Security.Cryptography.ICryptoTransform
  isExternal: false
  name: CanReuseTransform
  nameWithType: ICryptoTransform.CanReuseTransform
- uid: System.Security.Cryptography.ICryptoTransform.CanTransformMultipleBlocks*
  parent: System.Security.Cryptography.ICryptoTransform
  isExternal: false
  name: CanTransformMultipleBlocks
  nameWithType: ICryptoTransform.CanTransformMultipleBlocks
- uid: System.Security.Cryptography.ICryptoTransform.InputBlockSize*
  parent: System.Security.Cryptography.ICryptoTransform
  isExternal: false
  name: InputBlockSize
  nameWithType: ICryptoTransform.InputBlockSize
- uid: System.Security.Cryptography.ICryptoTransform.OutputBlockSize*
  parent: System.Security.Cryptography.ICryptoTransform
  isExternal: false
  name: OutputBlockSize
  nameWithType: ICryptoTransform.OutputBlockSize
- uid: System.Security.Cryptography.ICryptoTransform.TransformBlock*
  parent: System.Security.Cryptography.ICryptoTransform
  isExternal: false
  name: TransformBlock
  nameWithType: ICryptoTransform.TransformBlock
- uid: System.Security.Cryptography.ICryptoTransform.TransformFinalBlock*
  parent: System.Security.Cryptography.ICryptoTransform
  isExternal: false
  name: TransformFinalBlock
  nameWithType: ICryptoTransform.TransformFinalBlock
