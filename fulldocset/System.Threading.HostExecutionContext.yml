### YamlMime:ManagedReference
items:
- uid: System.Threading.HostExecutionContext
  id: HostExecutionContext
  children:
  - System.Threading.HostExecutionContext.#ctor
  - System.Threading.HostExecutionContext.#ctor(System.Object)
  - System.Threading.HostExecutionContext.CreateCopy
  - System.Threading.HostExecutionContext.Dispose
  - System.Threading.HostExecutionContext.Dispose(System.Boolean)
  - System.Threading.HostExecutionContext.State
  langs:
  - csharp
  name: HostExecutionContext
  nameWithType: HostExecutionContext
  fullName: System.Threading.HostExecutionContext
  type: Class
  summary: "Kapslar och sprider värden körningskontexten olika trådar."
  remarks: "HostExecutionContext är en del av en större <xref:System.Threading.ExecutionContext>.</xref:System.Threading.ExecutionContext> Kontexten värden migrerar eller flödar med körningskontexten skapades."
  syntax:
    content: 'public class HostExecutionContext : IDisposable'
  inheritance:
  - System.Object
  implements:
  - System.IDisposable
  inheritedMembers: []
  platform:
  - net462
- uid: System.Threading.HostExecutionContext.#ctor
  id: '#ctor'
  parent: System.Threading.HostExecutionContext
  langs:
  - csharp
  name: HostExecutionContext()
  nameWithType: HostExecutionContext.HostExecutionContext()
  fullName: System.Threading.HostExecutionContext.HostExecutionContext()
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Threading
  summary: "Initierar en ny instans av den <xref href=&quot;System.Threading.HostExecutionContext&quot;> </xref> klass."
  remarks: "Standardkonstruktorn skapar en värd körningskontexten vars <xref:System.Threading.HostExecutionContext.State%2A>egenskapsvärde är `null`.</xref:System.Threading.HostExecutionContext.State%2A>"
  syntax:
    content: public HostExecutionContext ();
    parameters: []
  overload: System.Threading.HostExecutionContext.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Threading.HostExecutionContext.#ctor(System.Object)
  id: '#ctor(System.Object)'
  parent: System.Threading.HostExecutionContext
  langs:
  - csharp
  name: HostExecutionContext(Object)
  nameWithType: HostExecutionContext.HostExecutionContext(Object)
  fullName: System.Threading.HostExecutionContext.HostExecutionContext(Object)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Threading
  summary: "Initierar en ny instans av den <xref href=&quot;System.Threading.HostExecutionContext&quot;> </xref> klassen med det angivna tillståndet."
  remarks: "<xref:System.Threading.HostExecutionContext>Ingår i <xref:System.Threading.ExecutionContext>.</xref:System.Threading.ExecutionContext> </xref:System.Threading.HostExecutionContext> Den `state` representerar en safe-referensen som innehåller den `IUnknown` pekare för värden."
  syntax:
    content: public HostExecutionContext (object state);
    parameters:
    - id: state
      type: System.Object
      description: "Ett objekt som representerar värden kontexten körningstillstånd."
  overload: System.Threading.HostExecutionContext.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Threading.HostExecutionContext.CreateCopy
  id: CreateCopy
  parent: System.Threading.HostExecutionContext
  langs:
  - csharp
  name: CreateCopy()
  nameWithType: HostExecutionContext.CreateCopy()
  fullName: System.Threading.HostExecutionContext.CreateCopy()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading
  summary: "Skapar en kopia av den aktuella värd körningskontexten."
  remarks: "Kopian kan användas som parameter för en <xref:System.Threading.HostExecutionContextManager.SetHostExecutionContext%2A?displayProperty=fullName>metodanrop.</xref:System.Threading.HostExecutionContextManager.SetHostExecutionContext%2A?displayProperty=fullName>"
  syntax:
    content: public virtual System.Threading.HostExecutionContext CreateCopy ();
    parameters: []
    return:
      type: System.Threading.HostExecutionContext
      description: "En <xref href=&quot;System.Threading.HostExecutionContext&quot;> </xref> objekt som representerar värden kontexten för den aktuella tråden."
  overload: System.Threading.HostExecutionContext.CreateCopy*
  exceptions: []
  platform:
  - net462
- uid: System.Threading.HostExecutionContext.Dispose
  id: Dispose
  parent: System.Threading.HostExecutionContext
  langs:
  - csharp
  name: Dispose()
  nameWithType: HostExecutionContext.Dispose()
  fullName: System.Threading.HostExecutionContext.Dispose()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading
  summary: "Frigör alla resurser som används av den aktuella instansen av den <xref href=&quot;System.Threading.HostExecutionContext&quot;> </xref> klass."
  remarks: "Anropa `Dispose` när du är klar med hjälp av <xref:System.Threading.HostExecutionContext>.</xref:System.Threading.HostExecutionContext> Den `Dispose` metoden lämnar kvar det <xref:System.Threading.HostExecutionContext>oanvändbar.</xref:System.Threading.HostExecutionContext> Efter att `Dispose`, måste du släppa alla referenser till den <xref:System.Threading.HostExecutionContext>så skräpinsamlingen kan frigöra minne som den <xref:System.Threading.HostExecutionContext>var upptar.</xref:System.Threading.HostExecutionContext> </xref:System.Threading.HostExecutionContext>       Mer information finns i [Rensa ohanterade resurser](~/add/includes/ajax-current-ext-md.md) och [implementera en metod för ta bort](~/add/includes/ajax-current-ext-md.md).      > [!NOTE] > Alltid anropet `Dispose` innan du släpper senaste referens till <xref:System.Threading.HostExecutionContext>.</xref:System.Threading.HostExecutionContext> De resurser som den använder frigörs annars inte förrän skräpinsamlingen anrop av <xref:System.Threading.HostExecutionContext>objektets `Finalize` metod.</xref:System.Threading.HostExecutionContext>"
  syntax:
    content: public void Dispose ();
    parameters: []
  overload: System.Threading.HostExecutionContext.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Threading.HostExecutionContext.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.Threading.HostExecutionContext
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: HostExecutionContext.Dispose(Boolean)
  fullName: System.Threading.HostExecutionContext.Dispose(Boolean)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading
  summary: "När åsidosätts i en härledd klass släpper de ohanterade resurser som används av den <xref:System.Threading.WaitHandle>, och du kan också släpper hanterade resurser.</xref:System.Threading.WaitHandle>"
  remarks: "Den här metoden anropas av den <xref:System.Threading.HostExecutionContext.Dispose>metodöverlagringen och slutföraren.</xref:System.Threading.HostExecutionContext.Dispose> <xref:System.Threading.HostExecutionContext.Dispose>anropar den här metoden som är skyddade med den `disposing` parametern `true`.</xref:System.Threading.HostExecutionContext.Dispose> Slutföraren anropar den här metoden med `disposing` inställd på `false`.       När den `disposing` parametern är `true`, den här metoden Frigör alla resurser som innehas av alla hanterade objekt som den här <xref:System.Threading.HostExecutionContext>referenser.</xref:System.Threading.HostExecutionContext> Den här metoden startar den `Dispose` metod för varje refererade till objekt.       Den här metoden kan anropas flera gånger av andra objekt. När åsidosätta den här metoden vara noga med att inte referera till objekt som tidigare har tagits bort i ett tidigare anrop."
  syntax:
    content: public virtual void Dispose (bool disposing);
    parameters:
    - id: disposing
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Frisläpp både hanterade och ohanterade resurser. <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> att släppa endast resurser som inte hanteras."
  overload: System.Threading.HostExecutionContext.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Threading.HostExecutionContext.State
  id: State
  parent: System.Threading.HostExecutionContext
  langs:
  - csharp
  name: State
  nameWithType: HostExecutionContext.State
  fullName: System.Threading.HostExecutionContext.State
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Threading
  summary: "Hämtar eller anger tillståndet för körningskontexten värden."
  remarks: "Värdet för egenskapen State representerar en safe-referensen som innehåller den `IUnknown` pekare för värden."
  syntax:
    content: protected object State { get; set; }
    return:
      type: System.Object
      description: "Ett objekt som representerar värden kontexten körningstillstånd."
  overload: System.Threading.HostExecutionContext.State*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Threading.HostExecutionContext.#ctor
  parent: System.Threading.HostExecutionContext
  isExternal: false
  name: HostExecutionContext()
  nameWithType: HostExecutionContext.HostExecutionContext()
  fullName: System.Threading.HostExecutionContext.HostExecutionContext()
- uid: System.Threading.HostExecutionContext.#ctor(System.Object)
  parent: System.Threading.HostExecutionContext
  isExternal: false
  name: HostExecutionContext(Object)
  nameWithType: HostExecutionContext.HostExecutionContext(Object)
  fullName: System.Threading.HostExecutionContext.HostExecutionContext(Object)
- uid: System.Threading.HostExecutionContext.CreateCopy
  parent: System.Threading.HostExecutionContext
  isExternal: false
  name: CreateCopy()
  nameWithType: HostExecutionContext.CreateCopy()
  fullName: System.Threading.HostExecutionContext.CreateCopy()
- uid: System.Threading.HostExecutionContext
  parent: System.Threading
  isExternal: false
  name: HostExecutionContext
  nameWithType: HostExecutionContext
  fullName: System.Threading.HostExecutionContext
- uid: System.Threading.HostExecutionContext.Dispose
  parent: System.Threading.HostExecutionContext
  isExternal: false
  name: Dispose()
  nameWithType: HostExecutionContext.Dispose()
  fullName: System.Threading.HostExecutionContext.Dispose()
- uid: System.Threading.HostExecutionContext.Dispose(System.Boolean)
  parent: System.Threading.HostExecutionContext
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: HostExecutionContext.Dispose(Boolean)
  fullName: System.Threading.HostExecutionContext.Dispose(Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Threading.HostExecutionContext.State
  parent: System.Threading.HostExecutionContext
  isExternal: false
  name: State
  nameWithType: HostExecutionContext.State
  fullName: System.Threading.HostExecutionContext.State
- uid: System.Threading.HostExecutionContext.#ctor*
  parent: System.Threading.HostExecutionContext
  isExternal: false
  name: HostExecutionContext
  nameWithType: HostExecutionContext.HostExecutionContext
- uid: System.Threading.HostExecutionContext.CreateCopy*
  parent: System.Threading.HostExecutionContext
  isExternal: false
  name: CreateCopy
  nameWithType: HostExecutionContext.CreateCopy
- uid: System.Threading.HostExecutionContext.Dispose*
  parent: System.Threading.HostExecutionContext
  isExternal: false
  name: Dispose
  nameWithType: HostExecutionContext.Dispose
- uid: System.Threading.HostExecutionContext.State*
  parent: System.Threading.HostExecutionContext
  isExternal: false
  name: State
  nameWithType: HostExecutionContext.State
