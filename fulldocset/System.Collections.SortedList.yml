### YamlMime:ManagedReference
items:
- uid: System.Collections.SortedList
  id: SortedList
  children:
  - System.Collections.SortedList.#ctor
  - System.Collections.SortedList.#ctor(System.Collections.IComparer)
  - System.Collections.SortedList.#ctor(System.Collections.IDictionary)
  - System.Collections.SortedList.#ctor(System.Int32)
  - System.Collections.SortedList.#ctor(System.Collections.IComparer,System.Int32)
  - System.Collections.SortedList.#ctor(System.Collections.IDictionary,System.Collections.IComparer)
  - System.Collections.SortedList.Add(System.Object,System.Object)
  - System.Collections.SortedList.Capacity
  - System.Collections.SortedList.Clear
  - System.Collections.SortedList.Clone
  - System.Collections.SortedList.Contains(System.Object)
  - System.Collections.SortedList.ContainsKey(System.Object)
  - System.Collections.SortedList.ContainsValue(System.Object)
  - System.Collections.SortedList.CopyTo(System.Array,System.Int32)
  - System.Collections.SortedList.Count
  - System.Collections.SortedList.GetByIndex(System.Int32)
  - System.Collections.SortedList.GetEnumerator
  - System.Collections.SortedList.GetKey(System.Int32)
  - System.Collections.SortedList.GetKeyList
  - System.Collections.SortedList.GetValueList
  - System.Collections.SortedList.IndexOfKey(System.Object)
  - System.Collections.SortedList.IndexOfValue(System.Object)
  - System.Collections.SortedList.IsFixedSize
  - System.Collections.SortedList.IsReadOnly
  - System.Collections.SortedList.IsSynchronized
  - System.Collections.SortedList.Item(System.Object)
  - System.Collections.SortedList.Keys
  - System.Collections.SortedList.Remove(System.Object)
  - System.Collections.SortedList.RemoveAt(System.Int32)
  - System.Collections.SortedList.SetByIndex(System.Int32,System.Object)
  - System.Collections.SortedList.Synchronized(System.Collections.SortedList)
  - System.Collections.SortedList.SyncRoot
  - System.Collections.SortedList.System#Collections#IEnumerable#GetEnumerator
  - System.Collections.SortedList.TrimToSize
  - System.Collections.SortedList.Values
  langs:
  - csharp
  name: SortedList
  nameWithType: SortedList
  fullName: System.Collections.SortedList
  type: Class
  summary: "Representerar en samling med nyckel/värde-par som sorteras efter nycklarna och är tillgängliga genom nyckel och index."
  remarks: "Den allmänna versionen av den här samlingen finns <xref:System.Collections.Generic.SortedList%602?displayProperty=fullName>.</xref:System.Collections.Generic.SortedList%602?displayProperty=fullName>       Elementet SortedList kan användas av dess nyckel som ett element i någon <xref:System.Collections.IDictionary>implementering eller dess index som ett element i någon <xref:System.Collections.IList>implementering.</xref:System.Collections.IList> </xref:System.Collections.IDictionary>       En SortedList objekt upprätthåller internt två matriser för att lagra elementen i listan. det vill säga en matris för nycklar och en annan matris för de associerade värdena. Varje element är ett nyckel/värde-par som kan användas som en <xref:System.Collections.DictionaryEntry>objektet.</xref:System.Collections.DictionaryEntry> En nyckel kan inte vara `null`, men kan vara ett värde.       Antalet element i SortedList kan innehålla har kapacitet för ett SortedList-objekt. Som läggs till i en SortedList, ökas automatiskt kapaciteten som krävs genom omfördelning. Kapaciteten kan minskas genom att anropa <xref:System.Collections.SortedList.TrimToSize%2A>eller genom att ange den <xref:System.Collections.SortedList.Capacity%2A>egenskapen uttryckligen.</xref:System.Collections.SortedList.Capacity%2A> </xref:System.Collections.SortedList.TrimToSize%2A>       För mycket stora SortedList objekt du kan öka den maximala kapaciteten till 2 miljarder element på ett 64-bitars system genom att ange den `enabled` attribut för konfigurationselementet till `true` i-körningsmiljön.       Elementen i ett SortedList objekt sorteras efter nycklarna antingen enligt ett visst <xref:System.Collections.IComparer>genomförandet som anges när SortedList skapas eller enligt de <xref:System.IComparable>implementering som tillhandahålls av nycklar sig.</xref:System.IComparable> </xref:System.Collections.IComparer> I båda fallen tillåter inte en SortedList dubblettnycklar.       Index-sekvensen är baserad på Sortera sekvensen. När ett element läggs den infogas i SortedList i rätt sorteringsordning och indexeringen justeras enligt detta. När ett element har tagits bort, justeras indexeringen därför också. Därför ändras index för en viss nyckel/värde-par som läggs till eller tas bort från objektet SortedList element.       Åtgärder på ett SortedList objekt brukar vara lägre än åtgärder på en <xref:System.Collections.Hashtable>objektet på grund av sorteringen.</xref:System.Collections.Hashtable> Men ger SortedList bättre flexibilitet genom att tillåta åtkomst till värden via de tillhörande nycklarna eller index.       Element i denna mängd kan nås med ett heltalsindex.  Index i den här samlingen är nollbaserade.       Den `foreach` satsen i C#-språk (`for each` i Visual Basic) returnerar ett objekt av typen element i mängden. Eftersom varje element i SortedList-objektet är ett nyckel/värde-par, är elementtypen inte typ av nyckeln eller typ av värde. Elementtypen är snarare <xref:System.Collections.DictionaryEntry>.</xref:System.Collections.DictionaryEntry> Till exempel: [!code-cpp [klassiska SortedList exempel&#2;](~/add/codesnippet/cpp/t-system.collections.sor_1.cpp)][!code-cs[klassiska SortedList exempel&#2;](~/add/codesnippet/csharp/t-system.collections.sor_1.cs)][!code-vb[klassiska SortedList exempel&#2;](~/add/codesnippet/visualbasic/t-system.collections.sor_1.vb) ] den `foreach` -instruktionen är en omslutning runt uppräknaren, vilket gör att bara läsa från skriver inte i samlingen.    "
  example:
  - "The following code example shows how to create and initialize a SortedList object and how to print out its keys and values.  \n  \n [!code-cpp[Classic SortedList Example#1](~/add/codesnippet/cpp/t-system.collections.sor_2.cpp)]\n [!code-cs[Classic SortedList Example#1](~/add/codesnippet/csharp/t-system.collections.sor_2.cs)]\n [!code-vb[Classic SortedList Example#1](~/add/codesnippet/visualbasic/t-system.collections.sor_2.vb)]"
  syntax:
    content: >-
      [System.Diagnostics.DebuggerDisplay("Count = {Count}")]

      [System.Diagnostics.DebuggerTypeProxy(typeof(System.Collections.SortedList/SortedListDebugView))]

      [System.Runtime.InteropServices.ComVisible(true)]

      public class SortedList : ICloneable, System.Collections.IDictionary
  inheritance:
  - System.Object
  implements:
  - System.Collections.IDictionary
  - System.ICloneable
  inheritedMembers: []
  platform:
  - net462
- uid: System.Collections.SortedList.#ctor
  id: '#ctor'
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: SortedList()
  nameWithType: SortedList.SortedList()
  fullName: System.Collections.SortedList.SortedList()
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Initierar en ny instans av den <xref href=&quot;System.Collections.SortedList&quot;> </xref> klass som är tomt, har den inledande standardkapaciteten och sorteras enligt den <xref:System.IComparable>gränssnitt som implementerats av varje nyckel som lades till i <xref href=&quot;System.Collections.SortedList&quot;> </xref> objekt.</xref:System.IComparable>"
  remarks: "Varje nyckel måste implementera den <xref:System.IComparable>gränssnitt för att kunna jämförelser med alla nycklar i den <xref:System.Collections.SortedList>objekt.</xref:System.Collections.SortedList> </xref:System.IComparable> Elementen sorteras enligt <xref:System.IComparable>implementering av varje nyckel som lagts till i <xref:System.Collections.SortedList>.</xref:System.Collections.SortedList> </xref:System.IComparable>       Kapaciteten för en <xref:System.Collections.SortedList>objektet är antalet element som det <xref:System.Collections.SortedList>kan innehålla.</xref:System.Collections.SortedList> </xref:System.Collections.SortedList> Som läggs till i en <xref:System.Collections.SortedList>, ökas automatiskt kapaciteten som krävs av omallokera den interna matrisen.</xref:System.Collections.SortedList>       Om storleken på samlingen kan vara att ange den inledande kapaciteten eliminerar behovet av att genomföra ett antal storleksändringar när du lägger till element till den <xref:System.Collections.SortedList>objekt.</xref:System.Collections.SortedList>       Den här konstruktorn är en O(1)-åtgärd."
  example:
  - "The following code example creates collections using different <xref:System.Collections.SortedList> constructors and demonstrates the differences in the behavior of the collections.  \n  \n [!code-cs[System.Collections.SortedList_ctor#1](~/add/codesnippet/csharp/m-system.collections.sor_7_1.cs)]\n [!code-vb[System.Collections.SortedList_ctor#1](~/add/codesnippet/visualbasic/m-system.collections.sor_7_1.vb)]\n [!code-cpp[System.Collections.SortedList_ctor#1](~/add/codesnippet/cpp/m-system.collections.sor_7_1.cpp)]"
  syntax:
    content: public SortedList ();
    parameters: []
  overload: System.Collections.SortedList.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.SortedList.#ctor(System.Collections.IComparer)
  id: '#ctor(System.Collections.IComparer)'
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: SortedList(IComparer)
  nameWithType: SortedList.SortedList(IComparer)
  fullName: System.Collections.SortedList.SortedList(IComparer)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Initierar en ny instans av den <xref href=&quot;System.Collections.SortedList&quot;> </xref> klass som är tomt, har den inledande standardkapaciteten och sorteras enligt den angivna <xref:System.Collections.IComparer>gränssnitt.</xref:System.Collections.IComparer>"
  remarks: "Elementen sorteras enligt den angivna <xref:System.Collections.IComparer>implementering.</xref:System.Collections.IComparer> Om den `comparer` parametern är `null`, <xref:System.IComparable>implementering av varje nyckel används, därför varje nyckel måste implementera den <xref:System.IComparable>gränssnitt för att kunna jämförelser med alla nycklar i den <xref:System.Collections.SortedList>objekt.</xref:System.Collections.SortedList> </xref:System.IComparable> </xref:System.IComparable>       Kapaciteten för en <xref:System.Collections.SortedList>objektet är antalet element som det <xref:System.Collections.SortedList>kan innehålla.</xref:System.Collections.SortedList> </xref:System.Collections.SortedList> Som läggs till i en <xref:System.Collections.SortedList>, ökas automatiskt kapaciteten som krävs av omallokera den interna matrisen.</xref:System.Collections.SortedList>       Om storleken på samlingen kan vara att ange den inledande kapaciteten eliminerar behovet av att genomföra ett antal storleksändringar när du lägger till element till den <xref:System.Collections.SortedList>objekt.</xref:System.Collections.SortedList>       Den här konstruktorn är en O(1)-åtgärd."
  example:
  - "The following code example creates collections using different <xref:System.Collections.SortedList> constructors and demonstrates the differences in the behavior of the collections.  \n  \n [!code-cs[System.Collections.SortedList_ctor#1](~/add/codesnippet/csharp/m-system.collections.sor_18_1.cs)]\n [!code-vb[System.Collections.SortedList_ctor#1](~/add/codesnippet/visualbasic/m-system.collections.sor_18_1.vb)]\n [!code-cpp[System.Collections.SortedList_ctor#1](~/add/codesnippet/cpp/m-system.collections.sor_18_1.cpp)]"
  syntax:
    content: public SortedList (System.Collections.IComparer comparer);
    parameters:
    - id: comparer
      type: System.Collections.IComparer
      description: "Den <xref:System.Collections.IComparer>implementering ska användas vid jämförelse av nycklar.</xref:System.Collections.IComparer>       - eller - <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> att använda den <xref:System.IComparable>implementeringen av varje nyckel.</xref:System.IComparable>"
  overload: System.Collections.SortedList.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.SortedList.#ctor(System.Collections.IDictionary)
  id: '#ctor(System.Collections.IDictionary)'
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: SortedList(IDictionary)
  nameWithType: SortedList.SortedList(IDictionary)
  fullName: System.Collections.SortedList.SortedList(IDictionary)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Initierar en ny instans av den <xref href=&quot;System.Collections.SortedList&quot;> </xref> klass som innehåller element som kopieras från den angivna ordlistan har samma inledande kapacitet som antalet element kopieras och sorteras enligt den <xref:System.IComparable>gränssnitt som implementerats av varje nyckel.</xref:System.IComparable>"
  remarks: "Varje nyckel måste implementera den <xref:System.IComparable>gränssnitt för att kunna jämförelser med alla nycklar i den <xref:System.Collections.SortedList>objekt.</xref:System.Collections.SortedList> </xref:System.IComparable> Elementen sorteras enligt <xref:System.IComparable>implementering av varje nyckel som lagts till i <xref:System.Collections.SortedList>.</xref:System.Collections.SortedList> </xref:System.IComparable>       En <xref:System.Collections.Hashtable>objektet är ett exempel på en <xref:System.Collections.IDictionary>implementering som kan skickas till den här konstruktorn.</xref:System.Collections.IDictionary> </xref:System.Collections.Hashtable> Det nya <xref:System.Collections.SortedList>objektet innehåller en kopia av nycklar och värden som lagras i <xref:System.Collections.Hashtable>.</xref:System.Collections.Hashtable> </xref:System.Collections.SortedList>       Kapaciteten för en <xref:System.Collections.SortedList>objektet är antalet element som det <xref:System.Collections.SortedList>kan innehålla.</xref:System.Collections.SortedList> </xref:System.Collections.SortedList> Som läggs till i en <xref:System.Collections.SortedList>, ökas automatiskt kapaciteten som krävs av omallokera den interna matrisen.</xref:System.Collections.SortedList>       Om storleken på samlingen kan vara att ange den inledande kapaciteten eliminerar behovet av att genomföra ett antal storleksändringar när du lägger till element till den <xref:System.Collections.SortedList>objekt.</xref:System.Collections.SortedList>       Den här konstruktorn är en O (`n`) igen, där `n` är antalet element i `d`."
  example:
  - "The following code example creates collections using different <xref:System.Collections.SortedList> constructors and demonstrates the differences in the behavior of the collections.  \n  \n [!code-cpp[System.Collections.SortedList_ctorDictionary#1](~/add/codesnippet/cpp/m-system.collections.sor_9_1.cpp)]\n [!code-vb[System.Collections.SortedList_ctorDictionary#1](~/add/codesnippet/visualbasic/m-system.collections.sor_9_1.vb)]\n [!code-cs[System.Collections.SortedList_ctorDictionary#1](~/add/codesnippet/csharp/m-system.collections.sor_9_1.cs)]"
  syntax:
    content: public SortedList (System.Collections.IDictionary d);
    parameters:
    - id: d
      type: System.Collections.IDictionary
      description: "Den <xref:System.Collections.IDictionary>implementeringen för att kopiera till en ny <xref href=&quot;System.Collections.SortedList&quot;> </xref> objekt.</xref:System.Collections.IDictionary>"
  overload: System.Collections.SortedList.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>d</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "Ett eller flera element i <code> d </code> implementerar inte det <xref:System.IComparable>gränssnittet.</xref:System.IComparable>"
  platform:
  - net462
- uid: System.Collections.SortedList.#ctor(System.Int32)
  id: '#ctor(System.Int32)'
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: SortedList(Int32)
  nameWithType: SortedList.SortedList(Int32)
  fullName: System.Collections.SortedList.SortedList(Int32)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Initierar en ny instans av den <xref href=&quot;System.Collections.SortedList&quot;> </xref> klass som är tomt, har den angivna inledande kapaciteten och sorteras enligt den <xref:System.IComparable>gränssnitt som implementerats av varje nyckel som lades till i <xref href=&quot;System.Collections.SortedList&quot;> </xref> objekt.</xref:System.IComparable>"
  remarks: "Varje nyckel måste implementera den <xref:System.IComparable>gränssnitt för att kunna jämförelser med alla nycklar i den <xref:System.Collections.SortedList>objekt.</xref:System.Collections.SortedList> </xref:System.IComparable> Elementen sorteras enligt <xref:System.IComparable>implementering av varje nyckel som lagts till i <xref:System.Collections.SortedList>.</xref:System.Collections.SortedList> </xref:System.IComparable>       Kapaciteten för en <xref:System.Collections.SortedList>objektet är antalet element som det <xref:System.Collections.SortedList>kan innehålla.</xref:System.Collections.SortedList> </xref:System.Collections.SortedList> Som läggs till i en <xref:System.Collections.SortedList>, ökas automatiskt kapaciteten som krävs av omallokera den interna matrisen.</xref:System.Collections.SortedList>       Om storleken på samlingen kan vara att ange den inledande kapaciteten eliminerar behovet av att genomföra ett antal storleksändringar när du lägger till element till den <xref:System.Collections.SortedList>objekt.</xref:System.Collections.SortedList>       Den här konstruktorn är en O (`n`) igen, där `n` är `initialCapacity`."
  example:
  - "The following code example creates collections using different <xref:System.Collections.SortedList> constructors and demonstrates the differences in the behavior of the collections.  \n  \n [!code-cs[System.Collections.SortedList_ctorInt#1](~/add/codesnippet/csharp/m-system.collections.sor_15_1.cs)]\n [!code-vb[System.Collections.SortedList_ctorInt#1](~/add/codesnippet/visualbasic/m-system.collections.sor_15_1.vb)]\n [!code-cpp[System.Collections.SortedList_ctorInt#1](~/add/codesnippet/cpp/m-system.collections.sor_15_1.cpp)]"
  syntax:
    content: public SortedList (int initialCapacity);
    parameters:
    - id: initialCapacity
      type: System.Int32
      description: "Det ursprungliga numret för element som det <xref href=&quot;System.Collections.SortedList&quot;> </xref> -objekt kan innehålla."
  overload: System.Collections.SortedList.#ctor*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>initialCapacity</code>är mindre än noll."
  - type: System.OutOfMemoryException
    commentId: T:System.OutOfMemoryException
    description: "Det finns inte tillräckligt med minne för att skapa en <xref href=&quot;System.Collections.SortedList&quot;> </xref> objektet med angivet <code> initialCapacity </code>."
  platform:
  - net462
- uid: System.Collections.SortedList.#ctor(System.Collections.IComparer,System.Int32)
  id: '#ctor(System.Collections.IComparer,System.Int32)'
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: SortedList(IComparer,Int32)
  nameWithType: SortedList.SortedList(IComparer,Int32)
  fullName: System.Collections.SortedList.SortedList(IComparer,Int32)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Initierar en ny instans av den <xref href=&quot;System.Collections.SortedList&quot;> </xref> klass som är tomt, har den angivna inledande kapaciteten och sorteras enligt den angivna <xref:System.Collections.IComparer>gränssnitt.</xref:System.Collections.IComparer>"
  remarks: "Elementen sorteras enligt den angivna <xref:System.Collections.IComparer>implementering.</xref:System.Collections.IComparer> Om den `comparer` parametern är `null`, <xref:System.IComparable>implementering av varje nyckel används, därför varje nyckel måste implementera den <xref:System.IComparable>gränssnitt för att kunna jämförelser med alla nycklar i den <xref:System.Collections.SortedList>objekt.</xref:System.Collections.SortedList> </xref:System.IComparable> </xref:System.IComparable>       Kapaciteten för en <xref:System.Collections.SortedList>objektet är antalet element som det <xref:System.Collections.SortedList>kan innehålla.</xref:System.Collections.SortedList> </xref:System.Collections.SortedList> Som läggs till i en <xref:System.Collections.SortedList>, ökas automatiskt kapaciteten som krävs av omallokera den interna matrisen.</xref:System.Collections.SortedList>       Om storleken på samlingen kan vara att ange den inledande kapaciteten eliminerar behovet av att genomföra ett antal storleksändringar när du lägger till element till den <xref:System.Collections.SortedList>objekt.</xref:System.Collections.SortedList>       Den här konstruktorn är en O (`n`) igen, där `n` är `capacity`."
  example:
  - "The following code example creates collections using different <xref:System.Collections.SortedList> constructors and demonstrates the differences in the behavior of the collections.  \n  \n [!code-cs[System.Collections.SortedList_ctorInt#1](~/add/codesnippet/csharp/1806b376-56fc-45e2-aff7-_1.cs)]\n [!code-vb[System.Collections.SortedList_ctorInt#1](~/add/codesnippet/visualbasic/1806b376-56fc-45e2-aff7-_1.vb)]\n [!code-cpp[System.Collections.SortedList_ctorInt#1](~/add/codesnippet/cpp/1806b376-56fc-45e2-aff7-_1.cpp)]"
  syntax:
    content: public SortedList (System.Collections.IComparer comparer, int capacity);
    parameters:
    - id: comparer
      type: System.Collections.IComparer
      description: "Den <xref:System.Collections.IComparer>implementering ska användas vid jämförelse av nycklar.</xref:System.Collections.IComparer>       - eller - <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> att använda den <xref:System.IComparable>implementeringen av varje nyckel.</xref:System.IComparable>"
    - id: capacity
      type: System.Int32
      description: "Det ursprungliga numret för element som det <xref href=&quot;System.Collections.SortedList&quot;> </xref> -objekt kan innehålla."
  overload: System.Collections.SortedList.#ctor*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>capacity</code>är mindre än noll."
  - type: System.OutOfMemoryException
    commentId: T:System.OutOfMemoryException
    description: "Det finns inte tillräckligt med minne för att skapa en <xref href=&quot;System.Collections.SortedList&quot;> </xref> objektet med angivet <code> capacity </code>."
  platform:
  - net462
- uid: System.Collections.SortedList.#ctor(System.Collections.IDictionary,System.Collections.IComparer)
  id: '#ctor(System.Collections.IDictionary,System.Collections.IComparer)'
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: SortedList(IDictionary,IComparer)
  nameWithType: SortedList.SortedList(IDictionary,IComparer)
  fullName: System.Collections.SortedList.SortedList(IDictionary,IComparer)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Initierar en ny instans av den <xref href=&quot;System.Collections.SortedList&quot;> </xref> klass som innehåller element som kopieras från den angivna ordlistan har samma inledande kapacitet som antalet element kopieras och sorteras enligt den angivna <xref:System.Collections.IComparer>gränssnitt.</xref:System.Collections.IComparer>"
  remarks: "Elementen sorteras enligt den angivna <xref:System.Collections.IComparer>implementering.</xref:System.Collections.IComparer> Om den `comparer` parametern är `null`, <xref:System.IComparable>implementering av varje nyckel används, därför varje nyckel måste implementera den <xref:System.IComparable>gränssnitt för att kunna jämförelser med alla nycklar i den <xref:System.Collections.SortedList>objekt.</xref:System.Collections.SortedList> </xref:System.IComparable> </xref:System.IComparable>       En <xref:System.Collections.Hashtable>objektet är ett exempel på en <xref:System.Collections.IDictionary>implementering som kan skickas till den här konstruktorn.</xref:System.Collections.IDictionary> </xref:System.Collections.Hashtable> Det nya <xref:System.Collections.SortedList>objektet innehåller en kopia av nycklar och värden som lagras i <xref:System.Collections.Hashtable>.</xref:System.Collections.Hashtable> </xref:System.Collections.SortedList>       Kapaciteten för en <xref:System.Collections.SortedList>objektet är antalet element som det <xref:System.Collections.SortedList>kan innehålla.</xref:System.Collections.SortedList> </xref:System.Collections.SortedList> Som läggs till i en <xref:System.Collections.SortedList>, ökas automatiskt kapaciteten som krävs av omallokera den interna matrisen.</xref:System.Collections.SortedList>       Om storleken på samlingen kan vara att ange den inledande kapaciteten eliminerar behovet av att genomföra ett antal storleksändringar när du lägger till element till den <xref:System.Collections.SortedList>objekt.</xref:System.Collections.SortedList>       Den här konstruktorn är en O (`n`) igen, där `n` är antalet element i `d`."
  example:
  - "The following code example creates collections using different <xref:System.Collections.SortedList> constructors and demonstrates the differences in the behavior of the collections.  \n  \n [!code-cpp[System.Collections.SortedList_ctorDictionary#1](~/add/codesnippet/cpp/653e16d8-524e-4544-8674-_1.cpp)]\n [!code-vb[System.Collections.SortedList_ctorDictionary#1](~/add/codesnippet/visualbasic/653e16d8-524e-4544-8674-_1.vb)]\n [!code-cs[System.Collections.SortedList_ctorDictionary#1](~/add/codesnippet/csharp/653e16d8-524e-4544-8674-_1.cs)]"
  syntax:
    content: public SortedList (System.Collections.IDictionary d, System.Collections.IComparer comparer);
    parameters:
    - id: d
      type: System.Collections.IDictionary
      description: "Den <xref:System.Collections.IDictionary>implementeringen för att kopiera till en ny <xref href=&quot;System.Collections.SortedList&quot;> </xref> objekt.</xref:System.Collections.IDictionary>"
    - id: comparer
      type: System.Collections.IComparer
      description: "Den <xref:System.Collections.IComparer>implementering ska användas vid jämförelse av nycklar.</xref:System.Collections.IComparer>       - eller - <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> att använda den <xref:System.IComparable>implementeringen av varje nyckel.</xref:System.IComparable>"
  overload: System.Collections.SortedList.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>d</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "<code>comparer</code>är <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>, och en eller flera element i <code>d</code> implementerar inte det <xref:System.IComparable> gränssnitt."
  platform:
  - net462
- uid: System.Collections.SortedList.Add(System.Object,System.Object)
  id: Add(System.Object,System.Object)
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: Add(Object,Object)
  nameWithType: SortedList.Add(Object,Object)
  fullName: System.Collections.SortedList.Add(Object,Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Lägger till ett element med angiven nyckel och värde till en <xref href=&quot;System.Collections.SortedList&quot;> </xref> objekt."
  remarks: "Insättningspunkten bestäms utifrån jämföraren valt uttryckligen eller som standard när den <xref:System.Collections.SortedList>objektet skapades.</xref:System.Collections.SortedList>       Om <xref:System.Collections.SortedList.Count%2A>redan är lika med <xref:System.Collections.SortedList.Capacity%2A>, kapacitet hos den <xref:System.Collections.SortedList>objekt ökas med automatiskt omallokera den interna matrisen och befintliga element kopieras till den nya matrisen innan du lägger till nya element.</xref:System.Collections.SortedList> </xref:System.Collections.SortedList.Capacity%2A> </xref:System.Collections.SortedList.Count%2A>       Du kan också använda den <xref:System.Collections.SortedList.Item%2A>egenskapen för att lägga till nya element genom att ange värdet för en nyckel som inte finns i den <xref:System.Collections.SortedList>objekt (till exempel `myCollection[&quot;myNonexistentKey&quot;] = myValue`).</xref:System.Collections.SortedList> </xref:System.Collections.SortedList.Item%2A> Men om den angivna nyckeln finns redan i den <xref:System.Collections.SortedList>, ställ det <xref:System.Collections.SortedList.Item%2A>egenskapen skriver över det gamla värdet.</xref:System.Collections.SortedList.Item%2A> </xref:System.Collections.SortedList> Däremot ändrar Add-metod inte befintliga element.       Elementen i en <xref:System.Collections.SortedList>objekt sorteras efter nycklarna antingen enligt ett visst <xref:System.Collections.IComparer>implementering anges när den <xref:System.Collections.SortedList>skapas eller bl.a till den <xref:System.IComparable>implementering som tillhandahålls av nycklar sig.</xref:System.IComparable> </xref:System.Collections.SortedList> </xref:System.Collections.IComparer> </xref:System.Collections.SortedList>       En nyckel kan inte vara `null`, men kan vara ett värde.       Den här metoden är en O (`n`) för osorterade data där `n` är <xref:System.Collections.SortedList.Count%2A>.</xref:System.Collections.SortedList.Count%2A> Det är en O (loggen `n`) åtgärden om du lägger till nya element i slutet av listan. Om infogning gör en ändring av storlek, åtgärden har O (`n`)."
  example:
  - "The following code example shows how to add elements to a <xref:System.Collections.SortedList> object.  \n  \n [!code-cpp[Classic SortedList.Add Example#1](~/add/codesnippet/cpp/m-system.collections.sor_4_1.cpp)]\n [!code-vb[Classic SortedList.Add Example#1](~/add/codesnippet/visualbasic/m-system.collections.sor_4_1.vb)]\n [!code-cs[Classic SortedList.Add Example#1](~/add/codesnippet/csharp/m-system.collections.sor_4_1.cs)]"
  syntax:
    content: public virtual void Add (object key, object value);
    parameters:
    - id: key
      type: System.Object
      description: "Nyckeln för elementet du vill lägga till."
    - id: value
      type: System.Object
      description: "Värdet för elementet du vill lägga till. Värdet kan vara <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  overload: System.Collections.SortedList.Add*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>key</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Ett element med det angivna <code> key </code> finns redan i den <xref href=&quot;System.Collections.SortedList&quot;> </xref> objekt.       - eller - <xref href=&quot;System.Collections.SortedList&quot;> </xref> är konfigurerad att använda den <xref:System.IComparable>-gränssnittet och <code> key </code> implementerar inte det <xref:System.IComparable>gränssnittet.</xref:System.IComparable> </xref:System.IComparable>"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "Den <xref href=&quot;System.Collections.SortedList&quot;> </xref> är skrivskyddad.       - eller - <xref href=&quot;System.Collections.SortedList&quot;> </xref> har en fast storlek."
  - type: System.OutOfMemoryException
    commentId: T:System.OutOfMemoryException
    description: "Det finns inte tillräckligt med minne för att lägga till element för den <xref href=&quot;System.Collections.SortedList&quot;> </xref>."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Jämföraren utlöser ett undantag."
  platform:
  - net462
- uid: System.Collections.SortedList.Capacity
  id: Capacity
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: Capacity
  nameWithType: SortedList.Capacity
  fullName: System.Collections.SortedList.Capacity
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Hämtar eller anger kapaciteten för en <xref href=&quot;System.Collections.SortedList&quot;> </xref> objekt."
  remarks: "Kapaciteten är antalet element som det <xref:System.Collections.SortedList>-objekt kan lagra.</xref:System.Collections.SortedList> <xref:System.Collections.SortedList.Count%2A>är antalet element som finns i <xref:System.Collections.SortedList>.</xref:System.Collections.SortedList></xref:System.Collections.SortedList.Count%2A>       Kapacitet är alltid större än eller lika med <xref:System.Collections.SortedList.Count%2A>.</xref:System.Collections.SortedList.Count%2A> Om <xref:System.Collections.SortedList.Count%2A>överskrider kapacitet när du lägger till element, kapaciteten ökas automatiskt med omallokera den interna matrisen innan du kopierar gamla element och lägga till nya element.</xref:System.Collections.SortedList.Count%2A>       Kapaciteten kan minskas genom att anropa <xref:System.Collections.SortedList.TrimToSize%2A>eller genom att ange egenskapen Capacity uttryckligen.</xref:System.Collections.SortedList.TrimToSize%2A> När värdet för kapacitet anges explicit omfördelats den interna matrisen också för att passa den angivna kapaciteten.       Hämtar värdet för den här egenskapen är O(1) åtgärd. Egenskapen är en O (`n`) igen, där `n` är den nya kapaciteten."
  syntax:
    content: public virtual int Capacity { get; set; }
    return:
      type: System.Int32
      description: "Antalet element som det <xref href=&quot;System.Collections.SortedList&quot;> </xref> -objekt kan innehålla."
  overload: System.Collections.SortedList.Capacity*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "Värdet som tilldelas är mindre än det aktuella antalet element i den <xref href=&quot;System.Collections.SortedList&quot;> </xref> objekt."
  - type: System.OutOfMemoryException
    commentId: T:System.OutOfMemoryException
    description: "Det finns inte tillräckligt med minne på systemet."
  platform:
  - net462
- uid: System.Collections.SortedList.Clear
  id: Clear
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: Clear()
  nameWithType: SortedList.Clear()
  fullName: System.Collections.SortedList.Clear()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Tar bort alla element från en <xref href=&quot;System.Collections.SortedList&quot;> </xref> objekt."
  remarks: "<xref:System.Collections.SortedList.Count%2A>anges till noll och släpps också referenser till andra objekt från element i mängden.</xref:System.Collections.SortedList.Count%2A>       <xref:System.Collections.SortedList.Capacity%2A>förblir oförändrad.</xref:System.Collections.SortedList.Capacity%2A> Så här återställer du kapaciteten för den <xref:System.Collections.SortedList>objekt, anropa <xref:System.Collections.SortedList.TrimToSize%2A>eller Ställ in den <xref:System.Collections.SortedList.Capacity%2A>egenskapen direkt.</xref:System.Collections.SortedList.Capacity%2A> </xref:System.Collections.SortedList.TrimToSize%2A> </xref:System.Collections.SortedList> Minska en tom <xref:System.Collections.SortedList>anger kapaciteten för den <xref:System.Collections.SortedList>till standardkapaciteten.</xref:System.Collections.SortedList> </xref:System.Collections.SortedList>       Den här metoden är en O (`n`) igen, där `n` är <xref:System.Collections.SortedList.Count%2A>.</xref:System.Collections.SortedList.Count%2A>"
  example:
  - "The following code example shows how to trim the unused portions of a <xref:System.Collections.SortedList> object and how to clear the values of the <xref:System.Collections.SortedList>.  \n  \n [!code-cpp[Classic SortedList.Clear Example#1](~/add/codesnippet/cpp/m-system.collections.sor_14_1.cpp)]\n [!code-cs[Classic SortedList.Clear Example#1](~/add/codesnippet/csharp/m-system.collections.sor_14_1.cs)]\n [!code-vb[Classic SortedList.Clear Example#1](~/add/codesnippet/visualbasic/m-system.collections.sor_14_1.vb)]"
  syntax:
    content: public virtual void Clear ();
    parameters: []
  overload: System.Collections.SortedList.Clear*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "Den <xref href=&quot;System.Collections.SortedList&quot;> </xref> objektet är skrivskyddat.       - eller - <xref href=&quot;System.Collections.SortedList&quot;> </xref> har en fast storlek."
  platform:
  - net462
- uid: System.Collections.SortedList.Clone
  id: Clone
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: Clone()
  nameWithType: SortedList.Clone()
  fullName: System.Collections.SortedList.Clone()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Skapar en lite kopia av en <xref href=&quot;System.Collections.SortedList&quot;> </xref> objekt."
  remarks: "En lite kopia av en samling kopieras endast element i mängden, oavsett om de är referenstyper eller värdet typer, men inte kopiera objekt som referenserna refererar till. Referenserna i den nya samlingen pekar på samma objekt som refererar till i samlingen ursprungliga pekar på.       Däremot en djup kopia av en samling kopierar elementen och allt direkt eller indirekt refereras av elementen.       Den här metoden är en O (`n`) igen, där `n` är <xref:System.Collections.SortedList.Count%2A>.</xref:System.Collections.SortedList.Count%2A>"
  syntax:
    content: public virtual object Clone ();
    parameters: []
    return:
      type: System.Object
      description: "En lite kopia av den <xref href=&quot;System.Collections.SortedList&quot;> </xref> objekt."
  overload: System.Collections.SortedList.Clone*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.SortedList.Contains(System.Object)
  id: Contains(System.Object)
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: Contains(Object)
  nameWithType: SortedList.Contains(Object)
  fullName: System.Collections.SortedList.Contains(Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Anger om en <xref href=&quot;System.Collections.SortedList&quot;> </xref> objektet innehåller en viss nyckel."
  remarks: "Elementen i en <xref:System.Collections.SortedList>objekt sorteras efter nycklarna antingen enligt ett visst <xref:System.Collections.IComparer>implementering anges när den <xref:System.Collections.SortedList>skapas eller bl.a till den <xref:System.IComparable>implementering som tillhandahålls av nycklar sig.</xref:System.IComparable> </xref:System.Collections.SortedList> </xref:System.Collections.IComparer> </xref:System.Collections.SortedList>       Innehåller implementerar <xref:System.Collections.IDictionary.Contains%2A?displayProperty=fullName>.</xref:System.Collections.IDictionary.Contains%2A?displayProperty=fullName> Den fungerar precis som <xref:System.Collections.SortedList.ContainsKey%2A>.</xref:System.Collections.SortedList.ContainsKey%2A>       Den här metoden använder en algoritm för binära Sök; den här metoden är därför en O (loggen `n`) igen, där `n` är <xref:System.Collections.SortedList.Count%2A>.</xref:System.Collections.SortedList.Count%2A>       Från och med .NET Framework 2.0 kan den här metoden använder den samling objekt <xref:System.Object.Equals%2A>och <xref:System.IComparable.CompareTo%2A>metoder i `item` att avgöra om det finns objekt.</xref:System.IComparable.CompareTo%2A> </xref:System.Object.Equals%2A> I tidigare versioner av .NET Framework gjordes detta genom att använda den <xref:System.Object.Equals%2A>och <xref:System.IComparable.CompareTo%2A>metoder för den `item` parameter på objekten i samlingen.</xref:System.IComparable.CompareTo%2A> </xref:System.Object.Equals%2A>"
  example:
  - "The following code example shows how to determine whether a <xref:System.Collections.SortedList> object contains a specific element.  \n  \n [!code-cs[Classic SortedList.Contains Example#1](~/add/codesnippet/csharp/m-system.collections.sor_12_1.cs)]\n [!code-cpp[Classic SortedList.Contains Example#1](~/add/codesnippet/cpp/m-system.collections.sor_12_1.cpp)]\n [!code-vb[Classic SortedList.Contains Example#1](~/add/codesnippet/visualbasic/m-system.collections.sor_12_1.vb)]"
  syntax:
    content: public virtual bool Contains (object key);
    parameters:
    - id: key
      type: System.Object
      description: "Nyckeln för att hitta i den <xref href=&quot;System.Collections.SortedList&quot;> </xref> objekt."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Om den <xref href=&quot;System.Collections.SortedList&quot;> </xref> objekt innehåller ett element med det angivna <code> key </code>, annars <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Collections.SortedList.Contains*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>key</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Jämföraren utlöser ett undantag."
  platform:
  - net462
- uid: System.Collections.SortedList.ContainsKey(System.Object)
  id: ContainsKey(System.Object)
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: ContainsKey(Object)
  nameWithType: SortedList.ContainsKey(Object)
  fullName: System.Collections.SortedList.ContainsKey(Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Anger om en <xref href=&quot;System.Collections.SortedList&quot;> </xref> objektet innehåller en viss nyckel."
  remarks: "Elementen i en <xref:System.Collections.SortedList>objekt sorteras efter nycklarna antingen enligt ett visst <xref:System.Collections.IComparer>implementering anges när den <xref:System.Collections.SortedList>skapas eller bl.a till den <xref:System.IComparable>implementering som tillhandahålls av nycklar sig.</xref:System.IComparable> </xref:System.Collections.SortedList> </xref:System.Collections.IComparer> </xref:System.Collections.SortedList>       Den här metoden fungerar exakt som den <xref:System.Collections.SortedList.Contains%2A>metoden.</xref:System.Collections.SortedList.Contains%2A>       Den här metoden använder en algoritm för binära Sök; den här metoden är därför en O (loggen `n`) igen, där `n` är <xref:System.Collections.SortedList.Count%2A>.</xref:System.Collections.SortedList.Count%2A>       Från och med .NET Framework 2.0 kan den här metoden använder den samling objekt <xref:System.Object.Equals%2A>och <xref:System.IComparable.CompareTo%2A>metoder i `item` att avgöra om det finns objekt.</xref:System.IComparable.CompareTo%2A> </xref:System.Object.Equals%2A> I tidigare versioner av .NET Framework gjordes detta genom att använda den <xref:System.Object.Equals%2A>och <xref:System.IComparable.CompareTo%2A>metoder för den `item` parameter på objekten i samlingen.</xref:System.IComparable.CompareTo%2A> </xref:System.Object.Equals%2A>"
  example:
  - "The following code example shows how to determine whether a <xref:System.Collections.SortedList> object contains a specific element.  \n  \n [!code-cs[Classic SortedList.Contains Example#1](~/add/codesnippet/csharp/m-system.collections.sor_16_1.cs)]\n [!code-cpp[Classic SortedList.Contains Example#1](~/add/codesnippet/cpp/m-system.collections.sor_16_1.cpp)]\n [!code-vb[Classic SortedList.Contains Example#1](~/add/codesnippet/visualbasic/m-system.collections.sor_16_1.vb)]"
  syntax:
    content: public virtual bool ContainsKey (object key);
    parameters:
    - id: key
      type: System.Object
      description: "Nyckeln för att hitta i den <xref href=&quot;System.Collections.SortedList&quot;> </xref> objekt."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Om den <xref href=&quot;System.Collections.SortedList&quot;> </xref> objekt innehåller ett element med det angivna <code> key </code>, annars <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Collections.SortedList.ContainsKey*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>key</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Jämföraren utlöser ett undantag."
  platform:
  - net462
- uid: System.Collections.SortedList.ContainsValue(System.Object)
  id: ContainsValue(System.Object)
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: ContainsValue(Object)
  nameWithType: SortedList.ContainsValue(Object)
  fullName: System.Collections.SortedList.ContainsValue(Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Anger om en <xref href=&quot;System.Collections.SortedList&quot;> </xref> objektet innehåller ett specifikt värde."
  remarks: "Värdena för elementen i den <xref:System.Collections.SortedList>objektet jämförs med det angivna värdet med hjälp av den <xref:System.Object.Equals%2A>metoden.</xref:System.Object.Equals%2A> </xref:System.Collections.SortedList>       Den här metoden utförs en linjär sökning. Genomsnittlig körningstid är därför proportionell till <xref:System.Collections.SortedList.Count%2A>.</xref:System.Collections.SortedList.Count%2A> Den här metoden är en O (`n`) igen, där `n` är <xref:System.Collections.SortedList.Count%2A>.</xref:System.Collections.SortedList.Count%2A>       Från och med .NET Framework 2.0 kan den här metoden använder den samling objekt <xref:System.Object.Equals%2A>och <xref:System.IComparable.CompareTo%2A>metoder i `item` att avgöra om det finns objekt.</xref:System.IComparable.CompareTo%2A> </xref:System.Object.Equals%2A> I tidigare versioner av .NET Framework gjordes detta genom att använda den <xref:System.Object.Equals%2A>och <xref:System.IComparable.CompareTo%2A>metoder för den `item` parameter på objekten i samlingen.</xref:System.IComparable.CompareTo%2A> </xref:System.Object.Equals%2A>"
  example:
  - "The following code example shows how to determine whether a <xref:System.Collections.SortedList> object contains a specific element.  \n  \n [!code-cs[Classic SortedList.Contains Example#1](~/add/codesnippet/csharp/m-system.collections.sor_0_1.cs)]\n [!code-cpp[Classic SortedList.Contains Example#1](~/add/codesnippet/cpp/m-system.collections.sor_0_1.cpp)]\n [!code-vb[Classic SortedList.Contains Example#1](~/add/codesnippet/visualbasic/m-system.collections.sor_0_1.vb)]"
  syntax:
    content: public virtual bool ContainsValue (object value);
    parameters:
    - id: value
      type: System.Object
      description: "Värdet för att hitta i den <xref href=&quot;System.Collections.SortedList&quot;> </xref> objekt. Värdet kan vara <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Om den <xref href=&quot;System.Collections.SortedList&quot;> </xref> objekt innehåller ett element med det angivna <code> value </code>, annars <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Collections.SortedList.ContainsValue*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.SortedList.CopyTo(System.Array,System.Int32)
  id: CopyTo(System.Array,System.Int32)
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: CopyTo(Array,Int32)
  nameWithType: SortedList.CopyTo(Array,Int32)
  fullName: System.Collections.SortedList.CopyTo(Array,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Kopior <xref href=&quot;System.Collections.SortedList&quot;> </xref> element till en endimensionell <xref:System.Array>objekt, från och med det angivna indexet i matrisen.</xref:System.Array>"
  remarks: "Nyckel/värde-par kopieras till den <xref:System.Array>objekt i samma ordning uppräknaren går exempelkoden igenom de <xref:System.Collections.SortedList>objekt.</xref:System.Collections.SortedList> </xref:System.Array>       Kopiera endast nycklar i den <xref:System.Collections.SortedList>, Använd `SortedList.Keys.CopyTo`.</xref:System.Collections.SortedList>       Kopiera värdena i den <xref:System.Collections.SortedList>, Använd `SortedList.Values.CopyTo`.</xref:System.Collections.SortedList>       Den här metoden är en O (`n`) igen, där `n` är <xref:System.Collections.SortedList.Count%2A>.</xref:System.Collections.SortedList.Count%2A>"
  example:
  - "The following code example shows how to copy the values in a <xref:System.Collections.SortedList> object into a one-dimensional <xref:System.Array> object.  \n  \n [!code-cs[Classic SortedList.CopyTo Example#1](~/add/codesnippet/csharp/m-system.collections.sor_20_1.cs)]\n [!code-cpp[Classic SortedList.CopyTo Example#1](~/add/codesnippet/cpp/m-system.collections.sor_20_1.cpp)]\n [!code-vb[Classic SortedList.CopyTo Example#1](~/add/codesnippet/visualbasic/m-system.collections.sor_20_1.vb)]"
  syntax:
    content: public virtual void CopyTo (Array array, int arrayIndex);
    parameters:
    - id: array
      type: System.Array
      description: "Den endimensionell <xref:System.Array>objekt som är mål för den <xref:System.Collections.DictionaryEntry>objekten som kopierats från <xref href=&quot;System.Collections.SortedList&quot;> </xref>.</xref:System.Collections.DictionaryEntry> </xref:System.Array> Den <xref:System.Array>måste ha Nollbaserad indexering.</xref:System.Array>"
    - id: arrayIndex
      type: System.Int32
      description: "Det nollbaserade indexet i `array` vilka kopiera börjar."
  overload: System.Collections.SortedList.CopyTo*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>array</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>arrayIndex</code>är mindre än noll."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>array</code>är multidimensionell.       - eller - antalet element i källan <xref href=&quot;System.Collections.SortedList&quot;> </xref> objektet är större än det tillgängliga utrymmet från <code>arrayIndex</code> till slutet av destinationen <code>array</code>."
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "Typ av källan <xref href=&quot;System.Collections.SortedList&quot;> </xref> kan inte omvandlas automatiskt till typ av målet <code> array </code>."
  platform:
  - net462
- uid: System.Collections.SortedList.Count
  id: Count
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: Count
  nameWithType: SortedList.Count
  fullName: System.Collections.SortedList.Count
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Hämtar antalet element i en <xref href=&quot;System.Collections.SortedList&quot;> </xref> objekt."
  remarks: "Varje element är ett nyckel/värde-par som kan användas som en <xref:System.Collections.DictionaryEntry>objektet.</xref:System.Collections.DictionaryEntry>       <xref:System.Collections.SortedList.Capacity%2A>är antalet element som det <xref:System.Collections.SortedList>-objekt kan lagra.</xref:System.Collections.SortedList></xref:System.Collections.SortedList.Capacity%2A> Antalet är antalet element som finns i <xref:System.Collections.SortedList>.</xref:System.Collections.SortedList>       <xref:System.Collections.SortedList.Capacity%2A>alltid är större än eller lika med Count.</xref:System.Collections.SortedList.Capacity%2A> Om antalet överstiger <xref:System.Collections.SortedList.Capacity%2A>när du lägger till element ökas automatiskt kapaciteten med omallokera den interna matrisen innan du kopierar gamla element och lägga till nya element.</xref:System.Collections.SortedList.Capacity%2A>       Hämtar värdet för den här egenskapen är en O(1)-åtgärd."
  syntax:
    content: public virtual int Count { get; }
    return:
      type: System.Int32
      description: "Antalet element i den <xref href=&quot;System.Collections.SortedList&quot;> </xref> objekt."
  overload: System.Collections.SortedList.Count*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.SortedList.GetByIndex(System.Int32)
  id: GetByIndex(System.Int32)
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: GetByIndex(Int32)
  nameWithType: SortedList.GetByIndex(Int32)
  fullName: System.Collections.SortedList.GetByIndex(Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Hämtar värdet med det angivna indexet för en <xref href=&quot;System.Collections.SortedList&quot;> </xref> objekt."
  remarks: "Index-sekvensen är baserad på Sortera sekvensen. När ett element läggs den infogas i <xref:System.Collections.SortedList>ordning och indexeringen justeras i rätt sorteringen i därefter.</xref:System.Collections.SortedList> När ett element har tagits bort, justeras indexeringen därför också. Därför index för en viss nyckel/värde-par kan ändras när element läggs till eller tas bort från den <xref:System.Collections.SortedList>objekt.</xref:System.Collections.SortedList>       Den här metoden är en O(1)-åtgärd."
  example:
  - "The following code example shows how to get one or all the keys or values in a <xref:System.Collections.SortedList> object.  \n  \n [!code-cpp[Classic SortedList.GetByIndex Example#1](~/add/codesnippet/cpp/m-system.collections.sor_8_1.cpp)]\n [!code-cs[Classic SortedList.GetByIndex Example#1](~/add/codesnippet/csharp/m-system.collections.sor_8_1.cs)]\n [!code-vb[Classic SortedList.GetByIndex Example#1](~/add/codesnippet/visualbasic/m-system.collections.sor_8_1.vb)]"
  syntax:
    content: public virtual object GetByIndex (int index);
    parameters:
    - id: index
      type: System.Int32
      description: "Det nollbaserade indexet för att hämta värdet."
    return:
      type: System.Object
      description: "Värdet på det angivna indexet för den <xref href=&quot;System.Collections.SortedList&quot;> </xref> objekt."
  overload: System.Collections.SortedList.GetByIndex*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>index</code>ligger utanför intervallet med giltiga index för den <xref href=&quot;System.Collections.SortedList&quot;> </xref> objekt."
  platform:
  - net462
- uid: System.Collections.SortedList.GetEnumerator
  id: GetEnumerator
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: GetEnumerator()
  nameWithType: SortedList.GetEnumerator()
  fullName: System.Collections.SortedList.GetEnumerator()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Returnerar ett <xref:System.Collections.IDictionaryEnumerator>objekt som går igenom en <xref href=&quot;System.Collections.SortedList&quot;> </xref> objekt.</xref:System.Collections.IDictionaryEnumerator>"
  remarks: "Den `foreach` satsen i C#-språk (`for each` i Visual Basic) döljer komplexiteten i uppräknare.  Därför använder `foreach` rekommenderas, i stället för direkt manipulering uppräknaren.       Uppräknare kan användas för att läsa data i samlingen, men de kan inte användas för att ändra den underliggande mängden.       Inledningsvis har uppräknaren placerats före det första elementet i mängden. <xref:System.Collections.IEnumerator.Reset%2A>medför också uppräknaren tillbaka till den här positionen.</xref:System.Collections.IEnumerator.Reset%2A>  I den här positionen <xref:System.Collections.IEnumerator.Current%2A>är odefinierad.</xref:System.Collections.IEnumerator.Current%2A> Därför måste du anropa <xref:System.Collections.IEnumerator.MoveNext%2A>att avancera uppräknaren till det första elementet i mängden innan du läser värdet för <xref:System.Collections.IEnumerator.Current%2A>.</xref:System.Collections.IEnumerator.Current%2A> </xref:System.Collections.IEnumerator.MoveNext%2A>       <xref:System.Collections.IEnumerator.Current%2A>returnerar samma objekt förrän antingen <xref:System.Collections.IEnumerator.MoveNext%2A>eller <xref:System.Collections.IEnumerator.Reset%2A>kallas.</xref:System.Collections.IEnumerator.Reset%2A> </xref:System.Collections.IEnumerator.MoveNext%2A></xref:System.Collections.IEnumerator.Current%2A> <xref:System.Collections.IEnumerator.MoveNext%2A>Anger <xref:System.Collections.IEnumerator.Current%2A>till nästa element.</xref:System.Collections.IEnumerator.Current%2A></xref:System.Collections.IEnumerator.MoveNext%2A>       Om <xref:System.Collections.IEnumerator.MoveNext%2A>passerar slutet på mängden uppräknaren är placerad efter det sista elementet i mängden och <xref:System.Collections.IEnumerator.MoveNext%2A>returnerar `false`.</xref:System.Collections.IEnumerator.MoveNext%2A> </xref:System.Collections.IEnumerator.MoveNext%2A> När uppräknaren är på denna position efterföljande anrop till <xref:System.Collections.IEnumerator.MoveNext%2A>också returnera `false`.</xref:System.Collections.IEnumerator.MoveNext%2A> Om senast anropet till <xref:System.Collections.IEnumerator.MoveNext%2A>returnerade `false`, <xref:System.Collections.IEnumerator.Current%2A>är odefinierad.</xref:System.Collections.IEnumerator.Current%2A> </xref:System.Collections.IEnumerator.MoveNext%2A> Ange <xref:System.Collections.IEnumerator.Current%2A>att det första elementet i mängden igen, kan du anropa <xref:System.Collections.IEnumerator.Reset%2A>följt av <xref:System.Collections.IEnumerator.MoveNext%2A>.</xref:System.Collections.IEnumerator.MoveNext%2A> </xref:System.Collections.IEnumerator.Reset%2A> </xref:System.Collections.IEnumerator.Current%2A>       En uppräknare är giltig så länge samlingen förblir oförändrad. Om ändringar görs i samlingen, till exempel att lägga till, ändra eller ta bort element, uppräknaren blir inaktuella och sitt beteende är odefinierad.       Uppräknaren har inte exklusiv åtkomst till samlingen; uppräkning av en samling är därför är inte en trådsäker procedur.  Om du vill garantera tråd under uppräkning, kan du låsa samlingen under hela uppräkningen.  Om du vill tillåta en samling som ska användas av flera trådar för läsning och skrivning, måste du implementera ditt eget synkronisering.       Den här metoden är en O(1)-åtgärd."
  syntax:
    content: public virtual System.Collections.IDictionaryEnumerator GetEnumerator ();
    parameters: []
    return:
      type: System.Collections.IDictionaryEnumerator
      description: "Ett <xref:System.Collections.IDictionaryEnumerator>objekt för den <xref href=&quot;System.Collections.SortedList&quot;> </xref> objekt.</xref:System.Collections.IDictionaryEnumerator>"
  overload: System.Collections.SortedList.GetEnumerator*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.SortedList.GetKey(System.Int32)
  id: GetKey(System.Int32)
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: GetKey(Int32)
  nameWithType: SortedList.GetKey(Int32)
  fullName: System.Collections.SortedList.GetKey(Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Hämtar nyckeln med det angivna indexet för en <xref href=&quot;System.Collections.SortedList&quot;> </xref> objekt."
  remarks: "Index-sekvensen är baserad på Sortera sekvensen. När ett element läggs den infogas i <xref:System.Collections.SortedList>ordning och indexeringen justeras i rätt sorteringen i därefter.</xref:System.Collections.SortedList> När ett element har tagits bort, justeras indexeringen därför också. Därför index för en viss nyckel/värde-par kan ändras när element läggs till eller tas bort från den <xref:System.Collections.SortedList>objekt.</xref:System.Collections.SortedList>       Den här metoden är en O(1)-åtgärd."
  example:
  - "The following code example shows how to get one or all the keys or values in a <xref:System.Collections.SortedList> object.  \n  \n [!code-cpp[Classic SortedList.GetByIndex Example#1](~/add/codesnippet/cpp/m-system.collections.sor_19_1.cpp)]\n [!code-cs[Classic SortedList.GetByIndex Example#1](~/add/codesnippet/csharp/m-system.collections.sor_19_1.cs)]\n [!code-vb[Classic SortedList.GetByIndex Example#1](~/add/codesnippet/visualbasic/m-system.collections.sor_19_1.vb)]"
  syntax:
    content: public virtual object GetKey (int index);
    parameters:
    - id: index
      type: System.Int32
      description: "Det nollbaserade indexet för nyckeln ska hämtas."
    return:
      type: System.Object
      description: "Nyckeln med det angivna indexet för den <xref href=&quot;System.Collections.SortedList&quot;> </xref> objekt."
  overload: System.Collections.SortedList.GetKey*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>index</code>ligger utanför intervallet med giltiga index för den <xref href=&quot;System.Collections.SortedList&quot;> </xref> objekt."
  platform:
  - net462
- uid: System.Collections.SortedList.GetKeyList
  id: GetKeyList
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: GetKeyList()
  nameWithType: SortedList.GetKeyList()
  fullName: System.Collections.SortedList.GetKeyList()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Hämtar nycklarna i en <xref href=&quot;System.Collections.SortedList&quot;> </xref> objekt."
  remarks: "Den returnerade <xref:System.Collections.IList>objektet är en skrivskyddad vy av nycklarna för den <xref:System.Collections.SortedList>objekt.</xref:System.Collections.SortedList> </xref:System.Collections.IList> Ändringar som gjorts på den underliggande som <xref:System.Collections.SortedList>visas omedelbart i <xref:System.Collections.IList>.</xref:System.Collections.IList> </xref:System.Collections.SortedList>       Elementen i den returnerade <xref:System.Collections.IList>sorteras i samma ordning som nycklar i <xref:System.Collections.SortedList>.</xref:System.Collections.SortedList> </xref:System.Collections.IList>       Den här metoden liknar den <xref:System.Collections.SortedList.Keys%2A>egenskapen men returnerar en <xref:System.Collections.IList>objekt i stället för en <xref:System.Collections.ICollection>objektet.</xref:System.Collections.ICollection> </xref:System.Collections.IList> </xref:System.Collections.SortedList.Keys%2A>       Den här metoden är en O(1)-åtgärd."
  example:
  - "The following code example shows how to get one or all the keys or values in a <xref:System.Collections.SortedList> object.  \n  \n [!code-cpp[Classic SortedList.GetByIndex Example#1](~/add/codesnippet/cpp/m-system.collections.sor_1_1.cpp)]\n [!code-cs[Classic SortedList.GetByIndex Example#1](~/add/codesnippet/csharp/m-system.collections.sor_1_1.cs)]\n [!code-vb[Classic SortedList.GetByIndex Example#1](~/add/codesnippet/visualbasic/m-system.collections.sor_1_1.vb)]"
  syntax:
    content: public virtual System.Collections.IList GetKeyList ();
    parameters: []
    return:
      type: System.Collections.IList
      description: "Ett <xref:System.Collections.IList>-objekt som innehåller nycklar i den <xref href=&quot;System.Collections.SortedList&quot;> </xref> objekt.</xref:System.Collections.IList>"
  overload: System.Collections.SortedList.GetKeyList*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.SortedList.GetValueList
  id: GetValueList
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: GetValueList()
  nameWithType: SortedList.GetValueList()
  fullName: System.Collections.SortedList.GetValueList()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Hämtar värdena i en <xref href=&quot;System.Collections.SortedList&quot;> </xref> objekt."
  remarks: "Den returnerade <xref:System.Collections.IList>objektet är en skrivskyddad vy av värdena i den <xref:System.Collections.SortedList>objekt.</xref:System.Collections.SortedList> </xref:System.Collections.IList> Ändringar som gjorts på den underliggande som <xref:System.Collections.SortedList>visas omedelbart i <xref:System.Collections.IList>.</xref:System.Collections.IList> </xref:System.Collections.SortedList>       Elementen i den returnerade <xref:System.Collections.IList>sorteras i samma ordning som värden i <xref:System.Collections.SortedList>.</xref:System.Collections.SortedList> </xref:System.Collections.IList>       Den här metoden liknar den <xref:System.Collections.SortedList.Values%2A>egenskapen men returnerar en <xref:System.Collections.IList>objekt i stället för en <xref:System.Collections.ICollection>objektet.</xref:System.Collections.ICollection> </xref:System.Collections.IList> </xref:System.Collections.SortedList.Values%2A>       Den här metoden är en O(1)-åtgärd."
  example:
  - "The following code example shows how to get one or all the keys or values in a <xref:System.Collections.SortedList> object.  \n  \n [!code-cpp[Classic SortedList.GetByIndex Example#1](~/add/codesnippet/cpp/m-system.collections.sor_11_1.cpp)]\n [!code-cs[Classic SortedList.GetByIndex Example#1](~/add/codesnippet/csharp/m-system.collections.sor_11_1.cs)]\n [!code-vb[Classic SortedList.GetByIndex Example#1](~/add/codesnippet/visualbasic/m-system.collections.sor_11_1.vb)]"
  syntax:
    content: public virtual System.Collections.IList GetValueList ();
    parameters: []
    return:
      type: System.Collections.IList
      description: "Ett <xref:System.Collections.IList>-objekt som innehåller värdena i den <xref href=&quot;System.Collections.SortedList&quot;> </xref> objekt.</xref:System.Collections.IList>"
  overload: System.Collections.SortedList.GetValueList*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.SortedList.IndexOfKey(System.Object)
  id: IndexOfKey(System.Object)
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: IndexOfKey(Object)
  nameWithType: SortedList.IndexOfKey(Object)
  fullName: System.Collections.SortedList.IndexOfKey(Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Returnerar det nollbaserade indexet för den angivna nyckeln i en <xref href=&quot;System.Collections.SortedList&quot;> </xref> objekt."
  remarks: "Elementen i en <xref:System.Collections.SortedList>objekt sorteras efter nycklarna antingen enligt ett visst <xref:System.Collections.IComparer>implementering anges när den <xref:System.Collections.SortedList>skapas eller bl.a till den <xref:System.IComparable>implementering som tillhandahålls av nycklar sig.</xref:System.IComparable> </xref:System.Collections.SortedList> </xref:System.Collections.IComparer> </xref:System.Collections.SortedList>       Index-sekvensen är baserad på Sortera sekvensen. När ett element läggs den infogas i <xref:System.Collections.SortedList>ordning och indexeringen justeras i rätt sorteringen i därefter.</xref:System.Collections.SortedList> När ett element har tagits bort, justeras indexeringen därför också. Därför kan index för en viss nyckel/värde-par ändras när element läggs till eller tas bort från <xref:System.Collections.SortedList>.</xref:System.Collections.SortedList>       Den här metoden använder en algoritm för binära Sök; den här metoden är därför en O (loggen `n`) igen, där `n` är <xref:System.Collections.SortedList.Count%2A>.</xref:System.Collections.SortedList.Count%2A>       Från och med .NET Framework 2.0 kan den här metoden använder den samling objekt <xref:System.Object.Equals%2A>och <xref:System.IComparable.CompareTo%2A>metoder i `item` att avgöra om det finns objekt.</xref:System.IComparable.CompareTo%2A> </xref:System.Object.Equals%2A> I tidigare versioner av .NET Framework gjordes detta genom att använda den <xref:System.Object.Equals%2A>och <xref:System.IComparable.CompareTo%2A>metoder för den `item` parameter på objekten i samlingen.</xref:System.IComparable.CompareTo%2A> </xref:System.Object.Equals%2A>"
  example:
  - "The following code example shows how to determine the index of a key or a value in a <xref:System.Collections.SortedList> object.  \n  \n [!code-cpp[Classic SortedList.IndexOfKey Example#1](~/add/codesnippet/cpp/m-system.collections.sor_2_1.cpp)]\n [!code-vb[Classic SortedList.IndexOfKey Example#1](~/add/codesnippet/visualbasic/m-system.collections.sor_2_1.vb)]\n [!code-cs[Classic SortedList.IndexOfKey Example#1](~/add/codesnippet/csharp/m-system.collections.sor_2_1.cs)]"
  syntax:
    content: public virtual int IndexOfKey (object key);
    parameters:
    - id: key
      type: System.Object
      description: "Nyckeln för att hitta i den <xref href=&quot;System.Collections.SortedList&quot;> </xref> objekt."
    return:
      type: System.Int32
      description: "Det nollbaserade indexet för den <code> key </code> parameter, om <code> key </code> finns i den <xref href=&quot;System.Collections.SortedList&quot;> </xref> objekt; annars -1."
  overload: System.Collections.SortedList.IndexOfKey*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>key</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Jämföraren utlöser ett undantag."
  platform:
  - net462
- uid: System.Collections.SortedList.IndexOfValue(System.Object)
  id: IndexOfValue(System.Object)
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: IndexOfValue(Object)
  nameWithType: SortedList.IndexOfValue(Object)
  fullName: System.Collections.SortedList.IndexOfValue(Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Returnerar det nollbaserade indexet för den första förekomsten av ett angivet värde i en <xref href=&quot;System.Collections.SortedList&quot;> </xref> objekt."
  remarks: "Index-sekvensen är baserad på Sortera sekvensen. När ett element läggs den infogas i <xref:System.Collections.SortedList>ordning och indexeringen justeras i rätt sorteringen i därefter.</xref:System.Collections.SortedList> När ett element har tagits bort, justeras indexeringen därför också. Därför index för en viss nyckel/värde-par kan ändras när element läggs till eller tas bort från den <xref:System.Collections.SortedList>objekt.</xref:System.Collections.SortedList>       Värdena för elementen i den <xref:System.Collections.SortedList>jämförs med det angivna värdet med hjälp av den <xref:System.Object.Equals%2A>metoden.</xref:System.Object.Equals%2A> </xref:System.Collections.SortedList>       Den här metoden använder en linjär sökning. den här metoden är därför en O (`n`) igen, där `n` är <xref:System.Collections.SortedList.Count%2A>.</xref:System.Collections.SortedList.Count%2A>       Från och med .NET Framework 2.0 kan den här metoden använder den samling objekt <xref:System.Object.Equals%2A>och <xref:System.IComparable.CompareTo%2A>metoder i `item` att avgöra om det finns objekt.</xref:System.IComparable.CompareTo%2A> </xref:System.Object.Equals%2A> I tidigare versioner av .NET Framework gjordes detta genom att använda den <xref:System.Object.Equals%2A>och <xref:System.IComparable.CompareTo%2A>metoder för den `item` parameter på objekten i samlingen.</xref:System.IComparable.CompareTo%2A> </xref:System.Object.Equals%2A>"
  example:
  - "The following code example shows how to determine the index of a key or a value in a <xref:System.Collections.SortedList> object.  \n  \n [!code-cpp[Classic SortedList.IndexOfKey Example#1](~/add/codesnippet/cpp/m-system.collections.sor_5_1.cpp)]\n [!code-vb[Classic SortedList.IndexOfKey Example#1](~/add/codesnippet/visualbasic/m-system.collections.sor_5_1.vb)]\n [!code-cs[Classic SortedList.IndexOfKey Example#1](~/add/codesnippet/csharp/m-system.collections.sor_5_1.cs)]"
  syntax:
    content: public virtual int IndexOfValue (object value);
    parameters:
    - id: value
      type: System.Object
      description: "Värdet för att hitta i den <xref href=&quot;System.Collections.SortedList&quot;> </xref> objekt. Värdet kan vara <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
    return:
      type: System.Int32
      description: "Det nollbaserade indexet för den första förekomsten av den <code> value </code> parameter, om <code> value </code> finns i den <xref href=&quot;System.Collections.SortedList&quot;> </xref> objekt; annars -1."
  overload: System.Collections.SortedList.IndexOfValue*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.SortedList.IsFixedSize
  id: IsFixedSize
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: IsFixedSize
  nameWithType: SortedList.IsFixedSize
  fullName: System.Collections.SortedList.IsFixedSize
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Hämtar ett värde som anger om en <xref href=&quot;System.Collections.SortedList&quot;> </xref> objekt har en fast storlek."
  remarks: "En samling med en fast storlek kan inte tillägg eller borttagning av element när samlingen har skapats, men tillåter ändring av befintliga element.       En samling med en fast storlek är helt enkelt en samling med en wrapper som förhindrar att lägga till och ta bort element. därför visar ändringar har gjorts i den underliggande mängden, inklusive tillägg eller borttagning av element, ändringarna på samlingen fast storlek.       Hämtar värdet för den här egenskapen är en O(1)-åtgärd."
  syntax:
    content: public virtual bool IsFixedSize { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Om den <xref href=&quot;System.Collections.SortedList&quot;> </xref> objekt har en fast storlek, i annat fall <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. Standardvärdet är <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Collections.SortedList.IsFixedSize*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.SortedList.IsReadOnly
  id: IsReadOnly
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: IsReadOnly
  nameWithType: SortedList.IsReadOnly
  fullName: System.Collections.SortedList.IsReadOnly
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Hämtar ett värde som anger om en <xref href=&quot;System.Collections.SortedList&quot;> </xref> objektet är skrivskyddat."
  remarks: "En samling som är skrivskyddat tillåter inte att tillägg, borttagning eller ändring av element när samlingen har skapats.       En samling som är skrivskyddad är helt enkelt en samling med en wrapper som förhindrar att ändra samlingen; Om ändringar görs i den underliggande mängden visar därför skrivskyddad samling ändringarna.       Hämtar värdet för den här egenskapen är en O(1)-åtgärd."
  syntax:
    content: public virtual bool IsReadOnly { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Om den <xref href=&quot;System.Collections.SortedList&quot;> </xref> objektet är skrivskyddat, annars <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. Standardvärdet är <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Collections.SortedList.IsReadOnly*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.SortedList.IsSynchronized
  id: IsSynchronized
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: IsSynchronized
  nameWithType: SortedList.IsSynchronized
  fullName: System.Collections.SortedList.IsSynchronized
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Hämtar ett värde som anger om åtkomst till en <xref href=&quot;System.Collections.SortedList&quot;> </xref> objektet synkroniseras (trådsäkra)."
  remarks: "Att garantera säkerheten tråd för en <xref:System.Collections.SortedList>objekt, måste du göra alla åtgärder via adapterprogram returneras av den <xref:System.Collections.SortedList.Synchronized%2A>metoden.</xref:System.Collections.SortedList.Synchronized%2A> </xref:System.Collections.SortedList>       Uppräkning av en samling är är inte en trådsäker procedur. Även när en samling har synkroniserats, kan andra trådar ändå ändra samlingen, vilket gör att uppräknaren att utlösa ett undantag. För att garantera tråd under uppräkning, kan du låsa samlingen under hela uppräkning eller fånga undantag som uppstår till följd av ändringar som gjorts av andra trådar."
  example:
  - "The following code example shows how to lock a collection using the <xref:System.Collections.SortedList.SyncRoot%2A> property during the entire enumeration.  \n  \n [!code-cpp[Classic SortedList.IsSynchronized Example#2](~/add/codesnippet/cpp/p-system.collections.sor_1_1.cpp)]\n [!code-cs[Classic SortedList.IsSynchronized Example#2](~/add/codesnippet/csharp/p-system.collections.sor_1_1.cs)]\n [!code-vb[Classic SortedList.IsSynchronized Example#2](~/add/codesnippet/visualbasic/p-system.collections.sor_1_1.vb)]  \n  \n Retrieving the value of this property is an O(1) operation.  \n  \n The following code example shows how to synchronize a <xref:System.Collections.SortedList> object, determine whether a <xref:System.Collections.SortedList> is synchronized, and use a synchronized <xref:System.Collections.SortedList>.  \n  \n [!code-cpp[Classic SortedList.IsSynchronized Example#1](~/add/codesnippet/cpp/p-system.collections.sor_1_2.cpp)]\n [!code-cs[Classic SortedList.IsSynchronized Example#1](~/add/codesnippet/csharp/p-system.collections.sor_1_2.cs)]\n [!code-vb[Classic SortedList.IsSynchronized Example#1](~/add/codesnippet/visualbasic/p-system.collections.sor_1_2.vb)]"
  syntax:
    content: public virtual bool IsSynchronized { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Om åtkomst till den <xref href=&quot;System.Collections.SortedList&quot;> </xref> objektet synkroniseras (trådsäkra), annars <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. Standardvärdet är <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Collections.SortedList.IsSynchronized*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.SortedList.Item(System.Object)
  id: Item(System.Object)
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: Item(Object)
  nameWithType: SortedList.Item(Object)
  fullName: System.Collections.SortedList.Item(Object)
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Hämtar och anger värdet som associeras med en viss nyckel i en <xref href=&quot;System.Collections.SortedList&quot;> </xref> objekt."
  remarks: "Du kan använda egenskapen Item åtkomst till ett visst element i en samling genom att ange följande syntax: `myCollection[key]`.       Du kan också använda den här egenskapen för att lägga till nya element genom att ange värdet för en nyckel som inte finns i den <xref:System.Collections.SortedList>objekt (till exempel `myCollection[&quot;myNonexistentKey&quot;] = myValue)`.</xref:System.Collections.SortedList> Men om den angivna nyckeln finns redan i den <xref:System.Collections.SortedList>, ställa in egenskapen Item skriver över det gamla värdet.</xref:System.Collections.SortedList> Däremot den <xref:System.Collections.SortedList.Add%2A>metoden ändras inte befintliga element.</xref:System.Collections.SortedList.Add%2A>       En nyckel kan inte vara `null`, men kan vara ett värde. För att särskilja `null` som returneras eftersom det gick inte att hitta den angivna nyckeln och `null` som returneras eftersom värdet för den angivna nyckeln är `null`, använda den <xref:System.Collections.SortedList.Contains%2A>metoden eller <xref:System.Collections.SortedList.ContainsKey%2A>metod för att bestämma om nyckeln finns i listan.</xref:System.Collections.SortedList.ContainsKey%2A> </xref:System.Collections.SortedList.Contains%2A>       Elementen i en <xref:System.Collections.SortedList>sorteras efter nycklarna antingen enligt ett visst <xref:System.Collections.IComparer>implementering anges när den <xref:System.Collections.SortedList>skapas eller bl.a till den <xref:System.IComparable>implementering som tillhandahålls av nycklar sig.</xref:System.IComparable> </xref:System.Collections.SortedList> </xref:System.Collections.IComparer> </xref:System.Collections.SortedList>       Nyckelordet används i C#-språk för att definiera indexerare i stället för att implementera den <xref:System.Collections.SortedList.Keys%2A>egenskapen.</xref:System.Collections.SortedList.Keys%2A> Visual Basic implementerar objektet som en default-egenskap som innehåller samma funktion för indexering.       Hämtar värdet för den här egenskapen är en O (loggen `n`) igen, där `n` är <xref:System.Collections.SortedList.Count%2A>.</xref:System.Collections.SortedList.Count%2A> Egenskapen är en O (loggen `n`) igen om nyckeln är redan i <xref:System.Collections.SortedList>.</xref:System.Collections.SortedList> Om nyckeln inte finns med i listan, ange egenskapen är en O (`n`) för osorterade data eller O (loggen `n`) om du lägger till nya element i slutet av listan. Om infogning gör en ändring av storlek, åtgärden har O (`n`)."
  syntax:
    content: public virtual object this[object key] { get; set; }
    parameters:
    - id: key
      type: System.Object
      description: "Nyckeln som associeras med att hämta eller ange värdet."
    return:
      type: System.Object
      description: "Värdet som associeras med den <code> key </code> parametern i den <xref href=&quot;System.Collections.SortedList&quot;> </xref> objekt om <code> key </code> är hittas, annars <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  overload: System.Collections.SortedList.Item*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>key</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "Egenskapen har angetts och <xref href=&quot;System.Collections.SortedList&quot;> </xref> objektet är skrivskyddat.       - eller - egenskapen anges, <code> key </code> finns inte i samlingen, och <xref href=&quot;System.Collections.SortedList&quot;> </xref> har en fast storlek."
  - type: System.OutOfMemoryException
    commentId: T:System.OutOfMemoryException
    description: "Det finns inte tillräckligt med minne för att lägga till element för den <xref href=&quot;System.Collections.SortedList&quot;> </xref>."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Jämföraren utlöser ett undantag."
  platform:
  - net462
- uid: System.Collections.SortedList.Keys
  id: Keys
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: Keys
  nameWithType: SortedList.Keys
  fullName: System.Collections.SortedList.Keys
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Hämtar nycklarna i en <xref href=&quot;System.Collections.SortedList&quot;> </xref> objekt."
  remarks: "Den <xref:System.Collections.ICollection>objektet är en skrivskyddad vy av nycklarna för den <xref:System.Collections.SortedList>objekt.</xref:System.Collections.SortedList> </xref:System.Collections.ICollection> Ändringar som gjorts på den underliggande som <xref:System.Collections.SortedList>visas omedelbart i <xref:System.Collections.ICollection>.</xref:System.Collections.ICollection> </xref:System.Collections.SortedList>       Elementen i <xref:System.Collections.ICollection>sorteras i samma ordning som nycklar i <xref:System.Collections.SortedList>.</xref:System.Collections.SortedList> </xref:System.Collections.ICollection>       Den här egenskapen är liknar den <xref:System.Collections.SortedList.GetKeyList%2A>metoden, men returnerar en <xref:System.Collections.ICollection>objekt i stället för en <xref:System.Collections.IList>objektet.</xref:System.Collections.IList> </xref:System.Collections.ICollection> </xref:System.Collections.SortedList.GetKeyList%2A>       Den här metoden är en O(1)-åtgärd."
  syntax:
    content: public virtual System.Collections.ICollection Keys { get; }
    return:
      type: System.Collections.ICollection
      description: "Ett <xref:System.Collections.ICollection>-objekt som innehåller nycklar i den <xref href=&quot;System.Collections.SortedList&quot;> </xref> objekt.</xref:System.Collections.ICollection>"
  overload: System.Collections.SortedList.Keys*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.SortedList.Remove(System.Object)
  id: Remove(System.Object)
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: Remove(Object)
  nameWithType: SortedList.Remove(Object)
  fullName: System.Collections.SortedList.Remove(Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Tar bort elementet med den angivna nyckeln från en <xref href=&quot;System.Collections.SortedList&quot;> </xref> objekt."
  remarks: "Om den <xref:System.Collections.SortedList>objektet innehåller inte ett element med den angivna nyckeln i <xref:System.Collections.SortedList>förblir oförändrad.</xref:System.Collections.SortedList> </xref:System.Collections.SortedList> Inget undantag genereras.       Element som följer efter elementet borttagna flytta uppta vacated plats i samlingar med sammanhängande element, till exempel listor. Om samlingen är indexerad, uppdateras även indexen för element som flyttas. Det här problemet gäller inte för samlingar där element begreppsmässigt är grupperade i buckets, till exempel en hash-tabell.       Den här metoden är en O (`n`) igen, där `n` är <xref:System.Collections.SortedList.Count%2A>.</xref:System.Collections.SortedList.Count%2A>"
  example:
  - "The following code example shows how to remove elements from a <xref:System.Collections.SortedList> object.  \n  \n [!code-cs[Classic SortedList.RemoveAt Example#1](~/add/codesnippet/csharp/m-system.collections.sor_6_1.cs)]\n [!code-cpp[Classic SortedList.RemoveAt Example#1](~/add/codesnippet/cpp/m-system.collections.sor_6_1.cpp)]\n [!code-vb[Classic SortedList.RemoveAt Example#1](~/add/codesnippet/visualbasic/m-system.collections.sor_6_1.vb)]"
  syntax:
    content: public virtual void Remove (object key);
    parameters:
    - id: key
      type: System.Object
      description: "Nyckeln för elementet du vill ta bort."
  overload: System.Collections.SortedList.Remove*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>key</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "Den <xref href=&quot;System.Collections.SortedList&quot;> </xref> objektet är skrivskyddat.       - eller - <xref href=&quot;System.Collections.SortedList&quot;> </xref> har en fast storlek."
  platform:
  - net462
- uid: System.Collections.SortedList.RemoveAt(System.Int32)
  id: RemoveAt(System.Int32)
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: RemoveAt(Int32)
  nameWithType: SortedList.RemoveAt(Int32)
  fullName: System.Collections.SortedList.RemoveAt(Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Ta bort element med det angivna indexet för en <xref href=&quot;System.Collections.SortedList&quot;> </xref> objekt."
  remarks: "Index-sekvensen är baserad på Sortera sekvensen. När ett element läggs den infogas i <xref:System.Collections.SortedList>ordning och indexeringen justeras i rätt sorteringen i därefter.</xref:System.Collections.SortedList> När ett element har tagits bort, justeras indexeringen därför också. Därför index för en viss nyckel/värde-par kan ändras när element läggs till eller tas bort från den <xref:System.Collections.SortedList>objekt.</xref:System.Collections.SortedList>       Element som följer efter elementet borttagna flytta uppta vacated plats i samlingar med sammanhängande element, till exempel listor. Om samlingen är indexerad, uppdateras även indexen för element som flyttas. Det här problemet gäller inte för samlingar där element begreppsmässigt är grupperade i buckets, till exempel en hash-tabell.       Den här metoden är en O (`n`) igen, där `n` är <xref:System.Collections.SortedList.Count%2A>.</xref:System.Collections.SortedList.Count%2A>"
  example:
  - "The following code example shows how to remove elements from a <xref:System.Collections.SortedList> object.  \n  \n [!code-cs[Classic SortedList.RemoveAt Example#1](~/add/codesnippet/csharp/m-system.collections.sor_17_1.cs)]\n [!code-cpp[Classic SortedList.RemoveAt Example#1](~/add/codesnippet/cpp/m-system.collections.sor_17_1.cpp)]\n [!code-vb[Classic SortedList.RemoveAt Example#1](~/add/codesnippet/visualbasic/m-system.collections.sor_17_1.vb)]"
  syntax:
    content: public virtual void RemoveAt (int index);
    parameters:
    - id: index
      type: System.Int32
      description: "Det nollbaserade indexet för elementet du vill ta bort."
  overload: System.Collections.SortedList.RemoveAt*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>index</code>ligger utanför intervallet med giltiga index för den <xref href=&quot;System.Collections.SortedList&quot;> </xref> objekt."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "Den <xref href=&quot;System.Collections.SortedList&quot;> </xref> är skrivskyddad.       - eller - <xref href=&quot;System.Collections.SortedList&quot;> </xref> har en fast storlek."
  platform:
  - net462
- uid: System.Collections.SortedList.SetByIndex(System.Int32,System.Object)
  id: SetByIndex(System.Int32,System.Object)
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: SetByIndex(Int32,Object)
  nameWithType: SortedList.SetByIndex(Int32,Object)
  fullName: System.Collections.SortedList.SetByIndex(Int32,Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Ersätter värdet på ett visst index i en <xref href=&quot;System.Collections.SortedList&quot;> </xref> objekt."
  remarks: "Index-sekvensen är baserad på Sortera sekvensen. När ett element läggs den infogas i <xref:System.Collections.SortedList>ordning och indexeringen justeras i rätt sorteringen i därefter.</xref:System.Collections.SortedList> När ett element har tagits bort, justeras indexeringen därför också. Därför index för en viss nyckel/värde-par kan ändras när element läggs till eller tas bort från den <xref:System.Collections.SortedList>objekt.</xref:System.Collections.SortedList>       Den här metoden är en O(1)-åtgärd."
  example:
  - "The following code example shows how to replace the value of an existing element in a <xref:System.Collections.SortedList> object.  \n  \n [!code-vb[Classic SortedList.SetByIndex Example#1](~/add/codesnippet/visualbasic/m-system.collections.sor_13_1.vb)]\n [!code-cs[Classic SortedList.SetByIndex Example#1](~/add/codesnippet/csharp/m-system.collections.sor_13_1.cs)]\n [!code-cpp[Classic SortedList.SetByIndex Example#1](~/add/codesnippet/cpp/m-system.collections.sor_13_1.cpp)]"
  syntax:
    content: public virtual void SetByIndex (int index, object value);
    parameters:
    - id: index
      type: System.Int32
      description: "Det nollbaserade indexet som du vill spara `value`."
    - id: value
      type: System.Object
      description: "Den <xref:System.Object>att spara i den <xref href=&quot;System.Collections.SortedList&quot;> </xref> objekt.</xref:System.Object> Värdet kan vara <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  overload: System.Collections.SortedList.SetByIndex*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>index</code>ligger utanför intervallet med giltiga index för den <xref href=&quot;System.Collections.SortedList&quot;> </xref> objekt."
  platform:
  - net462
- uid: System.Collections.SortedList.Synchronized(System.Collections.SortedList)
  id: Synchronized(System.Collections.SortedList)
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: Synchronized(SortedList)
  nameWithType: SortedList.Synchronized(SortedList)
  fullName: System.Collections.SortedList.Synchronized(SortedList)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Returnerar en synkroniserade (trådsäkra) Omslutning för en <xref href=&quot;System.Collections.SortedList&quot;> </xref> objekt."
  remarks: "Att garantera säkerheten tråd för en <xref:System.Collections.SortedList>objekt alla åtgärder måste göras via den här wrapper endast.</xref:System.Collections.SortedList>       Uppräkning av en samling är är inte en trådsäker procedur. Även när en samling har synkroniserats, kan andra trådar ändå ändra samlingen, vilket gör att uppräknaren att utlösa ett undantag. För att garantera tråd under uppräkning, kan du låsa samlingen under hela uppräkning eller fånga undantag som uppstår till följd av ändringar som gjorts av andra trådar."
  example:
  - "The following code example shows how to lock the collection using the <xref:System.Collections.SortedList.SyncRoot%2A> property during the entire enumeration.  \n  \n [!code-cpp[Classic SortedList.IsSynchronized Example#2](~/add/codesnippet/cpp/m-system.collections.sor_10_1.cpp)]\n [!code-cs[Classic SortedList.IsSynchronized Example#2](~/add/codesnippet/csharp/m-system.collections.sor_10_1.cs)]\n [!code-vb[Classic SortedList.IsSynchronized Example#2](~/add/codesnippet/visualbasic/m-system.collections.sor_10_1.vb)]  \n  \n This method is an O(1) operation.  \n  \n The following code example shows how to synchronize a <xref:System.Collections.SortedList> object, determine whether a <xref:System.Collections.SortedList> is synchronized, and use a synchronized <xref:System.Collections.SortedList>.  \n  \n [!code-cpp[Classic SortedList.IsSynchronized Example#1](~/add/codesnippet/cpp/m-system.collections.sor_10_2.cpp)]\n [!code-cs[Classic SortedList.IsSynchronized Example#1](~/add/codesnippet/csharp/m-system.collections.sor_10_2.cs)]\n [!code-vb[Classic SortedList.IsSynchronized Example#1](~/add/codesnippet/visualbasic/m-system.collections.sor_10_2.vb)]"
  syntax:
    content: public static System.Collections.SortedList Synchronized (System.Collections.SortedList list);
    parameters:
    - id: list
      type: System.Collections.SortedList
      description: "Den <xref href=&quot;System.Collections.SortedList&quot;> </xref> objekt som ska synkroniseras."
    return:
      type: System.Collections.SortedList
      description: "En synkroniseras (trådsäkra) Omslutning för det <xref href=&quot;System.Collections.SortedList&quot;> </xref> objekt."
  overload: System.Collections.SortedList.Synchronized*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>list</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Collections.SortedList.SyncRoot
  id: SyncRoot
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: SyncRoot
  nameWithType: SortedList.SyncRoot
  fullName: System.Collections.SortedList.SyncRoot
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Hämtar ett objekt som kan användas för att synkronisera åtkomst till en <xref href=&quot;System.Collections.SortedList&quot;> </xref> objekt."
  remarks: "Så här skapar du en synkroniserade version av den <xref:System.Collections.SortedList>objekt, använda den <xref:System.Collections.SortedList.Synchronized%2A>metoden.</xref:System.Collections.SortedList.Synchronized%2A> </xref:System.Collections.SortedList> Härledda klasser kan dock ge sina egna synkroniserade versionen av den <xref:System.Collections.SortedList>med egenskapen SyncRoot.</xref:System.Collections.SortedList> Synkronisera kod måste utföra åtgärder på SyncRoot av den <xref:System.Collections.SortedList>, inte direkt på <xref:System.Collections.SortedList>.</xref:System.Collections.SortedList> </xref:System.Collections.SortedList> Detta säkerställer att samlingar som är härledda från andra objekt ska fungera korrekt. Mer specifikt den upprätthåller rätt synkronisering med andra trådar samtidigt ändra den <xref:System.Collections.SortedList>objekt.</xref:System.Collections.SortedList>       Uppräkning av en samling är är inte en trådsäker procedur. Även när en samling har synkroniserats, kan andra trådar ändå ändra samlingen, vilket gör att uppräknaren att utlösa ett undantag. För att garantera tråd under uppräkning, kan du låsa samlingen under hela uppräkning eller fånga undantag som uppstår till följd av ändringar som gjorts av andra trådar."
  example:
  - "The following code example shows how to lock the collection using the SyncRoot property during the entire enumeration.  \n  \n [!code-cpp[Classic SortedList.IsSynchronized Example#2](~/add/codesnippet/cpp/p-system.collections.sor_0_1.cpp)]\n [!code-cs[Classic SortedList.IsSynchronized Example#2](~/add/codesnippet/csharp/p-system.collections.sor_0_1.cs)]\n [!code-vb[Classic SortedList.IsSynchronized Example#2](~/add/codesnippet/visualbasic/p-system.collections.sor_0_1.vb)]  \n  \n Retrieving the value of this property is an O(1) operation."
  syntax:
    content: public virtual object SyncRoot { get; }
    return:
      type: System.Object
      description: "Ett objekt som kan användas för att synkronisera åtkomst till den <xref href=&quot;System.Collections.SortedList&quot;> </xref> objekt."
  overload: System.Collections.SortedList.SyncRoot*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.SortedList.System#Collections#IEnumerable#GetEnumerator
  id: System#Collections#IEnumerable#GetEnumerator
  isEii: true
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: System.Collections.IEnumerable.GetEnumerator()
  nameWithType: SortedList.System.Collections.IEnumerable.GetEnumerator()
  fullName: System.Collections.SortedList.System.Collections.IEnumerable.GetEnumerator()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Returnerar en <xref:System.Collections.IEnumerator>som går igenom den <xref href=&quot;System.Collections.SortedList&quot;> </xref>.</xref:System.Collections.IEnumerator>"
  remarks: "[Visual Basic och C#]       Den `foreach` satsen i C#-språk (`for each` i Visual Basic) döljer komplexiteten i uppräknare.  Därför använder `foreach` rekommenderas, i stället för direkt manipulering uppräknaren.       Uppräknare kan användas för att läsa data i samlingen, men de kan inte användas för att ändra den underliggande mängden.       Inledningsvis har uppräknaren placerats före det första elementet i mängden. <xref:System.Collections.IEnumerator.Reset%2A>medför också uppräknaren tillbaka till den här positionen.</xref:System.Collections.IEnumerator.Reset%2A> AT detta position, anropar <xref:System.Collections.IEnumerator.Current%2A>genererar ett undantag.</xref:System.Collections.IEnumerator.Current%2A> Därför måste du anropa <xref:System.Collections.IEnumerator.MoveNext%2A>att avancera uppräknaren till det första elementet i mängden innan du läser värdet för <xref:System.Collections.IEnumerator.Current%2A>.</xref:System.Collections.IEnumerator.Current%2A> </xref:System.Collections.IEnumerator.MoveNext%2A>       <xref:System.Collections.IEnumerator.Current%2A>returnerar samma objekt förrän antingen <xref:System.Collections.IEnumerator.MoveNext%2A>eller <xref:System.Collections.IEnumerator.Reset%2A>kallas.</xref:System.Collections.IEnumerator.Reset%2A> </xref:System.Collections.IEnumerator.MoveNext%2A></xref:System.Collections.IEnumerator.Current%2A> <xref:System.Collections.IEnumerator.MoveNext%2A>Anger <xref:System.Collections.IEnumerator.Current%2A>till nästa element.</xref:System.Collections.IEnumerator.Current%2A></xref:System.Collections.IEnumerator.MoveNext%2A>       Om <xref:System.Collections.IEnumerator.MoveNext%2A>passerar slutet på mängden uppräknaren är placerad efter det sista elementet i mängden och <xref:System.Collections.IEnumerator.MoveNext%2A>returnerar `false`.</xref:System.Collections.IEnumerator.MoveNext%2A> </xref:System.Collections.IEnumerator.MoveNext%2A> När uppräknaren är på denna position efterföljande anrop till <xref:System.Collections.IEnumerator.MoveNext%2A>också returnera `false`.</xref:System.Collections.IEnumerator.MoveNext%2A> Om senast anropet till <xref:System.Collections.IEnumerator.MoveNext%2A>returnerade `false`, anropa <xref:System.Collections.IEnumerator.Current%2A>genererar ett undantag.</xref:System.Collections.IEnumerator.Current%2A> </xref:System.Collections.IEnumerator.MoveNext%2A> Ange <xref:System.Collections.IEnumerator.Current%2A>att det första elementet i mängden igen, kan du anropa <xref:System.Collections.IEnumerator.Reset%2A>följt av <xref:System.Collections.IEnumerator.MoveNext%2A>.</xref:System.Collections.IEnumerator.MoveNext%2A> </xref:System.Collections.IEnumerator.Reset%2A> </xref:System.Collections.IEnumerator.Current%2A>       En uppräknare är giltig så länge samlingen förblir oförändrad. Om ändringar görs i samlingen, till exempel att lägga till, ändra eller ta bort element, uppräknaren inaktuella blir och nästa anropa eller <xref:System.Collections.IEnumerator.MoveNext%2A> <xref:System.Collections.IEnumerator.Reset%2A>genererar <xref:System.InvalidOperationException>.</xref:System.InvalidOperationException> </xref:System.Collections.IEnumerator.Reset%2A> </xref:System.Collections.IEnumerator.MoveNext%2A> Om samlingen har ändrats mellan <xref:System.Collections.IEnumerator.MoveNext%2A>och <xref:System.Collections.IEnumerator.Current%2A>, <xref:System.Collections.IEnumerator.Current%2A>returnerar elementet som den är inställd på, även om uppräknaren redan är ogiltiga.</xref:System.Collections.IEnumerator.Current%2A> </xref:System.Collections.IEnumerator.Current%2A> </xref:System.Collections.IEnumerator.MoveNext%2A>       Uppräknaren har inte exklusiv åtkomst till samlingen; uppräkning av en samling är därför är inte en trådsäker procedur. Även när en samling har synkroniserats, kan andra trådar ändå ändra samlingen, vilket gör att uppräknaren att utlösa ett undantag. För att garantera tråd under uppräkning, kan du låsa samlingen under hela uppräkning eller fånga undantag som uppstår till följd av ändringar som gjorts av andra trådar.       Den här metoden är en O(1)-åtgärd."
  syntax:
    content: System.Collections.IEnumerator IEnumerable.GetEnumerator ();
    parameters: []
    return:
      type: System.Collections.IEnumerator
      description: "An <xref:System.Collections.IEnumerator> for the <xref href=&quot;System.Collections.SortedList&quot;></xref>.</xref:System.Collections.IEnumerator>"
  overload: System.Collections.SortedList.System#Collections#IEnumerable#GetEnumerator*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.SortedList.TrimToSize
  id: TrimToSize
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: TrimToSize()
  nameWithType: SortedList.TrimToSize()
  fullName: System.Collections.SortedList.TrimToSize()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Anger kapaciteten till det faktiska antalet element i en <xref href=&quot;System.Collections.SortedList&quot;> </xref> objekt."
  remarks: "Den här metoden kan användas för att minimera minne för en samling försämras om inga nya objekt läggs till i samlingen.       Så här återställer du en <xref:System.Collections.SortedList>objekt till det ursprungliga tillståndet anropet den <xref:System.Collections.SortedList.Clear%2A>metoden innan du anropar TrimToSize.</xref:System.Collections.SortedList.Clear%2A> </xref:System.Collections.SortedList> Minska en tom <xref:System.Collections.SortedList>anger kapaciteten för den <xref:System.Collections.SortedList>till standardkapaciteten.</xref:System.Collections.SortedList> </xref:System.Collections.SortedList>       Den här metoden är en O (`n`) igen, där `n` är <xref:System.Collections.SortedList.Count%2A>.</xref:System.Collections.SortedList.Count%2A>"
  example:
  - "The following code example shows how to trim the unused portions of a <xref:System.Collections.SortedList> object and how to clear its values.  \n  \n [!code-cpp[Classic SortedList.Clear Example#1](~/add/codesnippet/cpp/m-system.collections.sor_3_1.cpp)]\n [!code-cs[Classic SortedList.Clear Example#1](~/add/codesnippet/csharp/m-system.collections.sor_3_1.cs)]\n [!code-vb[Classic SortedList.Clear Example#1](~/add/codesnippet/visualbasic/m-system.collections.sor_3_1.vb)]"
  syntax:
    content: public virtual void TrimToSize ();
    parameters: []
  overload: System.Collections.SortedList.TrimToSize*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "Den <xref href=&quot;System.Collections.SortedList&quot;> </xref> objektet är skrivskyddat.       - eller - <xref href=&quot;System.Collections.SortedList&quot;> </xref> har en fast storlek."
  platform:
  - net462
- uid: System.Collections.SortedList.Values
  id: Values
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: Values
  nameWithType: SortedList.Values
  fullName: System.Collections.SortedList.Values
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Hämtar värdena i en <xref href=&quot;System.Collections.SortedList&quot;> </xref> objekt."
  remarks: "Den <xref:System.Collections.ICollection>objektet är en skrivskyddad vy av värdena i den <xref:System.Collections.SortedList>objekt.</xref:System.Collections.SortedList> </xref:System.Collections.ICollection> Ändringar som gjorts på den underliggande som <xref:System.Collections.SortedList>visas omedelbart i <xref:System.Collections.ICollection>.</xref:System.Collections.ICollection> </xref:System.Collections.SortedList>       Elementen i <xref:System.Collections.ICollection>sorteras i samma ordning som värden i <xref:System.Collections.SortedList>.</xref:System.Collections.SortedList> </xref:System.Collections.ICollection>       Den här egenskapen är liknar den <xref:System.Collections.SortedList.GetValueList%2A>metoden, men returnerar en <xref:System.Collections.ICollection>objekt i stället för en <xref:System.Collections.IList>objektet.</xref:System.Collections.IList> </xref:System.Collections.ICollection> </xref:System.Collections.SortedList.GetValueList%2A>       Den här metoden är en O(1)-åtgärd."
  syntax:
    content: public virtual System.Collections.ICollection Values { get; }
    return:
      type: System.Collections.ICollection
      description: "Ett <xref:System.Collections.ICollection>-objekt som innehåller värdena i den <xref href=&quot;System.Collections.SortedList&quot;> </xref> objekt.</xref:System.Collections.ICollection>"
  overload: System.Collections.SortedList.Values*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.InvalidCastException
  isExternal: true
  name: System.InvalidCastException
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.OutOfMemoryException
  isExternal: true
  name: System.OutOfMemoryException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.NotSupportedException
  isExternal: true
  name: System.NotSupportedException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.Collections.SortedList.#ctor
  parent: System.Collections.SortedList
  isExternal: false
  name: SortedList()
  nameWithType: SortedList.SortedList()
  fullName: System.Collections.SortedList.SortedList()
- uid: System.Collections.SortedList.#ctor(System.Collections.IComparer)
  parent: System.Collections.SortedList
  isExternal: false
  name: SortedList(IComparer)
  nameWithType: SortedList.SortedList(IComparer)
  fullName: System.Collections.SortedList.SortedList(IComparer)
- uid: System.Collections.IComparer
  parent: System.Collections
  isExternal: true
  name: IComparer
  nameWithType: IComparer
  fullName: System.Collections.IComparer
- uid: System.Collections.SortedList.#ctor(System.Collections.IDictionary)
  parent: System.Collections.SortedList
  isExternal: false
  name: SortedList(IDictionary)
  nameWithType: SortedList.SortedList(IDictionary)
  fullName: System.Collections.SortedList.SortedList(IDictionary)
- uid: System.Collections.IDictionary
  parent: System.Collections
  isExternal: true
  name: IDictionary
  nameWithType: IDictionary
  fullName: System.Collections.IDictionary
- uid: System.Collections.SortedList.#ctor(System.Int32)
  parent: System.Collections.SortedList
  isExternal: false
  name: SortedList(Int32)
  nameWithType: SortedList.SortedList(Int32)
  fullName: System.Collections.SortedList.SortedList(Int32)
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Collections.SortedList.#ctor(System.Collections.IComparer,System.Int32)
  parent: System.Collections.SortedList
  isExternal: false
  name: SortedList(IComparer,Int32)
  nameWithType: SortedList.SortedList(IComparer,Int32)
  fullName: System.Collections.SortedList.SortedList(IComparer,Int32)
- uid: System.Collections.SortedList.#ctor(System.Collections.IDictionary,System.Collections.IComparer)
  parent: System.Collections.SortedList
  isExternal: false
  name: SortedList(IDictionary,IComparer)
  nameWithType: SortedList.SortedList(IDictionary,IComparer)
  fullName: System.Collections.SortedList.SortedList(IDictionary,IComparer)
- uid: System.Collections.SortedList.Add(System.Object,System.Object)
  parent: System.Collections.SortedList
  isExternal: false
  name: Add(Object,Object)
  nameWithType: SortedList.Add(Object,Object)
  fullName: System.Collections.SortedList.Add(Object,Object)
- uid: System.Collections.SortedList.Capacity
  parent: System.Collections.SortedList
  isExternal: false
  name: Capacity
  nameWithType: SortedList.Capacity
  fullName: System.Collections.SortedList.Capacity
- uid: System.Collections.SortedList.Clear
  parent: System.Collections.SortedList
  isExternal: false
  name: Clear()
  nameWithType: SortedList.Clear()
  fullName: System.Collections.SortedList.Clear()
- uid: System.Collections.SortedList.Clone
  parent: System.Collections.SortedList
  isExternal: false
  name: Clone()
  nameWithType: SortedList.Clone()
  fullName: System.Collections.SortedList.Clone()
- uid: System.Collections.SortedList.Contains(System.Object)
  parent: System.Collections.SortedList
  isExternal: false
  name: Contains(Object)
  nameWithType: SortedList.Contains(Object)
  fullName: System.Collections.SortedList.Contains(Object)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Collections.SortedList.ContainsKey(System.Object)
  parent: System.Collections.SortedList
  isExternal: false
  name: ContainsKey(Object)
  nameWithType: SortedList.ContainsKey(Object)
  fullName: System.Collections.SortedList.ContainsKey(Object)
- uid: System.Collections.SortedList.ContainsValue(System.Object)
  parent: System.Collections.SortedList
  isExternal: false
  name: ContainsValue(Object)
  nameWithType: SortedList.ContainsValue(Object)
  fullName: System.Collections.SortedList.ContainsValue(Object)
- uid: System.Collections.SortedList.CopyTo(System.Array,System.Int32)
  parent: System.Collections.SortedList
  isExternal: false
  name: CopyTo(Array,Int32)
  nameWithType: SortedList.CopyTo(Array,Int32)
  fullName: System.Collections.SortedList.CopyTo(Array,Int32)
- uid: System.Array
  parent: System
  isExternal: true
  name: Array
  nameWithType: Array
  fullName: System.Array
- uid: System.Collections.SortedList.Count
  parent: System.Collections.SortedList
  isExternal: false
  name: Count
  nameWithType: SortedList.Count
  fullName: System.Collections.SortedList.Count
- uid: System.Collections.SortedList.GetByIndex(System.Int32)
  parent: System.Collections.SortedList
  isExternal: false
  name: GetByIndex(Int32)
  nameWithType: SortedList.GetByIndex(Int32)
  fullName: System.Collections.SortedList.GetByIndex(Int32)
- uid: System.Collections.SortedList.GetEnumerator
  parent: System.Collections.SortedList
  isExternal: false
  name: GetEnumerator()
  nameWithType: SortedList.GetEnumerator()
  fullName: System.Collections.SortedList.GetEnumerator()
- uid: System.Collections.IDictionaryEnumerator
  parent: System.Collections
  isExternal: true
  name: IDictionaryEnumerator
  nameWithType: IDictionaryEnumerator
  fullName: System.Collections.IDictionaryEnumerator
- uid: System.Collections.SortedList.GetKey(System.Int32)
  parent: System.Collections.SortedList
  isExternal: false
  name: GetKey(Int32)
  nameWithType: SortedList.GetKey(Int32)
  fullName: System.Collections.SortedList.GetKey(Int32)
- uid: System.Collections.SortedList.GetKeyList
  parent: System.Collections.SortedList
  isExternal: false
  name: GetKeyList()
  nameWithType: SortedList.GetKeyList()
  fullName: System.Collections.SortedList.GetKeyList()
- uid: System.Collections.IList
  parent: System.Collections
  isExternal: true
  name: IList
  nameWithType: IList
  fullName: System.Collections.IList
- uid: System.Collections.SortedList.GetValueList
  parent: System.Collections.SortedList
  isExternal: false
  name: GetValueList()
  nameWithType: SortedList.GetValueList()
  fullName: System.Collections.SortedList.GetValueList()
- uid: System.Collections.SortedList.IndexOfKey(System.Object)
  parent: System.Collections.SortedList
  isExternal: false
  name: IndexOfKey(Object)
  nameWithType: SortedList.IndexOfKey(Object)
  fullName: System.Collections.SortedList.IndexOfKey(Object)
- uid: System.Collections.SortedList.IndexOfValue(System.Object)
  parent: System.Collections.SortedList
  isExternal: false
  name: IndexOfValue(Object)
  nameWithType: SortedList.IndexOfValue(Object)
  fullName: System.Collections.SortedList.IndexOfValue(Object)
- uid: System.Collections.SortedList.IsFixedSize
  parent: System.Collections.SortedList
  isExternal: false
  name: IsFixedSize
  nameWithType: SortedList.IsFixedSize
  fullName: System.Collections.SortedList.IsFixedSize
- uid: System.Collections.SortedList.IsReadOnly
  parent: System.Collections.SortedList
  isExternal: false
  name: IsReadOnly
  nameWithType: SortedList.IsReadOnly
  fullName: System.Collections.SortedList.IsReadOnly
- uid: System.Collections.SortedList.IsSynchronized
  parent: System.Collections.SortedList
  isExternal: false
  name: IsSynchronized
  nameWithType: SortedList.IsSynchronized
  fullName: System.Collections.SortedList.IsSynchronized
- uid: System.Collections.SortedList.Item(System.Object)
  parent: System.Collections.SortedList
  isExternal: false
  name: Item(Object)
  nameWithType: SortedList.Item(Object)
  fullName: System.Collections.SortedList.Item(Object)
- uid: System.Collections.SortedList.Keys
  parent: System.Collections.SortedList
  isExternal: false
  name: Keys
  nameWithType: SortedList.Keys
  fullName: System.Collections.SortedList.Keys
- uid: System.Collections.ICollection
  parent: System.Collections
  isExternal: true
  name: ICollection
  nameWithType: ICollection
  fullName: System.Collections.ICollection
- uid: System.Collections.SortedList.Remove(System.Object)
  parent: System.Collections.SortedList
  isExternal: false
  name: Remove(Object)
  nameWithType: SortedList.Remove(Object)
  fullName: System.Collections.SortedList.Remove(Object)
- uid: System.Collections.SortedList.RemoveAt(System.Int32)
  parent: System.Collections.SortedList
  isExternal: false
  name: RemoveAt(Int32)
  nameWithType: SortedList.RemoveAt(Int32)
  fullName: System.Collections.SortedList.RemoveAt(Int32)
- uid: System.Collections.SortedList.SetByIndex(System.Int32,System.Object)
  parent: System.Collections.SortedList
  isExternal: false
  name: SetByIndex(Int32,Object)
  nameWithType: SortedList.SetByIndex(Int32,Object)
  fullName: System.Collections.SortedList.SetByIndex(Int32,Object)
- uid: System.Collections.SortedList.Synchronized(System.Collections.SortedList)
  parent: System.Collections.SortedList
  isExternal: false
  name: Synchronized(SortedList)
  nameWithType: SortedList.Synchronized(SortedList)
  fullName: System.Collections.SortedList.Synchronized(SortedList)
- uid: System.Collections.SortedList
  parent: System.Collections
  isExternal: false
  name: SortedList
  nameWithType: SortedList
  fullName: System.Collections.SortedList
- uid: System.Collections.SortedList.SyncRoot
  parent: System.Collections.SortedList
  isExternal: false
  name: SyncRoot
  nameWithType: SortedList.SyncRoot
  fullName: System.Collections.SortedList.SyncRoot
- uid: System.Collections.SortedList.System#Collections#IEnumerable#GetEnumerator
  parent: System.Collections.SortedList
  isExternal: false
  name: System.Collections.IEnumerable.GetEnumerator()
  nameWithType: SortedList.System.Collections.IEnumerable.GetEnumerator()
  fullName: System.Collections.SortedList.System.Collections.IEnumerable.GetEnumerator()
- uid: System.Collections.IEnumerator
  parent: System.Collections
  isExternal: true
  name: IEnumerator
  nameWithType: IEnumerator
  fullName: System.Collections.IEnumerator
- uid: System.Collections.SortedList.TrimToSize
  parent: System.Collections.SortedList
  isExternal: false
  name: TrimToSize()
  nameWithType: SortedList.TrimToSize()
  fullName: System.Collections.SortedList.TrimToSize()
- uid: System.Collections.SortedList.Values
  parent: System.Collections.SortedList
  isExternal: false
  name: Values
  nameWithType: SortedList.Values
  fullName: System.Collections.SortedList.Values
- uid: System.Collections.SortedList.#ctor*
  parent: System.Collections.SortedList
  isExternal: false
  name: SortedList
  nameWithType: SortedList.SortedList
- uid: System.Collections.SortedList.Add*
  parent: System.Collections.SortedList
  isExternal: false
  name: Add
  nameWithType: SortedList.Add
- uid: System.Collections.SortedList.Capacity*
  parent: System.Collections.SortedList
  isExternal: false
  name: Capacity
  nameWithType: SortedList.Capacity
- uid: System.Collections.SortedList.Clear*
  parent: System.Collections.SortedList
  isExternal: false
  name: Clear
  nameWithType: SortedList.Clear
- uid: System.Collections.SortedList.Clone*
  parent: System.Collections.SortedList
  isExternal: false
  name: Clone
  nameWithType: SortedList.Clone
- uid: System.Collections.SortedList.Contains*
  parent: System.Collections.SortedList
  isExternal: false
  name: Contains
  nameWithType: SortedList.Contains
- uid: System.Collections.SortedList.ContainsKey*
  parent: System.Collections.SortedList
  isExternal: false
  name: ContainsKey
  nameWithType: SortedList.ContainsKey
- uid: System.Collections.SortedList.ContainsValue*
  parent: System.Collections.SortedList
  isExternal: false
  name: ContainsValue
  nameWithType: SortedList.ContainsValue
- uid: System.Collections.SortedList.CopyTo*
  parent: System.Collections.SortedList
  isExternal: false
  name: CopyTo
  nameWithType: SortedList.CopyTo
- uid: System.Collections.SortedList.Count*
  parent: System.Collections.SortedList
  isExternal: false
  name: Count
  nameWithType: SortedList.Count
- uid: System.Collections.SortedList.GetByIndex*
  parent: System.Collections.SortedList
  isExternal: false
  name: GetByIndex
  nameWithType: SortedList.GetByIndex
- uid: System.Collections.SortedList.GetEnumerator*
  parent: System.Collections.SortedList
  isExternal: false
  name: GetEnumerator
  nameWithType: SortedList.GetEnumerator
- uid: System.Collections.SortedList.GetKey*
  parent: System.Collections.SortedList
  isExternal: false
  name: GetKey
  nameWithType: SortedList.GetKey
- uid: System.Collections.SortedList.GetKeyList*
  parent: System.Collections.SortedList
  isExternal: false
  name: GetKeyList
  nameWithType: SortedList.GetKeyList
- uid: System.Collections.SortedList.GetValueList*
  parent: System.Collections.SortedList
  isExternal: false
  name: GetValueList
  nameWithType: SortedList.GetValueList
- uid: System.Collections.SortedList.IndexOfKey*
  parent: System.Collections.SortedList
  isExternal: false
  name: IndexOfKey
  nameWithType: SortedList.IndexOfKey
- uid: System.Collections.SortedList.IndexOfValue*
  parent: System.Collections.SortedList
  isExternal: false
  name: IndexOfValue
  nameWithType: SortedList.IndexOfValue
- uid: System.Collections.SortedList.IsFixedSize*
  parent: System.Collections.SortedList
  isExternal: false
  name: IsFixedSize
  nameWithType: SortedList.IsFixedSize
- uid: System.Collections.SortedList.IsReadOnly*
  parent: System.Collections.SortedList
  isExternal: false
  name: IsReadOnly
  nameWithType: SortedList.IsReadOnly
- uid: System.Collections.SortedList.IsSynchronized*
  parent: System.Collections.SortedList
  isExternal: false
  name: IsSynchronized
  nameWithType: SortedList.IsSynchronized
- uid: System.Collections.SortedList.Item*
  parent: System.Collections.SortedList
  isExternal: false
  name: Item
  nameWithType: SortedList.Item
- uid: System.Collections.SortedList.Keys*
  parent: System.Collections.SortedList
  isExternal: false
  name: Keys
  nameWithType: SortedList.Keys
- uid: System.Collections.SortedList.Remove*
  parent: System.Collections.SortedList
  isExternal: false
  name: Remove
  nameWithType: SortedList.Remove
- uid: System.Collections.SortedList.RemoveAt*
  parent: System.Collections.SortedList
  isExternal: false
  name: RemoveAt
  nameWithType: SortedList.RemoveAt
- uid: System.Collections.SortedList.SetByIndex*
  parent: System.Collections.SortedList
  isExternal: false
  name: SetByIndex
  nameWithType: SortedList.SetByIndex
- uid: System.Collections.SortedList.Synchronized*
  parent: System.Collections.SortedList
  isExternal: false
  name: Synchronized
  nameWithType: SortedList.Synchronized
- uid: System.Collections.SortedList.SyncRoot*
  parent: System.Collections.SortedList
  isExternal: false
  name: SyncRoot
  nameWithType: SortedList.SyncRoot
- uid: System.Collections.SortedList.System#Collections#IEnumerable#GetEnumerator*
  parent: System.Collections.SortedList
  isExternal: false
  name: System.Collections.IEnumerable.GetEnumerator
  nameWithType: SortedList.System.Collections.IEnumerable.GetEnumerator
- uid: System.Collections.SortedList.TrimToSize*
  parent: System.Collections.SortedList
  isExternal: false
  name: TrimToSize
  nameWithType: SortedList.TrimToSize
- uid: System.Collections.SortedList.Values*
  parent: System.Collections.SortedList
  isExternal: false
  name: Values
  nameWithType: SortedList.Values
