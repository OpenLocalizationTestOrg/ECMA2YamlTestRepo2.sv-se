### YamlMime:ManagedReference
items:
- uid: System.Reflection.MethodBody
  id: MethodBody
  children:
  - System.Reflection.MethodBody.#ctor
  - System.Reflection.MethodBody.ExceptionHandlingClauses
  - System.Reflection.MethodBody.GetILAsByteArray
  - System.Reflection.MethodBody.InitLocals
  - System.Reflection.MethodBody.LocalSignatureMetadataToken
  - System.Reflection.MethodBody.LocalVariables
  - System.Reflection.MethodBody.MaxStackSize
  langs:
  - csharp
  name: MethodBody
  nameWithType: MethodBody
  fullName: System.Reflection.MethodBody
  type: Class
  summary: "Tillhandahåller åtkomst till metadata och MSIL för innehållet i en metod."
  remarks: "Klassen MethodBody ger åtkomst till information om lokala variabler och undantagshantering satser i en metodtext och till Microsoft mellanliggande språk (MSIL) som utgör Metodtexten.       Du kan använda matchning av token-metoder i klassen modul som <xref:System.Reflection.Module.ResolveType%2A>, <xref:System.Reflection.Module.ResolveMethod%2A>, och <xref:System.Reflection.Module.ResolveType%2A>, för att matcha token i Metodtexten till <xref:System.Type>objekt, <xref:System.Reflection.MethodInfo>objekt, och <xref:System.Reflection.FieldInfo>objekt som innehåller detaljerad information om typer, metoder och fält som används av MSIL i Metodtexten.</xref:System.Reflection.FieldInfo> </xref:System.Reflection.MethodInfo> </xref:System.Type> </xref:System.Reflection.Module.ResolveType%2A> </xref:System.Reflection.Module.ResolveMethod%2A> </xref:System.Reflection.Module.ResolveType%2A>      > [!NOTE] > Parsning metodtexter kräver goda kunskaper om metadata och format för MSIL-instruktionen. Information finns i dokumentationen Common Language Infrastructure (CLI), &quot;särskilt Partition II: Metadata Definition och semantik&quot; och &quot;Partition III: CIL instruktion ange&quot;. Dokumentationen finns online. Se [ECMA C# och gemensamma Language Infrastructure standarder](http://go.microsoft.com/fwlink/?LinkID=99212) på MSDN och [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) på Ecma International-webbplatsen.       För att erhålla ett MethodBody-objekt för en viss metod först skaffa ett <xref:System.Reflection.MethodInfo>objekt för metoden anropa den <xref:System.Reflection.MethodInfo>objektets <xref:System.Reflection.MethodBase.GetMethodBody%2A>metod.</xref:System.Reflection.MethodBase.GetMethodBody%2A> </xref:System.Reflection.MethodInfo> </xref:System.Reflection.MethodInfo>"
  example:
  - "The following code example defines a test method named `MethodBodyExample` and displays its local variable information and exception-handling clauses. The <xref:System.Reflection.MethodBase.GetMethodBody%2A?displayProperty=fullName> method is used to obtain a MethodBody object for the test method.  \n  \n The example uses the <xref:System.Reflection.MethodBody.LocalVariables%2A> property to obtain a list of <xref:System.Reflection.LocalVariableInfo> objects and then displays their types and index order. The <xref:System.Reflection.MethodBody.ExceptionHandlingClauses%2A> property is used to obtain a list of exception-handling clauses.  \n  \n> [!NOTE]\n>  Not all computer languages can generate <xref:System.Reflection.ExceptionHandlingClauseOptions?displayProperty=fullName> clauses. The Visual Basic example shows a filter clause, using a Visual Basic `When` expression, which is omitted from the examples for other languages.  \n  \n [!code-cpp[MethodBody#1](~/add/codesnippet/cpp/t-system.reflection.meth_1.cpp)]\n [!code-vb[MethodBody#1](~/add/codesnippet/visualbasic/t-system.reflection.meth_1.vb)]\n [!code-cs[MethodBody#1](~/add/codesnippet/csharp/t-system.reflection.meth_1.cs)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public class MethodBody
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Reflection.MethodBody.#ctor
  id: '#ctor'
  parent: System.Reflection.MethodBody
  langs:
  - csharp
  name: MethodBody()
  nameWithType: MethodBody.MethodBody()
  fullName: System.Reflection.MethodBody.MethodBody()
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: "Initierar en ny instans av den <xref href=&quot;System.Reflection.MethodBody&quot;> </xref> klass."
  remarks: "Den här konstruktorn anropas av härledda klasser under konstruktion av <xref:System.Reflection.MethodBody>objekt.</xref:System.Reflection.MethodBody>"
  syntax:
    content: protected MethodBody ();
    parameters: []
  overload: System.Reflection.MethodBody.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Reflection.MethodBody.ExceptionHandlingClauses
  id: ExceptionHandlingClauses
  parent: System.Reflection.MethodBody
  langs:
  - csharp
  name: ExceptionHandlingClauses
  nameWithType: MethodBody.ExceptionHandlingClauses
  fullName: System.Reflection.MethodBody.ExceptionHandlingClauses
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: "Hämtar en lista som innehåller alla undantagshantering satser i Metodtexten."
  remarks: "Listan innehåller alla satser från alla try-block i Metodtexten. Varje <xref:System.Reflection.ExceptionHandlingClause>-objekt innehåller information som identifierar try-block som den är kopplad.</xref:System.Reflection.ExceptionHandlingClause>      > [!NOTE] > Arbeta med undantagshantering satser kräver goda kunskaper om metadata och format för MSIL-instruktionen. Information finns i dokumentationen Common Language Infrastructure (CLI), &quot;särskilt Partition II: Metadata Definition och semantik&quot; och &quot;Partition III: CIL instruktion ange&quot;. Dokumentationen finns online. Se [ECMA C# och gemensamma Language Infrastructure standarder](http://go.microsoft.com/fwlink/?LinkID=99212) på MSDN och [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) på Ecma International-webbplatsen."
  example:
  - "The following code example defines a test method named `MethodBodyExample` and displays information about its exception-handling clauses. The <xref:System.Reflection.MethodBase.GetMethodBody%2A?displayProperty=fullName> method is used to obtain a <xref:System.Reflection.MethodBody> object for the test method. The ExceptionHandlingClauses property is used to obtain a list of <xref:System.Reflection.ExceptionHandlingClause> objects.  \n  \n> [!NOTE]\n>  Not all computer languages can generate <xref:System.Reflection.ExceptionHandlingClauseOptions?displayProperty=fullName> clauses. The Visual Basic example shows a filter clause, using a Visual Basic `When` expression, which is omitted from the examples for other languages.  \n  \n This code example is part of a larger example provided for the <xref:System.Reflection.MethodBody> class.  \n  \n [!code-cpp[MethodBody#2](~/add/codesnippet/cpp/p-system.reflection.meth_2_1.cpp)]\n [!code-vb[MethodBody#2](~/add/codesnippet/visualbasic/p-system.reflection.meth_2_1.vb)]\n [!code-cs[MethodBody#2](~/add/codesnippet/csharp/p-system.reflection.meth_2_1.cs)]  \n[!code-cpp[MethodBody#4](~/add/codesnippet/cpp/p-system.reflection.meth_2_2.cpp)]\n[!code-vb[MethodBody#4](~/add/codesnippet/visualbasic/p-system.reflection.meth_2_2.vb)]\n[!code-cs[MethodBody#4](~/add/codesnippet/csharp/p-system.reflection.meth_2_2.cs)]  \n[!code-cpp[MethodBody#5](~/add/codesnippet/cpp/p-system.reflection.meth_2_3.cpp)]\n[!code-vb[MethodBody#5](~/add/codesnippet/visualbasic/p-system.reflection.meth_2_3.vb)]\n[!code-cs[MethodBody#5](~/add/codesnippet/csharp/p-system.reflection.meth_2_3.cs)]  \n[!code-cpp[MethodBody#7](~/add/codesnippet/cpp/p-system.reflection.meth_2_4.cpp)]\n[!code-vb[MethodBody#7](~/add/codesnippet/visualbasic/p-system.reflection.meth_2_4.vb)]\n[!code-cs[MethodBody#7](~/add/codesnippet/csharp/p-system.reflection.meth_2_4.cs)]"
  syntax:
    content: public virtual System.Collections.Generic.IList<System.Reflection.ExceptionHandlingClause> ExceptionHandlingClauses { get; }
    return:
      type: System.Collections.Generic.IList{System.Reflection.ExceptionHandlingClause}
      description: "En &lt;xref:System.Collections.Generic.IList%601&gt; av <xref href=&quot;System.Reflection.ExceptionHandlingClause&quot;> </xref> objekt som representerar undantagshantering satser i brödtexten för metoden."
  overload: System.Reflection.MethodBody.ExceptionHandlingClauses*
  exceptions: []
  platform:
  - net462
- uid: System.Reflection.MethodBody.GetILAsByteArray
  id: GetILAsByteArray
  parent: System.Reflection.MethodBody
  langs:
  - csharp
  name: GetILAsByteArray()
  nameWithType: MethodBody.GetILAsByteArray()
  fullName: System.Reflection.MethodBody.GetILAsByteArray()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: "Returnerar MSIL för Metodtexten, som en matris med byte."
  remarks: "Du kan använda matchning av token-metoder i klassen modul som <xref:System.Reflection.Module.ResolveType%2A>, <xref:System.Reflection.Module.ResolveMethod%2A>, och <xref:System.Reflection.Module.ResolveMember%2A>, för att matcha token i Metodtexten till <xref:System.Type>objekt, <xref:System.Reflection.MethodInfo>objekt, och <xref:System.Reflection.FieldInfo>objekt som innehåller detaljerad information om typer, metoder och fält som används av MSIL i Metodtexten.</xref:System.Reflection.FieldInfo> </xref:System.Reflection.MethodInfo> </xref:System.Type> </xref:System.Reflection.Module.ResolveMember%2A> </xref:System.Reflection.Module.ResolveMethod%2A> </xref:System.Reflection.Module.ResolveType%2A>      > [!NOTE] > Parsning metodtexter kräver goda kunskaper om metadata och format för MSIL-instruktionen. Information finns i dokumentationen Common Language Infrastructure (CLI), &quot;särskilt Partition II: Metadata Definition och semantik&quot; och &quot;Partition III: CIL instruktion ange&quot;. Dokumentationen finns online. Se [ECMA C# och gemensamma Language Infrastructure standarder](http://go.microsoft.com/fwlink/?LinkID=99212) på MSDN och [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) på Ecma International-webbplatsen."
  syntax:
    content: public virtual byte[] GetILAsByteArray ();
    parameters: []
    return:
      type: System.Byte[]
      description: "En matris av typen <xref:System.Byte>som innehåller MSIL för Metodtexten.</xref:System.Byte>"
  overload: System.Reflection.MethodBody.GetILAsByteArray*
  exceptions: []
  platform:
  - net462
- uid: System.Reflection.MethodBody.InitLocals
  id: InitLocals
  parent: System.Reflection.MethodBody
  langs:
  - csharp
  name: InitLocals
  nameWithType: MethodBody.InitLocals
  fullName: System.Reflection.MethodBody.InitLocals
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: "Hämtar ett värde som anger om lokala variabler i Metodtexten initieras till standardvärdena för deras typer."
  remarks: "Egenskapen InitLocals refererar till variabler som uttryckligen inte initierats; det vill säga de variabler som har deklarerats med syntax som `int x;` i C# eller `Dim x As Integer` i Visual Basic.       Referens för variabler initieras till `null` som standard. Numeriska variabler har initierats med noll."
  example:
  - "The following code example defines a test method named `MethodBodyExample` and displays its local variable information and exception-handling clauses. The <xref:System.Reflection.MethodBase.GetMethodBody%2A?displayProperty=fullName> method is used to obtain a <xref:System.Reflection.MethodBody> object for the test method. The <xref:System.Reflection.MethodBody.MaxStackSize%2A> and InitLocals properties are displayed.  \n  \n This code example is part of a larger example provided for the <xref:System.Reflection.MethodBody> class.  \n  \n [!code-cpp[MethodBody#2](~/add/codesnippet/cpp/p-system.reflection.meth_3_1.cpp)]\n [!code-vb[MethodBody#2](~/add/codesnippet/visualbasic/p-system.reflection.meth_3_1.vb)]\n [!code-cs[MethodBody#2](~/add/codesnippet/csharp/p-system.reflection.meth_3_1.cs)]  \n[!code-cpp[MethodBody#5](~/add/codesnippet/cpp/p-system.reflection.meth_3_2.cpp)]\n[!code-vb[MethodBody#5](~/add/codesnippet/visualbasic/p-system.reflection.meth_3_2.vb)]\n[!code-cs[MethodBody#5](~/add/codesnippet/csharp/p-system.reflection.meth_3_2.cs)]"
  syntax:
    content: public virtual bool InitLocals { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Om Metodtexten innehåller koden för att initiera lokala variabler till <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> för referenstyper eller med värdet noll-initieras för värdetyper; annars <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Reflection.MethodBody.InitLocals*
  exceptions: []
  platform:
  - net462
- uid: System.Reflection.MethodBody.LocalSignatureMetadataToken
  id: LocalSignatureMetadataToken
  parent: System.Reflection.MethodBody
  langs:
  - csharp
  name: LocalSignatureMetadataToken
  nameWithType: MethodBody.LocalSignatureMetadataToken
  fullName: System.Reflection.MethodBody.LocalSignatureMetadataToken
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: "Hämtar en metadatatoken för signaturen som beskrivs i de lokala variablerna för metoden i metadata."
  remarks: "Använd den <xref:System.Reflection.MethodBody.LocalVariables%2A>egenskapen för att få information om den metoden lokala variabler.</xref:System.Reflection.MethodBody.LocalVariables%2A>      > [!NOTE] > Information om lokala variabeln signaturer finns i dokumentationen för Common Language Infrastructure (CLI) särskilt &quot;Partition II: Metadata Definition och semantik&quot;. Dokumentationen finns online. Se [ECMA C# och gemensamma Language Infrastructure standarder](http://go.microsoft.com/fwlink/?LinkID=99212) på MSDN och [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) på Ecma International-webbplatsen."
  syntax:
    content: public virtual int LocalSignatureMetadataToken { get; }
    return:
      type: System.Int32
      description: "Ett heltal som representerar metadatatoken."
  overload: System.Reflection.MethodBody.LocalSignatureMetadataToken*
  exceptions: []
  platform:
  - net462
- uid: System.Reflection.MethodBody.LocalVariables
  id: LocalVariables
  parent: System.Reflection.MethodBody
  langs:
  - csharp
  name: LocalVariables
  nameWithType: MethodBody.LocalVariables
  fullName: System.Reflection.MethodBody.LocalVariables
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: "Hämtar listan över lokala variabler deklareras i Metodtexten."
  remarks: "Du behöver inte metadatatoken för för den lokala variabeln signaturen som tillhandahålls av den <xref:System.Reflection.MethodBody.LocalSignatureMetadataToken%2A>egenskapen.</xref:System.Reflection.MethodBody.LocalSignatureMetadataToken%2A>"
  example:
  - "The following code example defines a test method named `MethodBodyExample` and displays its local variable information. The <xref:System.Reflection.MethodBase.GetMethodBody%2A?displayProperty=fullName> method is used to obtain a <xref:System.Reflection.MethodBody> object for the test method. The LocalVariables property is used to obtain a list of <xref:System.Reflection.LocalVariableInfo> objects.  \n  \n This code example is part of a larger example provided for the <xref:System.Reflection.MethodBody> class.  \n  \n [!code-cpp[MethodBody#2](~/add/codesnippet/cpp/p-system.reflection.meth_0_1.cpp)]\n [!code-vb[MethodBody#2](~/add/codesnippet/visualbasic/p-system.reflection.meth_0_1.vb)]\n [!code-cs[MethodBody#2](~/add/codesnippet/csharp/p-system.reflection.meth_0_1.cs)]  \n[!code-cpp[MethodBody#3](~/add/codesnippet/cpp/p-system.reflection.meth_0_2.cpp)]\n[!code-vb[MethodBody#3](~/add/codesnippet/visualbasic/p-system.reflection.meth_0_2.vb)]\n[!code-cs[MethodBody#3](~/add/codesnippet/csharp/p-system.reflection.meth_0_2.cs)]  \n[!code-cpp[MethodBody#5](~/add/codesnippet/cpp/p-system.reflection.meth_0_3.cpp)]\n[!code-vb[MethodBody#5](~/add/codesnippet/visualbasic/p-system.reflection.meth_0_3.vb)]\n[!code-cs[MethodBody#5](~/add/codesnippet/csharp/p-system.reflection.meth_0_3.cs)]  \n[!code-cpp[MethodBody#6](~/add/codesnippet/cpp/p-system.reflection.meth_0_4.cpp)]\n[!code-vb[MethodBody#6](~/add/codesnippet/visualbasic/p-system.reflection.meth_0_4.vb)]\n[!code-cs[MethodBody#6](~/add/codesnippet/csharp/p-system.reflection.meth_0_4.cs)]"
  syntax:
    content: public virtual System.Collections.Generic.IList<System.Reflection.LocalVariableInfo> LocalVariables { get; }
    return:
      type: System.Collections.Generic.IList{System.Reflection.LocalVariableInfo}
      description: "En &lt;xref:System.Collections.Generic.IList%601&gt; av <xref:System.Reflection.LocalVariableInfo>objekt som beskriver de lokala variablerna deklareras i Metodtexten.</xref:System.Reflection.LocalVariableInfo>"
  overload: System.Reflection.MethodBody.LocalVariables*
  exceptions: []
  platform:
  - net462
- uid: System.Reflection.MethodBody.MaxStackSize
  id: MaxStackSize
  parent: System.Reflection.MethodBody
  langs:
  - csharp
  name: MaxStackSize
  nameWithType: MethodBody.MaxStackSize
  fullName: System.Reflection.MethodBody.MaxStackSize
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: "Hämtar det maximala antalet objekt i stacken operanden när metoden körs."
  remarks: 'Mer information finns i dokumentationen för Common Language Infrastructure (CLI), &quot;särskilt Partition II: Metadata Definition och semantik&quot; och &quot;Partition III: CIL instruktion ange&quot;. Dokumentationen finns online. Se [ECMA C# och gemensamma Language Infrastructure standarder](http://go.microsoft.com/fwlink/?LinkID=99212) på MSDN och [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) på Ecma International-webbplatsen.'
  example:
  - "The following code example defines a test method named `MethodBodyExample` and displays its local variable information and exception-handling clauses. The <xref:System.Reflection.MethodBase.GetMethodBody%2A?displayProperty=fullName> method is used to obtain a <xref:System.Reflection.MethodBody> object for the test method. The MaxStackSize and <xref:System.Reflection.MethodBody.InitLocals%2A> properties are displayed.  \n  \n This code example is part of a larger example provided for the <xref:System.Reflection.MethodBody> class.  \n  \n [!code-cpp[MethodBody#2](~/add/codesnippet/cpp/p-system.reflection.meth_1_1.cpp)]\n [!code-vb[MethodBody#2](~/add/codesnippet/visualbasic/p-system.reflection.meth_1_1.vb)]\n [!code-cs[MethodBody#2](~/add/codesnippet/csharp/p-system.reflection.meth_1_1.cs)]  \n[!code-cpp[MethodBody#5](~/add/codesnippet/cpp/p-system.reflection.meth_1_2.cpp)]\n[!code-vb[MethodBody#5](~/add/codesnippet/visualbasic/p-system.reflection.meth_1_2.vb)]\n[!code-cs[MethodBody#5](~/add/codesnippet/csharp/p-system.reflection.meth_1_2.cs)]"
  syntax:
    content: public virtual int MaxStackSize { get; }
    return:
      type: System.Int32
      description: "Maximalt antal objekt i stacken operanden när metoden körs."
  overload: System.Reflection.MethodBody.MaxStackSize*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Reflection.MethodBody.#ctor
  parent: System.Reflection.MethodBody
  isExternal: false
  name: MethodBody()
  nameWithType: MethodBody.MethodBody()
  fullName: System.Reflection.MethodBody.MethodBody()
- uid: System.Reflection.MethodBody.ExceptionHandlingClauses
  parent: System.Reflection.MethodBody
  isExternal: false
  name: ExceptionHandlingClauses
  nameWithType: MethodBody.ExceptionHandlingClauses
  fullName: System.Reflection.MethodBody.ExceptionHandlingClauses
- uid: System.Collections.Generic.IList{System.Reflection.ExceptionHandlingClause}
  parent: System.Collections.Generic
  isExternal: true
  name: IList<ExceptionHandlingClause>
  nameWithType: IList<ExceptionHandlingClause>
  fullName: System.Collections.Generic.IList<System.Reflection.ExceptionHandlingClause>
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: IList<System.Reflection.ExceptionHandlingClause>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Reflection.ExceptionHandlingClause
    name: ExceptionHandlingClause
    nameWithType: ExceptionHandlingClause
    fullName: ExceptionHandlingClause
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Reflection.MethodBody.GetILAsByteArray
  parent: System.Reflection.MethodBody
  isExternal: false
  name: GetILAsByteArray()
  nameWithType: MethodBody.GetILAsByteArray()
  fullName: System.Reflection.MethodBody.GetILAsByteArray()
- uid: System.Byte[]
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: Byte[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Reflection.MethodBody.InitLocals
  parent: System.Reflection.MethodBody
  isExternal: false
  name: InitLocals
  nameWithType: MethodBody.InitLocals
  fullName: System.Reflection.MethodBody.InitLocals
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Reflection.MethodBody.LocalSignatureMetadataToken
  parent: System.Reflection.MethodBody
  isExternal: false
  name: LocalSignatureMetadataToken
  nameWithType: MethodBody.LocalSignatureMetadataToken
  fullName: System.Reflection.MethodBody.LocalSignatureMetadataToken
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Reflection.MethodBody.LocalVariables
  parent: System.Reflection.MethodBody
  isExternal: false
  name: LocalVariables
  nameWithType: MethodBody.LocalVariables
  fullName: System.Reflection.MethodBody.LocalVariables
- uid: System.Collections.Generic.IList{System.Reflection.LocalVariableInfo}
  parent: System.Collections.Generic
  isExternal: true
  name: IList<LocalVariableInfo>
  nameWithType: IList<LocalVariableInfo>
  fullName: System.Collections.Generic.IList<System.Reflection.LocalVariableInfo>
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: IList<System.Reflection.LocalVariableInfo>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Reflection.LocalVariableInfo
    name: LocalVariableInfo
    nameWithType: LocalVariableInfo
    fullName: LocalVariableInfo
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Reflection.MethodBody.MaxStackSize
  parent: System.Reflection.MethodBody
  isExternal: false
  name: MaxStackSize
  nameWithType: MethodBody.MaxStackSize
  fullName: System.Reflection.MethodBody.MaxStackSize
- uid: System.Reflection.MethodBody.#ctor*
  parent: System.Reflection.MethodBody
  isExternal: false
  name: MethodBody
  nameWithType: MethodBody.MethodBody
- uid: System.Reflection.MethodBody.ExceptionHandlingClauses*
  parent: System.Reflection.MethodBody
  isExternal: false
  name: ExceptionHandlingClauses
  nameWithType: MethodBody.ExceptionHandlingClauses
- uid: System.Reflection.MethodBody.GetILAsByteArray*
  parent: System.Reflection.MethodBody
  isExternal: false
  name: GetILAsByteArray
  nameWithType: MethodBody.GetILAsByteArray
- uid: System.Reflection.MethodBody.InitLocals*
  parent: System.Reflection.MethodBody
  isExternal: false
  name: InitLocals
  nameWithType: MethodBody.InitLocals
- uid: System.Reflection.MethodBody.LocalSignatureMetadataToken*
  parent: System.Reflection.MethodBody
  isExternal: false
  name: LocalSignatureMetadataToken
  nameWithType: MethodBody.LocalSignatureMetadataToken
- uid: System.Reflection.MethodBody.LocalVariables*
  parent: System.Reflection.MethodBody
  isExternal: false
  name: LocalVariables
  nameWithType: MethodBody.LocalVariables
- uid: System.Reflection.MethodBody.MaxStackSize*
  parent: System.Reflection.MethodBody
  isExternal: false
  name: MaxStackSize
  nameWithType: MethodBody.MaxStackSize
