### YamlMime:ManagedReference
items:
- uid: System.Runtime.Serialization.ISerializable
  id: ISerializable
  children:
  - System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  langs:
  - csharp
  name: ISerializable
  nameWithType: ISerializable
  fullName: System.Runtime.Serialization.ISerializable
  type: Interface
  summary: "Tillåter ett objekt för att styra sin egen serialisering och deserialisering."
  remarks: "En klass som kan serialiseras måste markeras med <xref:System.SerializableAttribute>.</xref:System.SerializableAttribute> Om en klass måste kontrollera dess serialisering process, implementerar det ISerializable-gränssnittet. Den <xref:System.Runtime.Serialization.Formatter>anrop av <xref:System.Runtime.Serialization.ISerializable.GetObjectData%2A>serialisering för närvarande och fyller den angivna <xref:System.Runtime.Serialization.SerializationInfo>med alla data som krävs för att representera objektet.</xref:System.Runtime.Serialization.SerializationInfo> </xref:System.Runtime.Serialization.ISerializable.GetObjectData%2A> </xref:System.Runtime.Serialization.Formatter> Den <xref:System.Runtime.Serialization.Formatter>skapar en <xref:System.Runtime.Serialization.SerializationInfo>med typ av objekt i diagrammet.</xref:System.Runtime.Serialization.SerializationInfo> </xref:System.Runtime.Serialization.Formatter> Objekt som behöver skicka proxyservrar för själva kan använda den <xref:System.Runtime.Serialization.SerializationInfo.FullTypeName%2A>och <xref:System.Runtime.Serialization.SerializationInfo.AssemblyName%2A>metoder i <xref:System.Runtime.Serialization.SerializationInfo>att ändra den överförda informationen.</xref:System.Runtime.Serialization.SerializationInfo> </xref:System.Runtime.Serialization.SerializationInfo.AssemblyName%2A> </xref:System.Runtime.Serialization.SerializationInfo.FullTypeName%2A>       När det gäller klassarv är det möjligt att serialisera en klass som härleds från en basklass som implementerar ISerializable. I det här fallet ska den härledda klassen anropa basklass implementeringen av <xref:System.Runtime.Serialization.ISerializable.GetObjectData%2A>i dess implementering av <xref:System.Runtime.Serialization.ISerializable.GetObjectData%2A>.</xref:System.Runtime.Serialization.ISerializable.GetObjectData%2A> </xref:System.Runtime.Serialization.ISerializable.GetObjectData%2A> Data från basklassen kommer annars inte serialiseras.       ISerializable-gränssnittet innebär en konstruktor med konstruktorn signatur (<xref:System.Runtime.Serialization.SerializationInfo> information <xref:System.Runtime.Serialization.StreamingContext>kontexten).</xref:System.Runtime.Serialization.StreamingContext> </xref:System.Runtime.Serialization.SerializationInfo> Vid deserialisering tidpunkt konstruktorn aktuella anropas efter data i den <xref:System.Runtime.Serialization.SerializationInfo>har varit avserialiseras av Formateraren.</xref:System.Runtime.Serialization.SerializationInfo> I allmänhet bör den här konstruktorn skyddas om klassen inte är förseglat.       Den ordning som objekt är avserialiseras kan inte garanteras. Om en typ som inte ännu har deserialisera refererar till en typ, till exempel inträffar ett undantag. Om du skapar typer som har sådana beroenden, du kan undvika problemet genom att implementera den `IDeserializationCallback` gränssnitt och `OnDeserialization` metod.       Arkitektur för serialisering hanterar objekttyper som utökar <xref:System.MarshalByRefObject>de typer som utökar <xref:System.Object>.</xref:System.Object> </xref:System.MarshalByRefObject> Dessa typer kan markeras med den <xref:System.SerializableAttribute>och implementerar ISerializable-gränssnittet som andra objekttyp.</xref:System.SerializableAttribute> Tillstånd för objekt ska fångas och beständiga till dataströmmen.       När dessa typer används via <xref:System.Runtime.Remoting>, fjärrinfrastrukturen ger ett surrogat som blockerar vanliga serialisering och i stället Serialiserar en proxy till <xref:System.MarshalByRefObject>.</xref:System.MarshalByRefObject> </xref:System.Runtime.Remoting> Ett surrogat är en hjälp som vet hur serialisera och deserialisera objekt av en viss typ. Proxy, osynliga för användare i de flesta fall ska vara av typen <xref:System.Runtime.Remoting.ObjRef>.</xref:System.Runtime.Remoting.ObjRef>       Som en allmän designmönstret är det ovanligt att en klass som båda markeras med attributet serialiseras och utöka <xref:System.MarshalByRefObject>.</xref:System.MarshalByRefObject> Utvecklare bör tänka igenom möjliga scenarier för serialisering och fjärrkommunikation vid kombination av dessa två variabler. Ett exempel där detta kan vara tillämpliga är med <xref:System.IO.MemoryStream>.</xref:System.IO.MemoryStream> När klassen basklass <xref:System.IO.MemoryStream>(<xref:System.IO.Stream>) sträcker sig från <xref:System.MarshalByRefObject>, är det möjligt att spara tillståndet för en <xref:System.IO.MemoryStream>och återställer den när du vill.</xref:System.IO.MemoryStream> </xref:System.MarshalByRefObject> </xref:System.IO.Stream> </xref:System.IO.MemoryStream> Det kan därför vara meningsfullt att serialisera tillståndet för den här dataströmmen till en databas och återställer den vid en senare tidpunkt. När det används via remoting, men är ett objekt av den här typen via proxy.       Mer information om serialisering av klasser som utökar <xref:System.MarshalByRefObject>finns <xref:System.Runtime.Remoting.Messaging.RemotingSurrogateSelector>.</xref:System.Runtime.Remoting.Messaging.RemotingSurrogateSelector> </xref:System.MarshalByRefObject> Mer information om hur du implementerar ISerializable finns [anpassad serialisering](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following code example demonstrates the use of the ISerializable interface to define custom serialization behavior for a class.  \n  \n [!code-cpp[ISerializable Interface Example#1](~/add/codesnippet/cpp/t-system.runtime.seriali_4_1.cpp)]\n [!code-cs[ISerializable Interface Example#1](~/add/codesnippet/csharp/t-system.runtime.seriali_4_1.cs)]\n [!code-vb[ISerializable Interface Example#1](~/add/codesnippet/visualbasic/t-system.runtime.seriali_4_1.vb)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public interface ISerializable
  implements: []
  platform:
  - net462
- uid: System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  id: GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  parent: System.Runtime.Serialization.ISerializable
  langs:
  - csharp
  name: GetObjectData(SerializationInfo,StreamingContext)
  nameWithType: ISerializable.GetObjectData(SerializationInfo,StreamingContext)
  fullName: System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo,StreamingContext)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Runtime.Serialization
  summary: "Fyller på en <xref href=&quot;System.Runtime.Serialization.SerializationInfo&quot;> </xref> med de data som behövs för att serialisera målobjektet."
  remarks: "Alla objekt som ingår i den <xref:System.Runtime.Serialization.SerializationInfo>spåras och serialiseras av Formateraren automatiskt.</xref:System.Runtime.Serialization.SerializationInfo>       Kod som anropar GetObjectData kräver den <xref:System.Security.Permissions.SecurityPermission>för att tillhandahålla tjänster för serialisering.</xref:System.Security.Permissions.SecurityPermission> Associerade uppräkningen: <xref:System.Security.Permissions.SecurityPermissionFlag?displayProperty=fullName>.</xref:System.Security.Permissions.SecurityPermissionFlag?displayProperty=fullName>      > [!NOTE] > Det är inte säkert att den här metoden kan bara anropas en gång per objektinstansen under serialiseringen. Metoden bör därför genomföras så att dess beteende blir detsamma oavsett hur många gånger den anropas."
  example:
  - "The following example uses the GetObjectData method to set alternate values for a serialized object. The code uses the <xref:System.Runtime.Serialization.SerializationInfo.AddValue%2A> method of the <xref:System.Runtime.Serialization.SerializationInfo> class to store the alternate values when the object is serialized. Conversely, when the constructor of the `Person` class is called during deserialization, the alternatve values are retrieved using the <xref:System.Runtime.Serialization.SerializationInfo.GetValue%2A> method and reassigned to the object's fields.  \n  \n [!code-cs[ISerializable_GetObjectData#0](~/add/codesnippet/csharp/8416df17-ca26-45ef-baab-_1.cs)]\n [!code-vb[ISerializable_GetObjectData#0](~/add/codesnippet/visualbasic/8416df17-ca26-45ef-baab-_1.vb)]"
  syntax:
    content: public void GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    parameters:
    - id: info
      type: System.Runtime.Serialization.SerializationInfo
      description: "Den <xref href=&quot;System.Runtime.Serialization.SerializationInfo&quot;> </xref> att fylla i med data."
    - id: context
      type: System.Runtime.Serialization.StreamingContext
      description: "Målet (se <xref:System.Runtime.Serialization.StreamingContext>) för den här serialisering.</xref:System.Runtime.Serialization.StreamingContext>"
  overload: System.Runtime.Serialization.ISerializable.GetObjectData*
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "Anroparen har inte behörigheten som krävs."
  platform:
  - net462
references:
- uid: System.Security.SecurityException
  isExternal: true
  name: System.Security.SecurityException
- uid: System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  parent: System.Runtime.Serialization.ISerializable
  isExternal: false
  name: GetObjectData(SerializationInfo,StreamingContext)
  nameWithType: ISerializable.GetObjectData(SerializationInfo,StreamingContext)
  fullName: System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo,StreamingContext)
- uid: System.Runtime.Serialization.SerializationInfo
  parent: System.Runtime.Serialization
  isExternal: false
  name: SerializationInfo
  nameWithType: SerializationInfo
  fullName: System.Runtime.Serialization.SerializationInfo
- uid: System.Runtime.Serialization.StreamingContext
  parent: System.Runtime.Serialization
  isExternal: true
  name: StreamingContext
  nameWithType: StreamingContext
  fullName: System.Runtime.Serialization.StreamingContext
- uid: System.Runtime.Serialization.ISerializable.GetObjectData*
  parent: System.Runtime.Serialization.ISerializable
  isExternal: false
  name: GetObjectData
  nameWithType: ISerializable.GetObjectData
