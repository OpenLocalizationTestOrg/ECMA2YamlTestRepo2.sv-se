### YamlMime:ManagedReference
items:
- uid: System.Runtime.Remoting.ObjectHandle
  id: ObjectHandle
  children:
  - System.Runtime.Remoting.ObjectHandle.#ctor(System.Object)
  - System.Runtime.Remoting.ObjectHandle.InitializeLifetimeService
  - System.Runtime.Remoting.ObjectHandle.Unwrap
  langs:
  - csharp
  name: ObjectHandle
  nameWithType: ObjectHandle
  fullName: System.Runtime.Remoting.ObjectHandle
  type: Class
  summary: "Packar konvertering av värdet objektreferenser, så att de kan returneras via en trick."
  remarks: "Klassen ObjectHandle används för att skicka ett objekt (i en omsluten tillstånd) mellan flera programdomäner utan att läsa in metadata för objektet omsluten i varje <xref:System.AppDomain>via ObjectHandle flyttar.</xref:System.AppDomain> Därför klassen ObjectHandle ger anroparen kontroll över när den <xref:System.Type>fjärrobjektet har lästs in i en domän.</xref:System.Type>"
  example:
  - "The following code example shows how to create an object in another <xref:System.AppDomain>, and retrieve a proxy to the object from a ObjectHandle. In this example, you can assume that the code of the `MyType` class is compiled into an assembly called \"ObjectHandleAssembly\".  \n  \n [!code-cpp[ObjectHandle#1](~/add/codesnippet/cpp/t-system.runtime.remotin_58_1.cpp)]\n [!code-vb[ObjectHandle#1](~/add/codesnippet/visualbasic/t-system.runtime.remotin_58_1.vb)]\n [!code-cs[ObjectHandle#1](~/add/codesnippet/csharp/t-system.runtime.remotin_58_1.cs)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ClassInterface(System.Runtime.InteropServices.ClassInterfaceType.AutoDual)]

      [System.Runtime.InteropServices.ComVisible(true)]

      public class ObjectHandle : MarshalByRefObject, System.Runtime.Remoting.IObjectHandle
  inheritance:
  - System.Object
  - System.MarshalByRefObject
  implements:
  - System.Runtime.Remoting.IObjectHandle
  inheritedMembers:
  - System.MarshalByRefObject.CreateObjRef(System.Type)
  - System.MarshalByRefObject.GetLifetimeService
  - System.MarshalByRefObject.MemberwiseClone(System.Boolean)
  platform:
  - net462
- uid: System.Runtime.Remoting.ObjectHandle.#ctor(System.Object)
  id: '#ctor(System.Object)'
  parent: System.Runtime.Remoting.ObjectHandle
  langs:
  - csharp
  name: ObjectHandle(Object)
  nameWithType: ObjectHandle.ObjectHandle(Object)
  fullName: System.Runtime.Remoting.ObjectHandle.ObjectHandle(Object)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Runtime.Remoting
  summary: "Initierar en instans av den <xref href=&quot;System.Runtime.Remoting.ObjectHandle&quot;> </xref> klass, wrapping det angivna-objektet <code> o </code>."
  syntax:
    content: public ObjectHandle (object o);
    parameters:
    - id: o
      type: System.Object
      description: "Det objekt som kapslas in med ett nytt <xref href=&quot;System.Runtime.Remoting.ObjectHandle&quot;> </xref>."
  overload: System.Runtime.Remoting.ObjectHandle.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Runtime.Remoting.ObjectHandle.InitializeLifetimeService
  id: InitializeLifetimeService
  parent: System.Runtime.Remoting.ObjectHandle
  langs:
  - csharp
  name: InitializeLifetimeService()
  nameWithType: ObjectHandle.InitializeLifetimeService()
  fullName: System.Runtime.Remoting.ObjectHandle.InitializeLifetimeService()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Runtime.Remoting
  summary: "Initierar lånet livslängd för omslutna objektet."
  syntax:
    content: public override object InitializeLifetimeService ();
    parameters: []
    return:
      type: System.Object
      description: "En initierad <xref href=&quot;System.Runtime.Remoting.Lifetime.ILease&quot;> </xref> som gör det möjligt att styra livslängden för omslutna objektet."
  overload: System.Runtime.Remoting.ObjectHandle.InitializeLifetimeService*
  exceptions: []
  platform:
  - net462
- uid: System.Runtime.Remoting.ObjectHandle.Unwrap
  id: Unwrap
  parent: System.Runtime.Remoting.ObjectHandle
  langs:
  - csharp
  name: Unwrap()
  nameWithType: ObjectHandle.Unwrap()
  fullName: System.Runtime.Remoting.ObjectHandle.Unwrap()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Runtime.Remoting
  summary: "Returnerar det omslutna objektet."
  remarks: ''
  example:
  - "The following code example demonstrates how to activate an object in another <xref:System.AppDomain>, retrieve a proxy to it with the Unwrap method, and use the proxy to access the remote object.  \n  \n [!code-cpp[ObjectHandle#2](~/add/codesnippet/cpp/m-system.runtime.remotin_83_1.cpp)]\n [!code-vb[ObjectHandle#2](~/add/codesnippet/visualbasic/m-system.runtime.remotin_83_1.vb)]\n [!code-cs[ObjectHandle#2](~/add/codesnippet/csharp/m-system.runtime.remotin_83_1.cs)]"
  syntax:
    content: public object Unwrap ();
    parameters: []
    return:
      type: System.Object
      description: "Omslutna objektet."
  overload: System.Runtime.Remoting.ObjectHandle.Unwrap*
  exceptions: []
  platform:
  - net462
references:
- uid: System.MarshalByRefObject
  isExternal: false
  name: System.MarshalByRefObject
- uid: System.Runtime.Remoting.ObjectHandle.#ctor(System.Object)
  parent: System.Runtime.Remoting.ObjectHandle
  isExternal: false
  name: ObjectHandle(Object)
  nameWithType: ObjectHandle.ObjectHandle(Object)
  fullName: System.Runtime.Remoting.ObjectHandle.ObjectHandle(Object)
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Runtime.Remoting.ObjectHandle.InitializeLifetimeService
  parent: System.Runtime.Remoting.ObjectHandle
  isExternal: false
  name: InitializeLifetimeService()
  nameWithType: ObjectHandle.InitializeLifetimeService()
  fullName: System.Runtime.Remoting.ObjectHandle.InitializeLifetimeService()
- uid: System.Runtime.Remoting.ObjectHandle.Unwrap
  parent: System.Runtime.Remoting.ObjectHandle
  isExternal: false
  name: Unwrap()
  nameWithType: ObjectHandle.Unwrap()
  fullName: System.Runtime.Remoting.ObjectHandle.Unwrap()
- uid: System.Runtime.Remoting.ObjectHandle.#ctor*
  parent: System.Runtime.Remoting.ObjectHandle
  isExternal: false
  name: ObjectHandle
  nameWithType: ObjectHandle.ObjectHandle
- uid: System.Runtime.Remoting.ObjectHandle.InitializeLifetimeService*
  parent: System.Runtime.Remoting.ObjectHandle
  isExternal: false
  name: InitializeLifetimeService
  nameWithType: ObjectHandle.InitializeLifetimeService
- uid: System.Runtime.Remoting.ObjectHandle.Unwrap*
  parent: System.Runtime.Remoting.ObjectHandle
  isExternal: false
  name: Unwrap
  nameWithType: ObjectHandle.Unwrap
