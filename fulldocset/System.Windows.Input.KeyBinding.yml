### YamlMime:ManagedReference
items:
- uid: System.Windows.Input.KeyBinding
  id: KeyBinding
  children:
  - System.Windows.Input.KeyBinding.#ctor
  - System.Windows.Input.KeyBinding.#ctor(System.Windows.Input.ICommand,System.Windows.Input.KeyGesture)
  - System.Windows.Input.KeyBinding.#ctor(System.Windows.Input.ICommand,System.Windows.Input.Key,System.Windows.Input.ModifierKeys)
  - System.Windows.Input.KeyBinding.CreateInstanceCore
  - System.Windows.Input.KeyBinding.Gesture
  - System.Windows.Input.KeyBinding.Key
  - System.Windows.Input.KeyBinding.KeyProperty
  - System.Windows.Input.KeyBinding.Modifiers
  - System.Windows.Input.KeyBinding.ModifiersProperty
  langs:
  - csharp
  name: KeyBinding
  nameWithType: KeyBinding
  fullName: System.Windows.Input.KeyBinding
  type: Class
  summary: "Binder en <xref href=&quot;System.Windows.Input.KeyGesture&quot;> </xref> till en <xref href=&quot;System.Windows.Input.RoutedCommand&quot;> </xref> (eller någon annan <xref:System.Windows.Input.ICommand>implementering).</xref:System.Windows.Input.ICommand>"
  remarks: "En KeyBinding associerar en <xref:System.Windows.Input.KeyGesture>med en <xref:System.Windows.Input.ICommand>, till exempel en <xref:System.Windows.Input.RoutedCommand>.</xref:System.Windows.Input.RoutedCommand> </xref:System.Windows.Input.ICommand> </xref:System.Windows.Input.KeyGesture> <xref:System.Windows.Input.RoutedCommand>är den primära implementeringen av den <xref:System.Windows.Input.ICommand>gränssnitt för den [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)] drar till sig system.</xref:System.Windows.Input.ICommand></xref:System.Windows.Input.RoutedCommand>  Generellt sett om den <xref:System.Windows.Input.KeyGesture>körs kommandot anropas, även om kommandobeteendet ytterligare påverkas av kommandot specifika faktorer som den <xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A>värde.</xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A> </xref:System.Windows.Input.KeyGesture>  Mer information om drar till sig finns i [drar till sig översikt](~/add/includes/ajax-current-ext-md.md).       Med undantag av funktionstangenterna och numeriska tangentbordet nycklar, ett giltigt <xref:System.Windows.Input.KeyGesture>måste innehålla exakt ett <xref:System.Windows.Input.Key>och en eller flera <xref:System.Windows.Input.ModifierKeys>.</xref:System.Windows.Input.ModifierKeys> </xref:System.Windows.Input.Key> </xref:System.Windows.Input.KeyGesture>  Funktionen och numeriska tangentbordet nycklar kräver inte en låstangent för att vara en giltig <xref:System.Windows.Input.KeyGesture>.</xref:System.Windows.Input.KeyGesture> Det är möjligt att ange ett ogiltigt <xref:System.Windows.Input.KeyGesture>och en KeyBinding med en ogiltig associerade gest, antingen via [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] eller kod.</xref:System.Windows.Input.KeyGesture> Till exempel sker ingen kontroll som förhindrar att skapa och binda ett <xref:System.Windows.Input.KeyGesture>som innehåller endast en nonfunction nyckel, eller endast modifierare men ingen nyckel.</xref:System.Windows.Input.KeyGesture> Sådana KeyBinding försöker aldrig anropa dess associerat kommando.       När du definierar en KeyBinding i [!INCLUDE[TLA#tla_xaml](~/add/includes/tlasharptla-xaml-md.md)] det finns två sätt att ange <xref:System.Windows.Input.KeyGesture>.</xref:System.Windows.Input.KeyGesture> Det första sättet att upprätta en KeyBinding i [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] är att definiera den <xref:System.Windows.Input.KeyBinding.Gesture%2A>attribut för elementet KeyBinding, vilket gör att en syntax för att ange nycklar och modifierare som en sträng, till exempel &quot;CTRL + P&quot;.</xref:System.Windows.Input.KeyBinding.Gesture%2A> Det andra sättet är att definiera den <xref:System.Windows.Input.KeyBinding.Key%2A>attribut och <xref:System.Windows.Input.KeyBinding.Modifiers%2A>attribut för elementet KeyBinding.</xref:System.Windows.Input.KeyBinding.Modifiers%2A> </xref:System.Windows.Input.KeyBinding.Key%2A> Båda metoderna för inställning av <xref:System.Windows.Input.KeyGesture>är likvärdiga och ändra det underliggande objektet har samma, men det finns en konflikt om båda används.</xref:System.Windows.Input.KeyGesture>  I fallet när den <xref:System.Windows.Input.KeyBinding.Key%2A>, <xref:System.Windows.Input.KeyBinding.Modifiers%2A>, och det <xref:System.Windows.Input.KeyBinding.Gesture%2A>attribut har angetts, attributet som har definierats senast kommer att användas för <xref:System.Windows.Input.KeyGesture>.</xref:System.Windows.Input.KeyGesture> </xref:System.Windows.Input.KeyBinding.Gesture%2A> </xref:System.Windows.Input.KeyBinding.Modifiers%2A> </xref:System.Windows.Input.KeyBinding.Key%2A> Du kan ha situationer där till exempel en <xref:System.Windows.Input.KeyBinding.Key%2A>anges senast ska skriva över bara nyckeln komponenten i en föregående gest men lämna en gest modifierare samma.</xref:System.Windows.Input.KeyBinding.Key%2A> I allmänhet det rekommenderas att du använder bara den <xref:System.Windows.Input.KeyBinding.Gesture%2A>-attributet från [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]; detta kommer att undvika tvetydighet, ger den mest effektiva syntaxen och ger den enklaste representationen för serialisering.</xref:System.Windows.Input.KeyBinding.Gesture%2A>       En KeyBinding kan definieras på ett visst objekt eller på klassnivå genom att registrera en <xref:System.Windows.Input.CommandManager.RegisterClassInputBinding%2A>på <xref:System.Windows.Input.CommandManager>klass.</xref:System.Windows.Input.CommandManager> </xref:System.Windows.Input.CommandManager.RegisterClassInputBinding%2A> Det vanligaste sättet att definiera en KeyBinding ligger inom kontrollmall, ange den <xref:System.Windows.UIElement.InputBindings%2A>egenskap i [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] genom att deklarera en eller flera <xref:System.Windows.Input.MouseBinding>eller KeyBinding element.</xref:System.Windows.Input.MouseBinding> </xref:System.Windows.UIElement.InputBindings%2A>"
  example:
  - "The following example creates a KeyBinding and adds it to the <xref:System.Windows.Input.InputBindingCollection> of the root window.  \n  \n [!code-xml[commandWithHandler#CommandHandlerKeyBinding](~/add/codesnippet/xaml/commandWithHandler/Window1.xaml#commandhandlerkeybinding)]  \n  \n [!code-cs[CommandHandlerProcedural#CommandHandlerKeyBindingCodeBehind](~/add/codesnippet/csharp/CommandHandlerProcedural/Window1.xaml.cs#commandhandlerkeybindingcodebehind)]\n [!code-vb[CommandHandlerProcedural#CommandHandlerKeyBindingCodeBehind](~/add/codesnippet/visualbasic/commandhandlerprocedural/window1.xaml.vb#commandhandlerkeybindingcodebehind)]"
  syntax:
    content: 'public class KeyBinding : System.Windows.Input.InputBinding'
  inheritance:
  - System.Object
  - System.Windows.Threading.DispatcherObject
  - System.Windows.DependencyObject
  - System.Windows.Freezable
  - System.Windows.Input.InputBinding
  implements: []
  inheritedMembers:
  - System.Windows.DependencyObject.ClearValue(System.Windows.DependencyProperty)
  - System.Windows.DependencyObject.ClearValue(System.Windows.DependencyPropertyKey)
  - System.Windows.DependencyObject.CoerceValue(System.Windows.DependencyProperty)
  - System.Windows.DependencyObject.DependencyObjectType
  - System.Windows.DependencyObject.Equals(System.Object)
  - System.Windows.DependencyObject.GetHashCode
  - System.Windows.DependencyObject.GetLocalValueEnumerator
  - System.Windows.DependencyObject.GetValue(System.Windows.DependencyProperty)
  - System.Windows.DependencyObject.InvalidateProperty(System.Windows.DependencyProperty)
  - System.Windows.DependencyObject.IsSealed
  - System.Windows.DependencyObject.ReadLocalValue(System.Windows.DependencyProperty)
  - System.Windows.DependencyObject.SetCurrentValue(System.Windows.DependencyProperty,System.Object)
  - System.Windows.DependencyObject.SetValue(System.Windows.DependencyProperty,System.Object)
  - System.Windows.DependencyObject.SetValue(System.Windows.DependencyPropertyKey,System.Object)
  - System.Windows.DependencyObject.ShouldSerializeProperty(System.Windows.DependencyProperty)
  - System.Windows.Freezable.CanFreeze
  - System.Windows.Freezable.Changed
  - System.Windows.Freezable.Clone
  - System.Windows.Freezable.CloneCurrentValue
  - System.Windows.Freezable.CreateInstance
  - System.Windows.Freezable.Freeze
  - System.Windows.Freezable.Freeze(System.Windows.Freezable,System.Boolean)
  - System.Windows.Freezable.FreezeCore(System.Boolean)
  - System.Windows.Freezable.GetAsFrozen
  - System.Windows.Freezable.GetCurrentValueAsFrozen
  - System.Windows.Freezable.IsFrozen
  - System.Windows.Freezable.OnChanged
  - System.Windows.Freezable.OnFreezablePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyObject)
  - System.Windows.Freezable.OnFreezablePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyObject,System.Windows.DependencyProperty)
  - System.Windows.Freezable.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)
  - System.Windows.Freezable.ReadPreamble
  - System.Windows.Freezable.WritePostscript
  - System.Windows.Freezable.WritePreamble
  - System.Windows.Input.InputBinding.CloneCore(System.Windows.Freezable)
  - System.Windows.Input.InputBinding.CloneCurrentValueCore(System.Windows.Freezable)
  - System.Windows.Input.InputBinding.Command
  - System.Windows.Input.InputBinding.CommandParameter
  - System.Windows.Input.InputBinding.CommandParameterProperty
  - System.Windows.Input.InputBinding.CommandProperty
  - System.Windows.Input.InputBinding.CommandTarget
  - System.Windows.Input.InputBinding.CommandTargetProperty
  - System.Windows.Input.InputBinding.GetAsFrozenCore(System.Windows.Freezable)
  - System.Windows.Input.InputBinding.GetCurrentValueAsFrozenCore(System.Windows.Freezable)
  - System.Windows.Threading.DispatcherObject.CheckAccess
  - System.Windows.Threading.DispatcherObject.Dispatcher
  - System.Windows.Threading.DispatcherObject.VerifyAccess
  platform:
  - net462
- uid: System.Windows.Input.KeyBinding.#ctor
  id: '#ctor'
  parent: System.Windows.Input.KeyBinding
  langs:
  - csharp
  name: KeyBinding()
  nameWithType: KeyBinding.KeyBinding()
  fullName: System.Windows.Input.KeyBinding.KeyBinding()
  type: Constructor
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "Initierar en ny instans av den <xref href=&quot;System.Windows.Input.KeyBinding&quot;> </xref> klass."
  syntax:
    content: public KeyBinding ();
    parameters: []
  overload: System.Windows.Input.KeyBinding.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.KeyBinding.#ctor(System.Windows.Input.ICommand,System.Windows.Input.KeyGesture)
  id: '#ctor(System.Windows.Input.ICommand,System.Windows.Input.KeyGesture)'
  parent: System.Windows.Input.KeyBinding
  langs:
  - csharp
  name: KeyBinding(ICommand,KeyGesture)
  nameWithType: KeyBinding.KeyBinding(ICommand,KeyGesture)
  fullName: System.Windows.Input.KeyBinding.KeyBinding(ICommand,KeyGesture)
  type: Constructor
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "Initierar en ny instans av den <xref href=&quot;System.Windows.Input.KeyBinding&quot;> </xref> klassen med hjälp av den angivna <xref:System.Windows.Input.ICommand>och <xref href=&quot;System.Windows.Input.KeyGesture&quot;> </xref>.</xref:System.Windows.Input.ICommand>"
  syntax:
    content: public KeyBinding (System.Windows.Input.ICommand command, System.Windows.Input.KeyGesture gesture);
    parameters:
    - id: command
      type: System.Windows.Input.ICommand
      description: "Kommandot för att associera med `gesture`."
    - id: gesture
      type: System.Windows.Input.KeyGesture
      description: "Tangentkombinationen som ska associeras med `command`."
  overload: System.Windows.Input.KeyBinding.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>command</code>or <code>gesture</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Windows.Input.KeyBinding.#ctor(System.Windows.Input.ICommand,System.Windows.Input.Key,System.Windows.Input.ModifierKeys)
  id: '#ctor(System.Windows.Input.ICommand,System.Windows.Input.Key,System.Windows.Input.ModifierKeys)'
  parent: System.Windows.Input.KeyBinding
  langs:
  - csharp
  name: KeyBinding(ICommand,Key,ModifierKeys)
  nameWithType: KeyBinding.KeyBinding(ICommand,Key,ModifierKeys)
  fullName: System.Windows.Input.KeyBinding.KeyBinding(ICommand,Key,ModifierKeys)
  type: Constructor
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "Initierar en ny instans av den <xref href=&quot;System.Windows.Input.KeyBinding&quot;> </xref> klassen med hjälp av den angivna <xref:System.Windows.Input.ICommand>och det angivna <xref href=&quot;System.Windows.Input.Key&quot;> </xref> och <xref href=&quot;System.Windows.Input.ModifierKeys&quot;> </xref> som kommer att konverteras till en <xref href=&quot;System.Windows.Input.KeyGesture&quot;> </xref>.</xref:System.Windows.Input.ICommand>"
  syntax:
    content: public KeyBinding (System.Windows.Input.ICommand command, System.Windows.Input.Key key, System.Windows.Input.ModifierKeys modifiers);
    parameters:
    - id: command
      type: System.Windows.Input.ICommand
      description: "Kommandot för att starta."
    - id: key
      type: System.Windows.Input.Key
      description: "Nyckeln som ska associeras med `command`."
    - id: modifiers
      type: System.Windows.Input.ModifierKeys
      description: "Modifierare associeras med `command`."
  overload: System.Windows.Input.KeyBinding.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.KeyBinding.CreateInstanceCore
  id: CreateInstanceCore
  parent: System.Windows.Input.KeyBinding
  langs:
  - csharp
  name: CreateInstanceCore()
  nameWithType: KeyBinding.CreateInstanceCore()
  fullName: System.Windows.Input.KeyBinding.CreateInstanceCore()
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "Skapar en instans av en <xref href=&quot;System.Windows.Input.KeyBinding&quot;> </xref>."
  syntax:
    content: protected override System.Windows.Freezable CreateInstanceCore ();
    parameters: []
    return:
      type: System.Windows.Freezable
      description: "Det nya objektet."
  overload: System.Windows.Input.KeyBinding.CreateInstanceCore*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.KeyBinding.Gesture
  id: Gesture
  parent: System.Windows.Input.KeyBinding
  langs:
  - csharp
  name: Gesture
  nameWithType: KeyBinding.Gesture
  fullName: System.Windows.Input.KeyBinding.Gesture
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "Hämtar eller anger gest som är associerade med den här <xref href=&quot;System.Windows.Input.KeyBinding&quot;> </xref>."
  remarks: "Med undantag av funktionstangenterna och numeriska tangentbordet nycklar, en <xref:System.Windows.Input.KeyGesture>måste innehålla en <xref:System.Windows.Input.Key>och en eller flera <xref:System.Windows.Input.ModifierKeys>.</xref:System.Windows.Input.ModifierKeys> </xref:System.Windows.Input.Key> </xref:System.Windows.Input.KeyGesture>"
  example:
  - "The following example shows how to bind a <xref:System.Windows.Input.KeyGesture> to a <xref:System.Windows.Input.RoutedCommand> using a <xref:System.Windows.Input.KeyBinding> (the markup and code examples specify different keys but are otherwise equivalent).  \n  \n [!code-xml[commandWithHandler#CommandHandlerKeyBinding](~/add/codesnippet/xaml/commandWithHandler/Window1.xaml#commandhandlerkeybinding)]  \n  \n [!code-cs[commandlibrarysnippets#KeyBindingWithKeyAndModifiers](~/add/codesnippet/csharp/CommandLibarySnippets/Window1.xaml.cs#keybindingwithkeyandmodifiers)]\n [!code-vb[commandlibrarysnippets#KeyBindingWithKeyAndModifiers](~/add/codesnippet/visualbasic/commandlibarysnippets/window1.xaml.vb#keybindingwithkeyandmodifiers)]"
  syntax:
    content: public override System.Windows.Input.InputGesture Gesture { get; set; }
    return:
      type: System.Windows.Input.InputGesture
      description: "Tangentsekvensen. Standardvärdet är <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.Input.KeyBinding.Gesture*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "värdet <code> gesture </code> är att har angetts är inte en <xref href=&quot;System.Windows.Input.KeyGesture&quot;> </xref>."
  platform:
  - net462
- uid: System.Windows.Input.KeyBinding.Key
  id: Key
  parent: System.Windows.Input.KeyBinding
  langs:
  - csharp
  name: Key
  nameWithType: KeyBinding.Key
  fullName: System.Windows.Input.KeyBinding.Key
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "Hämtar eller anger den <xref href=&quot;System.Windows.Input.Key&quot;> </xref> av den <xref href=&quot;System.Windows.Input.KeyGesture&quot;> </xref> som är associerade med den här <xref href=&quot;System.Windows.Input.KeyBinding&quot;> </xref>."
  remarks: "Med undantag av funktionstangenterna och numeriska tangentbordet nycklar, en <xref:System.Windows.Input.KeyGesture>måste innehålla en <xref:System.Windows.Input.Key>och en eller flera <xref:System.Windows.Input.ModifierKeys>.</xref:System.Windows.Input.ModifierKeys> </xref:System.Windows.Input.Key> </xref:System.Windows.Input.KeyGesture>       När du definierar en <xref:System.Windows.Input.KeyBinding>i [!INCLUDE[TLA#tla_xaml](~/add/includes/tlasharptla-xaml-md.md)] det finns två sätt att ange <xref:System.Windows.Input.KeyGesture>.</xref:System.Windows.Input.KeyGesture> </xref:System.Windows.Input.KeyBinding> Det första sättet att upprätta en <xref:System.Windows.Input.KeyBinding>i [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] är att definiera den <xref:System.Windows.Input.KeyBinding.Gesture%2A>attribut för den <xref:System.Windows.Input.KeyBinding>element, vilket gör att en syntax för att ange nycklar och modifierare som en sträng, till exempel &quot;CTRL + P&quot;.</xref:System.Windows.Input.KeyBinding> </xref:System.Windows.Input.KeyBinding.Gesture%2A> </xref:System.Windows.Input.KeyBinding> Det andra sättet är att ange attributet Key och <xref:System.Windows.Input.KeyBinding.Modifiers%2A>attribut för den <xref:System.Windows.Input.KeyBinding>element.</xref:System.Windows.Input.KeyBinding> </xref:System.Windows.Input.KeyBinding.Modifiers%2A> Båda metoderna för inställning av <xref:System.Windows.Input.KeyGesture>är likvärdiga och ändra det underliggande objektet har samma, men det finns en konflikt om båda används.</xref:System.Windows.Input.KeyGesture>  I fallet när nyckeln, <xref:System.Windows.Input.KeyBinding.Modifiers%2A>, och det <xref:System.Windows.Input.KeyBinding.Gesture%2A>attribut har angetts, attributet som har definierats senast kommer att användas för <xref:System.Windows.Input.KeyGesture>.</xref:System.Windows.Input.KeyGesture> </xref:System.Windows.Input.KeyBinding.Gesture%2A> </xref:System.Windows.Input.KeyBinding.Modifiers%2A> Du kan ha situationer där till exempel en nyckel uppsättning senast ska skriva över bara nyckeln komponenten i en föregående gest lämna en gest modifierare samma. I allmänhet det rekommenderas att du använder bara den <xref:System.Windows.Input.KeyBinding.Gesture%2A>-attributet från [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]; detta kommer att undvika tvetydighet, ger den mest effektiva syntaxen och ger den enklaste representationen för serialisering.</xref:System.Windows.Input.KeyBinding.Gesture%2A>"
  syntax:
    content: public System.Windows.Input.Key Key { get; set; }
    return:
      type: System.Windows.Input.Key
      description: "Viktig del av den <xref href=&quot;System.Windows.Input.KeyGesture&quot;> </xref>. Standardvärdet är <xref href=&quot;System.Windows.Input.Key&quot;> </xref>."
  overload: System.Windows.Input.KeyBinding.Key*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.KeyBinding.KeyProperty
  id: KeyProperty
  parent: System.Windows.Input.KeyBinding
  langs:
  - csharp
  name: KeyProperty
  nameWithType: KeyBinding.KeyProperty
  fullName: System.Windows.Input.KeyBinding.KeyProperty
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "Identifierar den <xref:System.Windows.Input.KeyBinding.Key*>beroendeegenskap.</xref:System.Windows.Input.KeyBinding.Key*>"
  syntax:
    content: public static readonly System.Windows.DependencyProperty KeyProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "Som ska läggas till."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.KeyBinding.Modifiers
  id: Modifiers
  parent: System.Windows.Input.KeyBinding
  langs:
  - csharp
  name: Modifiers
  nameWithType: KeyBinding.Modifiers
  fullName: System.Windows.Input.KeyBinding.Modifiers
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "Hämtar eller anger den <xref href=&quot;System.Windows.Input.ModifierKeys&quot;> </xref> av den <xref href=&quot;System.Windows.Input.KeyGesture&quot;> </xref> som är associerade med den här <xref href=&quot;System.Windows.Input.KeyBinding&quot;> </xref>."
  remarks: "Med undantag av funktionstangenterna och numeriska tangentbordet nycklar, en <xref:System.Windows.Input.KeyGesture>måste innehålla en <xref:System.Windows.Input.Key>och en eller flera <xref:System.Windows.Input.ModifierKeys>.</xref:System.Windows.Input.ModifierKeys> </xref:System.Windows.Input.Key> </xref:System.Windows.Input.KeyGesture>       När du definierar en <xref:System.Windows.Input.KeyBinding>i [!INCLUDE[TLA#tla_xaml](~/add/includes/tlasharptla-xaml-md.md)] det finns två sätt att ange <xref:System.Windows.Input.KeyGesture>.</xref:System.Windows.Input.KeyGesture> </xref:System.Windows.Input.KeyBinding> Det första sättet att upprätta en <xref:System.Windows.Input.KeyBinding>i [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] är att definiera den <xref:System.Windows.Input.KeyBinding.Gesture%2A>attribut för den <xref:System.Windows.Input.KeyBinding>element, vilket gör att en syntax för att ange nycklar och modifierare som en sträng, till exempel &quot;CTRL + P&quot;.</xref:System.Windows.Input.KeyBinding> </xref:System.Windows.Input.KeyBinding.Gesture%2A> </xref:System.Windows.Input.KeyBinding> Det andra sättet är att definiera den <xref:System.Windows.Input.KeyBinding.Key%2A>attribut och modifierare attributen för den <xref:System.Windows.Input.KeyBinding>element.</xref:System.Windows.Input.KeyBinding> </xref:System.Windows.Input.KeyBinding.Key%2A> Båda metoderna för inställning av <xref:System.Windows.Input.KeyGesture>är likvärdiga och ändra det underliggande objektet har samma, men det finns en konflikt om båda används.</xref:System.Windows.Input.KeyGesture>  I fallet när de <xref:System.Windows.Input.KeyBinding.Key%2A>modifierare, och det <xref:System.Windows.Input.KeyBinding.Gesture%2A>attribut som är klar, attributet som har definierats senast kommer att användas för <xref:System.Windows.Input.KeyGesture>.</xref:System.Windows.Input.KeyGesture> </xref:System.Windows.Input.KeyBinding.Gesture%2A> </xref:System.Windows.Input.KeyBinding.Key%2A> Du kan ha situationer där till exempel en <xref:System.Windows.Input.KeyBinding.Key%2A>anges senast ska skriva över bara nyckeln komponenten i en föregående gest men lämna en gest modifierare samma.</xref:System.Windows.Input.KeyBinding.Key%2A> I allmänhet det rekommenderas att du använder bara den <xref:System.Windows.Input.KeyBinding.Gesture%2A>-attributet från [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]; detta kommer att undvika tvetydighet, ger den mest effektiva syntaxen och ger den enklaste representationen för serialisering.</xref:System.Windows.Input.KeyBinding.Gesture%2A>      <a name=&quot;xamlAttributeUsage_Modifiers&quot;></a>## XAML attributsyntax ```   <object Modifiers=&quot;oneOrMoreModifierKeys&quot;/>      ``` <a name=&quot;xamlValues_Modifiers&quot;> </a> ## XAML värden *oneOrMoreModifierKeys* en eller flera modifieraren nycklar, definieras av den <xref:System.Windows.Input.ModifierKeys>uppräkning, avgränsade med tecknet &quot;+&quot;.</xref:System.Windows.Input.ModifierKeys>      "
  syntax:
    content: public System.Windows.Input.ModifierKeys Modifiers { get; set; }
    return:
      type: System.Windows.Input.ModifierKeys
      description: "Modifieraren nycklarna i den <xref href=&quot;System.Windows.Input.KeyGesture&quot;> </xref>.  Standardvärdet är <xref href=&quot;System.Windows.Input.ModifierKeys&quot;> </xref>."
  overload: System.Windows.Input.KeyBinding.Modifiers*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.KeyBinding.ModifiersProperty
  id: ModifiersProperty
  parent: System.Windows.Input.KeyBinding
  langs:
  - csharp
  name: ModifiersProperty
  nameWithType: KeyBinding.ModifiersProperty
  fullName: System.Windows.Input.KeyBinding.ModifiersProperty
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "Identifierar den <xref:System.Windows.Input.KeyBinding.Modifiers*>beroendeegenskap.</xref:System.Windows.Input.KeyBinding.Modifiers*>"
  syntax:
    content: public static readonly System.Windows.DependencyProperty ModifiersProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "Som ska läggas till."
  exceptions: []
  platform:
  - net462
references:
- uid: System.Windows.Input.InputBinding
  isExternal: false
  name: System.Windows.Input.InputBinding
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.Windows.Input.KeyBinding.#ctor
  parent: System.Windows.Input.KeyBinding
  isExternal: false
  name: KeyBinding()
  nameWithType: KeyBinding.KeyBinding()
  fullName: System.Windows.Input.KeyBinding.KeyBinding()
- uid: System.Windows.Input.KeyBinding.#ctor(System.Windows.Input.ICommand,System.Windows.Input.KeyGesture)
  parent: System.Windows.Input.KeyBinding
  isExternal: false
  name: KeyBinding(ICommand,KeyGesture)
  nameWithType: KeyBinding.KeyBinding(ICommand,KeyGesture)
  fullName: System.Windows.Input.KeyBinding.KeyBinding(ICommand,KeyGesture)
- uid: System.Windows.Input.ICommand
  parent: System.Windows.Input
  isExternal: true
  name: ICommand
  nameWithType: ICommand
  fullName: System.Windows.Input.ICommand
- uid: System.Windows.Input.KeyGesture
  parent: System.Windows.Input
  isExternal: false
  name: KeyGesture
  nameWithType: KeyGesture
  fullName: System.Windows.Input.KeyGesture
- uid: System.Windows.Input.KeyBinding.#ctor(System.Windows.Input.ICommand,System.Windows.Input.Key,System.Windows.Input.ModifierKeys)
  parent: System.Windows.Input.KeyBinding
  isExternal: false
  name: KeyBinding(ICommand,Key,ModifierKeys)
  nameWithType: KeyBinding.KeyBinding(ICommand,Key,ModifierKeys)
  fullName: System.Windows.Input.KeyBinding.KeyBinding(ICommand,Key,ModifierKeys)
- uid: System.Windows.Input.Key
  parent: System.Windows.Input
  isExternal: false
  name: Key
  nameWithType: Key
  fullName: System.Windows.Input.Key
- uid: System.Windows.Input.ModifierKeys
  parent: System.Windows.Input
  isExternal: false
  name: ModifierKeys
  nameWithType: ModifierKeys
  fullName: System.Windows.Input.ModifierKeys
- uid: System.Windows.Input.KeyBinding.CreateInstanceCore
  parent: System.Windows.Input.KeyBinding
  isExternal: false
  name: CreateInstanceCore()
  nameWithType: KeyBinding.CreateInstanceCore()
  fullName: System.Windows.Input.KeyBinding.CreateInstanceCore()
- uid: System.Windows.Freezable
  parent: System.Windows
  isExternal: false
  name: Freezable
  nameWithType: Freezable
  fullName: System.Windows.Freezable
- uid: System.Windows.Input.KeyBinding.Gesture
  parent: System.Windows.Input.KeyBinding
  isExternal: false
  name: Gesture
  nameWithType: KeyBinding.Gesture
  fullName: System.Windows.Input.KeyBinding.Gesture
- uid: System.Windows.Input.InputGesture
  parent: System.Windows.Input
  isExternal: false
  name: InputGesture
  nameWithType: InputGesture
  fullName: System.Windows.Input.InputGesture
- uid: System.Windows.Input.KeyBinding.Key
  parent: System.Windows.Input.KeyBinding
  isExternal: false
  name: Key
  nameWithType: KeyBinding.Key
  fullName: System.Windows.Input.KeyBinding.Key
- uid: System.Windows.Input.KeyBinding.KeyProperty
  parent: System.Windows.Input.KeyBinding
  isExternal: false
  name: KeyProperty
  nameWithType: KeyBinding.KeyProperty
  fullName: System.Windows.Input.KeyBinding.KeyProperty
- uid: System.Windows.DependencyProperty
  parent: System.Windows
  isExternal: false
  name: DependencyProperty
  nameWithType: DependencyProperty
  fullName: System.Windows.DependencyProperty
- uid: System.Windows.Input.KeyBinding.Modifiers
  parent: System.Windows.Input.KeyBinding
  isExternal: false
  name: Modifiers
  nameWithType: KeyBinding.Modifiers
  fullName: System.Windows.Input.KeyBinding.Modifiers
- uid: System.Windows.Input.KeyBinding.ModifiersProperty
  parent: System.Windows.Input.KeyBinding
  isExternal: false
  name: ModifiersProperty
  nameWithType: KeyBinding.ModifiersProperty
  fullName: System.Windows.Input.KeyBinding.ModifiersProperty
- uid: System.Windows.Input.KeyBinding.#ctor*
  parent: System.Windows.Input.KeyBinding
  isExternal: false
  name: KeyBinding
  nameWithType: KeyBinding.KeyBinding
- uid: System.Windows.Input.KeyBinding.CreateInstanceCore*
  parent: System.Windows.Input.KeyBinding
  isExternal: false
  name: CreateInstanceCore
  nameWithType: KeyBinding.CreateInstanceCore
- uid: System.Windows.Input.KeyBinding.Gesture*
  parent: System.Windows.Input.KeyBinding
  isExternal: false
  name: Gesture
  nameWithType: KeyBinding.Gesture
- uid: System.Windows.Input.KeyBinding.Key*
  parent: System.Windows.Input.KeyBinding
  isExternal: false
  name: Key
  nameWithType: KeyBinding.Key
- uid: System.Windows.Input.KeyBinding.Modifiers*
  parent: System.Windows.Input.KeyBinding
  isExternal: false
  name: Modifiers
  nameWithType: KeyBinding.Modifiers
