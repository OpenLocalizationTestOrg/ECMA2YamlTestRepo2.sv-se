### YamlMime:ManagedReference
items:
- uid: System.Data.Common.DbDataAdapter
  id: DbDataAdapter
  children:
  - System.Data.Common.DbDataAdapter.#ctor
  - System.Data.Common.DbDataAdapter.#ctor(System.Data.Common.DbDataAdapter)
  - System.Data.Common.DbDataAdapter.AddToBatch(System.Data.IDbCommand)
  - System.Data.Common.DbDataAdapter.ClearBatch
  - System.Data.Common.DbDataAdapter.CreateRowUpdatedEvent(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)
  - System.Data.Common.DbDataAdapter.CreateRowUpdatingEvent(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)
  - System.Data.Common.DbDataAdapter.DefaultSourceTableName
  - System.Data.Common.DbDataAdapter.DeleteCommand
  - System.Data.Common.DbDataAdapter.Dispose(System.Boolean)
  - System.Data.Common.DbDataAdapter.ExecuteBatch
  - System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet)
  - System.Data.Common.DbDataAdapter.Fill(System.Data.DataTable)
  - System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet,System.String)
  - System.Data.Common.DbDataAdapter.Fill(System.Data.DataTable,System.Data.IDbCommand,System.Data.CommandBehavior)
  - System.Data.Common.DbDataAdapter.Fill(System.Int32,System.Int32,System.Data.DataTable[])
  - System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet,System.Int32,System.Int32,System.String)
  - System.Data.Common.DbDataAdapter.Fill(System.Data.DataTable[],System.Int32,System.Int32,System.Data.IDbCommand,System.Data.CommandBehavior)
  - System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet,System.Int32,System.Int32,System.String,System.Data.IDbCommand,System.Data.CommandBehavior)
  - System.Data.Common.DbDataAdapter.FillCommandBehavior
  - System.Data.Common.DbDataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType)
  - System.Data.Common.DbDataAdapter.FillSchema(System.Data.DataTable,System.Data.SchemaType)
  - System.Data.Common.DbDataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType,System.String)
  - System.Data.Common.DbDataAdapter.FillSchema(System.Data.DataTable,System.Data.SchemaType,System.Data.IDbCommand,System.Data.CommandBehavior)
  - System.Data.Common.DbDataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType,System.Data.IDbCommand,System.String,System.Data.CommandBehavior)
  - System.Data.Common.DbDataAdapter.GetBatchedParameter(System.Int32,System.Int32)
  - System.Data.Common.DbDataAdapter.GetBatchedRecordsAffected(System.Int32,System.Int32@,System.Exception@)
  - System.Data.Common.DbDataAdapter.GetFillParameters
  - System.Data.Common.DbDataAdapter.InitializeBatching
  - System.Data.Common.DbDataAdapter.InsertCommand
  - System.Data.Common.DbDataAdapter.OnRowUpdated(System.Data.Common.RowUpdatedEventArgs)
  - System.Data.Common.DbDataAdapter.OnRowUpdating(System.Data.Common.RowUpdatingEventArgs)
  - System.Data.Common.DbDataAdapter.SelectCommand
  - System.Data.Common.DbDataAdapter.System#Data#IDbDataAdapter#DeleteCommand
  - System.Data.Common.DbDataAdapter.System#Data#IDbDataAdapter#InsertCommand
  - System.Data.Common.DbDataAdapter.System#Data#IDbDataAdapter#SelectCommand
  - System.Data.Common.DbDataAdapter.System#Data#IDbDataAdapter#UpdateCommand
  - System.Data.Common.DbDataAdapter.System#ICloneable#Clone
  - System.Data.Common.DbDataAdapter.TerminateBatching
  - System.Data.Common.DbDataAdapter.Update(System.Data.DataRow[])
  - System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)
  - System.Data.Common.DbDataAdapter.Update(System.Data.DataTable)
  - System.Data.Common.DbDataAdapter.Update(System.Data.DataRow[],System.Data.Common.DataTableMapping)
  - System.Data.Common.DbDataAdapter.Update(System.Data.DataSet,System.String)
  - System.Data.Common.DbDataAdapter.UpdateBatchSize
  - System.Data.Common.DbDataAdapter.UpdateCommand
  langs:
  - csharp
  name: DbDataAdapter
  nameWithType: DbDataAdapter
  fullName: System.Data.Common.DbDataAdapter
  type: Class
  summary: "Underlättar implementeringen av den <xref href=&quot;System.Data.IDbDataAdapter&quot;> </xref> gränssnitt. Arvtagare av dbdataadapter som implementerar en uppsättning funktioner för att ge starkt att skriva, men ärver de flesta funktionerna som krävs för att fullständigt implementera en **DataAdapter**."
  remarks: "Den dbdataadapter som klassen ärver från den <xref:System.Data.Common.DataAdapter>klassen och hjälper en klass som implementerar en **DataAdapter** avsedd för användning med en relationsdatabas.</xref:System.Data.Common.DataAdapter>       Ett program inte skapa en instans av gränssnittet dbdataadapter som direkt, men det skapar en instans av en klass som ärver <xref:System.Data.IDbDataAdapter>och dbdataadapter som.</xref:System.Data.IDbDataAdapter>       Klasser som ärver dbdataadapter som måste implementera ärvda medlemmar och vanligtvis definiera ytterligare medlemmar för att lägga till provider-specifik funktion. Till exempel klassen dbdataadapter som definierar den <xref:System.Data.IDbDataAdapter.SelectCommand%2A>egenskapen och gränssnittet dbdataadapter som definierar åtta överlagringar av den <xref:System.Data.IDataAdapter.Fill%2A>metoden.</xref:System.Data.IDataAdapter.Fill%2A> </xref:System.Data.IDbDataAdapter.SelectCommand%2A> I sin tur den <xref:System.Data.OleDb.OleDbDataAdapter>klassen ärver den <xref:System.Data.Common.DbDataAdapter.Fill%2A>metod, och definierar också två ytterligare överlagringar av <xref:System.Data.OleDb.OleDbDataAdapter.Fill%2A>som tar ett ADO-postuppsättning-objekt som en parameter.</xref:System.Data.OleDb.OleDbDataAdapter.Fill%2A> </xref:System.Data.Common.DbDataAdapter.Fill%2A> </xref:System.Data.OleDb.OleDbDataAdapter>"
  syntax:
    content: 'public abstract class DbDataAdapter : System.Data.Common.DataAdapter, ICloneable, System.Data.IDbDataAdapter'
  inheritance:
  - System.Object
  - System.MarshalByRefObject
  - System.ComponentModel.Component
  - System.Data.Common.DataAdapter
  implements:
  - System.Data.IDbDataAdapter
  - System.ICloneable
  inheritedMembers:
  - System.ComponentModel.Component.CanRaiseEvents
  - System.ComponentModel.Component.Container
  - System.ComponentModel.Component.DesignMode
  - System.ComponentModel.Component.Dispose
  - System.ComponentModel.Component.Disposed
  - System.ComponentModel.Component.Events
  - System.ComponentModel.Component.GetService(System.Type)
  - System.ComponentModel.Component.Site
  - System.ComponentModel.Component.ToString
  - System.Data.Common.DataAdapter.AcceptChangesDuringFill
  - System.Data.Common.DataAdapter.AcceptChangesDuringUpdate
  - System.Data.Common.DataAdapter.CloneInternals
  - System.Data.Common.DataAdapter.ContinueUpdateOnError
  - System.Data.Common.DataAdapter.CreateTableMappings
  - System.Data.Common.DataAdapter.Fill(System.Data.DataSet,System.String,System.Data.IDataReader,System.Int32,System.Int32)
  - System.Data.Common.DataAdapter.Fill(System.Data.DataTable,System.Data.IDataReader)
  - System.Data.Common.DataAdapter.Fill(System.Data.DataTable[],System.Data.IDataReader,System.Int32,System.Int32)
  - System.Data.Common.DataAdapter.FillError
  - System.Data.Common.DataAdapter.FillLoadOption
  - System.Data.Common.DataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType,System.String,System.Data.IDataReader)
  - System.Data.Common.DataAdapter.FillSchema(System.Data.DataTable,System.Data.SchemaType,System.Data.IDataReader)
  - System.Data.Common.DataAdapter.HasTableMappings
  - System.Data.Common.DataAdapter.MissingMappingAction
  - System.Data.Common.DataAdapter.MissingSchemaAction
  - System.Data.Common.DataAdapter.OnFillError(System.Data.FillErrorEventArgs)
  - System.Data.Common.DataAdapter.ResetFillLoadOption
  - System.Data.Common.DataAdapter.ReturnProviderSpecificTypes
  - System.Data.Common.DataAdapter.ShouldSerializeAcceptChangesDuringFill
  - System.Data.Common.DataAdapter.ShouldSerializeFillLoadOption
  - System.Data.Common.DataAdapter.ShouldSerializeTableMappings
  - System.Data.Common.DataAdapter.System#Data#IDataAdapter#TableMappings
  - System.Data.Common.DataAdapter.TableMappings
  - System.MarshalByRefObject.CreateObjRef(System.Type)
  - System.MarshalByRefObject.GetLifetimeService
  - System.MarshalByRefObject.InitializeLifetimeService
  - System.MarshalByRefObject.MemberwiseClone(System.Boolean)
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.#ctor
  id: '#ctor'
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: DbDataAdapter()
  nameWithType: DbDataAdapter.DbDataAdapter()
  fullName: System.Data.Common.DbDataAdapter.DbDataAdapter()
  type: Constructor
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Initierar en ny instans av en **DataAdapter** klass."
  remarks: "När du skapar en instans av <xref:System.Data.Common.DbDataAdapter>, följande egenskaper för läsning/skrivning är inställda på att följande ursprungliga värden.</xref:System.Data.Common.DbDataAdapter>      | Egenskaper | Ursprungligt värde |   |----------------|-------------------|   | <xref:System.Data.IDbDataAdapter.SelectCommand%2A>| En ny <xref:System.Data.IDbCommand>. |   | <xref:System.Data.IDbDataAdapter.InsertCommand%2A>| En ny <xref:System.Data.IDbCommand>. |   | <xref:System.Data.IDbDataAdapter.DeleteCommand%2A>| En ny <xref:System.Data.IDbCommand>. |   | <xref:System.Data.IDbDataAdapter.UpdateCommand%2A>| En ny <xref:System.Data.IDbCommand>. |   | <xref:System.Data.Common.DataAdapter.MissingMappingAction%2A>| `MissingMappingAction.Passthrough`|   | <xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A>| `MissingSchemaAction.Add`|       Du kan ändra värdet för någon av dessa egenskaper via ett separat anrop till egenskapen.</xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A> </xref:System.Data.Common.DataAdapter.MissingMappingAction%2A> </xref:System.Data.IDbCommand> </xref:System.Data.IDbDataAdapter.UpdateCommand%2A> </xref:System.Data.IDbCommand> </xref:System.Data.IDbDataAdapter.DeleteCommand%2A> </xref:System.Data.IDbCommand> </xref:System.Data.IDbDataAdapter.InsertCommand%2A> </xref:System.Data.IDbCommand> </xref:System.Data.IDbDataAdapter.SelectCommand%2A>"
  syntax:
    content: protected DbDataAdapter ();
    parameters: []
  overload: System.Data.Common.DbDataAdapter.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.#ctor(System.Data.Common.DbDataAdapter)
  id: '#ctor(System.Data.Common.DbDataAdapter)'
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: DbDataAdapter(DbDataAdapter)
  nameWithType: DbDataAdapter.DbDataAdapter(DbDataAdapter)
  fullName: System.Data.Common.DbDataAdapter.DbDataAdapter(DbDataAdapter)
  type: Constructor
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Initierar en ny instans av en <xref uid=&quot;langword_csharp_DataAdapter&quot; name=&quot;DataAdapter&quot; href=&quot;&quot;> </xref> klass från ett befintligt objekt av samma typ."
  remarks: "Den här överlagring för den <xref:System.Data.Common.DbDataAdapter>konstruktorn är avsedd för användning av en .NET Framework-dataprovidern när du implementerar en liknande konstruktor för användning i en klon-implementering.</xref:System.Data.Common.DbDataAdapter>"
  syntax:
    content: protected DbDataAdapter (System.Data.Common.DbDataAdapter adapter);
    parameters:
    - id: adapter
      type: System.Data.Common.DbDataAdapter
      description: "En <xref uid=&quot;langword_csharp_DataAdapter&quot; name=&quot;DataAdapter&quot; href=&quot;&quot;> </xref> objekt som används för att skapa den nya <xref uid=&quot;langword_csharp_DataAdapter&quot; name=&quot;DataAdapter&quot; href=&quot;&quot;> </xref>."
  overload: System.Data.Common.DbDataAdapter.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.AddToBatch(System.Data.IDbCommand)
  id: AddToBatch(System.Data.IDbCommand)
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: AddToBatch(IDbCommand)
  nameWithType: DbDataAdapter.AddToBatch(IDbCommand)
  fullName: System.Data.Common.DbDataAdapter.AddToBatch(IDbCommand)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Lägger till en <xref href=&quot;System.Data.IDbCommand&quot;> </xref> till den aktuella batchen."
  remarks: "I <xref:System.Data.Common.DbDataAdapter>den här metoden genererar <xref:System.NotSupportedException>.</xref:System.NotSupportedException> </xref:System.Data.Common.DbDataAdapter> Klasser som ärver från <xref:System.Data.Common.DbDataAdapter>åsidosätta den här metoden för att ge stöd för batchar.</xref:System.Data.Common.DbDataAdapter>"
  syntax:
    content: protected virtual int AddToBatch (System.Data.IDbCommand command);
    parameters:
    - id: command
      type: System.Data.IDbCommand
      description: "Den <xref href=&quot;System.Data.IDbCommand&quot;> </xref> att lägga till i gruppen."
    return:
      type: System.Int32
      description: "Antalet kommandon i batchen innan du lägger till den <xref href=&quot;System.Data.IDbCommand&quot;> </xref>."
  overload: System.Data.Common.DbDataAdapter.AddToBatch*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "Kortet stöder inte batchar."
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.ClearBatch
  id: ClearBatch
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: ClearBatch()
  nameWithType: DbDataAdapter.ClearBatch()
  fullName: System.Data.Common.DbDataAdapter.ClearBatch()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Tar bort alla <xref href=&quot;System.Data.IDbCommand&quot;> </xref> objekt från gruppen."
  remarks: "I <xref:System.Data.Common.DbDataAdapter>den här metoden genererar <xref:System.NotSupportedException>.</xref:System.NotSupportedException> </xref:System.Data.Common.DbDataAdapter> Klasser som ärver från <xref:System.Data.Common.DbDataAdapter>åsidosätta den här metoden för att ge stöd för batchar.</xref:System.Data.Common.DbDataAdapter>"
  syntax:
    content: protected virtual void ClearBatch ();
    parameters: []
  overload: System.Data.Common.DbDataAdapter.ClearBatch*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "Kortet stöder inte batchar."
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.CreateRowUpdatedEvent(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)
  id: CreateRowUpdatedEvent(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: CreateRowUpdatedEvent(DataRow,IDbCommand,StatementType,DataTableMapping)
  nameWithType: DbDataAdapter.CreateRowUpdatedEvent(DataRow,IDbCommand,StatementType,DataTableMapping)
  fullName: System.Data.Common.DbDataAdapter.CreateRowUpdatedEvent(DataRow,IDbCommand,StatementType,DataTableMapping)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Initierar en ny instans av den <xref href=&quot;System.Data.Common.RowUpdatedEventArgs&quot;> </xref> klass."
  syntax:
    content: protected virtual System.Data.Common.RowUpdatedEventArgs CreateRowUpdatedEvent (System.Data.DataRow dataRow, System.Data.IDbCommand command, System.Data.StatementType statementType, System.Data.Common.DataTableMapping tableMapping);
    parameters:
    - id: dataRow
      type: System.Data.DataRow
      description: "Den <xref href=&quot;System.Data.DataRow&quot;> </xref> används för att uppdatera datakällan."
    - id: command
      type: System.Data.IDbCommand
      description: "Den <xref href=&quot;System.Data.IDbCommand&quot;> </xref> körs under <xref:System.Data.IDataAdapter.Update*>.</xref:System.Data.IDataAdapter.Update*>"
    - id: statementType
      type: System.Data.StatementType
      description: "Om kommandot är en uppdatering, infoga, ta bort eller SELECT-uttryck."
    - id: tableMapping
      type: System.Data.Common.DataTableMapping
      description: "A <xref href=&quot;System.Data.Common.DataTableMapping&quot;></xref> object."
    return:
      type: System.Data.Common.RowUpdatedEventArgs
      description: "En ny instans av den <xref href=&quot;System.Data.Common.RowUpdatedEventArgs&quot;> </xref> klass."
  overload: System.Data.Common.DbDataAdapter.CreateRowUpdatedEvent*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.CreateRowUpdatingEvent(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)
  id: CreateRowUpdatingEvent(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: CreateRowUpdatingEvent(DataRow,IDbCommand,StatementType,DataTableMapping)
  nameWithType: DbDataAdapter.CreateRowUpdatingEvent(DataRow,IDbCommand,StatementType,DataTableMapping)
  fullName: System.Data.Common.DbDataAdapter.CreateRowUpdatingEvent(DataRow,IDbCommand,StatementType,DataTableMapping)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Initierar en ny instans av den <xref href=&quot;System.Data.Common.RowUpdatingEventArgs&quot;> </xref> klass."
  syntax:
    content: protected virtual System.Data.Common.RowUpdatingEventArgs CreateRowUpdatingEvent (System.Data.DataRow dataRow, System.Data.IDbCommand command, System.Data.StatementType statementType, System.Data.Common.DataTableMapping tableMapping);
    parameters:
    - id: dataRow
      type: System.Data.DataRow
      description: "Den <xref href=&quot;System.Data.DataRow&quot;> </xref> som uppdaterar datakällan."
    - id: command
      type: System.Data.IDbCommand
      description: "Den <xref href=&quot;System.Data.IDbCommand&quot;> </xref> ska köras under <xref:System.Data.IDataAdapter.Update*>.</xref:System.Data.IDataAdapter.Update*>"
    - id: statementType
      type: System.Data.StatementType
      description: "Om kommandot är en uppdatering, infoga, ta bort eller SELECT-uttryck."
    - id: tableMapping
      type: System.Data.Common.DataTableMapping
      description: "A <xref href=&quot;System.Data.Common.DataTableMapping&quot;></xref> object."
    return:
      type: System.Data.Common.RowUpdatingEventArgs
      description: "En ny instans av den <xref href=&quot;System.Data.Common.RowUpdatingEventArgs&quot;> </xref> klass."
  overload: System.Data.Common.DbDataAdapter.CreateRowUpdatingEvent*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.DefaultSourceTableName
  id: DefaultSourceTableName
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: DefaultSourceTableName
  nameWithType: DbDataAdapter.DefaultSourceTableName
  fullName: System.Data.Common.DbDataAdapter.DefaultSourceTableName
  type: Field
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Standardnamnet som används av den <xref href=&quot;System.Data.Common.DataAdapter&quot;> </xref> objektet för tabellen mappningar."
  remarks: "&quot;Table&quot; är det standardnamn som används av den <xref:System.Data.Common.DataAdapter>objektet för tabellen mappningar.</xref:System.Data.Common.DataAdapter>       DefaultSourceTableName är när ett program lägger till en mappning för tabellen som ska användas med <xref:System.Data.Common.DbDataAdapter.Fill%2A>, men anger inte en <xref:System.Data.DataTable>namn.</xref:System.Data.DataTable> </xref:System.Data.Common.DbDataAdapter.Fill%2A>"
  syntax:
    content: public const string DefaultSourceTableName;
    return:
      type: System.String
      description: "Som ska läggas till."
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.DeleteCommand
  id: DeleteCommand
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: DeleteCommand
  nameWithType: DbDataAdapter.DeleteCommand
  fullName: System.Data.Common.DbDataAdapter.DeleteCommand
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Hämtar eller anger ett kommando för att ta bort poster från datauppsättningen."
  remarks: "Under <xref:System.Data.Common.DbDataAdapter.Update%2A>, om den här egenskapen inte har angetts och primära nyckelinformationen finns i den <xref:System.Data.DataSet>, <xref:System.Data.IDbDataAdapter.DeleteCommand%2A>genereras automatiskt.</xref:System.Data.IDbDataAdapter.DeleteCommand%2A> </xref:System.Data.DataSet> </xref:System.Data.Common.DbDataAdapter.Update%2A>"
  example:
  - "The following example creates the derived class <xref:System.Data.OleDb.OleDbDataAdapter> and sets some of its properties.  \n  \n [!code-cs[Classic WebData DbDataAdapter.DeleteCommand Example#1](~/add/codesnippet/csharp/p-system.data.common.dbd_3_1.cs)]\n [!code-vb[Classic WebData DbDataAdapter.DeleteCommand Example#1](~/add/codesnippet/visualbasic/p-system.data.common.dbd_3_1.vb)]"
  syntax:
    content: public System.Data.Common.DbCommand DeleteCommand { get; set; }
    return:
      type: System.Data.Common.DbCommand
      description: "En <xref href=&quot;System.Data.IDbCommand&quot;> </xref> används under <xref:System.Data.IDataAdapter.Update*>att ta bort poster i datakällan för borttagna rader i datauppsättningen.</xref:System.Data.IDataAdapter.Update*>"
  overload: System.Data.Common.DbDataAdapter.DeleteCommand*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: DbDataAdapter.Dispose(Boolean)
  fullName: System.Data.Common.DbDataAdapter.Dispose(Boolean)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Släpper de ohanterade resurser som används av den <xref href=&quot;System.Data.Common.DbDataAdapter&quot;> </xref> och släpper du de hantera resurserna."
  syntax:
    content: protected override void Dispose (bool disposing);
    parameters:
    - id: disposing
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Frisläpp både hanterade och ohanterade resurser. <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> att släppa endast resurser som inte hanteras."
  overload: System.Data.Common.DbDataAdapter.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.ExecuteBatch
  id: ExecuteBatch
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: ExecuteBatch()
  nameWithType: DbDataAdapter.ExecuteBatch()
  fullName: System.Data.Common.DbDataAdapter.ExecuteBatch()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Kör den aktuella batchen."
  remarks: "I <xref:System.Data.Common.DbDataAdapter>den här metoden genererar <xref:System.NotSupportedException>.</xref:System.NotSupportedException> </xref:System.Data.Common.DbDataAdapter> Klasser som ärver från <xref:System.Data.Common.DbDataAdapter>åsidosätta den här metoden för att ge stöd för batchar.</xref:System.Data.Common.DbDataAdapter>"
  syntax:
    content: protected virtual int ExecuteBatch ();
    parameters: []
    return:
      type: System.Int32
      description: "Det returnera värdet från det sista kommandot i batchen."
  overload: System.Data.Common.DbDataAdapter.ExecuteBatch*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet)
  id: Fill(System.Data.DataSet)
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: Fill(DataSet)
  nameWithType: DbDataAdapter.Fill(DataSet)
  fullName: System.Data.Common.DbDataAdapter.Fill(DataSet)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Lägger till eller uppdaterar rader i den <xref href=&quot;System.Data.DataSet&quot;> </xref>."
  remarks: "Metoden Fill hämtar data från datakällan med en SELECT-instruktion. Den <xref:System.Data.IDbConnection>som är associerat med kommandot select måste vara giltig, men behöver inte vara öppen.</xref:System.Data.IDbConnection> Om den <xref:System.Data.IDbConnection>är stängd innan Fill anropas den öppnas för att hämta data och sedan stängs.</xref:System.Data.IDbConnection> Om anslutningen är öppen innan Fill anropas, förblir den öppen.       Om ett fel eller ett undantag har påträffats medan datatabellerna, förblir rader läggs innan förekomsten av felet i datatabeller. Resten av åtgärden avbröts.       Om ett kommando inte returnerar några rader inga tabeller har lagts till i <xref:System.Data.DataSet>, och inget undantag genereras.</xref:System.Data.DataSet>       Om den <xref:System.Data.Common.DbDataAdapter>dubbla kolumner påträffas medan en <xref:System.Data.DataTable>, det genererar namn för efterföljande kolumnerna med mönstret &quot;*columnname*1&quot;, &quot;*columnname*2&quot;,&quot;*columnname*3&quot; och så vidare.</xref:System.Data.DataTable> </xref:System.Data.Common.DbDataAdapter> Om inkommande data innehåller icke namngivna kolumner, placeras de i den <xref:System.Data.DataSet>enligt mönstret &quot;Kolumn1&quot;, &quot;Kolumn2&quot; och så vidare.</xref:System.Data.DataSet>       När frågan anges returnerar flera resultat, placeras resultatet för varje rad returnerar frågan i separata tabeller. Ytterligare resultatmängder är namngivna genom att integrerad värden till angivna tabellnamnet (till exempel &quot;Table&quot;, &quot;Tabell1&quot;, &quot;Tabell2&quot; och så vidare). Eftersom ingen tabell skapas för en fråga som inte returnerar rader, om du kör en insert-fråga följt av en select-frågan heter &quot;Table&quot; i tabellen som skapats för select-frågan eftersom den är den första tabellen som skapas. Program med kolumnnamn och tabellnamn bör se till att inte uppstår står i konflikt med dessa namngivning mönster.       När SELECT-instruktion används för att fylla i <xref:System.Data.DataSet>returnerar flera resultat, till exempel batch SQL-instruktioner om en av resultat som innehåller ett fel för alla efterföljande resultat hoppas över och har inte lagts till i <xref:System.Data.DataSet>.</xref:System.Data.DataSet> </xref:System.Data.DataSet>       När du använder efterföljande fyller anrop till uppdatera innehållet i den <xref:System.Data.DataSet>, två villkor måste uppfyllas: 1.</xref:System.Data.DataSet>  SQL-instruktionen ska motsvara det ursprungligen används för att fylla i <xref:System.Data.DataSet>.</xref:System.Data.DataSet>      2.  Den **nyckeln** kolumninformation måste finnas.       Om det primära nyckelinformationen, alla dubblettrader stäms och bara finnas en gång i <xref:System.Data.DataTable>som motsvarar <xref:System.Data.DataSet>.</xref:System.Data.DataSet> </xref:System.Data.DataTable> Primära nyckelinformationen kan anges antingen via <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>, genom att ange den <xref:System.Data.DataTable.PrimaryKey%2A>egenskapen för den <xref:System.Data.DataTable>, eller genom att ange den <xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A>egenskapen `AddWithKey`.</xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A> </xref:System.Data.DataTable> </xref:System.Data.DataTable.PrimaryKey%2A> </xref:System.Data.Common.DbDataAdapter.FillSchema%2A>       Om den `SelectCommand` returnerar resultatet av en yttre koppling av `DataAdapter` inte anger ett <xref:System.Data.DataTable.PrimaryKey%2A>värde för den resulterande <xref:System.Data.DataTable>.</xref:System.Data.DataTable> </xref:System.Data.DataTable.PrimaryKey%2A> Du måste uttryckligen definiera den primära nyckeln för att säkerställa att dubblettrader matcha korrekt. Mer information finns i [definierar primärnycklar](~/add/includes/ajax-current-ext-md.md).      > [!NOTE] > Vid hantering av batch SQL-uttryck som kan returnera flera resultat, implementering av <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>för .NET Framework Data Provider för OLE DB hämtar schemainformation för endast det första resultatet.</xref:System.Data.Common.DbDataAdapter.FillSchema%2A> Använd för att hämta schemainformation för flera resultat, Fyll med den <xref:System.Data.MissingSchemaAction>inställd på `AddWithKey`.</xref:System.Data.MissingSchemaAction>"
  syntax:
    content: public override int Fill (System.Data.DataSet dataSet);
    parameters:
    - id: dataSet
      type: System.Data.DataSet
      description: "En <xref href=&quot;System.Data.DataSet&quot;> </xref> med poster vid behov, schema."
    return:
      type: System.Int32
      description: "Antalet rader har lagts till eller uppdateras i den <xref href=&quot;System.Data.DataSet&quot;> </xref>. Detta inkluderar inte rader som påverkas av instruktioner som inte returnerar rader."
  overload: System.Data.Common.DbDataAdapter.Fill*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.Fill(System.Data.DataTable)
  id: Fill(System.Data.DataTable)
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: Fill(DataTable)
  nameWithType: DbDataAdapter.Fill(DataTable)
  fullName: System.Data.Common.DbDataAdapter.Fill(DataTable)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Lägger till eller uppdaterar rader i det angivna intervallet i den <xref href=&quot;System.Data.DataSet&quot;> </xref> som matchar de som finns i datakällan med den <xref href=&quot;System.Data.DataTable&quot;> </xref> namn."
  remarks: "Den <xref:System.Data.Common.DbDataAdapter.Fill%2A>metoden hämtar rader från datakällan med instruktionen SELECT som anges av en associerad <xref:System.Data.IDbDataAdapter.SelectCommand%2A>egenskap.</xref:System.Data.IDbDataAdapter.SelectCommand%2A> </xref:System.Data.Common.DbDataAdapter.Fill%2A> Det anslutningsobjekt som är associerade med SELECT-instruktionen måste vara giltig, men behöver inte vara öppen. Om anslutningen är stängd innan <xref:System.Data.Common.DbDataAdapter.Fill%2A>är anropas är öppna för att hämta data, därefter stängd.</xref:System.Data.Common.DbDataAdapter.Fill%2A> Om anslutningen är öppen innan <xref:System.Data.Common.DbDataAdapter.Fill%2A>är kallas, det är öppet.</xref:System.Data.Common.DbDataAdapter.Fill%2A>       Den <xref:System.Data.Common.DbDataAdapter.Fill%2A>åtgärden sedan lägger till rader till mål <xref:System.Data.DataTable>objekt i den <xref:System.Data.DataSet>, skapar den <xref:System.Data.DataTable>objekt om de inte redan finns.</xref:System.Data.DataTable> </xref:System.Data.DataSet> </xref:System.Data.DataTable> </xref:System.Data.Common.DbDataAdapter.Fill%2A> När du skapar <xref:System.Data.DataTable>objekt, den <xref:System.Data.Common.DbDataAdapter.Fill%2A>åtgärden normalt skapar endast namnet kolumnmetadata.</xref:System.Data.Common.DbDataAdapter.Fill%2A> </xref:System.Data.DataTable> Men om den <xref:System.Data.IDataAdapter.MissingSchemaAction%2A>egenskap är inställd på `AddWithKey`, skapas också lämpliga primära nycklar och begränsningar.</xref:System.Data.IDataAdapter.MissingSchemaAction%2A>       Om den <xref:System.Data.Common.DbDataAdapter>möten duplicerade kolumner medan en <xref:System.Data.DataTable>, det genererar namn för efterföljande kolumner, hur du använder mönstret &quot;*columnname*1&quot;, &quot;*columnname*2&quot;,&quot;*columnname*3&quot;, och så vidare.</xref:System.Data.DataTable> </xref:System.Data.Common.DbDataAdapter> Om inkommande data innehåller icke namngivna kolumner, placeras de i den <xref:System.Data.DataSet>enligt mönstret &quot;Kolumn1&quot;, &quot;Kolumn2&quot; och så vidare.</xref:System.Data.DataSet> När flera resultatmängder läggs till i <xref:System.Data.DataSet>varje resultatmängd är placerad i separata tabeller.</xref:System.Data.DataSet>       Överlagring för <xref:System.Data.Common.DbDataAdapter.Fill%2A>som tar `DataTable` som en parameter hämtar endast det första resultatet.</xref:System.Data.Common.DbDataAdapter.Fill%2A> Använd en överlagring av <xref:System.Data.Common.DbDataAdapter.Fill%2A>som tar `DataSet` som parameter till flera resultat.</xref:System.Data.Common.DbDataAdapter.Fill%2A>       Den <xref:System.Data.Common.DbDataAdapter.Fill%2A>metoden stöder scenarier där det <xref:System.Data.DataSet>innehåller flera <xref:System.Data.DataTable>objekt vars namn endast skiljer ärende.</xref:System.Data.DataTable> </xref:System.Data.DataSet> </xref:System.Data.Common.DbDataAdapter.Fill%2A> I sådana situationer <xref:System.Data.Common.DbDataAdapter.Fill%2A>utför gemener för att hitta motsvarande register och skapar en ny tabell om det finns ingen exakt matchning.</xref:System.Data.Common.DbDataAdapter.Fill%2A> Följande C#-kod visar det här beteendet.      ```   DataSet dataset = new DataSet();    dataset.Tables.Add(&quot;aaa&quot;);    dataset.Tables.Add(&quot;AAA&quot;);    adapter.Fill(dataset, &quot;aaa&quot;); // Fills &quot;aaa&quot;, which already exists in the DataSet.       adapter.Fill(dataset, &quot;Aaa&quot;); // Adds a new table called &quot;Aaa&quot;.   ```Om <xref:System.Data.Common.DbDataAdapter.Fill%2A>kallas och <xref:System.Data.DataSet>bara innehåller en <xref:System.Data.DataTable>vars namn skiljer sig bara av fallet som <xref:System.Data.DataTable>uppdateras.</xref:System.Data.DataTable> </xref:System.Data.DataTable> </xref:System.Data.DataSet> </xref:System.Data.Common.DbDataAdapter.Fill%2A> I det här scenariot är jämförelse inte skiftlägeskänsligt. Följande C#-kod visar det här beteendet.      ```   DataSet dataset = new DataSet();    dataset.Tables.Add(&quot;aaa&quot;);       adapter.Fill(dataset, &quot;AAA&quot;); // Fills table &quot;aaa&quot; because only one similarly named table is in the DataSet.   ```Du kan använda <xref:System.Data.Common.DbDataAdapter.Fill%2A>metoden flera gånger i samma <xref:System.Data.DataTable>.</xref:System.Data.DataTable> </xref:System.Data.Common.DbDataAdapter.Fill%2A> Om det finns en primärnyckel, slås inkommande rader samman med matchande rader som redan finns. Om det finns ingen primär nyckel, läggs inkommande rader till i <xref:System.Data.DataTable>.</xref:System.Data.DataTable>       Om den `SelectCommand` returnerar resultatet av en yttre koppling av `DataAdapter` inte anger ett <xref:System.Data.DataTable.PrimaryKey%2A>värde för den resulterande <xref:System.Data.DataTable>.</xref:System.Data.DataTable> </xref:System.Data.DataTable.PrimaryKey%2A> Du måste uttryckligen definiera den primära nyckeln för att säkerställa att dubblettrader matcha korrekt. Mer information finns i [definierar primärnycklar](~/add/includes/ajax-current-ext-md.md).      > [!NOTE] > Vid hantering av batch SQL-uttryck som kan returnera flera resultat, implementering av <xref:System.Data.Common.DbDataAdapter.Fill%2A>och <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>för en .NET Framework data provider hämtar schemainformation för endast det första resultatet.</xref:System.Data.Common.DbDataAdapter.FillSchema%2A> </xref:System.Data.Common.DbDataAdapter.Fill%2A>"
  syntax:
    content: public int Fill (System.Data.DataTable dataTable);
    parameters:
    - id: dataTable
      type: System.Data.DataTable
      description: "Namnet på den <xref href=&quot;System.Data.DataTable&quot;> </xref> ska användas för mappning av tabellen."
    return:
      type: System.Int32
      description: "Antalet rader har lagts till eller uppdateras i den <xref href=&quot;System.Data.DataSet&quot;> </xref>. Detta inkluderar inte rader som påverkas av instruktioner som inte returnerar rader."
  overload: System.Data.Common.DbDataAdapter.Fill*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Källtabellen är ogiltig."
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet,System.String)
  id: Fill(System.Data.DataSet,System.String)
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: Fill(DataSet,String)
  nameWithType: DbDataAdapter.Fill(DataSet,String)
  fullName: System.Data.Common.DbDataAdapter.Fill(DataSet,String)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Lägger till eller uppdaterar rader i den <xref href=&quot;System.Data.DataSet&quot;> </xref> som matchar de som finns i datakällan med den <xref href=&quot;System.Data.DataSet&quot;> </xref> och <xref href=&quot;System.Data.DataTable&quot;> </xref> namn."
  remarks: "Den <xref:System.Data.Common.DbDataAdapter.Fill%2A>metoden hämtar data från datakällan med en SELECT-instruktion.</xref:System.Data.Common.DbDataAdapter.Fill%2A> Den <xref:System.Data.IDbConnection>som är associerat med kommandot select måste vara giltig, men behöver inte vara öppen.</xref:System.Data.IDbConnection> Om den <xref:System.Data.IDbConnection>är stängd innan <xref:System.Data.Common.DbDataAdapter.Fill%2A>är anropas är öppna för att hämta data, därefter stängd.</xref:System.Data.Common.DbDataAdapter.Fill%2A> </xref:System.Data.IDbConnection> Om anslutningen är öppen innan <xref:System.Data.Common.DbDataAdapter.Fill%2A>är kallas, det är öppet.</xref:System.Data.Common.DbDataAdapter.Fill%2A>       Om ett kommando inte returnerar några rader inga tabeller har lagts till i <xref:System.Data.DataSet>, och inget undantag genereras.</xref:System.Data.DataSet>       Om den <xref:System.Data.Common.DbDataAdapter>dubbla kolumner påträffas medan en <xref:System.Data.DataTable>, den att generera namn för efterföljande kolumner med mönstret &quot;columnname1&quot;, &quot;columnname2&quot;, &quot;columnname3&quot; och så vidare.</xref:System.Data.DataTable> </xref:System.Data.Common.DbDataAdapter> Om inkommande data innehåller icke namngivna kolumner, placeras de i den <xref:System.Data.DataSet>enligt mönstret &quot;Kolumn1&quot;, &quot;Kolumn2&quot; och så vidare.</xref:System.Data.DataSet>       När frågan anges returnerar flera resultat, placeras varje resultatmängd i separata tabeller. Ytterligare resultatmängder är namngivna genom att integrerad värden till angivna tabellnamnet (till exempel &quot;Table&quot;, &quot;Tabell1&quot;, &quot;Tabell2&quot; och så vidare). Eftersom ingen tabell skapas för en fråga som inte returnerar rader, om du skulle bearbeta en insert-fråga följt av en select-frågan namnet i tabell som skapats för select-frågan &quot;Table&quot;, eftersom det är den första tabellen som skapas. Program med kolumnnamn och tabellnamn bör se till att inte uppstår står i konflikt med dessa namngivning mönster.       Den <xref:System.Data.Common.DbDataAdapter.Fill%2A>metoden stöder scenarier där det <xref:System.Data.DataSet>innehåller flera <xref:System.Data.DataTable>objekt vars namn endast skiljer ärende.</xref:System.Data.DataTable> </xref:System.Data.DataSet> </xref:System.Data.Common.DbDataAdapter.Fill%2A> I sådana situationer <xref:System.Data.Common.DbDataAdapter.Fill%2A>utför gemener för att hitta motsvarande register och skapar en ny tabell om det finns ingen exakt matchning.</xref:System.Data.Common.DbDataAdapter.Fill%2A> Följande C#-kod visar det här beteendet.      ```   DataSet dataset = new DataSet();   dataset.Tables.Add(&quot;aaa&quot;);   dataset.Tables.Add(&quot;AAA&quot;);   adapter.Fill(dataset, &quot;aaa&quot;); // Fills &quot;aaa&quot;, which already exists in the DataSet.   adapter.Fill(dataset, &quot;Aaa&quot;); // Adds a new table called &quot;Aaa&quot;.   ```Om <xref:System.Data.Common.DbDataAdapter.Fill%2A>kallas och <xref:System.Data.DataSet>bara innehåller en <xref:System.Data.DataTable>vars namn skiljer sig bara av fallet som <xref:System.Data.DataTable>uppdateras.</xref:System.Data.DataTable> </xref:System.Data.DataTable> </xref:System.Data.DataSet> </xref:System.Data.Common.DbDataAdapter.Fill%2A> I det här scenariot är jämförelse inte skiftlägeskänsligt. Följande C#-kod visar det här beteendet.      ```   DataSet dataset = new DataSet();   dataset.Tables.Add(&quot;aaa&quot;);   adapter.Fill(dataset, &quot;AAA&quot;); // Fills table &quot;aaa&quot; because only one similarly named table is in the DataSet.   ```Om ett fel eller ett undantag har påträffats medan datatabellerna, förblir rader läggs innan förekomsten av felet i datatabeller. Resten av åtgärden avbröts.       När SELECT-instruktion används för att fylla i <xref:System.Data.DataSet>returnerar flera resultat, t.ex. en batch SQL-instruktionen, Tänk på följande:-om ett resultat innehåller ett fel alla efterföljande resultat hoppas över och inte har lagts till i <xref:System.Data.DataSet>.</xref:System.Data.DataSet> </xref:System.Data.DataSet>       När du använder efterföljande <xref:System.Data.Common.DbDataAdapter.Fill%2A>anrop till uppdatera innehållet i den <xref:System.Data.DataSet>, två villkor måste uppfyllas: 1.</xref:System.Data.DataSet> </xref:System.Data.Common.DbDataAdapter.Fill%2A>  SQL-instruktionen ska motsvara det ursprungligen används för att fylla i <xref:System.Data.DataSet>.</xref:System.Data.DataSet>      2.  Den **nyckeln** kolumninformation måste finnas. Om det primära nyckelinformationen, alla dubblettrader stäms och bara finnas en gång i <xref:System.Data.DataTable>som motsvarar <xref:System.Data.DataSet>.</xref:System.Data.DataSet> </xref:System.Data.DataTable> Primära nyckelinformationen kan anges antingen via <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>, genom att ange den <xref:System.Data.DataTable.PrimaryKey%2A>egenskapen för den <xref:System.Data.DataTable>, eller genom att ange den <xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A>egenskapen `AddWithKey`.</xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A> </xref:System.Data.DataTable> </xref:System.Data.DataTable.PrimaryKey%2A> </xref:System.Data.Common.DbDataAdapter.FillSchema%2A>       Om den `SelectCommand` returnerar resultatet av en yttre koppling av `DataAdapter` inte anger ett <xref:System.Data.DataTable.PrimaryKey%2A>värde för den resulterande <xref:System.Data.DataTable>.</xref:System.Data.DataTable> </xref:System.Data.DataTable.PrimaryKey%2A> Du måste uttryckligen definiera den primära nyckeln för att säkerställa att dubblettrader matcha korrekt. Mer information finns i[definierar primärnycklar](~/add/includes/ajax-current-ext-md.md).      > [!NOTE] > Vid hantering av batch SQL-uttryck som kan returnera flera resultat, implementering av <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>för .NET Framework Data Provider för OLE DB hämtar schemainformation för endast det första resultatet.</xref:System.Data.Common.DbDataAdapter.FillSchema%2A> Använd för att hämta schemainformation för flera resultat, <xref:System.Data.Common.DbDataAdapter.Fill%2A>med den <xref:System.Data.MissingSchemaAction>inställd på `AddWithKey`.</xref:System.Data.MissingSchemaAction> </xref:System.Data.Common.DbDataAdapter.Fill%2A>"
  example:
  - "The following example uses the derived class, <xref:System.Data.OleDb.OleDbDataAdapter>, to fill a <xref:System.Data.DataSet> with rows from the categories table. This example assumes that you have created an <xref:System.Data.OleDb.OleDbDataAdapter> and a <xref:System.Data.DataSet>.  \n  \n [!code-vb[Classic WebData DbDataAdapter.Fill2 Example#1](~/add/codesnippet/visualbasic/m-system.data.common.dbd_3_1.vb)]\n [!code-cs[Classic WebData DbDataAdapter.Fill2 Example#1](~/add/codesnippet/csharp/m-system.data.common.dbd_3_1.cs)]"
  syntax:
    content: public int Fill (System.Data.DataSet dataSet, string srcTable);
    parameters:
    - id: dataSet
      type: System.Data.DataSet
      description: "En <xref href=&quot;System.Data.DataSet&quot;> </xref> med poster vid behov, schema."
    - id: srcTable
      type: System.String
      description: "Namnet på källtabellen ska användas för mappning av tabellen."
    return:
      type: System.Int32
      description: "Antalet rader har lagts till eller uppdateras i den <xref href=&quot;System.Data.DataSet&quot;> </xref>. Detta inkluderar inte rader som påverkas av instruktioner som inte returnerar rader."
  overload: System.Data.Common.DbDataAdapter.Fill*
  exceptions:
  - type: System.SystemException
    commentId: T:System.SystemException
    description: "Källtabellen är ogiltig."
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.Fill(System.Data.DataTable,System.Data.IDbCommand,System.Data.CommandBehavior)
  id: Fill(System.Data.DataTable,System.Data.IDbCommand,System.Data.CommandBehavior)
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: Fill(DataTable,IDbCommand,CommandBehavior)
  nameWithType: DbDataAdapter.Fill(DataTable,IDbCommand,CommandBehavior)
  fullName: System.Data.Common.DbDataAdapter.Fill(DataTable,IDbCommand,CommandBehavior)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Lägger till eller uppdaterar rader i en <xref href=&quot;System.Data.DataTable&quot;> </xref> som matchar de som finns i datakällan med den angivna <xref href=&quot;System.Data.DataTable&quot;> </xref>, <xref href=&quot;System.Data.IDbCommand&quot;> </xref> och <xref href=&quot;System.Data.CommandBehavior&quot;> </xref>."
  remarks: "Den <xref:System.Data.Common.DbDataAdapter.Fill%2A>metoden hämtar rader från datakällan med instruktionen SELECT som anges av en associerad <xref:System.Data.IDbDataAdapter.SelectCommand%2A>egenskap.</xref:System.Data.IDbDataAdapter.SelectCommand%2A> </xref:System.Data.Common.DbDataAdapter.Fill%2A> Det anslutningsobjekt som är associerade med SELECT-instruktionen måste vara giltig, men behöver inte vara öppen. Om anslutningen är stängd innan <xref:System.Data.Common.DbDataAdapter.Fill%2A>är anropas den öppnas för att hämta data och sedan stängs.</xref:System.Data.Common.DbDataAdapter.Fill%2A> Om anslutningen är öppen innan <xref:System.Data.Common.DbDataAdapter.Fill%2A>är kallas, det är öppet.</xref:System.Data.Common.DbDataAdapter.Fill%2A>       Den <xref:System.Data.Common.DbDataAdapter.Fill%2A>åtgärden sedan lägger till rader till det angivna målet <xref:System.Data.DataTable>objekt i den <xref:System.Data.DataSet>, skapar den <xref:System.Data.DataTable>objekt om den inte redan finns.</xref:System.Data.DataTable> </xref:System.Data.DataSet> </xref:System.Data.DataTable> </xref:System.Data.Common.DbDataAdapter.Fill%2A> När du skapar en <xref:System.Data.DataTable>objekt, den <xref:System.Data.Common.DbDataAdapter.Fill%2A>åtgärden normalt skapar endast namnet kolumnmetadata.</xref:System.Data.Common.DbDataAdapter.Fill%2A> </xref:System.Data.DataTable> Men om den <xref:System.Data.IDataAdapter.MissingSchemaAction%2A>egenskap är inställd på `AddWithKey`, skapas också lämpliga primära nycklar och begränsningar.</xref:System.Data.IDataAdapter.MissingSchemaAction%2A>       Om den <xref:System.Data.Common.DbDataAdapter>dubbla kolumner påträffas medan en <xref:System.Data.DataTable>, den att generera namn för efterföljande kolumner med mönstret &quot;*columnname*1&quot;, &quot;*columnname*2&quot;,&quot;*columnname*3&quot; och så vidare.</xref:System.Data.DataTable> </xref:System.Data.Common.DbDataAdapter> Om inkommande data innehåller icke namngivna kolumner, placeras de i den <xref:System.Data.DataSet>enligt mönstret &quot;Kolumn1&quot;, &quot;Kolumn2&quot; och så vidare.</xref:System.Data.DataSet>       Överlagring för <xref:System.Data.Common.DbDataAdapter.Fill%2A>som tar `DataTable` som en parameter hämtar endast det första resultatet.</xref:System.Data.Common.DbDataAdapter.Fill%2A> Använd en överlagring av <xref:System.Data.Common.DbDataAdapter.Fill%2A>som tar `DataSet` som parameter till flera resultat.</xref:System.Data.Common.DbDataAdapter.Fill%2A>       Du kan använda <xref:System.Data.Common.DbDataAdapter.Fill%2A>metoden flera gånger i samma <xref:System.Data.DataTable>.</xref:System.Data.DataTable> </xref:System.Data.Common.DbDataAdapter.Fill%2A> Om det finns en primärnyckel, slås inkommande rader samman med matchande rader som redan finns. Om det finns ingen primär nyckel, läggs inkommande rader till i <xref:System.Data.DataTable>.</xref:System.Data.DataTable>       Om den `SelectCommand` returnerar resultatet av en yttre koppling av `DataAdapter` inte anger ett <xref:System.Data.DataTable.PrimaryKey%2A>värde för den resulterande <xref:System.Data.DataTable>.</xref:System.Data.DataTable> </xref:System.Data.DataTable.PrimaryKey%2A> Du måste uttryckligen definiera den primära nyckeln för att säkerställa att dubblettrader matcha korrekt. Mer information finns i [definierar primärnycklar](~/add/includes/ajax-current-ext-md.md).      > [!NOTE] > Vid hantering av batch SQL-uttryck som kan returnera flera resultat, implementering av <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>för .NET Framework Data Provider för OLE DB hämtar schemainformation för endast det första resultatet.</xref:System.Data.Common.DbDataAdapter.FillSchema%2A> Använd för att hämta schemainformation för flera resultat, <xref:System.Data.Common.DbDataAdapter.Fill%2A>med den <xref:System.Data.MissingSchemaAction>inställd på `AddWithKey`.</xref:System.Data.MissingSchemaAction> </xref:System.Data.Common.DbDataAdapter.Fill%2A>"
  syntax:
    content: protected virtual int Fill (System.Data.DataTable dataTable, System.Data.IDbCommand command, System.Data.CommandBehavior behavior);
    parameters:
    - id: dataTable
      type: System.Data.DataTable
      description: "En <xref href=&quot;System.Data.DataTable&quot;> </xref> med poster vid behov, schema."
    - id: command
      type: System.Data.IDbCommand
      description: "SQL SELECT-uttrycket används för att hämta rader från datakällan."
    - id: behavior
      type: System.Data.CommandBehavior
      description: "En av de <xref href=&quot;System.Data.CommandBehavior&quot;> </xref> värden."
    return:
      type: System.Int32
      description: "Antalet rader har lagts till eller uppdateras i den <xref href=&quot;System.Data.DataTable&quot;> </xref>. Detta inkluderar inte rader som påverkas av instruktioner som inte returnerar rader."
  overload: System.Data.Common.DbDataAdapter.Fill*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.Fill(System.Int32,System.Int32,System.Data.DataTable[])
  id: Fill(System.Int32,System.Int32,System.Data.DataTable[])
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: Fill(Int32,Int32,DataTable[])
  nameWithType: DbDataAdapter.Fill(Int32,Int32,DataTable[])
  fullName: System.Data.Common.DbDataAdapter.Fill(Int32,Int32,DataTable[])
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Lägger till eller uppdaterar rader i en <xref href=&quot;System.Data.DataTable&quot;> </xref> som matchar de som finns i datakällan början vid den angivna posten och hämta upp till angivna högsta antal poster."
  remarks: "Den <xref:System.Data.Common.DataAdapter.Fill%2A>metoden hämtar rader från datakällan med instruktionen SELECT som anges av en associerad <xref:System.Data.IDbDataAdapter.SelectCommand%2A>egenskap.</xref:System.Data.IDbDataAdapter.SelectCommand%2A> </xref:System.Data.Common.DataAdapter.Fill%2A> Det anslutningsobjekt som är associerade med SELECT-instruktionen måste vara giltig, men behöver inte vara öppen. Om anslutningen är stängd innan <xref:System.Data.Common.DataAdapter.Fill%2A>är kallas, som används för att hämta data och sedan stängs.</xref:System.Data.Common.DataAdapter.Fill%2A> Om anslutningen är öppen innan <xref:System.Data.Common.DataAdapter.Fill%2A>är kallas, det är öppet.</xref:System.Data.Common.DataAdapter.Fill%2A>       Den <xref:System.Data.Common.DataAdapter.Fill%2A>åtgärden sedan lägger till rader till mål <xref:System.Data.DataTable>objekt i den <xref:System.Data.DataSet>, skapar den <xref:System.Data.DataTable>objekt om de inte redan finns.</xref:System.Data.DataTable> </xref:System.Data.DataSet> </xref:System.Data.DataTable> </xref:System.Data.Common.DataAdapter.Fill%2A> När du skapar <xref:System.Data.DataTable>objekt, den <xref:System.Data.Common.DataAdapter.Fill%2A>åtgärden normalt skapar endast namnet kolumnmetadata.</xref:System.Data.Common.DataAdapter.Fill%2A> </xref:System.Data.DataTable> Men om den <xref:System.Data.IDataAdapter.MissingSchemaAction%2A>egenskap är inställd på `AddWithKey`, skapas också lämpliga primära nycklar och begränsningar.</xref:System.Data.IDataAdapter.MissingSchemaAction%2A>       Om den `SelectCommand` returnerar resultatet av en yttre koppling av `DataAdapter` inte anger ett <xref:System.Data.DataTable.PrimaryKey%2A>värde för den resulterande <xref:System.Data.DataTable>.</xref:System.Data.DataTable> </xref:System.Data.DataTable.PrimaryKey%2A> Du måste uttryckligen definiera den primära nyckeln för att säkerställa att dubblettrader matcha korrekt. Mer information finns i [definierar primärnycklar](~/add/includes/ajax-current-ext-md.md).       Om dataadaptern påträffar dubbla kolumner medan en <xref:System.Data.DataTable>, det genererar namn för efterföljande kolumner med mönstret &quot;columnname1&quot;, &quot;columnname2&quot;, &quot;columnname3&quot; och så vidare.</xref:System.Data.DataTable> Om inkommande data innehåller icke namngivna kolumner, placeras de i den <xref:System.Data.DataSet>enligt mönstret &quot;Kolumn1&quot;, &quot;Kolumn2&quot; och så vidare.</xref:System.Data.DataSet> När flera resultatmängder läggs till i <xref:System.Data.DataSet>, varje resultatmängd är placerad i separata tabeller.</xref:System.Data.DataSet> Ytterligare resultatmängder är namngivna genom att integrerad värden till angivna tabellnamnet (till exempel &quot;Table&quot;, &quot;Tabell1&quot;, &quot;Tabell2&quot; och så vidare). Program med kolumnnamn och tabellnamn bör se till att inte uppstår står i konflikt med dessa namngivning mönster.       När SELECT-instruktion används för att fylla i <xref:System.Data.DataSet>returnerar flera resultat, till exempel en batch SQL-uttryck och om en av resultat som innehåller ett fel alla efterföljande resultat hoppas över och inte har lagts till i <xref:System.Data.DataSet>.</xref:System.Data.DataSet> </xref:System.Data.DataSet>       Du kan använda <xref:System.Data.Common.DataAdapter.Fill%2A>metoden flera gånger i samma <xref:System.Data.DataTable>.</xref:System.Data.DataTable> </xref:System.Data.Common.DataAdapter.Fill%2A> Om det finns en primärnyckel, slås inkommande rader samman med matchande rader som redan finns. Om det finns ingen primär nyckel, läggs inkommande rader till i <xref:System.Data.DataTable>.</xref:System.Data.DataTable>      > [!NOTE] > Vid hantering av batch SQL-uttryck som kan returnera flera resultat, implementering av <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>för .NET Framework Data Provider för OLE DB hämtar schemainformation för endast det första resultatet.</xref:System.Data.Common.DbDataAdapter.FillSchema%2A> Använd för att hämta schemainformation för flera resultat, <xref:System.Data.Common.DbDataAdapter.Fill%2A>med den <xref:System.Data.MissingSchemaAction>inställd på `AddWithKey`.</xref:System.Data.MissingSchemaAction> </xref:System.Data.Common.DbDataAdapter.Fill%2A>"
  syntax:
    content: public int Fill (int startRecord, int maxRecords, System.Data.DataTable[] dataTables);
    parameters:
    - id: startRecord
      type: System.Int32
      description: "Nollbaserade nummer vill börja med."
    - id: maxRecords
      type: System.Int32
      description: "Maximalt antal poster som ska hämtas."
    - id: dataTables
      type: System.Data.DataTable[]
      description: "Den <xref href=&quot;System.Data.DataTable&quot;> </xref> objekt att fylla från datakällan."
    return:
      type: System.Int32
      description: "Antalet rader har lagts till eller uppdateras i den <xref href=&quot;System.Data.DataTable&quot;> </xref>. Det här värdet inkluderar inte rader som påverkas av instruktioner som inte returnerar rader."
  overload: System.Data.Common.DbDataAdapter.Fill*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet,System.Int32,System.Int32,System.String)
  id: Fill(System.Data.DataSet,System.Int32,System.Int32,System.String)
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: Fill(DataSet,Int32,Int32,String)
  nameWithType: DbDataAdapter.Fill(DataSet,Int32,Int32,String)
  fullName: System.Data.Common.DbDataAdapter.Fill(DataSet,Int32,Int32,String)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Lägger till eller uppdaterar rader i det angivna intervallet i den <xref href=&quot;System.Data.DataSet&quot;> </xref> som matchar de som finns i datakällan med den <xref href=&quot;System.Data.DataSet&quot;> </xref> och <xref href=&quot;System.Data.DataTable&quot;> </xref> namn."
  remarks: "En `maxRecords` värdet 0 hämtar alla poster hittades efter startposten. Om `maxRecords` är större än antalet återstående rader endast återstående rader returneras och inget fel genereras.       Om motsvarande select-kommandot är en instruktion returnera flera resultat <xref:System.Data.Common.DbDataAdapter.Fill%2A>gäller bara `maxRecords` till första resultat.</xref:System.Data.Common.DbDataAdapter.Fill%2A>       Den <xref:System.Data.Common.DbDataAdapter.Fill%2A>metoden hämtar data från datakällan med en SELECT-instruktion.</xref:System.Data.Common.DbDataAdapter.Fill%2A> Den <xref:System.Data.IDbConnection>som är associerat med SELECT-instruktionen måste vara giltig, men behöver inte vara öppen.</xref:System.Data.IDbConnection> Om den <xref:System.Data.IDbConnection>är stängd innan <xref:System.Data.Common.DbDataAdapter.Fill%2A>är anropas den öppnas för att hämta data och sedan stängs.</xref:System.Data.Common.DbDataAdapter.Fill%2A> </xref:System.Data.IDbConnection> Om anslutningen är öppen innan <xref:System.Data.Common.DbDataAdapter.Fill%2A>är kallas, det är öppet.</xref:System.Data.Common.DbDataAdapter.Fill%2A>       Om ett kommando inte returnerar några rader inga tabeller har lagts till i <xref:System.Data.DataSet>, men inget undantag utlöses.</xref:System.Data.DataSet>       Om den <xref:System.Data.Common.DbDataAdapter>dubbla kolumner påträffas medan en <xref:System.Data.DataTable>, den att generera namn för efterföljande kolumner med mönstret &quot;*columnname*1&quot;, &quot;*columnname*2&quot;,&quot;*columnname*3&quot; och så vidare.</xref:System.Data.DataTable> </xref:System.Data.Common.DbDataAdapter> Om inkommande data innehåller icke namngivna kolumner, placeras de i den <xref:System.Data.DataSet>enligt mönstret &quot;Kolumn1&quot;, &quot;Kolumn2&quot; och så vidare.</xref:System.Data.DataSet>       När frågan anges returnerar flera resultat, placeras varje resultatmängd i separata tabeller. Ytterligare resultatmängder är namngivna genom att integrerad värden till angivna tabellnamnet (till exempel &quot;Table&quot;, &quot;Tabell1&quot;, &quot;Tabell2&quot; och så vidare). Eftersom ingen tabell skapas för en fråga som inte returnerar rader, om du kör en insert-fråga följt av en select-frågan heter &quot;Table&quot; i tabellen som skapats för select-frågan eftersom det är den första tabellen som skapas. Program med kolumnnamn och tabellnamn bör se till att inte uppstår står i konflikt med dessa namngivning mönster.       Den <xref:System.Data.Common.DbDataAdapter.Fill%2A>metoden stöder scenarier där det <xref:System.Data.DataSet>innehåller flera <xref:System.Data.DataTable>objekt vars namn endast skiljer ärende.</xref:System.Data.DataTable> </xref:System.Data.DataSet> </xref:System.Data.Common.DbDataAdapter.Fill%2A> I sådana situationer <xref:System.Data.Common.DbDataAdapter.Fill%2A>utför gemener för att hitta motsvarande register och skapar en ny tabell om det finns ingen exakt matchning.</xref:System.Data.Common.DbDataAdapter.Fill%2A> Följande C#-kod visar det här beteendet.      ```   DataSet dataset = new DataSet();   dataset.Tables.Add(&quot;aaa&quot;);   dataset.Tables.Add(&quot;AAA&quot;);   adapter.Fill(dataset, &quot;aaa&quot;); // Fills &quot;aaa&quot;, which already exists in the DataSet.   adapter.Fill(dataset, &quot;Aaa&quot;); // Adds a new table called &quot;Aaa&quot;.   ```Om <xref:System.Data.Common.DbDataAdapter.Fill%2A>kallas och <xref:System.Data.DataSet>bara innehåller en <xref:System.Data.DataTable>vars namn skiljer sig bara av fallet som <xref:System.Data.DataTable>uppdateras.</xref:System.Data.DataTable> </xref:System.Data.DataTable> </xref:System.Data.DataSet> </xref:System.Data.Common.DbDataAdapter.Fill%2A> I det här scenariot är jämförelse inte skiftlägeskänsligt. Följande C#-kod visar det här beteendet.      ```   DataSet dataset = new DataSet();   dataset.Tables.Add(&quot;aaa&quot;);   adapter.Fill(dataset, &quot;AAA&quot;); // Fills table &quot;aaa&quot; because only one similarly named table is in the DataSet.   ```Om ett fel eller ett undantag har påträffats medan datatabellerna, förblir rader läggs innan förekomsten av felet i datatabeller. Resten av åtgärden avbröts.       När SELECT-instruktion används för att fylla i <xref:System.Data.DataSet>returnerar flera resultat, till exempel batch SQL-uttryck kan vara medveten om följande: – vid bearbetning av flera resultat från en batch SQL-instruktionen, `maxRecords` gäller bara det första resultatet.</xref:System.Data.DataSet> Detsamma gäller för rader som innehåller kapitelindelad resultat (.NET Framework Data Provider för OLE DB endast). Resultatet översta nivån är begränsad av `maxRecords`, men alla underordnade rader har lagts till.      -Om ett resultat innehåller ett fel alla efterföljande resultat hoppas över och inte har lagts till i <xref:System.Data.DataSet>.</xref:System.Data.DataSet>       När du använder efterföljande <xref:System.Data.Common.DbDataAdapter.Fill%2A>anrop till uppdatera innehållet i den <xref:System.Data.DataSet>, två villkor måste uppfyllas: 1.</xref:System.Data.DataSet> </xref:System.Data.Common.DbDataAdapter.Fill%2A>  SQL-instruktionen ska motsvara det ursprungligen används för att fylla i <xref:System.Data.DataSet>.</xref:System.Data.DataSet>      2.  Den **nyckeln** kolumninformation måste finnas.       Om det primära nyckelinformationen, ska alla dubblettrader synkroniseras och bara finnas en gång i <xref:System.Data.DataTable>som motsvarar <xref:System.Data.DataSet>.</xref:System.Data.DataSet> </xref:System.Data.DataTable> Primära nyckelinformationen kan anges antingen via <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>, genom att ange den <xref:System.Data.DataTable.PrimaryKey%2A>egenskapen för den <xref:System.Data.DataTable>, eller genom att ange den <xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A>egenskapen `AddWithKey`.</xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A> </xref:System.Data.DataTable> </xref:System.Data.DataTable.PrimaryKey%2A> </xref:System.Data.Common.DbDataAdapter.FillSchema%2A>       Om den `SelectCommand` returnerar resultatet av en yttre koppling av `DataAdapter` inte anger ett <xref:System.Data.DataTable.PrimaryKey%2A>värde för den resulterande <xref:System.Data.DataTable>.</xref:System.Data.DataTable> </xref:System.Data.DataTable.PrimaryKey%2A> Du måste uttryckligen definiera den primära nyckeln för att säkerställa att dubblettrader matcha korrekt. Mer information finns i [definierar primärnycklar](~/add/includes/ajax-current-ext-md.md).      > [!NOTE] > Vid hantering av batch SQL-uttryck som kan returnera flera resultat, implementering av <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>för .NET Framework Data Provider för OLE DB hämtar schemainformation för endast det första resultatet.</xref:System.Data.Common.DbDataAdapter.FillSchema%2A> Använd för att hämta schemainformation för flera resultat, <xref:System.Data.Common.DbDataAdapter.Fill%2A>med den <xref:System.Data.MissingSchemaAction>inställd på `AddWithKey`.</xref:System.Data.MissingSchemaAction> </xref:System.Data.Common.DbDataAdapter.Fill%2A>      > [!NOTE] > Den `DataSet` ska inte innehålla fler än antalet poster som anges av `maxRecords`. Hela resultatmängden genereras av frågan är fortfarande returnerades från servern."
  example:
  - "The following example uses the derived class, <xref:System.Data.OleDb.OleDbDataAdapter>, to fill a <xref:System.Data.DataSet> with 15 rows, beginning at row 10, from the **Categories** table. This example assumes that you have created an <xref:System.Data.OleDb.OleDbDataAdapter> and a <xref:System.Data.DataSet>.  \n  \n [!code-vb[Classic WebData DbDataAdapter.Fill3 Example#1](~/add/codesnippet/visualbasic/db016a7d-8591-46f9-abcc-_1.vb)]\n [!code-cs[Classic WebData DbDataAdapter.Fill3 Example#1](~/add/codesnippet/csharp/db016a7d-8591-46f9-abcc-_1.cs)]"
  syntax:
    content: public int Fill (System.Data.DataSet dataSet, int startRecord, int maxRecords, string srcTable);
    parameters:
    - id: dataSet
      type: System.Data.DataSet
      description: "En <xref href=&quot;System.Data.DataSet&quot;> </xref> med poster vid behov, schema."
    - id: startRecord
      type: System.Int32
      description: "Nollbaserade nummer vill börja med."
    - id: maxRecords
      type: System.Int32
      description: "Maximalt antal poster som ska hämtas."
    - id: srcTable
      type: System.String
      description: "Namnet på källtabellen ska användas för mappning av tabellen."
    return:
      type: System.Int32
      description: "Antalet rader har lagts till eller uppdateras i den <xref href=&quot;System.Data.DataSet&quot;> </xref>. Detta inkluderar inte rader som påverkas av instruktioner som inte returnerar rader."
  overload: System.Data.Common.DbDataAdapter.Fill*
  exceptions:
  - type: System.SystemException
    commentId: T:System.SystemException
    description: "Den <xref href=&quot;System.Data.DataSet&quot;> </xref> är ogiltig."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Källtabellen är ogiltig.       - eller - anslutningen är ogiltig."
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "Det gick inte att hitta anslutningen."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Den <code> startRecord </code> parameter är mindre än 0.       - eller - <code> maxRecords </code> parameter är mindre än 0."
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.Fill(System.Data.DataTable[],System.Int32,System.Int32,System.Data.IDbCommand,System.Data.CommandBehavior)
  id: Fill(System.Data.DataTable[],System.Int32,System.Int32,System.Data.IDbCommand,System.Data.CommandBehavior)
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: Fill(DataTable[],Int32,Int32,IDbCommand,CommandBehavior)
  nameWithType: DbDataAdapter.Fill(DataTable[],Int32,Int32,IDbCommand,CommandBehavior)
  fullName: System.Data.Common.DbDataAdapter.Fill(DataTable[],Int32,Int32,IDbCommand,CommandBehavior)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Lägger till eller uppdaterar rader i det angivna intervallet i den <xref href=&quot;System.Data.DataSet&quot;> </xref> som matchar de som finns i datakällan med den <xref href=&quot;System.Data.DataSet&quot;> </xref> och <xref href=&quot;System.Data.DataTable&quot;> </xref> namn."
  remarks: "En `maxRecords` värdet 0 hämtar alla poster hittades efter startposten. Om `maxRecords` är större än antalet återstående rader endast återstående rader returneras och inget fel genereras.       Metoden Fill hämtar data från datakällan med en SELECT-instruktion. Den <xref:System.Data.IDbConnection>som är associerat med SELECT-instruktionen måste vara giltig, men behöver inte vara öppen.</xref:System.Data.IDbConnection> Om den <xref:System.Data.IDbConnection>är stängd innan <xref:System.Data.Common.DbDataAdapter.Fill%2A>är anropas är öppna för att hämta data, därefter stängd.</xref:System.Data.Common.DbDataAdapter.Fill%2A> </xref:System.Data.IDbConnection> Om anslutningen är öppen innan <xref:System.Data.Common.DbDataAdapter.Fill%2A>är kallas, det är öppet.</xref:System.Data.Common.DbDataAdapter.Fill%2A>       Om ett kommando inte returnerar några rader inga tabeller har lagts till i <xref:System.Data.DataSet>, men inget undantag utlöses.</xref:System.Data.DataSet>       Om den <xref:System.Data.Common.DbDataAdapter>dubbla kolumner påträffas medan en <xref:System.Data.DataTable>, den att generera namn för efterföljande kolumner med mönstret &quot;*columnname*1&quot;, &quot;*columnname*2&quot;,&quot;*columnname*3&quot; och så vidare.</xref:System.Data.DataTable> </xref:System.Data.Common.DbDataAdapter> Om inkommande data innehåller icke namngivna kolumner, placeras de i den <xref:System.Data.DataSet>enligt mönstret &quot;Kolumn1&quot;, &quot;Kolumn2&quot; och så vidare.</xref:System.Data.DataSet>       När frågan anges returnerar flera resultat, placeras varje resultatmängd i separata tabeller. Ytterligare resultatmängder är namngivna genom att integrerad värden till angivna tabellnamnet (till exempel &quot;Table&quot;, &quot;Tabell1&quot;, &quot;Tabell2&quot; och så vidare). Eftersom ingen tabell skapas för en fråga som inte returnerar rader, om du skulle bearbeta en insert-fråga följt av en select-frågan namnet i tabell som skapats för select-frågan &quot;Table&quot;, eftersom det är den första tabellen som skapas. Program med kolumnnamn och tabellnamn bör se till att inte uppstår står i konflikt med dessa namngivning mönster.       Fill-metoden stöder scenarier där det <xref:System.Data.DataSet>innehåller flera <xref:System.Data.DataTable>objekt vars namn endast skiljer ärende.</xref:System.Data.DataTable> </xref:System.Data.DataSet> I sådana situationer <xref:System.Data.Common.DbDataAdapter.Fill%2A>utför gemener för att hitta motsvarande register och skapar en ny tabell om det finns ingen exakt matchning.</xref:System.Data.Common.DbDataAdapter.Fill%2A> Följande C#-kod visar det här beteendet.      ```   DataSet dataset = new DataSet();   dataset.Tables.Add(&quot;aaa&quot;);   dataset.Tables.Add(&quot;AAA&quot;);   adapter.Fill(dataset, &quot;aaa&quot;); // Fills &quot;aaa&quot;, which already exists in the DataSet.   adapter.Fill(dataset, &quot;Aaa&quot;); // Adds a new table called &quot;Aaa&quot;.   ```Om <xref:System.Data.Common.DbDataAdapter.Fill%2A>kallas och <xref:System.Data.DataSet>bara innehåller en <xref:System.Data.DataTable>vars namn skiljer sig bara av fallet som <xref:System.Data.DataTable>uppdateras.</xref:System.Data.DataTable> </xref:System.Data.DataTable> </xref:System.Data.DataSet> </xref:System.Data.Common.DbDataAdapter.Fill%2A> I det här scenariot är jämförelse inte skiftlägeskänsligt. Följande C#-kod visar det här beteendet.      ```   DataSet dataset = new DataSet();   dataset.Tables.Add(&quot;aaa&quot;);   adapter.Fill(dataset, &quot;AAA&quot;); // Fills table &quot;aaa&quot; because only one similarly named table is in the DataSet.   ```Om ett fel eller ett undantag har påträffats medan datatabellerna, förblir rader läggs innan förekomsten av felet i datatabeller. Resten av åtgärden avbröts.       När SELECT-instruktion används för att fylla i <xref:System.Data.DataTable>objekt returnerar flera resultat, t.ex. en batch SQL-instruktionen, Tänk på följande: – vid bearbetning av flera resultat från en batch SQL-instruktionen, `maxRecords` gäller bara det första resultatet.</xref:System.Data.DataTable> Detsamma gäller för rader som innehåller kapitelindelad resultat (.NET Framework Data Provider för OLE DB endast). Resultatet översta nivån är begränsad av `maxRecords`, men alla underordnade rader har lagts till.      – Om något av innehåller ett fel alla efterföljande resultat hoppas över.      > [!NOTE] > Den `DataSet` ska inte innehålla fler än antalet poster som anges av `maxRecords`. Hela resultatuppsättningen som genereras av frågan är fortfarande returnerades från servern."
  syntax:
    content: protected virtual int Fill (System.Data.DataTable[] dataTables, int startRecord, int maxRecords, System.Data.IDbCommand command, System.Data.CommandBehavior behavior);
    parameters:
    - id: dataTables
      type: System.Data.DataTable[]
      description: "Den <xref href=&quot;System.Data.DataTable&quot;> </xref> objekt att fylla från datakällan."
    - id: startRecord
      type: System.Int32
      description: "Nollbaserade nummer vill börja med."
    - id: maxRecords
      type: System.Int32
      description: "Maximalt antal poster som ska hämtas."
    - id: command
      type: System.Data.IDbCommand
      description: "Den <xref href=&quot;System.Data.IDbCommand&quot;> </xref> som körts för att fylla i <xref href=&quot;System.Data.DataTable&quot;> </xref> objekt."
    - id: behavior
      type: System.Data.CommandBehavior
      description: "En av de <xref href=&quot;System.Data.CommandBehavior&quot;> </xref> värden."
    return:
      type: System.Int32
      description: "Antalet rader som lagts till eller uppdateras i datatabeller."
  overload: System.Data.Common.DbDataAdapter.Fill*
  exceptions:
  - type: System.SystemException
    commentId: T:System.SystemException
    description: "Den <xref href=&quot;System.Data.DataSet&quot;> </xref> är ogiltig."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Källtabellen är ogiltig.       - eller - anslutningen är ogiltig."
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "Det gick inte att hitta anslutningen."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Den <code> startRecord </code> parameter är mindre än 0.       - eller - <code> maxRecords </code> parameter är mindre än 0."
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet,System.Int32,System.Int32,System.String,System.Data.IDbCommand,System.Data.CommandBehavior)
  id: Fill(System.Data.DataSet,System.Int32,System.Int32,System.String,System.Data.IDbCommand,System.Data.CommandBehavior)
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: Fill(DataSet,Int32,Int32,String,IDbCommand,CommandBehavior)
  nameWithType: DbDataAdapter.Fill(DataSet,Int32,Int32,String,IDbCommand,CommandBehavior)
  fullName: System.Data.Common.DbDataAdapter.Fill(DataSet,Int32,Int32,String,IDbCommand,CommandBehavior)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Lägger till eller uppdaterar rader i det angivna intervallet i den <xref href=&quot;System.Data.DataSet&quot;> </xref> som matchar de som finns i datakällan med den <xref href=&quot;System.Data.DataSet&quot;> </xref> och källtabellen tabellnamn, kommandosträngen och -funktioner."
  remarks: "Den <xref:System.Data.Common.DbDataAdapter.Fill%2A>metoden hämtar rader från datakällan med instruktionen SELECT som anges av en associerad <xref:System.Data.IDbDataAdapter.SelectCommand%2A>egenskap.</xref:System.Data.IDbDataAdapter.SelectCommand%2A> </xref:System.Data.Common.DbDataAdapter.Fill%2A> Det anslutningsobjekt som är associerade med SELECT-instruktionen måste vara giltig, men behöver inte vara öppen. Om anslutningen är stängd innan <xref:System.Data.Common.DbDataAdapter.Fill%2A>är anropas är öppna för att hämta data, därefter stängd.</xref:System.Data.Common.DbDataAdapter.Fill%2A> Om anslutningen är öppen innan <xref:System.Data.Common.DbDataAdapter.Fill%2A>är kallas, det är öppet.</xref:System.Data.Common.DbDataAdapter.Fill%2A>       Den <xref:System.Data.Common.DbDataAdapter.Fill%2A>åtgärden sedan lägger till rader till mål <xref:System.Data.DataTable>objekt i den <xref:System.Data.DataSet>, skapar den <xref:System.Data.DataTable>objekt om de inte redan finns.</xref:System.Data.DataTable> </xref:System.Data.DataSet> </xref:System.Data.DataTable> </xref:System.Data.Common.DbDataAdapter.Fill%2A> När du skapar <xref:System.Data.DataTable>objekt, den <xref:System.Data.Common.DbDataAdapter.Fill%2A>åtgärden normalt skapar endast namnet kolumnmetadata.</xref:System.Data.Common.DbDataAdapter.Fill%2A> </xref:System.Data.DataTable> Men om den <xref:System.Data.IDataAdapter.MissingSchemaAction%2A>egenskap är inställd på `AddWithKey`, skapas också lämpliga primära nycklar och begränsningar.</xref:System.Data.IDataAdapter.MissingSchemaAction%2A>       Om den <xref:System.Data.Common.DbDataAdapter>möten duplicerade kolumner medan en <xref:System.Data.DataTable>, det genererar namn för efterföljande kolumner, hur du använder mönstret &quot;*columnname*1&quot;, &quot;*columnname*2&quot;,&quot;*columnname*3&quot;, och så vidare.</xref:System.Data.DataTable> </xref:System.Data.Common.DbDataAdapter> Om inkommande data innehåller icke namngivna kolumner, placeras de i den <xref:System.Data.DataSet>enligt mönstret &quot;Kolumn1&quot;, &quot;Kolumn2&quot; och så vidare.</xref:System.Data.DataSet> När flera resultatmängder läggs till i <xref:System.Data.DataSet>varje resultatmängd är placerad i separata tabeller.</xref:System.Data.DataSet> Ytterligare resultatmängder är namngivna genom att integrerad värden till angivna tabellnamnet (till exempel &quot;Table&quot;, &quot;Tabell1&quot;, &quot;Tabell2&quot; och så vidare). Program med kolumnnamn och tabellnamn bör se till att inte uppstår står i konflikt med dessa namngivning mönster.       Den <xref:System.Data.Common.DbDataAdapter.Fill%2A>metoden stöder scenarier där det <xref:System.Data.DataSet>innehåller flera <xref:System.Data.DataTable>objekt vars namn endast skiljer ärende.</xref:System.Data.DataTable> </xref:System.Data.DataSet> </xref:System.Data.Common.DbDataAdapter.Fill%2A> I sådana situationer <xref:System.Data.Common.DbDataAdapter.Fill%2A>utför gemener för att hitta motsvarande register och skapar en ny tabell om det finns ingen exakt matchning.</xref:System.Data.Common.DbDataAdapter.Fill%2A> Följande C#-kod visar det här beteendet.      ```   DataSet dataset = new DataSet();   dataset.Tables.Add(&quot;aaa&quot;);   dataset.Tables.Add(&quot;AAA&quot;);   adapter.Fill(dataset, &quot;aaa&quot;); // Fills &quot;aaa&quot;, which already exists in the DataSet.   adapter.Fill(dataset, &quot;Aaa&quot;); // Adds a new table called &quot;Aaa&quot;.   ```Om <xref:System.Data.Common.DbDataAdapter.Fill%2A>kallas och <xref:System.Data.DataSet>bara innehåller en <xref:System.Data.DataTable>vars namn skiljer sig bara av fallet som <xref:System.Data.DataTable>uppdateras.</xref:System.Data.DataTable> </xref:System.Data.DataTable> </xref:System.Data.DataSet> </xref:System.Data.Common.DbDataAdapter.Fill%2A> I det här scenariot är jämförelse inte skiftlägeskänsligt. Följande C#-kod visar det här beteendet.      ```   DataSet dataset = new DataSet();   dataset.Tables.Add(&quot;aaa&quot;);   adapter.Fill(dataset, &quot;AAA&quot;); // Fills table &quot;aaa&quot; because only one similarly named table is in the DataSet.   ```Du kan använda <xref:System.Data.Common.DbDataAdapter.Fill%2A>metoden flera gånger i samma <xref:System.Data.DataTable>.</xref:System.Data.DataTable> </xref:System.Data.Common.DbDataAdapter.Fill%2A> Om det finns en primärnyckel, slås inkommande rader samman med matchande rader som redan finns. Om det finns ingen primär nyckel, läggs inkommande rader till i <xref:System.Data.DataTable>.</xref:System.Data.DataTable>       Om den `SelectCommand` returnerar resultatet av en yttre koppling av `DataAdapter` inte anger ett <xref:System.Data.DataTable.PrimaryKey%2A>värde för den resulterande <xref:System.Data.DataTable>.</xref:System.Data.DataTable> </xref:System.Data.DataTable.PrimaryKey%2A> Du måste uttryckligen definiera den primära nyckeln för att säkerställa att dubblettrader matcha korrekt. Mer information finns i[definierar primärnycklar](~/add/includes/ajax-current-ext-md.md).      > [!NOTE] > Vid hantering av batch SQL-uttryck som kan returnera flera resultat, implementering av <xref:System.Data.Common.DbDataAdapter.Fill%2A>och <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>för en .NET Framework data provider hämtar schemainformation för endast det första resultatet.</xref:System.Data.Common.DbDataAdapter.FillSchema%2A> </xref:System.Data.Common.DbDataAdapter.Fill%2A>"
  syntax:
    content: protected virtual int Fill (System.Data.DataSet dataSet, int startRecord, int maxRecords, string srcTable, System.Data.IDbCommand command, System.Data.CommandBehavior behavior);
    parameters:
    - id: dataSet
      type: System.Data.DataSet
      description: "En <xref href=&quot;System.Data.DataSet&quot;> </xref> med poster vid behov, schema."
    - id: startRecord
      type: System.Int32
      description: "Nollbaserade nummer vill börja med."
    - id: maxRecords
      type: System.Int32
      description: "Maximalt antal poster som ska hämtas."
    - id: srcTable
      type: System.String
      description: "Namnet på källtabellen ska användas för mappning av tabellen."
    - id: command
      type: System.Data.IDbCommand
      description: "SQL SELECT-uttrycket används för att hämta rader från datakällan."
    - id: behavior
      type: System.Data.CommandBehavior
      description: "En av de <xref href=&quot;System.Data.CommandBehavior&quot;> </xref> värden."
    return:
      type: System.Int32
      description: "Antalet rader har lagts till eller uppdateras i den <xref href=&quot;System.Data.DataSet&quot;> </xref>. Detta inkluderar inte rader som påverkas av instruktioner som inte returnerar rader."
  overload: System.Data.Common.DbDataAdapter.Fill*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Källtabellen är ogiltig."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Den <code> startRecord </code> parameter är mindre än 0.       - eller - <code> maxRecords </code> parameter är mindre än 0."
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.FillCommandBehavior
  id: FillCommandBehavior
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: FillCommandBehavior
  nameWithType: DbDataAdapter.FillCommandBehavior
  fullName: System.Data.Common.DbDataAdapter.FillCommandBehavior
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Hämtar eller anger beteendet för kommandot som används för att fylla i DataAdapter."
  syntax:
    content: protected System.Data.CommandBehavior FillCommandBehavior { get; set; }
    return:
      type: System.Data.CommandBehavior
      description: "Den <xref href=&quot;System.Data.CommandBehavior&quot;> </xref> för kommandot som används för att fylla i DataAdapter."
  overload: System.Data.Common.DbDataAdapter.FillCommandBehavior*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType)
  id: FillSchema(System.Data.DataSet,System.Data.SchemaType)
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: FillSchema(DataSet,SchemaType)
  nameWithType: DbDataAdapter.FillSchema(DataSet,SchemaType)
  fullName: System.Data.Common.DbDataAdapter.FillSchema(DataSet,SchemaType)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Lägger till en <xref href=&quot;System.Data.DataTable&quot;> </xref> med namnet &quot;Table&quot; till den angivna <xref href=&quot;System.Data.DataSet&quot;> </xref> och konfigurerar schemat så att den matchar som datakällan baserat på den angivna <xref href=&quot;System.Data.SchemaType&quot;> </xref>."
  remarks: "Den här metoden hämtar schemainformationen från datakällan med hjälp av <xref:System.Data.IDbDataAdapter.SelectCommand%2A>.</xref:System.Data.IDbDataAdapter.SelectCommand%2A>       En <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>åtgärd som lägger till en <xref:System.Data.DataTable>till målet <xref:System.Data.DataSet>.</xref:System.Data.DataSet> </xref:System.Data.DataTable> </xref:System.Data.Common.DbDataAdapter.FillSchema%2A> Lägger sedan till kolumner till den <xref:System.Data.DataColumnCollection>av den <xref:System.Data.DataTable>, och konfigurerar följande <xref:System.Data.DataColumn>Egenskaper om de finns på datakällan:- <xref:System.Data.DataColumn.AllowDBNull%2A>- <xref:System.Data.DataColumn.AutoIncrement%2A>.</xref:System.Data.DataColumn.AutoIncrement%2A> </xref:System.Data.DataColumn.AllowDBNull%2A> </xref:System.Data.DataColumn> </xref:System.Data.DataTable> </xref:System.Data.DataColumnCollection> Du måste ange <xref:System.Data.DataColumn.AutoIncrementStep%2A>och <xref:System.Data.DataColumn.AutoIncrementSeed%2A>separat.</xref:System.Data.DataColumn.AutoIncrementSeed%2A> </xref:System.Data.DataColumn.AutoIncrementStep%2A>      - <xref:System.Data.DataColumn.MaxLength%2A>- <xref:System.Data.DataColumn.ReadOnly%2A>- <xref:System.Data.DataColumn.Unique%2A><xref:System.Data.Common.DbDataAdapter.FillSchema%2A>konfigureras också på <xref:System.Data.DataTable.PrimaryKey%2A>och <xref:System.Data.DataTable.Constraints%2A>Egenskaper enligt följande regler: – om en eller flera primärnyckelkolumnerna returneras av <xref:System.Data.IDbDataAdapter.SelectCommand%2A>de används som primärnyckelkolumnerna för <xref:System.Data.DataTable>.</xref:System.Data.DataTable> </xref:System.Data.IDbDataAdapter.SelectCommand%2A> </xref:System.Data.DataTable.Constraints%2A> </xref:System.Data.DataTable.PrimaryKey%2A> </xref:System.Data.Common.DbDataAdapter.FillSchema%2A>       </xref:System.Data.DataColumn.Unique%2A> </xref:System.Data.DataColumn.ReadOnly%2A> </xref:System.Data.DataColumn.MaxLength%2A>      -Om ingen primärnyckelkolumnerna returneras men unika kolumner, används unika kolumner som den primära nyckeln om, och om alla kolumner som unik är kan nollställas. Om någon av kolumnerna är null, en <xref:System.Data.UniqueConstraint>läggs till i <xref:System.Data.ConstraintCollection>, men <xref:System.Data.DataTable.PrimaryKey%2A>egenskapen har inte angetts.</xref:System.Data.DataTable.PrimaryKey%2A> </xref:System.Data.ConstraintCollection> </xref:System.Data.UniqueConstraint>      – Om både primär nyckel och unika kolumner returneras används primärnyckelkolumnerna som primärnyckelkolumnerna för <xref:System.Data.DataTable>.</xref:System.Data.DataTable>       Observera att primärnycklar och unika begränsningar läggs till i <xref:System.Data.ConstraintCollection>enligt föregående regler, men andra villkor läggs inte typer.</xref:System.Data.ConstraintCollection>       Om ett unikt grupperat index har definierats för en kolumn eller kolumner i en tabell med SQL Server och primärnyckelns begränsning har definierats i en separat uppsättning kolumner, och sedan namnen på kolumnerna i det grupperade indexet kommer att returneras. Använda en frågetipset med SELECT-instruktion som anger namnet på det primära nyckelindexet för att returnera namnet eller namnen på de primära nyckelkolumnerna. Mer information om hur du anger frågetips finns [frågetipset (Transact-SQL)](http://msdn.microsoft.com/library/ms181714.aspx).       Primära nyckelinformationen används under <xref:System.Data.Common.DbDataAdapter.Fill%2A>söka efter och ersätta alla rader vars kolumner matchar.</xref:System.Data.Common.DbDataAdapter.Fill%2A> Om detta inte är beteenden som önskas, använda <xref:System.Data.Common.DbDataAdapter.Fill%2A>utan att begära schemainformation.</xref:System.Data.Common.DbDataAdapter.Fill%2A>       Om den <xref:System.Data.IDataAdapter>möten duplicerade kolumner medan en <xref:System.Data.DataTable>, det genererar namn för efterföljande kolumner, hur du använder mönstret &quot;*columnname*1&quot;, &quot;*columnname*2&quot;,&quot;*columnname*3&quot;, och så vidare.</xref:System.Data.DataTable> </xref:System.Data.IDataAdapter> Om inkommande data innehåller icke namngivna kolumner, placeras de i den <xref:System.Data.DataSet>enligt mönstret &quot;Kolumn1&quot;, &quot;Kolumn2&quot; och så vidare.</xref:System.Data.DataSet> När flera resultatmängder läggs till i <xref:System.Data.DataSet>varje resultatmängd är placerad i separata tabeller.</xref:System.Data.DataSet> Ytterligare resultatmängder är namngivna genom att integrerad värden till angivna tabellnamnet (till exempel &quot;Table&quot;, &quot;Tabell1&quot;, &quot;Tabell2&quot; och så vidare.). Program med kolumnnamn och tabellnamn bör se till att inte uppstår står i konflikt med dessa namngivning mönster.       Den <xref:System.Data.IDbConnection>som är associerat med kommandot select måste vara giltig, men behöver inte öppna.</xref:System.Data.IDbConnection> Om den <xref:System.Data.IDbConnection>är stängd innan <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>är anropas är öppna för att hämta data, därefter stängd.</xref:System.Data.Common.DbDataAdapter.FillSchema%2A> </xref:System.Data.IDbConnection> Om anslutningen är öppen innan <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>är anropas lämnas den öppen.</xref:System.Data.Common.DbDataAdapter.FillSchema%2A>      > [!NOTE] > Vid hantering av batch SQL-uttryck som kan returnera flera resultat, implementering av <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>för .NET Framework Data Provider för OLE DB hämtar schemainformation för endast det första resultatet.</xref:System.Data.Common.DbDataAdapter.FillSchema%2A> Använd för att hämta schemainformation för flera resultat, <xref:System.Data.Common.DbDataAdapter.Fill%2A>med den <xref:System.Data.MissingSchemaAction>inställd på `AddWithKey`.</xref:System.Data.MissingSchemaAction> </xref:System.Data.Common.DbDataAdapter.Fill%2A>       När du använder <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>, .NET Framework Data Provider för SQL Server lägger till en FOR BROWSE-satsen i instruktionen som körs.</xref:System.Data.Common.DbDataAdapter.FillSchema%2A> Användaren bör vara medveten om eventuella sidoeffekter, som störningar med hjälp av ange FMTONLY för instruktioner. Se SQL Server Books Online för mer information."
  example:
  - "The following example uses the derived class, <xref:System.Data.SqlClient.SqlDataAdapter>, to fill a <xref:System.Data.DataSet> with the schema, and returns a <xref:System.Data.DataSet>.  \n  \n [!code-vb[Classic WebData DbDataAdapter.FillSchema1 Example#1](~/add/codesnippet/visualbasic/5283d285-2680-48b0-856a-_1.vb)]\n [!code-cs[Classic WebData DbDataAdapter.FillSchema1 Example#1](~/add/codesnippet/csharp/5283d285-2680-48b0-856a-_1.cs)]"
  syntax:
    content: public override System.Data.DataTable[] FillSchema (System.Data.DataSet dataSet, System.Data.SchemaType schemaType);
    parameters:
    - id: dataSet
      type: System.Data.DataSet
      description: "En <xref href=&quot;System.Data.DataSet&quot;> </xref> att infoga i schemat."
    - id: schemaType
      type: System.Data.SchemaType
      description: "En av de <xref href=&quot;System.Data.SchemaType&quot;> </xref> värden som anger hur du infogar schemat."
    return:
      type: System.Data.DataTable[]
      description: "En referens till en samling <xref href=&quot;System.Data.DataTable&quot;> </xref> objekt som har lagts till i <xref href=&quot;System.Data.DataSet&quot;> </xref>."
  overload: System.Data.Common.DbDataAdapter.FillSchema*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.FillSchema(System.Data.DataTable,System.Data.SchemaType)
  id: FillSchema(System.Data.DataTable,System.Data.SchemaType)
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: FillSchema(DataTable,SchemaType)
  nameWithType: DbDataAdapter.FillSchema(DataTable,SchemaType)
  fullName: System.Data.Common.DbDataAdapter.FillSchema(DataTable,SchemaType)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Konfigurerar schemat för den angivna <xref href=&quot;System.Data.DataTable&quot;> </xref> baserat på den angivna <xref href=&quot;System.Data.SchemaType&quot;> </xref>."
  remarks: "Metoden FillSchema hämtar schemat från datakällan med hjälp av <xref:System.Data.IDbDataAdapter.SelectCommand%2A>.</xref:System.Data.IDbDataAdapter.SelectCommand%2A> Anslutningsobjektet som är associerade med den <xref:System.Data.IDbDataAdapter.SelectCommand%2A>måste vara giltiga, men behöver inte vara öppen.</xref:System.Data.IDbDataAdapter.SelectCommand%2A> Om anslutningen är stängd innan FillSchema anropas är öppna för att hämta data, därefter stängd. Om anslutningen är öppen innan FillSchema anropas, förblir den öppen.       En FillSchema åtgärd returnerar ett <xref:System.Data.DataTable>.</xref:System.Data.DataTable> Lägger sedan till kolumner till den <xref:System.Data.DataColumnCollection>av den <xref:System.Data.DataTable>, och konfigurerar följande <xref:System.Data.DataColumn>Egenskaper om de finns på datakällan:- <xref:System.Data.DataColumn.AllowDBNull%2A>- <xref:System.Data.DataColumn.AutoIncrement%2A>.</xref:System.Data.DataColumn.AutoIncrement%2A> </xref:System.Data.DataColumn.AllowDBNull%2A> </xref:System.Data.DataColumn> </xref:System.Data.DataTable> </xref:System.Data.DataColumnCollection> Du måste ange <xref:System.Data.DataColumn.AutoIncrementStep%2A>och <xref:System.Data.DataColumn.AutoIncrementSeed%2A>separat.</xref:System.Data.DataColumn.AutoIncrementSeed%2A> </xref:System.Data.DataColumn.AutoIncrementStep%2A>      - <xref:System.Data.DataColumn.MaxLength%2A>- <xref:System.Data.DataColumn.ReadOnly%2A>- <xref:System.Data.DataColumn.Unique%2A>FillSchema konfigureras också på <xref:System.Data.DataTable.PrimaryKey%2A>och <xref:System.Data.DataTable.Constraints%2A>Egenskaper enligt följande regler: – om en <xref:System.Data.DataTable.PrimaryKey%2A>har redan definierats för den `DataTable`, eller `DataTable` innehåller data i `PrimaryKey` kommer inte att ange egenskapen.</xref:System.Data.DataTable.PrimaryKey%2A> </xref:System.Data.DataTable.Constraints%2A> </xref:System.Data.DataTable.PrimaryKey%2A> </xref:System.Data.DataColumn.Unique%2A> </xref:System.Data.DataColumn.ReadOnly%2A> </xref:System.Data.DataColumn.MaxLength%2A>      – Om en eller flera primärnyckelkolumnerna returneras av den <xref:System.Data.IDbDataAdapter.SelectCommand%2A>, de används som primärnyckelkolumnerna för den `DataTable`.</xref:System.Data.IDbDataAdapter.SelectCommand%2A>      -Om ingen primärnyckelkolumnerna returneras men unika kolumner, används unika kolumner som den primära nyckeln om, och om alla kolumner som unik är kan nollställas. Om någon av kolumnerna är null, en <xref:System.Data.UniqueConstraint>läggs till i <xref:System.Data.ConstraintCollection>, men `PrimaryKey` egenskapen har inte angetts.</xref:System.Data.ConstraintCollection> </xref:System.Data.UniqueConstraint>      – Om både primär nyckel och unika kolumner returneras primärnyckelkolumnerna används som primärnyckelkolumnerna för den `DataTable`.       Observera att primärnycklar och unika begränsningar läggs till i <xref:System.Data.ConstraintCollection>enligt föregående regler, men andra villkor läggs inte typer.</xref:System.Data.ConstraintCollection> Den här processen kan ta flera turer till servern.       Om ett unikt grupperat index har definierats för en kolumn eller kolumner i en tabell med SQL Server och primärnyckelns begränsning har definierats i en separat uppsättning kolumner, och sedan namnen på kolumnerna i det grupperade indexet kommer att returneras. Använda en frågetipset med SELECT-instruktion som anger namnet på det primära nyckelindexet för att returnera namnet eller namnen på de primära nyckelkolumnerna. Mer information om hur du anger frågetips finns [frågetipset (Transact-SQL)](http://msdn.microsoft.com/library/ms181714.aspx).       Om den <xref:System.Data.Common.DbDataAdapter>möten duplicerade kolumner medan en <xref:System.Data.DataTable>, det genererar namn för efterföljande kolumner, hur du använder mönstret &quot;*columnname*1&quot;, &quot;*columnname*2&quot;,&quot;*columnname*3&quot;, och så vidare.</xref:System.Data.DataTable> </xref:System.Data.Common.DbDataAdapter> Om inkommande data innehåller icke namngivna kolumner, placeras de i den <xref:System.Data.DataSet>enligt mönstret &quot;Kolumn1&quot;, &quot;Kolumn2&quot; och så vidare.</xref:System.Data.DataSet> När flera resultatmängder läggs till i <xref:System.Data.DataSet>varje resultatmängd är placerad i separata tabeller.</xref:System.Data.DataSet> Ytterligare resultatmängder är namngivna genom att integrerad värden till angivna tabellnamnet (till exempel &quot;Table&quot;, &quot;Tabell1&quot;, &quot;Tabell2&quot; och så vidare.). Program med kolumnnamn och tabellnamn bör se till att inte uppstår står i konflikt med dessa namngivning mönster.       FillSchema returnerar inte några rader. Använd <xref:System.Data.Common.DbDataAdapter.Fill%2A>metoden för att lägga till rader till <xref:System.Data.DataTable>.</xref:System.Data.DataTable> </xref:System.Data.Common.DbDataAdapter.Fill%2A>      > [!NOTE] > När hantering batch SQL-uttryck som kan returnera flera resultat, implementering av FillSchema för .NET Framework Data Provider för OLE DB hämtar schemainformation för endast det första resultatet. Använd för att hämta schemainformation för flera resultat, <xref:System.Data.Common.DbDataAdapter.Fill%2A>med den <xref:System.Data.MissingSchemaAction>inställd på `AddWithKey`.</xref:System.Data.MissingSchemaAction> </xref:System.Data.Common.DbDataAdapter.Fill%2A>       När du använder FillSchema, till en FOR BROWSE-satsen instruktionen som körs för .NET Framework Data Provider för SQL Server. Användaren bör vara medveten om eventuella sidoeffekter, som störningar med hjälp av ange FMTONLY för instruktioner. Se SQL Server Books Online för mer information."
  example:
  - "The following example uses the derived class, <xref:System.Data.SqlClient.SqlDataAdapter>, to fill a <xref:System.Data.DataSet> with the schema, and returns a <xref:System.Data.DataTable>.  \n  \n [!code-vb[Classic WebData DbDataAdapter.FillSchema3#1](~/add/codesnippet/visualbasic/658ac10a-3a87-4693-8b37-_1.vb)]\n [!code-cs[Classic WebData DbDataAdapter.FillSchema3#1](~/add/codesnippet/csharp/658ac10a-3a87-4693-8b37-_1.cs)]"
  syntax:
    content: public System.Data.DataTable FillSchema (System.Data.DataTable dataTable, System.Data.SchemaType schemaType);
    parameters:
    - id: dataTable
      type: System.Data.DataTable
      description: "Den <xref href=&quot;System.Data.DataTable&quot;> </xref> fylls med schemat från datakällan."
    - id: schemaType
      type: System.Data.SchemaType
      description: "En av de <xref href=&quot;System.Data.SchemaType&quot;> </xref> värden."
    return:
      type: System.Data.DataTable
      description: "En <xref href=&quot;System.Data.DataTable&quot;> </xref> som innehåller schemainformation returneras från datakällan."
  overload: System.Data.Common.DbDataAdapter.FillSchema*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType,System.String)
  id: FillSchema(System.Data.DataSet,System.Data.SchemaType,System.String)
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: FillSchema(DataSet,SchemaType,String)
  nameWithType: DbDataAdapter.FillSchema(DataSet,SchemaType,String)
  fullName: System.Data.Common.DbDataAdapter.FillSchema(DataSet,SchemaType,String)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Lägger till en <xref href=&quot;System.Data.DataTable&quot;> </xref> till den angivna <xref href=&quot;System.Data.DataSet&quot;> </xref> och konfigurerar schemat så att den matchar som datakällan baserat på den angivna <xref href=&quot;System.Data.SchemaType&quot;> </xref> och <xref href=&quot;System.Data.DataTable&quot;> </xref>."
  remarks: "Den här metoden hämtar schemainformationen från datakällan med hjälp av <xref:System.Data.IDbDataAdapter.SelectCommand%2A>.</xref:System.Data.IDbDataAdapter.SelectCommand%2A>       En <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>åtgärd som lägger till en <xref:System.Data.DataTable>till målet <xref:System.Data.DataSet>.</xref:System.Data.DataSet> </xref:System.Data.DataTable> </xref:System.Data.Common.DbDataAdapter.FillSchema%2A> Lägger sedan till kolumner till den <xref:System.Data.DataColumnCollection>av den <xref:System.Data.DataTable>, och konfigurerar följande <xref:System.Data.DataColumn>Egenskaper om de finns på datakällan:- <xref:System.Data.DataColumn.AllowDBNull%2A>- <xref:System.Data.DataColumn.AutoIncrement%2A>.</xref:System.Data.DataColumn.AutoIncrement%2A> </xref:System.Data.DataColumn.AllowDBNull%2A> </xref:System.Data.DataColumn> </xref:System.Data.DataTable> </xref:System.Data.DataColumnCollection> Du måste ange <xref:System.Data.DataColumn.AutoIncrementStep%2A>och <xref:System.Data.DataColumn.AutoIncrementSeed%2A>separat.</xref:System.Data.DataColumn.AutoIncrementSeed%2A> </xref:System.Data.DataColumn.AutoIncrementStep%2A>      - <xref:System.Data.DataColumn.MaxLength%2A>- <xref:System.Data.DataColumn.ReadOnly%2A>- <xref:System.Data.DataColumn.Unique%2A><xref:System.Data.Common.DbDataAdapter.FillSchema%2A>konfigureras också på <xref:System.Data.DataTable.PrimaryKey%2A>och <xref:System.Data.DataTable.Constraints%2A>Egenskaper enligt följande regler: – om en eller flera primärnyckelkolumnerna returneras av <xref:System.Data.IDbDataAdapter.SelectCommand%2A>de används som primärnyckelkolumnerna för <xref:System.Data.DataTable>.</xref:System.Data.DataTable> </xref:System.Data.IDbDataAdapter.SelectCommand%2A> </xref:System.Data.DataTable.Constraints%2A> </xref:System.Data.DataTable.PrimaryKey%2A> </xref:System.Data.Common.DbDataAdapter.FillSchema%2A>       </xref:System.Data.DataColumn.Unique%2A> </xref:System.Data.DataColumn.ReadOnly%2A> </xref:System.Data.DataColumn.MaxLength%2A>      -Om ingen primärnyckelkolumnerna returneras men unika kolumner, används unika kolumner som den primära nyckeln om, och om alla kolumner som unik är kan nollställas. Om någon av kolumnerna är null, en <xref:System.Data.UniqueConstraint>läggs till i <xref:System.Data.ConstraintCollection>, men <xref:System.Data.DataTable.PrimaryKey%2A>egenskapen har inte angetts.</xref:System.Data.DataTable.PrimaryKey%2A> </xref:System.Data.ConstraintCollection> </xref:System.Data.UniqueConstraint>      – Om både primär nyckel och unika kolumner returneras används primärnyckelkolumnerna som primärnyckelkolumnerna för <xref:System.Data.DataTable>.</xref:System.Data.DataTable>       Observera att primärnycklar och unika begränsningar läggs till i <xref:System.Data.ConstraintCollection>enligt föregående regler, men andra villkor läggs inte typer.</xref:System.Data.ConstraintCollection>       Om ett unikt grupperat index har definierats för en kolumn eller kolumner i en tabell med SQL Server och primärnyckelns begränsning har definierats i en separat uppsättning kolumner, och sedan namnen på kolumnerna i det grupperade indexet kommer att returneras. Använda en frågetipset med SELECT-instruktion som anger namnet på det primära nyckelindexet för att returnera namnet eller namnen på de primära nyckelkolumnerna. Mer information om hur du anger frågetips finns [frågetipset (Transact-SQL)](http://msdn.microsoft.com/library/ms181714.aspx).       Primära nyckelinformationen används under <xref:System.Data.Common.DbDataAdapter.Fill%2A>söka efter och ersätta alla rader vars kolumner matchar.</xref:System.Data.Common.DbDataAdapter.Fill%2A> Om detta inte är beteenden som önskas, använda <xref:System.Data.Common.DbDataAdapter.Fill%2A>utan att begära schemainformation.</xref:System.Data.Common.DbDataAdapter.Fill%2A>       Om den <xref:System.Data.Common.DbDataAdapter>möten duplicerade kolumner medan en <xref:System.Data.DataTable>, det genererar namn för efterföljande kolumner, hur du använder mönstret &quot;*columnname*1&quot;, &quot;*columnname*2&quot;,&quot;*columnname*3&quot;, och så vidare.</xref:System.Data.DataTable> </xref:System.Data.Common.DbDataAdapter> Om inkommande data innehåller icke namngivna kolumner, placeras de i den <xref:System.Data.DataSet>enligt mönstret &quot;Kolumn1&quot;, &quot;Kolumn2&quot; och så vidare.</xref:System.Data.DataSet> När flera resultatmängder läggs till i <xref:System.Data.DataSet>varje resultatmängd är placerad i separata tabeller.</xref:System.Data.DataSet> Ytterligare resultatmängder är namngivna genom att integrerad värden till angivna tabellnamnet (till exempel &quot;Table&quot;, &quot;Tabell1&quot;, &quot;Tabell2&quot; och så vidare.). Program med kolumnnamn och tabellnamn bör se till att inte uppstår står i konflikt med dessa namngivning mönster.       Den <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>metoden stöder scenarier där det <xref:System.Data.DataSet>innehåller flera <xref:System.Data.DataTable>objekt vars namn endast skiljer ärende.</xref:System.Data.DataTable> </xref:System.Data.DataSet> </xref:System.Data.Common.DbDataAdapter.FillSchema%2A> I sådana situationer <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>utför gemener för att hitta motsvarande register och skapar en ny tabell om det finns ingen exakt matchning.</xref:System.Data.Common.DbDataAdapter.FillSchema%2A> Följande C#-kod visar det här beteendet.      ```   DataSet dataset = new DataSet();   dataset.Tables.Add(&quot;aaa&quot;);   dataset.Tables.Add(&quot;AAA&quot;);   adapter.FillSchema(dataset, &quot;aaa&quot;); // Fills the schema of &quot;aaa&quot;, which already exists in the DataSet.   adapter.FillSchema(dataset, &quot;Aaa&quot;); // Adds a new table called &quot;Aaa&quot;.   ```Om <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>kallas och <xref:System.Data.DataSet>bara innehåller en <xref:System.Data.DataTable>vars namn skiljer sig bara av fallet som <xref:System.Data.DataTable>uppdateras.</xref:System.Data.DataTable> </xref:System.Data.DataTable> </xref:System.Data.DataSet> </xref:System.Data.Common.DbDataAdapter.FillSchema%2A> I det här scenariot är jämförelse inte skiftlägeskänsligt. Följande C#-kod visar det här beteendet.      ```   DataSet dataset = new DataSet();   dataset.Tables.Add(&quot;aaa&quot;);   adapter.FillSchema(dataset, &quot;AAA&quot;); // Fills the schema of table &quot;aaa&quot; because only one similarly named table is in the DataSet.   ```Den <xref:System.Data.IDbConnection>som är associerat med kommandot select måste vara giltig, men behöver inte öppna.</xref:System.Data.IDbConnection> Om den <xref:System.Data.IDbConnection>är stängd innan <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>är anropas är öppna för att hämta data, därefter stängd.</xref:System.Data.Common.DbDataAdapter.FillSchema%2A> </xref:System.Data.IDbConnection> Om anslutningen är öppen innan <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>är anropas lämnas den öppen.</xref:System.Data.Common.DbDataAdapter.FillSchema%2A>      > [!NOTE] > Vid hantering av batch SQL-uttryck som kan returnera flera resultat, implementering av <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>för .NET Framework Data Provider för OLE DB hämtar schemainformation för endast det första resultatet.</xref:System.Data.Common.DbDataAdapter.FillSchema%2A> Använd för att hämta schemainformation för flera resultat, <xref:System.Data.Common.DbDataAdapter.Fill%2A>med den <xref:System.Data.MissingSchemaAction>inställd på `AddWithKey`.</xref:System.Data.MissingSchemaAction> </xref:System.Data.Common.DbDataAdapter.Fill%2A>       När du använder <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>, .NET Framework Data Provider för SQL Server lägger till en FOR BROWSE-satsen i instruktionen som körs.</xref:System.Data.Common.DbDataAdapter.FillSchema%2A> Användaren bör vara medveten om eventuella sidoeffekter, som störningar med hjälp av ange FMTONLY för instruktioner. Se SQL Server Books Online för mer information."
  example:
  - "The following example uses the derived class, <xref:System.Data.SqlClient.SqlDataAdapter>, to fill a <xref:System.Data.DataSet> with the schema, and returns a <xref:System.Data.DataSet>.  \n  \n [!code-vb[Classic WebData DbDataAdapter.FillSchema2 Example#1](~/add/codesnippet/visualbasic/c7e2b899-0a44-4d9d-9e8d-_1.vb)]\n [!code-cs[Classic WebData DbDataAdapter.FillSchema2 Example#1](~/add/codesnippet/csharp/c7e2b899-0a44-4d9d-9e8d-_1.cs)]"
  syntax:
    content: public System.Data.DataTable[] FillSchema (System.Data.DataSet dataSet, System.Data.SchemaType schemaType, string srcTable);
    parameters:
    - id: dataSet
      type: System.Data.DataSet
      description: "En <xref href=&quot;System.Data.DataSet&quot;> </xref> att infoga i schemat."
    - id: schemaType
      type: System.Data.SchemaType
      description: "En av de <xref href=&quot;System.Data.SchemaType&quot;> </xref> värden som anger hur du infogar schemat."
    - id: srcTable
      type: System.String
      description: "Namnet på källtabellen ska användas för mappning av tabellen."
    return:
      type: System.Data.DataTable[]
      description: "En referens till en samling <xref href=&quot;System.Data.DataTable&quot;> </xref> objekt som har lagts till i <xref href=&quot;System.Data.DataSet&quot;> </xref>."
  overload: System.Data.Common.DbDataAdapter.FillSchema*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Det gick inte att hitta en källtabellen från vilken get för schemat."
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.FillSchema(System.Data.DataTable,System.Data.SchemaType,System.Data.IDbCommand,System.Data.CommandBehavior)
  id: FillSchema(System.Data.DataTable,System.Data.SchemaType,System.Data.IDbCommand,System.Data.CommandBehavior)
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: FillSchema(DataTable,SchemaType,IDbCommand,CommandBehavior)
  nameWithType: DbDataAdapter.FillSchema(DataTable,SchemaType,IDbCommand,CommandBehavior)
  fullName: System.Data.Common.DbDataAdapter.FillSchema(DataTable,SchemaType,IDbCommand,CommandBehavior)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Konfigurerar schemat för den angivna <xref href=&quot;System.Data.DataTable&quot;> </xref> baserat på den angivna <xref href=&quot;System.Data.SchemaType&quot;> </xref>, kommandosträng, och <xref href=&quot;System.Data.CommandBehavior&quot;> </xref> värden."
  remarks: "<xref:System.Data.Common.DbDataAdapter.FillSchema%2A>Metoden hämtar schemat från datakällan med hjälp av <xref:System.Data.IDbDataAdapter.SelectCommand%2A>.</xref:System.Data.IDbDataAdapter.SelectCommand%2A> </xref:System.Data.Common.DbDataAdapter.FillSchema%2A> Anslutningsobjektet som är associerade med den <xref:System.Data.IDbDataAdapter.SelectCommand%2A>måste vara giltiga, men behöver inte vara öppen.</xref:System.Data.IDbDataAdapter.SelectCommand%2A> Om anslutningen är stängd innan <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>är anropas är öppna för att hämta data, därefter stängd.</xref:System.Data.Common.DbDataAdapter.FillSchema%2A> Om anslutningen är öppen innan <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>är kallas, det är öppet.</xref:System.Data.Common.DbDataAdapter.FillSchema%2A>       En <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>åtgärd som lägger till en <xref:System.Data.DataTable>till målet <xref:System.Data.DataSet>.</xref:System.Data.DataSet> </xref:System.Data.DataTable> </xref:System.Data.Common.DbDataAdapter.FillSchema%2A> Lägger sedan till kolumner till den <xref:System.Data.DataColumnCollection>av den <xref:System.Data.DataTable>, och konfigurerar följande <xref:System.Data.DataColumn>Egenskaper om de finns på datakällan:- <xref:System.Data.DataColumn.AllowDBNull%2A>- <xref:System.Data.DataColumn.AutoIncrement%2A>.</xref:System.Data.DataColumn.AutoIncrement%2A> </xref:System.Data.DataColumn.AllowDBNull%2A> </xref:System.Data.DataColumn> </xref:System.Data.DataTable> </xref:System.Data.DataColumnCollection> Du måste ange <xref:System.Data.DataColumn.AutoIncrementStep%2A>och <xref:System.Data.DataColumn.AutoIncrementSeed%2A>separat.</xref:System.Data.DataColumn.AutoIncrementSeed%2A> </xref:System.Data.DataColumn.AutoIncrementStep%2A>      - <xref:System.Data.DataColumn.MaxLength%2A>- <xref:System.Data.DataColumn.ReadOnly%2A>- <xref:System.Data.DataColumn.Unique%2A><xref:System.Data.Common.DbDataAdapter.FillSchema%2A>konfigureras också på <xref:System.Data.DataTable.PrimaryKey%2A>och <xref:System.Data.DataTable.Constraints%2A>Egenskaper enligt följande regler: – om en eller flera primärnyckelkolumnerna returneras av <xref:System.Data.IDbDataAdapter.SelectCommand%2A>de används som primärnyckelkolumnerna för <xref:System.Data.DataTable>.</xref:System.Data.DataTable> </xref:System.Data.IDbDataAdapter.SelectCommand%2A> </xref:System.Data.DataTable.Constraints%2A> </xref:System.Data.DataTable.PrimaryKey%2A> </xref:System.Data.Common.DbDataAdapter.FillSchema%2A>       </xref:System.Data.DataColumn.Unique%2A> </xref:System.Data.DataColumn.ReadOnly%2A> </xref:System.Data.DataColumn.MaxLength%2A>      -Om ingen primärnyckelkolumnerna returneras men unika kolumner, används unika kolumner som den primära nyckeln om, och om alla kolumner som unik är kan nollställas. Om någon av kolumnerna är null, en <xref:System.Data.UniqueConstraint>läggs till i <xref:System.Data.ConstraintCollection>, men <xref:System.Data.DataTable.PrimaryKey%2A>egenskapen har inte angetts.</xref:System.Data.DataTable.PrimaryKey%2A> </xref:System.Data.ConstraintCollection> </xref:System.Data.UniqueConstraint>      – Om både primär nyckel och unika kolumner returneras används primärnyckelkolumnerna som primärnyckelkolumnerna för <xref:System.Data.DataTable>.</xref:System.Data.DataTable>       Observera att primärnycklar och unika begränsningar läggs till i <xref:System.Data.ConstraintCollection>enligt föregående regler, men andra villkor läggs inte typer.</xref:System.Data.ConstraintCollection>       Om ett unikt grupperat index har definierats för en kolumn eller kolumner i en tabell med SQL Server och primärnyckelns begränsning har definierats i en separat uppsättning kolumner, och sedan namnen på kolumnerna i det grupperade indexet kommer att returneras. Använda en frågetipset med SELECT-instruktion som anger namnet på det primära nyckelindexet för att returnera namnet eller namnen på de primära nyckelkolumnerna. Mer information om hur du anger frågetips finns [frågetipset (Transact-SQL)](http://msdn.microsoft.com/library/ms181714.aspx).       Om den <xref:System.Data.IDataAdapter>möten duplicerade kolumner medan en <xref:System.Data.DataTable>, det genererar namn för efterföljande kolumner, hur du använder mönstret &quot;*columnname*1&quot;, &quot;*columnname*2&quot;,&quot;*columnname*3&quot;, och så vidare.</xref:System.Data.DataTable> </xref:System.Data.IDataAdapter> Om inkommande data innehåller icke namngivna kolumner, placeras de i den <xref:System.Data.DataSet>enligt mönstret &quot;Kolumn1&quot;, &quot;Kolumn2&quot; och så vidare.</xref:System.Data.DataSet> När flera resultatmängder läggs till i <xref:System.Data.DataSet>varje resultatmängd är placerad i separata tabeller.</xref:System.Data.DataSet> Ytterligare resultatmängder är namngivna genom att integrerad värden till angivna tabellnamnet (till exempel &quot;Table&quot;, &quot;Tabell1&quot;, &quot;Tabell2&quot; och så vidare.). Program med kolumnnamn och tabellnamn bör se till att inte uppstår står i konflikt med dessa namngivning mönster.       <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>Returnerar inte några rader.</xref:System.Data.Common.DbDataAdapter.FillSchema%2A> Använd <xref:System.Data.Common.DbDataAdapter.Fill%2A>metoden för att lägga till rader till <xref:System.Data.DataTable>.</xref:System.Data.DataTable> </xref:System.Data.Common.DbDataAdapter.Fill%2A>      > [!NOTE] > Vid hantering av batch SQL-uttryck som kan returnera flera resultat, implementering av <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>för .NET Framework Data Provider för OLE DB hämtar schemainformation för endast det första resultatet.</xref:System.Data.Common.DbDataAdapter.FillSchema%2A> Använd för att hämta schemainformation för flera resultat, <xref:System.Data.Common.DbDataAdapter.Fill%2A>med den <xref:System.Data.MissingSchemaAction>inställd på `AddWithKey`.</xref:System.Data.MissingSchemaAction> </xref:System.Data.Common.DbDataAdapter.Fill%2A>       När du använder <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>, .NET Framework Data Provider för SQL Server lägger till en FOR BROWSE-satsen i instruktionen som körs.</xref:System.Data.Common.DbDataAdapter.FillSchema%2A> Användaren bör vara medveten om eventuella sidoeffekter, som störningar med hjälp av ange FMTONLY för instruktioner. Se SQL Server Books Online för mer information."
  syntax:
    content: protected virtual System.Data.DataTable FillSchema (System.Data.DataTable dataTable, System.Data.SchemaType schemaType, System.Data.IDbCommand command, System.Data.CommandBehavior behavior);
    parameters:
    - id: dataTable
      type: System.Data.DataTable
      description: "Den <xref href=&quot;System.Data.DataTable&quot;> </xref> fylls med schemat från datakällan."
    - id: schemaType
      type: System.Data.SchemaType
      description: "En av de <xref href=&quot;System.Data.SchemaType&quot;> </xref> värden."
    - id: command
      type: System.Data.IDbCommand
      description: "SQL SELECT-uttrycket används för att hämta rader från datakällan."
    - id: behavior
      type: System.Data.CommandBehavior
      description: "En av de <xref href=&quot;System.Data.CommandBehavior&quot;> </xref> värden."
    return:
      type: System.Data.DataTable
      description: "En av <xref href=&quot;System.Data.DataTable&quot;> </xref> objekt som innehåller schemainformation returneras från datakällan."
  overload: System.Data.Common.DbDataAdapter.FillSchema*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType,System.Data.IDbCommand,System.String,System.Data.CommandBehavior)
  id: FillSchema(System.Data.DataSet,System.Data.SchemaType,System.Data.IDbCommand,System.String,System.Data.CommandBehavior)
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: FillSchema(DataSet,SchemaType,IDbCommand,String,CommandBehavior)
  nameWithType: DbDataAdapter.FillSchema(DataSet,SchemaType,IDbCommand,String,CommandBehavior)
  fullName: System.Data.Common.DbDataAdapter.FillSchema(DataSet,SchemaType,IDbCommand,String,CommandBehavior)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Lägger till en <xref href=&quot;System.Data.DataTable&quot;> </xref> till den angivna <xref href=&quot;System.Data.DataSet&quot;> </xref> och konfigurerar schemat så att den matchar som datakällan baserat på den angivna <xref href=&quot;System.Data.SchemaType&quot;> </xref>."
  remarks: "<xref:System.Data.Common.DbDataAdapter.FillSchema%2A>Metoden hämtar schemat från datakällan med hjälp av <xref:System.Data.IDbDataAdapter.SelectCommand%2A>.</xref:System.Data.IDbDataAdapter.SelectCommand%2A> </xref:System.Data.Common.DbDataAdapter.FillSchema%2A> Anslutningsobjektet som är associerade med den <xref:System.Data.IDbDataAdapter.SelectCommand%2A>måste vara giltiga, men behöver inte vara öppen.</xref:System.Data.IDbDataAdapter.SelectCommand%2A> Om anslutningen är stängd innan <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>är anropas är öppna för att hämta data, därefter stängd.</xref:System.Data.Common.DbDataAdapter.FillSchema%2A> Om anslutningen är öppen innan <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>är kallas, det är öppet.</xref:System.Data.Common.DbDataAdapter.FillSchema%2A>       En <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>åtgärd som lägger till en <xref:System.Data.DataTable>till målet <xref:System.Data.DataSet>.</xref:System.Data.DataSet> </xref:System.Data.DataTable> </xref:System.Data.Common.DbDataAdapter.FillSchema%2A> Lägger sedan till kolumner till den <xref:System.Data.DataColumnCollection>av den <xref:System.Data.DataTable>, och konfigurerar följande <xref:System.Data.DataColumn>Egenskaper om de finns på datakällan:- <xref:System.Data.DataColumn.AllowDBNull%2A>- <xref:System.Data.DataColumn.AutoIncrement%2A>.</xref:System.Data.DataColumn.AutoIncrement%2A> </xref:System.Data.DataColumn.AllowDBNull%2A> </xref:System.Data.DataColumn> </xref:System.Data.DataTable> </xref:System.Data.DataColumnCollection> Du måste ange <xref:System.Data.DataColumn.AutoIncrementStep%2A>och <xref:System.Data.DataColumn.AutoIncrementSeed%2A>separat.</xref:System.Data.DataColumn.AutoIncrementSeed%2A> </xref:System.Data.DataColumn.AutoIncrementStep%2A>      - <xref:System.Data.DataColumn.MaxLength%2A>- <xref:System.Data.DataColumn.ReadOnly%2A>- <xref:System.Data.DataColumn.Unique%2A><xref:System.Data.Common.DbDataAdapter.FillSchema%2A>konfigureras också på <xref:System.Data.DataTable.PrimaryKey%2A>och <xref:System.Data.DataTable.Constraints%2A>Egenskaper enligt följande regler: – om en eller flera primärnyckelkolumnerna returneras av <xref:System.Data.IDbDataAdapter.SelectCommand%2A>de används som primärnyckelkolumnerna för <xref:System.Data.DataTable>.</xref:System.Data.DataTable> </xref:System.Data.IDbDataAdapter.SelectCommand%2A> </xref:System.Data.DataTable.Constraints%2A> </xref:System.Data.DataTable.PrimaryKey%2A> </xref:System.Data.Common.DbDataAdapter.FillSchema%2A>       </xref:System.Data.DataColumn.Unique%2A> </xref:System.Data.DataColumn.ReadOnly%2A> </xref:System.Data.DataColumn.MaxLength%2A>      -Om ingen primärnyckelkolumnerna returneras men unika kolumner, används unika kolumner som den primära nyckeln om, och om alla kolumner som unik är kan nollställas. Om någon av kolumnerna är null, en <xref:System.Data.UniqueConstraint>läggs till i <xref:System.Data.ConstraintCollection>, men <xref:System.Data.DataTable.PrimaryKey%2A>egenskapen har inte angetts.</xref:System.Data.DataTable.PrimaryKey%2A> </xref:System.Data.ConstraintCollection> </xref:System.Data.UniqueConstraint>      – Om både primär nyckel och unika kolumner returneras används primärnyckelkolumnerna som primärnyckelkolumnerna för <xref:System.Data.DataTable>.</xref:System.Data.DataTable>       Observera att primärnycklar och unika begränsningar läggs till i <xref:System.Data.ConstraintCollection>enligt föregående regler, men andra villkor läggs inte typer.</xref:System.Data.ConstraintCollection>       Om ett unikt grupperat index har definierats för en kolumn eller kolumner i en tabell med SQL Server och primärnyckelns begränsning har definierats i en separat uppsättning kolumner, och sedan namnen på kolumnerna i det grupperade indexet kommer att returneras. Använda en frågetipset med SELECT-instruktion som anger namnet på det primära nyckelindexet för att returnera namnet eller namnen på de primära nyckelkolumnerna. Mer information om hur du anger frågetips finns [frågetipset (Transact-SQL)](http://msdn.microsoft.com/library/ms181714.aspx).       Om den <xref:System.Data.IDataAdapter>möten duplicerade kolumner medan en <xref:System.Data.DataTable>, det genererar namn för efterföljande kolumner, hur du använder mönstret &quot;*columnname*1&quot;, &quot;*columnname*2&quot;,&quot;*columnname*3&quot;, och så vidare.</xref:System.Data.DataTable> </xref:System.Data.IDataAdapter> Om inkommande data innehåller icke namngivna kolumner, placeras de i den <xref:System.Data.DataSet>enligt mönstret &quot;Kolumn1&quot;, &quot;Kolumn2&quot; och så vidare.</xref:System.Data.DataSet> När flera resultatmängder läggs till i <xref:System.Data.DataSet>varje resultatmängd är placerad i separata tabeller.</xref:System.Data.DataSet> Ytterligare resultatmängder är namngivna genom att integrerad värden till angivna tabellnamnet (till exempel &quot;Table&quot;, &quot;Tabell1&quot;, &quot;Tabell2&quot; och så vidare.). Program med kolumnnamn och tabellnamn bör se till att inte uppstår står i konflikt med dessa namngivning mönster.       Den <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>metoden stöder scenarier där det <xref:System.Data.DataSet>innehåller flera <xref:System.Data.DataTable>objekt vars namn endast skiljer ärende.</xref:System.Data.DataTable> </xref:System.Data.DataSet> </xref:System.Data.Common.DbDataAdapter.FillSchema%2A> I sådana situationer <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>utför gemener för att hitta motsvarande register och skapar en ny tabell om det finns ingen exakt matchning.</xref:System.Data.Common.DbDataAdapter.FillSchema%2A> Följande C#-kod visar det här beteendet.      ```   DataSet dataset = new DataSet();   dataset.Tables.Add(&quot;aaa&quot;);   dataset.Tables.Add(&quot;AAA&quot;);   adapter.FillSchema(dataset, &quot;aaa&quot;); // Fills the schema of &quot;aaa&quot;, which already exists in the DataSet.   adapter.FillSchema(dataset, &quot;Aaa&quot;); // Adds a new table called &quot;Aaa&quot;.   ```Om <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>kallas och <xref:System.Data.DataSet>bara innehåller en <xref:System.Data.DataTable>vars namn skiljer sig bara av fallet som <xref:System.Data.DataTable>uppdateras.</xref:System.Data.DataTable> </xref:System.Data.DataTable> </xref:System.Data.DataSet> </xref:System.Data.Common.DbDataAdapter.FillSchema%2A> I det här scenariot är jämförelse inte skiftlägeskänsligt. Följande C#-kod visar det här beteendet.      ```   DataSet dataset = new DataSet();   dataset.Tables.Add(&quot;aaa&quot;);   adapter.FillSchema(dataset, &quot;AAA&quot;); // Fills the schema of table &quot;aaa&quot; because only one similarly named table is in the DataSet.   ```       <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>Returnerar inte några rader.</xref:System.Data.Common.DbDataAdapter.FillSchema%2A> Använd <xref:System.Data.Common.DbDataAdapter.Fill%2A>metoden för att lägga till rader till <xref:System.Data.DataTable>.</xref:System.Data.DataTable> </xref:System.Data.Common.DbDataAdapter.Fill%2A>      > [!NOTE] > Vid hantering av batch SQL-uttryck som kan returnera flera resultat, implementering av <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>för .NET Framework Data Provider för OLE DB hämtar schemainformation för endast det första resultatet.</xref:System.Data.Common.DbDataAdapter.FillSchema%2A> Använd för att hämta schemainformation för flera resultat, <xref:System.Data.Common.DbDataAdapter.Fill%2A>med den <xref:System.Data.MissingSchemaAction>inställd på `AddWithKey`.</xref:System.Data.MissingSchemaAction> </xref:System.Data.Common.DbDataAdapter.Fill%2A>       När du använder <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>, .NET Framework Data Provider för SQL Server lägger till en FOR BROWSE-satsen i instruktionen som körs.</xref:System.Data.Common.DbDataAdapter.FillSchema%2A> Användaren bör vara medveten om eventuella sidoeffekter, som störningar med hjälp av ange FMTONLY för instruktioner. Se SQL Server Books Online för mer information."
  syntax:
    content: protected virtual System.Data.DataTable[] FillSchema (System.Data.DataSet dataSet, System.Data.SchemaType schemaType, System.Data.IDbCommand command, string srcTable, System.Data.CommandBehavior behavior);
    parameters:
    - id: dataSet
      type: System.Data.DataSet
      description: "Den <xref href=&quot;System.Data.DataSet&quot;> </xref> fylls med schemat från datakällan."
    - id: schemaType
      type: System.Data.SchemaType
      description: "En av de <xref href=&quot;System.Data.SchemaType&quot;> </xref> värden."
    - id: command
      type: System.Data.IDbCommand
      description: "SQL SELECT-uttrycket används för att hämta rader från datakällan."
    - id: srcTable
      type: System.String
      description: "Namnet på källtabellen ska användas för mappning av tabellen."
    - id: behavior
      type: System.Data.CommandBehavior
      description: "En av de <xref href=&quot;System.Data.CommandBehavior&quot;> </xref> värden."
    return:
      type: System.Data.DataTable[]
      description: "En matris med <xref href=&quot;System.Data.DataTable&quot;> </xref> objekt som innehåller schemainformation returneras från datakällan."
  overload: System.Data.Common.DbDataAdapter.FillSchema*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.GetBatchedParameter(System.Int32,System.Int32)
  id: GetBatchedParameter(System.Int32,System.Int32)
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: GetBatchedParameter(Int32,Int32)
  nameWithType: DbDataAdapter.GetBatchedParameter(Int32,Int32)
  fullName: System.Data.Common.DbDataAdapter.GetBatchedParameter(Int32,Int32)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Returnerar en <xref href=&quot;System.Data.IDataParameter&quot;> </xref> från något av kommandona i den aktuella batchen."
  remarks: "I <xref:System.Data.Common.DbDataAdapter>den här metoden genererar <xref:System.NotSupportedException>.</xref:System.NotSupportedException> </xref:System.Data.Common.DbDataAdapter> Klasser som ärver från <xref:System.Data.Common.DbDataAdapter>åsidosätta den här metoden för att ge stöd för batchar.</xref:System.Data.Common.DbDataAdapter>"
  syntax:
    content: protected virtual System.Data.IDataParameter GetBatchedParameter (int commandIdentifier, int parameterIndex);
    parameters:
    - id: commandIdentifier
      type: System.Int32
      description: "Index för kommandot för att hämta parametern från."
    - id: parameterIndex
      type: System.Int32
      description: "Index för parameter i kommandot."
    return:
      type: System.Data.IDataParameter
      description: "Den <xref href=&quot;System.Data.IDataParameter&quot;> </xref> angivna."
  overload: System.Data.Common.DbDataAdapter.GetBatchedParameter*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "Kortet stöder inte batchar."
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.GetBatchedRecordsAffected(System.Int32,System.Int32@,System.Exception@)
  id: GetBatchedRecordsAffected(System.Int32,System.Int32@,System.Exception@)
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: GetBatchedRecordsAffected(Int32,Int32,Exception)
  nameWithType: DbDataAdapter.GetBatchedRecordsAffected(Int32,Int32,Exception)
  fullName: System.Data.Common.DbDataAdapter.GetBatchedRecordsAffected(Int32,Int32,Exception)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Returnerar information om en enskild uppdatering Försök inom en större gruppbaserad uppdatering."
  remarks: "Dataleverantörer som stöder gruppbaserad uppdatering logik måste åsidosätta en serie virtuella metoder i <xref:System.Data.Common.DbDataAdapter>klassen.</xref:System.Data.Common.DbDataAdapter> `GetBatchedRecordsAffected`representerar en av de virtuella metoderna. Den `DbDataAdapter` klassen förlitar sig på `GetBatchedRecordsAffected` att fastställa lyckad eller misslyckad enskild uppdatering Försök inom en grupp så att den kan du markera varje motsvarande <xref:System.Data.DataRow>därefter.</xref:System.Data.DataRow>"
  syntax:
    content: protected virtual bool GetBatchedRecordsAffected (int commandIdentifier, out int recordsAffected, out Exception error);
    parameters:
    - id: commandIdentifier
      type: System.Int32
      description: "Nollbaserat kolumnordningstal enskilda kommandot i batchen."
    - id: recordsAffected
      type: System.Int32
      description: "Antal rader som påverkas i datalagret av det angivna kommandot i batchen."
    - id: error
      type: System.Exception
      description: "En <xref:System.Exception>uppstod under körning av det angivna kommandot.</xref:System.Exception> Returnerar <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> (<xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref> i Visual Basic) om inga undantagsfel utlöses."
    return:
      type: System.Boolean
      description: "Information om en enskild uppdatering Försök inom en större gruppbaserad uppdatering."
  overload: System.Data.Common.DbDataAdapter.GetBatchedRecordsAffected*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.GetFillParameters
  id: GetFillParameters
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: GetFillParameters()
  nameWithType: DbDataAdapter.GetFillParameters()
  fullName: System.Data.Common.DbDataAdapter.GetFillParameters()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Hämtar de parametrar som anges av användaren vid körning av en SQL SELECT-instruktion."
  syntax:
    content: public override System.Data.IDataParameter[] GetFillParameters ();
    parameters: []
    return:
      type: System.Data.IDataParameter[]
      description: "En matris med <xref href=&quot;System.Data.IDataParameter&quot;> </xref> objekt som innehåller parametrar som anges av användaren."
  overload: System.Data.Common.DbDataAdapter.GetFillParameters*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.InitializeBatching
  id: InitializeBatching
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: InitializeBatching()
  nameWithType: DbDataAdapter.InitializeBatching()
  fullName: System.Data.Common.DbDataAdapter.InitializeBatching()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Initierar batchbearbetning för den <xref href=&quot;System.Data.Common.DbDataAdapter&quot;> </xref>."
  remarks: "I <xref:System.Data.Common.DbDataAdapter>den här metoden genererar <xref:System.NotSupportedException>.</xref:System.NotSupportedException> </xref:System.Data.Common.DbDataAdapter> Klasser som ärver från <xref:System.Data.Common.DbDataAdapter>åsidosätta den här metoden för att ge stöd för batchar.</xref:System.Data.Common.DbDataAdapter>"
  syntax:
    content: protected virtual void InitializeBatching ();
    parameters: []
  overload: System.Data.Common.DbDataAdapter.InitializeBatching*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "Kortet stöder inte batchar."
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.InsertCommand
  id: InsertCommand
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: InsertCommand
  nameWithType: DbDataAdapter.InsertCommand
  fullName: System.Data.Common.DbDataAdapter.InsertCommand
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Hämtar eller anger ett kommando som används för att infoga nya poster i datakällan."
  remarks: "Under <xref:System.Data.Common.DbDataAdapter.Update%2A>, om den här egenskapen inte har angetts och primära nyckelinformationen finns i den <xref:System.Data.DataSet>, <xref:System.Data.IDbDataAdapter.InsertCommand%2A>ska skapas automatiskt.</xref:System.Data.IDbDataAdapter.InsertCommand%2A> </xref:System.Data.DataSet> </xref:System.Data.Common.DbDataAdapter.Update%2A>"
  example:
  - "The following example creates the derived class <xref:System.Data.OleDb.OleDbDataAdapter> and sets some of its properties.  \n  \n [!code-cs[Classic WebData DbDataAdapter.InsertCommand Example#1](~/add/codesnippet/csharp/p-system.data.common.dbd_0_1.cs)]\n [!code-vb[Classic WebData DbDataAdapter.InsertCommand Example#1](~/add/codesnippet/visualbasic/p-system.data.common.dbd_0_1.vb)]"
  syntax:
    content: public System.Data.Common.DbCommand InsertCommand { get; set; }
    return:
      type: System.Data.Common.DbCommand
      description: "En <xref href=&quot;System.Data.IDbCommand&quot;> </xref> används under <xref:System.Data.IDataAdapter.Update*>att infoga poster i datakällan för nya rader i datauppsättningen.</xref:System.Data.IDataAdapter.Update*>"
  overload: System.Data.Common.DbDataAdapter.InsertCommand*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.OnRowUpdated(System.Data.Common.RowUpdatedEventArgs)
  id: OnRowUpdated(System.Data.Common.RowUpdatedEventArgs)
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: OnRowUpdated(RowUpdatedEventArgs)
  nameWithType: DbDataAdapter.OnRowUpdated(RowUpdatedEventArgs)
  fullName: System.Data.Common.DbDataAdapter.OnRowUpdated(RowUpdatedEventArgs)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Genererar den <xref uid=&quot;langword_csharp_RowUpdated&quot; name=&quot;RowUpdated&quot; href=&quot;&quot;> </xref> händelsen för en .NET Framework-dataprovidern."
  remarks: 'Att en händelse utlöstes anropar händelsehanteraren via ett ombud. En översikt finns [NIB: att en händelse utlöstes](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).'
  syntax:
    content: protected virtual void OnRowUpdated (System.Data.Common.RowUpdatedEventArgs value);
    parameters:
    - id: value
      type: System.Data.Common.RowUpdatedEventArgs
      description: "En <xref href=&quot;System.Data.Common.RowUpdatedEventArgs&quot;> </xref> som innehåller informationen om händelsen."
  overload: System.Data.Common.DbDataAdapter.OnRowUpdated*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.OnRowUpdating(System.Data.Common.RowUpdatingEventArgs)
  id: OnRowUpdating(System.Data.Common.RowUpdatingEventArgs)
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: OnRowUpdating(RowUpdatingEventArgs)
  nameWithType: DbDataAdapter.OnRowUpdating(RowUpdatingEventArgs)
  fullName: System.Data.Common.DbDataAdapter.OnRowUpdating(RowUpdatingEventArgs)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Genererar den <xref uid=&quot;langword_csharp_RowUpdating&quot; name=&quot;RowUpdating&quot; href=&quot;&quot;> </xref> händelsen för en .NET Framework-dataprovidern."
  remarks: 'Att en händelse utlöstes anropar händelsehanteraren via ett ombud. En översikt finns [NIB: att en händelse utlöstes](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).'
  syntax:
    content: protected virtual void OnRowUpdating (System.Data.Common.RowUpdatingEventArgs value);
    parameters:
    - id: value
      type: System.Data.Common.RowUpdatingEventArgs
      description: "En <xref href=&quot;System.Data.Common.RowUpdatingEventArgs&quot;> </xref> som innehåller informationen om händelsen."
  overload: System.Data.Common.DbDataAdapter.OnRowUpdating*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.SelectCommand
  id: SelectCommand
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: SelectCommand
  nameWithType: DbDataAdapter.SelectCommand
  fullName: System.Data.Common.DbDataAdapter.SelectCommand
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Hämtar eller anger ett kommando som används för att välja poster i datakällan."
  remarks: ''
  example:
  - "The following example creates the derived class <xref:System.Data.OleDb.OleDbDataAdapter> and sets some of its properties.  \n  \n [!code-cs[Classic WebData DbDataAdapter.SelectCommand Example#1](~/add/codesnippet/csharp/p-system.data.common.dbd_1_1.cs)]\n [!code-vb[Classic WebData DbDataAdapter.SelectCommand Example#1](~/add/codesnippet/visualbasic/p-system.data.common.dbd_1_1.vb)]"
  syntax:
    content: public System.Data.Common.DbCommand SelectCommand { get; set; }
    return:
      type: System.Data.Common.DbCommand
      description: "En <xref href=&quot;System.Data.IDbCommand&quot;> </xref> som används under <xref:System.Data.IDataAdapter.Update*>att välja poster från datakällan för placering i datauppsättningen.</xref:System.Data.IDataAdapter.Update*>"
  overload: System.Data.Common.DbDataAdapter.SelectCommand*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.System#Data#IDbDataAdapter#DeleteCommand
  id: System#Data#IDbDataAdapter#DeleteCommand
  isEii: true
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: System.Data.IDbDataAdapter.DeleteCommand
  nameWithType: DbDataAdapter.System.Data.IDbDataAdapter.DeleteCommand
  fullName: System.Data.Common.DbDataAdapter.System.Data.IDbDataAdapter.DeleteCommand
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Hämtar eller anger en SQL-instruktion för borttagning av poster från datauppsättningen."
  remarks: "Den här medlemmen är en implementering för medlem av explicit gränssnitt. Det kan användas endast när den <xref:System.Data.Common.DbDataAdapter>instans omvandlas till ett <xref:System.Data.IDbDataAdapter>gränssnitt.</xref:System.Data.IDbDataAdapter> </xref:System.Data.Common.DbDataAdapter>       Mer information finns i <xref:System.Data.IDbDataAdapter.DeleteCommand%2A>.</xref:System.Data.IDbDataAdapter.DeleteCommand%2A>"
  syntax:
    content: System.Data.IDbCommand System.Data.IDbDataAdapter.DeleteCommand { get; set; }
    return:
      type: System.Data.IDbCommand
      description: "En <xref href=&quot;System.Data.IDbCommand&quot;> </xref> används under <xref:System.Data.Common.DbDataAdapter.Update*>att ta bort poster i datakällan för borttagna rader i datauppsättningen.</xref:System.Data.Common.DbDataAdapter.Update*>"
  overload: System.Data.Common.DbDataAdapter.System#Data#IDbDataAdapter#DeleteCommand*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.System#Data#IDbDataAdapter#InsertCommand
  id: System#Data#IDbDataAdapter#InsertCommand
  isEii: true
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: System.Data.IDbDataAdapter.InsertCommand
  nameWithType: DbDataAdapter.System.Data.IDbDataAdapter.InsertCommand
  fullName: System.Data.Common.DbDataAdapter.System.Data.IDbDataAdapter.InsertCommand
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Hämtar eller anger ett SQL-uttryck som används för att infoga nya poster i datakällan."
  remarks: "Den här medlemmen är en implementering för medlem av explicit gränssnitt. Det kan användas endast när den <xref:System.Data.Common.DbDataAdapter>instans omvandlas till ett <xref:System.Data.IDbDataAdapter>gränssnitt.</xref:System.Data.IDbDataAdapter> </xref:System.Data.Common.DbDataAdapter>       Mer information finns i <xref:System.Data.IDbDataAdapter.InsertCommand%2A>.</xref:System.Data.IDbDataAdapter.InsertCommand%2A>"
  syntax:
    content: System.Data.IDbCommand System.Data.IDbDataAdapter.InsertCommand { get; set; }
    return:
      type: System.Data.IDbCommand
      description: "En <xref href=&quot;System.Data.IDbCommand&quot;> </xref> används under <xref:System.Data.Common.DbDataAdapter.Update*>att infoga poster i datakällan för nya rader i datauppsättningen.</xref:System.Data.Common.DbDataAdapter.Update*>"
  overload: System.Data.Common.DbDataAdapter.System#Data#IDbDataAdapter#InsertCommand*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.System#Data#IDbDataAdapter#SelectCommand
  id: System#Data#IDbDataAdapter#SelectCommand
  isEii: true
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: System.Data.IDbDataAdapter.SelectCommand
  nameWithType: DbDataAdapter.System.Data.IDbDataAdapter.SelectCommand
  fullName: System.Data.Common.DbDataAdapter.System.Data.IDbDataAdapter.SelectCommand
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Hämtar eller anger ett SQL-uttryck som används för att välja poster i datakällan."
  remarks: "Den här medlemmen är en implementering för medlem av explicit gränssnitt. Det kan användas endast när den <xref:System.Data.Common.DbDataAdapter>instans omvandlas till ett <xref:System.Data.IDbDataAdapter>gränssnitt.</xref:System.Data.IDbDataAdapter> </xref:System.Data.Common.DbDataAdapter>       Mer information finns i <xref:System.Data.IDbDataAdapter.SelectCommand%2A>.</xref:System.Data.IDbDataAdapter.SelectCommand%2A>"
  syntax:
    content: System.Data.IDbCommand System.Data.IDbDataAdapter.SelectCommand { get; set; }
    return:
      type: System.Data.IDbCommand
      description: "En <xref href=&quot;System.Data.IDbCommand&quot;> </xref> som används under <xref:System.Data.Common.DbDataAdapter.Update*>att välja poster från datakällan för placering i datauppsättningen.</xref:System.Data.Common.DbDataAdapter.Update*>"
  overload: System.Data.Common.DbDataAdapter.System#Data#IDbDataAdapter#SelectCommand*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.System#Data#IDbDataAdapter#UpdateCommand
  id: System#Data#IDbDataAdapter#UpdateCommand
  isEii: true
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: System.Data.IDbDataAdapter.UpdateCommand
  nameWithType: DbDataAdapter.System.Data.IDbDataAdapter.UpdateCommand
  fullName: System.Data.Common.DbDataAdapter.System.Data.IDbDataAdapter.UpdateCommand
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Hämtar eller anger ett SQL-uttryck som används för att uppdatera poster i datakällan."
  remarks: "Den här medlemmen är en implementering för medlem av explicit gränssnitt. Det kan användas endast när den <xref:System.Data.Common.DbDataAdapter>instans omvandlas till ett <xref:System.Data.IDbDataAdapter>gränssnitt.</xref:System.Data.IDbDataAdapter> </xref:System.Data.Common.DbDataAdapter>       Mer information finns i <xref:System.Data.IDbDataAdapter.UpdateCommand%2A>.</xref:System.Data.IDbDataAdapter.UpdateCommand%2A>"
  syntax:
    content: System.Data.IDbCommand System.Data.IDbDataAdapter.UpdateCommand { get; set; }
    return:
      type: System.Data.IDbCommand
      description: "En <xref href=&quot;System.Data.IDbCommand&quot;> </xref> används under <xref:System.Data.Common.DbDataAdapter.Update*>att uppdatera poster i datakällan för modifierade rader i datauppsättningen.</xref:System.Data.Common.DbDataAdapter.Update*>"
  overload: System.Data.Common.DbDataAdapter.System#Data#IDbDataAdapter#UpdateCommand*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.System#ICloneable#Clone
  id: System#ICloneable#Clone
  isEii: true
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: System.ICloneable.Clone()
  nameWithType: DbDataAdapter.System.ICloneable.Clone()
  fullName: System.Data.Common.DbDataAdapter.System.ICloneable.Clone()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Skapar ett nytt objekt som är en kopia av den aktuella instansen."
  remarks: "Den här medlemmen är en implementering för medlem av explicit gränssnitt. Det kan användas endast när den <xref:System.Data.Common.DbDataAdapter>instans omvandlas till ett <xref:System.ICloneable>gränssnitt.</xref:System.ICloneable> </xref:System.Data.Common.DbDataAdapter>       Mer information finns i <xref:System.ICloneable.Clone%2A?displayProperty=fullName>.</xref:System.ICloneable.Clone%2A?displayProperty=fullName>"
  syntax:
    content: object ICloneable.Clone ();
    parameters: []
    return:
      type: System.Object
      description: "Ett nytt objekt som är en kopia av den här instansen."
  overload: System.Data.Common.DbDataAdapter.System#ICloneable#Clone*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.TerminateBatching
  id: TerminateBatching
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: TerminateBatching()
  nameWithType: DbDataAdapter.TerminateBatching()
  fullName: System.Data.Common.DbDataAdapter.TerminateBatching()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Slutar batchbearbetning för den <xref href=&quot;System.Data.Common.DbDataAdapter&quot;> </xref>."
  remarks: "I <xref:System.Data.Common.DbDataAdapter>den här metoden genererar <xref:System.NotSupportedException>.</xref:System.NotSupportedException> </xref:System.Data.Common.DbDataAdapter> Klasser som ärver från <xref:System.Data.Common.DbDataAdapter>åsidosätta den här metoden för att ge stöd för batchar.</xref:System.Data.Common.DbDataAdapter>"
  syntax:
    content: protected virtual void TerminateBatching ();
    parameters: []
  overload: System.Data.Common.DbDataAdapter.TerminateBatching*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "Kortet stöder inte batchar."
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.Update(System.Data.DataRow[])
  id: Update(System.Data.DataRow[])
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: Update(DataRow[])
  nameWithType: DbDataAdapter.Update(DataRow[])
  fullName: System.Data.Common.DbDataAdapter.Update(DataRow[])
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Uppdaterar värdena i databasen genom att köra respektive INSERT-, UPDATE- eller DELETE-instruktioner för varje infogas, uppdateras eller tas bort raden i den angivna matrisen i den <xref href=&quot;System.Data.DataSet&quot;> </xref>."
  remarks: "När ett program anropar den <xref:System.Data.Common.DbDataAdapter.Update%2A>-metoden i <xref:System.Data.Common.DbDataAdapter>undersöker den <xref:System.Data.DataRow.RowState%2A>egenskapen och kör de nödvändiga INSERT-, UPDATE- eller ta bort rapporterna upprepade gånger för varje rad baserat terabyte index som konfigurerats i <xref:System.Data.DataSet>.</xref:System.Data.DataSet> </xref:System.Data.DataRow.RowState%2A> </xref:System.Data.Common.DbDataAdapter> </xref:System.Data.Common.DbDataAdapter.Update%2A> Till exempel <xref:System.Data.Common.DbDataAdapter.Update%2A>kan köra en DELETE-instruktion, följt av en INSERT-instruktion och en annan DELETE-instruktion, på grund av sortering av rader i <xref:System.Data.DataTable>.</xref:System.Data.DataTable> </xref:System.Data.Common.DbDataAdapter.Update%2A>       Det bör noteras att dessa uttryck inte utförs som en batchprocess; varje rad uppdateras individuellt. Ett program kan anropa den <xref:System.Data.DataSet.GetChanges%2A>metod i situationer där du måste styra sekvensen av instruktionen typer (till exempel infogar innan uppdateringar).</xref:System.Data.DataSet.GetChanges%2A> Mer information finns i [uppdatering datakällor med DataAdapters](~/add/includes/ajax-current-ext-md.md).       Om INSERT-, UPDATE- eller DELETE-uttryck inte har angetts, den <xref:System.Data.Common.DbDataAdapter.Update%2A>metoden genereras ett undantag.</xref:System.Data.Common.DbDataAdapter.Update%2A> Du kan dock skapa en <xref:System.Data.SqlClient.SqlCommandBuilder>eller <xref:System.Data.OleDb.OleDbCommandBuilder>objekt att automatiskt generera SQL-uttryck för enskild tabell uppdateringar om du ställer in den `SelectCommand` egenskapen för en .NET Framework-dataprovidern.</xref:System.Data.OleDb.OleDbCommandBuilder> </xref:System.Data.SqlClient.SqlCommandBuilder> Sedan ytterligare SQL-uttryck som du inte anger genereras av den **CommandBuilder**. Den här generationen logiken kräver information om nyckelkolumn måste finnas i <xref:System.Data.DataSet>.</xref:System.Data.DataSet> Mer information finns i [genererar kommandon med CommandBuilders](~/add/includes/ajax-current-ext-md.md).       Den <xref:System.Data.Common.DbDataAdapter.Update%2A>metoden hämtar rader från tabellen som anges i första mappningen innan du utför en uppdatering.</xref:System.Data.Common.DbDataAdapter.Update%2A> Den <xref:System.Data.Common.DbDataAdapter.Update%2A>uppdaterar raden med värdet för den <xref:System.Data.IDbCommand.UpdatedRowSource%2A>egenskapen.</xref:System.Data.IDbCommand.UpdatedRowSource%2A> </xref:System.Data.Common.DbDataAdapter.Update%2A> Returnerade överskridande rader ignoreras.       När alla data har lästs in till den <xref:System.Data.DataSet>, <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A>händelse inträffar, tillåter användaren att granska den stämts <xref:System.Data.DataSet>liksom alla utdataparametrar returneras av kommandot.</xref:System.Data.DataSet> </xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A> </xref:System.Data.DataSet> När en rad har uppdaterats, accepteras ändringar i den rad som.       När du använder <xref:System.Data.Common.DbDataAdapter.Update%2A>, ordningen för körningen är följande: 1.</xref:System.Data.Common.DbDataAdapter.Update%2A>  Värdena i den <xref:System.Data.DataRow>flyttas till parametervärden.</xref:System.Data.DataRow>      2.  Den <xref:System.Data.Common.DbDataAdapter.OnRowUpdating%2A>händelsen utlöses.</xref:System.Data.Common.DbDataAdapter.OnRowUpdating%2A>      3.  Kommandot körs.      4.  Om kommandot anges till `FirstReturnedRecord`, först returnerade resultatet är placerad i <xref:System.Data.DataRow>.</xref:System.Data.DataRow>      5.  Om det finns utdataparametrar, är de placerade i <xref:System.Data.DataRow>.</xref:System.Data.DataRow>      6.  Den <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A>händelsen utlöses.</xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A>      7.  <xref:System.Data.DataRow.AcceptChanges%2A>anropas.</xref:System.Data.DataRow.AcceptChanges%2A>       Varje kommando som är associerad med <xref:System.Data.Common.DbDataAdapter>har vanligtvis en samling för parametrar som är kopplade till det.</xref:System.Data.Common.DbDataAdapter> Parametrar som är mappade till den aktuella raden via den `SourceColumn` och `SourceVersion` egenskaperna för en .NET Framework-dataprovidern `Parameter` klass. `SourceColumn`refererar till en <xref:System.Data.DataTable>kolumnen som den <xref:System.Data.Common.DbDataAdapter>referenser till hämta parametervärden för den aktuella raden.</xref:System.Data.Common.DbDataAdapter> </xref:System.Data.DataTable>       `SourceColumn`refererar till omappade kolumnnamnet innan alla mappningar för tabellen har tillämpats. Om `SourceColumn` refererar till en kolumn som inte finns de åtgärder som vidtagits beror på något av följande <xref:System.Data.MissingMappingAction>värden.</xref:System.Data.MissingMappingAction>      | Uppräkningsvärdet | Åtgärd |   |-----------------------|------------------|   | `MissingMappingAction.Passthrough`| Använd källa kolumnnamn och tabellnamn i <xref:System.Data.DataSet>om det finns ingen mappning. |   | `MissingMappingAction.Ignore`| En <xref:System.SystemException>genereras.</xref:System.SystemException> </xref:System.Data.DataSet> När mappningarna uttryckligen anges, en saknas mappningen för en indataparameter beror vanligtvis på ett fel. |   | `MissingMappingAction.Error`| En <xref:System.SystemException>genereras. |       Den `SourceColumn` egenskapen också används för att mappa värde för utdata eller parametrar för in-/ utdata tillbaka till den `DataSet`.</xref:System.SystemException> Ett undantag genereras om det refererar till en kolumn som inte finns.       Den `SourceVersion` -egenskapen för en .NET Framework-dataprovidern `Parameter` klassen bestämmer om du vill använda den ursprungliga, Current eller Proposed versionen av värdet i kolumnen. Den här funktionen används ofta för att inkludera ursprungliga värden i WHERE-satsen i en UPDATE-instruktion för att söka efter Optimistisk samtidighet överträdelser.      > [!NOTE] > Om ett fel inträffar vid uppdatering av en rad genereras ett undantag och körningen av uppdateringen har upphört. Om du vill fortsätta uppdateringen utan att generera ett undantag när ett fel uppstår, ange den <xref:System.Data.Common.DataAdapter.ContinueUpdateOnError%2A>egenskapen `true` innan anropar <xref:System.Data.Common.DbDataAdapter.Update%2A>.</xref:System.Data.Common.DbDataAdapter.Update%2A> </xref:System.Data.Common.DataAdapter.ContinueUpdateOnError%2A> Du kan också svara mot fel på grundval av per rad i den `RowUpdated` en DataAdapter-händelse. Uppdateringen fortsätta utan att generera ett undantag i den `RowUpdated` händelse, anger du <xref:System.Data.Common.RowUpdatedEventArgs.Status%2A>egenskapen för <xref:System.Data.Common.RowUpdatedEventArgs>att <xref:System.Data.UpdateStatus>.</xref:System.Data.UpdateStatus> </xref:System.Data.Common.RowUpdatedEventArgs> </xref:System.Data.Common.RowUpdatedEventArgs.Status%2A>"
  example:
  - "The following example uses the derived class, <xref:System.Data.OleDb.OleDbDataAdapter>, to update the data source.  \n  \n [!code-cs[Classic WebData DbDataAdapter.Update1 Example#1](~/add/codesnippet/csharp/m-system.data.common.dbd_0_1.cs)]\n [!code-vb[Classic WebData DbDataAdapter.Update1 Example#1](~/add/codesnippet/visualbasic/m-system.data.common.dbd_0_1.vb)]"
  syntax:
    content: public int Update (System.Data.DataRow[] dataRows);
    parameters:
    - id: dataRows
      type: System.Data.DataRow[]
      description: "En matris med <xref href=&quot;System.Data.DataRow&quot;> </xref> objekt som används för att uppdatera datakällan."
    return:
      type: System.Int32
      description: "Antalet rader som har uppdaterats från den <xref href=&quot;System.Data.DataSet&quot;> </xref>."
  overload: System.Data.Common.DbDataAdapter.Update*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "Den <xref href=&quot;System.Data.DataSet&quot;> </xref> är ogiltig."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Källtabellen är ogiltig."
  - type: System.SystemException
    commentId: T:System.SystemException
    description: "Inte <xref href=&quot;System.Data.DataRow&quot;> </xref> finns om du vill uppdatera.       - eller - nr <xref href=&quot;System.Data.DataTable&quot;> </xref> finns om du vill uppdatera.       - eller - nr <xref href=&quot;System.Data.DataSet&quot;> </xref> finns om du vill använda som källa."
  - type: System.Data.DBConcurrencyException
    commentId: T:System.Data.DBConcurrencyException
    description: "Ett försök att köra en INSERT-, UPDATE- eller DELETE-sats resulterade i noll poster som påverkas."
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)
  id: Update(System.Data.DataSet)
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: Update(DataSet)
  nameWithType: DbDataAdapter.Update(DataSet)
  fullName: System.Data.Common.DbDataAdapter.Update(DataSet)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Uppdaterar värdena i databasen genom att köra respektive INSERT-, UPDATE- eller DELETE-instruktioner för varje infogas, uppdateras eller tas bort raden i det angivna <xref href=&quot;System.Data.DataSet&quot;> </xref>."
  remarks: "När programmet anropar metoden Update på <xref:System.Data.Common.DbDataAdapter>undersöker den <xref:System.Data.DataRow.RowState%2A>egenskapen och kör de nödvändiga INSERT-, UPDATE- eller ta bort rapporterna upprepade gånger för varje rad baserat terabyte index som konfigurerats i <xref:System.Data.DataSet>.</xref:System.Data.DataSet> </xref:System.Data.DataRow.RowState%2A> </xref:System.Data.Common.DbDataAdapter> Uppdateringen kan till exempel köra en DELETE-instruktion, följt av en INSERT-instruktion och en annan DELETE-instruktion, på grund av sortering av rader i <xref:System.Data.DataTable>.</xref:System.Data.DataTable>       Det bör noteras att dessa uttryck inte utförs som en batchprocess; varje rad uppdateras individuellt. Ett program kan anropa den <xref:System.Data.DataSet.GetChanges%2A>metod i situationer där du måste styra sekvensen av instruktionen typer (till exempel infogar innan uppdateringar).</xref:System.Data.DataSet.GetChanges%2A> Mer information finns i [uppdatering datakällor med DataAdapters](~/add/includes/ajax-current-ext-md.md).       Om INSERT-, UPDATE- eller DELETE-instruktioner inte har angetts, metoden Update genererar ett undantag. Du kan dock skapa en <xref:System.Data.SqlClient.SqlCommandBuilder>eller <xref:System.Data.OleDb.OleDbCommandBuilder>objekt att automatiskt generera SQL-uttryck för enskild tabell uppdateringar om du ställer in den `SelectCommand` egenskapen för en .NET Framework-dataprovidern.</xref:System.Data.OleDb.OleDbCommandBuilder> </xref:System.Data.SqlClient.SqlCommandBuilder> Sedan ytterligare SQL-uttryck som du inte anger genereras av den **CommandBuilder**. Den här generationen logiken kräver information om nyckelkolumn måste finnas i <xref:System.Data.DataSet>.</xref:System.Data.DataSet> Mer information finns i [genererar kommandon med CommandBuilders](~/add/includes/ajax-current-ext-md.md).       Metoden Update hämtar rader från tabellen som anges i första mappningen innan du utför en uppdatering. Uppdateringen uppdaterar raden med värdet för den <xref:System.Data.IDbCommand.UpdatedRowSource%2A>egenskapen.</xref:System.Data.IDbCommand.UpdatedRowSource%2A> Returnerade överskridande rader ignoreras.       När alla data har lästs in till den <xref:System.Data.DataSet>, <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A>händelse inträffar, tillåter användaren att granska den stämts <xref:System.Data.DataSet>liksom alla utdataparametrar returneras av kommandot.</xref:System.Data.DataSet> </xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A> </xref:System.Data.DataSet> När en rad har uppdaterats, accepteras ändringar i den rad som.       När du använder Update ordningen för körningen är följande: 1.  Värdena i den <xref:System.Data.DataRow>flyttas till parametervärden.</xref:System.Data.DataRow>      2.  Den <xref:System.Data.Common.DbDataAdapter.OnRowUpdating%2A>händelsen utlöses.</xref:System.Data.Common.DbDataAdapter.OnRowUpdating%2A>      3.  Kommandot körs.      4.  Om kommandot anges till `FirstReturnedRecord`, och sedan först returnerade resultatet är placerad i <xref:System.Data.DataRow>.</xref:System.Data.DataRow>      5.  Om det finns utdataparametrar, är de placerade i <xref:System.Data.DataRow>.</xref:System.Data.DataRow>      6.  Den <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A>händelsen utlöses.</xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A>      7.  <xref:System.Data.DataRow.AcceptChanges%2A>anropas.</xref:System.Data.DataRow.AcceptChanges%2A>       Varje kommando som är associerad med <xref:System.Data.Common.DbDataAdapter>har vanligtvis en samling för parametrar som är kopplade till det.</xref:System.Data.Common.DbDataAdapter> Parametrar som är mappade till den aktuella raden via den `SourceColumn` och `SourceVersion` egenskaperna för en .NET Framework-dataprovidern `Parameter` klass. `SourceColumn`refererar till en <xref:System.Data.DataTable>kolumnen som den <xref:System.Data.Common.DbDataAdapter>referenser till hämta parametervärden för den aktuella raden.</xref:System.Data.Common.DbDataAdapter> </xref:System.Data.DataTable>       `SourceColumn`refererar till omappade kolumnnamnet innan alla mappningar för tabellen har tillämpats. Om `SourceColumn` refererar till en kolumn som inte finns de åtgärder som vidtagits beror på något av följande <xref:System.Data.MissingMappingAction>värden.</xref:System.Data.MissingMappingAction>      | Uppräkningsvärdet | Åtgärd |   |-----------------------|------------------|   | `MissingMappingAction.Passthrough`| Använd källa kolumnnamn och tabellnamn i <xref:System.Data.DataSet>om det finns ingen mappning. |   | `MissingMappingAction.Ignore`| En <xref:System.SystemException>genereras.</xref:System.SystemException> </xref:System.Data.DataSet> När mappningarna uttryckligen anges, en saknas mappningen för en indataparameter beror vanligtvis på ett fel. |   | `MissingMappingAction.Error`| En <xref:System.SystemException>genereras. |       Den `SourceColumn` egenskapen också används för att mappa värde för utdata eller parametrar för in-/ utdata tillbaka till den `DataSet`.</xref:System.SystemException> Ett undantag genereras om det refererar till en kolumn som inte finns.       Den `SourceVersion` -egenskapen för en .NET Framework-dataprovidern `Parameter` klassen bestämmer om du vill använda den ursprungliga, Current eller Proposed versionen av värdet i kolumnen. Den här funktionen används ofta för att inkludera ursprungliga värden i WHERE-satsen i en UPDATE-instruktion för att söka efter Optimistisk samtidighet överträdelser.      > [!NOTE] > Om ett fel inträffar vid uppdatering av en rad genereras ett undantag och körningen av uppdateringen har upphört. Om du vill fortsätta uppdateringen utan att generera ett undantag när ett fel uppstår, ange den <xref:System.Data.Common.DataAdapter.ContinueUpdateOnError%2A>egenskapen `true` anropar före uppdatering.</xref:System.Data.Common.DataAdapter.ContinueUpdateOnError%2A> Du kan också svara mot fel på grundval av per rad i den `RowUpdated` en DataAdapter-händelse. Uppdateringen fortsätta utan att generera ett undantag i den `RowUpdated` händelse, anger du <xref:System.Data.Common.RowUpdatedEventArgs.Status%2A>egenskapen för <xref:System.Data.Common.RowUpdatedEventArgs>att <xref:System.Data.UpdateStatus>.</xref:System.Data.UpdateStatus> </xref:System.Data.Common.RowUpdatedEventArgs> </xref:System.Data.Common.RowUpdatedEventArgs.Status%2A>"
  example:
  - "The following example uses the derived class, <xref:System.Data.OleDb.OleDbDataAdapter>, to update the data source.  \n  \n [!code-vb[Classic WebData DbDataAdapter.Update Example#1](~/add/codesnippet/visualbasic/m-system.data.common.dbd_4_1.vb)]\n [!code-cs[Classic WebData DbDataAdapter.Update Example#1](~/add/codesnippet/csharp/m-system.data.common.dbd_4_1.cs)]"
  syntax:
    content: public override int Update (System.Data.DataSet dataSet);
    parameters:
    - id: dataSet
      type: System.Data.DataSet
      description: "Den <xref href=&quot;System.Data.DataSet&quot;> </xref> används för att uppdatera datakällan."
    return:
      type: System.Int32
      description: "Antalet rader som har uppdaterats från den <xref href=&quot;System.Data.DataSet&quot;> </xref>."
  overload: System.Data.Common.DbDataAdapter.Update*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Källtabellen är ogiltig."
  - type: System.Data.DBConcurrencyException
    commentId: T:System.Data.DBConcurrencyException
    description: "Ett försök att köra en INSERT-, UPDATE- eller DELETE-sats resulterade i noll poster som påverkas."
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.Update(System.Data.DataTable)
  id: Update(System.Data.DataTable)
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: Update(DataTable)
  nameWithType: DbDataAdapter.Update(DataTable)
  fullName: System.Data.Common.DbDataAdapter.Update(DataTable)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Uppdaterar värdena i databasen genom att köra respektive INSERT-, UPDATE- eller DELETE-instruktioner för varje infogas, uppdateras eller tas bort raden i det angivna <xref href=&quot;System.Data.DataTable&quot;> </xref>."
  remarks: "När ett program anropar den <xref:System.Data.Common.DbDataAdapter.Update%2A>-metoden i <xref:System.Data.Common.DbDataAdapter>undersöker den <xref:System.Data.DataRow.RowState%2A>egenskapen och kör de nödvändiga INSERT-, UPDATE- eller ta bort rapporterna upprepade gånger för varje rad baserat terabyte index som konfigurerats i <xref:System.Data.DataSet>.</xref:System.Data.DataSet> </xref:System.Data.DataRow.RowState%2A> </xref:System.Data.Common.DbDataAdapter> </xref:System.Data.Common.DbDataAdapter.Update%2A> Till exempel <xref:System.Data.Common.DbDataAdapter.Update%2A>kan köra en DELETE-instruktion, följt av en INSERT-instruktion och en annan DELETE-instruktion, på grund av sortering av rader i <xref:System.Data.DataTable>.</xref:System.Data.DataTable> </xref:System.Data.Common.DbDataAdapter.Update%2A>       Det bör noteras att dessa uttryck inte utförs som en batchprocess; varje rad uppdateras individuellt. Ett program kan anropa den <xref:System.Data.DataSet.GetChanges%2A>metod i situationer där du måste styra sekvensen av instruktionen typer (till exempel infogar innan uppdateringar).</xref:System.Data.DataSet.GetChanges%2A> Mer information finns i [uppdatering datakällor med DataAdapters](~/add/includes/ajax-current-ext-md.md).       Om INSERT-, UPDATE- eller DELETE-uttryck inte har angetts, den <xref:System.Data.Common.DbDataAdapter.Update%2A>metoden genereras ett undantag.</xref:System.Data.Common.DbDataAdapter.Update%2A> Du kan dock skapa en <xref:System.Data.SqlClient.SqlCommandBuilder>eller <xref:System.Data.OleDb.OleDbCommandBuilder>objekt att automatiskt generera SQL-uttryck för enskild tabell uppdateringar om du ställer in den `SelectCommand` egenskapen för en .NET Framework-dataprovidern.</xref:System.Data.OleDb.OleDbCommandBuilder> </xref:System.Data.SqlClient.SqlCommandBuilder> Sedan ytterligare SQL-uttryck som du inte anger genereras av den **CommandBuilder**. Den här generationen logiken kräver information om nyckelkolumn måste finnas i <xref:System.Data.DataSet>.</xref:System.Data.DataSet> Mer information finns i [genererar kommandon med CommandBuilders](~/add/includes/ajax-current-ext-md.md).       Den <xref:System.Data.Common.DbDataAdapter.Update%2A>metoden hämtar rader från tabellen som anges i första mappningen innan du utför en uppdatering.</xref:System.Data.Common.DbDataAdapter.Update%2A> Den <xref:System.Data.Common.DbDataAdapter.Update%2A>uppdaterar raden med värdet för den <xref:System.Data.IDbCommand.UpdatedRowSource%2A>egenskapen.</xref:System.Data.IDbCommand.UpdatedRowSource%2A> </xref:System.Data.Common.DbDataAdapter.Update%2A> Returnerade överskridande rader ignoreras.       När alla data har lästs in till den <xref:System.Data.DataSet>, <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A>händelse inträffar, tillåter användaren att granska den stämts <xref:System.Data.DataSet>liksom alla utdataparametrar returneras av kommandot.</xref:System.Data.DataSet> </xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A> </xref:System.Data.DataSet> När en rad har uppdaterats, accepteras ändringar i den rad som.       När du använder <xref:System.Data.Common.DbDataAdapter.Update%2A>, ordningen för körningen är följande: 1.</xref:System.Data.Common.DbDataAdapter.Update%2A>  Värdena i den <xref:System.Data.DataRow>flyttas till parametervärden.</xref:System.Data.DataRow>      2.  Den <xref:System.Data.Common.DbDataAdapter.OnRowUpdating%2A>händelsen utlöses.</xref:System.Data.Common.DbDataAdapter.OnRowUpdating%2A>      3.  Kommandot körs.      4.  Om kommandot anges till `FirstReturnedRecord`, och sedan först returnerade resultatet är placerad i <xref:System.Data.DataRow>.</xref:System.Data.DataRow>      5.  Om det finns utdataparametrar, är de placerade i <xref:System.Data.DataRow>.</xref:System.Data.DataRow>      6.  Den <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A>händelsen utlöses.</xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A>      7.  <xref:System.Data.DataRow.AcceptChanges%2A>anropas.</xref:System.Data.DataRow.AcceptChanges%2A>       Varje kommando som är associerad med <xref:System.Data.Common.DbDataAdapter>har vanligtvis en samling för parametrar som är kopplade till det.</xref:System.Data.Common.DbDataAdapter> Parametrar som är mappade till den aktuella raden via den `SourceColumn` och `SourceVersion` egenskaperna för en .NET Framework-dataprovidern `Parameter` klass. `SourceColumn`refererar till en <xref:System.Data.DataTable>kolumnen som den <xref:System.Data.Common.DbDataAdapter>referenser till hämta parametervärden för den aktuella raden.</xref:System.Data.Common.DbDataAdapter> </xref:System.Data.DataTable>       `SourceColumn`refererar till omappade kolumnnamnet innan alla mappningar för tabellen har tillämpats. Om `SourceColumn` refererar till en kolumn som inte finns de åtgärder som vidtagits beror på något av följande <xref:System.Data.MissingMappingAction>värden.</xref:System.Data.MissingMappingAction>      | Uppräkningsvärdet | Åtgärd |   |-----------------------|------------------|   | `MissingMappingAction.Passthrough`| Använd källa kolumnnamn och tabellnamn i <xref:System.Data.DataSet>om det finns ingen mappning. |   | `MissingMappingAction.Ignore`| En <xref:System.SystemException>genereras.</xref:System.SystemException> </xref:System.Data.DataSet> När mappningarna uttryckligen anges, en saknas mappningen för en indataparameter beror vanligtvis på ett fel. |   | `MissingMappingAction.Error`| En <xref:System.SystemException>genereras. |       Den `SourceColumn` egenskapen också används för att mappa värde för utdata eller parametrar för in-/ utdata tillbaka till den `DataSet`.</xref:System.SystemException> Ett undantag genereras om det refererar till en kolumn som inte finns.       Den `SourceVersion` -egenskapen för en .NET Framework-dataprovidern `Parameter` klassen bestämmer om du vill använda den ursprungliga, Current eller Proposed versionen av värdet i kolumnen. Den här funktionen används ofta för att inkludera ursprungliga värden i WHERE-satsen i en UPDATE-instruktion för att söka efter Optimistisk samtidighet överträdelser.      > [!NOTE] > Om ett fel inträffar vid uppdatering av en rad genereras ett undantag och körningen av uppdateringen har upphört. Om du vill fortsätta uppdateringen utan att generera ett undantag när ett fel uppstår, ange den <xref:System.Data.Common.DataAdapter.ContinueUpdateOnError%2A>egenskapen `true` innan anropar <xref:System.Data.Common.DbDataAdapter.Update%2A>.</xref:System.Data.Common.DbDataAdapter.Update%2A> </xref:System.Data.Common.DataAdapter.ContinueUpdateOnError%2A> Du kan också svara mot fel på grundval av per rad i den `RowUpdated` en DataAdapter-händelse. Uppdateringen fortsätta utan att generera ett undantag i den `RowUpdated` händelse, anger du <xref:System.Data.Common.RowUpdatedEventArgs.Status%2A>egenskapen för <xref:System.Data.Common.RowUpdatedEventArgs>att <xref:System.Data.UpdateStatus>.</xref:System.Data.UpdateStatus> </xref:System.Data.Common.RowUpdatedEventArgs> </xref:System.Data.Common.RowUpdatedEventArgs.Status%2A>"
  example:
  - "The following example uses the derived class, <xref:System.Data.OleDb.OleDbDataAdapter>, to update the data source.  \n  \n [!code-vb[Classic WebData DbDataAdapter.Update2 Example#1](~/add/codesnippet/visualbasic/m-system.data.common.dbd_1_1.vb)]\n [!code-cs[Classic WebData DbDataAdapter.Update2 Example#1](~/add/codesnippet/csharp/m-system.data.common.dbd_1_1.cs)]"
  syntax:
    content: public int Update (System.Data.DataTable dataTable);
    parameters:
    - id: dataTable
      type: System.Data.DataTable
      description: "Den <xref href=&quot;System.Data.DataTable&quot;> </xref> används för att uppdatera datakällan."
    return:
      type: System.Int32
      description: "Antalet rader som har uppdaterats från den <xref href=&quot;System.Data.DataTable&quot;> </xref>."
  overload: System.Data.Common.DbDataAdapter.Update*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "Den <xref href=&quot;System.Data.DataSet&quot;> </xref> är ogiltig."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Källtabellen är ogiltig."
  - type: System.SystemException
    commentId: T:System.SystemException
    description: "Inte <xref href=&quot;System.Data.DataRow&quot;> </xref> finns om du vill uppdatera.       - eller - nr <xref href=&quot;System.Data.DataTable&quot;> </xref> finns om du vill uppdatera.       - eller - nr <xref href=&quot;System.Data.DataSet&quot;> </xref> finns om du vill använda som källa."
  - type: System.Data.DBConcurrencyException
    commentId: T:System.Data.DBConcurrencyException
    description: "Ett försök att köra en INSERT-, UPDATE- eller DELETE-sats resulterade i noll poster som påverkas."
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.Update(System.Data.DataRow[],System.Data.Common.DataTableMapping)
  id: Update(System.Data.DataRow[],System.Data.Common.DataTableMapping)
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: Update(DataRow[],DataTableMapping)
  nameWithType: DbDataAdapter.Update(DataRow[],DataTableMapping)
  fullName: System.Data.Common.DbDataAdapter.Update(DataRow[],DataTableMapping)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Uppdaterar värdena i databasen genom att köra respektive INSERT-, UPDATE- eller DELETE-instruktioner för varje infogas, uppdateras eller tas bort rad i den angivna matrisen <xref href=&quot;System.Data.DataSet&quot;> </xref> objekt."
  remarks: "När ett program anropar den <xref:System.Data.Common.DbDataAdapter.Update%2A>-metoden i <xref:System.Data.Common.DbDataAdapter>undersöker den <xref:System.Data.DataRow.RowState%2A>egenskapen och kör de nödvändiga INSERT-, UPDATE- eller ta bort rapporterna upprepade gånger för varje rad baserat terabyte index som konfigurerats i <xref:System.Data.DataSet>.</xref:System.Data.DataSet> </xref:System.Data.DataRow.RowState%2A> </xref:System.Data.Common.DbDataAdapter> </xref:System.Data.Common.DbDataAdapter.Update%2A> Till exempel <xref:System.Data.Common.DbDataAdapter.Update%2A>kan köra en DELETE-instruktion, följt av en INSERT-instruktion och en annan DELETE-instruktion, på grund av sortering av rader i <xref:System.Data.DataTable>.</xref:System.Data.DataTable> </xref:System.Data.Common.DbDataAdapter.Update%2A>       Det bör noteras att dessa uttryck inte utförs som en batchprocess; varje rad uppdateras individuellt. Ett program kan anropa den <xref:System.Data.DataSet.GetChanges%2A>metod i situationer där du måste styra sekvensen av instruktionen typer (till exempel infogar innan uppdateringar).</xref:System.Data.DataSet.GetChanges%2A> Mer information finns i [uppdatering datakällor med DataAdapters](~/add/includes/ajax-current-ext-md.md).       Om INSERT-, UPDATE- eller DELETE-uttryck inte har angetts, den <xref:System.Data.Common.DbDataAdapter.Update%2A>metoden genereras ett undantag.</xref:System.Data.Common.DbDataAdapter.Update%2A> Du kan dock skapa en <xref:System.Data.SqlClient.SqlCommandBuilder>eller <xref:System.Data.OleDb.OleDbCommandBuilder>objekt att automatiskt generera SQL-uttryck för enskild tabell uppdateringar om du ställer in den `SelectCommand` egenskapen för en .NET Framework-dataprovidern.</xref:System.Data.OleDb.OleDbCommandBuilder> </xref:System.Data.SqlClient.SqlCommandBuilder> Sedan ytterligare SQL-uttryck som du inte anger genereras av den **CommandBuilder**. Den här generationen logiken kräver information om nyckelkolumn måste finnas i <xref:System.Data.DataSet>.</xref:System.Data.DataSet> Mer information finns i [genererar kommandon med CommandBuilders](~/add/includes/ajax-current-ext-md.md).       Den <xref:System.Data.Common.DbDataAdapter.Update%2A>metoden hämtar rader från tabellen som anges i första mappningen innan du utför en uppdatering.</xref:System.Data.Common.DbDataAdapter.Update%2A> Den <xref:System.Data.Common.DbDataAdapter.Update%2A>uppdaterar raden med värdet för den <xref:System.Data.IDbCommand.UpdatedRowSource%2A>egenskapen.</xref:System.Data.IDbCommand.UpdatedRowSource%2A> </xref:System.Data.Common.DbDataAdapter.Update%2A> Returnerade överskridande rader ignoreras.       När alla data har lästs in till den <xref:System.Data.DataSet>, <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A>händelse inträffar, tillåter användaren att granska den stämts <xref:System.Data.DataSet>liksom alla utdataparametrar returneras av kommandot.</xref:System.Data.DataSet> </xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A> </xref:System.Data.DataSet> När en rad har uppdaterats, accepteras ändringar i den rad som.       När du använder <xref:System.Data.Common.DbDataAdapter.Update%2A>, ordningen för körningen är följande: 1.</xref:System.Data.Common.DbDataAdapter.Update%2A>  Värdena i den <xref:System.Data.DataRow>flyttas till parametervärden.</xref:System.Data.DataRow>      2.  Den <xref:System.Data.Common.DbDataAdapter.OnRowUpdating%2A>händelsen utlöses.</xref:System.Data.Common.DbDataAdapter.OnRowUpdating%2A>      3.  Kommandot körs.      4.  Om kommandot anges till `FirstReturnedRecord`, och sedan först returnerade resultatet är placerad i <xref:System.Data.DataRow>.</xref:System.Data.DataRow>      5.  Om det finns utdataparametrar, är de placerade i <xref:System.Data.DataRow>.</xref:System.Data.DataRow>      6.  Den <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A>händelsen utlöses.</xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A>      7.  <xref:System.Data.DataRow.AcceptChanges%2A>anropas.</xref:System.Data.DataRow.AcceptChanges%2A>       Varje kommando som är associerad med <xref:System.Data.Common.DbDataAdapter>har vanligtvis en samling för parametrar som är kopplade till det.</xref:System.Data.Common.DbDataAdapter> Parametrar som är mappade till den aktuella raden via den `SourceColumn` och `SourceVersion` egenskaperna för en .NET Framework-dataprovidern `Parameter` klass. `SourceColumn`refererar till en <xref:System.Data.DataTable>kolumnen som den <xref:System.Data.Common.DbDataAdapter>referenser till hämta parametervärden för den aktuella raden.</xref:System.Data.Common.DbDataAdapter> </xref:System.Data.DataTable>       `SourceColumn`refererar till omappade kolumnnamnet innan alla mappningar för tabellen har tillämpats. Om `SourceColumn` refererar till en kolumn som inte finns de åtgärder som vidtagits beror på något av följande <xref:System.Data.MissingMappingAction>värden.</xref:System.Data.MissingMappingAction>      | Uppräkningsvärdet | Åtgärd |   |-----------------------|------------------|   | `MissingMappingAction.Passthrough`| Använd källa kolumnnamn och tabellnamn i <xref:System.Data.DataSet>om det finns ingen mappning. |   | `MissingMappingAction.Ignore`| En <xref:System.SystemException>genereras.</xref:System.SystemException> </xref:System.Data.DataSet> När mappningarna uttryckligen anges, en saknas mappningen för en indataparameter beror vanligtvis på ett fel. |   | `MissingMappingAction.Error`| En <xref:System.SystemException>genereras. |       Den `SourceColumn` egenskapen också används för att mappa värde för utdata eller parametrar för in-/ utdata tillbaka till den `DataSet`.</xref:System.SystemException> Ett undantag genereras om det refererar till en kolumn som inte finns.       Den `SourceVersion` -egenskapen för en .NET Framework-dataprovidern `Parameter` klassen bestämmer om du vill använda den ursprungliga, Current eller Proposed versionen av värdet i kolumnen. Den här funktionen används ofta för att inkludera ursprungliga värden i WHERE-satsen i en UPDATE-instruktion för att söka efter Optimistisk samtidighet överträdelser.      > [!NOTE] > Om ett fel inträffar vid uppdatering av en rad genereras ett undantag och körningen av uppdateringen har upphört. Om du vill fortsätta uppdateringen utan att generera ett undantag när ett fel uppstår, ange den <xref:System.Data.Common.DataAdapter.ContinueUpdateOnError%2A>egenskapen `true` innan anropar <xref:System.Data.Common.DbDataAdapter.Update%2A>.</xref:System.Data.Common.DbDataAdapter.Update%2A> </xref:System.Data.Common.DataAdapter.ContinueUpdateOnError%2A> Du kan också svara mot fel på grundval av per rad i den `RowUpdated` en DataAdapter-händelse. Uppdateringen fortsätta utan att generera ett undantag i den `RowUpdated` händelse, anger du <xref:System.Data.Common.RowUpdatedEventArgs.Status%2A>egenskapen för <xref:System.Data.Common.RowUpdatedEventArgs>att <xref:System.Data.UpdateStatus>.</xref:System.Data.UpdateStatus> </xref:System.Data.Common.RowUpdatedEventArgs> </xref:System.Data.Common.RowUpdatedEventArgs.Status%2A>"
  syntax:
    content: protected virtual int Update (System.Data.DataRow[] dataRows, System.Data.Common.DataTableMapping tableMapping);
    parameters:
    - id: dataRows
      type: System.Data.DataRow[]
      description: "En matris med <xref href=&quot;System.Data.DataRow&quot;> </xref> objekt som används för att uppdatera datakällan."
    - id: tableMapping
      type: System.Data.Common.DataTableMapping
      description: "Den <xref:System.Data.IDataAdapter.TableMappings*>samling som ska användas.</xref:System.Data.IDataAdapter.TableMappings*>"
    return:
      type: System.Int32
      description: "Antalet rader som har uppdaterats från den <xref href=&quot;System.Data.DataSet&quot;> </xref>."
  overload: System.Data.Common.DbDataAdapter.Update*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "Den <xref href=&quot;System.Data.DataSet&quot;> </xref> är ogiltig."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Källtabellen är ogiltig."
  - type: System.SystemException
    commentId: T:System.SystemException
    description: "Inte <xref href=&quot;System.Data.DataRow&quot;> </xref> finns om du vill uppdatera.       - eller - nr <xref href=&quot;System.Data.DataTable&quot;> </xref> finns om du vill uppdatera.       - eller - nr <xref href=&quot;System.Data.DataSet&quot;> </xref> finns om du vill använda som källa."
  - type: System.Data.DBConcurrencyException
    commentId: T:System.Data.DBConcurrencyException
    description: "Ett försök att köra en INSERT-, UPDATE- eller DELETE-sats resulterade i noll poster som påverkas."
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.Update(System.Data.DataSet,System.String)
  id: Update(System.Data.DataSet,System.String)
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: Update(DataSet,String)
  nameWithType: DbDataAdapter.Update(DataSet,String)
  fullName: System.Data.Common.DbDataAdapter.Update(DataSet,String)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Uppdaterar värdena i databasen genom att köra respektive INSERT-, UPDATE- eller DELETE-instruktioner för varje infogas, uppdateras eller tas bort rad i den <xref href=&quot;System.Data.DataSet&quot;> </xref> med det angivna <xref href=&quot;System.Data.DataTable&quot;> </xref> namn."
  remarks: "När ett program anropar den <xref:System.Data.Common.DbDataAdapter.Update%2A>-metoden i <xref:System.Data.Common.DbDataAdapter>undersöker den <xref:System.Data.DataRow.RowState%2A>egenskapen och kör de nödvändiga INSERT-, UPDATE- eller ta bort rapporterna upprepade gånger för varje rad baserat terabyte index som konfigurerats i <xref:System.Data.DataSet>.</xref:System.Data.DataSet> </xref:System.Data.DataRow.RowState%2A> </xref:System.Data.Common.DbDataAdapter> </xref:System.Data.Common.DbDataAdapter.Update%2A> Till exempel <xref:System.Data.Common.DbDataAdapter.Update%2A>kan köra en DELETE-instruktion, följt av en INSERT-instruktion och en annan DELETE-instruktion, på grund av sortering av rader i <xref:System.Data.DataTable>.</xref:System.Data.DataTable> </xref:System.Data.Common.DbDataAdapter.Update%2A>       Det bör noteras att dessa uttryck inte utförs som en batchprocess; varje rad uppdateras individuellt. Ett program kan anropa den <xref:System.Data.DataSet.GetChanges%2A>metod i situationer där du måste styra sekvensen av instruktionen typer (till exempel infoga före uppdatering).</xref:System.Data.DataSet.GetChanges%2A> Mer information finns i [uppdatering datakällor med DataAdapters](~/add/includes/ajax-current-ext-md.md).       Om INSERT-, UPDATE- eller DELETE-uttryck inte har angetts, den <xref:System.Data.Common.DbDataAdapter.Update%2A>metoden genereras ett undantag.</xref:System.Data.Common.DbDataAdapter.Update%2A> Du kan dock skapa en <xref:System.Data.SqlClient.SqlCommandBuilder>eller <xref:System.Data.OleDb.OleDbCommandBuilder>objekt att automatiskt generera SQL-uttryck för enskild tabell uppdateringar om du ställer in den `SelectCommand` egenskapen för en .NET Framework-dataprovidern.</xref:System.Data.OleDb.OleDbCommandBuilder> </xref:System.Data.SqlClient.SqlCommandBuilder> Sedan ytterligare SQL-uttryck som du inte anger genereras av den **CommandBuilder**. Den här generationen logiken kräver information om nyckelkolumn måste finnas i <xref:System.Data.DataSet>.</xref:System.Data.DataSet> Mer information finns i [genererar kommandon med CommandBuilders](~/add/includes/ajax-current-ext-md.md).       Den <xref:System.Data.Common.DbDataAdapter.Update%2A>metoden stöder scenarier där det <xref:System.Data.DataSet>innehåller flera <xref:System.Data.DataTable>objekt vars namn endast skiljer ärende.</xref:System.Data.DataTable> </xref:System.Data.DataSet> </xref:System.Data.Common.DbDataAdapter.Update%2A> När flera tabeller med samma namn men olika skiftläge finns i en `DataSet`, <xref:System.Data.Common.DbDataAdapter.Update%2A>utför gemener för att hitta motsvarande register och genererar ett undantag om det finns ingen exakt matchning.</xref:System.Data.Common.DbDataAdapter.Update%2A> Följande C#-kod visar det här beteendet.      ```   DataSet ds = new DataSet();    ds.Tables.Add(&quot;aaa&quot;);    ds.Tables.Add(&quot;AAA&quot;);    adapter.Update(ds, &quot;aaa&quot;); // Updates &quot;aaa&quot;, which already exists in the DataSet.    adapter.Update(ds, &quot;AAA&quot;); // Updates &quot;AAA&quot;, which already exists in the DataSet.       adapter.Update(ds, &quot;Aaa&quot;); // Results in an exception.   ```Om <xref:System.Data.Common.DbDataAdapter.Update%2A>kallas och <xref:System.Data.DataSet>bara innehåller en <xref:System.Data.DataTable>vars namn skiljer sig bara av fallet som <xref:System.Data.DataTable>uppdateras.</xref:System.Data.DataTable> </xref:System.Data.DataTable> </xref:System.Data.DataSet> </xref:System.Data.Common.DbDataAdapter.Update%2A> I det här scenariot är jämförelse inte skiftlägeskänsligt. Följande C#-kod visar det här beteendet.      ```   DataSet dataset = new DataSet();    dataset.Tables.Add(&quot;aaa&quot;);       adapter.Update(dataset, &quot;AAA&quot;); // Updates table &quot;aaa&quot; because only one similarly named table is in the DataSet.   ```Den <xref:System.Data.Common.DbDataAdapter.Update%2A>metoden hämtar rader från tabellen som anges i första mappningen innan du utför en uppdatering.</xref:System.Data.Common.DbDataAdapter.Update%2A> Den <xref:System.Data.Common.DbDataAdapter.Update%2A>uppdaterar raden med värdet för den <xref:System.Data.IDbCommand.UpdatedRowSource%2A>egenskapen.</xref:System.Data.IDbCommand.UpdatedRowSource%2A> </xref:System.Data.Common.DbDataAdapter.Update%2A> Returnerade överskridande rader ignoreras.       När alla data har lästs in till den <xref:System.Data.DataSet>, <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A>händelse inträffar, tillåter användaren att granska den stämts <xref:System.Data.DataSet>liksom alla utdataparametrar returneras av kommandot.</xref:System.Data.DataSet> </xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A> </xref:System.Data.DataSet> När en rad har uppdaterats, accepteras ändringar i den rad som.       När du använder <xref:System.Data.Common.DbDataAdapter.Update%2A>, ordningen för körningen är följande: 1.</xref:System.Data.Common.DbDataAdapter.Update%2A>  Värdena i den <xref:System.Data.DataRow>flyttas till parametervärden.</xref:System.Data.DataRow>      2.  Den <xref:System.Data.Common.DbDataAdapter.OnRowUpdating%2A>händelsen utlöses.</xref:System.Data.Common.DbDataAdapter.OnRowUpdating%2A>      3.  Kommandot körs.      4.  Om kommandot anges till `FirstReturnedRecord`, och sedan först returnerade resultatet är placerad i <xref:System.Data.DataRow>.</xref:System.Data.DataRow>      5.  Om det finns utdataparametrar, är de placerade i <xref:System.Data.DataRow>.</xref:System.Data.DataRow>      6.  Den <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A>händelsen utlöses.</xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A>      7.  <xref:System.Data.DataRow.AcceptChanges%2A>anropas.</xref:System.Data.DataRow.AcceptChanges%2A>       Varje kommando som är associerad med <xref:System.Data.Common.DbDataAdapter>har vanligtvis en samling för parametrar som är kopplade till det.</xref:System.Data.Common.DbDataAdapter> Parametrar som är mappade till den aktuella raden via den `SourceColumn` och `SourceVersion` egenskaperna för en .NET Framework-dataprovidern `Parameter` klass. `SourceColumn`refererar till en <xref:System.Data.DataTable>kolumnen som den <xref:System.Data.Common.DbDataAdapter>referenser till hämta parametervärden för den aktuella raden.</xref:System.Data.Common.DbDataAdapter> </xref:System.Data.DataTable>       `SourceColumn`refererar till omappade kolumnnamnet innan alla mappningar för tabellen har tillämpats. Om `SourceColumn` refererar till en kolumn som inte finns de åtgärder som vidtagits beror på något av följande <xref:System.Data.MissingMappingAction>värden.</xref:System.Data.MissingMappingAction>      | Uppräkningsvärdet | Åtgärd |   |-----------------------|------------------|   | `MissingMappingAction.Passthrough`| Använd källa kolumnnamn och tabellnamn i <xref:System.Data.DataSet>om det finns ingen mappning. |   | `MissingMappingAction.Ignore`| En <xref:System.SystemException>genereras.</xref:System.SystemException> </xref:System.Data.DataSet> När mappningarna uttryckligen anges, en saknas mappningen för en indataparameter beror vanligtvis på ett fel. |   | `MissingMappingAction.Error`| En <xref:System.SystemException>genereras. |       Den `SourceColumn` egenskapen också används för att mappa värde för utdata eller parametrar för in-/ utdata tillbaka till den `DataSet`.</xref:System.SystemException> Ett undantag genereras om det refererar till en kolumn som inte finns.       Den `SourceVersion` -egenskapen för en .NET Framework-dataprovidern `Parameter` klassen bestämmer om du vill använda den ursprungliga, Current eller Proposed versionen av värdet i kolumnen. Den här funktionen används ofta för att inkludera ursprungliga värden i WHERE-satsen i en UPDATE-instruktion för att söka efter Optimistisk samtidighet överträdelser.      > [!NOTE] > Om ett fel inträffar vid uppdatering av en rad genereras ett undantag och körningen av uppdateringen har upphört. Om du vill fortsätta uppdateringen utan att generera ett undantag när ett fel uppstår, ange den <xref:System.Data.Common.DataAdapter.ContinueUpdateOnError%2A>egenskapen `true` innan anropar <xref:System.Data.Common.DbDataAdapter.Update%2A>.</xref:System.Data.Common.DbDataAdapter.Update%2A> </xref:System.Data.Common.DataAdapter.ContinueUpdateOnError%2A> Du kan också svara mot fel på grundval av per rad i den `RowUpdated` en DataAdapter-händelse. Uppdateringen fortsätta utan att generera ett undantag i den `RowUpdated` händelse, anger du <xref:System.Data.Common.RowUpdatedEventArgs.Status%2A>egenskapen för <xref:System.Data.Common.RowUpdatedEventArgs>att <xref:System.Data.UpdateStatus>.</xref:System.Data.UpdateStatus> </xref:System.Data.Common.RowUpdatedEventArgs> </xref:System.Data.Common.RowUpdatedEventArgs.Status%2A>"
  example:
  - "The following example uses the derived class, <xref:System.Data.OleDb.OleDbDataAdapter>, to update the data source.  \n  \n [!code-cs[Classic WebData DbDataAdapter.Update3#1](~/add/codesnippet/csharp/m-system.data.common.dbd_2_1.cs)]\n [!code-vb[Classic WebData DbDataAdapter.Update3#1](~/add/codesnippet/visualbasic/m-system.data.common.dbd_2_1.vb)]"
  syntax:
    content: public int Update (System.Data.DataSet dataSet, string srcTable);
    parameters:
    - id: dataSet
      type: System.Data.DataSet
      description: "Den <xref href=&quot;System.Data.DataSet&quot;> </xref> du använder för att uppdatera datakällan."
    - id: srcTable
      type: System.String
      description: "Namnet på källtabellen ska användas för mappning av tabellen."
    return:
      type: System.Int32
      description: "Antalet rader som har uppdaterats från den <xref href=&quot;System.Data.DataSet&quot;> </xref>."
  overload: System.Data.Common.DbDataAdapter.Update*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "Den <xref href=&quot;System.Data.DataSet&quot;> </xref> är ogiltig."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Källtabellen är ogiltig."
  - type: System.Data.DBConcurrencyException
    commentId: T:System.Data.DBConcurrencyException
    description: "Ett försök att köra en INSERT-, UPDATE- eller DELETE-sats resulterade i noll poster som påverkas."
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.UpdateBatchSize
  id: UpdateBatchSize
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: UpdateBatchSize
  nameWithType: DbDataAdapter.UpdateBatchSize
  fullName: System.Data.Common.DbDataAdapter.UpdateBatchSize
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Hämtar eller anger ett värde som aktiverar eller inaktiverar stöd för batchbearbetning och anger antalet kommandon som kan köras i en batch."
  remarks: "Använd egenskapen UpdateBatchSize för att uppdatera en datakälla med ändringar från <xref:System.Data.DataSet>.</xref:System.Data.DataSet> Om dataprovidern stöder batchbearbetning, kan detta öka prestanda genom att minska antalet turer till servern. I ADO.NET 2.0 stöds denna egenskap för .NET data provider för SQL Server (SqlClient) och Oracle (OracleClient).       Köra en mycket stor grupp kan försämra prestanda. Därför bör du testa den optimala batch inställningen innan du implementerar ditt program.       En <xref:System.ArgumentOutOfRangeException>genereras om värdet anges till ett värde mindre än noll.</xref:System.ArgumentOutOfRangeException>"
  syntax:
    content: public virtual int UpdateBatchSize { get; set; }
    return:
      type: System.Int32
      description: "Antal rader som ska bearbetas per batch.       <table><thead><tr><th> Värdet är       </th><th> Effekt       </th></tr></thead><tbody><tr><td> 0       </td><td> Det finns ingen gräns på batchstorlek.       </td></tr><tr><td> 1       </td><td> Inaktiverar batch uppdatering.       </td></tr><tr><td> &gt; 1       </td><td> Ändringar som skickas med batchar av UpdateBatchSize åtgärder i taget.       </td></tr></tbody></table>       När du ställer in det till ett annat värde än 1 alla kommandon som är associerade med den <xref href=&quot;System.Data.Common.DbDataAdapter&quot;> </xref> måste ha sina <> </> *> egenskapen * *ingen* * eller * *OutputParameters**. Annars genereras ett undantagsfel."
  overload: System.Data.Common.DbDataAdapter.UpdateBatchSize*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.UpdateCommand
  id: UpdateCommand
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: UpdateCommand
  nameWithType: DbDataAdapter.UpdateCommand
  fullName: System.Data.Common.DbDataAdapter.UpdateCommand
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Hämtar eller anger ett kommando som används för att uppdatera poster i datakällan."
  remarks: "Under <xref:System.Data.Common.DbDataAdapter.Update%2A>, om den här egenskapen inte har angetts och primära nyckelinformationen finns i den <xref:System.Data.DataSet>, <xref:System.Data.IDbDataAdapter.UpdateCommand%2A>ska skapas automatiskt.</xref:System.Data.IDbDataAdapter.UpdateCommand%2A> </xref:System.Data.DataSet> </xref:System.Data.Common.DbDataAdapter.Update%2A>"
  example:
  - "The following example creates the derived class <xref:System.Data.OleDb.OleDbDataAdapter> and sets some of its properties.  \n  \n [!code-cs[Classic WebData DbDataAdapter.UpdateCommand Example#1](~/add/codesnippet/csharp/p-system.data.common.dbd_2_1.cs)]\n [!code-vb[Classic WebData DbDataAdapter.UpdateCommand Example#1](~/add/codesnippet/visualbasic/p-system.data.common.dbd_2_1.vb)]"
  syntax:
    content: public System.Data.Common.DbCommand UpdateCommand { get; set; }
    return:
      type: System.Data.Common.DbCommand
      description: "En <xref href=&quot;System.Data.IDbCommand&quot;> </xref> används under <xref:System.Data.IDataAdapter.Update*>att uppdatera poster i datakällan för modifierade rader i datauppsättningen.</xref:System.Data.IDataAdapter.Update*>"
  overload: System.Data.Common.DbDataAdapter.UpdateCommand*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Data.Common.DataAdapter
  isExternal: false
  name: System.Data.Common.DataAdapter
- uid: System.NotSupportedException
  isExternal: true
  name: System.NotSupportedException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.SystemException
  parent: System
  isExternal: false
  name: SystemException
  nameWithType: SystemException
  fullName: System.SystemException
- uid: System.InvalidCastException
  isExternal: true
  name: System.InvalidCastException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.Data.DBConcurrencyException
  parent: System.Data
  isExternal: false
  name: DBConcurrencyException
  nameWithType: DBConcurrencyException
  fullName: System.Data.DBConcurrencyException
- uid: System.Data.Common.DbDataAdapter.#ctor
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: DbDataAdapter()
  nameWithType: DbDataAdapter.DbDataAdapter()
  fullName: System.Data.Common.DbDataAdapter.DbDataAdapter()
- uid: System.Data.Common.DbDataAdapter.#ctor(System.Data.Common.DbDataAdapter)
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: DbDataAdapter(DbDataAdapter)
  nameWithType: DbDataAdapter.DbDataAdapter(DbDataAdapter)
  fullName: System.Data.Common.DbDataAdapter.DbDataAdapter(DbDataAdapter)
- uid: System.Data.Common.DbDataAdapter
  parent: System.Data.Common
  isExternal: false
  name: DbDataAdapter
  nameWithType: DbDataAdapter
  fullName: System.Data.Common.DbDataAdapter
- uid: System.Data.Common.DbDataAdapter.AddToBatch(System.Data.IDbCommand)
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: AddToBatch(IDbCommand)
  nameWithType: DbDataAdapter.AddToBatch(IDbCommand)
  fullName: System.Data.Common.DbDataAdapter.AddToBatch(IDbCommand)
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Data.IDbCommand
  parent: System.Data
  isExternal: false
  name: IDbCommand
  nameWithType: IDbCommand
  fullName: System.Data.IDbCommand
- uid: System.Data.Common.DbDataAdapter.ClearBatch
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: ClearBatch()
  nameWithType: DbDataAdapter.ClearBatch()
  fullName: System.Data.Common.DbDataAdapter.ClearBatch()
- uid: System.Data.Common.DbDataAdapter.CreateRowUpdatedEvent(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: CreateRowUpdatedEvent(DataRow,IDbCommand,StatementType,DataTableMapping)
  nameWithType: DbDataAdapter.CreateRowUpdatedEvent(DataRow,IDbCommand,StatementType,DataTableMapping)
  fullName: System.Data.Common.DbDataAdapter.CreateRowUpdatedEvent(DataRow,IDbCommand,StatementType,DataTableMapping)
- uid: System.Data.Common.RowUpdatedEventArgs
  parent: System.Data.Common
  isExternal: false
  name: RowUpdatedEventArgs
  nameWithType: RowUpdatedEventArgs
  fullName: System.Data.Common.RowUpdatedEventArgs
- uid: System.Data.DataRow
  parent: System.Data
  isExternal: false
  name: DataRow
  nameWithType: DataRow
  fullName: System.Data.DataRow
- uid: System.Data.StatementType
  parent: System.Data
  isExternal: false
  name: StatementType
  nameWithType: StatementType
  fullName: System.Data.StatementType
- uid: System.Data.Common.DataTableMapping
  parent: System.Data.Common
  isExternal: false
  name: DataTableMapping
  nameWithType: DataTableMapping
  fullName: System.Data.Common.DataTableMapping
- uid: System.Data.Common.DbDataAdapter.CreateRowUpdatingEvent(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: CreateRowUpdatingEvent(DataRow,IDbCommand,StatementType,DataTableMapping)
  nameWithType: DbDataAdapter.CreateRowUpdatingEvent(DataRow,IDbCommand,StatementType,DataTableMapping)
  fullName: System.Data.Common.DbDataAdapter.CreateRowUpdatingEvent(DataRow,IDbCommand,StatementType,DataTableMapping)
- uid: System.Data.Common.RowUpdatingEventArgs
  parent: System.Data.Common
  isExternal: false
  name: RowUpdatingEventArgs
  nameWithType: RowUpdatingEventArgs
  fullName: System.Data.Common.RowUpdatingEventArgs
- uid: System.Data.Common.DbDataAdapter.DefaultSourceTableName
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: DefaultSourceTableName
  nameWithType: DbDataAdapter.DefaultSourceTableName
  fullName: System.Data.Common.DbDataAdapter.DefaultSourceTableName
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Data.Common.DbDataAdapter.DeleteCommand
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: DeleteCommand
  nameWithType: DbDataAdapter.DeleteCommand
  fullName: System.Data.Common.DbDataAdapter.DeleteCommand
- uid: System.Data.Common.DbCommand
  parent: System.Data.Common
  isExternal: false
  name: DbCommand
  nameWithType: DbCommand
  fullName: System.Data.Common.DbCommand
- uid: System.Data.Common.DbDataAdapter.Dispose(System.Boolean)
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: DbDataAdapter.Dispose(Boolean)
  fullName: System.Data.Common.DbDataAdapter.Dispose(Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Data.Common.DbDataAdapter.ExecuteBatch
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: ExecuteBatch()
  nameWithType: DbDataAdapter.ExecuteBatch()
  fullName: System.Data.Common.DbDataAdapter.ExecuteBatch()
- uid: System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet)
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: Fill(DataSet)
  nameWithType: DbDataAdapter.Fill(DataSet)
  fullName: System.Data.Common.DbDataAdapter.Fill(DataSet)
- uid: System.Data.DataSet
  parent: System.Data
  isExternal: false
  name: DataSet
  nameWithType: DataSet
  fullName: System.Data.DataSet
- uid: System.Data.Common.DbDataAdapter.Fill(System.Data.DataTable)
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: Fill(DataTable)
  nameWithType: DbDataAdapter.Fill(DataTable)
  fullName: System.Data.Common.DbDataAdapter.Fill(DataTable)
- uid: System.Data.DataTable
  parent: System.Data
  isExternal: false
  name: DataTable
  nameWithType: DataTable
  fullName: System.Data.DataTable
- uid: System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet,System.String)
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: Fill(DataSet,String)
  nameWithType: DbDataAdapter.Fill(DataSet,String)
  fullName: System.Data.Common.DbDataAdapter.Fill(DataSet,String)
- uid: System.Data.Common.DbDataAdapter.Fill(System.Data.DataTable,System.Data.IDbCommand,System.Data.CommandBehavior)
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: Fill(DataTable,IDbCommand,CommandBehavior)
  nameWithType: DbDataAdapter.Fill(DataTable,IDbCommand,CommandBehavior)
  fullName: System.Data.Common.DbDataAdapter.Fill(DataTable,IDbCommand,CommandBehavior)
- uid: System.Data.CommandBehavior
  parent: System.Data
  isExternal: false
  name: CommandBehavior
  nameWithType: CommandBehavior
  fullName: System.Data.CommandBehavior
- uid: System.Data.Common.DbDataAdapter.Fill(System.Int32,System.Int32,System.Data.DataTable[])
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: Fill(Int32,Int32,DataTable[])
  nameWithType: DbDataAdapter.Fill(Int32,Int32,DataTable[])
  fullName: System.Data.Common.DbDataAdapter.Fill(Int32,Int32,DataTable[])
- uid: System.Data.DataTable[]
  parent: System.Data
  isExternal: false
  name: DataTable
  nameWithType: DataTable
  fullName: System.Data.DataTable[]
  spec.csharp:
  - uid: System.Data.DataTable
    name: DataTable
    nameWithType: DataTable
    fullName: DataTable[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet,System.Int32,System.Int32,System.String)
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: Fill(DataSet,Int32,Int32,String)
  nameWithType: DbDataAdapter.Fill(DataSet,Int32,Int32,String)
  fullName: System.Data.Common.DbDataAdapter.Fill(DataSet,Int32,Int32,String)
- uid: System.Data.Common.DbDataAdapter.Fill(System.Data.DataTable[],System.Int32,System.Int32,System.Data.IDbCommand,System.Data.CommandBehavior)
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: Fill(DataTable[],Int32,Int32,IDbCommand,CommandBehavior)
  nameWithType: DbDataAdapter.Fill(DataTable[],Int32,Int32,IDbCommand,CommandBehavior)
  fullName: System.Data.Common.DbDataAdapter.Fill(DataTable[],Int32,Int32,IDbCommand,CommandBehavior)
- uid: System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet,System.Int32,System.Int32,System.String,System.Data.IDbCommand,System.Data.CommandBehavior)
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: Fill(DataSet,Int32,Int32,String,IDbCommand,CommandBehavior)
  nameWithType: DbDataAdapter.Fill(DataSet,Int32,Int32,String,IDbCommand,CommandBehavior)
  fullName: System.Data.Common.DbDataAdapter.Fill(DataSet,Int32,Int32,String,IDbCommand,CommandBehavior)
- uid: System.Data.Common.DbDataAdapter.FillCommandBehavior
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: FillCommandBehavior
  nameWithType: DbDataAdapter.FillCommandBehavior
  fullName: System.Data.Common.DbDataAdapter.FillCommandBehavior
- uid: System.Data.Common.DbDataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType)
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: FillSchema(DataSet,SchemaType)
  nameWithType: DbDataAdapter.FillSchema(DataSet,SchemaType)
  fullName: System.Data.Common.DbDataAdapter.FillSchema(DataSet,SchemaType)
- uid: System.Data.SchemaType
  parent: System.Data
  isExternal: false
  name: SchemaType
  nameWithType: SchemaType
  fullName: System.Data.SchemaType
- uid: System.Data.Common.DbDataAdapter.FillSchema(System.Data.DataTable,System.Data.SchemaType)
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: FillSchema(DataTable,SchemaType)
  nameWithType: DbDataAdapter.FillSchema(DataTable,SchemaType)
  fullName: System.Data.Common.DbDataAdapter.FillSchema(DataTable,SchemaType)
- uid: System.Data.Common.DbDataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType,System.String)
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: FillSchema(DataSet,SchemaType,String)
  nameWithType: DbDataAdapter.FillSchema(DataSet,SchemaType,String)
  fullName: System.Data.Common.DbDataAdapter.FillSchema(DataSet,SchemaType,String)
- uid: System.Data.Common.DbDataAdapter.FillSchema(System.Data.DataTable,System.Data.SchemaType,System.Data.IDbCommand,System.Data.CommandBehavior)
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: FillSchema(DataTable,SchemaType,IDbCommand,CommandBehavior)
  nameWithType: DbDataAdapter.FillSchema(DataTable,SchemaType,IDbCommand,CommandBehavior)
  fullName: System.Data.Common.DbDataAdapter.FillSchema(DataTable,SchemaType,IDbCommand,CommandBehavior)
- uid: System.Data.Common.DbDataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType,System.Data.IDbCommand,System.String,System.Data.CommandBehavior)
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: FillSchema(DataSet,SchemaType,IDbCommand,String,CommandBehavior)
  nameWithType: DbDataAdapter.FillSchema(DataSet,SchemaType,IDbCommand,String,CommandBehavior)
  fullName: System.Data.Common.DbDataAdapter.FillSchema(DataSet,SchemaType,IDbCommand,String,CommandBehavior)
- uid: System.Data.Common.DbDataAdapter.GetBatchedParameter(System.Int32,System.Int32)
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: GetBatchedParameter(Int32,Int32)
  nameWithType: DbDataAdapter.GetBatchedParameter(Int32,Int32)
  fullName: System.Data.Common.DbDataAdapter.GetBatchedParameter(Int32,Int32)
- uid: System.Data.IDataParameter
  parent: System.Data
  isExternal: false
  name: IDataParameter
  nameWithType: IDataParameter
  fullName: System.Data.IDataParameter
- uid: System.Data.Common.DbDataAdapter.GetBatchedRecordsAffected(System.Int32,System.Int32@,System.Exception@)
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: GetBatchedRecordsAffected(Int32,Int32,Exception)
  nameWithType: DbDataAdapter.GetBatchedRecordsAffected(Int32,Int32,Exception)
  fullName: System.Data.Common.DbDataAdapter.GetBatchedRecordsAffected(Int32,Int32,Exception)
- uid: System.Exception
  parent: System
  isExternal: true
  name: Exception
  nameWithType: Exception
  fullName: System.Exception
- uid: System.Data.Common.DbDataAdapter.GetFillParameters
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: GetFillParameters()
  nameWithType: DbDataAdapter.GetFillParameters()
  fullName: System.Data.Common.DbDataAdapter.GetFillParameters()
- uid: System.Data.IDataParameter[]
  parent: System.Data
  isExternal: false
  name: IDataParameter
  nameWithType: IDataParameter
  fullName: System.Data.IDataParameter[]
  spec.csharp:
  - uid: System.Data.IDataParameter
    name: IDataParameter
    nameWithType: IDataParameter
    fullName: IDataParameter[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Data.Common.DbDataAdapter.InitializeBatching
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: InitializeBatching()
  nameWithType: DbDataAdapter.InitializeBatching()
  fullName: System.Data.Common.DbDataAdapter.InitializeBatching()
- uid: System.Data.Common.DbDataAdapter.InsertCommand
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: InsertCommand
  nameWithType: DbDataAdapter.InsertCommand
  fullName: System.Data.Common.DbDataAdapter.InsertCommand
- uid: System.Data.Common.DbDataAdapter.OnRowUpdated(System.Data.Common.RowUpdatedEventArgs)
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: OnRowUpdated(RowUpdatedEventArgs)
  nameWithType: DbDataAdapter.OnRowUpdated(RowUpdatedEventArgs)
  fullName: System.Data.Common.DbDataAdapter.OnRowUpdated(RowUpdatedEventArgs)
- uid: System.Data.Common.DbDataAdapter.OnRowUpdating(System.Data.Common.RowUpdatingEventArgs)
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: OnRowUpdating(RowUpdatingEventArgs)
  nameWithType: DbDataAdapter.OnRowUpdating(RowUpdatingEventArgs)
  fullName: System.Data.Common.DbDataAdapter.OnRowUpdating(RowUpdatingEventArgs)
- uid: System.Data.Common.DbDataAdapter.SelectCommand
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: SelectCommand
  nameWithType: DbDataAdapter.SelectCommand
  fullName: System.Data.Common.DbDataAdapter.SelectCommand
- uid: System.Data.Common.DbDataAdapter.System#Data#IDbDataAdapter#DeleteCommand
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: System.Data.IDbDataAdapter.DeleteCommand
  nameWithType: DbDataAdapter.System.Data.IDbDataAdapter.DeleteCommand
  fullName: System.Data.Common.DbDataAdapter.System.Data.IDbDataAdapter.DeleteCommand
- uid: System.Data.Common.DbDataAdapter.System#Data#IDbDataAdapter#InsertCommand
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: System.Data.IDbDataAdapter.InsertCommand
  nameWithType: DbDataAdapter.System.Data.IDbDataAdapter.InsertCommand
  fullName: System.Data.Common.DbDataAdapter.System.Data.IDbDataAdapter.InsertCommand
- uid: System.Data.Common.DbDataAdapter.System#Data#IDbDataAdapter#SelectCommand
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: System.Data.IDbDataAdapter.SelectCommand
  nameWithType: DbDataAdapter.System.Data.IDbDataAdapter.SelectCommand
  fullName: System.Data.Common.DbDataAdapter.System.Data.IDbDataAdapter.SelectCommand
- uid: System.Data.Common.DbDataAdapter.System#Data#IDbDataAdapter#UpdateCommand
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: System.Data.IDbDataAdapter.UpdateCommand
  nameWithType: DbDataAdapter.System.Data.IDbDataAdapter.UpdateCommand
  fullName: System.Data.Common.DbDataAdapter.System.Data.IDbDataAdapter.UpdateCommand
- uid: System.Data.Common.DbDataAdapter.System#ICloneable#Clone
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: System.ICloneable.Clone()
  nameWithType: DbDataAdapter.System.ICloneable.Clone()
  fullName: System.Data.Common.DbDataAdapter.System.ICloneable.Clone()
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Data.Common.DbDataAdapter.TerminateBatching
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: TerminateBatching()
  nameWithType: DbDataAdapter.TerminateBatching()
  fullName: System.Data.Common.DbDataAdapter.TerminateBatching()
- uid: System.Data.Common.DbDataAdapter.Update(System.Data.DataRow[])
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: Update(DataRow[])
  nameWithType: DbDataAdapter.Update(DataRow[])
  fullName: System.Data.Common.DbDataAdapter.Update(DataRow[])
- uid: System.Data.DataRow[]
  parent: System.Data
  isExternal: false
  name: DataRow
  nameWithType: DataRow
  fullName: System.Data.DataRow[]
  spec.csharp:
  - uid: System.Data.DataRow
    name: DataRow
    nameWithType: DataRow
    fullName: DataRow[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: Update(DataSet)
  nameWithType: DbDataAdapter.Update(DataSet)
  fullName: System.Data.Common.DbDataAdapter.Update(DataSet)
- uid: System.Data.Common.DbDataAdapter.Update(System.Data.DataTable)
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: Update(DataTable)
  nameWithType: DbDataAdapter.Update(DataTable)
  fullName: System.Data.Common.DbDataAdapter.Update(DataTable)
- uid: System.Data.Common.DbDataAdapter.Update(System.Data.DataRow[],System.Data.Common.DataTableMapping)
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: Update(DataRow[],DataTableMapping)
  nameWithType: DbDataAdapter.Update(DataRow[],DataTableMapping)
  fullName: System.Data.Common.DbDataAdapter.Update(DataRow[],DataTableMapping)
- uid: System.Data.Common.DbDataAdapter.Update(System.Data.DataSet,System.String)
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: Update(DataSet,String)
  nameWithType: DbDataAdapter.Update(DataSet,String)
  fullName: System.Data.Common.DbDataAdapter.Update(DataSet,String)
- uid: System.Data.Common.DbDataAdapter.UpdateBatchSize
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: UpdateBatchSize
  nameWithType: DbDataAdapter.UpdateBatchSize
  fullName: System.Data.Common.DbDataAdapter.UpdateBatchSize
- uid: System.Data.Common.DbDataAdapter.UpdateCommand
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: UpdateCommand
  nameWithType: DbDataAdapter.UpdateCommand
  fullName: System.Data.Common.DbDataAdapter.UpdateCommand
- uid: System.Data.Common.DbDataAdapter.#ctor*
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: DbDataAdapter
  nameWithType: DbDataAdapter.DbDataAdapter
- uid: System.Data.Common.DbDataAdapter.AddToBatch*
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: AddToBatch
  nameWithType: DbDataAdapter.AddToBatch
- uid: System.Data.Common.DbDataAdapter.ClearBatch*
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: ClearBatch
  nameWithType: DbDataAdapter.ClearBatch
- uid: System.Data.Common.DbDataAdapter.CreateRowUpdatedEvent*
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: CreateRowUpdatedEvent
  nameWithType: DbDataAdapter.CreateRowUpdatedEvent
- uid: System.Data.Common.DbDataAdapter.CreateRowUpdatingEvent*
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: CreateRowUpdatingEvent
  nameWithType: DbDataAdapter.CreateRowUpdatingEvent
- uid: System.Data.Common.DbDataAdapter.DeleteCommand*
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: DeleteCommand
  nameWithType: DbDataAdapter.DeleteCommand
- uid: System.Data.Common.DbDataAdapter.Dispose*
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: Dispose
  nameWithType: DbDataAdapter.Dispose
- uid: System.Data.Common.DbDataAdapter.ExecuteBatch*
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: ExecuteBatch
  nameWithType: DbDataAdapter.ExecuteBatch
- uid: System.Data.Common.DbDataAdapter.Fill*
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: Fill
  nameWithType: DbDataAdapter.Fill
- uid: System.Data.Common.DbDataAdapter.FillCommandBehavior*
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: FillCommandBehavior
  nameWithType: DbDataAdapter.FillCommandBehavior
- uid: System.Data.Common.DbDataAdapter.FillSchema*
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: FillSchema
  nameWithType: DbDataAdapter.FillSchema
- uid: System.Data.Common.DbDataAdapter.GetBatchedParameter*
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: GetBatchedParameter
  nameWithType: DbDataAdapter.GetBatchedParameter
- uid: System.Data.Common.DbDataAdapter.GetBatchedRecordsAffected*
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: GetBatchedRecordsAffected
  nameWithType: DbDataAdapter.GetBatchedRecordsAffected
- uid: System.Data.Common.DbDataAdapter.GetFillParameters*
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: GetFillParameters
  nameWithType: DbDataAdapter.GetFillParameters
- uid: System.Data.Common.DbDataAdapter.InitializeBatching*
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: InitializeBatching
  nameWithType: DbDataAdapter.InitializeBatching
- uid: System.Data.Common.DbDataAdapter.InsertCommand*
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: InsertCommand
  nameWithType: DbDataAdapter.InsertCommand
- uid: System.Data.Common.DbDataAdapter.OnRowUpdated*
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: OnRowUpdated
  nameWithType: DbDataAdapter.OnRowUpdated
- uid: System.Data.Common.DbDataAdapter.OnRowUpdating*
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: OnRowUpdating
  nameWithType: DbDataAdapter.OnRowUpdating
- uid: System.Data.Common.DbDataAdapter.SelectCommand*
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: SelectCommand
  nameWithType: DbDataAdapter.SelectCommand
- uid: System.Data.Common.DbDataAdapter.System#Data#IDbDataAdapter#DeleteCommand*
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: System.Data.IDbDataAdapter.DeleteCommand
  nameWithType: DbDataAdapter.System.Data.IDbDataAdapter.DeleteCommand
- uid: System.Data.Common.DbDataAdapter.System#Data#IDbDataAdapter#InsertCommand*
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: System.Data.IDbDataAdapter.InsertCommand
  nameWithType: DbDataAdapter.System.Data.IDbDataAdapter.InsertCommand
- uid: System.Data.Common.DbDataAdapter.System#Data#IDbDataAdapter#SelectCommand*
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: System.Data.IDbDataAdapter.SelectCommand
  nameWithType: DbDataAdapter.System.Data.IDbDataAdapter.SelectCommand
- uid: System.Data.Common.DbDataAdapter.System#Data#IDbDataAdapter#UpdateCommand*
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: System.Data.IDbDataAdapter.UpdateCommand
  nameWithType: DbDataAdapter.System.Data.IDbDataAdapter.UpdateCommand
- uid: System.Data.Common.DbDataAdapter.System#ICloneable#Clone*
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: System.ICloneable.Clone
  nameWithType: DbDataAdapter.System.ICloneable.Clone
- uid: System.Data.Common.DbDataAdapter.TerminateBatching*
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: TerminateBatching
  nameWithType: DbDataAdapter.TerminateBatching
- uid: System.Data.Common.DbDataAdapter.Update*
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: Update
  nameWithType: DbDataAdapter.Update
- uid: System.Data.Common.DbDataAdapter.UpdateBatchSize*
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: UpdateBatchSize
  nameWithType: DbDataAdapter.UpdateBatchSize
- uid: System.Data.Common.DbDataAdapter.UpdateCommand*
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: UpdateCommand
  nameWithType: DbDataAdapter.UpdateCommand
