### YamlMime:ManagedReference
items:
- uid: System.Security.Policy.EvidenceBase
  id: EvidenceBase
  children:
  - System.Security.Policy.EvidenceBase.#ctor
  - System.Security.Policy.EvidenceBase.Clone
  langs:
  - csharp
  name: EvidenceBase
  nameWithType: EvidenceBase
  fullName: System.Security.Policy.EvidenceBase
  type: Class
  summary: "Ger en basklass från vilken alla objekt som ska användas som bevis måste vara härledd."
  remarks: "Innan den [!INCLUDE[net_v40_long](~/add/includes/net-v40-long-md.md)], nästan alla objekt som kan användas som ett bevis-objekt om värd koden vill använda den som bevis. Till exempel .NET Framework kod identifieras <xref:System.Uri?displayProperty=fullName>objekt som bevis.</xref:System.Uri?displayProperty=fullName> Common language runtime (CLR) betraktas som bevis objekt som <xref:System.Object?displayProperty=fullName>refererar till och tillämpade inte någon av typsäkerhet för dem.</xref:System.Object?displayProperty=fullName>       Detta visas ett problem Eftersom det fanns implicit begränsningar som typer kan användas som bevis objekt. Mer specifikt alla objekt som används som bevis måste kunna serialiseras och gick inte att `null`. Om dessa krav inte uppfylldes utlöste CLR ett undantag när en åtgärd som krävs för en av dessa antagande utfördes.       Klassen EvidenceBase, som alla objekt som bevis måste härledas från, som introducerades i den [!INCLUDE[net_v40_short](~/add/includes/net-v40-short-md.md)] att aktivera begränsningar för vilka typer av objekt som kan användas som bevis och ger möjlighet att lägga till nya funktioner och krav för alla objekt som bevis. Klassen EvidenceBase garanterar, vid instansiering, att objektet bevis kan serialiseras. Dessutom möjliggör nya bevis krav skapas genom att lägga till nya standardimplementeringar basklassen.       Alla typer som används av CLR som bevis objekt har uppdaterats i den [!INCLUDE[net_v40_short](~/add/includes/net-v40-short-md.md)] vara härledda från EvidenceBase."
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public abstract class EvidenceBase
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Security.Policy.EvidenceBase.#ctor
  id: '#ctor'
  parent: System.Security.Policy.EvidenceBase
  langs:
  - csharp
  name: EvidenceBase()
  nameWithType: EvidenceBase.EvidenceBase()
  fullName: System.Security.Policy.EvidenceBase.EvidenceBase()
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Policy
  summary: "Initierar en ny instans av den <xref href=&quot;System.Security.Policy.EvidenceBase&quot;> </xref> klass."
  remarks: "Alla objekt som ska användas som bevis måste kunna serialiseras. Du måste markera alla härledda typer som kan serialiseras, eftersom attributet serialiseras inte replikerats till härledda klasser."
  syntax:
    content: protected EvidenceBase ();
    parameters: []
  overload: System.Security.Policy.EvidenceBase.#ctor*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Ett objekt som ska användas som bevis kan inte serialiseras."
  platform:
  - net462
- uid: System.Security.Policy.EvidenceBase.Clone
  id: Clone
  parent: System.Security.Policy.EvidenceBase
  langs:
  - csharp
  name: Clone()
  nameWithType: EvidenceBase.Clone()
  fullName: System.Security.Policy.EvidenceBase.Clone()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Policy
  summary: "Skapar ett nytt objekt som är en fullständig kopia av den aktuella instansen."
  remarks: "Dubbla kopia är en fullständig kopia som innehåller alla bevis objekt i samlingen."
  syntax:
    content: public virtual System.Security.Policy.EvidenceBase Clone ();
    parameters: []
    return:
      type: System.Security.Policy.EvidenceBase
      description: "En kopia av det här bevis-objektet."
  overload: System.Security.Policy.EvidenceBase.Clone*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.Security.Policy.EvidenceBase.#ctor
  parent: System.Security.Policy.EvidenceBase
  isExternal: false
  name: EvidenceBase()
  nameWithType: EvidenceBase.EvidenceBase()
  fullName: System.Security.Policy.EvidenceBase.EvidenceBase()
- uid: System.Security.Policy.EvidenceBase.Clone
  parent: System.Security.Policy.EvidenceBase
  isExternal: false
  name: Clone()
  nameWithType: EvidenceBase.Clone()
  fullName: System.Security.Policy.EvidenceBase.Clone()
- uid: System.Security.Policy.EvidenceBase
  parent: System.Security.Policy
  isExternal: false
  name: EvidenceBase
  nameWithType: EvidenceBase
  fullName: System.Security.Policy.EvidenceBase
- uid: System.Security.Policy.EvidenceBase.#ctor*
  parent: System.Security.Policy.EvidenceBase
  isExternal: false
  name: EvidenceBase
  nameWithType: EvidenceBase.EvidenceBase
- uid: System.Security.Policy.EvidenceBase.Clone*
  parent: System.Security.Policy.EvidenceBase
  isExternal: false
  name: Clone
  nameWithType: EvidenceBase.Clone
