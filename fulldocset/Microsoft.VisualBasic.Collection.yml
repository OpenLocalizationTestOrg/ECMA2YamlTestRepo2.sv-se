### YamlMime:ManagedReference
items:
- uid: Microsoft.VisualBasic.Collection
  id: Collection
  children:
  - Microsoft.VisualBasic.Collection.#ctor
  - Microsoft.VisualBasic.Collection.Add(System.Object,System.String,System.Object,System.Object)
  - Microsoft.VisualBasic.Collection.Clear
  - Microsoft.VisualBasic.Collection.Contains(System.String)
  - Microsoft.VisualBasic.Collection.Count
  - Microsoft.VisualBasic.Collection.GetEnumerator
  - Microsoft.VisualBasic.Collection.Item(System.Int32)
  - Microsoft.VisualBasic.Collection.Item(System.Object)
  - Microsoft.VisualBasic.Collection.Item(System.String)
  - Microsoft.VisualBasic.Collection.Remove(System.Int32)
  - Microsoft.VisualBasic.Collection.Remove(System.String)
  - Microsoft.VisualBasic.Collection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  - Microsoft.VisualBasic.Collection.System#Collections#ICollection#ICollectionCount
  - Microsoft.VisualBasic.Collection.System#Collections#ICollection#ICollectionIsSynchronized
  - Microsoft.VisualBasic.Collection.System#Collections#ICollection#ICollectionSyncRoot
  - Microsoft.VisualBasic.Collection.System#Collections#IEnumerable#GetEnumerator
  - Microsoft.VisualBasic.Collection.System#Collections#IList#Add(System.Object)
  - Microsoft.VisualBasic.Collection.System#Collections#IList#Clear
  - Microsoft.VisualBasic.Collection.System#Collections#IList#Contains(System.Object)
  - Microsoft.VisualBasic.Collection.System#Collections#IList#IListIsFixedSize
  - Microsoft.VisualBasic.Collection.System#Collections#IList#IListIsReadOnly
  - Microsoft.VisualBasic.Collection.System#Collections#IList#IListItem(System.Int32)
  - Microsoft.VisualBasic.Collection.System#Collections#IList#IndexOf(System.Object)
  - Microsoft.VisualBasic.Collection.System#Collections#IList#Insert(System.Int32,System.Object)
  - Microsoft.VisualBasic.Collection.System#Collections#IList#Remove(System.Object)
  - Microsoft.VisualBasic.Collection.System#Collections#IList#RemoveAt(System.Int32)
  - Microsoft.VisualBasic.Collection.System#Runtime#Serialization#IDeserializationCallback#OnDeserialization(System.Object)
  - Microsoft.VisualBasic.Collection.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  langs:
  - csharp
  name: Collection
  nameWithType: Collection
  fullName: Microsoft.VisualBasic.Collection
  type: Class
  summary: "Ett Visual Basic <xref uid=&quot;langword_csharp_Collection&quot; name=&quot;Collection&quot; href=&quot;&quot;> </xref> är en ordnad uppsättning objekt som kan refereras till som en enhet."
  remarks: "> [!NOTE]> När det är möjligt bör du använda generiska samlingarna i den <xref:System.Collections.Generic?displayProperty=fullName>namnområde eller <xref:System.Collections.Concurrent>namnområde i stället för ett Visual Basic `Collection`.</xref:System.Collections.Concurrent> </xref:System.Collections.Generic?displayProperty=fullName> Mer information finns i [samlingar](~/add/includes/ajax-current-ext-md.md).       Visual Basic `Collection` objektet är ett bekvämt sätt att referera till en relaterad grupp med objekt som ett enskilt objekt. Objekt eller *element*i en samling behöver bara relaterad av det faktum att de finns i samlingen. Element i en samling behöver inte dela samma datatyp.       Du kan skapa en samling på samma sätt som du skapar andra objekt, som i följande exempel visas.      ```   Dim coll As New Microsoft.VisualBasic.Collection()   ```När du har skapat en samling kan du göra något av följande:-Lägg till ett element med den <xref:Microsoft.VisualBasic.Collection.Add%2A>metoden.</xref:Microsoft.VisualBasic.Collection.Add%2A>      -Ta bort ett element med den <xref:Microsoft.VisualBasic.Collection.Remove%2A>metoden.</xref:Microsoft.VisualBasic.Collection.Remove%2A>      -Ta bort alla element med den <xref:Microsoft.VisualBasic.Collection.Clear%2A>metoden.</xref:Microsoft.VisualBasic.Collection.Clear%2A>      – Ta reda på hur många element i samlingen innehåller med den <xref:Microsoft.VisualBasic.Collection.Count%2A>egenskapen.</xref:Microsoft.VisualBasic.Collection.Count%2A>      -Kontrollera om det finns ett visst element med den <xref:Microsoft.VisualBasic.Collection.Contains%2A>metoden.</xref:Microsoft.VisualBasic.Collection.Contains%2A>      -Returnera ett visst element från samlingen med de <xref:Microsoft.VisualBasic.Collection.Item%2A>egenskap.</xref:Microsoft.VisualBasic.Collection.Item%2A>      -Gå igenom hela samlingen med de [för varje... Nästa instruktionen](~/add/includes/ajax-current-ext-md.md).          > [!NOTE] > Även om Visual Basic `Collection` objekt har funktioner som är identisk med den `Collection` objekt i Visual Basic 6.0, två inte kan användas tillsammans i en COM-miljö.          > [!CAUTION] > Söka igenom en Visual Basic `Collection` är inte en trådsäker procedur. Även om samlingen synkroniseras ändra andra trådar fortfarande samlingen orsakar uppräknaren att utlösa ett undantag. Om du vill garantera tråd under uppräkning, låsa samlingen eller fånga undantag som uppstår till följd av ändringar som gjorts av andra trådar. Mer information om hur du låser en programmeringselement finns [SyncLock-instruktion](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following example creates the `Collection` object `names` and a dialog box with which a user can add objects (names) to the collection. It then displays the names in the collection, and finally empties the collection without disposing of the `Collection` object itself.  \n  \n To see how this works, choose the **Add Class** command from the **Project** menu and declare a public variable called `instanceName` at the module level of `nameClass` (type `Public instanceName`) to hold the names of each instance. Leave the default name as `nameClass`. Copy and paste the following code into the **General** section of another module, and then start it with the statement `classNamer` in another procedure. (This example works only with host applications that support classes.)  \n  \n [!code-vb[VbVbalrCollectionObject#1](~/add/codesnippet/visualbasic/VbVbalrCollectionObject/Class1.vb#1)]"
  syntax:
    content: >-
      [System.Diagnostics.DebuggerDisplay("Count = {Count}")]

      [System.Diagnostics.DebuggerTypeProxy(typeof(Microsoft.VisualBasic.Collection/CollectionDebugView))]

      public sealed class Collection : System.Collections.IList, System.Runtime.Serialization.IDeserializationCallback, System.Runtime.Serialization.ISerializable
  inheritance:
  - System.Object
  implements:
  - System.Collections.IList
  - System.Runtime.Serialization.IDeserializationCallback
  - System.Runtime.Serialization.ISerializable
  inheritedMembers: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Collection.#ctor
  id: '#ctor'
  parent: Microsoft.VisualBasic.Collection
  langs:
  - csharp
  name: Collection()
  nameWithType: Collection.Collection()
  fullName: Microsoft.VisualBasic.Collection.Collection()
  type: Constructor
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Skapar och returnerar en ny [!INCLUDE[vbprvb](~/add/includes/vbprvb-md.md)] <xref href=&quot;Microsoft.VisualBasic.Collection&quot;> </xref> objekt."
  remarks: "Den [!INCLUDE[vbprvb](~/add/includes/vbprvb-md.md)] samling som returneras av den här konstruktorn är tom och inte har några inledande kapacitet som tilldelas.       [!INCLUDE[vbprvb](~/add/includes/vbprvb-md.md)]samlingar är inte kompatibla med den [!INCLUDE[dnprdnshort](~/add/includes/dnprdnshort-md.md)] samlingar som är tillgängliga i den <xref:System.Collections?displayProperty=fullName>, <xref:System.Collections.Generic?displayProperty=fullName>, och <xref:System.Collections.Specialized?displayProperty=fullName>namnområden.</xref:System.Collections.Specialized?displayProperty=fullName> </xref:System.Collections.Generic?displayProperty=fullName> </xref:System.Collections?displayProperty=fullName>"
  example:
  - "The following example creates a new [!INCLUDE[vbprvb](~/add/includes/vbprvb-md.md)] collection and assigns it to the variable `coll`:  \n  \n```  \nDim coll As New Microsoft.VisualBasic.Collection()  \n```  \n  \n This `Collection` object is one-based, which means that the index values of the elements range from 1 through the value of the `Count` property. [!INCLUDE[vbprvb](~/add/includes/vbprvb-md.md)] collections hold elements of type <xref:System.Object>."
  syntax:
    content: public Collection ();
    parameters: []
  overload: Microsoft.VisualBasic.Collection.#ctor*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Collection.Add(System.Object,System.String,System.Object,System.Object)
  id: Add(System.Object,System.String,System.Object,System.Object)
  parent: Microsoft.VisualBasic.Collection
  langs:
  - csharp
  name: Add(Object,String,Object,Object)
  nameWithType: Collection.Add(Object,String,Object,Object)
  fullName: Microsoft.VisualBasic.Collection.Add(Object,String,Object,Object)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Lägger till ett element till ett <xref uid=&quot;langword_csharp_Collection&quot; name=&quot;Collection&quot; href=&quot;&quot;> </xref> objekt."
  remarks: "Den `Before` eller `After` argumentet måste referera till ett befintligt element i mängden; Annars uppstår ett fel.       Om både den `Before` och `After` argument har uteslutits nytt objekt läggs till i slutet av samlingen.       Ett fel inträffar om en angiven `Key` värde som matchar nyckeln för ett befintligt element i mängden."
  example:
  - "The following example uses the `Add` method to add `child` objects — instances of a class called `child` containing a `Public` property `name` — to a collection called `family`. To see how this works, create a <xref:System.Windows.Forms.Form> with two <xref:System.Windows.Forms.Button> controls and set their <xref:System.Windows.Forms.Control.Text%2A> properties to `Add` and `List`. Add the `child` class definition and the `family` declaration to the form code. Modify the `_Click` event handlers for the **Add** and **List** buttons as shown. The **Add** button allows you to add children. The **List** button displays the names of all the children.  \n  \n [!code-vb[VbVbalrCollectionObject#2](~/add/codesnippet/visualbasic/VbVbalrCollectionObject/Form1.vb#2)]"
  syntax:
    content: public void Add (object Item, string Key = null, object Before = null, object After = null);
    parameters:
    - id: Item
      type: System.Object
      description: "Obligatoriskt. Ett objekt av en annan typ som anger elementet du vill lägga till i samlingen."
    - id: Key
      type: System.String
      description: "Valfritt. En unik <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> uttryck som anger en nyckelsträng som kan användas i stället för ett namngivna index för att få åtkomst till den här nya element i samlingen."
    - id: Before
      type: System.Object
      description: "Valfritt. Ett uttryck som anger en relativ placering i samlingen. Elementet som ska läggas till är placerad i samlingen innan det element som identifieras av den `Before` argumentet. Om `Before` är ett numeriskt uttryck, det måste vara ett tal mellan 1 och värdet i samlingen <xref:Microsoft.VisualBasic.Collection.Count*>egenskap.</xref:Microsoft.VisualBasic.Collection.Count*> Om `Before` är en <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> uttryck, den måste motsvara viktiga strängen som anges när det element som det hänvisas till lades till i samlingen. Du kan inte ange båda `Before` och `After`."
    - id: After
      type: System.Object
      description: "Valfritt. Ett uttryck som anger en relativ placering i samlingen. Objekt som ska läggas till placeras i samlingen efter det element som identifieras av den `After` argumentet. Om `After` är ett numeriskt uttryck, det måste vara ett tal mellan 1 och värdet i samlingen <xref uid=&quot;langword_csharp_Count&quot; name=&quot;Count&quot; href=&quot;&quot;> </xref> egenskapen. Om `After` är en <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> uttryck, den måste motsvara viktiga strängen som anges när elementet som anges har lagts till i samlingen. Du kan inte ange båda `Before` och `After`."
  overload: Microsoft.VisualBasic.Collection.Add*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Collection.Clear
  id: Clear
  parent: Microsoft.VisualBasic.Collection
  langs:
  - csharp
  name: Clear()
  nameWithType: Collection.Clear()
  fullName: Microsoft.VisualBasic.Collection.Clear()
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Tar bort alla element i ett Visual Basic <xref uid=&quot;langword_csharp_Collection&quot; name=&quot;Collection&quot; href=&quot;&quot;> </xref> objekt."
  remarks: "Den `Clear` metoden tömmer samlingen och återställer dess <xref:Microsoft.VisualBasic.Collection.Count%2A>egenskapen till 0.</xref:Microsoft.VisualBasic.Collection.Count%2A>"
  example:
  - '[!code-vb[VbVbalrCollectionObject#3](~/add/codesnippet/visualbasic/VbVbalrCollectionObject/Class1.vb#3)]'
  syntax:
    content: public void Clear ();
    parameters: []
  overload: Microsoft.VisualBasic.Collection.Clear*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Collection.Contains(System.String)
  id: Contains(System.String)
  parent: Microsoft.VisualBasic.Collection
  langs:
  - csharp
  name: Contains(String)
  nameWithType: Collection.Contains(String)
  fullName: Microsoft.VisualBasic.Collection.Contains(String)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Returnerar en <xref uid=&quot;langword_csharp_Boolean&quot; name=&quot;Boolean&quot; href=&quot;&quot;> </xref> värde som anger om ett Visual Basic <xref uid=&quot;langword_csharp_Collection&quot; name=&quot;Collection&quot; href=&quot;&quot;> </xref> objekt innehåller ett element med en viss nyckel."
  remarks: "`Contains`Returnerar `True` om samlingen innehåller ett element med en nyckel som matchar exakt `Key`. Annars `Contains` returnerar `False`. När du matchar nyckelvärdena är inte.       Ett Visual Basic `Collection` kan innehålla vissa element som har nycklar och andra element utan nycklar. Detta beror på om anropet till den <xref:Microsoft.VisualBasic.Collection.Add%2A>metoden tillhandahåller ett argument för den valfria `Key` parameter.</xref:Microsoft.VisualBasic.Collection.Add%2A>"
  example:
  - "[!code-vb[VbVbalrCollectionObject#4](~/add/codesnippet/visualbasic/VbVbalrCollectionObject/Class1.vb#4)]  \n  \n If you intend to search the collection for elements using their keys, remember to supply the `Key` argument every time you call the `Add` method."
  syntax:
    content: public bool Contains (string Key);
    parameters:
    - id: Key
      type: System.String
      description: "Obligatoriskt. En <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> uttryck som anger den nyckel som du vill söka efter element i mängden."
    return:
      type: System.Boolean
      description: "Returnerar en <xref uid=&quot;langword_csharp_Boolean&quot; name=&quot;Boolean&quot; href=&quot;&quot;> </xref> värde som anger om ett Visual Basic <xref uid=&quot;langword_csharp_Collection&quot; name=&quot;Collection&quot; href=&quot;&quot;> </xref> objekt innehåller ett element med en viss nyckel."
  overload: Microsoft.VisualBasic.Collection.Contains*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Collection.Count
  id: Count
  parent: Microsoft.VisualBasic.Collection
  langs:
  - csharp
  name: Count
  nameWithType: Collection.Count
  fullName: Microsoft.VisualBasic.Collection.Count
  type: Property
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Returnerar en <xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;> </xref> som innehåller antalet element i en samling. Skrivskyddad."
  remarks: "Använd den `Count` egenskapen fastställa antalet element i en `Collection` objekt."
  example:
  - "This example illustrates the use of the `Count` property to display the number of elements in a <xref:Microsoft.VisualBasic.Collection> object in the variable `birthdays`.  \n  \n [!code-vb[VbVbalrCollectionObject#5](~/add/codesnippet/visualbasic/VbVbalrCollectionObject/Class1.vb#5)]  \n[!code-vb[VbVbalrCollectionObject#6](~/add/codesnippet/visualbasic/VbVbalrCollectionObject/Class1.vb#6)]  \n  \n The `Collection` object is one-based, which means that the index values of the elements range from 1 through the value of the `Count` property."
  syntax:
    content: public int Count { get; }
    return:
      type: System.Int32
      description: "Returnerar en <xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;> </xref> som innehåller antalet element i en samling. Skrivskyddad."
  overload: Microsoft.VisualBasic.Collection.Count*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Collection.GetEnumerator
  id: GetEnumerator
  parent: Microsoft.VisualBasic.Collection
  langs:
  - csharp
  name: GetEnumerator()
  nameWithType: Collection.GetEnumerator()
  fullName: Microsoft.VisualBasic.Collection.GetEnumerator()
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Returnerar en referens till en uppräknare-objekt som används för att iterera över en <xref href=&quot;Microsoft.VisualBasic.Collection&quot;> </xref> objekt."
  remarks: "Den [för varje... Nästa instruktionen](~/add/includes/ajax-current-ext-md.md) anrop `GetEnumerator` att hämta en uppräknare objekt om du vill stödja iteration över en samling element. Normalt använder du en `For Each`... `Next` loopen för att bläddra i en samling eller en matris och du inte behöver anropa `GetEnumerator` explicit.       Om du behöver närmare kontroll över iteration än den `For Each`... `Next` rapporterna ger, du kan använda den `GetEnumerator` metod för att utföra en anpassad traversal. Följande är några fall där du kan behöva göra detta.      -Du kanske vill gå tillbaka till början av samlingen och starta iteration igen innan den är klar.      -Du kanske vill hoppa över ett eller flera element för många olika skäl.      -Du kan behöva ändra element i mängden mitt i en överträdelse. I det här fallet måste du skaffa ett nytt uppräknare objekt eftersom föregående är ogiltiga."
  example:
  - "The following example shows how to use `GetEnumerator` to retrieve all the elements of a `Collection` object.  \n  \n [!code-vb[VbVbalrCollectionObject#7](~/add/codesnippet/visualbasic/VbVbalrCollectionObject/Class1.vb#7)]  \n  \n `GetEnumerator` constructs and returns an enumerator object, which implements the <xref:System.Collections.IEnumerator> interface of the <xref:System.Collections> namespace. The enumerator object exposes the <xref:System.Collections.IEnumerator.Current%2A> property and the <xref:System.Collections.IEnumerator.MoveNext%2A> and <xref:System.Collections.IEnumerator.Reset%2A> methods. For more information, see [For Each...Next Statement](../Topic/For%20Each...Next%20Statement%20\\(Visual%20Basic\\).md)."
  syntax:
    content: public System.Collections.IEnumerator GetEnumerator ();
    parameters: []
    return:
      type: System.Collections.IEnumerator
      description: "Returnerar en referens till en uppräknare-objekt som används för att iterera över en <xref href=&quot;Microsoft.VisualBasic.Collection&quot;> </xref> objekt."
  overload: Microsoft.VisualBasic.Collection.GetEnumerator*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Collection.Item(System.Int32)
  id: Item(System.Int32)
  parent: Microsoft.VisualBasic.Collection
  langs:
  - csharp
  name: Item(Int32)
  nameWithType: Collection.Item(Int32)
  fullName: Microsoft.VisualBasic.Collection.Item(Int32)
  type: Property
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Returnerar ett visst element i en <xref uid=&quot;langword_csharp_Collection&quot; name=&quot;Collection&quot; href=&quot;&quot;> </xref> objekt genom position eller nyckel. Skrivskyddad."
  remarks: "Om `Index` är av typen `Object`, `Item` egenskapen försöker behandla det som en `String`, `Char`, `Char` matris eller heltalsvärde. Om `Item` går inte att konvertera `Index` till `String` eller `Integer`, den utlöser en <xref:System.ArgumentException>undantag.</xref:System.ArgumentException>       Den `Item` egenskapen är standardinställningen för egenskapen för en samling. Därför är likvärdiga med följande rader med kod.      ```   MsgBox(CStr(customers.Item(1)))   MsgBox(CStr(customers(1)))   ```"
  example:
  - "The following example uses the `Item` property to retrieve a reference to an object in a collection. It creates `birthdays` as a `Collection` object and then retrieves the object representing Bill's birthday, using the key `\"Bill\"` as the `Index` argument.  \n  \n [!code-vb[VbVbalrCollectionObject#5](~/add/codesnippet/visualbasic/VbVbalrCollectionObject/Class1.vb#5)]  \n[!code-vb[VbVbalrCollectionObject#8](~/add/codesnippet/visualbasic/VbVbalrCollectionObject/Class1.vb#8)]  \n  \n Note that the first call explicitly specifies the `Item` property, but the second does not. Both calls work because the `Item` property is the default property for a `Collection` object."
  syntax:
    content: public object this[int Index] { get; }
    parameters:
    - id: Index
      type: System.Int32
      description: "(A) ett numeriskt uttryck som anger positionen för ett element i mängden. `Index`måste vara ett tal mellan 1 och värdet i samlingen <xref:Microsoft.VisualBasic.Collection.Count*>egenskap.</xref:Microsoft.VisualBasic.Collection.Count*> (B) eller en <xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;> </xref> uttryck som anger positionen eller nyckeln sträng med ett element i mängden."
    return:
      type: System.Object
      description: "Returnerar ett visst element i en <xref uid=&quot;langword_csharp_Collection&quot; name=&quot;Collection&quot; href=&quot;&quot;> </xref> objekt genom position eller nyckel. Skrivskyddad."
  overload: Microsoft.VisualBasic.Collection.Item*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Collection.Item(System.Object)
  id: Item(System.Object)
  parent: Microsoft.VisualBasic.Collection
  langs:
  - csharp
  name: Item(Object)
  nameWithType: Collection.Item(Object)
  fullName: Microsoft.VisualBasic.Collection.Item(Object)
  type: Property
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Returnerar ett visst element i en <xref uid=&quot;langword_csharp_Collection&quot; name=&quot;Collection&quot; href=&quot;&quot;> </xref> objekt genom position eller nyckel. Skrivskyddad."
  remarks: "Om `Index` är av typen `Object`, `Item` egenskapen försöker behandla det som en `String`, `Char`, `Char` matris eller heltalsvärde. Om `Item` går inte att konvertera `Index` till `String` eller `Integer`, den utlöser en <xref:System.ArgumentException>undantag.</xref:System.ArgumentException>       Den `Item` egenskapen är standardinställningen för egenskapen för en samling. Därför är likvärdiga med följande rader med kod.      ```   MsgBox(CStr(customers.Item(1)))   MsgBox(CStr(customers(1)))   ```"
  example:
  - "The following example uses the `Item` property to retrieve a reference to an object in a collection. It creates `birthdays` as a `Collection` object and then retrieves the object representing Bill's birthday, using the key `\"Bill\"` as the `Index` argument.  \n  \n [!code-vb[VbVbalrCollectionObject#5](~/add/codesnippet/visualbasic/VbVbalrCollectionObject/Class1.vb#5)]  \n[!code-vb[VbVbalrCollectionObject#8](~/add/codesnippet/visualbasic/VbVbalrCollectionObject/Class1.vb#8)]  \n  \n Note that the first call explicitly specifies the `Item` property, but the second does not. Both calls work because the `Item` property is the default property for a `Collection` object."
  syntax:
    content: public object this[object Index] { get; }
    parameters:
    - id: Index
      type: System.Object
      description: "(A) ett numeriskt uttryck som anger positionen för ett element i mängden. `Index`måste vara ett tal mellan 1 och värdet i samlingen <xref:Microsoft.VisualBasic.Collection.Count*>egenskap.</xref:Microsoft.VisualBasic.Collection.Count*> (B) eller en <xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;> </xref> uttryck som anger positionen eller nyckeln sträng med ett element i mängden."
    return:
      type: System.Object
      description: "Returnerar ett visst element i en <xref uid=&quot;langword_csharp_Collection&quot; name=&quot;Collection&quot; href=&quot;&quot;> </xref> objekt genom position eller nyckel. Skrivskyddad."
  overload: Microsoft.VisualBasic.Collection.Item*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Collection.Item(System.String)
  id: Item(System.String)
  parent: Microsoft.VisualBasic.Collection
  langs:
  - csharp
  name: Item(String)
  nameWithType: Collection.Item(String)
  fullName: Microsoft.VisualBasic.Collection.Item(String)
  type: Property
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Returnerar ett visst element i en <xref uid=&quot;langword_csharp_Collection&quot; name=&quot;Collection&quot; href=&quot;&quot;> </xref> objekt genom position eller nyckel. Skrivskyddad."
  remarks: "Om `Index` är av typen `Object`, `Item` egenskapen försöker behandla det som en `String`, `Char`, `Char` matris eller heltalsvärde. Om `Item` går inte att konvertera `Index` till `String` eller `Integer`, den utlöser en <xref:System.ArgumentException>undantag.</xref:System.ArgumentException>       Den `Item` egenskapen är standardinställningen för egenskapen för en samling. Därför är likvärdiga med följande rader med kod.      ```   MsgBox(CStr(customers.Item(1)))   MsgBox(CStr(customers(1)))   ```"
  example:
  - "The following example uses the `Item` property to retrieve a reference to an object in a collection. It creates `birthdays` as a `Collection` object and then retrieves the object representing Bill's birthday, using the key `\"Bill\"` as the `Index` argument.  \n  \n [!code-vb[VbVbalrCollectionObject#5](~/add/codesnippet/visualbasic/VbVbalrCollectionObject/Class1.vb#5)]  \n[!code-vb[VbVbalrCollectionObject#8](~/add/codesnippet/visualbasic/VbVbalrCollectionObject/Class1.vb#8)]  \n  \n Note that the first call explicitly specifies the `Item` property, but the second does not. Both calls work because the `Item` property is the default property for a `Collection` object."
  syntax:
    content: public object this[string Key] { get; }
    parameters:
    - id: Key
      type: System.String
      description: "En unik <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> uttryck som anger en nyckelsträng som kan användas, i stället för ett namngivna index till ett element i mängden. `Key`måste motsvara den `Key` argumentet anges när elementet har lagts till i samlingen."
    return:
      type: System.Object
      description: "Returnerar ett visst element i en <xref uid=&quot;langword_csharp_Collection&quot; name=&quot;Collection&quot; href=&quot;&quot;> </xref> objekt genom position eller nyckel. Skrivskyddad."
  overload: Microsoft.VisualBasic.Collection.Item*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Collection.Remove(System.Int32)
  id: Remove(System.Int32)
  parent: Microsoft.VisualBasic.Collection
  langs:
  - csharp
  name: Remove(Int32)
  nameWithType: Collection.Remove(Int32)
  fullName: Microsoft.VisualBasic.Collection.Remove(Int32)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Tar bort ett element från en <xref uid=&quot;langword_csharp_Collection&quot; name=&quot;Collection&quot; href=&quot;&quot;> </xref> objekt."
  remarks: "När `Remove` tar bort ett element från en samling det minskar mängdens <xref:Microsoft.VisualBasic.Collection.Count%2A>egenskap med ett.</xref:Microsoft.VisualBasic.Collection.Count%2A> Det minskar också den `Index` värdet för varje element som tidigare följt borttagna element i samlingen.       Om ett element har lagts till i samlingen utan ett `Key`, måste du använda dess `Index` att ta bort den."
  example:
  - "This example illustrates the use of the `Remove` method to remove objects from a <xref:Microsoft.VisualBasic.Collection> object in the variable `birthdays`.  \n  \n [!code-vb[VbVbalrCollectionObject#5](~/add/codesnippet/visualbasic/VbVbalrCollectionObject/Class1.vb#5)]  \n[!code-vb[VbVbalrCollectionObject#9](~/add/codesnippet/visualbasic/VbVbalrCollectionObject/Class1.vb#9)]  \n  \n Following the four calls to the `Add` method, the `Count` property contains 4, element `\"Bill\"` has index value 1, and element `\"Pete\"` has index value 4.  \n  \n Following the first call to `Remove`, `Count` is 3, element `\"Bill\"` is deleted, and element `\"Pete\"` has index value 3.  \n  \n Following the second call to `Remove`, `Count` is 2, element `\"Mike\"` is deleted, and element `\"Pete\"` has index value 2."
  syntax:
    content: public void Remove (int Index);
    parameters:
    - id: Index
      type: System.Int32
      description: "Ett numeriskt uttryck som anger positionen för ett element i mängden. `Index`måste vara ett tal mellan 1 och värdet i samlingen <xref:Microsoft.VisualBasic.Collection.Count*>egenskap.</xref:Microsoft.VisualBasic.Collection.Count*>"
  overload: Microsoft.VisualBasic.Collection.Remove*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Collection.Remove(System.String)
  id: Remove(System.String)
  parent: Microsoft.VisualBasic.Collection
  langs:
  - csharp
  name: Remove(String)
  nameWithType: Collection.Remove(String)
  fullName: Microsoft.VisualBasic.Collection.Remove(String)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Tar bort ett element från en <xref uid=&quot;langword_csharp_Collection&quot; name=&quot;Collection&quot; href=&quot;&quot;> </xref> objekt."
  remarks: "När `Remove` tar bort ett element från en samling det minskar mängdens <xref:Microsoft.VisualBasic.Collection.Count%2A>egenskap med ett.</xref:Microsoft.VisualBasic.Collection.Count%2A> Det minskar också den `Index` värdet för varje element som tidigare följt borttagna element i samlingen.       Om ett element har lagts till i samlingen utan ett `Key`, måste du använda dess `Index` att ta bort den."
  example:
  - "This example illustrates the use of the `Remove` method to remove objects from a <xref:Microsoft.VisualBasic.Collection> object in the variable `birthdays`.  \n  \n [!code-vb[VbVbalrCollectionObject#5](~/add/codesnippet/visualbasic/VbVbalrCollectionObject/Class1.vb#5)]  \n[!code-vb[VbVbalrCollectionObject#9](~/add/codesnippet/visualbasic/VbVbalrCollectionObject/Class1.vb#9)]  \n  \n Following the four calls to the `Add` method, the `Count` property contains 4, element `\"Bill\"` has index value 1, and element `\"Pete\"` has index value 4.  \n  \n Following the first call to `Remove`, `Count` is 3, element `\"Bill\"` is deleted, and element `\"Pete\"` has index value 3.  \n  \n Following the second call to `Remove`, `Count` is 2, element `\"Mike\"` is deleted, and element `\"Pete\"` has index value 2."
  syntax:
    content: public void Remove (string Key);
    parameters:
    - id: Key
      type: System.String
      description: "En unik <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> uttryck som anger en nyckelsträng som kan användas, i stället för ett namngivna index till ett element i mängden. `Key`måste motsvara den `Key` argumentet anges när elementet har lagts till i samlingen."
  overload: Microsoft.VisualBasic.Collection.Remove*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Collection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  id: System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  isEii: true
  parent: Microsoft.VisualBasic.Collection
  langs:
  - csharp
  name: System.Collections.ICollection.CopyTo(Array,Int32)
  nameWithType: Collection.System.Collections.ICollection.CopyTo(Array,Int32)
  fullName: Microsoft.VisualBasic.Collection.System.Collections.ICollection.CopyTo(Array,Int32)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Kopierar delarna av den <xref href=&quot;Microsoft.VisualBasic.Collection&quot;> </xref> till en <xref:System.Array>början från en viss <xref:System.Array>index.</xref:System.Array> </xref:System.Array> Implementerar den <xref:System.Collections.ICollection>gränssnitt.</xref:System.Collections.ICollection>"
  remarks: "Elementen kopieras till den <xref:System.Array>i samma ordning uppräknaren går exempelkoden igenom de <xref:Microsoft.VisualBasic.Collection>objekt.</xref:Microsoft.VisualBasic.Collection> </xref:System.Array>       Den här metoden är en O (`n`) igen, där `n` erhålls från <xref:Microsoft.VisualBasic.Collection.System%23Collections%23ICollection%23Count%2A>.</xref:Microsoft.VisualBasic.Collection.System%23Collections%23ICollection%23Count%2A>"
  syntax:
    content: void ICollection.CopyTo (Array array, int index);
    parameters:
    - id: array
      type: System.Array
      description: "Den endimensionell <xref:System.Array>som är mål för element som kopieras från <xref href=&quot;Microsoft.VisualBasic.Collection&quot;> </xref> objekt.</xref:System.Array> Den <xref:System.Array>måste ha Nollbaserad indexering.</xref:System.Array>"
    - id: index
      type: System.Int32
      description: "Det nollbaserade indexet i `array` vilka kopiera börjar."
  overload: Microsoft.VisualBasic.Collection.System#Collections#ICollection#CopyTo*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>array</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>index</code>är mindre än noll."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>array</code>är multidimensionell.       - eller - antalet element i källan <xref href=&quot;Microsoft.VisualBasic.Collection&quot;> </xref> objektet är större än det tillgängliga utrymmet från <code>index</code> till slutet av destinationen <code>array</code>."
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "Typ av källan <xref href=&quot;Microsoft.VisualBasic.Collection&quot;> </xref> objekt kan inte omvandlas automatiskt till typ av målet <code> array </code>."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Collection.System#Collections#ICollection#ICollectionCount
  id: System#Collections#ICollection#ICollectionCount
  isEii: true
  parent: Microsoft.VisualBasic.Collection
  langs:
  - csharp
  name: System.Collections.ICollection.ICollectionCount
  nameWithType: Collection.System.Collections.ICollection.ICollectionCount
  fullName: Microsoft.VisualBasic.Collection.System.Collections.ICollection.ICollectionCount
  type: Property
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  syntax:
    content: int System.Collections.ICollection.ICollectionCount { get; }
    return:
      type: System.Int32
      description: "Som ska läggas till."
  overload: Microsoft.VisualBasic.Collection.System#Collections#ICollection#ICollectionCount*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Collection.System#Collections#ICollection#ICollectionIsSynchronized
  id: System#Collections#ICollection#ICollectionIsSynchronized
  isEii: true
  parent: Microsoft.VisualBasic.Collection
  langs:
  - csharp
  name: System.Collections.ICollection.ICollectionIsSynchronized
  nameWithType: Collection.System.Collections.ICollection.ICollectionIsSynchronized
  fullName: Microsoft.VisualBasic.Collection.System.Collections.ICollection.ICollectionIsSynchronized
  type: Property
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  syntax:
    content: bool System.Collections.ICollection.ICollectionIsSynchronized { get; }
    return:
      type: System.Boolean
      description: "Som ska läggas till."
  overload: Microsoft.VisualBasic.Collection.System#Collections#ICollection#ICollectionIsSynchronized*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Collection.System#Collections#ICollection#ICollectionSyncRoot
  id: System#Collections#ICollection#ICollectionSyncRoot
  isEii: true
  parent: Microsoft.VisualBasic.Collection
  langs:
  - csharp
  name: System.Collections.ICollection.ICollectionSyncRoot
  nameWithType: Collection.System.Collections.ICollection.ICollectionSyncRoot
  fullName: Microsoft.VisualBasic.Collection.System.Collections.ICollection.ICollectionSyncRoot
  type: Property
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  syntax:
    content: object System.Collections.ICollection.ICollectionSyncRoot { get; }
    return:
      type: System.Object
      description: "Som ska läggas till."
  overload: Microsoft.VisualBasic.Collection.System#Collections#ICollection#ICollectionSyncRoot*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Collection.System#Collections#IEnumerable#GetEnumerator
  id: System#Collections#IEnumerable#GetEnumerator
  isEii: true
  parent: Microsoft.VisualBasic.Collection
  langs:
  - csharp
  name: System.Collections.IEnumerable.GetEnumerator()
  nameWithType: Collection.System.Collections.IEnumerable.GetEnumerator()
  fullName: Microsoft.VisualBasic.Collection.System.Collections.IEnumerable.GetEnumerator()
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Returnerar en uppräknare upprepas i samlingen. Implementerar den <xref:System.Collections.ICollection>gränssnitt.</xref:System.Collections.ICollection>"
  remarks: "[Visual Basic och C#]       Den `foreach` satsen i C#-språk (`for each` i Visual Basic) döljer komplexiteten i uppräknare. Därför använder `foreach` rekommenderas, i stället för direkt manipulering uppräknaren.       Uppräknare kan användas för att läsa data i samlingen, men de kan inte användas för att ändra den underliggande mängden.       Inledningsvis har uppräknaren placerats före det första elementet i mängden. Den <xref:System.Collections.IEnumerator.Reset%2A>metoden medför också uppräknaren tillbaka till den här positionen.</xref:System.Collections.IEnumerator.Reset%2A> På denna position den <xref:System.Collections.IEnumerator.Current%2A>egenskapen är odefinierad.</xref:System.Collections.IEnumerator.Current%2A> Därför måste du anropa <xref:System.Collections.IEnumerator.MoveNext%2A>metoden att avancera uppräknaren till det första elementet i mängden innan du läser värdet för <xref:System.Collections.IEnumerator.Current%2A>.</xref:System.Collections.IEnumerator.Current%2A> </xref:System.Collections.IEnumerator.MoveNext%2A>       <xref:System.Collections.IEnumerator.Current%2A>returnerar samma objekt förrän antingen <xref:System.Collections.IEnumerator.MoveNext%2A>eller <xref:System.Collections.IEnumerator.Reset%2A>kallas.</xref:System.Collections.IEnumerator.Reset%2A> </xref:System.Collections.IEnumerator.MoveNext%2A></xref:System.Collections.IEnumerator.Current%2A> <xref:System.Collections.IEnumerator.MoveNext%2A>Anger <xref:System.Collections.IEnumerator.Current%2A>till nästa element.</xref:System.Collections.IEnumerator.Current%2A></xref:System.Collections.IEnumerator.MoveNext%2A>       Om <xref:System.Collections.IEnumerator.MoveNext%2A>passerar slutet på mängden uppräknaren är placerad efter det sista elementet i mängden och <xref:System.Collections.IEnumerator.MoveNext%2A>returnerar `false`.</xref:System.Collections.IEnumerator.MoveNext%2A> </xref:System.Collections.IEnumerator.MoveNext%2A> När uppräknaren är på denna position efterföljande anrop till <xref:System.Collections.IEnumerator.MoveNext%2A>också returnera `false`.</xref:System.Collections.IEnumerator.MoveNext%2A> Om senast anropet till <xref:System.Collections.IEnumerator.MoveNext%2A>returnerar `false`, <xref:System.Collections.IEnumerator.Current%2A>är odefinierad.</xref:System.Collections.IEnumerator.Current%2A> </xref:System.Collections.IEnumerator.MoveNext%2A> Ange <xref:System.Collections.IEnumerator.Current%2A>att det första elementet i mängden igen, kan du anropa <xref:System.Collections.IEnumerator.Reset%2A>följt av <xref:System.Collections.IEnumerator.MoveNext%2A>.</xref:System.Collections.IEnumerator.MoveNext%2A> </xref:System.Collections.IEnumerator.Reset%2A> </xref:System.Collections.IEnumerator.Current%2A>       En uppräknare är giltig så länge samlingen förblir oförändrad. Om ändringar görs i samlingen, till exempel att lägga till, ändra eller ta bort element, uppräknaren blir inaktuella och sitt beteende är odefinierad.       Uppräknaren har inte exklusiv åtkomst till samlingen; uppräkning av en samling är därför är inte en trådsäker procedur. Om du vill garantera tråd under uppräkning, kan du låsa samlingen under hela uppräkningen. Om du vill tillåta en samling som ska användas av flera trådar för läsning och skrivning, måste du implementera ditt eget synkronisering."
  syntax:
    content: System.Collections.IEnumerator IEnumerable.GetEnumerator ();
    parameters: []
    return:
      type: System.Collections.IEnumerator
      description: "En <xref:System.Collections.IEnumerator>objekt som kan användas för att gå igenom samlingen.</xref:System.Collections.IEnumerator>"
  overload: Microsoft.VisualBasic.Collection.System#Collections#IEnumerable#GetEnumerator*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Collection.System#Collections#IList#Add(System.Object)
  id: System#Collections#IList#Add(System.Object)
  isEii: true
  parent: Microsoft.VisualBasic.Collection
  langs:
  - csharp
  name: System.Collections.IList.Add(Object)
  nameWithType: Collection.System.Collections.IList.Add(Object)
  fullName: Microsoft.VisualBasic.Collection.System.Collections.IList.Add(Object)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Lägger till ett objekt till den <xref href=&quot;Microsoft.VisualBasic.Collection&quot;> </xref> objekt. Implementerar den <xref:System.Collections.IList>gränssnitt.</xref:System.Collections.IList>"
  remarks: "Du kan också använda den <xref:Microsoft.VisualBasic.Collection.Item%2A>egenskapen för att lägga till nya element genom att ange värdet för en nyckel som inte finns i den <xref:Microsoft.VisualBasic.Collection>objekt.</xref:Microsoft.VisualBasic.Collection> </xref:Microsoft.VisualBasic.Collection.Item%2A>"
  syntax:
    content: int IList.Add (object value);
    parameters:
    - id: value
      type: System.Object
      description: "Den <xref:System.Object>att lägga till den <xref href=&quot;Microsoft.VisualBasic.Collection&quot;> </xref> objekt.</xref:System.Object>"
    return:
      type: System.Int32
      description: "Positionen där det nya elementet har infogats."
  overload: Microsoft.VisualBasic.Collection.System#Collections#IList#Add*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "Den <xref href=&quot;Microsoft.VisualBasic.Collection&quot;> </xref> objektet är skrivskyddat.       - eller - <xref href=&quot;Microsoft.VisualBasic.Collection&quot;> </xref> objekt har en fast storlek."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Collection.System#Collections#IList#Clear
  id: System#Collections#IList#Clear
  isEii: true
  parent: Microsoft.VisualBasic.Collection
  langs:
  - csharp
  name: System.Collections.IList.Clear()
  nameWithType: Collection.System.Collections.IList.Clear()
  fullName: Microsoft.VisualBasic.Collection.System.Collections.IList.Clear()
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Tar bort alla objekt från den <xref href=&quot;Microsoft.VisualBasic.Collection&quot;> </xref> objekt. Implementerar den <xref:System.Collections.IList>gränssnitt.</xref:System.Collections.IList>"
  remarks: "Den här metoden tar bort alla objekt från den <xref:Microsoft.VisualBasic.Collection>objekt.</xref:Microsoft.VisualBasic.Collection>"
  syntax:
    content: void IList.Clear ();
    parameters: []
  overload: Microsoft.VisualBasic.Collection.System#Collections#IList#Clear*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "Den <xref:System.Collections.IList>är skrivskyddad.</xref:System.Collections.IList>"
  platform:
  - net462
- uid: Microsoft.VisualBasic.Collection.System#Collections#IList#Contains(System.Object)
  id: System#Collections#IList#Contains(System.Object)
  isEii: true
  parent: Microsoft.VisualBasic.Collection
  langs:
  - csharp
  name: System.Collections.IList.Contains(Object)
  nameWithType: Collection.System.Collections.IList.Contains(Object)
  fullName: Microsoft.VisualBasic.Collection.System.Collections.IList.Contains(Object)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Anger om den <xref href=&quot;Microsoft.VisualBasic.Collection&quot;> </xref> objektet innehåller ett specifikt värde. Implementerar den <xref:System.Collections.IList>gränssnitt.</xref:System.Collections.IList>"
  remarks: "Den här metoden avgör om den <xref:Microsoft.VisualBasic.Collection>objektet innehåller ett specifikt värde.</xref:Microsoft.VisualBasic.Collection>"
  syntax:
    content: bool IList.Contains (object value);
    parameters:
    - id: value
      type: System.Object
      description: "Den <xref:System.Object>att hitta i den <xref href=&quot;Microsoft.VisualBasic.Collection&quot;> </xref> objekt.</xref:System.Object>"
    return:
      type: System.Boolean
      description: "Returnerar <xref uid=&quot;langword_csharp_True&quot; name=&quot;True&quot; href=&quot;&quot;> </xref> om den <xref:System.Object>finns i den <xref href=&quot;Microsoft.VisualBasic.Collection&quot;> </xref> objekt; annars <xref uid=&quot;langword_csharp_False&quot; name=&quot;False&quot; href=&quot;&quot;> </xref>.</xref:System.Object>"
  overload: Microsoft.VisualBasic.Collection.System#Collections#IList#Contains*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Collection.System#Collections#IList#IListIsFixedSize
  id: System#Collections#IList#IListIsFixedSize
  isEii: true
  parent: Microsoft.VisualBasic.Collection
  langs:
  - csharp
  name: System.Collections.IList.IListIsFixedSize
  nameWithType: Collection.System.Collections.IList.IListIsFixedSize
  fullName: Microsoft.VisualBasic.Collection.System.Collections.IList.IListIsFixedSize
  type: Property
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  syntax:
    content: bool System.Collections.IList.IListIsFixedSize { get; }
    return:
      type: System.Boolean
      description: "Som ska läggas till."
  overload: Microsoft.VisualBasic.Collection.System#Collections#IList#IListIsFixedSize*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Collection.System#Collections#IList#IListIsReadOnly
  id: System#Collections#IList#IListIsReadOnly
  isEii: true
  parent: Microsoft.VisualBasic.Collection
  langs:
  - csharp
  name: System.Collections.IList.IListIsReadOnly
  nameWithType: Collection.System.Collections.IList.IListIsReadOnly
  fullName: Microsoft.VisualBasic.Collection.System.Collections.IList.IListIsReadOnly
  type: Property
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  syntax:
    content: bool System.Collections.IList.IListIsReadOnly { get; }
    return:
      type: System.Boolean
      description: "Som ska läggas till."
  overload: Microsoft.VisualBasic.Collection.System#Collections#IList#IListIsReadOnly*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Collection.System#Collections#IList#IListItem(System.Int32)
  id: System#Collections#IList#IListItem(System.Int32)
  isEii: true
  parent: Microsoft.VisualBasic.Collection
  langs:
  - csharp
  name: System.Collections.IList.IListItem(Int32)
  nameWithType: Collection.System.Collections.IList.IListItem(Int32)
  fullName: Microsoft.VisualBasic.Collection.System.Collections.IList.IListItem(Int32)
  type: Property
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  syntax:
    content: object System.Collections.IList.IListItem[int index] { get; set; }
    parameters:
    - id: index
      type: System.Int32
      description: "Som ska läggas till."
    return:
      type: System.Object
      description: "Som ska läggas till."
  overload: Microsoft.VisualBasic.Collection.System#Collections#IList#IListItem*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Collection.System#Collections#IList#IndexOf(System.Object)
  id: System#Collections#IList#IndexOf(System.Object)
  isEii: true
  parent: Microsoft.VisualBasic.Collection
  langs:
  - csharp
  name: System.Collections.IList.IndexOf(Object)
  nameWithType: Collection.System.Collections.IList.IndexOf(Object)
  fullName: Microsoft.VisualBasic.Collection.System.Collections.IList.IndexOf(Object)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Anger index för ett specifikt objekt i den <xref href=&quot;Microsoft.VisualBasic.Collection&quot;> </xref> objekt. Implementerar den <xref:System.Collections.IList>gränssnitt.</xref:System.Collections.IList>"
  remarks: "Den här metoden anger index för ett specifikt objekt i den <xref:Microsoft.VisualBasic.Collection>objekt.</xref:Microsoft.VisualBasic.Collection>"
  syntax:
    content: int IList.IndexOf (object value);
    parameters:
    - id: value
      type: System.Object
      description: "Den <xref:System.Object>att hitta i den <xref href=&quot;Microsoft.VisualBasic.Collection&quot;> </xref> objekt.</xref:System.Object>"
    return:
      type: System.Int32
      description: "Index för <code> value </code> om hittades i samlingen, annars -1."
  overload: Microsoft.VisualBasic.Collection.System#Collections#IList#IndexOf*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Collection.System#Collections#IList#Insert(System.Int32,System.Object)
  id: System#Collections#IList#Insert(System.Int32,System.Object)
  isEii: true
  parent: Microsoft.VisualBasic.Collection
  langs:
  - csharp
  name: System.Collections.IList.Insert(Int32,Object)
  nameWithType: Collection.System.Collections.IList.Insert(Int32,Object)
  fullName: Microsoft.VisualBasic.Collection.System.Collections.IList.Insert(Int32,Object)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Infogar ett objekt till den <xref href=&quot;Microsoft.VisualBasic.Collection&quot;> </xref> objektet med det angivna indexet. Implementerar den <xref:System.Collections.IList>gränssnitt.</xref:System.Collections.IList>"
  remarks: "Om `index` är lika med antalet objekt i den <xref:Microsoft.VisualBasic.Collection>objekt sedan `value` läggs till i slutet.</xref:Microsoft.VisualBasic.Collection>       Hantera nya element i samlingar av angränsande element, som visar de element som följer insättningspunkten Flytta ned till. Om samlingen är indexerad, uppdateras även indexen för element som flyttas. Det här problemet gäller inte för samlingar där element begreppsmässigt är grupperade i buckets, till exempel en hash-tabell."
  syntax:
    content: void IList.Insert (int index, object value);
    parameters:
    - id: index
      type: System.Int32
      description: "Det nollbaserade indexet som `value` ska infogas."
    - id: value
      type: System.Object
      description: "Den <xref:System.Object>att infoga i den <xref href=&quot;Microsoft.VisualBasic.Collection&quot;> </xref> objekt.</xref:System.Object>"
  overload: Microsoft.VisualBasic.Collection.System#Collections#IList#Insert*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>index</code>är inte ett giltigt index i den <xref href=&quot;Microsoft.VisualBasic.Collection&quot;> </xref> objekt."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "Den <xref href=&quot;Microsoft.VisualBasic.Collection&quot;> </xref> objektet är skrivskyddat.       - eller - <xref href=&quot;Microsoft.VisualBasic.Collection&quot;> </xref> objekt har en fast storlek."
  - type: System.NullReferenceException
    commentId: T:System.NullReferenceException
    description: "<code>value</code>är null-referens i den <xref href=&quot;Microsoft.VisualBasic.Collection&quot;> </xref> objekt."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Collection.System#Collections#IList#Remove(System.Object)
  id: System#Collections#IList#Remove(System.Object)
  isEii: true
  parent: Microsoft.VisualBasic.Collection
  langs:
  - csharp
  name: System.Collections.IList.Remove(Object)
  nameWithType: Collection.System.Collections.IList.Remove(Object)
  fullName: Microsoft.VisualBasic.Collection.System.Collections.IList.Remove(Object)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Tar bort den första förekomsten av ett specifikt objekt från den <xref href=&quot;Microsoft.VisualBasic.Collection&quot;> </xref> objekt. Implementerar den <xref:System.Collections.IList>gränssnitt.</xref:System.Collections.IList>"
  remarks: "Element som följer efter elementet borttagna flytta uppta vacated plats i samlingar med sammanhängande element, till exempel listor. Om samlingen är indexerad, uppdateras även indexen för element som flyttas. Det här problemet gäller inte för samlingar där element begreppsmässigt är grupperade i buckets, till exempel en hash-tabell. Om `value` hittades inte i den <xref:Microsoft.VisualBasic.Collection>objekt, den <xref:Microsoft.VisualBasic.Collection>objekt förblir oförändrad och inget undantag genereras.</xref:Microsoft.VisualBasic.Collection> </xref:Microsoft.VisualBasic.Collection>"
  syntax:
    content: void IList.Remove (object value);
    parameters:
    - id: value
      type: System.Object
      description: "Den <xref:System.Object>att ta bort från den <xref href=&quot;Microsoft.VisualBasic.Collection&quot;> </xref> objekt.</xref:System.Object>"
  overload: Microsoft.VisualBasic.Collection.System#Collections#IList#Remove*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "Den <xref href=&quot;Microsoft.VisualBasic.Collection&quot;> </xref> objektet är skrivskyddat.       - eller - <xref href=&quot;Microsoft.VisualBasic.Collection&quot;> </xref> objekt har en fast storlek."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Collection.System#Collections#IList#RemoveAt(System.Int32)
  id: System#Collections#IList#RemoveAt(System.Int32)
  isEii: true
  parent: Microsoft.VisualBasic.Collection
  langs:
  - csharp
  name: System.Collections.IList.RemoveAt(Int32)
  nameWithType: Collection.System.Collections.IList.RemoveAt(Int32)
  fullName: Microsoft.VisualBasic.Collection.System.Collections.IList.RemoveAt(Int32)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Tar bort den <xref href=&quot;Microsoft.VisualBasic.Collection&quot;> </xref> objekt objektet med det angivna indexet. Implementerar den <xref:System.Collections.IList>gränssnitt.</xref:System.Collections.IList>"
  remarks: "Element som följer efter elementet borttagna flytta uppta vacated plats i samlingar med sammanhängande element, till exempel listor. Om samlingen är indexerad, uppdateras även indexen för element som flyttas. Det här problemet gäller inte för samlingar där element begreppsmässigt är grupperade i buckets, till exempel en hash-tabell."
  syntax:
    content: void IList.RemoveAt (int index);
    parameters:
    - id: index
      type: System.Int32
      description: "Det nollbaserade indexet för objektet du vill ta bort."
  overload: Microsoft.VisualBasic.Collection.System#Collections#IList#RemoveAt*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>index</code>är inte ett giltigt index i den <xref href=&quot;Microsoft.VisualBasic.Collection&quot;> </xref> objekt."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "Den <xref href=&quot;Microsoft.VisualBasic.Collection&quot;> </xref> objektet är skrivskyddat.       - eller - <xref href=&quot;Microsoft.VisualBasic.Collection&quot;> </xref> objekt har en fast storlek."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Collection.System#Runtime#Serialization#IDeserializationCallback#OnDeserialization(System.Object)
  id: System#Runtime#Serialization#IDeserializationCallback#OnDeserialization(System.Object)
  isEii: true
  parent: Microsoft.VisualBasic.Collection
  langs:
  - csharp
  name: System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(Object)
  nameWithType: Collection.System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(Object)
  fullName: Microsoft.VisualBasic.Collection.System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(Object)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Körs efter hela <xref href=&quot;Microsoft.VisualBasic.Collection&quot;> </xref> har varit deserialisera objektdiagram. Implementerar den <xref href=&quot;System.Runtime.Serialization.IDeserializationCallback&quot;> </xref> gränssnitt."
  remarks: "Den här metoden anropas efter hela <xref:Microsoft.VisualBasic.Collection>objektdiagram har deserialiserats.</xref:Microsoft.VisualBasic.Collection>"
  syntax:
    content: void IDeserializationCallback.OnDeserialization (object sender);
    parameters:
    - id: sender
      type: System.Object
      description: "Det objekt som initierade återanropet."
  overload: Microsoft.VisualBasic.Collection.System#Runtime#Serialization#IDeserializationCallback#OnDeserialization*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Collection.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  id: System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  isEii: true
  parent: Microsoft.VisualBasic.Collection
  langs:
  - csharp
  name: System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo,StreamingContext)
  nameWithType: Collection.System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo,StreamingContext)
  fullName: Microsoft.VisualBasic.Collection.System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo,StreamingContext)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Returnerar de data som behövs för att serialisera den <xref href=&quot;Microsoft.VisualBasic.Collection&quot;> </xref> objekt. Implementerar den <xref href=&quot;System.Runtime.Serialization.ISerializable&quot;> </xref> gränssnitt."
  remarks: "Den här metoden returnerar de data som behövs för att serialisera den <xref:Microsoft.VisualBasic.Collection>objekt.</xref:Microsoft.VisualBasic.Collection>"
  syntax:
    content: void ISerializable.GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    parameters:
    - id: info
      type: System.Runtime.Serialization.SerializationInfo
      description: "En <xref href=&quot;System.Runtime.Serialization.SerializationInfo&quot;> </xref> objekt som innehåller information som krävs för att serialisera den <xref href=&quot;Microsoft.VisualBasic.Collection&quot;> </xref> objekt."
    - id: context
      type: System.Runtime.Serialization.StreamingContext
      description: "En <xref:System.Runtime.Serialization.StreamingContext>objekt som innehåller käll- och målservrar i den serialiserade dataströmmen som är associerade med den <xref href=&quot;Microsoft.VisualBasic.Collection&quot;> </xref> objekt.</xref:System.Runtime.Serialization.StreamingContext>"
  overload: Microsoft.VisualBasic.Collection.System#Runtime#Serialization#ISerializable#GetObjectData*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.InvalidCastException
  isExternal: true
  name: System.InvalidCastException
- uid: System.NotSupportedException
  isExternal: true
  name: System.NotSupportedException
- uid: System.NullReferenceException
  isExternal: true
  name: System.NullReferenceException
- uid: Microsoft.VisualBasic.Collection.#ctor
  parent: Microsoft.VisualBasic.Collection
  isExternal: false
  name: Collection()
  nameWithType: Collection.Collection()
  fullName: Microsoft.VisualBasic.Collection.Collection()
- uid: Microsoft.VisualBasic.Collection.Add(System.Object,System.String,System.Object,System.Object)
  parent: Microsoft.VisualBasic.Collection
  isExternal: false
  name: Add(Object,String,Object,Object)
  nameWithType: Collection.Add(Object,String,Object,Object)
  fullName: Microsoft.VisualBasic.Collection.Add(Object,String,Object,Object)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Microsoft.VisualBasic.Collection.Clear
  parent: Microsoft.VisualBasic.Collection
  isExternal: false
  name: Clear()
  nameWithType: Collection.Clear()
  fullName: Microsoft.VisualBasic.Collection.Clear()
- uid: Microsoft.VisualBasic.Collection.Contains(System.String)
  parent: Microsoft.VisualBasic.Collection
  isExternal: false
  name: Contains(String)
  nameWithType: Collection.Contains(String)
  fullName: Microsoft.VisualBasic.Collection.Contains(String)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Microsoft.VisualBasic.Collection.Count
  parent: Microsoft.VisualBasic.Collection
  isExternal: false
  name: Count
  nameWithType: Collection.Count
  fullName: Microsoft.VisualBasic.Collection.Count
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Microsoft.VisualBasic.Collection.GetEnumerator
  parent: Microsoft.VisualBasic.Collection
  isExternal: false
  name: GetEnumerator()
  nameWithType: Collection.GetEnumerator()
  fullName: Microsoft.VisualBasic.Collection.GetEnumerator()
- uid: System.Collections.IEnumerator
  parent: System.Collections
  isExternal: true
  name: IEnumerator
  nameWithType: IEnumerator
  fullName: System.Collections.IEnumerator
- uid: Microsoft.VisualBasic.Collection.Item(System.Int32)
  parent: Microsoft.VisualBasic.Collection
  isExternal: false
  name: Item(Int32)
  nameWithType: Collection.Item(Int32)
  fullName: Microsoft.VisualBasic.Collection.Item(Int32)
- uid: Microsoft.VisualBasic.Collection.Item(System.Object)
  parent: Microsoft.VisualBasic.Collection
  isExternal: false
  name: Item(Object)
  nameWithType: Collection.Item(Object)
  fullName: Microsoft.VisualBasic.Collection.Item(Object)
- uid: Microsoft.VisualBasic.Collection.Item(System.String)
  parent: Microsoft.VisualBasic.Collection
  isExternal: false
  name: Item(String)
  nameWithType: Collection.Item(String)
  fullName: Microsoft.VisualBasic.Collection.Item(String)
- uid: Microsoft.VisualBasic.Collection.Remove(System.Int32)
  parent: Microsoft.VisualBasic.Collection
  isExternal: false
  name: Remove(Int32)
  nameWithType: Collection.Remove(Int32)
  fullName: Microsoft.VisualBasic.Collection.Remove(Int32)
- uid: Microsoft.VisualBasic.Collection.Remove(System.String)
  parent: Microsoft.VisualBasic.Collection
  isExternal: false
  name: Remove(String)
  nameWithType: Collection.Remove(String)
  fullName: Microsoft.VisualBasic.Collection.Remove(String)
- uid: Microsoft.VisualBasic.Collection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  parent: Microsoft.VisualBasic.Collection
  isExternal: false
  name: System.Collections.ICollection.CopyTo(Array,Int32)
  nameWithType: Collection.System.Collections.ICollection.CopyTo(Array,Int32)
  fullName: Microsoft.VisualBasic.Collection.System.Collections.ICollection.CopyTo(Array,Int32)
- uid: System.Array
  parent: System
  isExternal: true
  name: Array
  nameWithType: Array
  fullName: System.Array
- uid: Microsoft.VisualBasic.Collection.System#Collections#ICollection#ICollectionCount
  parent: Microsoft.VisualBasic.Collection
  isExternal: false
  name: System.Collections.ICollection.ICollectionCount
  nameWithType: Collection.System.Collections.ICollection.ICollectionCount
  fullName: Microsoft.VisualBasic.Collection.System.Collections.ICollection.ICollectionCount
- uid: Microsoft.VisualBasic.Collection.System#Collections#ICollection#ICollectionIsSynchronized
  parent: Microsoft.VisualBasic.Collection
  isExternal: false
  name: System.Collections.ICollection.ICollectionIsSynchronized
  nameWithType: Collection.System.Collections.ICollection.ICollectionIsSynchronized
  fullName: Microsoft.VisualBasic.Collection.System.Collections.ICollection.ICollectionIsSynchronized
- uid: Microsoft.VisualBasic.Collection.System#Collections#ICollection#ICollectionSyncRoot
  parent: Microsoft.VisualBasic.Collection
  isExternal: false
  name: System.Collections.ICollection.ICollectionSyncRoot
  nameWithType: Collection.System.Collections.ICollection.ICollectionSyncRoot
  fullName: Microsoft.VisualBasic.Collection.System.Collections.ICollection.ICollectionSyncRoot
- uid: Microsoft.VisualBasic.Collection.System#Collections#IEnumerable#GetEnumerator
  parent: Microsoft.VisualBasic.Collection
  isExternal: false
  name: System.Collections.IEnumerable.GetEnumerator()
  nameWithType: Collection.System.Collections.IEnumerable.GetEnumerator()
  fullName: Microsoft.VisualBasic.Collection.System.Collections.IEnumerable.GetEnumerator()
- uid: Microsoft.VisualBasic.Collection.System#Collections#IList#Add(System.Object)
  parent: Microsoft.VisualBasic.Collection
  isExternal: false
  name: System.Collections.IList.Add(Object)
  nameWithType: Collection.System.Collections.IList.Add(Object)
  fullName: Microsoft.VisualBasic.Collection.System.Collections.IList.Add(Object)
- uid: Microsoft.VisualBasic.Collection.System#Collections#IList#Clear
  parent: Microsoft.VisualBasic.Collection
  isExternal: false
  name: System.Collections.IList.Clear()
  nameWithType: Collection.System.Collections.IList.Clear()
  fullName: Microsoft.VisualBasic.Collection.System.Collections.IList.Clear()
- uid: Microsoft.VisualBasic.Collection.System#Collections#IList#Contains(System.Object)
  parent: Microsoft.VisualBasic.Collection
  isExternal: false
  name: System.Collections.IList.Contains(Object)
  nameWithType: Collection.System.Collections.IList.Contains(Object)
  fullName: Microsoft.VisualBasic.Collection.System.Collections.IList.Contains(Object)
- uid: Microsoft.VisualBasic.Collection.System#Collections#IList#IListIsFixedSize
  parent: Microsoft.VisualBasic.Collection
  isExternal: false
  name: System.Collections.IList.IListIsFixedSize
  nameWithType: Collection.System.Collections.IList.IListIsFixedSize
  fullName: Microsoft.VisualBasic.Collection.System.Collections.IList.IListIsFixedSize
- uid: Microsoft.VisualBasic.Collection.System#Collections#IList#IListIsReadOnly
  parent: Microsoft.VisualBasic.Collection
  isExternal: false
  name: System.Collections.IList.IListIsReadOnly
  nameWithType: Collection.System.Collections.IList.IListIsReadOnly
  fullName: Microsoft.VisualBasic.Collection.System.Collections.IList.IListIsReadOnly
- uid: Microsoft.VisualBasic.Collection.System#Collections#IList#IListItem(System.Int32)
  parent: Microsoft.VisualBasic.Collection
  isExternal: false
  name: System.Collections.IList.IListItem(Int32)
  nameWithType: Collection.System.Collections.IList.IListItem(Int32)
  fullName: Microsoft.VisualBasic.Collection.System.Collections.IList.IListItem(Int32)
- uid: Microsoft.VisualBasic.Collection.System#Collections#IList#IndexOf(System.Object)
  parent: Microsoft.VisualBasic.Collection
  isExternal: false
  name: System.Collections.IList.IndexOf(Object)
  nameWithType: Collection.System.Collections.IList.IndexOf(Object)
  fullName: Microsoft.VisualBasic.Collection.System.Collections.IList.IndexOf(Object)
- uid: Microsoft.VisualBasic.Collection.System#Collections#IList#Insert(System.Int32,System.Object)
  parent: Microsoft.VisualBasic.Collection
  isExternal: false
  name: System.Collections.IList.Insert(Int32,Object)
  nameWithType: Collection.System.Collections.IList.Insert(Int32,Object)
  fullName: Microsoft.VisualBasic.Collection.System.Collections.IList.Insert(Int32,Object)
- uid: Microsoft.VisualBasic.Collection.System#Collections#IList#Remove(System.Object)
  parent: Microsoft.VisualBasic.Collection
  isExternal: false
  name: System.Collections.IList.Remove(Object)
  nameWithType: Collection.System.Collections.IList.Remove(Object)
  fullName: Microsoft.VisualBasic.Collection.System.Collections.IList.Remove(Object)
- uid: Microsoft.VisualBasic.Collection.System#Collections#IList#RemoveAt(System.Int32)
  parent: Microsoft.VisualBasic.Collection
  isExternal: false
  name: System.Collections.IList.RemoveAt(Int32)
  nameWithType: Collection.System.Collections.IList.RemoveAt(Int32)
  fullName: Microsoft.VisualBasic.Collection.System.Collections.IList.RemoveAt(Int32)
- uid: Microsoft.VisualBasic.Collection.System#Runtime#Serialization#IDeserializationCallback#OnDeserialization(System.Object)
  parent: Microsoft.VisualBasic.Collection
  isExternal: false
  name: System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(Object)
  nameWithType: Collection.System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(Object)
  fullName: Microsoft.VisualBasic.Collection.System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(Object)
- uid: Microsoft.VisualBasic.Collection.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  parent: Microsoft.VisualBasic.Collection
  isExternal: false
  name: System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo,StreamingContext)
  nameWithType: Collection.System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo,StreamingContext)
  fullName: Microsoft.VisualBasic.Collection.System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo,StreamingContext)
- uid: System.Runtime.Serialization.SerializationInfo
  parent: System.Runtime.Serialization
  isExternal: false
  name: SerializationInfo
  nameWithType: SerializationInfo
  fullName: System.Runtime.Serialization.SerializationInfo
- uid: System.Runtime.Serialization.StreamingContext
  parent: System.Runtime.Serialization
  isExternal: true
  name: StreamingContext
  nameWithType: StreamingContext
  fullName: System.Runtime.Serialization.StreamingContext
- uid: Microsoft.VisualBasic.Collection.#ctor*
  parent: Microsoft.VisualBasic.Collection
  isExternal: false
  name: Collection
  nameWithType: Collection.Collection
- uid: Microsoft.VisualBasic.Collection.Add*
  parent: Microsoft.VisualBasic.Collection
  isExternal: false
  name: Add
  nameWithType: Collection.Add
- uid: Microsoft.VisualBasic.Collection.Clear*
  parent: Microsoft.VisualBasic.Collection
  isExternal: false
  name: Clear
  nameWithType: Collection.Clear
- uid: Microsoft.VisualBasic.Collection.Contains*
  parent: Microsoft.VisualBasic.Collection
  isExternal: false
  name: Contains
  nameWithType: Collection.Contains
- uid: Microsoft.VisualBasic.Collection.Count*
  parent: Microsoft.VisualBasic.Collection
  isExternal: false
  name: Count
  nameWithType: Collection.Count
- uid: Microsoft.VisualBasic.Collection.GetEnumerator*
  parent: Microsoft.VisualBasic.Collection
  isExternal: false
  name: GetEnumerator
  nameWithType: Collection.GetEnumerator
- uid: Microsoft.VisualBasic.Collection.Item*
  parent: Microsoft.VisualBasic.Collection
  isExternal: false
  name: Item
  nameWithType: Collection.Item
- uid: Microsoft.VisualBasic.Collection.Remove*
  parent: Microsoft.VisualBasic.Collection
  isExternal: false
  name: Remove
  nameWithType: Collection.Remove
- uid: Microsoft.VisualBasic.Collection.System#Collections#ICollection#CopyTo*
  parent: Microsoft.VisualBasic.Collection
  isExternal: false
  name: System.Collections.ICollection.CopyTo
  nameWithType: Collection.System.Collections.ICollection.CopyTo
- uid: Microsoft.VisualBasic.Collection.System#Collections#ICollection#ICollectionCount*
  parent: Microsoft.VisualBasic.Collection
  isExternal: false
  name: System.Collections.ICollection.ICollectionCount
  nameWithType: Collection.System.Collections.ICollection.ICollectionCount
- uid: Microsoft.VisualBasic.Collection.System#Collections#ICollection#ICollectionIsSynchronized*
  parent: Microsoft.VisualBasic.Collection
  isExternal: false
  name: System.Collections.ICollection.ICollectionIsSynchronized
  nameWithType: Collection.System.Collections.ICollection.ICollectionIsSynchronized
- uid: Microsoft.VisualBasic.Collection.System#Collections#ICollection#ICollectionSyncRoot*
  parent: Microsoft.VisualBasic.Collection
  isExternal: false
  name: System.Collections.ICollection.ICollectionSyncRoot
  nameWithType: Collection.System.Collections.ICollection.ICollectionSyncRoot
- uid: Microsoft.VisualBasic.Collection.System#Collections#IEnumerable#GetEnumerator*
  parent: Microsoft.VisualBasic.Collection
  isExternal: false
  name: System.Collections.IEnumerable.GetEnumerator
  nameWithType: Collection.System.Collections.IEnumerable.GetEnumerator
- uid: Microsoft.VisualBasic.Collection.System#Collections#IList#Add*
  parent: Microsoft.VisualBasic.Collection
  isExternal: false
  name: System.Collections.IList.Add
  nameWithType: Collection.System.Collections.IList.Add
- uid: Microsoft.VisualBasic.Collection.System#Collections#IList#Clear*
  parent: Microsoft.VisualBasic.Collection
  isExternal: false
  name: System.Collections.IList.Clear
  nameWithType: Collection.System.Collections.IList.Clear
- uid: Microsoft.VisualBasic.Collection.System#Collections#IList#Contains*
  parent: Microsoft.VisualBasic.Collection
  isExternal: false
  name: System.Collections.IList.Contains
  nameWithType: Collection.System.Collections.IList.Contains
- uid: Microsoft.VisualBasic.Collection.System#Collections#IList#IListIsFixedSize*
  parent: Microsoft.VisualBasic.Collection
  isExternal: false
  name: System.Collections.IList.IListIsFixedSize
  nameWithType: Collection.System.Collections.IList.IListIsFixedSize
- uid: Microsoft.VisualBasic.Collection.System#Collections#IList#IListIsReadOnly*
  parent: Microsoft.VisualBasic.Collection
  isExternal: false
  name: System.Collections.IList.IListIsReadOnly
  nameWithType: Collection.System.Collections.IList.IListIsReadOnly
- uid: Microsoft.VisualBasic.Collection.System#Collections#IList#IListItem*
  parent: Microsoft.VisualBasic.Collection
  isExternal: false
  name: System.Collections.IList.IListItem
  nameWithType: Collection.System.Collections.IList.IListItem
- uid: Microsoft.VisualBasic.Collection.System#Collections#IList#IndexOf*
  parent: Microsoft.VisualBasic.Collection
  isExternal: false
  name: System.Collections.IList.IndexOf
  nameWithType: Collection.System.Collections.IList.IndexOf
- uid: Microsoft.VisualBasic.Collection.System#Collections#IList#Insert*
  parent: Microsoft.VisualBasic.Collection
  isExternal: false
  name: System.Collections.IList.Insert
  nameWithType: Collection.System.Collections.IList.Insert
- uid: Microsoft.VisualBasic.Collection.System#Collections#IList#Remove*
  parent: Microsoft.VisualBasic.Collection
  isExternal: false
  name: System.Collections.IList.Remove
  nameWithType: Collection.System.Collections.IList.Remove
- uid: Microsoft.VisualBasic.Collection.System#Collections#IList#RemoveAt*
  parent: Microsoft.VisualBasic.Collection
  isExternal: false
  name: System.Collections.IList.RemoveAt
  nameWithType: Collection.System.Collections.IList.RemoveAt
- uid: Microsoft.VisualBasic.Collection.System#Runtime#Serialization#IDeserializationCallback#OnDeserialization*
  parent: Microsoft.VisualBasic.Collection
  isExternal: false
  name: System.Runtime.Serialization.IDeserializationCallback.OnDeserialization
  nameWithType: Collection.System.Runtime.Serialization.IDeserializationCallback.OnDeserialization
- uid: Microsoft.VisualBasic.Collection.System#Runtime#Serialization#ISerializable#GetObjectData*
  parent: Microsoft.VisualBasic.Collection
  isExternal: false
  name: System.Runtime.Serialization.ISerializable.GetObjectData
  nameWithType: Collection.System.Runtime.Serialization.ISerializable.GetObjectData
