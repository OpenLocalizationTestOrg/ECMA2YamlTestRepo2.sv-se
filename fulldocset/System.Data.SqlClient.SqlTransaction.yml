### YamlMime:ManagedReference
items:
- uid: System.Data.SqlClient.SqlTransaction
  id: SqlTransaction
  children:
  - System.Data.SqlClient.SqlTransaction.Commit
  - System.Data.SqlClient.SqlTransaction.Connection
  - System.Data.SqlClient.SqlTransaction.DbConnection
  - System.Data.SqlClient.SqlTransaction.Dispose(System.Boolean)
  - System.Data.SqlClient.SqlTransaction.IsolationLevel
  - System.Data.SqlClient.SqlTransaction.Rollback
  - System.Data.SqlClient.SqlTransaction.Rollback(System.String)
  - System.Data.SqlClient.SqlTransaction.Save(System.String)
  langs:
  - csharp
  name: SqlTransaction
  nameWithType: SqlTransaction
  fullName: System.Data.SqlClient.SqlTransaction
  type: Class
  summary: "Representerar en [!INCLUDE[tsql](~/add/includes/tsql-md.md)] transaktionen görs i en [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] databas. Den här klassen kan inte ärvas."
  remarks: "The application creates a SqlTransaction object by calling <xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A> on the <xref:System.Data.SqlClient.SqlConnection> object. All subsequent operations associated with the transaction (for example, committing or aborting the transaction), are performed on the SqlTransaction object.  \n  \n> [!NOTE]\n>  `Try`/`Catch` exception handling should always be used when committing or rolling back a SqlTransaction. Both <xref:System.Data.SqlClient.SqlTransaction.Commit%2A> and <xref:System.Data.SqlClient.SqlTransaction.Rollback%2A> generate an <xref:System.InvalidOperationException> if the connection is terminated or if the transaction has already been rolled back on the server.  \n  \n For more information on [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] transactions, see [Explicit Transactions](http://msdn.microsoft.com/library/ms175127\\(SQL.105\\).aspx) and [Coding Efficient Transactions](http://msdn.microsoft.com/library/ms187484\\(SQL.105\\).aspx)."
  example:
  - "The following example creates a <xref:System.Data.SqlClient.SqlConnection> and a SqlTransaction. It also demonstrates how to use the <xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A>, <xref:System.Data.SqlClient.SqlTransaction.Commit%2A>, and <xref:System.Data.SqlClient.SqlTransaction.Rollback%2A> methods. The transaction is rolled back on any error, or if it is disposed without first being committed. `Try`/`Catch` error handling is used to handle any errors when attempting to commit or roll back the transaction.  \n  \n [!code-cs[Classic WebData SqlConnection.BeginTransaction Example#1](~/add/codesnippet/csharp/t-system.data.sqlclient._10_1.cs)]\n [!code-vb[Classic WebData SqlConnection.BeginTransaction Example#1](~/add/codesnippet/visualbasic/t-system.data.sqlclient._10_1.vb)]"
  syntax:
    content: 'public sealed class SqlTransaction : System.Data.Common.DbTransaction'
  inheritance:
  - System.Object
  - System.MarshalByRefObject
  - System.Data.Common.DbTransaction
  implements: []
  inheritedMembers:
  - System.Data.Common.DbTransaction.Dispose
  - System.Data.Common.DbTransaction.System#Data#IDbTransaction#Connection
  - System.MarshalByRefObject.CreateObjRef(System.Type)
  - System.MarshalByRefObject.GetLifetimeService
  - System.MarshalByRefObject.InitializeLifetimeService
  - System.MarshalByRefObject.MemberwiseClone(System.Boolean)
  platform:
  - net462
- uid: System.Data.SqlClient.SqlTransaction.Commit
  id: Commit
  parent: System.Data.SqlClient.SqlTransaction
  langs:
  - csharp
  name: Commit()
  nameWithType: SqlTransaction.Commit()
  fullName: System.Data.SqlClient.SqlTransaction.Commit()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "Genomför databastransaktion."
  remarks: "Commit-metoden motsvarar COMMIT TRANSACTION i Transact-SQL-instruktionen. Du kan inte återställa en transaktion när den har genomförts, eftersom alla ändringar har blivit en permanent del av databasen. Mer information finns i SQL Server Books Online.      > [!NOTE]  >   `Try` / `Catch` undantagshantering alltid ska användas när verkställas eller återställer <xref:System.Data.SqlClient.SqlTransaction>.</xref:System.Data.SqlClient.SqlTransaction> Båda `Commit` och <xref:System.Data.SqlClient.SqlTransaction.Rollback%2A>genererar ett <xref:System.InvalidOperationException>om anslutningen bröts eller om transaktionen har redan återställts på servern.</xref:System.InvalidOperationException> </xref:System.Data.SqlClient.SqlTransaction.Rollback%2A>       Mer information om transaktioner för SQL Server finns i &quot;Explicit&quot; och &quot;Kodning effektiva transaktioner&quot; i SQL Server Books Online."
  example:
  - "The following example creates a <xref:System.Data.SqlClient.SqlConnection> and a <xref:System.Data.SqlClient.SqlTransaction>. It also demonstrates how to use the Commit, <xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A>, and <xref:System.Data.SqlClient.SqlTransaction.Rollback%2A> methods. The transaction is rolled back on any error. `Try`/`Catch` error handling is used to handle any errors when attempting to commit or roll back the transaction.  \n  \n [!code-cs[Classic WebData SqlConnection.BeginTransaction Example#1](~/add/codesnippet/csharp/m-system.data.sqlclient._25_1.cs)]\n [!code-vb[Classic WebData SqlConnection.BeginTransaction Example#1](~/add/codesnippet/visualbasic/m-system.data.sqlclient._25_1.vb)]"
  syntax:
    content: public override void Commit ();
    parameters: []
  overload: System.Data.SqlClient.SqlTransaction.Commit*
  exceptions:
  - type: System.Exception
    commentId: T:System.Exception
    description: "Ett fel uppstod vid försök att genomföra transaktionen."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Transaktionen har redan bekräftats eller återställts.       - eller - anslutningen har brutits."
  platform:
  - net462
- uid: System.Data.SqlClient.SqlTransaction.Connection
  id: Connection
  parent: System.Data.SqlClient.SqlTransaction
  langs:
  - csharp
  name: Connection
  nameWithType: SqlTransaction.Connection
  fullName: System.Data.SqlClient.SqlTransaction.Connection
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "Hämtar den <xref href=&quot;System.Data.SqlClient.SqlConnection&quot;> </xref> som är associerat med transaktionen, eller <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> om transaktionen är inte längre giltig."
  remarks: "Ett program kan ha flera databasanslutningar, var och en med noll eller flera transaktioner. Den här egenskapen kan du bestämma det anslutningsobjekt som är associerade med en viss transaktion som skapats av <xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A>.</xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A>"
  syntax:
    content: public System.Data.SqlClient.SqlConnection Connection { get; }
    return:
      type: System.Data.SqlClient.SqlConnection
      description: "Den <xref href=&quot;System.Data.SqlClient.SqlConnection&quot;> </xref> objektet som är associerat med transaktionen."
  overload: System.Data.SqlClient.SqlTransaction.Connection*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlTransaction.DbConnection
  id: DbConnection
  parent: System.Data.SqlClient.SqlTransaction
  langs:
  - csharp
  name: DbConnection
  nameWithType: SqlTransaction.DbConnection
  fullName: System.Data.SqlClient.SqlTransaction.DbConnection
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  syntax:
    content: protected override System.Data.Common.DbConnection DbConnection { get; }
    return:
      type: System.Data.Common.DbConnection
      description: "Som ska läggas till."
  overload: System.Data.SqlClient.SqlTransaction.DbConnection*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlTransaction.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.Data.SqlClient.SqlTransaction
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: SqlTransaction.Dispose(Boolean)
  fullName: System.Data.SqlClient.SqlTransaction.Dispose(Boolean)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  syntax:
    content: protected override void Dispose (bool disposing);
    parameters:
    - id: disposing
      type: System.Boolean
      description: "Som ska läggas till."
  overload: System.Data.SqlClient.SqlTransaction.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlTransaction.IsolationLevel
  id: IsolationLevel
  parent: System.Data.SqlClient.SqlTransaction
  langs:
  - csharp
  name: IsolationLevel
  nameWithType: SqlTransaction.IsolationLevel
  fullName: System.Data.SqlClient.SqlTransaction.IsolationLevel
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "Anger den <xref href=&quot;System.Data.IsolationLevel&quot;> </xref> för den här transaktionen."
  remarks: "Parallella transaktioner stöds inte. Därför kan den <xref:System.Data.IsolationLevel>gäller för hela transaktionen.</xref:System.Data.IsolationLevel>       Mer information om SQL Server-isoleringsnivåer finns i &quot;Isolering nivåer i databasmotorn&quot; i SQL Server Books Online."
  syntax:
    content: public override System.Data.IsolationLevel IsolationLevel { get; }
    return:
      type: System.Data.IsolationLevel
      description: "Den <xref href=&quot;System.Data.IsolationLevel&quot;> </xref> för den här transaktionen. Standardvärdet är <xref uid=&quot;langword_csharp_ReadCommitted&quot; name=&quot;ReadCommitted&quot; href=&quot;&quot;> </xref>."
  overload: System.Data.SqlClient.SqlTransaction.IsolationLevel*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlTransaction.Rollback
  id: Rollback
  parent: System.Data.SqlClient.SqlTransaction
  langs:
  - csharp
  name: Rollback()
  nameWithType: SqlTransaction.Rollback()
  fullName: System.Data.SqlClient.SqlTransaction.Rollback()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "Återställer en transaktion från ett väntande tillstånd."
  remarks: "Rollback-metoden motsvarar ROLLBACK TRANSACTION Transact-SQL-instruktionen. Mer information finns i SQL Server Books Online.       Transaktionen kan bara återställas från ett väntande tillstånd (när <xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A>har anropats, men innan <xref:System.Data.SqlClient.SqlTransaction.Commit%2A>kallas).</xref:System.Data.SqlClient.SqlTransaction.Commit%2A> </xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A> Transaktionen återställs tillbaka om den har tagits bort innan `Commit` eller `Rollback` anropas.      > [!NOTE]  >   `Try` / `Catch` undantagshantering alltid ska användas när en transaktion återställdes. En `Rollback` genererar ett <xref:System.InvalidOperationException>om anslutningen bröts eller om transaktionen har redan återställts på servern.</xref:System.InvalidOperationException>       Mer information om transaktioner för SQL Server finns i &quot;Explicit&quot; och &quot;Kodning effektiva transaktioner&quot; i SQL Server Books Online."
  example:
  - "The following example creates a <xref:System.Data.SqlClient.SqlConnection> and a <xref:System.Data.SqlClient.SqlTransaction>. It also demonstrates how to use the <xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A>, <xref:System.Data.SqlClient.SqlTransaction.Commit%2A>, and Rollback methods. The transaction is rolled back on any error. `Try`/`Catch` error handling is used to handle any errors when attempting to commit or roll back the transaction.  \n  \n [!code-cs[Classic WebData SqlConnection.BeginTransaction Example#1](~/add/codesnippet/csharp/m-system.data.sqlclient._8_1.cs)]\n [!code-vb[Classic WebData SqlConnection.BeginTransaction Example#1](~/add/codesnippet/visualbasic/m-system.data.sqlclient._8_1.vb)]"
  syntax:
    content: public override void Rollback ();
    parameters: []
  overload: System.Data.SqlClient.SqlTransaction.Rollback*
  exceptions:
  - type: System.Exception
    commentId: T:System.Exception
    description: "Ett fel uppstod vid försök att genomföra transaktionen."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Transaktionen har redan bekräftats eller återställts.       - eller - anslutningen har brutits."
  platform:
  - net462
- uid: System.Data.SqlClient.SqlTransaction.Rollback(System.String)
  id: Rollback(System.String)
  parent: System.Data.SqlClient.SqlTransaction
  langs:
  - csharp
  name: Rollback(String)
  nameWithType: SqlTransaction.Rollback(String)
  fullName: System.Data.SqlClient.SqlTransaction.Rollback(String)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "Återställer en transaktion från ett väntande tillstånd, och anger transaktion eller lagringspunkt namn."
  remarks: "Den <xref:System.Data.SqlClient.SqlTransaction.Rollback%2A>metoden motsvarar ROLLBACK TRANSACTION Transact-SQL-instruktionen.</xref:System.Data.SqlClient.SqlTransaction.Rollback%2A> Mer information finns i &quot;Explicita transaktioner&quot; och &quot;Lagringspunkter&quot; i SQL Server Books Online.       Transaktionen kan bara återställas från ett väntande tillstånd (när <xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A>har anropats, men innan <xref:System.Data.SqlClient.SqlTransaction.Commit%2A>kallas).</xref:System.Data.SqlClient.SqlTransaction.Commit%2A> </xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A> Transaktionen återställs om det har tagits bort innan `Commit` eller `Rollback` anropas.      > [!NOTE]  >   `Try` / `Catch` undantagshantering alltid ska användas när en transaktion återställdes. En `Rollback` genererar ett <xref:System.InvalidOperationException>om anslutningen bröts eller om transaktionen har redan återställts på servern.</xref:System.InvalidOperationException>       Mer information om transaktioner för SQL Server finns i &quot;Explicit&quot; och &quot;Kodning effektiva transaktioner&quot; i SQL Server Books Online."
  example:
  - "The following example creates a <xref:System.Data.SqlClient.SqlConnection> and a <xref:System.Data.SqlClient.SqlTransaction>. It also demonstrates how to use the <xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A>, <xref:System.Data.SqlClient.SqlTransaction.Commit%2A>, and <xref:System.Data.SqlClient.SqlTransaction.Rollback%2A> methods. The transaction is rolled back on any error. `Try`/`Catch` error handling is used to handle any errors when attempting to commit or roll back the transaction.  \n  \n [!code-cs[Classic WebData SqlConnection.BeginTransaction2 Example#1](~/add/codesnippet/csharp/m-system.data.sqlclient._40_1.cs)]\n [!code-vb[Classic WebData SqlConnection.BeginTransaction2 Example#1](~/add/codesnippet/visualbasic/m-system.data.sqlclient._40_1.vb)]"
  syntax:
    content: public void Rollback (string transactionName);
    parameters:
    - id: transactionName
      type: System.String
      description: "Namnet på transaktionen att återställa eller lagringspunkt som du vill återställa."
  overload: System.Data.SqlClient.SqlTransaction.Rollback*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Ingen transaktionsnamnet har angetts."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Transaktionen har redan bekräftats eller återställts.       - eller - anslutningen har brutits."
  platform:
  - net462
- uid: System.Data.SqlClient.SqlTransaction.Save(System.String)
  id: Save(System.String)
  parent: System.Data.SqlClient.SqlTransaction
  langs:
  - csharp
  name: Save(String)
  nameWithType: SqlTransaction.Save(String)
  fullName: System.Data.SqlClient.SqlTransaction.Save(String)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "Skapar en lagringspunkt i transaktionen som kan användas för att återställa en del av transaktionen och anger namnet på lagringspunkten."
  remarks: "Spara metoden motsvarar SAVE TRANSACTION i Transact-SQL-instruktionen.       Det värde som används i den `savePoint` parameter kan ha samma värde som används i den `transactionName` parametern för vissa implementeringar av den <xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A>metoden.</xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A>       Lagringspunkter kan om du vill återställa delar av transaktioner. Du skapar en lagringspunkt med metoden spara och sedan anropa den <xref:System.Data.SqlClient.SqlTransaction.Rollback%2A>metod för att återställa till lagringspunkten i stället för till början av transaktionen.</xref:System.Data.SqlClient.SqlTransaction.Rollback%2A>"
  syntax:
    content: public void Save (string savePointName);
    parameters:
    - id: savePointName
      type: System.String
      description: "Namnet på lagringspunkten."
  overload: System.Data.SqlClient.SqlTransaction.Save*
  exceptions:
  - type: System.Exception
    commentId: T:System.Exception
    description: "Ett fel uppstod vid försök att genomföra transaktionen."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Transaktionen har redan bekräftats eller återställts.       - eller - anslutningen har brutits."
  platform:
  - net462
references:
- uid: System.Data.Common.DbTransaction
  isExternal: false
  name: System.Data.Common.DbTransaction
- uid: System.Exception
  isExternal: true
  name: System.Exception
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.Data.SqlClient.SqlTransaction.Commit
  parent: System.Data.SqlClient.SqlTransaction
  isExternal: false
  name: Commit()
  nameWithType: SqlTransaction.Commit()
  fullName: System.Data.SqlClient.SqlTransaction.Commit()
- uid: System.Data.SqlClient.SqlTransaction.Connection
  parent: System.Data.SqlClient.SqlTransaction
  isExternal: false
  name: Connection
  nameWithType: SqlTransaction.Connection
  fullName: System.Data.SqlClient.SqlTransaction.Connection
- uid: System.Data.SqlClient.SqlConnection
  parent: System.Data.SqlClient
  isExternal: false
  name: SqlConnection
  nameWithType: SqlConnection
  fullName: System.Data.SqlClient.SqlConnection
- uid: System.Data.SqlClient.SqlTransaction.DbConnection
  parent: System.Data.SqlClient.SqlTransaction
  isExternal: false
  name: DbConnection
  nameWithType: SqlTransaction.DbConnection
  fullName: System.Data.SqlClient.SqlTransaction.DbConnection
- uid: System.Data.Common.DbConnection
  parent: System.Data.Common
  isExternal: false
  name: DbConnection
  nameWithType: DbConnection
  fullName: System.Data.Common.DbConnection
- uid: System.Data.SqlClient.SqlTransaction.Dispose(System.Boolean)
  parent: System.Data.SqlClient.SqlTransaction
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: SqlTransaction.Dispose(Boolean)
  fullName: System.Data.SqlClient.SqlTransaction.Dispose(Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Data.SqlClient.SqlTransaction.IsolationLevel
  parent: System.Data.SqlClient.SqlTransaction
  isExternal: false
  name: IsolationLevel
  nameWithType: SqlTransaction.IsolationLevel
  fullName: System.Data.SqlClient.SqlTransaction.IsolationLevel
- uid: System.Data.IsolationLevel
  parent: System.Data
  isExternal: false
  name: IsolationLevel
  nameWithType: IsolationLevel
  fullName: System.Data.IsolationLevel
- uid: System.Data.SqlClient.SqlTransaction.Rollback
  parent: System.Data.SqlClient.SqlTransaction
  isExternal: false
  name: Rollback()
  nameWithType: SqlTransaction.Rollback()
  fullName: System.Data.SqlClient.SqlTransaction.Rollback()
- uid: System.Data.SqlClient.SqlTransaction.Rollback(System.String)
  parent: System.Data.SqlClient.SqlTransaction
  isExternal: false
  name: Rollback(String)
  nameWithType: SqlTransaction.Rollback(String)
  fullName: System.Data.SqlClient.SqlTransaction.Rollback(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Data.SqlClient.SqlTransaction.Save(System.String)
  parent: System.Data.SqlClient.SqlTransaction
  isExternal: false
  name: Save(String)
  nameWithType: SqlTransaction.Save(String)
  fullName: System.Data.SqlClient.SqlTransaction.Save(String)
- uid: System.Data.SqlClient.SqlTransaction.Commit*
  parent: System.Data.SqlClient.SqlTransaction
  isExternal: false
  name: Commit
  nameWithType: SqlTransaction.Commit
- uid: System.Data.SqlClient.SqlTransaction.Connection*
  parent: System.Data.SqlClient.SqlTransaction
  isExternal: false
  name: Connection
  nameWithType: SqlTransaction.Connection
- uid: System.Data.SqlClient.SqlTransaction.DbConnection*
  parent: System.Data.SqlClient.SqlTransaction
  isExternal: false
  name: DbConnection
  nameWithType: SqlTransaction.DbConnection
- uid: System.Data.SqlClient.SqlTransaction.Dispose*
  parent: System.Data.SqlClient.SqlTransaction
  isExternal: false
  name: Dispose
  nameWithType: SqlTransaction.Dispose
- uid: System.Data.SqlClient.SqlTransaction.IsolationLevel*
  parent: System.Data.SqlClient.SqlTransaction
  isExternal: false
  name: IsolationLevel
  nameWithType: SqlTransaction.IsolationLevel
- uid: System.Data.SqlClient.SqlTransaction.Rollback*
  parent: System.Data.SqlClient.SqlTransaction
  isExternal: false
  name: Rollback
  nameWithType: SqlTransaction.Rollback
- uid: System.Data.SqlClient.SqlTransaction.Save*
  parent: System.Data.SqlClient.SqlTransaction
  isExternal: false
  name: Save
  nameWithType: SqlTransaction.Save
