### YamlMime:ManagedReference
items:
- uid: System.Diagnostics.ProcessStartInfo
  id: ProcessStartInfo
  children:
  - System.Diagnostics.ProcessStartInfo.#ctor
  - System.Diagnostics.ProcessStartInfo.#ctor(System.String)
  - System.Diagnostics.ProcessStartInfo.#ctor(System.String,System.String)
  - System.Diagnostics.ProcessStartInfo.Arguments
  - System.Diagnostics.ProcessStartInfo.CreateNoWindow
  - System.Diagnostics.ProcessStartInfo.Domain
  - System.Diagnostics.ProcessStartInfo.Environment
  - System.Diagnostics.ProcessStartInfo.EnvironmentVariables
  - System.Diagnostics.ProcessStartInfo.ErrorDialog
  - System.Diagnostics.ProcessStartInfo.ErrorDialogParentHandle
  - System.Diagnostics.ProcessStartInfo.FileName
  - System.Diagnostics.ProcessStartInfo.LoadUserProfile
  - System.Diagnostics.ProcessStartInfo.Password
  - System.Diagnostics.ProcessStartInfo.PasswordInClearText
  - System.Diagnostics.ProcessStartInfo.RedirectStandardError
  - System.Diagnostics.ProcessStartInfo.RedirectStandardInput
  - System.Diagnostics.ProcessStartInfo.RedirectStandardOutput
  - System.Diagnostics.ProcessStartInfo.StandardErrorEncoding
  - System.Diagnostics.ProcessStartInfo.StandardOutputEncoding
  - System.Diagnostics.ProcessStartInfo.UserName
  - System.Diagnostics.ProcessStartInfo.UseShellExecute
  - System.Diagnostics.ProcessStartInfo.Verb
  - System.Diagnostics.ProcessStartInfo.Verbs
  - System.Diagnostics.ProcessStartInfo.WindowStyle
  - System.Diagnostics.ProcessStartInfo.WorkingDirectory
  langs:
  - csharp
  name: ProcessStartInfo
  nameWithType: ProcessStartInfo
  fullName: System.Diagnostics.ProcessStartInfo
  type: Class
  summary: "Anger en uppsättning värden som används när du startar en process."
  remarks: "ProcessStartInfo används tillsammans med den <xref:System.Diagnostics.Process>komponent.</xref:System.Diagnostics.Process> När du startar en process som använder den <xref:System.Diagnostics.Process>klassen, har du tillgång till processinformation utöver den som tillgänglig när du ansluter till en process som körs.</xref:System.Diagnostics.Process>       Du kan använda klassen ProcessStartInfo för bättre kontroll över processen startas. Du måste ange minst den <xref:System.Diagnostics.ProcessStartInfo.FileName%2A>egenskapen, antingen manuellt eller med hjälp av konstruktorn.</xref:System.Diagnostics.ProcessStartInfo.FileName%2A> Filnamnet är program eller dokument. Här definieras ett dokument för att en filtyp som har en öppen standard åtgärd som är associerad med den. Du kan visa filtyper och associerade program för datorn med hjälp av den **Mappalternativ** dialogrutan som är tillgängliga via operativsystemet. Den **Avancerat** knappen leder till en dialogruta som visar om det finns en öppen åtgärd som är associerad med en specifik registrerad filtyp.       Dessutom kan du ange andra egenskaper som definierar åtgärder för att ta med den filen. Du kan ange ett värde som är specifika för typ av den <xref:System.Diagnostics.ProcessStartInfo.FileName%2A>-egenskapen för den <xref:System.Diagnostics.ProcessStartInfo.Verb%2A>egenskapen.</xref:System.Diagnostics.ProcessStartInfo.Verb%2A> </xref:System.Diagnostics.ProcessStartInfo.FileName%2A> Du kan till exempel ange &quot;skriva&quot; för en dokumenttyp. Du kan också ange <xref:System.Diagnostics.ProcessStartInfo.Arguments%2A>egenskapsvärden ska kommandoradsargument för att skicka till filens öppna proceduren.</xref:System.Diagnostics.ProcessStartInfo.Arguments%2A> Om du anger en text redigeringsprogram i till exempel den <xref:System.Diagnostics.ProcessStartInfo.FileName%2A>egenskapen som du kan använda den <xref:System.Diagnostics.ProcessStartInfo.Arguments%2A>att ange en textfil ska öppnas i redigeraren.</xref:System.Diagnostics.ProcessStartInfo.Arguments%2A> </xref:System.Diagnostics.ProcessStartInfo.FileName%2A>       Standard-indata är vanligtvis tangentbordet och standardutdata och standardfel är vanligtvis skärmen. Du kan använda den <xref:System.Diagnostics.ProcessStartInfo.RedirectStandardInput%2A>, <xref:System.Diagnostics.ProcessStartInfo.RedirectStandardOutput%2A>, och <xref:System.Diagnostics.ProcessStartInfo.RedirectStandardError%2A>Egenskaper för att få processen att hämta indata från eller returnera utdata till en fil eller annan enhet.</xref:System.Diagnostics.ProcessStartInfo.RedirectStandardError%2A> </xref:System.Diagnostics.ProcessStartInfo.RedirectStandardOutput%2A> </xref:System.Diagnostics.ProcessStartInfo.RedirectStandardInput%2A> Om du använder den <xref:System.Diagnostics.Process.StandardInput%2A>, <xref:System.Diagnostics.Process.StandardOutput%2A>, eller <xref:System.Diagnostics.Process.StandardError%2A>Egenskaper på den <xref:System.Diagnostics.Process>komponent, måste du först ange det motsvarande värdet på egenskapen ProcessStartInfo.</xref:System.Diagnostics.Process> </xref:System.Diagnostics.Process.StandardError%2A> </xref:System.Diagnostics.Process.StandardOutput%2A> </xref:System.Diagnostics.Process.StandardInput%2A> Annars genereras ett undantag i systemet när du läsa eller skriva till dataströmmen.       Ange <xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A>att ange om du vill starta processen med hjälp av operativsystemets skal.</xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A>       Du kan ändra värdet för en egenskap för ProcessStartInfo upp till den tid som processen startas. När du har startat processen har ändra dessa värden ingen effekt.      > [!NOTE] > Den här klassen innehåller en länk efterfrågan på klassnivå som gäller för alla medlemmar. En <xref:System.Security.SecurityException>när den omedelbara anroparen inte har behörighet fullständigt betrodd.</xref:System.Security.SecurityException> Mer information om krav för säkerhet finns [länk krav](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following code example demonstrates how to use the ProcessStartInfo class to start Internet Explorer, providing the destination URLs as ProcessStartInfo arguments.  \n  \n [!code-vb[Process.Start_static#1](~/add/codesnippet/visualbasic/t-system.diagnostics.pro_2_1.vb)]\n [!code-cs[Process.Start_static#1](~/add/codesnippet/csharp/t-system.diagnostics.pro_2_1.cs)]\n [!code-cpp[Process.Start_static#1](~/add/codesnippet/cpp/t-system.diagnostics.pro_2_1.cpp)]"
  syntax:
    content: >-
      [System.ComponentModel.TypeConverter(typeof(System.ComponentModel.ExpandableObjectConverter))]

      public sealed class ProcessStartInfo
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Diagnostics.ProcessStartInfo.#ctor
  id: '#ctor'
  parent: System.Diagnostics.ProcessStartInfo
  langs:
  - csharp
  name: ProcessStartInfo()
  nameWithType: ProcessStartInfo.ProcessStartInfo()
  fullName: System.Diagnostics.ProcessStartInfo.ProcessStartInfo()
  type: Constructor
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Initierar en ny instans av den <xref href=&quot;System.Diagnostics.ProcessStartInfo&quot;> </xref> klass utan att ange ett filnamn som du vill starta processen."
  remarks: "Du måste ange minst <xref:System.Diagnostics.ProcessStartInfo.FileName%2A>egenskapen innan du startar processen.</xref:System.Diagnostics.ProcessStartInfo.FileName%2A> Filnamnet är program eller dokument. I det här fallet har ett dokument definierats för att en filtyp som har en öppen standard åtgärd som är associerad med den. Du kan visa filtyper och associerade program för datorn med hjälp av den **Mappalternativ** dialogrutan som är tillgängliga via operativsystemet. Den **Avancerat** knappen leder till en dialogruta som visar om det finns en öppen åtgärd som är associerad med en specifik registrerad filtyp.       Du kan också ange andra egenskaper innan du startar processen. Den <xref:System.Diagnostics.ProcessStartInfo.Verb%2A>egenskapen tillhandahåller åtgärder att göra, till exempel &quot;print&quot; med den fil som anges i den <xref:System.Diagnostics.ProcessStartInfo.FileName%2A>egenskapen.</xref:System.Diagnostics.ProcessStartInfo.FileName%2A> </xref:System.Diagnostics.ProcessStartInfo.Verb%2A> <xref:System.Diagnostics.ProcessStartInfo.Arguments%2A>Egenskapen tillhandahåller ett sätt att skicka kommandoradsargument för att filen när den öppnas det.</xref:System.Diagnostics.ProcessStartInfo.Arguments%2A>"
  syntax:
    content: public ProcessStartInfo ();
    parameters: []
  overload: System.Diagnostics.ProcessStartInfo.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.ProcessStartInfo.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: System.Diagnostics.ProcessStartInfo
  langs:
  - csharp
  name: ProcessStartInfo(String)
  nameWithType: ProcessStartInfo.ProcessStartInfo(String)
  fullName: System.Diagnostics.ProcessStartInfo.ProcessStartInfo(String)
  type: Constructor
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Initierar en ny instans av den <xref href=&quot;System.Diagnostics.ProcessStartInfo&quot;> </xref> klassen och anger ett filnamn, till exempel ett program eller dokument som du vill starta processen."
  remarks: "Filnamnet är program eller dokument. I det här fallet har ett dokument definierats för att en filtyp som har en öppen standard åtgärd som är associerad med den. Du kan visa filtyper och associerade program för datorn med hjälp av den **Mappalternativ** dialogrutan som är tillgängliga via operativsystemet. Den **Avancerat** knappen leder till en dialogruta som visar om det finns en öppen åtgärd som är associerad med en specifik registrerad filtyp.       Du kan ändra den <xref:System.Diagnostics.ProcessStartInfo.FileName%2A>egenskapen när du anropar den här konstruktorn, upp till den tid som processen startas.</xref:System.Diagnostics.ProcessStartInfo.FileName%2A> När du har startat processen har ändra dessa värden ingen effekt."
  syntax:
    content: public ProcessStartInfo (string fileName);
    parameters:
    - id: fileName
      type: System.String
      description: "Ett program eller dokument som du vill starta en process."
  overload: System.Diagnostics.ProcessStartInfo.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.ProcessStartInfo.#ctor(System.String,System.String)
  id: '#ctor(System.String,System.String)'
  parent: System.Diagnostics.ProcessStartInfo
  langs:
  - csharp
  name: ProcessStartInfo(String,String)
  nameWithType: ProcessStartInfo.ProcessStartInfo(String,String)
  fullName: System.Diagnostics.ProcessStartInfo.ProcessStartInfo(String,String)
  type: Constructor
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Initierar en ny instans av den <xref href=&quot;System.Diagnostics.ProcessStartInfo&quot;> </xref> klass, anger ett filnamn för programmet som du vill starta processen och anger en uppsättning kommandoradsargument för att skicka till programmet."
  remarks: "Filnamnet är program eller dokument. I det här fallet har ett dokument definierats för att en filtyp som har en öppen standard åtgärd som är associerad med den. Du kan visa filtyper och associerade program för datorn med hjälp av den **Mappalternativ** dialogrutan som är tillgängliga via operativsystemet. Den **Avancerat** knappen leder till en dialogruta som visar om det finns en öppen åtgärd som är associerad med en specifik registrerad filtyp.       Du kan ändra den <xref:System.Diagnostics.ProcessStartInfo.FileName%2A>eller <xref:System.Diagnostics.ProcessStartInfo.Arguments%2A>Egenskaper när du anropar den här konstruktorn, upp till den tid som processen startas.</xref:System.Diagnostics.ProcessStartInfo.Arguments%2A> </xref:System.Diagnostics.ProcessStartInfo.FileName%2A> När du har startat processen har ändra dessa värden ingen effekt."
  syntax:
    content: public ProcessStartInfo (string fileName, string arguments);
    parameters:
    - id: fileName
      type: System.String
      description: "Ett program som du vill starta en process."
    - id: arguments
      type: System.String
      description: "Kommandoradsargument för att skicka till programmet när processen startas."
  overload: System.Diagnostics.ProcessStartInfo.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.ProcessStartInfo.Arguments
  id: Arguments
  parent: System.Diagnostics.ProcessStartInfo
  langs:
  - csharp
  name: Arguments
  nameWithType: ProcessStartInfo.Arguments
  fullName: System.Diagnostics.ProcessStartInfo.Arguments
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Hämtar eller anger uppsättningen kommandoradsargument som ska användas när programmet startas."
  remarks: ''
  example:
  - "The first example below creates a small application (argsecho.exe) that echos its arguments to the console. The second example creates an application that invokes argsecho.exe to demonstrate different variations for the Arguments property.  \n  \n [!code-vb[Process.Start_static#3](~/add/codesnippet/visualbasic/p-system.diagnostics.pro_2_1.vb)]\n [!code-cs[Process.Start_static#3](~/add/codesnippet/csharp/p-system.diagnostics.pro_2_1.cs)]\n [!code-cpp[Process.Start_static#3](~/add/codesnippet/cpp/p-system.diagnostics.pro_2_1.cpp)]  \n  \n [!code-vb[Process.Start_static#2](~/add/codesnippet/visualbasic/p-system.diagnostics.pro_2_2.vb)]\n [!code-cs[Process.Start_static#2](~/add/codesnippet/csharp/p-system.diagnostics.pro_2_2.cs)]\n [!code-cpp[Process.Start_static#2](~/add/codesnippet/cpp/p-system.diagnostics.pro_2_2.cpp)]"
  syntax:
    content: public string Arguments { get; set; }
    return:
      type: System.String
      description: "En sträng som innehåller argument att skicka vidare till målprogrammet som anges i den <xref:System.Diagnostics.ProcessStartInfo.FileName*>egenskapen.</xref:System.Diagnostics.ProcessStartInfo.FileName*> Standardvärdet är en tom sträng (&quot;&quot;). Längden på de argument som lagts till i den fullständiga sökvägen till processen längd måste vara mindre än 2 080 i Windows Vista och tidigare versioner av Windows-operativsystemet. Längden måste vara mindre än 32699 för Windows 7 och senare versioner.       Argument parsas och tolkas av målprogrammet, så måste överensstämma med förväntningar för programmet. For.NET program som visas i exemplen nedan, blanksteg tolkas som avgränsare mellan flera argument. Ett argument som innehåller blanksteg måste omges av citattecken, men dessa citattecken överförs inte till målprogrammet. Inkludera i citattecken i slutliga parsas argument, trippel-escape varje markering."
  overload: System.Diagnostics.ProcessStartInfo.Arguments*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.ProcessStartInfo.CreateNoWindow
  id: CreateNoWindow
  parent: System.Diagnostics.ProcessStartInfo
  langs:
  - csharp
  name: CreateNoWindow
  nameWithType: ProcessStartInfo.CreateNoWindow
  fullName: System.Diagnostics.ProcessStartInfo.CreateNoWindow
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Hämtar eller anger ett värde som anger om du vill starta processen i ett nytt fönster."
  remarks: "Om den <xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A>egenskapen är `true` eller <xref:System.Diagnostics.ProcessStartInfo.UserName%2A>och <xref:System.Diagnostics.ProcessStartInfo.Password%2A>Egenskaper är inte `null`, egenskapsvärdet CreateNoWindow ignoreras och ett nytt fönster skapas.</xref:System.Diagnostics.ProcessStartInfo.Password%2A> </xref:System.Diagnostics.ProcessStartInfo.UserName%2A> </xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A>"
  example:
  - >-
    [!code-cpp[Process.Start_instance#1](~/add/codesnippet/cpp/p-system.diagnostics.pro_19_1.cpp)]
     [!code-vb[Process.Start_instance#1](~/add/codesnippet/visualbasic/p-system.diagnostics.pro_19_1.vb)]
     [!code-cs[Process.Start_instance#1](~/add/codesnippet/csharp/p-system.diagnostics.pro_19_1.cs)]
  syntax:
    content: public bool CreateNoWindow { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Om processen ska startas utan att skapa ett nytt fönster för att innehålla. Annars <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. Standardvärdet är <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Diagnostics.ProcessStartInfo.CreateNoWindow*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.ProcessStartInfo.Domain
  id: Domain
  parent: System.Diagnostics.ProcessStartInfo
  langs:
  - csharp
  name: Domain
  nameWithType: ProcessStartInfo.Domain
  fullName: System.Diagnostics.ProcessStartInfo.Domain
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Hämtar eller anger ett värde som identifierar domänen som ska användas när den startas."
  syntax:
    content: public string Domain { get; set; }
    return:
      type: System.String
      description: "Active Directory-domän ska användas när den startas. Domain-egenskapen är främst av intresse för användare i företagsmiljöer som använder Active Directory."
  overload: System.Diagnostics.ProcessStartInfo.Domain*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.ProcessStartInfo.Environment
  id: Environment
  parent: System.Diagnostics.ProcessStartInfo
  langs:
  - csharp
  name: Environment
  nameWithType: ProcessStartInfo.Environment
  fullName: System.Diagnostics.ProcessStartInfo.Environment
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Hämtar miljövariabler som gäller för den här processen och dess underordnade processer."
  remarks: "The environment variables contain search paths for files, directories for temporary files, application-specific options, and other similar information. Although you cannot directly set the Environment property, you can modify the generic dictionary returned by the property. For example, the following code adds a TempPath environment variable: `myProcess.StartInfo.Environment.Add(\"TempPath\", \"C:\\\\Temp\")`.  You must set the <xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A> property to `false` to start the process after changing the Environment property. If <xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A> is `true`, an <xref:System.InvalidOperationException> is thrown when the <xref:System.Diagnostics.Process.Start%2A> method is called.  \n  \n On .NET Framework applications, using the Environment property is the same as using the <xref:System.Diagnostics.ProcessStartInfo.EnvironmentVariables%2A> property."
  syntax:
    content: public System.Collections.Generic.IDictionary<string,string> Environment { get; }
    return:
      type: System.Collections.Generic.IDictionary{System.String,System.String}
      description: "En allmän ordlista som innehåller miljövariabler som gäller för den här processen och dess underordnade processer. Standardvärdet är <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  overload: System.Diagnostics.ProcessStartInfo.Environment*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.ProcessStartInfo.EnvironmentVariables
  id: EnvironmentVariables
  parent: System.Diagnostics.ProcessStartInfo
  langs:
  - csharp
  name: EnvironmentVariables
  nameWithType: ProcessStartInfo.EnvironmentVariables
  fullName: System.Diagnostics.ProcessStartInfo.EnvironmentVariables
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Hämtar söka sökvägar för filer, kataloger för temporära filer, programspecifika alternativ och andra liknande information."
  remarks: 'Du inte kan ange egenskapen EnvironmentVariables, men du kan ändra den <xref:System.Collections.Specialized.StringDictionary>returneras av egenskapen.</xref:System.Collections.Specialized.StringDictionary> Till exempel följande kod lägger till en miljövariabel TempPath: `myProcess.StartInfo.EnvironmentVariables.Add(&quot;TempPath&quot;, &quot;C:\\Temp&quot;)`.  Du måste ange den <xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A>egenskapen `false` att starta processen när du har ändrat egenskapen EnvironmentVariables.</xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A> Om <xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A>är `true`, en <xref:System.InvalidOperationException>genereras när den <xref:System.Diagnostics.Process.Start%2A>metoden anropas.</xref:System.Diagnostics.Process.Start%2A> </xref:System.InvalidOperationException> </xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A>'
  syntax:
    content: public System.Collections.Specialized.StringDictionary EnvironmentVariables { get; }
    return:
      type: System.Collections.Specialized.StringDictionary
      description: "En ordlista med sträng som innehåller miljövariabler som gäller för den här processen och underordnade processer. Standardvärdet är <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  overload: System.Diagnostics.ProcessStartInfo.EnvironmentVariables*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.ProcessStartInfo.ErrorDialog
  id: ErrorDialog
  parent: System.Diagnostics.ProcessStartInfo
  langs:
  - csharp
  name: ErrorDialog
  nameWithType: ProcessStartInfo.ErrorDialog
  fullName: System.Diagnostics.ProcessStartInfo.ErrorDialog
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Hämtar eller anger ett värde som anger om en dialogruta visas för användaren om processen inte startas."
  remarks: >-
    > [!NOTE]

    >  <xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A> must be `true` if you want to set ErrorDialog to `true`.
  syntax:
    content: public bool ErrorDialog { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Om en feldialogruta ska visas på skärmen om processen inte startas. Annars <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. Standardvärdet är <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Diagnostics.ProcessStartInfo.ErrorDialog*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.ProcessStartInfo.ErrorDialogParentHandle
  id: ErrorDialogParentHandle
  parent: System.Diagnostics.ProcessStartInfo
  langs:
  - csharp
  name: ErrorDialogParentHandle
  nameWithType: ProcessStartInfo.ErrorDialogParentHandle
  fullName: System.Diagnostics.ProcessStartInfo.ErrorDialogParentHandle
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Hämtar eller anger fönsterreferensen ska användas när en dialogruta visas för en process som inte kan startas."
  remarks: "Om <xref:System.Diagnostics.ProcessStartInfo.ErrorDialog%2A>är `true`, egenskapen ErrorDialogParentHandle anger det överordnade fönstret för dialogrutan som visas.</xref:System.Diagnostics.ProcessStartInfo.ErrorDialog%2A> Det är användbart för att ange en överordnad för att hålla dialogrutan framför programmet."
  syntax:
    content: public IntPtr ErrorDialogParentHandle { get; set; }
    return:
      type: System.IntPtr
      description: "En pekare till referensen till dialogrutan att resultaten från en process startas fel."
  overload: System.Diagnostics.ProcessStartInfo.ErrorDialogParentHandle*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.ProcessStartInfo.FileName
  id: FileName
  parent: System.Diagnostics.ProcessStartInfo
  langs:
  - csharp
  name: FileName
  nameWithType: ProcessStartInfo.FileName
  fullName: System.Diagnostics.ProcessStartInfo.FileName
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Hämtar eller anger program eller dokument för att starta."
  remarks: "Du måste ange minst FileName-egenskapen innan du startar processen. Filnamnet är program eller dokument. Ett dokument har definierats för att en filtyp som har en öppen standard åtgärd som är associerad med den. Du kan visa filtyper och associerade program för datorn med hjälp av den **Mappalternativ** dialogrutan som är tillgängliga via operativsystemet. Den **Avancerat** knappen leder till en dialogruta som visar om det finns en öppen åtgärd som är associerad med en specifik registrerad filtyp.       Uppsättningen filtyper som är tillgängliga beror delvis på värdet för den <xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A>egenskapen.</xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A> Om <xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A>är `true`, du kan starta alla dokument och utföra åtgärder på filen, till exempel utskrifter med den <xref:System.Diagnostics.Process>komponent.</xref:System.Diagnostics.Process> </xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A> När <xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A>är `false`, du kan starta körbara filer med den <xref:System.Diagnostics.Process>komponent.</xref:System.Diagnostics.Process> </xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A>       Du kan starta ett ClickOnce-program genom att ange egenskapen FileName plats (till exempel en webbadress) från vilken du installerade programmet. Starta inte ett ClickOnce-program genom att ange installationsplatsen på hårddisken."
  example:
  - >-
    [!code-cpp[Process.Start_instance#1](~/add/codesnippet/cpp/p-system.diagnostics.pro_27_1.cpp)]
     [!code-vb[Process.Start_instance#1](~/add/codesnippet/visualbasic/p-system.diagnostics.pro_27_1.vb)]
     [!code-cs[Process.Start_instance#1](~/add/codesnippet/csharp/p-system.diagnostics.pro_27_1.cs)]
  syntax:
    content: public string FileName { get; set; }
    return:
      type: System.String
      description: "Namnet på programmet för att starta, eller namnet på ett dokument för en filtyp som är associerad med ett program och som har ett standardvärde Öppna åtgärd som är tillgängliga för den. Standardvärdet är en tom sträng (&quot;&quot;)."
  overload: System.Diagnostics.ProcessStartInfo.FileName*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.ProcessStartInfo.LoadUserProfile
  id: LoadUserProfile
  parent: System.Diagnostics.ProcessStartInfo
  langs:
  - csharp
  name: LoadUserProfile
  nameWithType: ProcessStartInfo.LoadUserProfile
  fullName: System.Diagnostics.ProcessStartInfo.LoadUserProfile
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Hämtar eller anger ett värde som anger om Windows-användarprofilen ska läsas från registret."
  remarks: "Den här egenskapen refereras om processen startas med hjälp av användarnamn, lösenord och domän.       Om värdet är `true`, användarens profil i den `HKEY_USERS` registernyckeln har lästs in. Inläsning av profilen kan ta lång tid. Därför är det bäst att använda det här värdet bara om du måste ansluta till informationen i den `HKEY_CURRENT_USER` registernyckeln.       Profilen tas bort i Windows Server 2003 och Windows 2000, när den nya processen har avslutats, oavsett om processen har skapats underordnade processer.       I Windows XP profilen tas bort efter den nya processen och alla underordnade processer som den har skapats har avbrutits."
  syntax:
    content: public bool LoadUserProfile { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Om Windows-användarprofilen ska läsas in; Annars <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. Standardvärdet är <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Diagnostics.ProcessStartInfo.LoadUserProfile*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.ProcessStartInfo.Password
  id: Password
  parent: System.Diagnostics.ProcessStartInfo
  langs:
  - csharp
  name: Password
  nameWithType: ProcessStartInfo.Password
  fullName: System.Diagnostics.ProcessStartInfo.Password
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Hämtar eller anger en säker sträng som innehåller användarens lösenord ska användas när den startas."
  remarks: "> [!IMPORTANT]\n>  The <xref:System.Diagnostics.ProcessStartInfo.WorkingDirectory%2A> property must be set if <xref:System.Diagnostics.ProcessStartInfo.UserName%2A> and Password are provided. If the property is not set, the default working directory is %SYSTEMROOT%\\system32.  \n  \n> [!NOTE]\n>  Setting the <xref:System.Diagnostics.ProcessStartInfo.Domain%2A>, <xref:System.Diagnostics.ProcessStartInfo.UserName%2A>, and the Password properties in a <xref:System.Diagnostics.ProcessStartInfo> object is the recommended practice for starting a process with user credentials.  \n  \n A <xref:System.Security.SecureString> object is like a <xref:System.String> object in that it has a text value. However, the value of a <xref:System.Security.SecureString> object is automatically encrypted, it can be modified until your application marks it as read-only, and it can be deleted from computer memory by either your application or the .NET Framework garbage collector.  \n  \n For more information about secure strings and an example of how to obtain a password to set this property, see the <xref:System.Security.SecureString> class.  \n  \n> [!NOTE]\n>  If you provide a value for the Password property, the <xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A> property must be `false`, or an <xref:System.InvalidOperationException> will be thrown when the <xref:System.Diagnostics.Process.Start%28System.Diagnostics.ProcessStartInfo%29?displayProperty=fullName> method is called."
  syntax:
    content: public System.Security.SecureString Password { get; set; }
    return:
      type: System.Security.SecureString
      description: "Användarens lösenord ska användas när den startas."
  overload: System.Diagnostics.ProcessStartInfo.Password*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.ProcessStartInfo.PasswordInClearText
  id: PasswordInClearText
  parent: System.Diagnostics.ProcessStartInfo
  langs:
  - csharp
  name: PasswordInClearText
  nameWithType: ProcessStartInfo.PasswordInClearText
  fullName: System.Diagnostics.ProcessStartInfo.PasswordInClearText
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Hämtar eller anger användarens lösenord i klartext ska användas när den startas."
  syntax:
    content: public string PasswordInClearText { get; set; }
    return:
      type: System.String
      description: "Användarens lösenord i klartext."
  overload: System.Diagnostics.ProcessStartInfo.PasswordInClearText*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.ProcessStartInfo.RedirectStandardError
  id: RedirectStandardError
  parent: System.Diagnostics.ProcessStartInfo
  langs:
  - csharp
  name: RedirectStandardError
  nameWithType: ProcessStartInfo.RedirectStandardError
  fullName: System.Diagnostics.ProcessStartInfo.RedirectStandardError
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Hämtar eller anger ett värde som anger om Felutdata för ett program ska skrivas till den &lt;xref:System.Diagnostics.Process.StandardError%2A?displayProperty=fullName&gt; dataströmmen."
  remarks: "När en <xref:System.Diagnostics.Process>skriver texten till dess standardfelströmmen texten visas vanligtvis på konsolen.</xref:System.Diagnostics.Process> Genom att omdirigera den <xref:System.Diagnostics.Process.StandardError%2A>stream, du kan ändra eller utelämna fel resultatet av en process.</xref:System.Diagnostics.Process.StandardError%2A> Du kan till exempel filtrera texten, formatera annorlunda eller skriva utdata till både konsolen och en loggfil som är avsedda.      > [!NOTE] > Måste du ange <xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A>till `false` om du vill ange RedirectStandardError `true`.</xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A> Annars läser från den <xref:System.Diagnostics.Process.StandardError%2A>dataströmmen genererar ett undantag.</xref:System.Diagnostics.Process.StandardError%2A>       Den omdirigerade <xref:System.Diagnostics.Process.StandardError%2A>dataströmmen kan läsas synkront eller asynkront.</xref:System.Diagnostics.Process.StandardError%2A> Metoder som <xref:System.IO.StreamReader.Read%2A>, <xref:System.IO.StreamReader.ReadLine%2A>och <xref:System.IO.StreamReader.ReadToEnd%2A>utföra synkron läsåtgärder på fel utdataströmmen processens.</xref:System.IO.StreamReader.ReadToEnd%2A> </xref:System.IO.StreamReader.ReadLine%2A> </xref:System.IO.StreamReader.Read%2A> Dessa synkron läsa operations inte behöver du göra förrän den associerade <xref:System.Diagnostics.Process>skriver till dess <xref:System.Diagnostics.Process.StandardError%2A>strömma eller stänger dataströmmen.</xref:System.Diagnostics.Process.StandardError%2A> </xref:System.Diagnostics.Process>       Däremot <xref:System.Diagnostics.Process.BeginErrorReadLine%2A>startar asynkrona läsåtgärder på den <xref:System.Diagnostics.Process.StandardError%2A>dataström.</xref:System.Diagnostics.Process.StandardError%2A> </xref:System.Diagnostics.Process.BeginErrorReadLine%2A> Den här metoden aktiverar en avsedda händelsehanteraren för strömmad utdata och returnerar omedelbart till anroparen som kan utföra annat arbete när strömmad utdata omdirigeras till händelsehanteraren.      > [!NOTE] > Det program som bearbetar asynkront utdata ska anropa den <xref:System.Diagnostics.Process.WaitForExit%2A>metod för att säkerställa att utdatabufferten har tömts.</xref:System.Diagnostics.Process.WaitForExit%2A>       Synkron läsa operations introducerar ett beroende mellan anroparen läsning från den <xref:System.Diagnostics.Process.StandardError%2A>dataströmmen och underordnat bearbeta skrivningen till dataströmmen.</xref:System.Diagnostics.Process.StandardError%2A> Dessa beroenden kan orsaka deadlock villkor. När anroparen läser från en underordnad process omdirigerade dataströmmen, är det beroende av underordnat. Anroparen väntar Läsåtgärden tills underordnat skriver till dataströmmen eller stänger dataströmmen. När den underordnade processen skriver tillräckligt med data för att fylla sin omdirigerade stream, är det beroende av överordnat. Den underordnade processen väntar på nästa Skrivåtgärden tills överordnat läser från dataströmmen fullständig eller stänger dataströmmen. Dödläge resultatet när anroparen och underordnad process vänta på att slutföra en åtgärd och inte kan fortsätta. Du kan undvika deadlocks genom utvärdering av beroenden mellan anroparen och underordnad process.       Till exempel visar följande C#-kod hur att läsa från en dataström med omdirigerade och vänta tills den underordnade processen avslutas.      ```   // Start the child process.    Process p = new Process();    // Redirect the error stream of the child process.    p.StartInfo.UseShellExecute = false;    p.StartInfo.RedirectStandardError = true;    p.StartInfo.FileName = &quot;Write500Lines.exe&quot;;    p.Start();    // Do not wait for the child process to exit before    // reading to the end of its redirected error stream.    // p.WaitForExit();    // Read the error stream first and then wait.    string error = p.StandardError.ReadToEnd();    p.WaitForExit();   ```Kodexemplet undviker ett dödläge genom att anropa `p.StandardError.ReadToEnd` innan `p.WaitForExit`. Ett dödläge kan uppstå om överordnat behandla samtal `p.WaitForExit` innan `p.StandardError.ReadToEnd` och den underordnade processen skriver tillräckligt med text för att fylla omdirigerade dataströmmen. Den överordnade processen ska vänta på obestämd tid för den underordnade processen avslutas. Den underordnade processen skulle väntar tills överordnat att läsa från hela <xref:System.Diagnostics.Process.StandardError%2A>dataström.</xref:System.Diagnostics.Process.StandardError%2A>       Det finns ett liknande problem när du Läs all text från både standardutdata och standardfel dataströmmar. Till exempel utför följande C#-kod en Läsåtgärd på båda dataströmmar.      ```   // Do not perform a synchronous read to the end of both   // redirected streams.   // string output = p.StandardOutput.ReadToEnd();   // string error = p.StandardError.ReadToEnd();   // p.WaitForExit();   // Use asynchronous read operations on at least one of the streams.   p.BeginOutputReadLine();   string error = p.StandardError.ReadToEnd();   p.WaitForExit();   ```Kodexemplet undviker dödläge genom att utföra asynkrona läsåtgärder på den <xref:System.Diagnostics.Process.StandardOutput%2A>dataström.</xref:System.Diagnostics.Process.StandardOutput%2A> Ett dödläge resultat om överordnat behandla samtal `p.StandardOutput.ReadToEnd` följt av `p.StandardError.ReadToEnd` och den underordnade processen skriver tillräckligt med text för att fylla sin fel-dataström. Den överordnade processen ska vänta på obestämd tid för den underordnade processen att stänga dess <xref:System.Diagnostics.Process.StandardOutput%2A>dataström.</xref:System.Diagnostics.Process.StandardOutput%2A> Den underordnade processen skulle väntar tills överordnat att läsa från hela <xref:System.Diagnostics.Process.StandardError%2A>dataström.</xref:System.Diagnostics.Process.StandardError%2A>       Du kan använda asynkrona läsåtgärder för att undvika dessa beroenden och deras potentiella dödläge. Alternativt kan undvika du dödläge genom att skapa två trådar och läsa utdata från varje ström på en separat tråd."
  example:
  - "The following example uses the `net use` command together with a user-supplied argument to map a network resource. It then reads the standard error stream of the net command and writes it to console.  \n  \n [!code-cs[Process_StandardError#1](~/add/codesnippet/csharp/p-system.diagnostics.pro_31_1.cs)]\n [!code-cpp[Process_StandardError#1](~/add/codesnippet/cpp/p-system.diagnostics.pro_31_1.cpp)]\n [!code-vb[Process_StandardError#1](~/add/codesnippet/visualbasic/p-system.diagnostics.pro_31_1.vb)]"
  syntax:
    content: public bool RedirectStandardError { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Om Felutdata ska skrivas till &lt;xref:System.Diagnostics.Process.StandardError%2A?displayProperty=fullName&gt;, annars <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. Standardvärdet är <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Diagnostics.ProcessStartInfo.RedirectStandardError*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.ProcessStartInfo.RedirectStandardInput
  id: RedirectStandardInput
  parent: System.Diagnostics.ProcessStartInfo
  langs:
  - csharp
  name: RedirectStandardInput
  nameWithType: ProcessStartInfo.RedirectStandardInput
  fullName: System.Diagnostics.ProcessStartInfo.RedirectStandardInput
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Hämtar eller anger ett värde som anger om indata för ett program läses från den &lt;xref:System.Diagnostics.Process.StandardInput%2A?displayProperty=fullName&gt; dataströmmen."
  remarks: "En <xref:System.Diagnostics.Process>kan läsa indata från dess Standardindataström, vanligtvis tangentbordet.</xref:System.Diagnostics.Process> Genom att omdirigera den <xref:System.Diagnostics.Process.StandardInput%2A>stream, programmässigt kan du ange indata för en process.</xref:System.Diagnostics.Process.StandardInput%2A> I stället för att använda tangentbordet kan ange du exempelvis text från innehållet i en angiven fil eller utdata från ett annat program.      > [!NOTE] > Måste du ange <xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A>till `false` om du vill ange RedirectStandardInput `true`.</xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A> Annars kan skrivning till den <xref:System.Diagnostics.Process.StandardInput%2A>dataströmmen genererar ett undantag.</xref:System.Diagnostics.Process.StandardInput%2A>"
  example:
  - "The following example illustrates how to redirect the <xref:System.Diagnostics.Process.StandardInput%2A> stream of a process. The `sort` command is a console application that reads and sorts text input.  \n  \n The example starts the `sort` command with redirected input. It then prompts the user for text, and passes the text to the `sort` process through the redirected <xref:System.Diagnostics.Process.StandardInput%2A> stream. The `sort` results are displayed to the user on the console.  \n  \n [!code-cs[Process_StandardInput#1](~/add/codesnippet/csharp/p-system.diagnostics.pro_43_1.cs)]\n [!code-cpp[Process_StandardInput#1](~/add/codesnippet/cpp/p-system.diagnostics.pro_43_1.cpp)]\n [!code-vb[Process_StandardInput#1](~/add/codesnippet/visualbasic/p-system.diagnostics.pro_43_1.vb)]"
  syntax:
    content: public bool RedirectStandardInput { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Om indata ska läsas från &lt;xref:System.Diagnostics.Process.StandardInput%2A?displayProperty=fullName&gt;, annars <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. Standardvärdet är <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Diagnostics.ProcessStartInfo.RedirectStandardInput*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.ProcessStartInfo.RedirectStandardOutput
  id: RedirectStandardOutput
  parent: System.Diagnostics.ProcessStartInfo
  langs:
  - csharp
  name: RedirectStandardOutput
  nameWithType: ProcessStartInfo.RedirectStandardOutput
  fullName: System.Diagnostics.ProcessStartInfo.RedirectStandardOutput
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Hämtar eller anger ett värde som anger om textrepresentation utdata för ett program ska skrivas till den &lt;xref:System.Diagnostics.Process.StandardOutput%2A?displayProperty=fullName&gt; dataströmmen."
  remarks: "När en <xref:System.Diagnostics.Process>skriver texten till dess standard dataströmmen texten visas vanligtvis på konsolen.</xref:System.Diagnostics.Process> Genom att ange RedirectStandardOutput `true` att omdirigera den <xref:System.Diagnostics.Process.StandardOutput%2A>stream, du kan ändra eller utelämna resultatet av en process.</xref:System.Diagnostics.Process.StandardOutput%2A> Du kan till exempel filtrera texten, formatera annorlunda eller skriva utdata till både konsolen och en loggfil som är avsedda.      > [!NOTE] > Måste du ange <xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A>till `false` om du vill ange RedirectStandardOutput `true`.</xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A> Annars läser från den <xref:System.Diagnostics.Process.StandardOutput%2A>dataströmmen genererar ett undantag.</xref:System.Diagnostics.Process.StandardOutput%2A>       Den omdirigerade <xref:System.Diagnostics.Process.StandardOutput%2A>dataströmmen kan läsas synkront eller asynkront.</xref:System.Diagnostics.Process.StandardOutput%2A> Metoder som <xref:System.IO.StreamReader.Read%2A>, <xref:System.IO.StreamReader.ReadLine%2A>, och <xref:System.IO.StreamReader.ReadToEnd%2A>utföra synkron läsåtgärder på utdataströmmen processens.</xref:System.IO.StreamReader.ReadToEnd%2A> </xref:System.IO.StreamReader.ReadLine%2A> </xref:System.IO.StreamReader.Read%2A> Dessa synkron läsa operations inte behöver du göra förrän den associerade <xref:System.Diagnostics.Process>skriver till dess <xref:System.Diagnostics.Process.StandardOutput%2A>strömma eller stänger dataströmmen.</xref:System.Diagnostics.Process.StandardOutput%2A> </xref:System.Diagnostics.Process>       Däremot <xref:System.Diagnostics.Process.BeginOutputReadLine%2A>startar asynkrona läsåtgärder på den <xref:System.Diagnostics.Process.StandardOutput%2A>dataström.</xref:System.Diagnostics.Process.StandardOutput%2A> </xref:System.Diagnostics.Process.BeginOutputReadLine%2A> Den här metoden kan en avsedda händelsehanterare (se <xref:System.Diagnostics.Process.OutputDataReceived>) för strömmad utdata och omedelbart returnerar till anroparen kan som kan utföra annat arbete medan strömmad utdata omdirigeras till händelsehanteraren.</xref:System.Diagnostics.Process.OutputDataReceived>      > [!NOTE] > Det program som bearbetar asynkront utdata ska anropa den <xref:System.Diagnostics.Process.WaitForExit%2A>metod för att säkerställa att utdatabufferten har tömts.</xref:System.Diagnostics.Process.WaitForExit%2A>       Synkron läsa operations introducerar ett beroende mellan anroparen läsning från den <xref:System.Diagnostics.Process.StandardOutput%2A>dataströmmen och underordnat bearbeta skrivningen till dataströmmen.</xref:System.Diagnostics.Process.StandardOutput%2A> Dessa beroenden kan orsaka deadlock villkor. När anroparen läser från en underordnad process omdirigerade dataströmmen, är det beroende av underordnat. Anroparen väntar Läsåtgärden tills underordnat skriver till dataströmmen eller stänger dataströmmen. När den underordnade processen skriver tillräckligt med data för att fylla sin omdirigerade stream, är det beroende av överordnat. Den underordnade processen väntar på nästa Skrivåtgärden tills överordnat läser från dataströmmen fullständig eller stänger dataströmmen. Dödläge resultatet när anroparen och underordnad process vänta på att slutföra en åtgärd och inte kan fortsätta. Du kan undvika deadlocks genom utvärdering av beroenden mellan anroparen och underordnad process.       Till exempel visar följande C#-kod hur att läsa från en dataström med omdirigerade och vänta tills den underordnade processen avslutas.      ```   Process p = new Process();   p.StartInfo.UseShellExecute = false;   p.StartInfo.RedirectStandardOutput = true;   p.StartInfo.FileName = &quot;Write500Lines.exe&quot;;   p.Start();      // To avoid deadlocks, always read the output stream first and then wait.   string output = p.StandardOutput.ReadToEnd();   p.WaitForExit();   ```Kodexemplet undviker ett dödläge genom att anropa `p.StandardOutput.ReadToEnd` innan `p.WaitForExit`. Ett dödläge kan uppstå om överordnat behandla samtal `p.WaitForExit` innan `p.StandardOutput.ReadToEnd` och den underordnade processen skriver tillräckligt med text för att fylla omdirigerade dataströmmen. Den överordnade processen ska vänta på obestämd tid för den underordnade processen avslutas. Den underordnade processen skulle väntar tills överordnat att läsa från hela <xref:System.Diagnostics.Process.StandardOutput%2A>dataström.</xref:System.Diagnostics.Process.StandardOutput%2A>       Det finns ett liknande problem när du Läs all text från både standardutdata och standardfel dataströmmar. Till exempel utför följande C#-kod en Läsåtgärd på båda dataströmmar.      ```   // To avoid deadlocks, use asynchronous read operations on at least one of the streams.   // Do not perform a synchronous read to the end of both redirected streams.   p.BeginOutputReadLine();   string error = p.StandardError.ReadToEnd();   p.WaitForExit();   ```Kodexemplet undviker dödläge genom att utföra asynkrona läsåtgärder på den <xref:System.Diagnostics.Process.StandardOutput%2A>dataström.</xref:System.Diagnostics.Process.StandardOutput%2A> Ett dödläge resultat om överordnat behandla samtal `p.StandardOutput.ReadToEnd` följt av `p.StandardError.ReadToEnd` och den underordnade processen skriver tillräckligt med text för att fylla sin fel-dataström. Den överordnade processen ska vänta på obestämd tid för den underordnade processen att stänga dess <xref:System.Diagnostics.Process.StandardOutput%2A>dataström.</xref:System.Diagnostics.Process.StandardOutput%2A> Den underordnade processen skulle väntar tills överordnat att läsa från hela <xref:System.Diagnostics.Process.StandardError%2A>dataström.</xref:System.Diagnostics.Process.StandardError%2A>       Du kan använda asynkrona läsåtgärder för att undvika dessa beroenden och deras potentiella dödläge. Alternativt kan undvika du dödläge genom att skapa två trådar och läsa utdata från varje ström på en separat tråd."
  example:
  - >-
    [!code-cpp[ProcessOneStream#1](~/add/codesnippet/cpp/p-system.diagnostics.pro_20_1.cpp)]
     [!code-cs[ProcessOneStream#1](~/add/codesnippet/csharp/p-system.diagnostics.pro_20_1.cs)]
     [!code-vb[ProcessOneStream#1](~/add/codesnippet/visualbasic/p-system.diagnostics.pro_20_1.vb)]
  syntax:
    content: public bool RedirectStandardOutput { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Om utdata ska skrivas till &lt;xref:System.Diagnostics.Process.StandardOutput%2A?displayProperty=fullName&gt;, annars <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. Standardvärdet är <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Diagnostics.ProcessStartInfo.RedirectStandardOutput*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.ProcessStartInfo.StandardErrorEncoding
  id: StandardErrorEncoding
  parent: System.Diagnostics.ProcessStartInfo
  langs:
  - csharp
  name: StandardErrorEncoding
  nameWithType: ProcessStartInfo.StandardErrorEncoding
  fullName: System.Diagnostics.ProcessStartInfo.StandardErrorEncoding
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Hämtar eller anger standardkodning för Felutdata."
  remarks: "Om värdet på egenskapen StandardErrorEncoding är `null`, processen använder standardfel standardkodning för Felutdata. StandardErrorEncoding-egenskapen måste anges innan processen startas. Den här egenskapen inte garanterar att processen kommer att använda den angivna kodningen. processen kommer att använda de teckenkodningar som stöds. Programmet bör testas för att avgöra vilka teckenkodningar som stöds."
  syntax:
    content: public System.Text.Encoding StandardErrorEncoding { get; set; }
    return:
      type: System.Text.Encoding
      description: "Ett objekt som representerar standardkodningen för Felutdata. Standardvärdet är <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  overload: System.Diagnostics.ProcessStartInfo.StandardErrorEncoding*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.ProcessStartInfo.StandardOutputEncoding
  id: StandardOutputEncoding
  parent: System.Diagnostics.ProcessStartInfo
  langs:
  - csharp
  name: StandardOutputEncoding
  nameWithType: ProcessStartInfo.StandardOutputEncoding
  fullName: System.Diagnostics.ProcessStartInfo.StandardOutputEncoding
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Hämtar eller anger standardkodning för standardutdata."
  remarks: "Om värdet på egenskapen StandardOutputEncoding är `null`, processen använder standardutdata standardkodning för standardutdata. StandardOutputEncoding-egenskapen måste anges innan processen startas. Den här egenskapen inte garanterar att processen kommer att använda den angivna kodningen. Programmet bör testas för att avgöra vilka kodningar processen stöder."
  syntax:
    content: public System.Text.Encoding StandardOutputEncoding { get; set; }
    return:
      type: System.Text.Encoding
      description: "Ett objekt som representerar standardkodningen för standardutdata. Standardvärdet är <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  overload: System.Diagnostics.ProcessStartInfo.StandardOutputEncoding*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.ProcessStartInfo.UserName
  id: UserName
  parent: System.Diagnostics.ProcessStartInfo
  langs:
  - csharp
  name: UserName
  nameWithType: ProcessStartInfo.UserName
  fullName: System.Diagnostics.ProcessStartInfo.UserName
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Hämtar eller anger användarnamnet som ska användas när den startas."
  remarks: "> [!IMPORTANT]\n>  The <xref:System.Diagnostics.ProcessStartInfo.WorkingDirectory%2A> property must be set if UserName and <xref:System.Diagnostics.ProcessStartInfo.Password%2A> are provided. If the property is not set, the default working directory is %SYSTEMROOT%\\system32.  \n  \n If the UserName property is not `null` or an empty string, the <xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A> property must be `false`, or an <xref:System.InvalidOperationException> will be thrown when the <xref:System.Diagnostics.Process.Start%28System.Diagnostics.ProcessStartInfo%29?displayProperty=fullName> method is called."
  syntax:
    content: public string UserName { get; set; }
    return:
      type: System.String
      description: "Användarnamnet som ska användas när den startas."
  overload: System.Diagnostics.ProcessStartInfo.UserName*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.ProcessStartInfo.UseShellExecute
  id: UseShellExecute
  parent: System.Diagnostics.ProcessStartInfo
  langs:
  - csharp
  name: UseShellExecute
  nameWithType: ProcessStartInfo.UseShellExecute
  fullName: System.Diagnostics.ProcessStartInfo.UseShellExecute
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Hämtar eller anger ett värde som anger om operativsystemets skal ska starta processen."
  remarks: "Den här egenskapen `false` Omdirigerar indata, utdata och fel dataströmmar.      > [!NOTE] > UseShellExecute måste vara `false` om den <xref:System.Diagnostics.ProcessStartInfo.UserName%2A>egenskapen är inte `null` eller en tom sträng eller en <xref:System.InvalidOperationException>genereras när den <xref:System.Diagnostics.Process.Start%28System.Diagnostics.ProcessStartInfo%29?displayProperty=fullName>metoden anropas.</xref:System.Diagnostics.Process.Start%28System.Diagnostics.ProcessStartInfo%29?displayProperty=fullName> </xref:System.InvalidOperationException> </xref:System.Diagnostics.ProcessStartInfo.UserName%2A>       När du använder operativsystemets skal för att starta processer som du kan starta alla dokument (som är registrerad typ som är associerade med en körbar fil som har en öppen standardåtgärd) och utföra åtgärder på filen, till exempel utskrifter med hjälp av den <xref:System.Diagnostics.Process>objekt.</xref:System.Diagnostics.Process> När UseShellExecute är `false`, du kan starta endast körbara filer med hjälp av den <xref:System.Diagnostics.Process>objekt.</xref:System.Diagnostics.Process>      > [!NOTE] > UseShellExecute måste vara `true` om du ställer in den <xref:System.Diagnostics.ProcessStartInfo.ErrorDialog%2A>egenskapen `true`.</xref:System.Diagnostics.ProcessStartInfo.ErrorDialog%2A>       Den <xref:System.Diagnostics.ProcessStartInfo.WorkingDirectory%2A>egenskapen fungerar annorlunda beroende på värdet på egenskapen UseShellExecute.</xref:System.Diagnostics.ProcessStartInfo.WorkingDirectory%2A> När UseShellExecute är `true`, <xref:System.Diagnostics.ProcessStartInfo.WorkingDirectory%2A>egenskapen anger platsen för den körbara filen.</xref:System.Diagnostics.ProcessStartInfo.WorkingDirectory%2A> Om <xref:System.Diagnostics.ProcessStartInfo.WorkingDirectory%2A>är en tom sträng, förutsätts att den aktuella katalogen innehåller den körbara filen.</xref:System.Diagnostics.ProcessStartInfo.WorkingDirectory%2A>       När UseShellExecute är `false`, <xref:System.Diagnostics.ProcessStartInfo.WorkingDirectory%2A>egenskapen används inte att hitta den körbara filen.</xref:System.Diagnostics.ProcessStartInfo.WorkingDirectory%2A> I stället används den bara av processen och som har startat och har betydelse endast inom ramen för den nya processen. När UseShellExecute är `false`, <xref:System.Diagnostics.ProcessStartInfo.FileName%2A>egenskapen kan vara antingen en fullständigt kvalificerad sökväg till den körbara filen eller ett enkelt körbara namn som systemet ska försöka hitta i mappar som anges av miljövariabeln PATH.</xref:System.Diagnostics.ProcessStartInfo.FileName%2A>"
  example:
  - >-
    [!code-cpp[ProcessOneStream#1](~/add/codesnippet/cpp/p-system.diagnostics.pro_44_1.cpp)]
     [!code-cs[ProcessOneStream#1](~/add/codesnippet/csharp/p-system.diagnostics.pro_44_1.cs)]
     [!code-vb[ProcessOneStream#1](~/add/codesnippet/visualbasic/p-system.diagnostics.pro_44_1.vb)]
  syntax:
    content: public bool UseShellExecute { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Om gränssnittet som ska användas när den startas; <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> om processen ska skapas direkt från den körbara filen. Standardvärdet är <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>."
  overload: System.Diagnostics.ProcessStartInfo.UseShellExecute*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.ProcessStartInfo.Verb
  id: Verb
  parent: System.Diagnostics.ProcessStartInfo
  langs:
  - csharp
  name: Verb
  nameWithType: ProcessStartInfo.Verb
  fullName: System.Diagnostics.ProcessStartInfo.Verb
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Hämtar eller anger verbet som ska användas när du öppnar programmet eller dokument som anges av den <xref:System.Diagnostics.ProcessStartInfo.FileName*>egenskapen.</xref:System.Diagnostics.ProcessStartInfo.FileName*>"
  remarks: "Varje filnamnstillägg har en egen uppsättning verb som kan hämtas med hjälp av den <xref:System.Diagnostics.ProcessStartInfo.Verbs%2A>egenskapen.</xref:System.Diagnostics.ProcessStartInfo.Verbs%2A> Till exempel den &quot;`print`&quot; verb skriver ut ett dokument som anges med hjälp av <xref:System.Diagnostics.ProcessStartInfo.FileName%2A>.</xref:System.Diagnostics.ProcessStartInfo.FileName%2A> Standardverb kan anges med hjälp av en tom sträng (&quot;&quot;). Exempel på verb är &quot;Redigera&quot;, &quot;Öppen&quot;, &quot;OpenAsReadOnly&quot;, &quot;Print&quot; och &quot;Printto&quot;. Du bör använda verb som visas i uppsättningen med verb som returneras av den <xref:System.Diagnostics.ProcessStartInfo.Verbs%2A>egenskapen.</xref:System.Diagnostics.ProcessStartInfo.Verbs%2A>       När du använder egenskapen Verb, måste du inkludera filnamnstillägget när du ställer in värdet för den <xref:System.Diagnostics.ProcessStartInfo.FileName%2A>egenskapen.</xref:System.Diagnostics.ProcessStartInfo.FileName%2A> Namnet behöver inte ha ett tillägg om du manuellt ange ett värde för egenskapen Verb."
  example:
  - "The following code example starts a new process by using the specified verb and file name. This code example is part of a larger example provided for the <xref:System.Diagnostics.ProcessStartInfo.Verbs%2A> property.  \n  \n [!code-vb[ProcessVerbs_Diagnostics#4](~/add/codesnippet/visualbasic/p-system.diagnostics.pro_9_1.vb)]\n [!code-cs[ProcessVerbs_Diagnostics#4](~/add/codesnippet/csharp/p-system.diagnostics.pro_9_1.cs)]"
  syntax:
    content: public string Verb { get; set; }
    return:
      type: System.String
      description: "Vad som ska göras med filen som processen öppnas. Standardvärdet är en tom sträng (&quot;&quot;), vilket innebär att ingen åtgärd."
  overload: System.Diagnostics.ProcessStartInfo.Verb*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.ProcessStartInfo.Verbs
  id: Verbs
  parent: System.Diagnostics.ProcessStartInfo
  langs:
  - csharp
  name: Verbs
  nameWithType: ProcessStartInfo.Verbs
  fullName: System.Diagnostics.ProcessStartInfo.Verbs
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Hämtar uppsättningen verb som är associerade med typ av fil som anges av den <xref:System.Diagnostics.ProcessStartInfo.FileName*>egenskapen.</xref:System.Diagnostics.ProcessStartInfo.FileName*>"
  remarks: "Egenskapen verb kan du bestämma vilka verb som kan användas med filen som anges av den <xref:System.Diagnostics.ProcessStartInfo.FileName%2A>egenskapen.</xref:System.Diagnostics.ProcessStartInfo.FileName%2A> Du kan ange den <xref:System.Diagnostics.ProcessStartInfo.Verb%2A>egenskapen till värdet för alla verb i uppsättningen.</xref:System.Diagnostics.ProcessStartInfo.Verb%2A> Exempel på verb är &quot;Redigera&quot;, &quot;Öppen&quot;, &quot;OpenAsReadOnly&quot;, &quot;Print&quot; och &quot;Printto&quot;.       När du använder egenskapen verb, måste du inkludera filnamnstillägget när du ställer in värdet för den <xref:System.Diagnostics.ProcessStartInfo.FileName%2A>egenskapen.</xref:System.Diagnostics.ProcessStartInfo.FileName%2A> Filnamnstillägget anger uppsättningen möjliga verb."
  example:
  - "The following code example displays the defined verbs for the chosen file name. If the user selects one of the defined verbs, the example starts a new process using the selected verb and the input file name.  \n  \n [!code-vb[ProcessVerbs_Diagnostics#3](~/add/codesnippet/visualbasic/p-system.diagnostics.pro_7_1.vb)]\n [!code-cs[ProcessVerbs_Diagnostics#3](~/add/codesnippet/csharp/p-system.diagnostics.pro_7_1.cs)]"
  syntax:
    content: public string[] Verbs { get; }
    return:
      type: System.String[]
      description: "De åtgärder som systemet kan tillämpas på filen som anges av den <xref:System.Diagnostics.ProcessStartInfo.FileName*>egenskapen.</xref:System.Diagnostics.ProcessStartInfo.FileName*>"
  overload: System.Diagnostics.ProcessStartInfo.Verbs*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.ProcessStartInfo.WindowStyle
  id: WindowStyle
  parent: System.Diagnostics.ProcessStartInfo
  langs:
  - csharp
  name: WindowStyle
  nameWithType: ProcessStartInfo.WindowStyle
  fullName: System.Diagnostics.ProcessStartInfo.WindowStyle
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Hämtar eller anger tillståndet fönstret ska användas när processen startas."
  remarks: ''
  example:
  - >-
    [!code-vb[Process.Start_static#1](~/add/codesnippet/visualbasic/p-system.diagnostics.pro_42_1.vb)]
     [!code-cs[Process.Start_static#1](~/add/codesnippet/csharp/p-system.diagnostics.pro_42_1.cs)]
     [!code-cpp[Process.Start_static#1](~/add/codesnippet/cpp/p-system.diagnostics.pro_42_1.cpp)]
  syntax:
    content: public System.Diagnostics.ProcessWindowStyle WindowStyle { get; set; }
    return:
      type: System.Diagnostics.ProcessWindowStyle
      description: "Ett värde för uppräkning som anger om processen startas i ett fönster som är maximerat minimerat normal (varken maximerat eller minimerat), eller så är inte synligt. Standardvärdet är <xref uid=&quot;langword_csharp_Normal&quot; name=&quot;Normal&quot; href=&quot;&quot;> </xref>."
  overload: System.Diagnostics.ProcessStartInfo.WindowStyle*
  exceptions:
  - type: System.ComponentModel.InvalidEnumArgumentException
    commentId: T:System.ComponentModel.InvalidEnumArgumentException
    description: "Fönsterformatet är inte en av de <xref href=&quot;System.Diagnostics.ProcessWindowStyle&quot;> </xref> Uppräkningsmedlemmar."
  platform:
  - net462
- uid: System.Diagnostics.ProcessStartInfo.WorkingDirectory
  id: WorkingDirectory
  parent: System.Diagnostics.ProcessStartInfo
  langs:
  - csharp
  name: WorkingDirectory
  nameWithType: ProcessStartInfo.WorkingDirectory
  fullName: System.Diagnostics.ProcessStartInfo.WorkingDirectory
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "När den <> </> *> egenskapen är <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>, hämtar eller anger arbetskatalog för processen som ska startas. När <> </> *> är <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>, hämtar eller anger den katalog som innehåller processen startas."
  remarks: "> [!IMPORTANT]\n>  The WorkingDirectory property must be set if <xref:System.Diagnostics.ProcessStartInfo.UserName%2A> and <xref:System.Diagnostics.ProcessStartInfo.Password%2A> are provided. If the property is not set, the default working directory is %SYSTEMROOT%\\system32.  \n  \n If the directory is already part of the system path variable, you do not have to repeat the directory's location in this property.  \n  \n The WorkingDirectory property behaves differently when <xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A> is `true` than when <xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A> is `false`. When <xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A> is `true`, the WorkingDirectory property specifies the location of the executable. If WorkingDirectory is an empty string, the current directory is understood to contain the executable.  \n  \n> [!NOTE]\n>  When <xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A> is `true`, the working directory of the application that starts the executable is also the working directory of the executable.  \n  \n When <xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A> is `false`, the WorkingDirectory property is not used to find the executable. Instead, its value applies to the process that is started and only has meaning within the context of the new process."
  syntax:
    content: public string WorkingDirectory { get; set; }
    return:
      type: System.String
      description: "När <> </> *> är <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>, det fullständigt kvalificerade namnet på den katalog som innehåller processen startas. När den <> </> *> egenskapen är <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>, arbetskatalog för processen som ska startas. Standardvärdet är en tom sträng (&quot;&quot;)."
  overload: System.Diagnostics.ProcessStartInfo.WorkingDirectory*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ComponentModel.InvalidEnumArgumentException
  parent: System.ComponentModel
  isExternal: false
  name: InvalidEnumArgumentException
  nameWithType: InvalidEnumArgumentException
  fullName: System.ComponentModel.InvalidEnumArgumentException
- uid: System.Diagnostics.ProcessStartInfo.#ctor
  parent: System.Diagnostics.ProcessStartInfo
  isExternal: false
  name: ProcessStartInfo()
  nameWithType: ProcessStartInfo.ProcessStartInfo()
  fullName: System.Diagnostics.ProcessStartInfo.ProcessStartInfo()
- uid: System.Diagnostics.ProcessStartInfo.#ctor(System.String)
  parent: System.Diagnostics.ProcessStartInfo
  isExternal: false
  name: ProcessStartInfo(String)
  nameWithType: ProcessStartInfo.ProcessStartInfo(String)
  fullName: System.Diagnostics.ProcessStartInfo.ProcessStartInfo(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Diagnostics.ProcessStartInfo.#ctor(System.String,System.String)
  parent: System.Diagnostics.ProcessStartInfo
  isExternal: false
  name: ProcessStartInfo(String,String)
  nameWithType: ProcessStartInfo.ProcessStartInfo(String,String)
  fullName: System.Diagnostics.ProcessStartInfo.ProcessStartInfo(String,String)
- uid: System.Diagnostics.ProcessStartInfo.Arguments
  parent: System.Diagnostics.ProcessStartInfo
  isExternal: false
  name: Arguments
  nameWithType: ProcessStartInfo.Arguments
  fullName: System.Diagnostics.ProcessStartInfo.Arguments
- uid: System.Diagnostics.ProcessStartInfo.CreateNoWindow
  parent: System.Diagnostics.ProcessStartInfo
  isExternal: false
  name: CreateNoWindow
  nameWithType: ProcessStartInfo.CreateNoWindow
  fullName: System.Diagnostics.ProcessStartInfo.CreateNoWindow
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Diagnostics.ProcessStartInfo.Domain
  parent: System.Diagnostics.ProcessStartInfo
  isExternal: false
  name: Domain
  nameWithType: ProcessStartInfo.Domain
  fullName: System.Diagnostics.ProcessStartInfo.Domain
- uid: System.Diagnostics.ProcessStartInfo.Environment
  parent: System.Diagnostics.ProcessStartInfo
  isExternal: false
  name: Environment
  nameWithType: ProcessStartInfo.Environment
  fullName: System.Diagnostics.ProcessStartInfo.Environment
- uid: System.Collections.Generic.IDictionary{System.String,System.String}
  parent: System.Collections.Generic
  isExternal: true
  name: IDictionary<String,String>
  nameWithType: IDictionary<String,String>
  fullName: System.Collections.Generic.IDictionary<System.String,System.String>
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: IDictionary<System.String,System.String>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Diagnostics.ProcessStartInfo.EnvironmentVariables
  parent: System.Diagnostics.ProcessStartInfo
  isExternal: false
  name: EnvironmentVariables
  nameWithType: ProcessStartInfo.EnvironmentVariables
  fullName: System.Diagnostics.ProcessStartInfo.EnvironmentVariables
- uid: System.Collections.Specialized.StringDictionary
  parent: System.Collections.Specialized
  isExternal: false
  name: StringDictionary
  nameWithType: StringDictionary
  fullName: System.Collections.Specialized.StringDictionary
- uid: System.Diagnostics.ProcessStartInfo.ErrorDialog
  parent: System.Diagnostics.ProcessStartInfo
  isExternal: false
  name: ErrorDialog
  nameWithType: ProcessStartInfo.ErrorDialog
  fullName: System.Diagnostics.ProcessStartInfo.ErrorDialog
- uid: System.Diagnostics.ProcessStartInfo.ErrorDialogParentHandle
  parent: System.Diagnostics.ProcessStartInfo
  isExternal: false
  name: ErrorDialogParentHandle
  nameWithType: ProcessStartInfo.ErrorDialogParentHandle
  fullName: System.Diagnostics.ProcessStartInfo.ErrorDialogParentHandle
- uid: System.IntPtr
  parent: System
  isExternal: true
  name: IntPtr
  nameWithType: IntPtr
  fullName: System.IntPtr
- uid: System.Diagnostics.ProcessStartInfo.FileName
  parent: System.Diagnostics.ProcessStartInfo
  isExternal: false
  name: FileName
  nameWithType: ProcessStartInfo.FileName
  fullName: System.Diagnostics.ProcessStartInfo.FileName
- uid: System.Diagnostics.ProcessStartInfo.LoadUserProfile
  parent: System.Diagnostics.ProcessStartInfo
  isExternal: false
  name: LoadUserProfile
  nameWithType: ProcessStartInfo.LoadUserProfile
  fullName: System.Diagnostics.ProcessStartInfo.LoadUserProfile
- uid: System.Diagnostics.ProcessStartInfo.Password
  parent: System.Diagnostics.ProcessStartInfo
  isExternal: false
  name: Password
  nameWithType: ProcessStartInfo.Password
  fullName: System.Diagnostics.ProcessStartInfo.Password
- uid: System.Security.SecureString
  parent: System.Security
  isExternal: false
  name: SecureString
  nameWithType: SecureString
  fullName: System.Security.SecureString
- uid: System.Diagnostics.ProcessStartInfo.PasswordInClearText
  parent: System.Diagnostics.ProcessStartInfo
  isExternal: false
  name: PasswordInClearText
  nameWithType: ProcessStartInfo.PasswordInClearText
  fullName: System.Diagnostics.ProcessStartInfo.PasswordInClearText
- uid: System.Diagnostics.ProcessStartInfo.RedirectStandardError
  parent: System.Diagnostics.ProcessStartInfo
  isExternal: false
  name: RedirectStandardError
  nameWithType: ProcessStartInfo.RedirectStandardError
  fullName: System.Diagnostics.ProcessStartInfo.RedirectStandardError
- uid: System.Diagnostics.ProcessStartInfo.RedirectStandardInput
  parent: System.Diagnostics.ProcessStartInfo
  isExternal: false
  name: RedirectStandardInput
  nameWithType: ProcessStartInfo.RedirectStandardInput
  fullName: System.Diagnostics.ProcessStartInfo.RedirectStandardInput
- uid: System.Diagnostics.ProcessStartInfo.RedirectStandardOutput
  parent: System.Diagnostics.ProcessStartInfo
  isExternal: false
  name: RedirectStandardOutput
  nameWithType: ProcessStartInfo.RedirectStandardOutput
  fullName: System.Diagnostics.ProcessStartInfo.RedirectStandardOutput
- uid: System.Diagnostics.ProcessStartInfo.StandardErrorEncoding
  parent: System.Diagnostics.ProcessStartInfo
  isExternal: false
  name: StandardErrorEncoding
  nameWithType: ProcessStartInfo.StandardErrorEncoding
  fullName: System.Diagnostics.ProcessStartInfo.StandardErrorEncoding
- uid: System.Text.Encoding
  parent: System.Text
  isExternal: true
  name: Encoding
  nameWithType: Encoding
  fullName: System.Text.Encoding
- uid: System.Diagnostics.ProcessStartInfo.StandardOutputEncoding
  parent: System.Diagnostics.ProcessStartInfo
  isExternal: false
  name: StandardOutputEncoding
  nameWithType: ProcessStartInfo.StandardOutputEncoding
  fullName: System.Diagnostics.ProcessStartInfo.StandardOutputEncoding
- uid: System.Diagnostics.ProcessStartInfo.UserName
  parent: System.Diagnostics.ProcessStartInfo
  isExternal: false
  name: UserName
  nameWithType: ProcessStartInfo.UserName
  fullName: System.Diagnostics.ProcessStartInfo.UserName
- uid: System.Diagnostics.ProcessStartInfo.UseShellExecute
  parent: System.Diagnostics.ProcessStartInfo
  isExternal: false
  name: UseShellExecute
  nameWithType: ProcessStartInfo.UseShellExecute
  fullName: System.Diagnostics.ProcessStartInfo.UseShellExecute
- uid: System.Diagnostics.ProcessStartInfo.Verb
  parent: System.Diagnostics.ProcessStartInfo
  isExternal: false
  name: Verb
  nameWithType: ProcessStartInfo.Verb
  fullName: System.Diagnostics.ProcessStartInfo.Verb
- uid: System.Diagnostics.ProcessStartInfo.Verbs
  parent: System.Diagnostics.ProcessStartInfo
  isExternal: false
  name: Verbs
  nameWithType: ProcessStartInfo.Verbs
  fullName: System.Diagnostics.ProcessStartInfo.Verbs
- uid: System.String[]
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String[]
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Diagnostics.ProcessStartInfo.WindowStyle
  parent: System.Diagnostics.ProcessStartInfo
  isExternal: false
  name: WindowStyle
  nameWithType: ProcessStartInfo.WindowStyle
  fullName: System.Diagnostics.ProcessStartInfo.WindowStyle
- uid: System.Diagnostics.ProcessWindowStyle
  parent: System.Diagnostics
  isExternal: false
  name: ProcessWindowStyle
  nameWithType: ProcessWindowStyle
  fullName: System.Diagnostics.ProcessWindowStyle
- uid: System.Diagnostics.ProcessStartInfo.WorkingDirectory
  parent: System.Diagnostics.ProcessStartInfo
  isExternal: false
  name: WorkingDirectory
  nameWithType: ProcessStartInfo.WorkingDirectory
  fullName: System.Diagnostics.ProcessStartInfo.WorkingDirectory
- uid: System.Diagnostics.ProcessStartInfo.#ctor*
  parent: System.Diagnostics.ProcessStartInfo
  isExternal: false
  name: ProcessStartInfo
  nameWithType: ProcessStartInfo.ProcessStartInfo
- uid: System.Diagnostics.ProcessStartInfo.Arguments*
  parent: System.Diagnostics.ProcessStartInfo
  isExternal: false
  name: Arguments
  nameWithType: ProcessStartInfo.Arguments
- uid: System.Diagnostics.ProcessStartInfo.CreateNoWindow*
  parent: System.Diagnostics.ProcessStartInfo
  isExternal: false
  name: CreateNoWindow
  nameWithType: ProcessStartInfo.CreateNoWindow
- uid: System.Diagnostics.ProcessStartInfo.Domain*
  parent: System.Diagnostics.ProcessStartInfo
  isExternal: false
  name: Domain
  nameWithType: ProcessStartInfo.Domain
- uid: System.Diagnostics.ProcessStartInfo.Environment*
  parent: System.Diagnostics.ProcessStartInfo
  isExternal: false
  name: Environment
  nameWithType: ProcessStartInfo.Environment
- uid: System.Diagnostics.ProcessStartInfo.EnvironmentVariables*
  parent: System.Diagnostics.ProcessStartInfo
  isExternal: false
  name: EnvironmentVariables
  nameWithType: ProcessStartInfo.EnvironmentVariables
- uid: System.Diagnostics.ProcessStartInfo.ErrorDialog*
  parent: System.Diagnostics.ProcessStartInfo
  isExternal: false
  name: ErrorDialog
  nameWithType: ProcessStartInfo.ErrorDialog
- uid: System.Diagnostics.ProcessStartInfo.ErrorDialogParentHandle*
  parent: System.Diagnostics.ProcessStartInfo
  isExternal: false
  name: ErrorDialogParentHandle
  nameWithType: ProcessStartInfo.ErrorDialogParentHandle
- uid: System.Diagnostics.ProcessStartInfo.FileName*
  parent: System.Diagnostics.ProcessStartInfo
  isExternal: false
  name: FileName
  nameWithType: ProcessStartInfo.FileName
- uid: System.Diagnostics.ProcessStartInfo.LoadUserProfile*
  parent: System.Diagnostics.ProcessStartInfo
  isExternal: false
  name: LoadUserProfile
  nameWithType: ProcessStartInfo.LoadUserProfile
- uid: System.Diagnostics.ProcessStartInfo.Password*
  parent: System.Diagnostics.ProcessStartInfo
  isExternal: false
  name: Password
  nameWithType: ProcessStartInfo.Password
- uid: System.Diagnostics.ProcessStartInfo.PasswordInClearText*
  parent: System.Diagnostics.ProcessStartInfo
  isExternal: false
  name: PasswordInClearText
  nameWithType: ProcessStartInfo.PasswordInClearText
- uid: System.Diagnostics.ProcessStartInfo.RedirectStandardError*
  parent: System.Diagnostics.ProcessStartInfo
  isExternal: false
  name: RedirectStandardError
  nameWithType: ProcessStartInfo.RedirectStandardError
- uid: System.Diagnostics.ProcessStartInfo.RedirectStandardInput*
  parent: System.Diagnostics.ProcessStartInfo
  isExternal: false
  name: RedirectStandardInput
  nameWithType: ProcessStartInfo.RedirectStandardInput
- uid: System.Diagnostics.ProcessStartInfo.RedirectStandardOutput*
  parent: System.Diagnostics.ProcessStartInfo
  isExternal: false
  name: RedirectStandardOutput
  nameWithType: ProcessStartInfo.RedirectStandardOutput
- uid: System.Diagnostics.ProcessStartInfo.StandardErrorEncoding*
  parent: System.Diagnostics.ProcessStartInfo
  isExternal: false
  name: StandardErrorEncoding
  nameWithType: ProcessStartInfo.StandardErrorEncoding
- uid: System.Diagnostics.ProcessStartInfo.StandardOutputEncoding*
  parent: System.Diagnostics.ProcessStartInfo
  isExternal: false
  name: StandardOutputEncoding
  nameWithType: ProcessStartInfo.StandardOutputEncoding
- uid: System.Diagnostics.ProcessStartInfo.UserName*
  parent: System.Diagnostics.ProcessStartInfo
  isExternal: false
  name: UserName
  nameWithType: ProcessStartInfo.UserName
- uid: System.Diagnostics.ProcessStartInfo.UseShellExecute*
  parent: System.Diagnostics.ProcessStartInfo
  isExternal: false
  name: UseShellExecute
  nameWithType: ProcessStartInfo.UseShellExecute
- uid: System.Diagnostics.ProcessStartInfo.Verb*
  parent: System.Diagnostics.ProcessStartInfo
  isExternal: false
  name: Verb
  nameWithType: ProcessStartInfo.Verb
- uid: System.Diagnostics.ProcessStartInfo.Verbs*
  parent: System.Diagnostics.ProcessStartInfo
  isExternal: false
  name: Verbs
  nameWithType: ProcessStartInfo.Verbs
- uid: System.Diagnostics.ProcessStartInfo.WindowStyle*
  parent: System.Diagnostics.ProcessStartInfo
  isExternal: false
  name: WindowStyle
  nameWithType: ProcessStartInfo.WindowStyle
- uid: System.Diagnostics.ProcessStartInfo.WorkingDirectory*
  parent: System.Diagnostics.ProcessStartInfo
  isExternal: false
  name: WorkingDirectory
  nameWithType: ProcessStartInfo.WorkingDirectory
