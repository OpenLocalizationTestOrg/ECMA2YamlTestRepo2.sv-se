### YamlMime:ManagedReference
items:
- uid: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint
  id: ProviderConnectionPoint
  children:
  - System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.#ctor(System.Reflection.MethodInfo,System.Type,System.Type,System.String,System.String,System.Boolean)
  - System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject(System.Web.UI.Control)
  - System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetSecondaryInterfaces(System.Web.UI.Control)
  langs:
  - csharp
  name: ProviderConnectionPoint
  nameWithType: ProviderConnectionPoint
  fullName: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint
  type: Class
  summary: "Definierar ett anslutningsobjekt punkt som gör att en serverkontroll som fungerar som en provider för att bilda en anslutning till en förbrukare skapas."
  remarks: "I varje webbdelar anslutning mellan två serverkontroller har varje kontroll (bland andra krav) en associerad anslutning point-objekt som gör det möjligt att ansluta till den andra kontrollen och för att ange eller använda data, beroende på om kontrollen utses käll- eller mål för anslutningen. En <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint>objektet innehåller information om hur en kontroll kan ansluta till en annan kontroll och vilken typ av data som delar i allmänhet.</xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> En kopplingspunkt måste vara ett ProviderConnectionPoint-objekt för en kontroll som fungerar som providern i en anslutning. Mer information om webbdelar anslutningar och anslutningspunkter finns i avsnittet Se även nedan.       Om du vill skapa ett ProviderConnectionPoint objekt krävs flera steg: 1.  Skapa ett gränssnitt. När en provider resurser data med en konsument sker detta genom att hämta en instans av ett gränssnitt, returnerar den instansen till en förbrukare skapas.      2.  Implementera gränssnittet i en provider. En <xref:System.Web.UI.WebControls.WebParts.WebPart>eller annan serverkontroll (någon typ av server-kontroll i en <xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase>kan användas för zonen) som ska vara providern måste implementera gränssnittet som skapats i det första steget.</xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase> </xref:System.Web.UI.WebControls.WebParts.WebPart>      3.  Identifiera en metod. En metod i providern måste identifieras som Återanropsmetoden att upprätta en anslutning. Den här metoden returnerar en instans av det implementerade gränssnittet till en förbrukare skapas. Webbdelar metod för att identifiera en metod i providern är att lägga till en `ConnectionProvider` metadataattribut (definieras av den <xref:System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute>klassen) på den metod som returnerar gränssnittet-instans.</xref:System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute> När attributet läggs, är den enda obligatoriska parametern ett visningsnamn för anslutningspunkten för providern. Valfria parametrar kan också läggas till exempel ett ID för anslutningspunkten.       När en kontroll har varit utrustade att agera som en provider, kan kontrollen delta i anslutningar (förutsatt att en Konsumentkontroll på samma sätt är utrustad och tillgänglig). Utvecklare kan använda för att skapa en statisk, deklarativa anslutning i koden för en webbsida i `<asp:webpartconnection>` element. Om den `ConnectionProvider` attribut i källkoden providern som identifierar Återanropsmetoden anger ett ID för kopplingspunkt och värdet måste vara tilldelade till den `ProviderConnectionPointID` attribut i den `<asp:webpartconnection>` element på en sida. En beror att en utvecklare kan ange ett ID för en Provideranslutningspunkten på om det finns flera kopplingspunkter i provider-kontrollen. Om ett ID inte har angetts för providern kopplingspunkt i kontrollen provider, ett värde som inte har tilldelas den `ProviderConnectionPointID` -attribut på sidan, eftersom anslutningen kommer att skapas med ett standardvärde som hämtats från den <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID>fält.</xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID>       Om du vill skapa en anslutning i kod utvecklare måste skapa ett nytt ProviderConnectionPoint objekt genom att anropa den <xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetProviderConnectionPoints%2A>metoden och skicka till den ID för provider-kontroll, tillsammans med ID: T eller index för objektet definierade ProviderConnectionPoint i kontrollen providern.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetProviderConnectionPoints%2A> Det returnerade ProviderConnectionPoint objektet, tillsammans med en referens till kontrollen providern, en referens till konsumenten kontrollen och en motsvarande <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>objekt, är alla skickades till den <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A>metoden för att skapa en ny <xref:System.Web.UI.WebControls.WebParts.WebPartConnection>objektet.</xref:System.Web.UI.WebControls.WebParts.WebPartConnection> </xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A> </xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>       Men utvecklare kan använda providern anslutningspunkter som en del av upprätta anslutningar deklarativt eller programmässigt, kan användarna också hantera providern kopplingspunkter upprätta anslutningar via användargränssnittet (UI). Om utvecklare deklarera en <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone>kontroll på en webbsida, ger ett användargränssnitt för körning för användare att skapa anslutningar.</xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> Om du väljer konsumenten kontrollen som startpunkt för att upprätta anslutningen genom att klicka på dess ansluta verb (de kan också välja providern; det finns ingen skillnad i den resulterande anslutningen) i Användargränssnittet visas listrutan kontrollen med visningsnamnet för den tillgänglig provider (kopplingspunkterna om det finns flera). Användarna måste välja en provider anslutningspunkt för att skapa en anslutning.       Ett ProviderConnectionPoint objekt kopplas direkt till en specifik provider-kontroll och lagrar information om en anslutning i egenskaperna för det ärver från basen <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint>klass.</xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> Till exempel i den ärvda <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType%2A>egenskapen en Provideranslutningspunkten behåller typ av gränssnitt som returnerades av providern.</xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType%2A> Om providern och konsumenter i en anslutning som båda använder samma gränssnittstyp, är kontrollerna kompatibel och kan bilda en direkt anslutning. Om providern och konsumenten inte fungerar med samma gränssnittstyp, de är inkompatibla och måste använda en <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer>objekt att översätta Provideranslutningspunkten <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType%2A>värdet till en typ som konsumenten kan arbeta med.</xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType%2A> </xref:System.Web.UI.WebControls.WebParts.WebPartTransformer> En annan viktig ärvda egenskapen är den <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DisplayName%2A>egenskap, vilket ger ett eget namn som visas i Användargränssnittet för användare att välja en provider-anslutning peka när du skapar anslutningar.</xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DisplayName%2A> Visningsnamnet är den obligatoriska parametern när utvecklare lägger till en `ConnectionProvider` attributet Återanropsmetoden i en provider-kontroll. Den ärvda <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.ID%2A>egenskapen är också användbart som nämns ovan, eftersom den innehåller en unik identifierare för en Provideranslutningspunkten i händelse av att en provider har flera kopplingspunkter.</xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.ID%2A> En leverantör kan ha flera ProviderConnectionPoint objekt som definieras i den, och i det här fallet när utvecklare lägger till den `ConnectionProvider` attribut till en metod måste de ange ID-värdet för att skilja varje kopplingspunkt. En annan viktiga ärvda-egenskap är den <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.AllowsMultipleConnections%2A>-egenskap som anger om en Provideranslutningspunkten kan ansluta samtidigt till flera konsumenter.</xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.AllowsMultipleConnections%2A> Det här värdet är `true` som standard för providern kopplingspunkter (medan används som standard `false` för konsument kopplingspunkter).       Klassen ProviderConnectionPoint lägger till flera metoder för unika medlemmar som det ärver från <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint>klass.</xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> Den <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject%2A>metoden hämtar en instans av det gränssnitt som Återanropsmetoden återgår till konsumenter.</xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject%2A> Den <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetSecondaryInterfaces%2A>metoden hämtar ytterligare konsumenten gränssnitt som är en del av en befintlig anslutning, men inte gränssnitt som används för att upprätta anslutningen.</xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetSecondaryInterfaces%2A>"
  example:
  - "The following code example shows simple ways to create a connection declaratively, programmatically, or through the UI, in each case making use of a provider connection point.  \n  \n The example has four parts:  \n  \n-   A user control that enables you to change the Web Parts display mode on a page.  \n  \n-   Source code for an interface and two <xref:System.Web.UI.WebControls.WebParts.WebPart> controls acting as the provider and the consumer for a connection.  \n  \n-   A Web page to host all the controls and run the code example.  \n  \n-   An explanation of how to run the example page.  \n  \n The first part of this code example is the user control that enables users to change display modes on a Web page. Save the following source code to an .ascx file, giving it the file name that is assigned to the `Src` attribute of the `Register` directive for this user control, which is near the top of the hosting Web page. For details about display modes and a description of the source code in this control, see [Walkthrough: Changing Display Modes on a Web Parts Page](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[WebParts_ConnectionPoint_Overview#6](~/add/codesnippet/csharp/t-system.web.ui.webcontr_356_1.ascx)]\n [!code-vb[WebParts_ConnectionPoint_Overview#6](~/add/codesnippet/visualbasic/t-system.web.ui.webcontr_356_1.ascx)]  \n  \n The second part of the code example is the source code for the interface and controls. The source file contains a simple interface named `IZipCode`. There is also a <xref:System.Web.UI.WebControls.WebParts.WebPart> class named `ZipCodeWebPart` that implements the interface and acts as the provider control. Its `ProvideIZipCode` method is the callback method that implements the interface's only member. The method simply returns an instance of the interface. Note that the method is marked with a `ConnectionProvider` attribute in its metadata. This is the mechanism for identifying the method as the callback method for the provider's connection point. The other <xref:System.Web.UI.WebControls.WebParts.WebPart> class is named `WeatherWebPart`, and it acts as the consumer for the connection. This class has a method named `GetZipCode` that gets an instance of the `IZipCode` interface from the provider control. Note that this method is marked as the consumer's connection point method with a `ConnectionConsumer` attribute in its metadata. This is the mechanism for identifying the connection point method in the consumer control.  \n  \n For the code example to run, you must compile this source code. You can compile it explicitly and put the resulting assembly in your Web site's Bin folder or the global assembly cache. Alternatively, you can put the source code in your site's App_Code folder, where it will be dynamically compiled at run time. This code example uses dynamic compilation. For a walkthrough that demonstrates how to compile, see [Walkthrough: Developing and Using a Custom Web Server Control](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-vb[WebParts_ConnectionPoint_Overview#2](~/add/codesnippet/visualbasic/t-system.web.ui.webcontr_356_2.vb)]\n [!code-cs[WebParts_ConnectionPoint_Overview#2](~/add/codesnippet/csharp/t-system.web.ui.webcontr_356_2.cs)]  \n  \n The third part of the code example is the Web page. Near the top are `Register` directives to register the custom controls that form the connection, and the user control that enables users to change display modes on the page. The connection itself is created declaratively within the `<staticconnections>` element on the page. This demonstrates one way of creating a connection--note the `ProviderConnectionPointID` attribute in the `<asp:webpartconnection>` element. You can also create the connection programmatically; the code for doing that is in the `Button1_Click` method. In this case, a ProviderConnectionPoint object is created and then passed to a method that creates the actual connection. Whether the connection is created declaratively or programmatically, connection points must always be specified for both the provider and the consumer. The `Button2_Click` method accesses the <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> objects for both the provider and the consumer, and writes some of their property values to a label in the page.  \n  \n [!code-vb[WebParts_ConnectionPoint_Overview#1](~/add/codesnippet/visualbasic/t-system.web.ui.webcontr_356_3.aspx)]\n [!code-cs[WebParts_ConnectionPoint_Overview#1](~/add/codesnippet/csharp/t-system.web.ui.webcontr_356_3.aspx)]  \n  \n After you load the page in a browser, click the **Connection Point Details** button. Information about the provider and consumer connection points established in the declarative connection appears. Next, use the **Display Mode** drop-down control to switch the page into connect mode. On the verbs menu of the **ZIP Code Consumer**<xref:System.Web.UI.WebControls.WebParts.WebPart> control (represented by a downward arrow in the title bar), click the connect verb. The connection UI appears, created automatically by the `<asp:connectionszone>` control declared in the page. This is another way of creating a connection (through the UI), along with the declarative and programmatic methods discussed earlier. Click the **Disconnect** button to terminate the existing static connection. Click the **Create a Connection to a Provider** link. The UI now displays a drop-down control that lists the provider connection point display name. Select the connection point in the drop-down list, and then click **Connect** to complete the connection. Next, click **Disconnect** again. Then, click the **Dynamic Connection** button to create a connection programmatically. Use the **Display Mode** control to return the page to browse mode. Click the **Connection Point Details** button again, to once more indicate details about the provider connection point object.  \n  \n The example has demonstrated establishing a connection and using a provider connection point in three ways: a static connection declared in the Web page markup; a connection created in code that used a ProviderConnectionPoint object; and a connection created by a user through the connection UI."
  syntax:
    content: 'public class ProviderConnectionPoint : System.Web.UI.WebControls.WebParts.ConnectionPoint'
  inheritance:
  - System.Object
  - System.Web.UI.WebControls.WebParts.ConnectionPoint
  implements: []
  inheritedMembers:
  - System.Web.UI.WebControls.WebParts.ConnectionPoint.AllowsMultipleConnections
  - System.Web.UI.WebControls.WebParts.ConnectionPoint.ControlType
  - System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID
  - System.Web.UI.WebControls.WebParts.ConnectionPoint.DisplayName
  - System.Web.UI.WebControls.WebParts.ConnectionPoint.GetEnabled(System.Web.UI.Control)
  - System.Web.UI.WebControls.WebParts.ConnectionPoint.ID
  - System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.#ctor(System.Reflection.MethodInfo,System.Type,System.Type,System.String,System.String,System.Boolean)
  id: '#ctor(System.Reflection.MethodInfo,System.Type,System.Type,System.String,System.String,System.Boolean)'
  parent: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint
  langs:
  - csharp
  name: ProviderConnectionPoint(MethodInfo,Type,Type,String,String,Boolean)
  nameWithType: ProviderConnectionPoint.ProviderConnectionPoint(MethodInfo,Type,Type,String,String,Boolean)
  fullName: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.ProviderConnectionPoint(MethodInfo,Type,Type,String,String,Boolean)
  type: Constructor
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Initierar en ny instans av den <xref href=&quot;System.Web.UI.WebControls.WebParts.ProviderConnectionPoint&quot;> </xref> klass."
  remarks: "Konstruktorn till ProviderConnectionPoint för <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>klassen anropar bara grundläggande konstruktorn skicka till den olika parametrar och initiera grundläggande klassen.</xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>       Konstruktorn basklass kontrollerar ett antal parametrar för en kopplingspunkt och kan utlösa flera undantag. En lista med möjliga undantag finns i avsnittet undantag.       Du kan anropa konstruktorn till ProviderConnectionPoint för att skapa din egen instans av <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>klassen.</xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> Dock bör du även i fall där du är helt enkelt upprätta en anslutning och inte utökar klassen anropar den <xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetProviderConnectionPoints%2A>metod för att returnera en befintlig anslutning point-objekt från en leverantör.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetProviderConnectionPoints%2A>"
  example:
  - "The following code example demonstrates how to derive from the <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> class to create a custom provider connection point.  \n  \n The code example has three parts:  \n  \n-   A source file that contains a provider <xref:System.Web.UI.WebControls.WebParts.WebPart> control, a consumer <xref:System.Web.UI.WebControls.WebParts.WebPart> control, and a custom <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> object.  \n  \n-   A Web page that hosts the controls in a static connection.  \n  \n-   An explanation of how to run the example code.  \n  \n The first part of the code example is the source for the provider and consumer <xref:System.Web.UI.WebControls.WebParts.WebPart> controls, and a custom <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> class, named `TableProviderConnectionPoint`. Note that the constructor of the `TableProviderConnectionPoint` class calls the base constructor, passing it the required parameters as indicated in the Parameters section. Also note that in the `TableProviderWebPart` class, the `GetConnectionInterface` method is specified as the callback method for connections, and the `ConnectionProvider` attribute declares the custom `TableProviderConnectionPoint` as a parameter. This demonstrates how to create a custom provider connection point and then associate it with a provider control. This example assumes that the source code is dynamically compiled, so you should place the source code file in an App_Code subfolder of your Web application.  \n  \n [!code-cs[UI.WebControls.WebParts.ProviderConnectionPoint#1](~/add/codesnippet/csharp/4405c9d3-e4fd-4235-883f-_1.cs)]  \n  \n The second part of the code example is the Web page that hosts the custom controls in a static Web Parts connection. At the top of the page is a `Register` directive to declare a prefix and the namespace for the custom controls. The connection is declared by using an `<asp:webpartconnection>` element, and the provider and consumer controls are declared within an `<asp:webpartzone>` element.  \n  \n [!code-cs[UI.WebControls.WebParts.ProviderConnectionPoint#3](~/add/codesnippet/csharp/4405c9d3-e4fd-4235-883f-_2.aspx)]  \n  \n Load the page in a browser. The connection between the controls already exists, and the consumer displays the data from the provider, because the connection was declared as a static connection in the page."
  syntax:
    content: public ProviderConnectionPoint (System.Reflection.MethodInfo callbackMethod, Type interfaceType, Type controlType, string displayName, string id, bool allowsMultipleConnections);
    parameters:
    - id: callbackMethod
      type: System.Reflection.MethodInfo
      description: "Metoden som används i kontrollen providern som returnerar en instans av gränssnittet för konsumenter för att upprätta en anslutning."
    - id: interfaceType
      type: System.Type
      description: "Den <xref:System.Type>för gränssnittet som providern fungerar konsumenterna.</xref:System.Type>"
    - id: controlType
      type: System.Type
      description: "Den <xref:System.Type>för providern kontrollen som är kopplad till anslutningspunkten för providern.</xref:System.Type>"
    - id: displayName
      type: System.String
      description: "Ett eget namn för providern kopplingspunkt som visas för användare i användargränssnittet (UI) för anslutning."
    - id: id
      type: System.String
      description: "En unik identifierare för anslutningspunkten för providern."
    - id: allowsMultipleConnections
      type: System.Boolean
      description: "Ett booleskt värde som anger om Provideranslutningspunkten kan ha flera samtidiga anslutningar med konsumenter."
  overload: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>callbackMethod</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.  \n  \n \\- or -  \n  \n <code>interfaceType</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.  \n  \n \\- or -  \n  \n <code>controlType</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.  \n  \n \\- or -  \n  \n <code>displayName</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> or an empty string (\"\")."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>controlType </code>är inte av samma typ som providern kontrollen (eller en giltig klass som härletts från den)."
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject(System.Web.UI.Control)
  id: GetObject(System.Web.UI.Control)
  parent: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint
  langs:
  - csharp
  name: GetObject(Control)
  nameWithType: ProviderConnectionPoint.GetObject(Control)
  fullName: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject(Control)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Anropar Återanropsmetoden i en provider-kontroll som hämtar en instans för gränssnittet att återgå till konsumenter."
  remarks: "Den här metoden returnerar ett objekt från providern kontrollen som är en instans av gränssnitt som används för att upprätta en anslutning. Typen av objekt blir typ av det implementerade gränssnittet. Till exempel två gränssnitt som implementeras för anslutningar i kontrolluppsättningen av webbdelar är <xref:System.Web.UI.WebControls.WebParts.IWebPartField>och <xref:System.Web.UI.WebControls.WebParts.IWebPartRow>.</xref:System.Web.UI.WebControls.WebParts.IWebPartRow> </xref:System.Web.UI.WebControls.WebParts.IWebPartField> När GetObject-metoden anropas på en <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>objekt, om den associera providern implementerar ett av dessa gränssnitt, blir det returnerade objektet av samma typ.</xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>       GetObject-metoden anropas av <xref:System.Web.UI.WebControls.WebParts.WebPartConnection>objekt när en anslutning aktiveras.</xref:System.Web.UI.WebControls.WebParts.WebPartConnection> Detta är ett viktigt steg som faktiskt upprättar en anslutning som gör att två kontroller för att dela data börjar.       Konsumentkontroll i en anslutning måste kunna arbeta med samma typ av gränssnitt som providern. Om det inte kontrollerna som är inkompatibla och en <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer>objektet måste användas för att upprätta en anslutning.</xref:System.Web.UI.WebControls.WebParts.WebPartTransformer>"
  syntax:
    content: public virtual object GetObject (System.Web.UI.Control control);
    parameters:
    - id: control
      type: System.Web.UI.Control
      description: "Den kontroll som fungerar som providern i en webbdelar-anslutning."
    return:
      type: System.Object
      description: "En <xref:System.Object>som är en instans av en provider-gränssnittet returnerar för konsumenter för att upprätta en anslutning.</xref:System.Object>"
  overload: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>control</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetSecondaryInterfaces(System.Web.UI.Control)
  id: GetSecondaryInterfaces(System.Web.UI.Control)
  parent: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint
  langs:
  - csharp
  name: GetSecondaryInterfaces(Control)
  nameWithType: ProviderConnectionPoint.GetSecondaryInterfaces(Control)
  fullName: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetSecondaryInterfaces(Control)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Hämtar en valfri mängd sekundära gränssnitt som stöds av en providerpunkt."
  remarks: "Ett provider-anslutning point-objekt har alltid ett standardgränssnitt som används för att upprätta en anslutning med konsumenter. En instans av standardgränssnittet hämtas genom att anropa den <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject%2A>metoden på en <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>objektet.</xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> </xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject%2A>       Vissa kontroller för providern kommer dock att implementera flera gränssnitt för att förse användare som en del av en anslutning. Dessa gränssnitt som inte är standard som används för att upprätta en anslutning, kallas sekundära gränssnitt. Metoden GetSecondaryInterfaces är ett sätt att returnera en samling med referenser till sekundära gränssnitt, precis som den <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject%2A>metoden returnerar en referens till standardgränssnittet.</xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject%2A>"
  syntax:
    content: public virtual System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection GetSecondaryInterfaces (System.Web.UI.Control control);
    parameters:
    - id: control
      type: System.Web.UI.Control
      description: "Den kontroll som fungerar som providern i en webbdelar-anslutning."
    return:
      type: System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection
      description: "En <xref href=&quot;System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection&quot;> </xref> ytterligare gränssnitt som tillhandahålls av kontrollen fungerar som en provider."
  overload: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetSecondaryInterfaces*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Web.UI.WebControls.WebParts.ConnectionPoint
  isExternal: false
  name: System.Web.UI.WebControls.WebParts.ConnectionPoint
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.#ctor(System.Reflection.MethodInfo,System.Type,System.Type,System.String,System.String,System.Boolean)
  parent: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint
  isExternal: false
  name: ProviderConnectionPoint(MethodInfo,Type,Type,String,String,Boolean)
  nameWithType: ProviderConnectionPoint.ProviderConnectionPoint(MethodInfo,Type,Type,String,String,Boolean)
  fullName: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.ProviderConnectionPoint(MethodInfo,Type,Type,String,String,Boolean)
- uid: System.Reflection.MethodInfo
  parent: System.Reflection
  isExternal: true
  name: MethodInfo
  nameWithType: MethodInfo
  fullName: System.Reflection.MethodInfo
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject(System.Web.UI.Control)
  parent: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint
  isExternal: false
  name: GetObject(Control)
  nameWithType: ProviderConnectionPoint.GetObject(Control)
  fullName: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject(Control)
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Web.UI.Control
  parent: System.Web.UI
  isExternal: false
  name: Control
  nameWithType: Control
  fullName: System.Web.UI.Control
- uid: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetSecondaryInterfaces(System.Web.UI.Control)
  parent: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint
  isExternal: false
  name: GetSecondaryInterfaces(Control)
  nameWithType: ProviderConnectionPoint.GetSecondaryInterfaces(Control)
  fullName: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetSecondaryInterfaces(Control)
- uid: System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection
  parent: System.Web.UI.WebControls.WebParts
  isExternal: false
  name: ConnectionInterfaceCollection
  nameWithType: ConnectionInterfaceCollection
  fullName: System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection
- uid: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.#ctor*
  parent: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint
  isExternal: false
  name: ProviderConnectionPoint
  nameWithType: ProviderConnectionPoint.ProviderConnectionPoint
- uid: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject*
  parent: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint
  isExternal: false
  name: GetObject
  nameWithType: ProviderConnectionPoint.GetObject
- uid: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetSecondaryInterfaces*
  parent: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint
  isExternal: false
  name: GetSecondaryInterfaces
  nameWithType: ProviderConnectionPoint.GetSecondaryInterfaces
