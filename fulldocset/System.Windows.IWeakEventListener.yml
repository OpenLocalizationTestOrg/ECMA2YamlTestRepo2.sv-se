### YamlMime:ManagedReference
items:
- uid: System.Windows.IWeakEventListener
  id: IWeakEventListener
  children:
  - System.Windows.IWeakEventListener.ReceiveWeakEvent(System.Type,System.Object,System.EventArgs)
  langs:
  - csharp
  name: IWeakEventListener
  nameWithType: IWeakEventListener
  fullName: System.Windows.IWeakEventListener
  type: Interface
  summary: "Stöder händelse lyssnande klasser som ska kunna ta emot händelser genom WeakEvent mönstret och en <xref href=&quot;System.Windows.WeakEventManager&quot;> </xref>."
  remarks: "Den <xref:System.Windows.WeakEventManager>(en dispatcher) vidarebefordrar en händelse genom att anropa den <xref:System.Windows.IWeakEventListener.ReceiveWeakEvent%2A>klasser som implementerar gränssnittet och som har lagts till som lyssnare genom att anropa metoden <xref:System.Windows.WeakEventManager>metoder i förväg.</xref:System.Windows.WeakEventManager> </xref:System.Windows.IWeakEventListener.ReceiveWeakEvent%2A> </xref:System.Windows.WeakEventManager>       Det huvudsakliga för följande WeakEvent mönstret beror på när händelsekällan har en livslängd för objekt som är potentiellt oberoende av händelseavlyssnare. Med hjälp av centrala händelse sändning av en <xref:System.Windows.WeakEventManager>aktiverar hanterare för lyssnare ska skräp samlas in (eller manuellt rensas) även om källa objektlivstid sträcker sig utanför lyssnarna.</xref:System.Windows.WeakEventManager> Däremot kommer en normal händelse hookup med `+=` eller motsvarande språkspecifika händelse syntax orsakar eventuellt fortfarande ansluten källan för en stark referens till hanterare. Detta håller lyssnare referenser från att skräpinsamlats inom rimlig tid.       En gemensam situation där relationerna mellan datakällor och lyssnare föreslår användningen av det här mönstret är hantering av update-händelser som kommer från källor för databindningar.       Du kan använda WeakEvent mönster för att lyssna efter händelser som är externa för ditt program. Du behöver definiera en <xref:System.Windows.WeakEventManager>för det, anger du lyssnande beteende i <xref:System.Windows.IWeakEventListener.ReceiveWeakEvent%2A>, och använda den <xref:System.Windows.WeakEventManager>att koppla hanteraren refererar i stället `+=`.</xref:System.Windows.WeakEventManager> </xref:System.Windows.IWeakEventListener.ReceiveWeakEvent%2A> </xref:System.Windows.WeakEventManager>"
  syntax:
    content: public interface IWeakEventListener
  implements: []
  platform:
  - net462
- uid: System.Windows.IWeakEventListener.ReceiveWeakEvent(System.Type,System.Object,System.EventArgs)
  id: ReceiveWeakEvent(System.Type,System.Object,System.EventArgs)
  parent: System.Windows.IWeakEventListener
  langs:
  - csharp
  name: ReceiveWeakEvent(Type,Object,EventArgs)
  nameWithType: IWeakEventListener.ReceiveWeakEvent(Type,Object,EventArgs)
  fullName: System.Windows.IWeakEventListener.ReceiveWeakEvent(Type,Object,EventArgs)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Tar emot händelser från centraliserad händelsehanteraren."
  remarks: ''
  example:
  - "The following example implements ReceiveWeakEvent to provide WeakEvent pattern support for two hypothetical events `ClockwiseSpin` and `CounterclockwiseSpin` that each have a dedicated <xref:System.Windows.WeakEventManager> (not shown). This implementation calls class handler stubs for each supported event, casting the event data (in this case the two events share an event data type `SpinEventArgs`). The implementation returns `false` if the event received is not one that is expected.  \n  \n [!code-cs[CorePseudocode#IWeakEventListener](~/add/codesnippet/csharp/CorePseudocode/corepseudocode.cs#iweakeventlistener)]\n [!code-vb[CorePseudocode#IWeakEventListener](~/add/codesnippet/visualbasic/corepseudocode/corepseudocode.vb#iweakeventlistener)]"
  syntax:
    content: public bool ReceiveWeakEvent (Type managerType, object sender, EventArgs e);
    parameters:
    - id: managerType
      type: System.Type
      description: "Typ av den <xref href=&quot;System.Windows.WeakEventManager&quot;> </xref> anropar den här metoden."
    - id: sender
      type: System.Object
      description: "Objektet som initierade händelsen."
    - id: e
      type: System.EventArgs
      description: "Händelsedata."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Om lyssnaren hanterade händelsen. Är det ett fel av den <xref href=&quot;System.Windows.WeakEventManager&quot;> </xref> hantering i [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)] att registrera en lyssnare för en händelse som lyssnaren inte hanteras. Oavsett vilken metod ska returnera <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> om den tar emot en händelse som inte identifieras eller hantera."
  overload: System.Windows.IWeakEventListener.ReceiveWeakEvent*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Windows.IWeakEventListener.ReceiveWeakEvent(System.Type,System.Object,System.EventArgs)
  parent: System.Windows.IWeakEventListener
  isExternal: false
  name: ReceiveWeakEvent(Type,Object,EventArgs)
  nameWithType: IWeakEventListener.ReceiveWeakEvent(Type,Object,EventArgs)
  fullName: System.Windows.IWeakEventListener.ReceiveWeakEvent(Type,Object,EventArgs)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.EventArgs
  parent: System
  isExternal: true
  name: EventArgs
  nameWithType: EventArgs
  fullName: System.EventArgs
- uid: System.Windows.IWeakEventListener.ReceiveWeakEvent*
  parent: System.Windows.IWeakEventListener
  isExternal: false
  name: ReceiveWeakEvent
  nameWithType: IWeakEventListener.ReceiveWeakEvent
