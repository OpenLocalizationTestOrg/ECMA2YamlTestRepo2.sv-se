### YamlMime:ManagedReference
items:
- uid: System.Timers.Timer
  id: Timer
  children:
  - System.Timers.Timer.#ctor
  - System.Timers.Timer.#ctor(System.Double)
  - System.Timers.Timer.AutoReset
  - System.Timers.Timer.BeginInit
  - System.Timers.Timer.Close
  - System.Timers.Timer.Dispose(System.Boolean)
  - System.Timers.Timer.Elapsed
  - System.Timers.Timer.Enabled
  - System.Timers.Timer.EndInit
  - System.Timers.Timer.Interval
  - System.Timers.Timer.Site
  - System.Timers.Timer.Start
  - System.Timers.Timer.Stop
  - System.Timers.Timer.SynchronizingObject
  langs:
  - csharp
  name: Timer
  nameWithType: Timer
  fullName: System.Timers.Timer
  type: Class
  summary: "Generera en händelse efter ett angivet intervall, med ett alternativ för att generera återkommande händelser.       Om du vill bläddra .NET Framework källkoden för den här typen finns i [referenskälla](http://referencesource.microsoft.com/#System/services/timers/system/timers/Timer.cs#897683f27faba082)."
  remarks: "> [!NOTE]>.NET Framework källkoden för den här typen finns i [referenskälla](http://referencesource.microsoft.com/#System/services/timers/system/timers/Timer.cs#897683f27faba082). Du kan bläddra igenom källkoden online, hämta referens för visning offline och gå igenom källor (inklusive korrigeringarna och programvaruuppdateringarna) vid felsökning. Se [instruktioner](http://referencesource.microsoft.com/).       Timer-komponenten är en serverbaserad timer som aktiverar en <xref:System.Timers.Timer.Elapsed>händelse i ditt program efter antal millisekunder i den <xref:System.Timers.Timer.Interval%2A>egenskapen har förflutit.</xref:System.Timers.Timer.Interval%2A> </xref:System.Timers.Timer.Elapsed> Du kan konfigurera Timer-objekt för att höja händelsen en gång eller flera gånger med hjälp av den <xref:System.Timers.Timer.AutoReset%2A>egenskapen.</xref:System.Timers.Timer.AutoReset%2A> Vanligtvis har ett Timer-objekt deklarerats på klassnivå så att den inte i omfånget så länge som det behövs. Du kan sedan hantera dess <xref:System.Timers.Timer.Elapsed>händelse att ge regelbundna bearbetning.</xref:System.Timers.Timer.Elapsed> Anta att du har en kritisk server som måste hållas kör dygnet runt, 7 dagar i veckan. Du kan skapa en tjänst som använder Timer-objekt för att regelbundet kontrollera servern och kontrollera att systemet är igång. Om systemet inte svarar kan tjänsten försöka starta om servern eller meddelar administratör.      > [!IMPORTANT] > Det tidsinställda klass är tillgänglig i .NET-Framework. Den ingår inte i .NET-standardbibliotek och är inte tillgängligt för andra plattformar, till exempel .NET Core eller universella Windows-plattformen. På dessa plattformar, samt för överföring av alla .NET-plattformar, bör du använda den <xref:System.Threading.Timer?displayProperty=fullName>klassen i stället.</xref:System.Threading.Timer?displayProperty=fullName>       Den här typen implementerar den <xref:System.IDisposable>gränssnitt.</xref:System.IDisposable> När du är klar med typ, ta bort den direkt eller indirekt. Om du vill ta bort av typen direkt, anropa dess <xref:System.IDisposable.Dispose%2A>metod i en `try` / `catch` block.</xref:System.IDisposable.Dispose%2A> Om du vill ta hand om den indirekt, använda en språk-konstruktion som `using` (i C#) eller `Using` (i Visual Basic). Mer information finns i avsnittet &quot;Med hjälp av ett objekt som implementerar IDisposable&quot; i den <xref:System.IDisposable>gränssnittet avsnittet.</xref:System.IDisposable>       Klassen serverbaserade är avsedd för användning med trådar i en flertrådsmiljö. Servern timers kan flytta mellan trådar att hantera den upphöjda <xref:System.Timers.Timer.Elapsed>händelse, vilket ger mer exakt än Windows timers i aktivering av händelsen i tid.</xref:System.Timers.Timer.Elapsed>       Timer-komponenten aktiverar den <xref:System.Timers.Timer.Elapsed>händelse, baserat på värdet (i millisekunder) för den <xref:System.Timers.Timer.Interval%2A>egenskapen.</xref:System.Timers.Timer.Interval%2A> </xref:System.Timers.Timer.Elapsed> Du kan hantera den här händelsen för att utföra bearbetningen som du behöver. Anta att du har ett online försäljning program som skickar kontinuerligt order till en databas. Den tjänst som sammanställer instruktioner för leverans fungerar för en grupp av order i stället för att behandla varje beställning individuellt. Du kan använda en Timer för att starta batchbearbetning var 30: e minut.      > [!IMPORTANT] > I System.Timers.Timer klassen har samma upplösning som systemklockan. Detta innebär att den <xref:System.Timers.Timer.Elapsed>händelsen utlöses vid ett intervall som definieras av lösning av systemklockan om den <xref:System.Timers.Timer.Interval%2A>egenskapen är mindre än lösning av systemklockan.</xref:System.Timers.Timer.Interval%2A> </xref:System.Timers.Timer.Elapsed> Mer information finns i <xref:System.Timers.Timer.Interval%2A>egenskap.</xref:System.Timers.Timer.Interval%2A>       När <xref:System.Timers.Timer.AutoReset%2A>har angetts till `false`, ett Timer-objekt som genererar den <xref:System.Timers.Timer.Elapsed>händelse bara en gång, efter först <xref:System.Timers.Timer.Interval%2A>har förflutit.</xref:System.Timers.Timer.Interval%2A> </xref:System.Timers.Timer.Elapsed> </xref:System.Timers.Timer.AutoReset%2A> Att fortsätter att höja den <xref:System.Timers.Timer.Elapsed>händelse regelbundet med det intervall som definieras av den <xref:System.Timers.Timer.Interval%2A>, Ställ in <xref:System.Timers.Timer.AutoReset%2A>till `true`, vilket är standardvärdet.</xref:System.Timers.Timer.AutoReset%2A> </xref:System.Timers.Timer.Interval%2A> </xref:System.Timers.Timer.Elapsed>       Komponenten Timer fångar och förhindrar alla undantag som utlöses av händelsehanterare för den <xref:System.Timers.Timer.Elapsed>händelse.</xref:System.Timers.Timer.Elapsed> Detta beteende kan ändras i framtida versioner av .NET Framework. Observera att detta inte gäller för händelsehanterare som asynkront och inkludera den `await` operatorn (i C#) eller `Await` operatorn (i Visual Basic). Undantag i dessa händelsehanterare sprids tillbaka till den anropande tråden som i följande exempel visas. Mer information om undantag i asynkrona metoder finns [undantagshantering](~/add/includes/ajax-current-ext-md.md).       [!code-cs[System.Timers.Timer#3](~/add/codesnippet/csharp/t-system.timers.timer_1.cs)][!code-vb[System.Timers.Timer#3](~/add/codesnippet/visualbasic/t-system.timers.timer_1.vb) ] om den <xref:System.Timers.Timer.SynchronizingObject%2A>egenskapen är `null`, <xref:System.Timers.Timer.Elapsed>händelsen höjs vid ett <xref:System.Threading.ThreadPool>tråd.</xref:System.Threading.ThreadPool> </xref:System.Timers.Timer.Elapsed> </xref:System.Timers.Timer.SynchronizingObject%2A>   Om bearbetningen av den <xref:System.Timers.Timer.Elapsed>händelsen varar längre än <xref:System.Timers.Timer.Interval%2A>, händelsen kan aktiveras igen på en annan <xref:System.Threading.ThreadPool>tråd.</xref:System.Threading.ThreadPool> </xref:System.Timers.Timer.Interval%2A> </xref:System.Timers.Timer.Elapsed> I det här fallet ska händelsehanteraren fleraktivt.      > [!NOTE] > Metoden händelsehantering kan köra på en tråd samtidigt som en annan tråd anropar den <xref:System.Timers.Timer.Stop%2A>metod eller anger den <xref:System.Timers.Timer.Enabled%2A>egenskapen `false`.</xref:System.Timers.Timer.Enabled%2A> </xref:System.Timers.Timer.Stop%2A> Detta kan resultera i den <xref:System.Timers.Timer.Elapsed>händelse som aktiveras när timern har avbrutits.</xref:System.Timers.Timer.Elapsed> Kodexempel för den <xref:System.Timers.Timer.Stop%2A>metoden visar ett sätt att undvika det här konkurrenstillstånd.</xref:System.Timers.Timer.Stop%2A>       Även om <xref:System.Timers.Timer.SynchronizingObject%2A>är inte `null`, <xref:System.Timers.Timer.Elapsed>händelser efter den <xref:System.Timers.Timer.Dispose%2A>eller <xref:System.Timers.Timer.Stop%2A>metoden har anropats eller efter den <xref:System.Timers.Timer.Enabled%2A>egenskapen har angetts `false`eftersom signalen att öka den <xref:System.Timers.Timer.Elapsed>händelse är alltid i kö för körning på en tråd pooltråd.</xref:System.Timers.Timer.Elapsed> </xref:System.Timers.Timer.Enabled%2A> </xref:System.Timers.Timer.Stop%2A> </xref:System.Timers.Timer.Dispose%2A> </xref:System.Timers.Timer.Elapsed> </xref:System.Timers.Timer.SynchronizingObject%2A> Ett sätt att lösa det här konkurrenstillstånd är att ange en flagga som anger händelsehanteraren för den <xref:System.Timers.Timer.Elapsed>händelse att ignorera efterföljande händelser.</xref:System.Timers.Timer.Elapsed>       Om du använder klassen med användargränssnittselementet, till exempel ett formulär eller en kontroll utan att placera timern på det användargränssnittselementet, tilldela formuläret eller kontrollen som innehåller klockan så att den <xref:System.Timers.Timer.SynchronizingObject%2A>egenskap, så att händelsen konverteras till användaren gränssnittet tråd.</xref:System.Timers.Timer.SynchronizingObject%2A>       En lista över standardegenskapsvärden för en instans av Timer, finns det <xref:System.Timers.Timer.%23ctor%2A>konstruktor.</xref:System.Timers.Timer.%23ctor%2A>      > [!TIP] > Vara medveten om att .NET Framework-Klassbiblioteket innehåller fyra klasser med namnet `Timer`, varje av som erbjuder olika funktioner: >>-Timer (det här avsnittet): utlöses en händelse med jämna mellanrum. Klassen är avsedd för användning som en server-baserad eller tjänstkomponent i en flertrådsmiljö; den har inget användargränssnitt och visas inte vid körning.   >- <xref:System.Threading.Timer?displayProperty=fullName>: kör en enda metod på en tråd pooltråd med jämna mellanrum.</xref:System.Threading.Timer?displayProperty=fullName> Motringningsmetoden definieras när timern instansieras och kan inte ändras. Liksom klassen Timer är den här klassen avsedd för användning som en server-baserad eller tjänstkomponent i en flertrådsmiljö; den har inget användargränssnitt och visas inte vid körning.   >- <xref:System.Windows.Forms.Timer?displayProperty=fullName>: en Windows Forms-komponent som utlöses en händelse med jämna mellanrum.</xref:System.Windows.Forms.Timer?displayProperty=fullName> Komponenten har inget användargränssnitt och är avsedd för användning i en enkeltrådad miljö.   >- <xref:System.Web.UI.Timer?displayProperty=fullName>: ett ASP.NET-komponenten som utför asynkrona och synkrona webbsida återanslag med jämna mellanrum.</xref:System.Web.UI.Timer?displayProperty=fullName>"
  example:
  - "The following example instantiates a `System.Timers.Timer` object that fires its <xref:System.Timers.Timer.Elapsed?displayProperty=fullName> event every two seconds (2,000 milliseconds), sets up an event handler for the  event, and starts the timer. The event handler displays the value of the <xref:System.Timers.ElapsedEventArgs.SignalTime%2A?displayProperty=fullName> property each time it is raised.  \n  \n [!code-cs[System.Timers.Timer#2](~/add/codesnippet/csharp/t-system.timers.timer_2.cs)]\n [!code-vb[System.Timers.Timer#2](~/add/codesnippet/visualbasic/t-system.timers.timer_2.vb)]"
  syntax:
    content: >-
      [System.ComponentModel.DefaultEvent("Elapsed")]

      [System.ComponentModel.DefaultProperty("Interval")]

      public class Timer : System.ComponentModel.Component, System.ComponentModel.ISupportInitialize
  inheritance:
  - System.Object
  - System.MarshalByRefObject
  - System.ComponentModel.Component
  implements:
  - System.ComponentModel.ISupportInitialize
  inheritedMembers:
  - System.ComponentModel.Component.CanRaiseEvents
  - System.ComponentModel.Component.Container
  - System.ComponentModel.Component.DesignMode
  - System.ComponentModel.Component.Dispose
  - System.ComponentModel.Component.Disposed
  - System.ComponentModel.Component.Events
  - System.ComponentModel.Component.GetService(System.Type)
  - System.ComponentModel.Component.ToString
  - System.MarshalByRefObject.CreateObjRef(System.Type)
  - System.MarshalByRefObject.GetLifetimeService
  - System.MarshalByRefObject.InitializeLifetimeService
  - System.MarshalByRefObject.MemberwiseClone(System.Boolean)
  platform:
  - net462
- uid: System.Timers.Timer.#ctor
  id: '#ctor'
  parent: System.Timers.Timer
  langs:
  - csharp
  name: Timer()
  nameWithType: Timer.Timer()
  fullName: System.Timers.Timer.Timer()
  type: Constructor
  assemblies:
  - System
  namespace: System.Timers
  summary: "Initierar en ny instans av den <xref href=&quot;System.Timers.Timer&quot;> </xref> klassen och anger alla egenskaper till sina ursprungliga värden."
  remarks: "I följande tabell visas första egenskapsvärden för en instans av <xref:System.Timers.Timer>.</xref:System.Timers.Timer>      | Egenskapen | Ursprungligt värde |   |--------------|-------------------|   | <xref:System.Timers.Timer.AutoReset%2A>| `true`|   | <xref:System.Timers.Timer.Enabled%2A>| `false`|   | <xref:System.Timers.Timer.Interval%2A>|&100; millisekunder |   | <xref:System.Timers.Timer.SynchronizingObject%2A>| En null-referens (`Nothing` i Visual Basic). |</xref:System.Timers.Timer.SynchronizingObject%2A> </xref:System.Timers.Timer.Interval%2A> </xref:System.Timers.Timer.Enabled%2A> </xref:System.Timers.Timer.AutoReset%2A>"
  example:
  - "The following example instantiates a <xref:System.Timers.Timer> object that fires its <xref:System.Timers.Timer.Elapsed?displayProperty=fullName> event every two seconds (2000 milliseconds), sets up an event handler for the event, and starts the timer. The event handler displays the value of the <xref:System.Timers.ElapsedEventArgs.SignalTime%2A?displayProperty=fullName> property each time it is raised.  \n  \n [!code-cpp[System.Timers.Timer#1](~/add/codesnippet/cpp/m-system.timers.timer.sh_1_1.cpp)]\n [!code-cs[System.Timers.Timer#1](~/add/codesnippet/csharp/m-system.timers.timer.sh_1_1.cs)]\n [!code-vb[System.Timers.Timer#1](~/add/codesnippet/visualbasic/m-system.timers.timer.sh_1_1.vb)]"
  syntax:
    content: public Timer ();
    parameters: []
  overload: System.Timers.Timer.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Timers.Timer.#ctor(System.Double)
  id: '#ctor(System.Double)'
  parent: System.Timers.Timer
  langs:
  - csharp
  name: Timer(Double)
  nameWithType: Timer.Timer(Double)
  fullName: System.Timers.Timer.Timer(Double)
  type: Constructor
  assemblies:
  - System
  namespace: System.Timers
  summary: "Initierar en ny instans av den <xref href=&quot;System.Timers.Timer&quot;> </xref> klass och anger den <xref:System.Timers.Timer.Interval*>egenskapen till det angivna antalet millisekunder.</xref:System.Timers.Timer.Interval*>"
  remarks: "Anger den här konstruktorn i <xref:System.Timers.Timer.Interval%2A>-egenskapen för den nya timer-instansen, men inte aktiverar timern.</xref:System.Timers.Timer.Interval%2A>"
  example:
  - "The following example instantiates a <xref:System.Timers.Timer> object that fires its <xref:System.Timers.Timer.Elapsed?displayProperty=fullName> event every two seconds (2000 milliseconds), sets up an event handler for the event, and starts the timer. The event handler displays the value of the <xref:System.Timers.ElapsedEventArgs.SignalTime%2A?displayProperty=fullName> property each time it is raised.  \n  \n [!code-cs[System.Timers.Timer#3](~/add/codesnippet/csharp/m-system.timers.timer.sh_0_1.cs)]\n [!code-vb[System.Timers.Timer#3](~/add/codesnippet/visualbasic/m-system.timers.timer.sh_0_1.vb)]"
  syntax:
    content: public Timer (double interval);
    parameters:
    - id: interval
      type: System.Double
      description: "Tid i millisekunder, mellan händelser. Värdet måste vara större än noll och mindre än eller lika med &lt;xref:System.Int32.MaxValue?displayProperty=fullName&gt;."
  overload: System.Timers.Timer.#ctor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Värdet för den <code> interval </code> parametern är mindre än eller lika med noll, eller större än &lt;xref:System.Int32.MaxValue?displayProperty=fullName&gt;."
  platform:
  - net462
- uid: System.Timers.Timer.AutoReset
  id: AutoReset
  parent: System.Timers.Timer
  langs:
  - csharp
  name: AutoReset
  nameWithType: Timer.AutoReset
  fullName: System.Timers.Timer.AutoReset
  type: Property
  assemblies:
  - System
  namespace: System.Timers
  summary: "Hämtar eller anger ett booleskt värde som anger om den <xref href=&quot;System.Timers.Timer&quot;> </xref> bör öka den <xref href=&quot;System.Timers.Timer.Elapsed&quot;> </xref> händelse bara en gång (<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>) eller flera gånger (<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>)."
  remarks: "Om den <xref:System.Timers.Timer>är redan aktiverat när den <xref:System.Timers.Timer.Start%2A>metoden anropas, intervallet återställs.</xref:System.Timers.Timer.Start%2A> </xref:System.Timers.Timer> Om AutoReset `false`, <xref:System.Timers.Timer.Start%2A>metoden måste anropas för att starta beräkningen igen.</xref:System.Timers.Timer.Start%2A>       Återställer intervallet påverkar när den <xref:System.Timers.Timer.Elapsed>händelsen utlöses.</xref:System.Timers.Timer.Elapsed> Om du anger intervallet till 5 sekunder och sedan ange till exempel den <xref:System.Timers.Timer.Enabled%2A>egenskapen `true`, antalet startar när <xref:System.Timers.Timer.Enabled%2A>har angetts.</xref:System.Timers.Timer.Enabled%2A> </xref:System.Timers.Timer.Enabled%2A> Om du återställer intervallet till 10 sekunder när antalet är 3 sekunder i <xref:System.Timers.Timer.Elapsed>händelsen utlöses för första gången 13 sekunder efter den <xref:System.Timers.Timer.Enabled%2A>egenskapen har ställts in på `true`.</xref:System.Timers.Timer.Enabled%2A> </xref:System.Timers.Timer.Elapsed>"
  example:
  - "The following example creates a <xref:System.Timers.Timer> whose <xref:System.Timers.Timer.Elapsed> event fires after 1.5 seconds. Its event handler then displays \"Hello World!\" on the console.  \n  \n [!code-vb[Classic Timer.Timer1 Example#1](~/add/codesnippet/visualbasic/p-system.timers.timer.au_1.vb)]\n [!code-cs[Classic Timer.Timer1 Example#1](~/add/codesnippet/csharp/p-system.timers.timer.au_1.cs)]\n [!code-cpp[Classic Timer.Timer1 Example#1](~/add/codesnippet/cpp/p-system.timers.timer.au_1.cpp)]"
  syntax:
    content: public bool AutoReset { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Om den <xref href=&quot;System.Timers.Timer&quot;> </xref> bör öka den <xref href=&quot;System.Timers.Timer.Elapsed&quot;> </xref> händelse varje gång som det ska gå att intervallet; <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> om den ska öka den <xref href=&quot;System.Timers.Timer.Elapsed&quot;> </xref> händelse när efter första gången intervallet långa. Standardvärdet är <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>."
  overload: System.Timers.Timer.AutoReset*
  exceptions: []
  platform:
  - net462
- uid: System.Timers.Timer.BeginInit
  id: BeginInit
  parent: System.Timers.Timer
  langs:
  - csharp
  name: BeginInit()
  nameWithType: Timer.BeginInit()
  fullName: System.Timers.Timer.BeginInit()
  type: Method
  assemblies:
  - System
  namespace: System.Timers
  summary: "Startar körning initieringen av en <xref href=&quot;System.Timers.Timer&quot;> </xref> som används i ett formulär eller av en annan komponent."
  remarks: "Den [!INCLUDE[vsprvslong](~/add/includes/ajax-current-ext-md.md)] design miljö använder den här metoden för att starta initieringen av en komponent som används i ett formulär eller av en annan komponent. Den <xref:System.Timers.Timer.EndInit%2A>metoden slutar initieringen.</xref:System.Timers.Timer.EndInit%2A> Med BeginInit och <xref:System.Timers.Timer.EndInit%2A>metoder som förhindrar att kontrollen används innan den har initierats.</xref:System.Timers.Timer.EndInit%2A>"
  syntax:
    content: public void BeginInit ();
    parameters: []
  overload: System.Timers.Timer.BeginInit*
  exceptions: []
  platform:
  - net462
- uid: System.Timers.Timer.Close
  id: Close
  parent: System.Timers.Timer
  langs:
  - csharp
  name: Close()
  nameWithType: Timer.Close()
  fullName: System.Timers.Timer.Close()
  type: Method
  assemblies:
  - System
  namespace: System.Timers
  summary: "Släpper de resurser som används av den <xref href=&quot;System.Timers.Timer&quot;> </xref>."
  remarks: "Close-metoden i sin tur anropar den `Dispose` metoden."
  syntax:
    content: public void Close ();
    parameters: []
  overload: System.Timers.Timer.Close*
  exceptions: []
  platform:
  - net462
- uid: System.Timers.Timer.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.Timers.Timer
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: Timer.Dispose(Boolean)
  fullName: System.Timers.Timer.Dispose(Boolean)
  type: Method
  assemblies:
  - System
  namespace: System.Timers
  summary: "Frigör alla resurser som används av aktuellt <xref href=&quot;System.Timers.Timer&quot;> </xref>."
  syntax:
    content: protected override void Dispose (bool disposing);
    parameters:
    - id: disposing
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Frisläpp både hanterade och ohanterade resurser. <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> att släppa endast resurser som inte hanteras."
  overload: System.Timers.Timer.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Timers.Timer.Elapsed
  id: Elapsed
  parent: System.Timers.Timer
  langs:
  - csharp
  name: Elapsed
  nameWithType: Timer.Elapsed
  fullName: System.Timers.Timer.Elapsed
  type: Event
  assemblies:
  - System
  namespace: System.Timers
  summary: "Inträffar när intervallet långa."
  remarks: "Förfluten händelsen aktiveras om den <xref:System.Timers.Timer.Enabled%2A>egenskapen är `true` och tidsintervall (i millisekunder) som definieras av den <xref:System.Timers.Timer.Interval%2A>egenskapen förflutit.</xref:System.Timers.Timer.Interval%2A> </xref:System.Timers.Timer.Enabled%2A> Om den <xref:System.Timers.Timer.AutoReset%2A>egenskapen är `true`, händelsen visas flera gånger med ett intervall som definieras av den <xref:System.Timers.Timer.Interval%2A>egenskapen; annars händelsen visas bara en gång, första gången den <xref:System.Timers.Timer.Interval%2A>värde är slut.</xref:System.Timers.Timer.Interval%2A> </xref:System.Timers.Timer.Interval%2A> </xref:System.Timers.Timer.AutoReset%2A>       Om <xref:System.Timers.Timer.Interval%2A>anges efter den <xref:System.Timers.Timer>har startats nollställs.</xref:System.Timers.Timer> </xref:System.Timers.Timer.Interval%2A> Om du anger intervallet till 5 sekunder och sedan ange till exempel <xref:System.Timers.Timer.Enabled%2A>till `true`, antalet startar när <xref:System.Timers.Timer.Enabled%2A>har angetts.</xref:System.Timers.Timer.Enabled%2A> </xref:System.Timers.Timer.Enabled%2A> Om du återställer intervallet till 10 sekunder när antalet är 3 sekunder gått händelsen utlöses för första gången 13 sekunder efter <xref:System.Timers.Timer.Enabled%2A>har ställts in på `true`.</xref:System.Timers.Timer.Enabled%2A>       Om den <xref:System.Timers.Timer.SynchronizingObject%2A>egenskapen är `null`, förfluten-händelse genereras i en <xref:System.Threading.ThreadPool>tråd.</xref:System.Threading.ThreadPool> </xref:System.Timers.Timer.SynchronizingObject%2A> Om bearbetningen av händelsen gått varar längre än <xref:System.Timers.Timer.Interval%2A>, händelsen kan aktiveras igen på en annan <xref:System.Threading.ThreadPool>tråd.</xref:System.Threading.ThreadPool> </xref:System.Timers.Timer.Interval%2A> I det här fallet ska händelsehanteraren fleraktivt.      > [!NOTE] > Metoden händelsehantering kan köra på en tråd samtidigt som en annan tråd anropar den <xref:System.Timers.Timer.Stop%2A>metod eller anger den <xref:System.Timers.Timer.Enabled%2A>egenskapen `false`.</xref:System.Timers.Timer.Enabled%2A> </xref:System.Timers.Timer.Stop%2A> Detta kan resultera i gått händelse som aktiveras när timern har avbrutits. Kodexempel för den <xref:System.Timers.Timer.Stop%2A>metoden visar ett sätt att undvika det här konkurrenstillstånd.</xref:System.Timers.Timer.Stop%2A>       Även om <xref:System.Timers.Timer.SynchronizingObject%2A>inte `null`, Elapsed-händelser som kan inträffa efter den <xref:System.Timers.Timer.Dispose%2A>eller <xref:System.Timers.Timer.Stop%2A>metoden har anropats eller efter den <xref:System.Timers.Timer.Enabled%2A>egenskapen har angetts `false`eftersom signal för att generera en gått händelsen alltid i kö för körning på en tråd pooltråd.</xref:System.Timers.Timer.Enabled%2A> </xref:System.Timers.Timer.Stop%2A> </xref:System.Timers.Timer.Dispose%2A> </xref:System.Timers.Timer.SynchronizingObject%2A> Ett sätt att lösa det här konkurrenstillstånd är att ange en flagga som anger händelsehanteraren för händelsen gått att ignorera efterföljande händelser.       Den <xref:System.Timers.Timer>komponenten fångar och förhindrar alla undantag som utlöses av händelsehanterare för händelsen gått.</xref:System.Timers.Timer> Detta beteende kan ändras i framtida versioner av .NET Framework."
  example:
  - "The following example instantiates a <xref:System.Timers.Timer> object that fires its Elapsed event every two seconds (2000 milliseconds), sets up an event handler for the event, and starts the timer. The event handler displays the value of the <xref:System.Timers.ElapsedEventArgs.SignalTime%2A?displayProperty=fullName> property each time it is raised.  \n  \n [!code-cpp[System.Timers.Timer#1](~/add/codesnippet/cpp/e-system.timers.timer.el_1.cpp)]\n [!code-cs[System.Timers.Timer#1](~/add/codesnippet/csharp/e-system.timers.timer.el_1.cs)]\n [!code-vb[System.Timers.Timer#1](~/add/codesnippet/visualbasic/e-system.timers.timer.el_1.vb)]"
  syntax:
    content: public event System.Timers.ElapsedEventHandler Elapsed;
    return:
      type: System.Timers.ElapsedEventHandler
      description: "Som ska läggas till."
  exceptions: []
  platform:
  - net462
- uid: System.Timers.Timer.Enabled
  id: Enabled
  parent: System.Timers.Timer
  langs:
  - csharp
  name: Enabled
  nameWithType: Timer.Enabled
  fullName: System.Timers.Timer.Enabled
  type: Property
  assemblies:
  - System
  namespace: System.Timers
  summary: "Hämtar eller anger ett värde som anger om den <xref href=&quot;System.Timers.Timer&quot;> </xref> bör öka den <xref href=&quot;System.Timers.Timer.Elapsed&quot;> </xref> händelse."
  remarks: "Ställa in aktiverat på `true` är samma som anropar <xref:System.Timers.Timer.Start%2A>, medan inställningen aktiverad till `false` är samma som anropar <xref:System.Timers.Timer.Stop%2A>.</xref:System.Timers.Timer.Stop%2A> </xref:System.Timers.Timer.Start%2A>      > [!NOTE] > Signal att öka den <xref:System.Timers.Timer.Elapsed>händelse är alltid i kö för körning på en <xref:System.Threading.ThreadPool>tråd.</xref:System.Threading.ThreadPool> </xref:System.Timers.Timer.Elapsed> Detta kan resultera i den <xref:System.Timers.Timer.Elapsed>händelse som aktiveras när egenskapen Enabled har angetts `false`.</xref:System.Timers.Timer.Elapsed> Kodexempel för den <xref:System.Timers.Timer.Stop%2A>metoden visar ett sätt att komma runt detta konkurrenstillstånd.</xref:System.Timers.Timer.Stop%2A>       Om aktiverad är inställd på `true` och <xref:System.Timers.Timer.AutoReset%2A>är inställd på `false`, <xref:System.Timers.Timer>genererar den <xref:System.Timers.Timer.Elapsed>händelsen när först tidsintervall långa.</xref:System.Timers.Timer.Elapsed> </xref:System.Timers.Timer> </xref:System.Timers.Timer.AutoReset%2A>       Om intervallet anges efter den <xref:System.Timers.Timer>har startats nollställs.</xref:System.Timers.Timer> Om du anger intervallet till 5 sekunder och sedan ange egenskapen Enabled exempelvis `true`, antalet startar när aktiverad har angetts. Om du återställer intervallet till 10 sekunder när antalet är 3 sekunder i <xref:System.Timers.Timer.Elapsed>händelsen utlöses för första gången 13 sekunder efter aktiverad har ställts in på `true`.</xref:System.Timers.Timer.Elapsed>      > [!NOTE] > Vissa visual designers, till exempel de som finns i Microsoft Visual Studio, ange egenskapen Enabled till `true` när du infogar ett nytt <xref:System.Timers.Timer>.</xref:System.Timers.Timer>"
  example:
  - "The following example instantiates a <xref:System.Timers.Timer> object that fires its <xref:System.Timers.Timer.Elapsed?displayProperty=fullName> event every two seconds (2000 milliseconds), sets up an event handler for the  event, and starts the timer. The event handler displays the value of the <xref:System.Timers.ElapsedEventArgs.SignalTime%2A?displayProperty=fullName> property each time it is raised.  \n  \n [!code-cpp[System.Timers.Timer#1](~/add/codesnippet/cpp/p-system.timers.timer.en_1.cpp)]\n [!code-cs[System.Timers.Timer#1](~/add/codesnippet/csharp/p-system.timers.timer.en_1.cs)]\n [!code-vb[System.Timers.Timer#1](~/add/codesnippet/visualbasic/p-system.timers.timer.en_1.vb)]"
  syntax:
    content: public bool Enabled { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Om den <xref href=&quot;System.Timers.Timer&quot;> </xref> bör öka den <xref href=&quot;System.Timers.Timer.Elapsed&quot;> </xref> händelse, annars <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. Standardvärdet är <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Timers.Timer.Enabled*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Den här egenskapen kan inte anges eftersom timern har tagits bort."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Den <xref:System.Timers.Timer.Interval*>egenskapen har angetts till ett värde större än &lt;xref:System.Int32.MaxValue?displayProperty=fullName&gt; innan timern har aktiverats.</xref:System.Timers.Timer.Interval*>"
  platform:
  - net462
- uid: System.Timers.Timer.EndInit
  id: EndInit
  parent: System.Timers.Timer
  langs:
  - csharp
  name: EndInit()
  nameWithType: Timer.EndInit()
  fullName: System.Timers.Timer.EndInit()
  type: Method
  assemblies:
  - System
  namespace: System.Timers
  summary: "Avslutar körning initieringen av en <xref href=&quot;System.Timers.Timer&quot;> </xref> som används i ett formulär eller av en annan komponent."
  remarks: "Den [!INCLUDE[vsprvslong](~/add/includes/ajax-current-ext-md.md)] design miljö använder den här metoden för att avsluta initieringen av en komponent som används i ett formulär eller av en annan komponent. Den <xref:System.Timers.Timer.BeginInit%2A>metoden startar initieringen.</xref:System.Timers.Timer.BeginInit%2A> Med hjälp av den <xref:System.Timers.Timer.BeginInit%2A>och EndInit metoder som förhindrar att kontrollen används innan den har initierats.</xref:System.Timers.Timer.BeginInit%2A>"
  syntax:
    content: public void EndInit ();
    parameters: []
  overload: System.Timers.Timer.EndInit*
  exceptions: []
  platform:
  - net462
- uid: System.Timers.Timer.Interval
  id: Interval
  parent: System.Timers.Timer
  langs:
  - csharp
  name: Interval
  nameWithType: Timer.Interval
  fullName: System.Timers.Timer.Interval
  type: Property
  assemblies:
  - System
  namespace: System.Timers
  summary: "Hämtar eller anger intervallet, uttryckt i millisekunder som du vill öka det <xref href=&quot;System.Timers.Timer.Elapsed&quot;> </xref> händelse."
  remarks: "Du använder egenskapen intervall för att fastställa frekvensen med vilken den <xref:System.Timers.Timer.Elapsed>händelsen utlöses.</xref:System.Timers.Timer.Elapsed> Eftersom den <xref:System.Timers.Timer>klass beror på systemklockan, den har samma upplösning som systemklockan.</xref:System.Timers.Timer> Detta innebär att den <xref:System.Timers.Timer.Elapsed>händelsen utlöses vid ett intervall som definieras av lösning av systemklockan om egenskapen intervall är mindre än lösning av systemklockan.</xref:System.Timers.Timer.Elapsed> I följande exempel anger egenskapen intervall till 5 millisekunder. När det körs på en [!INCLUDE[win7](~/add/includes/win7-md.md)] system vars systemklockan har en upplösning på ungefär 15 millisekunder händelsen utlöses ungefär var 15: e millisekund i stället för varje 5 millisekunder.       [!code-cs[System.Timers.Timer.Interval#1](~/add/codesnippet/csharp/p-system.timers.timer.in_1.cs)][!code-vb[System.Timers.Timer.Interval#1](~/add/codesnippet/visualbasic/p-system.timers.timer.in_1.vb) ] du kan använda följande kod för att fastställa en lösning med systemklockan på systemets aktuella: [!code-cs [System.Timers.Timer.Interval#2](~/add/codesnippet/csharp/p-system.timers.timer.in_2.cs)][!code-vb[System.Timers.Timer.Interval#2](~/add/codesnippet/visualbasic/p-system.timers.timer.in_2.vb) ] om din app kräver högre upplösning än som erbjuds av den <xref:System.Timers.Timer>klass eller systemklockan, använda högupplösta multimedia timers, se [så här: använda högupplösningsbläckbehållaren timern](http://msdn.microsoft.com/library/aa964692.aspx).</xref:System.Timers.Timer>           Om intervallet anges efter den <xref:System.Timers.Timer>har startats nollställs.</xref:System.Timers.Timer> Om du anger intervallet till 5 sekunder och sedan ange till exempel den <xref:System.Timers.Timer.Enabled%2A>egenskapen `true`, antalet startar när <xref:System.Timers.Timer.Enabled%2A>har angetts.</xref:System.Timers.Timer.Enabled%2A> </xref:System.Timers.Timer.Enabled%2A> Om du återställer intervallet till 10 sekunder när antalet är 3 sekunder i <xref:System.Timers.Timer.Elapsed>händelsen utlöses för första gången 13 sekunder efter <xref:System.Timers.Timer.Enabled%2A>har ställts in på `true`.</xref:System.Timers.Timer.Enabled%2A> </xref:System.Timers.Timer.Elapsed>       Om <xref:System.Timers.Timer.Enabled%2A>är inställd på `true` och <xref:System.Timers.Timer.AutoReset%2A>är inställd på `false`, <xref:System.Timers.Timer>genererar den <xref:System.Timers.Timer.Elapsed>händelsen när först tidsintervall långa.</xref:System.Timers.Timer.Elapsed> </xref:System.Timers.Timer> </xref:System.Timers.Timer.AutoReset%2A> </xref:System.Timers.Timer.Enabled%2A> <xref:System.Timers.Timer.Enabled%2A>sedan är inställd på `false`.</xref:System.Timers.Timer.Enabled%2A>      > [!NOTE] > Om <xref:System.Timers.Timer.Enabled%2A>och <xref:System.Timers.Timer.AutoReset%2A>båda är inställda på `false`, och timern har tidigare har aktiverats, ställa in intervall för egenskapen orsaker i <xref:System.Timers.Timer.Elapsed>händelse ska uppstå en gång, som om den <xref:System.Timers.Timer.Enabled%2A>egenskapen har angetts `true`.</xref:System.Timers.Timer.Enabled%2A> </xref:System.Timers.Timer.Elapsed> </xref:System.Timers.Timer.AutoReset%2A> </xref:System.Timers.Timer.Enabled%2A> Om du vill ange intervallet utan att händelsen kan du tillfälligt ange den <xref:System.Timers.Timer.Enabled%2A>egenskapen `true`, ange egenskapen intervall för önskat tidsintervall och ange sedan omedelbart den <xref:System.Timers.Timer.Enabled%2A>egenskapen tillbaka till `false`.</xref:System.Timers.Timer.Enabled%2A> </xref:System.Timers.Timer.Enabled%2A>"
  example:
  - "The following example instantiates a <xref:System.Timers.Timer> object that fires its <xref:System.Timers.Timer.Elapsed?displayProperty=fullName> event every two seconds (2000 milliseconds), sets up an event handler for the event, and starts the timer. The event handler displays the value of the <xref:System.Timers.ElapsedEventArgs.SignalTime%2A?displayProperty=fullName> property each time it is raised.  \n  \n [!code-cpp[System.Timers.Timer#1](~/add/codesnippet/cpp/p-system.timers.timer.in_3.cpp)]\n [!code-cs[System.Timers.Timer#1](~/add/codesnippet/csharp/p-system.timers.timer.in_3.cs)]\n [!code-vb[System.Timers.Timer#1](~/add/codesnippet/visualbasic/p-system.timers.timer.in_3.vb)]"
  syntax:
    content: public double Interval { get; set; }
    return:
      type: System.Double
      description: "Tid i millisekunder, mellan <xref href=&quot;System.Timers.Timer.Elapsed&quot;> </xref> händelser. Värdet måste vara större än noll och mindre än eller lika med &lt;xref:System.Int32.MaxValue?displayProperty=fullName&gt;. Standardvärdet är 100 millisekunder."
  overload: System.Timers.Timer.Interval*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Intervallet är mindre än eller lika med noll.       - eller - intervallet är större än &lt;xref:System.Int32.MaxValue?displayProperty=fullName&gt;, och timern har aktiverats. (Om timern inte är för närvarande aktiverad, ingen undantag förrän den aktiveras.)"
  platform:
  - net462
- uid: System.Timers.Timer.Site
  id: Site
  parent: System.Timers.Timer
  langs:
  - csharp
  name: Site
  nameWithType: Timer.Site
  fullName: System.Timers.Timer.Site
  type: Property
  assemblies:
  - System
  namespace: System.Timers
  summary: "Hämtar eller anger den plats som binder den <xref href=&quot;System.Timers.Timer&quot;> </xref> till dess behållare i designläge."
  remarks: "Platser binda ett <xref:System.ComponentModel.Component>till en <xref:System.ComponentModel.Container>och aktivera kommunikation mellan dem, samt att tillhandahålla ett sätt för behållaren att hantera dess komponenter.</xref:System.ComponentModel.Container> </xref:System.ComponentModel.Component>"
  syntax:
    content: public override System.ComponentModel.ISite Site { get; set; }
    return:
      type: System.ComponentModel.ISite
      description: "En <xref href=&quot;System.ComponentModel.ISite&quot;> </xref> gränssnitt som representerar den plats som binder den <xref href=&quot;System.Timers.Timer&quot;> </xref> objekt till dess behållare."
  overload: System.Timers.Timer.Site*
  exceptions: []
  platform:
  - net462
- uid: System.Timers.Timer.Start
  id: Start
  parent: System.Timers.Timer
  langs:
  - csharp
  name: Start()
  nameWithType: Timer.Start()
  fullName: System.Timers.Timer.Start()
  type: Method
  assemblies:
  - System
  namespace: System.Timers
  summary: "Startar höja den <xref href=&quot;System.Timers.Timer.Elapsed&quot;> </xref> händelsen genom att ange <xref:System.Timers.Timer.Enabled*>till <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>.</xref:System.Timers.Timer.Enabled*>"
  remarks: "Om Start anropas och <xref:System.Timers.Timer.AutoReset%2A>är inställd på `false`, <xref:System.Timers.Timer>genererar den <xref:System.Timers.Timer.Elapsed>händelsen när först tidsintervall långa.</xref:System.Timers.Timer.Elapsed> </xref:System.Timers.Timer> </xref:System.Timers.Timer.AutoReset%2A> Om Start anropas och <xref:System.Timers.Timer.AutoReset%2A>är `true`, <xref:System.Timers.Timer>genererar den <xref:System.Timers.Timer.Elapsed>första händelsetid intervallet långa och fortsätter att öka händelsen på det angivna intervallet.</xref:System.Timers.Timer.Elapsed> </xref:System.Timers.Timer> </xref:System.Timers.Timer.AutoReset%2A>       Du kan också starta tidsinställning genom att ange <xref:System.Timers.Timer.Enabled%2A>till `true`.</xref:System.Timers.Timer.Enabled%2A>      > [!NOTE] > Om <xref:System.Timers.Timer.AutoReset%2A>är `false`, Start-metod måste anropas för att starta beräkningen igen.</xref:System.Timers.Timer.AutoReset%2A>       Ett anrop till metoden Start när timern aktiveras har ingen effekt."
  syntax:
    content: public void Start ();
    parameters: []
  overload: System.Timers.Timer.Start*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "Den <xref href=&quot;System.Timers.Timer&quot;> </xref> har skapats med ett intervall som är lika med eller större än &lt;xref:System.Int32.MaxValue?displayProperty=fullName&gt; + 1 eller ange ett intervall som är mindre än noll."
  platform:
  - net462
- uid: System.Timers.Timer.Stop
  id: Stop
  parent: System.Timers.Timer
  langs:
  - csharp
  name: Stop()
  nameWithType: Timer.Stop()
  fullName: System.Timers.Timer.Stop()
  type: Method
  assemblies:
  - System
  namespace: System.Timers
  summary: "Stoppar höja den <xref href=&quot;System.Timers.Timer.Elapsed&quot;> </xref> händelsen genom att ange <xref:System.Timers.Timer.Enabled*>till <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>.</xref:System.Timers.Timer.Enabled*>"
  remarks: "Du kan också avbryta tidsinställning genom att ange <xref:System.Timers.Timer.Enabled%2A>till `false`.</xref:System.Timers.Timer.Enabled%2A>      > [!NOTE] > Signal att öka den <xref:System.Timers.Timer.Elapsed>händelse är alltid i kö för körning på en <xref:System.Threading.ThreadPool>tråden så att metoden händelsehantering kan köra på en tråd samtidigt som ett anrop till metoden Stop körs på en annan tråd.</xref:System.Threading.ThreadPool> </xref:System.Timers.Timer.Elapsed> Detta kan resultera i den <xref:System.Timers.Timer.Elapsed>händelse som aktiveras efter att Stop-metoden anropas.</xref:System.Timers.Timer.Elapsed> Kodexempel i nästa avsnitt visas ett sätt att komma runt detta konkurrenstillstånd."
  example:
  - "The following example instantiates a `System.Timers.Timer` object that fires its <xref:System.Timers.Timer.Elapsed?displayProperty=fullName> event every two seconds (2,000 milliseconds), sets up an event handler for the  event, and starts the timer. The event handler displays the value of the <xref:System.Timers.ElapsedEventArgs.SignalTime%2A?displayProperty=fullName> property each time it is raised. When the user presses the Enter key, the application calls the  Stop method before terminating the application.  \n  \n [!code-cs[System.Timers.Timer#2](~/add/codesnippet/csharp/m-system.timers.timer.stop_1.cs)]\n [!code-vb[System.Timers.Timer#2](~/add/codesnippet/visualbasic/m-system.timers.timer.stop_1.vb)]  \n  \n The following code example shows one way to prevent the thread that calls the Stop method from continuing until a currently executing <xref:System.Timers.Timer.Elapsed> event ends, and also to prevent two <xref:System.Timers.Timer.Elapsed> events from executing the event handler at the same time (often referred to as reentrancy).  \n  \n The example executes 100 test runs. Each time the test is run, the timer is started with an interval of 150 milliseconds. The event handler uses the <xref:System.Threading.Thread.Sleep%2A?displayProperty=fullName> method to simulate a task that randomly varies in length from 50 to 200 milliseconds. The test method also starts a control thread that waits for a second and then stops the timer. If an event is being handled when the control thread stops the timer, the control thread must wait until the event is finished before proceeding.  \n  \n The <xref:System.Threading.Interlocked.CompareExchange%28System.Int32%40%2CSystem.Int32%2CSystem.Int32%29?displayProperty=fullName> method overload is used to avoid reentrancy and to prevent the control thread from continuing until an executing event ends. The event handler uses the <xref:System.Threading.Interlocked.CompareExchange%28System.Int32%40%2CSystem.Int32%2CSystem.Int32%29> method to set a control variable to 1, but only if the value is currently zero. This is an atomic operation. If the return value is zero, the control variable has been set to 1 and the event handler proceeds. If the return value is non-zero, the event is simply discarded to avoid reentrancy. (If it were necessary to execute every event, the <xref:System.Threading.Monitor> class would be a better way to synchronize the events.) When the event handler ends, it sets the control variable back to zero. The example records the total number of events that executed, that were discarded because of reentrancy, and that occurred after the Stop method was called.  \n  \n The control thread uses the <xref:System.Threading.Interlocked.CompareExchange%28System.Int32%40%2CSystem.Int32%2CSystem.Int32%29> method to set the control variable to -1 (minus one), but only if the value is currently zero. If the atomic operation returns non-zero, an event is currently executing. The control thread waits and tries again. The example records the number of times the control thread had to wait for an event to finish.  \n  \n [!code-cs[Timer.Stop#1](~/add/codesnippet/csharp/m-system.timers.timer.stop_2.cs)]\n [!code-vb[Timer.Stop#1](~/add/codesnippet/visualbasic/m-system.timers.timer.stop_2.vb)]"
  syntax:
    content: public void Stop ();
    parameters: []
  overload: System.Timers.Timer.Stop*
  exceptions: []
  platform:
  - net462
- uid: System.Timers.Timer.SynchronizingObject
  id: SynchronizingObject
  parent: System.Timers.Timer
  langs:
  - csharp
  name: SynchronizingObject
  nameWithType: Timer.SynchronizingObject
  fullName: System.Timers.Timer.SynchronizingObject
  type: Property
  assemblies:
  - System
  namespace: System.Timers
  summary: "Hämtar eller anger det objekt som används för att konvertera händelsehanteraren anrop som utfärdas när ett intervall har förflutit."
  remarks: "När SynchronizingObject är `null`, metoden som hanterar den <xref:System.Timers.Timer.Elapsed>händelse anropas på en tråd från system-trådpoolen.</xref:System.Timers.Timer.Elapsed> Mer information om system-tråd pooler finns <xref:System.Threading.ThreadPool>.</xref:System.Threading.ThreadPool>       När den <xref:System.Timers.Timer.Elapsed>händelsen hanterats av en visual Windows Forms-komponenten, till exempel en knapp och ansluter till komponenten via system-trådpoolen resultatet i ett undantag eller bara kanske inte fungerar.</xref:System.Timers.Timer.Elapsed> Undvik detta genom att ange SynchronizingObject till en Windows Forms-komponent, vilket gör att metoden som hanterar den <xref:System.Timers.Timer.Elapsed>händelse anropas på samma tråd som komponenten som skapades på.</xref:System.Timers.Timer.Elapsed>      > [!NOTE] > Även om egenskapen SynchronizingObject inte är `null`, <xref:System.Timers.Timer.Elapsed>händelser efter den <xref:System.Timers.Timer.Dispose%2A>eller <xref:System.Timers.Timer.Stop%2A>metoden har anropats eller efter den <xref:System.Timers.Timer.Enabled%2A>egenskapen har angetts `false`eftersom signalen att öka den <xref:System.Timers.Timer.Elapsed>händelse är alltid i kö för körning på en tråd pooltråd.</xref:System.Timers.Timer.Elapsed> </xref:System.Timers.Timer.Enabled%2A> </xref:System.Timers.Timer.Stop%2A> </xref:System.Timers.Timer.Dispose%2A> </xref:System.Timers.Timer.Elapsed> Ett sätt att lösa det här konkurrenstillstånd är att ange en flagga som anger händelsehanteraren för den <xref:System.Timers.Timer.Elapsed>händelse att ignorera efterföljande händelser.</xref:System.Timers.Timer.Elapsed>       Om den <xref:System.Timers.Timer>är används i Visual Studio i en Windows Forms-designer SynchronizingObject anges automatiskt till den kontroll som innehåller <xref:System.Timers.Timer>.</xref:System.Timers.Timer> </xref:System.Timers.Timer> Till exempel om du placerar en <xref:System.Timers.Timer>på en designer för `Form1` (som ärver från <xref:System.Windows.Forms.Form>), egenskapen SynchronizingObject för <xref:System.Timers.Timer>är inställd på instansen av `Form1`.</xref:System.Timers.Timer> </xref:System.Windows.Forms.Form> </xref:System.Timers.Timer>"
  example:
  - "The following example is a Windows Forms app that serves as a very simple text file editor. When the text in the text box has not been saved, the app asks the user at one-minute intervals whether he or she wants to save the contents of the text box.  To do this, the <xref:System.Timers.Timer.Interval%2A> property is set to one minute (60,000 milliseconds), and the SynchronizingObject property is set to the <xref:System.Windows.Forms.Form> object.  \n  \n [!code-cs[System.Timers.Timer.SynchronizingObject#1](~/add/codesnippet/csharp/SynchronizingObjectCS1/Form1.cs#1)]\n [!code-vb[System.Timers.Timer.SynchronizingObject#1](~/add/codesnippet/visualbasic/SynchronizingObjectVB1/Form1.vb#1)]  \n  \n The example requires that you add the following controls to the form:  \n  \n-   A <xref:System.Windows.Forms.TextBox> control named `TextBox1` (its default name).  \n  \n-   A <xref:System.Windows.Forms.Button> control named `Button1` (its default name).  \n  \n-   A <xref:System.Windows.Forms.SaveFileDialog> control named `SaveSaveFileDialog1` (its default name) ."
  syntax:
    content: public System.ComponentModel.ISynchronizeInvoke SynchronizingObject { get; set; }
    return:
      type: System.ComponentModel.ISynchronizeInvoke
      description: "Den <xref href=&quot;System.ComponentModel.ISynchronizeInvoke&quot;> </xref> som representerar den används för att konvertera händelsehanteraren anrop som utfärdas när ett intervall har förflutit. Standardvärdet är <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  overload: System.Timers.Timer.SynchronizingObject*
  exceptions: []
  platform:
  - net462
references:
- uid: System.ComponentModel.Component
  isExternal: false
  name: System.ComponentModel.Component
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.ObjectDisposedException
  isExternal: true
  name: System.ObjectDisposedException
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.Timers.Timer.#ctor
  parent: System.Timers.Timer
  isExternal: false
  name: Timer()
  nameWithType: Timer.Timer()
  fullName: System.Timers.Timer.Timer()
- uid: System.Timers.Timer.#ctor(System.Double)
  parent: System.Timers.Timer
  isExternal: false
  name: Timer(Double)
  nameWithType: Timer.Timer(Double)
  fullName: System.Timers.Timer.Timer(Double)
- uid: System.Double
  parent: System
  isExternal: true
  name: Double
  nameWithType: Double
  fullName: System.Double
- uid: System.Timers.Timer.AutoReset
  parent: System.Timers.Timer
  isExternal: false
  name: AutoReset
  nameWithType: Timer.AutoReset
  fullName: System.Timers.Timer.AutoReset
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Timers.Timer.BeginInit
  parent: System.Timers.Timer
  isExternal: false
  name: BeginInit()
  nameWithType: Timer.BeginInit()
  fullName: System.Timers.Timer.BeginInit()
- uid: System.Timers.Timer.Close
  parent: System.Timers.Timer
  isExternal: false
  name: Close()
  nameWithType: Timer.Close()
  fullName: System.Timers.Timer.Close()
- uid: System.Timers.Timer.Dispose(System.Boolean)
  parent: System.Timers.Timer
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: Timer.Dispose(Boolean)
  fullName: System.Timers.Timer.Dispose(Boolean)
- uid: System.Timers.Timer.Elapsed
  parent: System.Timers.Timer
  isExternal: false
  name: Elapsed
  nameWithType: Timer.Elapsed
  fullName: System.Timers.Timer.Elapsed
- uid: System.Timers.ElapsedEventHandler
  parent: System.Timers
  isExternal: false
  name: ElapsedEventHandler
  nameWithType: ElapsedEventHandler
  fullName: System.Timers.ElapsedEventHandler
- uid: System.Timers.Timer.Enabled
  parent: System.Timers.Timer
  isExternal: false
  name: Enabled
  nameWithType: Timer.Enabled
  fullName: System.Timers.Timer.Enabled
- uid: System.Timers.Timer.EndInit
  parent: System.Timers.Timer
  isExternal: false
  name: EndInit()
  nameWithType: Timer.EndInit()
  fullName: System.Timers.Timer.EndInit()
- uid: System.Timers.Timer.Interval
  parent: System.Timers.Timer
  isExternal: false
  name: Interval
  nameWithType: Timer.Interval
  fullName: System.Timers.Timer.Interval
- uid: System.Timers.Timer.Site
  parent: System.Timers.Timer
  isExternal: false
  name: Site
  nameWithType: Timer.Site
  fullName: System.Timers.Timer.Site
- uid: System.ComponentModel.ISite
  parent: System.ComponentModel
  isExternal: false
  name: ISite
  nameWithType: ISite
  fullName: System.ComponentModel.ISite
- uid: System.Timers.Timer.Start
  parent: System.Timers.Timer
  isExternal: false
  name: Start()
  nameWithType: Timer.Start()
  fullName: System.Timers.Timer.Start()
- uid: System.Timers.Timer.Stop
  parent: System.Timers.Timer
  isExternal: false
  name: Stop()
  nameWithType: Timer.Stop()
  fullName: System.Timers.Timer.Stop()
- uid: System.Timers.Timer.SynchronizingObject
  parent: System.Timers.Timer
  isExternal: false
  name: SynchronizingObject
  nameWithType: Timer.SynchronizingObject
  fullName: System.Timers.Timer.SynchronizingObject
- uid: System.ComponentModel.ISynchronizeInvoke
  parent: System.ComponentModel
  isExternal: false
  name: ISynchronizeInvoke
  nameWithType: ISynchronizeInvoke
  fullName: System.ComponentModel.ISynchronizeInvoke
- uid: System.Timers.Timer.#ctor*
  parent: System.Timers.Timer
  isExternal: false
  name: Timer
  nameWithType: Timer.Timer
- uid: System.Timers.Timer.AutoReset*
  parent: System.Timers.Timer
  isExternal: false
  name: AutoReset
  nameWithType: Timer.AutoReset
- uid: System.Timers.Timer.BeginInit*
  parent: System.Timers.Timer
  isExternal: false
  name: BeginInit
  nameWithType: Timer.BeginInit
- uid: System.Timers.Timer.Close*
  parent: System.Timers.Timer
  isExternal: false
  name: Close
  nameWithType: Timer.Close
- uid: System.Timers.Timer.Dispose*
  parent: System.Timers.Timer
  isExternal: false
  name: Dispose
  nameWithType: Timer.Dispose
- uid: System.Timers.Timer.Enabled*
  parent: System.Timers.Timer
  isExternal: false
  name: Enabled
  nameWithType: Timer.Enabled
- uid: System.Timers.Timer.EndInit*
  parent: System.Timers.Timer
  isExternal: false
  name: EndInit
  nameWithType: Timer.EndInit
- uid: System.Timers.Timer.Interval*
  parent: System.Timers.Timer
  isExternal: false
  name: Interval
  nameWithType: Timer.Interval
- uid: System.Timers.Timer.Site*
  parent: System.Timers.Timer
  isExternal: false
  name: Site
  nameWithType: Timer.Site
- uid: System.Timers.Timer.Start*
  parent: System.Timers.Timer
  isExternal: false
  name: Start
  nameWithType: Timer.Start
- uid: System.Timers.Timer.Stop*
  parent: System.Timers.Timer
  isExternal: false
  name: Stop
  nameWithType: Timer.Stop
- uid: System.Timers.Timer.SynchronizingObject*
  parent: System.Timers.Timer
  isExternal: false
  name: SynchronizingObject
  nameWithType: Timer.SynchronizingObject
