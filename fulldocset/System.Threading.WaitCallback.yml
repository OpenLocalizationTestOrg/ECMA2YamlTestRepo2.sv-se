### YamlMime:ManagedReference
items:
- uid: System.Threading.WaitCallback
  id: WaitCallback
  langs:
  - csharp
  name: WaitCallback
  nameWithType: WaitCallback
  fullName: System.Threading.WaitCallback
  type: Delegate
  summary: "Representerar en metod som ska utföras av en tråd pooltråd."
  remarks: "WaitCallback representerar en metod som du vill köra på en <xref:System.Threading.ThreadPool>tråd.</xref:System.Threading.ThreadPool> Skapa delegaten genom att skicka din Återanropsmetoden till konstruktorn WaitCallback. Din metod måste ha signatur som visas här.       Kö för körning av uppgiften genom att skicka WaitCallback delegaten till <xref:System.Threading.ThreadPool.QueueUserWorkItem%2A?displayProperty=fullName>.</xref:System.Threading.ThreadPool.QueueUserWorkItem%2A?displayProperty=fullName> Din metod körs när en tråd pooltråd blir tillgänglig.      > [!NOTE] > Visual Basic-användare kan utelämna konstruktorn WaitCallback och bara använda den `AddressOf` operatorn vid övergång Återanropsmetoden till <xref:System.Threading.ThreadPool.QueueUserWorkItem%2A>.</xref:System.Threading.ThreadPool.QueueUserWorkItem%2A> Visual Basic anropar automatiskt rätt delegatkonstruktor.       Om du vill skicka information till din Återanropsmetoden skapar ett objekt som innehåller information som krävs och skickar den till <xref:System.Threading.ThreadPool.QueueUserWorkItem%2A>när du kö för körning av uppgiften.</xref:System.Threading.ThreadPool.QueueUserWorkItem%2A> Varje gång som din Återanropsmetoden kör den `state` parametern innehåller det här objektet.       Mer information om hur du använder återanrop för att synkronisera tråd pool trådar finns [trådpoolen för den hanterade](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "This section contains two examples. The first example demonstrates how you can queue a simple task for execution by the thread pool.  \n  \n The second example demonstrates how you can queue a task and pass information to it.  \n  \n **Example 1**  \n  \n This example shows how to use the WaitCallback delegate to queue a task for execution by the thread pool. The code example uses the <xref:System.Threading.ThreadPool.QueueUserWorkItem%28System.Threading.WaitCallback%29?displayProperty=fullName> method overload to queue a task, which is represented by a WaitCallback that wraps the `ThreadProc` method, to execute when a thread becomes available. No task information is supplied with this overload. Therefore, the information that is available to the `ThreadProc` method is limited to the object the method belongs to.  \n  \n [!code-cpp[System.Threading.ThreadPool QueueUserWorkItem0#1](~/add/codesnippet/cpp/t-system.threading.waitc_1.cpp)]\n [!code-vb[System.Threading.ThreadPool QueueUserWorkItem0#1](~/add/codesnippet/visualbasic/t-system.threading.waitc_1.vb)]\n [!code-cs[System.Threading.ThreadPool QueueUserWorkItem0#1](~/add/codesnippet/csharp/t-system.threading.waitc_1.cs)]  \n  \n **Example 2**  \n  \n This example shows how to create an object that contains task information. It also demonstrates how to pass that object to a task that is queued for execution by the thread pool.  \n  \n [!code-cpp[System.Threading.ThreadPool QueueUserWorkItem1#1](~/add/codesnippet/cpp/t-system.threading.waitc_2.cpp)]\n [!code-cs[System.Threading.ThreadPool QueueUserWorkItem1#1](~/add/codesnippet/csharp/t-system.threading.waitc_2.cs)]\n [!code-vb[System.Threading.ThreadPool QueueUserWorkItem1#1](~/add/codesnippet/visualbasic/t-system.threading.waitc_2.vb)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public delegate void WaitCallback(object state);
  inheritance:
  - System.Delegate
  platform:
  - net462
references:
- uid: System.Delegate
  isExternal: false
  name: System.Delegate
