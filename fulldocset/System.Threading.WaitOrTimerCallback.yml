### YamlMime:ManagedReference
items:
- uid: System.Threading.WaitOrTimerCallback
  id: WaitOrTimerCallback
  langs:
  - csharp
  name: WaitOrTimerCallback
  nameWithType: WaitOrTimerCallback
  fullName: System.Threading.WaitOrTimerCallback
  type: Delegate
  summary: "Representerar en metod som ska anropas när en <xref:System.Threading.WaitHandle>signal eller timeout.</xref:System.Threading.WaitHandle>"
  remarks: "WaitOrTimerCallback representerar en metod som du vill köra när en registrerad väntereferens timeout eller signal. Skapa delegaten genom att skicka din Återanropsmetoden till konstruktorn WaitOrTimerCallback. Din metod måste ha signatur som visas här.       Skapa registrerade väntereferens genom att skicka WaitOrTimerCallback ombudet och en <xref:System.Threading.WaitHandle>för <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A?displayProperty=fullName>.</xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A?displayProperty=fullName> </xref:System.Threading.WaitHandle> Din metod körs varje gång den <xref:System.Threading.WaitHandle>timeout eller signaleras.</xref:System.Threading.WaitHandle>       [Visual Basic] > [!NOTE] > Visual Basic-användare kan utelämna konstruktorn WaitOrTimerCallback och bara använda den `AddressOf` operatorn vid övergång Återanropsmetoden till <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A>.</xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> Visual Basic anropar automatiskt rätt delegatkonstruktor.       Om du vill skicka information till din Återanropsmetoden skapar ett objekt som innehåller information som krävs och skickar den till <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A>när du skapar den registrerade väntereferens.</xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> Varje gång som din Återanropsmetoden kör den `state` parametern innehåller det här objektet.       Mer information om hur du använder callback-metoder för att synkronisera tråd pool trådar finns [trådpoolen för den hanterade](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following example shows how to use the WaitOrTimerCallback delegate to represent a callback method that is executed when a wait handle is signaled.  \n  \n The example also shows how to use the <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> method to execute a specified callback method when a specified wait handle is signaled. In this example, the callback method is `WaitProc` and the wait handle is an <xref:System.Threading.AutoResetEvent>.  \n  \n The example defines a `TaskInfo` class to hold the information that is passed to the callback when it executes. The example creates a `TaskInfo` object and assigns it some string data. The <xref:System.Threading.RegisteredWaitHandle> that is returned by the <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> method is assigned to the `Handle` field of the `TaskInfo` object, so that the callback method has access to the <xref:System.Threading.RegisteredWaitHandle>.  \n  \n In addition to the `TaskInfo` object, the call to the <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> method specifies the <xref:System.Threading.AutoResetEvent> the task waits on, a WaitOrTimerCallback delegate that represents the `WaitProc` callback method, a one-second timeout interval, and multiple callbacks.  \n  \n When the main thread signals the <xref:System.Threading.AutoResetEvent> by calling its <xref:System.Threading.EventWaitHandle.Set%2A> method, the WaitOrTimerCallback delegate is invoked. The `WaitProc` method tests <xref:System.Threading.RegisteredWaitHandle> to determine whether a timeout occurred. If the callback was invoked because the wait handle was signaled, the `WaitProc` method unregisters the <xref:System.Threading.RegisteredWaitHandle>, stopping further callbacks. In the case of a timeout, the task continues waiting. The `WaitProc` method ends by printing a message to the console.  \n  \n [!code-cs[System.Threading.ThreadPool RegisterWaitForSingleObject0#1](~/add/codesnippet/csharp/t-system.threading.waito_1.cs)]\n [!code-cpp[System.Threading.ThreadPool RegisterWaitForSingleObject0#1](~/add/codesnippet/cpp/t-system.threading.waito_1.cpp)]\n [!code-vb[System.Threading.ThreadPool RegisterWaitForSingleObject0#1](~/add/codesnippet/visualbasic/t-system.threading.waito_1.vb)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public delegate void WaitOrTimerCallback(object state, bool timedOut);
  inheritance:
  - System.Delegate
  platform:
  - net462
references:
- uid: System.Delegate
  isExternal: false
  name: System.Delegate
