### YamlMime:ManagedReference
items:
- uid: System.Data.IDataAdapter
  id: IDataAdapter
  children:
  - System.Data.IDataAdapter.Fill(System.Data.DataSet)
  - System.Data.IDataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType)
  - System.Data.IDataAdapter.GetFillParameters
  - System.Data.IDataAdapter.MissingMappingAction
  - System.Data.IDataAdapter.MissingSchemaAction
  - System.Data.IDataAdapter.TableMappings
  - System.Data.IDataAdapter.Update(System.Data.DataSet)
  langs:
  - csharp
  name: IDataAdapter
  nameWithType: IDataAdapter
  fullName: System.Data.IDataAdapter
  type: Interface
  summary: "Tillåter ett objekt för att implementera en DataAdapter och representerar en uppsättning metoder och mappningen åtgärd-relaterade egenskaper som används för att fylla och uppdatera en <xref href=&quot;System.Data.DataSet&quot;> </xref> och uppdatera en datakälla.       <xref href=&quot;System.Data.IDbDataAdapter&quot;></xref>instanserna är för datakällor som (eller likna) relationsdatabaser med textrepresentation kommandon (t.ex. [!INCLUDE[tsql](~/add/includes/tsql-md.md)]), medan IDataAdapter instanser kan kan använda någon typ av datakälla."
  remarks: "Gränssnittet IDataAdapter tillåter en ärvande klass att implementera en DataAdapter-klass som representerar bryggan mellan en datakälla och <xref:System.Data.DataSet>.</xref:System.Data.DataSet> Mer information om DataAdapter-klasserna finns [fylla en datamängd från en DataAdapter](~/add/includes/ajax-current-ext-md.md).       Ett program skapa inte en instans av gränssnittet IDataAdapter direkt, men implementerar en instans av en klass som ärver IDataAdapter.       Klasser som ärver IDataAdapter måste implementera ärvda medlemmar och de vanligtvis definiera ytterligare medlemmar för att lägga till provider-specifik funktion. Till exempel IDataAdapter-gränssnittet definierar en <xref:System.Data.IDataAdapter.Fill%2A>metod som tar en <xref:System.Data.DataSet>som en parameter.</xref:System.Data.DataSet> </xref:System.Data.IDataAdapter.Fill%2A> I sin tur den <xref:System.Data.OleDb.OleDbDataAdapter>klassen ärver den <xref:System.Data.Common.DbDataAdapter.Fill%2A>metoden och definierar också två ytterligare överlagringar av den <xref:System.Data.OleDb.OleDbDataAdapter.Fill%2A>metod som tar ett ADO-postuppsättning-objekt som en parameter.</xref:System.Data.OleDb.OleDbDataAdapter.Fill%2A> </xref:System.Data.Common.DbDataAdapter.Fill%2A> </xref:System.Data.OleDb.OleDbDataAdapter>"
  example:
  - "The following example uses the derived classes, <xref:System.Data.SqlClient.SqlCommand>, <xref:System.Data.SqlClient.SqlDataAdapter>, and <xref:System.Data.SqlClient.SqlConnection>, to select records from a database. The filled <xref:System.Data.DataSet> is then returned. To do this, the method is passed an initialized <xref:System.Data.DataSet>, a connection string, and a query string that is a Transact-SQL SELECT statement.  \n  \n [!code-vb[Classic WebData SqlDataAdapter Example#1](~/add/codesnippet/visualbasic/t-system.data.idataadapter_1.vb)]\n [!code-cs[Classic WebData SqlDataAdapter Example#1](~/add/codesnippet/csharp/t-system.data.idataadapter_1.cs)]"
  syntax:
    content: public interface IDataAdapter
  implements: []
  platform:
  - net462
- uid: System.Data.IDataAdapter.Fill(System.Data.DataSet)
  id: Fill(System.Data.DataSet)
  parent: System.Data.IDataAdapter
  langs:
  - csharp
  name: Fill(DataSet)
  nameWithType: IDataAdapter.Fill(DataSet)
  fullName: System.Data.IDataAdapter.Fill(DataSet)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Lägger till eller uppdaterar rader i den <xref href=&quot;System.Data.DataSet&quot;> </xref> som matchar de som finns i datakällan med den <xref href=&quot;System.Data.DataSet&quot;> </xref> namn och skapar en <xref href=&quot;System.Data.DataTable&quot;> </xref> med namnet &quot;Table&quot;."
  remarks: "Fill hämtar rader från datakällan med instruktionen SELECT som anges av en associerad <xref:System.Data.IDbDataAdapter.SelectCommand%2A>egenskap.</xref:System.Data.IDbDataAdapter.SelectCommand%2A> Det anslutningsobjekt som är associerade med SELECT-instruktionen måste vara giltig, men behöver inte vara öppen. Om anslutningen är stängd innan Fill anropas är öppna för att hämta data, därefter stängd. Om anslutningen är öppen innan Fill anropas, förblir den öppen.       Åtgärden Fyll sedan lägger till rader till mål <xref:System.Data.DataTable>objekt i den <xref:System.Data.DataSet>, skapar den <xref:System.Data.DataTable>objekt om de inte redan finns.</xref:System.Data.DataTable> </xref:System.Data.DataSet> </xref:System.Data.DataTable> När du skapar <xref:System.Data.DataTable>objekt, Fill åtgärden skapar vanligtvis endast namnet kolumnmetadata.</xref:System.Data.DataTable> Men om den <xref:System.Data.IDataAdapter.MissingSchemaAction%2A>egenskap är inställd på `AddWithKey`, skapas också lämpliga primära nycklar och begränsningar.</xref:System.Data.IDataAdapter.MissingSchemaAction%2A>       Om den `SelectCommand` returnerar resultatet av en yttre koppling av `DataAdapter` inte anger ett <xref:System.Data.DataTable.PrimaryKey%2A>värde för den resulterande <xref:System.Data.DataTable>.</xref:System.Data.DataTable> </xref:System.Data.DataTable.PrimaryKey%2A> Du måste uttryckligen definiera den primära nyckeln för att säkerställa att dubblettrader matcha korrekt. Mer information finns i [definierar primärnycklar](~/add/includes/ajax-current-ext-md.md).       Om den <xref:System.Data.IDataAdapter>möten duplicerade kolumner medan en <xref:System.Data.DataTable>, det genererar namn för efterföljande kolumner med mönstret &quot;columnname1&quot;, &quot;columnname2&quot;, &quot;columnname3&quot; och så vidare.</xref:System.Data.DataTable> </xref:System.Data.IDataAdapter> Om inkommande data innehåller icke namngivna kolumner, placeras de i den <xref:System.Data.DataSet>enligt mönstret &quot;Kolumn1&quot;, &quot;Kolumn2&quot; och så vidare.</xref:System.Data.DataSet> När flera resultatmängder läggs till i <xref:System.Data.DataSet>, varje resultatuppsättningen placeras i separata tabeller.</xref:System.Data.DataSet> Ytterligare resultatmängder är namngivna genom att integrerad värden till angivna tabellnamnet (till exempel &quot;Table&quot;, &quot;Tabell1&quot;, &quot;Tabell2&quot; och så vidare). Program försiktig när du använder kolumnnamn och tabellnamn så inte sker står i konflikt med dessa namngivning mönster.       När SELECT-uttrycket som används för att fylla i <xref:System.Data.DataSet>returnerar flera resultat, till exempel en batch SQL-instruktionen om en av resultat som innehåller ett fel alla efterföljande resultat hoppas över och inte har lagts till i <xref:System.Data.DataSet>.</xref:System.Data.DataSet> </xref:System.Data.DataSet>       Du kan använda metoden Fill flera gånger i samma <xref:System.Data.DataTable>.</xref:System.Data.DataTable> Om det finns en primärnyckel, slås inkommande rader samman med matchande rader som redan finns. Om det finns ingen primär nyckel, läggs inkommande rader till i <xref:System.Data.DataTable>.</xref:System.Data.DataTable>      > [!NOTE] > Vid hantering av batch SQL-uttryck som kan returnera flera resultat, implementering av Fill och <xref:System.Data.IDataAdapter.FillSchema%2A>för en .NET Framework data provider hämtar schemainformation för endast det första resultatet.</xref:System.Data.IDataAdapter.FillSchema%2A>"
  syntax:
    content: public int Fill (System.Data.DataSet dataSet);
    parameters:
    - id: dataSet
      type: System.Data.DataSet
      description: "En <xref href=&quot;System.Data.DataSet&quot;> </xref> med poster vid behov, schema."
    return:
      type: System.Int32
      description: "Antalet rader har lagts till eller uppdateras i den <xref href=&quot;System.Data.DataSet&quot;> </xref>. Detta inkluderar inte rader som påverkas av instruktioner som inte returnerar rader."
  overload: System.Data.IDataAdapter.Fill*
  exceptions: []
  platform:
  - net462
- uid: System.Data.IDataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType)
  id: FillSchema(System.Data.DataSet,System.Data.SchemaType)
  parent: System.Data.IDataAdapter
  langs:
  - csharp
  name: FillSchema(DataSet,SchemaType)
  nameWithType: IDataAdapter.FillSchema(DataSet,SchemaType)
  fullName: System.Data.IDataAdapter.FillSchema(DataSet,SchemaType)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Lägger till en <xref href=&quot;System.Data.DataTable&quot;> </xref> med namnet &quot;Table&quot; till den angivna <xref href=&quot;System.Data.DataSet&quot;> </xref> och konfigurerar schemat så att den matchar som datakällan baserat på den angivna <xref href=&quot;System.Data.SchemaType&quot;> </xref>."
  remarks: "Metoden FillSchema hämtar schemat från datakällan med hjälp av <xref:System.Data.IDbDataAdapter.SelectCommand%2A>.</xref:System.Data.IDbDataAdapter.SelectCommand%2A> Anslutningsobjektet som är associerade med den <xref:System.Data.IDbDataAdapter.SelectCommand%2A>måste vara giltiga, men behöver inte vara öppen.</xref:System.Data.IDbDataAdapter.SelectCommand%2A> Om anslutningen är stängd innan FillSchema anropas är öppna för att hämta data, därefter stängd. Om anslutningen är öppen innan FillSchema anropas, förblir den öppen.       En åtgärd för FillSchema lägger till en <xref:System.Data.DataTable>till målet <xref:System.Data.DataSet>.</xref:System.Data.DataSet> </xref:System.Data.DataTable> Lägger sedan till kolumner till den <xref:System.Data.DataColumnCollection>av den <xref:System.Data.DataTable>och konfigurerar följande <xref:System.Data.DataColumn>Egenskaper om de finns på datakällan:- <xref:System.Data.DataColumn.AllowDBNull%2A>- <xref:System.Data.DataColumn.AutoIncrement%2A>.</xref:System.Data.DataColumn.AutoIncrement%2A> </xref:System.Data.DataColumn.AllowDBNull%2A> </xref:System.Data.DataColumn> </xref:System.Data.DataTable> </xref:System.Data.DataColumnCollection> Du måste ange <xref:System.Data.DataColumn.AutoIncrementStep%2A>och <xref:System.Data.DataColumn.AutoIncrementSeed%2A>separat.</xref:System.Data.DataColumn.AutoIncrementSeed%2A> </xref:System.Data.DataColumn.AutoIncrementStep%2A>      - <xref:System.Data.DataColumn.MaxLength%2A>- <xref:System.Data.DataColumn.ReadOnly%2A>- <xref:System.Data.DataColumn.Unique%2A>FillSchema konfigureras också på <xref:System.Data.DataTable.PrimaryKey%2A>och <xref:System.Data.DataTable.Constraints%2A>Egenskaper enligt följande regler: – om en eller flera primärnyckelkolumnerna returneras av <xref:System.Data.IDbDataAdapter.SelectCommand%2A>de används som primärnyckelkolumnerna för <xref:System.Data.DataTable>.</xref:System.Data.DataTable> </xref:System.Data.IDbDataAdapter.SelectCommand%2A> </xref:System.Data.DataTable.Constraints%2A> </xref:System.Data.DataTable.PrimaryKey%2A> </xref:System.Data.DataColumn.Unique%2A> </xref:System.Data.DataColumn.ReadOnly%2A> </xref:System.Data.DataColumn.MaxLength%2A>      -Om ingen primärnyckelkolumnerna returneras men unika kolumner, används unika kolumner som den primära nyckeln om alla kolumner som unik är icke-nullbar. Om någon av kolumnerna är null, en <xref:System.Data.UniqueConstraint>läggs till i <xref:System.Data.ConstraintCollection>, men <xref:System.Data.DataTable.PrimaryKey%2A>egenskapen har inte angetts.</xref:System.Data.DataTable.PrimaryKey%2A> </xref:System.Data.ConstraintCollection> </xref:System.Data.UniqueConstraint>      – Om både primär nyckel och unika kolumner returneras används primärnyckelkolumnerna som primärnyckelkolumnerna för <xref:System.Data.DataTable>.</xref:System.Data.DataTable>       Observera att primärnycklar och unika begränsningar läggs till i <xref:System.Data.ConstraintCollection>enligt reglerna som tidigare, men andra villkor läggs inte typer.</xref:System.Data.ConstraintCollection>       Om ett unikt grupperat index har definierats för en kolumn eller kolumner i en tabell med SQL Server och primärnyckelns begränsning har definierats i en separat uppsättning kolumner, och sedan namnen på kolumnerna i det grupperade indexet kommer att returneras. Använda en frågetipset med SELECT-instruktion som anger namnet på det primära nyckelindexet för att returnera namnet eller namnen på de primära nyckelkolumnerna. Mer information om hur du anger frågetips finns [frågetipset (Transact-SQL)](http://msdn.microsoft.com/library/ms181714.aspx).       Om den <xref:System.Data.IDataAdapter>möten duplicerade kolumner medan en <xref:System.Data.DataTable>, det genererar namn för efterföljande kolumner med mönstret &quot;columnname1&quot;, &quot;columnname2&quot;, &quot;columnname3&quot; och så vidare.</xref:System.Data.DataTable> </xref:System.Data.IDataAdapter> Om inkommande data innehåller icke namngivna kolumner, placeras de i den <xref:System.Data.DataSet>enligt mönstret &quot;Kolumn1&quot;, &quot;Kolumn2&quot; och så vidare.</xref:System.Data.DataSet> När flera resultatmängder läggs till i <xref:System.Data.DataSet>, varje resultatuppsättningen placeras i separata tabeller.</xref:System.Data.DataSet> Ytterligare resultatmängder är namngivna genom att integrerad värden till angivna tabellnamnet (till exempel &quot;Table&quot;, &quot;Tabell1&quot;, &quot;Tabell2&quot; och så vidare). Program försiktig när du använder kolumnnamn och tabellnamn så inte sker står i konflikt med dessa namngivning mönster.       FillSchema returnerar inga rader. Använd <xref:System.Data.IDataAdapter.Fill%2A>metoden för att lägga till rader till <xref:System.Data.DataTable>.</xref:System.Data.DataTable> </xref:System.Data.IDataAdapter.Fill%2A>"
  syntax:
    content: public System.Data.DataTable[] FillSchema (System.Data.DataSet dataSet, System.Data.SchemaType schemaType);
    parameters:
    - id: dataSet
      type: System.Data.DataSet
      description: "Den <xref href=&quot;System.Data.DataSet&quot;> </xref> fylls med schemat från datakällan."
    - id: schemaType
      type: System.Data.SchemaType
      description: "En av de <xref href=&quot;System.Data.SchemaType&quot;> </xref> värden."
    return:
      type: System.Data.DataTable[]
      description: "En matris med <xref href=&quot;System.Data.DataTable&quot;> </xref> objekt som innehåller schemainformation returneras från datakällan."
  overload: System.Data.IDataAdapter.FillSchema*
  exceptions: []
  platform:
  - net462
- uid: System.Data.IDataAdapter.GetFillParameters
  id: GetFillParameters
  parent: System.Data.IDataAdapter
  langs:
  - csharp
  name: GetFillParameters()
  nameWithType: IDataAdapter.GetFillParameters()
  fullName: System.Data.IDataAdapter.GetFillParameters()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Hämtar de parametrar som anges av användaren vid körning av en SQL SELECT-instruktion."
  remarks: "```  \nprivate static void GetParameters(String connectiongString) {  \n           using (SqlConnection conn = new SqlConnection(connectiongString)) {  \n              String queryString = \"Select [CourseID],[Title],[Credits] from [MySchool].[dbo].[Course] where [Year]=@Year and [Credits]>=@Credits\";   \n              SqlParameter year = new SqlParameter(\"@Year\", 2012);   \n              SqlParameter credits = new SqlParameter(\"@Credits\", SqlDbType.Int, 4, \"Credits\");   \n              credits.Value = 4; SqlCommand command = new SqlCommand(queryString, conn);   \n              command.Parameters.Add(year);   \n              command.Parameters.Add(credits);   \n              IDbDataAdapter mySchool = new SqlDataAdapter(command);   \n              IDataParameter[] parameters = mySchool.GetFillParameters();  \n              Console.WriteLine(\"{0,-15}{1,-15}{2,-15}{3,-15}{4,-15}\", \"ParameterName\", \"SourceColumn\", \"Direction\", \"DbType\", \"Value\");   \n              foreach (IDataParameter parameter in parameters) {   \n                 Console.WriteLine(\"{0,-15}{1,-15}{2,-15}{3,-15}{4,-15}\", parameter.ParameterName, parameter.SourceColumn, parameter.Direction, parameter.DbType, parameter.Value);   \n              }  \n           }  \n        }  \n```"
  syntax:
    content: public System.Data.IDataParameter[] GetFillParameters ();
    parameters: []
    return:
      type: System.Data.IDataParameter[]
      description: "En matris med <xref href=&quot;System.Data.IDataParameter&quot;> </xref> objekt som innehåller parametrar som anges av användaren."
  overload: System.Data.IDataAdapter.GetFillParameters*
  exceptions: []
  platform:
  - net462
- uid: System.Data.IDataAdapter.MissingMappingAction
  id: MissingMappingAction
  parent: System.Data.IDataAdapter
  langs:
  - csharp
  name: MissingMappingAction
  nameWithType: IDataAdapter.MissingMappingAction
  fullName: System.Data.IDataAdapter.MissingMappingAction
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Anger eller anger om omappade källa tabeller eller kolumner har skickats med deras namn på datakällor för att filtrera eller ett felmeddelande visas."
  remarks: "<xref:System.Data.IDataAdapter.TableMappings%2A>Egenskapen innehåller master mappningen mellan returnerade poster och <xref:System.Data.DataSet>.</xref:System.Data.DataSet> </xref:System.Data.IDataAdapter.TableMappings%2A>"
  syntax:
    content: public System.Data.MissingMappingAction MissingMappingAction { get; set; }
    return:
      type: System.Data.MissingMappingAction
      description: "En av de <xref href=&quot;System.Data.MissingMappingAction&quot;> </xref> värden. Standardvärdet är <xref uid=&quot;langword_csharp_Passthrough&quot; name=&quot;Passthrough&quot; href=&quot;&quot;> </xref>."
  overload: System.Data.IDataAdapter.MissingMappingAction*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Värdet är inte en av de <xref href=&quot;System.Data.MissingMappingAction&quot;> </xref> värden."
  platform:
  - net462
- uid: System.Data.IDataAdapter.MissingSchemaAction
  id: MissingSchemaAction
  parent: System.Data.IDataAdapter
  langs:
  - csharp
  name: MissingSchemaAction
  nameWithType: IDataAdapter.MissingSchemaAction
  fullName: System.Data.IDataAdapter.MissingSchemaAction
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Anger eller anger om saknas källa tabeller, kolumner och deras relationer läggs till i dataset-schemat, ignoreras eller orsaka att ett fel uppstå."
  syntax:
    content: public System.Data.MissingSchemaAction MissingSchemaAction { get; set; }
    return:
      type: System.Data.MissingSchemaAction
      description: "En av de <xref href=&quot;System.Data.MissingSchemaAction&quot;> </xref> värden. Standardvärdet är <xref uid=&quot;langword_csharp_Add&quot; name=&quot;Add&quot; href=&quot;&quot;> </xref>."
  overload: System.Data.IDataAdapter.MissingSchemaAction*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Värdet är inte en av de <xref href=&quot;System.Data.MissingSchemaAction&quot;> </xref> värden."
  platform:
  - net462
- uid: System.Data.IDataAdapter.TableMappings
  id: TableMappings
  parent: System.Data.IDataAdapter
  langs:
  - csharp
  name: TableMappings
  nameWithType: IDataAdapter.TableMappings
  fullName: System.Data.IDataAdapter.TableMappings
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Anger hur en källtabell mappas till en dataset-tabell."
  remarks: "Den <xref:System.Data.IDataAdapter>använder endast mappningar för källtabellen med namnet &quot;Table&quot;.</xref:System.Data.IDataAdapter> Alla väljer INSERT-, DELETE- och UPDATE-uttryck som returnerar data måste göra det med kolumnen konsekvent namngivning. Kolumnnamnen som returneras i posterna måste vara unikt, annars kolumner med samma namn skriver över tidigare data. På <xref:System.Data.IDataAdapter.Update%2A>, men endast tabellen mappas till källtabellen med namnet &quot;Table&quot; har dess ändringar synkroniseras.</xref:System.Data.IDataAdapter.Update%2A>"
  syntax:
    content: public System.Data.ITableMappingCollection TableMappings { get; }
    return:
      type: System.Data.ITableMappingCollection
      description: "En samling som innehåller master mappningen mellan returnerade poster och <xref href=&quot;System.Data.DataSet&quot;> </xref>. Standardvärdet är en tom samling."
  overload: System.Data.IDataAdapter.TableMappings*
  exceptions: []
  platform:
  - net462
- uid: System.Data.IDataAdapter.Update(System.Data.DataSet)
  id: Update(System.Data.DataSet)
  parent: System.Data.IDataAdapter
  langs:
  - csharp
  name: Update(DataSet)
  nameWithType: IDataAdapter.Update(DataSet)
  fullName: System.Data.IDataAdapter.Update(DataSet)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Anropar respektive INSERT-, UPDATE- eller DELETE-instruktioner för varje infogas, uppdateras eller tas bort raden i det angivna <xref href=&quot;System.Data.DataSet&quot;> </xref> från en <xref href=&quot;System.Data.DataTable&quot;> </xref> med namnet &quot;Table&quot;."
  remarks: "När programmet anropar metoden Update på <xref:System.Data.IDataAdapter>undersöker den <xref:System.Data.DataRow.RowState%2A>egenskapen och kör de nödvändiga INSERT-, UPDATE- eller ta bort rapporterna upprepade gånger för varje rad baserat terabyte index som konfigurerats i <xref:System.Data.DataSet>.</xref:System.Data.DataSet> </xref:System.Data.DataRow.RowState%2A> </xref:System.Data.IDataAdapter> Uppdateringen kan till exempel köra en DELETE-instruktion, följt av en INSERT-instruktion och en annan DELETE-instruktion på grund av sortering av rader i <xref:System.Data.DataTable>.</xref:System.Data.DataTable>       Tänk på att de här uttrycken inte utförs som en batchprocess; varje rad uppdateras individuellt. Ett program kan anropa den <xref:System.Data.DataSet.GetChanges%2A>metoden om du måste styra sekvensen av instruktionen typer (till exempel infogar innan uppdateringar).</xref:System.Data.DataSet.GetChanges%2A> Mer information finns i [uppdatering datakällor med DataAdapters](~/add/includes/ajax-current-ext-md.md).       Om INSERT-, UPDATE- eller DELETE-uttryck inte har angetts, den <xref:System.Data.Common.DataAdapter.Update%2A>metoden genereras ett undantag.</xref:System.Data.Common.DataAdapter.Update%2A> Du kan dock skapa en <xref:System.Data.SqlClient.SqlCommandBuilder>eller <xref:System.Data.OleDb.OleDbCommandBuilder>objekt att automatiskt generera SQL-uttryck för enskild tabell uppdateringar om du ställer in den `SelectCommand` egenskapen för en .NET Framework-dataprovidern.</xref:System.Data.OleDb.OleDbCommandBuilder> </xref:System.Data.SqlClient.SqlCommandBuilder> Sedan genereras ytterligare SQL-uttryck som du inte anger av CommandBuilder. Den här generationen logiken kräver information om nyckelkolumn måste finnas i <xref:System.Data.DataSet>.</xref:System.Data.DataSet> Mer information finns i [genererar kommandon med CommandBuilders](~/add/includes/ajax-current-ext-md.md).       Den <xref:System.Data.Common.DataAdapter.Update%2A>metoden hämtar rader från tabellen som anges i första mappningen innan du utför en uppdatering.</xref:System.Data.Common.DataAdapter.Update%2A> Den <xref:System.Data.Common.DataAdapter.Update%2A>uppdaterar raden med värdet för den <xref:System.Data.IDbCommand.UpdatedRowSource%2A>egenskapen.</xref:System.Data.IDbCommand.UpdatedRowSource%2A> </xref:System.Data.Common.DataAdapter.Update%2A> Returnerade överskridande rader ignoreras.       När alla data har lästs in till den <xref:System.Data.DataSet>, <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A>händelse inträffar, tillåter användaren att granska den stämts <xref:System.Data.DataSet>liksom alla utdataparametrar returneras av kommandot.</xref:System.Data.DataSet> </xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A> </xref:System.Data.DataSet> När en rad har uppdaterats, accepteras ändringar i den rad som.       När du använder Update ordningen för körningen är följande: 1.  Värdena i den <xref:System.Data.DataRow>flyttas till parametervärden.</xref:System.Data.DataRow>      2.  Den <xref:System.Data.Common.DbDataAdapter.OnRowUpdating%2A>händelsen utlöses.</xref:System.Data.Common.DbDataAdapter.OnRowUpdating%2A>      3.  Kommandot körs.      4.  Om kommandot anges till `FirstReturnedRecord`, och sedan först returnerade resultat placeras i <xref:System.Data.DataRow>.</xref:System.Data.DataRow>      5.  Om det finns utdataparametrar, placeras de i <xref:System.Data.DataRow>.</xref:System.Data.DataRow>      6.  Den <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A>händelsen utlöses.</xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A>      7.  <xref:System.Data.DataRow.AcceptChanges%2A>anropas.</xref:System.Data.DataRow.AcceptChanges%2A>       Varje kommando som är associerad med <xref:System.Data.IDataAdapter>har vanligtvis en Parametersamlingen associerat.</xref:System.Data.IDataAdapter> Parametrar som är mappade till den aktuella raden via den `SourceColumn` och `SourceVersion` egenskaperna för en .NET Framework-dataprovidern `Parameter` klass. `SourceColumn`refererar till en <xref:System.Data.DataTable>kolumnen som den <xref:System.Data.IDataAdapter>referenser till hämta parametervärden för den aktuella raden.</xref:System.Data.IDataAdapter> </xref:System.Data.DataTable>       `SourceColumn`refererar till omappade kolumnnamnet innan alla mappningar för tabellen har tillämpats. Om `SourceColumn` refererar till en kolumn som inte finns de åtgärder som vidtagits beror på något av följande <xref:System.Data.MissingMappingAction>värden.</xref:System.Data.MissingMappingAction>      | Uppräkningsvärdet | Åtgärd |   |-----------------------|------------------|   | `MissingMappingAction.Passthrough`| Använd källa kolumnnamn och tabellnamn i <xref:System.Data.DataSet>om det finns ingen mappning. |   | `MissingMappingAction.Ignore`| En <xref:System.SystemException>genereras.</xref:System.SystemException> </xref:System.Data.DataSet> När mappningarna uttryckligen anges, en saknas mappningen för en indataparameter beror vanligtvis på ett fel. |   | `MissingMappingAction.Error`| En <xref:System.SystemException>genereras. |       Den `SourceColumn` egenskapen också används för att mappa värde för utdata eller parametrar för in-/ utdata tillbaka till den `DataSet`.</xref:System.SystemException> Ett undantag genereras om det refererar till en kolumn som inte finns.       Den `SourceVersion` -egenskapen för en .NET Framework-dataprovidern `Parameter` klassen bestämmer om du vill använda den `Original`, `Current`, eller `Proposed` version av värdet i kolumnen. Den här funktionen används ofta för att inkludera ursprungliga värden i WHERE-satsen i en UPDATE-instruktion för att söka efter Optimistisk samtidighet överträdelser.      > [!NOTE] > Om ett fel inträffar vid uppdatering av en rad genereras ett undantag och körningen av uppdateringen har upphört. Om du vill fortsätta uppdateringen utan att generera ett undantag när ett fel uppstår, ange den <xref:System.Data.Common.DataAdapter.ContinueUpdateOnError%2A>egenskapen `true` innan anropar <xref:System.Data.Common.DbDataAdapter.Update%2A>.</xref:System.Data.Common.DbDataAdapter.Update%2A> </xref:System.Data.Common.DataAdapter.ContinueUpdateOnError%2A> Du kan också svara mot fel på grundval av per rad i den `RowUpdated` en DataAdapter-händelse. Uppdateringen fortsätta utan att generera ett undantag i den `RowUpdated` händelse, anger du <xref:System.Data.Common.RowUpdatedEventArgs.Status%2A>egenskapen för <xref:System.Data.Common.RowUpdatedEventArgs>att <xref:System.Data.UpdateStatus>.</xref:System.Data.UpdateStatus> </xref:System.Data.Common.RowUpdatedEventArgs> </xref:System.Data.Common.RowUpdatedEventArgs.Status%2A>"
  example:
  - "The following example uses the derived class, <xref:System.Data.OleDb.OleDbDataAdapter>, to <xref:System.Data.Common.DataAdapter.Update%2A> the data source. This example assumes that you have created an <xref:System.Data.OleDb.OleDbDataAdapter> and a <xref:System.Data.DataSet>.  \n  \n [!code-cs[Classic WebData DataAdapter.IDataAdapter.Update Example#1](~/add/codesnippet/csharp/m-system.data.idataadapt_1.cs)]\n [!code-vb[Classic WebData DataAdapter.IDataAdapter.Update Example#1](~/add/codesnippet/visualbasic/m-system.data.idataadapt_1.vb)]"
  syntax:
    content: public int Update (System.Data.DataSet dataSet);
    parameters:
    - id: dataSet
      type: System.Data.DataSet
      description: "Den <xref href=&quot;System.Data.DataSet&quot;> </xref> används för att uppdatera datakällan."
    return:
      type: System.Int32
      description: "Antalet rader som har uppdaterats från den <xref href=&quot;System.Data.DataSet&quot;> </xref>."
  overload: System.Data.IDataAdapter.Update*
  exceptions:
  - type: System.Data.DBConcurrencyException
    commentId: T:System.Data.DBConcurrencyException
    description: "Ett försök att köra en INSERT-, UPDATE- eller DELETE-sats resulterade i noll poster som påverkas."
  platform:
  - net462
references:
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.Data.DBConcurrencyException
  parent: System.Data
  isExternal: false
  name: DBConcurrencyException
  nameWithType: DBConcurrencyException
  fullName: System.Data.DBConcurrencyException
- uid: System.Data.IDataAdapter.Fill(System.Data.DataSet)
  parent: System.Data.IDataAdapter
  isExternal: false
  name: Fill(DataSet)
  nameWithType: IDataAdapter.Fill(DataSet)
  fullName: System.Data.IDataAdapter.Fill(DataSet)
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Data.DataSet
  parent: System.Data
  isExternal: false
  name: DataSet
  nameWithType: DataSet
  fullName: System.Data.DataSet
- uid: System.Data.IDataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType)
  parent: System.Data.IDataAdapter
  isExternal: false
  name: FillSchema(DataSet,SchemaType)
  nameWithType: IDataAdapter.FillSchema(DataSet,SchemaType)
  fullName: System.Data.IDataAdapter.FillSchema(DataSet,SchemaType)
- uid: System.Data.DataTable[]
  parent: System.Data
  isExternal: false
  name: DataTable
  nameWithType: DataTable
  fullName: System.Data.DataTable[]
  spec.csharp:
  - uid: System.Data.DataTable
    name: DataTable
    nameWithType: DataTable
    fullName: DataTable[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Data.SchemaType
  parent: System.Data
  isExternal: false
  name: SchemaType
  nameWithType: SchemaType
  fullName: System.Data.SchemaType
- uid: System.Data.IDataAdapter.GetFillParameters
  parent: System.Data.IDataAdapter
  isExternal: false
  name: GetFillParameters()
  nameWithType: IDataAdapter.GetFillParameters()
  fullName: System.Data.IDataAdapter.GetFillParameters()
- uid: System.Data.IDataParameter[]
  parent: System.Data
  isExternal: false
  name: IDataParameter
  nameWithType: IDataParameter
  fullName: System.Data.IDataParameter[]
  spec.csharp:
  - uid: System.Data.IDataParameter
    name: IDataParameter
    nameWithType: IDataParameter
    fullName: IDataParameter[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Data.IDataAdapter.MissingMappingAction
  parent: System.Data.IDataAdapter
  isExternal: false
  name: MissingMappingAction
  nameWithType: IDataAdapter.MissingMappingAction
  fullName: System.Data.IDataAdapter.MissingMappingAction
- uid: System.Data.MissingMappingAction
  parent: System.Data
  isExternal: false
  name: MissingMappingAction
  nameWithType: MissingMappingAction
  fullName: System.Data.MissingMappingAction
- uid: System.Data.IDataAdapter.MissingSchemaAction
  parent: System.Data.IDataAdapter
  isExternal: false
  name: MissingSchemaAction
  nameWithType: IDataAdapter.MissingSchemaAction
  fullName: System.Data.IDataAdapter.MissingSchemaAction
- uid: System.Data.MissingSchemaAction
  parent: System.Data
  isExternal: false
  name: MissingSchemaAction
  nameWithType: MissingSchemaAction
  fullName: System.Data.MissingSchemaAction
- uid: System.Data.IDataAdapter.TableMappings
  parent: System.Data.IDataAdapter
  isExternal: false
  name: TableMappings
  nameWithType: IDataAdapter.TableMappings
  fullName: System.Data.IDataAdapter.TableMappings
- uid: System.Data.ITableMappingCollection
  parent: System.Data
  isExternal: false
  name: ITableMappingCollection
  nameWithType: ITableMappingCollection
  fullName: System.Data.ITableMappingCollection
- uid: System.Data.IDataAdapter.Update(System.Data.DataSet)
  parent: System.Data.IDataAdapter
  isExternal: false
  name: Update(DataSet)
  nameWithType: IDataAdapter.Update(DataSet)
  fullName: System.Data.IDataAdapter.Update(DataSet)
- uid: System.Data.IDataAdapter.Fill*
  parent: System.Data.IDataAdapter
  isExternal: false
  name: Fill
  nameWithType: IDataAdapter.Fill
- uid: System.Data.IDataAdapter.FillSchema*
  parent: System.Data.IDataAdapter
  isExternal: false
  name: FillSchema
  nameWithType: IDataAdapter.FillSchema
- uid: System.Data.IDataAdapter.GetFillParameters*
  parent: System.Data.IDataAdapter
  isExternal: false
  name: GetFillParameters
  nameWithType: IDataAdapter.GetFillParameters
- uid: System.Data.IDataAdapter.MissingMappingAction*
  parent: System.Data.IDataAdapter
  isExternal: false
  name: MissingMappingAction
  nameWithType: IDataAdapter.MissingMappingAction
- uid: System.Data.IDataAdapter.MissingSchemaAction*
  parent: System.Data.IDataAdapter
  isExternal: false
  name: MissingSchemaAction
  nameWithType: IDataAdapter.MissingSchemaAction
- uid: System.Data.IDataAdapter.TableMappings*
  parent: System.Data.IDataAdapter
  isExternal: false
  name: TableMappings
  nameWithType: IDataAdapter.TableMappings
- uid: System.Data.IDataAdapter.Update*
  parent: System.Data.IDataAdapter
  isExternal: false
  name: Update
  nameWithType: IDataAdapter.Update
