### YamlMime:ManagedReference
items:
- uid: System.CharEnumerator
  id: CharEnumerator
  children:
  - System.CharEnumerator.Clone
  - System.CharEnumerator.Current
  - System.CharEnumerator.Dispose
  - System.CharEnumerator.MoveNext
  - System.CharEnumerator.Reset
  - System.CharEnumerator.System#Collections#IEnumerator#Current
  langs:
  - csharp
  name: CharEnumerator
  nameWithType: CharEnumerator
  fullName: System.CharEnumerator
  type: Class
  summary: "Stöder iterera över en <xref:System.String>objekt och läsa dess enskilda tecken.</xref:System.String> Den här klassen kan inte ärvas."
  remarks: "En CharEnumerator tillhandahåller skrivskyddad åtkomst till tecknen i ett refererat <xref:System.String>objektet.</xref:System.String> Till exempel den `foreach` programmeringsspråk Microsoft Visual Basic och C#-instruktionen som går igenom elementen i en samling, hämtar ett CharEnumerator från en <xref:System.String>för att kunna gå igenom tecknen i objektet.</xref:System.String>       Det finns ingen offentlig konstruktor för CharEnumerator. Anropa i stället en <xref:System.String>objektets <xref:System.String.GetEnumerator%2A>metod för att hämta en CharEnumerator initieras för att referera till strängen.</xref:System.String.GetEnumerator%2A> </xref:System.String>       En CharEnumerator upprätthåller ett internt index tecken i strängen CharEnumerator referenser. Tillståndet för index är ogiltig när den refererar till en teckenposition logiskt före det första tecknet eller efter det sista tecknet i strängen och giltig när den refererar till ett tecken i strängen. Indexet har initierats till en position logiskt före det första tecknet och anges till en position efter det sista tecknet när upprepning är klar. Ett undantag om du försöker komma åt ett tecken när indexet är ogiltigt.       Den <xref:System.CharEnumerator.MoveNext%2A>metoden ökar indexet med en, så att de första och efterföljande tecken kan nås i sin tur.</xref:System.CharEnumerator.MoveNext%2A> Den <xref:System.CharEnumerator.Reset%2A>metoden anger index till en position logiskt före det första tecknet.</xref:System.CharEnumerator.Reset%2A> Den <xref:System.CharEnumerator.Current%2A>egenskapen hämtar tecknet för närvarande refereras av indexet.</xref:System.CharEnumerator.Current%2A> Den <xref:System.CharEnumerator.Clone%2A>metoden skapar en kopia av CharEnumerator.</xref:System.CharEnumerator.Clone%2A>      > [!NOTE] > Flera oberoende instanser av CharEnumerator över en eller flera trådar kan ha åtkomst till en enda instans av <xref:System.String>.</xref:System.String> Den här klassen implementeras för att stödja den <xref:System.Collections.IEnumerator>gränssnitt.</xref:System.Collections.IEnumerator> Mer information om användningen av en uppräknare finns det <xref:System.Collections.IEnumerator>avsnittet.</xref:System.Collections.IEnumerator>"
  example:
  - "The following example uses the CharEnumerator class to enumerate the individual characters in a string. It instantiates a CharEnumerator object by calling the <xref:System.String.GetEnumerator%2A?displayProperty=fullName> method, moves from one character to the next by calling the <xref:System.CharEnumerator.MoveNext%2A> method, and displays the current character by retrieving the value of the <xref:System.CharEnumerator.Current%2A> property.  \n  \n [!code-cs[System.CharEnumerator.Class#1](~/add/codesnippet/csharp/t-system.charenumerator_1.cs)]\n [!code-cpp[System.CharEnumerator.Class#1](~/add/codesnippet/cpp/t-system.charenumerator_1.cpp)]\n [!code-vb[System.CharEnumerator.Class#1](~/add/codesnippet/visualbasic/t-system.charenumerator_1.vb)]  \n  \n Note, however, that the same operation can be performed somewhat more intuitively by using `foreach` (in C#) or `For Each` (in Visual Basic), as the following example shows.  \n  \n [!code-cs[System.CharEnumerator.Class#2](~/add/codesnippet/csharp/t-system.charenumerator_2.cs)]\n [!code-cpp[System.CharEnumerator.Class#2](~/add/codesnippet/cpp/t-system.charenumerator_2.cpp)]\n [!code-vb[System.CharEnumerator.Class#2](~/add/codesnippet/visualbasic/t-system.charenumerator_2.vb)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public sealed class CharEnumerator : ICloneable, System.Collections.Generic.IEnumerator<char>
  inheritance:
  - System.Object
  implements:
  - System.Collections.Generic.IEnumerator<System.Char>
  - System.ICloneable
  inheritedMembers: []
  platform:
  - net462
- uid: System.CharEnumerator.Clone
  id: Clone
  parent: System.CharEnumerator
  langs:
  - csharp
  name: Clone()
  nameWithType: CharEnumerator.Clone()
  fullName: System.CharEnumerator.Clone()
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "Skapar en kopia av aktuellt <xref href=&quot;System.CharEnumerator&quot;> </xref> objekt."
  remarks: "Det returnera värdet är en kopia av den här instansen av <xref:System.CharEnumerator>och det aktuella tillståndet.</xref:System.CharEnumerator> Detta är användbart för att spara ditt tillstånd när söka igenom en <xref:System.String>objektet.</xref:System.String>       Anta exempelvis att programmet använder en ursprunglig instans för <xref:System.CharEnumerator>att gå igenom varje tecken i <xref:System.String>.</xref:System.String> </xref:System.CharEnumerator> När vissa unika tecken påträffas tillämpningsprogrammet pausar bearbetning och anropar metoden Clone. I praktiken sparas <xref:System.CharEnumerator>objektets index i <xref:System.String>.</xref:System.String> </xref:System.CharEnumerator>       Programmet använder klonen för att navigera till en annan del av den `String` att utföra vissa extra bearbetning. Sidoeffekt av denna navigering är klonen förlorar reda på positionen där bearbetningen stoppades. Men när extra bearbetningen är klar programmet ignorerar klonen och använder ursprungligt <xref:System.CharEnumerator>instans kan fortsätta att arbeta på den <xref:System.String>där den ursprungliga bearbetningen stoppades.</xref:System.String> </xref:System.CharEnumerator>      > [!NOTE] > Den här metoden implementeras för att stödja den <xref:System.ICloneable>gränssnitt.</xref:System.ICloneable>"
  syntax:
    content: public object Clone ();
    parameters: []
    return:
      type: System.Object
      description: "En <xref:System.Object>som är en kopia av aktuellt <xref href=&quot;System.CharEnumerator&quot;> </xref> objekt.</xref:System.Object>"
  overload: System.CharEnumerator.Clone*
  exceptions: []
  platform:
  - net462
- uid: System.CharEnumerator.Current
  id: Current
  parent: System.CharEnumerator
  langs:
  - csharp
  name: Current
  nameWithType: CharEnumerator.Current
  fullName: System.CharEnumerator.Current
  type: Property
  assemblies:
  - mscorlib
  namespace: System
  summary: "Hämtar det för närvarande refereras till tecknet i strängen som räknas upp i den här <xref href=&quot;System.CharEnumerator&quot;> </xref> objekt."
  remarks: "Den <xref:System.CharEnumerator>klassen upprätthåller ett internt index uppräknade sträng och den aktuella egenskapen returnerar tecknet som för närvarande refereras av indexet.</xref:System.CharEnumerator> Den här egenskapen ska aktiveras endast när indexet är ogiltig. Annars genereras ett undantag.       Indexet alltid är ogiltigt för en tom sträng (&quot;&quot;). Indexet är också ogiltigt efter den <xref:System.String.GetEnumerator%2A?displayProperty=fullName>eller <xref:System.CharEnumerator.Reset%2A>-metoden anropas.</xref:System.CharEnumerator.Reset%2A> </xref:System.String.GetEnumerator%2A?displayProperty=fullName> När någon av dessa metoder kallas anropa den <xref:System.CharEnumerator.MoveNext%2A>metod för att justera indexet för det första tecknet i uppräknade strängen.</xref:System.CharEnumerator.MoveNext%2A> Indexet är giltigt när den <xref:System.CharEnumerator.MoveNext%2A>metoden returnerar `true`.</xref:System.CharEnumerator.MoveNext%2A>       Aktuella inte flytta indexet och efterföljande anrop till aktuella returnera samma tecken tills <xref:System.CharEnumerator.MoveNext%2A>, <xref:System.CharEnumerator.Reset%2A>, eller <xref:System.String.GetEnumerator%2A?displayProperty=fullName>kallas.</xref:System.String.GetEnumerator%2A?displayProperty=fullName> </xref:System.CharEnumerator.Reset%2A> </xref:System.CharEnumerator.MoveNext%2A>"
  example:
  - "The following example uses the <xref:System.CharEnumerator> class to enumerate the individual characters in a string. It instantiates a <xref:System.CharEnumerator> object by calling the <xref:System.String.GetEnumerator%2A?displayProperty=fullName> method, moves from one character to the next by calling the <xref:System.CharEnumerator.MoveNext%2A> method, and displays the current character by retrieving the value of the Current property.  \n  \n [!code-cs[System.CharEnumerator.Class#1](~/add/codesnippet/csharp/p-system.charenumerator._1.cs)]\n [!code-cpp[System.CharEnumerator.Class#1](~/add/codesnippet/cpp/p-system.charenumerator._1.cpp)]\n [!code-vb[System.CharEnumerator.Class#1](~/add/codesnippet/visualbasic/p-system.charenumerator._1.vb)]  \n  \n Note, however, that the same operation can be performed somewhat more intuitively by using `foreach` (in C#) or `For Each` (in Visual Basic), as the following example shows.  \n  \n [!code-cs[System.CharEnumerator.Class#2](~/add/codesnippet/csharp/p-system.charenumerator._2.cs)]\n [!code-cpp[System.CharEnumerator.Class#2](~/add/codesnippet/cpp/p-system.charenumerator._2.cpp)]\n [!code-vb[System.CharEnumerator.Class#2](~/add/codesnippet/visualbasic/p-system.charenumerator._2.vb)]"
  syntax:
    content: public char Current { get; }
    return:
      type: System.Char
      description: "Unicode-tecken som för närvarande refereras av detta <xref href=&quot;System.CharEnumerator&quot;> </xref> objekt."
  overload: System.CharEnumerator.Current*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Indexet är ogiltigt. den är före först eller efter det sista tecknet i uppräknade strängen."
  platform:
  - net462
- uid: System.CharEnumerator.Dispose
  id: Dispose
  parent: System.CharEnumerator
  langs:
  - csharp
  name: Dispose()
  nameWithType: CharEnumerator.Dispose()
  fullName: System.CharEnumerator.Dispose()
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "Frigör alla resurser som används av den aktuella instansen av den <xref href=&quot;System.CharEnumerator&quot;> </xref> klass."
  remarks: "Anropa Dispose när du är klar med hjälp av <xref:System.CharEnumerator>.</xref:System.CharEnumerator> Metoden Dispose lämnar den <xref:System.CharEnumerator>oanvändbar.</xref:System.CharEnumerator> När du anropar Dispose, måste du släppa alla referenser till den <xref:System.CharEnumerator>så skräpinsamlingen kan frigöra minne som den <xref:System.CharEnumerator>var upptar.</xref:System.CharEnumerator> </xref:System.CharEnumerator>       Mer information finns i [Rensa ohanterade resurser](~/add/includes/ajax-current-ext-md.md) och [implementera en metod för ta bort](~/add/includes/ajax-current-ext-md.md).      > [!NOTE] > Alltid anropet avyttra innan du släpper senaste referens till <xref:System.CharEnumerator>.</xref:System.CharEnumerator> De resurser som den använder frigörs annars inte förrän skräpinsamlingen anrop av <xref:System.CharEnumerator>objektets `Finalize` metod.</xref:System.CharEnumerator>"
  syntax:
    content: public void Dispose ();
    parameters: []
  overload: System.CharEnumerator.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.CharEnumerator.MoveNext
  id: MoveNext
  parent: System.CharEnumerator
  langs:
  - csharp
  name: MoveNext()
  nameWithType: CharEnumerator.MoveNext()
  fullName: System.CharEnumerator.MoveNext()
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "Ökar internt index för aktuellt <xref href=&quot;System.CharEnumerator&quot;> </xref> objekt till uppräknade strängen nästa tecken."
  remarks: "Den <xref:System.CharEnumerator>klassen upprätthåller ett internt index uppräknade sträng och metoden MoveNext ökar indexet med ett.</xref:System.CharEnumerator> Anropa MoveNext efter anropar <xref:System.String.GetEnumerator%2A>eller <xref:System.CharEnumerator.Reset%2A>att öka aktuella teckenpositionen för det första tecknet i uppräknade strängen.</xref:System.CharEnumerator.Reset%2A> </xref:System.String.GetEnumerator%2A> Kontrollera att det returnera värdet är `true` att fastställa att den aktuella positionen för tecknet är giltig.       Om indexet är utanför det sista tecknet i uppräknade strängen kan ändras inte indexet och `false` returneras.       Observera att om uppräknade strängen är tom (&quot;&quot;), läget för den <xref:System.CharEnumerator>alltid är ogiltig.</xref:System.CharEnumerator> Detta beror på att internt indexet för den <xref:System.CharEnumerator>som ursprungligen före det första tecknet i uppräknade strängen och är därför ogiltigt.</xref:System.CharEnumerator> MoveNext anger logiskt index efter det sista tecknet som (icke-befintligt) för den uppräknade strängen som också är ogiltig."
  example:
  - "The following example uses the <xref:System.CharEnumerator> class to enumerate the individual characters in a string. It instantiates a <xref:System.CharEnumerator> object by calling the <xref:System.String.GetEnumerator%2A?displayProperty=fullName> method, moves from one character to the next by calling the MoveNext method, and displays the current character by retrieving the value of the <xref:System.CharEnumerator.Current%2A> property.  \n  \n [!code-cs[System.CharEnumerator.Class#1](~/add/codesnippet/csharp/m-system.charenumerator._1.cs)]\n [!code-cpp[System.CharEnumerator.Class#1](~/add/codesnippet/cpp/m-system.charenumerator._1.cpp)]\n [!code-vb[System.CharEnumerator.Class#1](~/add/codesnippet/visualbasic/m-system.charenumerator._1.vb)]  \n  \n Note, however, that the same operation can be performed somewhat more intuitively by using `foreach` (in C#) or `For Each` (in Visual Basic), as the following example shows.  \n  \n [!code-cs[System.CharEnumerator.Class#2](~/add/codesnippet/csharp/m-system.charenumerator._2.cs)]\n [!code-cpp[System.CharEnumerator.Class#2](~/add/codesnippet/cpp/m-system.charenumerator._2.cpp)]\n [!code-vb[System.CharEnumerator.Class#2](~/add/codesnippet/visualbasic/m-system.charenumerator._2.vb)]"
  syntax:
    content: public bool MoveNext ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Om indexet har ökas och inom uppräknade strängen; Annars <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.CharEnumerator.MoveNext*
  exceptions: []
  platform:
  - net462
- uid: System.CharEnumerator.Reset
  id: Reset
  parent: System.CharEnumerator
  langs:
  - csharp
  name: Reset()
  nameWithType: CharEnumerator.Reset()
  fullName: System.CharEnumerator.Reset()
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "Initierar index till en position logiskt före det första tecknet i uppräknade strängen."
  remarks: "Den <xref:System.CharEnumerator>klassen upprätthåller ett internt index uppräknade sträng och Reset-metoden anger index till ett ogiltigt tillstånd.</xref:System.CharEnumerator>"
  syntax:
    content: public void Reset ();
    parameters: []
  overload: System.CharEnumerator.Reset*
  exceptions: []
  platform:
  - net462
- uid: System.CharEnumerator.System#Collections#IEnumerator#Current
  id: System#Collections#IEnumerator#Current
  isEii: true
  parent: System.CharEnumerator
  langs:
  - csharp
  name: System.Collections.IEnumerator.Current
  nameWithType: CharEnumerator.System.Collections.IEnumerator.Current
  fullName: System.CharEnumerator.System.Collections.IEnumerator.Current
  type: Property
  assemblies:
  - mscorlib
  namespace: System
  summary: "Hämtar det för närvarande refereras till tecknet i strängen som räknas upp i den här <xref href=&quot;System.CharEnumerator&quot;> </xref> objekt. En beskrivning av den här medlemmen finns &lt;xref:System.Collections.IEnumerator.Current%2A?displayProperty=fullName&gt;."
  remarks: "Den här medlemmen är en implementering för medlem av explicit gränssnitt. Det kan användas endast när den <xref:System.CharEnumerator>instans omvandlas till ett <xref:System.Collections.IEnumerator>gränssnitt.</xref:System.Collections.IEnumerator> </xref:System.CharEnumerator>"
  syntax:
    content: object System.Collections.IEnumerator.Current { get; }
    return:
      type: System.Object
      description: "Omslutna Unicode-tecknet för närvarande refereras av detta <xref href=&quot;System.CharEnumerator&quot;> </xref> objekt."
  overload: System.CharEnumerator.System#Collections#IEnumerator#Current*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Uppräkningen har inte startat.       - eller - uppräkningen är avslutad."
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.CharEnumerator.Clone
  parent: System.CharEnumerator
  isExternal: false
  name: Clone()
  nameWithType: CharEnumerator.Clone()
  fullName: System.CharEnumerator.Clone()
- uid: System.CharEnumerator.Current
  parent: System.CharEnumerator
  isExternal: false
  name: Current
  nameWithType: CharEnumerator.Current
  fullName: System.CharEnumerator.Current
- uid: System.Char
  parent: System
  isExternal: true
  name: Char
  nameWithType: Char
  fullName: System.Char
- uid: System.CharEnumerator.Dispose
  parent: System.CharEnumerator
  isExternal: false
  name: Dispose()
  nameWithType: CharEnumerator.Dispose()
  fullName: System.CharEnumerator.Dispose()
- uid: System.CharEnumerator.MoveNext
  parent: System.CharEnumerator
  isExternal: false
  name: MoveNext()
  nameWithType: CharEnumerator.MoveNext()
  fullName: System.CharEnumerator.MoveNext()
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.CharEnumerator.Reset
  parent: System.CharEnumerator
  isExternal: false
  name: Reset()
  nameWithType: CharEnumerator.Reset()
  fullName: System.CharEnumerator.Reset()
- uid: System.CharEnumerator.System#Collections#IEnumerator#Current
  parent: System.CharEnumerator
  isExternal: false
  name: System.Collections.IEnumerator.Current
  nameWithType: CharEnumerator.System.Collections.IEnumerator.Current
  fullName: System.CharEnumerator.System.Collections.IEnumerator.Current
- uid: System.CharEnumerator.Clone*
  parent: System.CharEnumerator
  isExternal: false
  name: Clone
  nameWithType: CharEnumerator.Clone
- uid: System.CharEnumerator.Current*
  parent: System.CharEnumerator
  isExternal: false
  name: Current
  nameWithType: CharEnumerator.Current
- uid: System.CharEnumerator.Dispose*
  parent: System.CharEnumerator
  isExternal: false
  name: Dispose
  nameWithType: CharEnumerator.Dispose
- uid: System.CharEnumerator.MoveNext*
  parent: System.CharEnumerator
  isExternal: false
  name: MoveNext
  nameWithType: CharEnumerator.MoveNext
- uid: System.CharEnumerator.Reset*
  parent: System.CharEnumerator
  isExternal: false
  name: Reset
  nameWithType: CharEnumerator.Reset
- uid: System.CharEnumerator.System#Collections#IEnumerator#Current*
  parent: System.CharEnumerator
  isExternal: false
  name: System.Collections.IEnumerator.Current
  nameWithType: CharEnumerator.System.Collections.IEnumerator.Current
