### YamlMime:ManagedReference
items:
- uid: System.Data.EntityKey
  id: EntityKey
  children:
  - System.Data.EntityKey.#ctor
  - System.Data.EntityKey.#ctor(System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}})
  - System.Data.EntityKey.#ctor(System.String,System.Collections.Generic.IEnumerable{System.Data.EntityKeyMember})
  - System.Data.EntityKey.#ctor(System.String,System.String,System.Object)
  - System.Data.EntityKey.EntityContainerName
  - System.Data.EntityKey.EntityKeyValues
  - System.Data.EntityKey.EntityNotValidKey
  - System.Data.EntityKey.EntitySetName
  - System.Data.EntityKey.Equals(System.Data.EntityKey)
  - System.Data.EntityKey.Equals(System.Object)
  - System.Data.EntityKey.GetEntitySet(System.Data.Metadata.Edm.MetadataWorkspace)
  - System.Data.EntityKey.GetHashCode
  - System.Data.EntityKey.IsTemporary
  - System.Data.EntityKey.NoEntitySetKey
  - System.Data.EntityKey.OnDeserialized(System.Runtime.Serialization.StreamingContext)
  - System.Data.EntityKey.OnDeserializing(System.Runtime.Serialization.StreamingContext)
  - System.Data.EntityKey.op_Equality(System.Data.EntityKey,System.Data.EntityKey)
  - System.Data.EntityKey.op_Inequality(System.Data.EntityKey,System.Data.EntityKey)
  langs:
  - csharp
  name: EntityKey
  nameWithType: EntityKey
  fullName: System.Data.EntityKey
  type: Class
  summary: "Ger en beständig referens till ett objekt som är en instans av en entitetstyp."
  remarks: "EntityKey-objekt är oföränderliga. det vill säga när du är uppbyggda kan de inte ändras.       Mer information finns i [arbeta med entiteten nycklar](http://msdn.microsoft.com/en-us/fe3f4206-d277-43a1-a72f-4e86fdf12b9f)."
  example:
  - "These examples are based on the [AdventureWorks Sales Model](http://msdn.microsoft.com/en-us/f16cd988-673f-4376-b034-129ca93c7832). The examples show you how to create and use an EntityKey.  \n  \n [!code-vb[DP ObjectServices Concepts#EntityKeyClass_TryGetObjectByKey](~/add/codesnippet/visualbasic/objectservicesconceptsvb/Source.vb#entitykeyclass_trygetobjectbykey)]\n [!code-cs[DP ObjectServices Concepts#EntityKeyClass_TryGetObjectByKey](~/add/codesnippet/csharp/objectservicesconceptscs/Source.cs#entitykeyclass_trygetobjectbykey)]  \n  \n [!code-vb[DP ObjectServices Concepts#AddObjectUsingKey](~/add/codesnippet/visualbasic/objectservicesconceptsvb/Source.vb#addobjectusingkey)]\n [!code-cs[DP ObjectServices Concepts#AddObjectUsingKey](~/add/codesnippet/csharp/objectservicesconceptscs/Source.cs#addobjectusingkey)]"
  syntax:
    content: >-
      [System.Diagnostics.DebuggerDisplay("{ConcatKeyValue()}")]

      [System.Runtime.Serialization.DataContract(IsReference=true)]

      public sealed class EntityKey : IEquatable<System.Data.EntityKey>
  inheritance:
  - System.Object
  implements:
  - System.IEquatable<System.Data.EntityKey>
  inheritedMembers: []
  platform:
  - net462
- uid: System.Data.EntityKey.#ctor
  id: '#ctor'
  parent: System.Data.EntityKey
  langs:
  - csharp
  name: EntityKey()
  nameWithType: EntityKey.EntityKey()
  fullName: System.Data.EntityKey.EntityKey()
  type: Constructor
  assemblies:
  - System.Data.Entity
  namespace: System.Data
  summary: "Initierar en ny instans av den <xref href=&quot;System.Data.EntityKey&quot;> </xref> klass."
  syntax:
    content: public EntityKey ();
    parameters: []
  overload: System.Data.EntityKey.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Data.EntityKey.#ctor(System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}})
  id: '#ctor(System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}})'
  parent: System.Data.EntityKey
  langs:
  - csharp
  name: EntityKey(String,IEnumerable<KeyValuePair<String,Object>>)
  nameWithType: EntityKey.EntityKey(String,IEnumerable<KeyValuePair<String,Object>>)
  fullName: System.Data.EntityKey.EntityKey(String,IEnumerable<KeyValuePair<String,Object>>)
  type: Constructor
  assemblies:
  - System.Data.Entity
  namespace: System.Data
  summary: "Initierar en ny instans av den <xref href=&quot;System.Data.EntityKey&quot;> </xref> klass med ett namn på standardentitetsuppsättningen och generisk <xref:System.Collections.Generic.KeyValuePair>samling.</xref:System.Collections.Generic.KeyValuePair>"
  remarks: ''
  example:
  - "This example is based on the [AdventureWorks Sales Model](http://msdn.microsoft.com/en-us/f16cd988-673f-4376-b034-129ca93c7832). The example shows you how to create and use an <xref:System.Data.EntityKey>.  \n  \n [!code-vb[DP ObjectServices Concepts#AddObjectUsingKey](~/add/codesnippet/visualbasic/objectservicesconceptsvb/Source.vb#addobjectusingkey)]\n [!code-cs[DP ObjectServices Concepts#AddObjectUsingKey](~/add/codesnippet/csharp/objectservicesconceptscs/Source.cs#addobjectusingkey)]"
  syntax:
    content: public EntityKey (string qualifiedEntitySetName, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string,object>> entityKeyValues);
    parameters:
    - id: qualifiedEntitySetName
      type: System.String
      description: "En <xref:System.String>som är namnet på entitetsuppsättningen kvalificerat av behållare entitetsnamnet.</xref:System.String>"
    - id: entityKeyValues
      type: System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}}
      description: "En allmän <xref:System.Collections.Generic.KeyValuePair>samling.</xref:System.Collections.Generic.KeyValuePair>       Varje nyckel/värde-par har ett egenskapsnamn som nyckeln och värdet för egenskapen som värde. Det bör finnas ett par för varje egenskap som är en del av den <xref href=&quot;System.Data.EntityKey&quot;> </xref>. Ordningen på nyckel/värde-par är inte viktigt, men varje nyckelegenskapen ska tas med. Egenskapsnamnen är enkla namn som inte kvalificerad med en entitet typnamn eller schemanamnet."
  overload: System.Data.EntityKey.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Data.EntityKey.#ctor(System.String,System.Collections.Generic.IEnumerable{System.Data.EntityKeyMember})
  id: '#ctor(System.String,System.Collections.Generic.IEnumerable{System.Data.EntityKeyMember})'
  parent: System.Data.EntityKey
  langs:
  - csharp
  name: EntityKey(String,IEnumerable<EntityKeyMember>)
  nameWithType: EntityKey.EntityKey(String,IEnumerable<EntityKeyMember>)
  fullName: System.Data.EntityKey.EntityKey(String,IEnumerable<EntityKeyMember>)
  type: Constructor
  assemblies:
  - System.Data.Entity
  namespace: System.Data
  summary: "Initierar en ny instans av den <xref href=&quot;System.Data.EntityKey&quot;> </xref> klass med ett namn på standardentitetsuppsättningen och en &lt;xref:System.Collections.Generic.IEnumerable%601&gt; samling <xref href=&quot;System.Data.EntityKeyMember&quot;> </xref> objekt."
  syntax:
    content: public EntityKey (string qualifiedEntitySetName, System.Collections.Generic.IEnumerable<System.Data.EntityKeyMember> entityKeyValues);
    parameters:
    - id: qualifiedEntitySetName
      type: System.String
      description: "En <xref:System.String>som är namnet på entitetsuppsättningen kvalificerat av behållare entitetsnamnet.</xref:System.String>"
    - id: entityKeyValues
      type: System.Collections.Generic.IEnumerable{System.Data.EntityKeyMember}
      description: "En &lt;xref:System.Collections.Generic.IEnumerable%601&gt; samling <xref href=&quot;System.Data.EntityKeyMember&quot;> </xref> objekt som du vill initiera nyckeln."
  overload: System.Data.EntityKey.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Data.EntityKey.#ctor(System.String,System.String,System.Object)
  id: '#ctor(System.String,System.String,System.Object)'
  parent: System.Data.EntityKey
  langs:
  - csharp
  name: EntityKey(String,String,Object)
  nameWithType: EntityKey.EntityKey(String,String,Object)
  fullName: System.Data.EntityKey.EntityKey(String,String,Object)
  type: Constructor
  assemblies:
  - System.Data.Entity
  namespace: System.Data
  summary: "Initierar en ny instans av den <xref href=&quot;System.Data.EntityKey&quot;> </xref> klass med ett namn på standardentitetsuppsättningen och en specifik entitet nyckel."
  remarks: ''
  example:
  - "This example is based on the [AdventureWorks Sales Model](http://msdn.microsoft.com/en-us/f16cd988-673f-4376-b034-129ca93c7832). The example shows you how to create and use an <xref:System.Data.EntityKey>.  \n  \n [!code-vb[DP ObjectServices Concepts#AddObjectUsingKey](~/add/codesnippet/visualbasic/objectservicesconceptsvb/Source.vb#addobjectusingkey)]\n [!code-cs[DP ObjectServices Concepts#AddObjectUsingKey](~/add/codesnippet/csharp/objectservicesconceptscs/Source.cs#addobjectusingkey)]"
  syntax:
    content: public EntityKey (string qualifiedEntitySetName, string keyName, object keyValue);
    parameters:
    - id: qualifiedEntitySetName
      type: System.String
      description: "En <xref:System.String>som är namnet på entitetsuppsättningen kvalificerat av behållare entitetsnamnet.</xref:System.String>"
    - id: keyName
      type: System.String
      description: "En <xref:System.String>som är namnet på nyckeln.</xref:System.String>"
    - id: keyValue
      type: System.Object
      description: "En <xref:System.Object>som värdet för nyckeln.</xref:System.Object>"
  overload: System.Data.EntityKey.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Data.EntityKey.EntityContainerName
  id: EntityContainerName
  parent: System.Data.EntityKey
  langs:
  - csharp
  name: EntityContainerName
  nameWithType: EntityKey.EntityContainerName
  fullName: System.Data.EntityKey.EntityContainerName
  type: Property
  assemblies:
  - System.Data.Entity
  namespace: System.Data
  summary: "Hämtar eller anger namnet på entitetsbehållaren."
  syntax:
    content: public string EntityContainerName { get; set; }
    return:
      type: System.String
      description: "En <xref:System.String>värde som är namnet på entitetsbehållaren för entitet som den <xref href=&quot;System.Data.EntityKey&quot;> </xref> tillhör.</xref:System.String>"
  overload: System.Data.EntityKey.EntityContainerName*
  exceptions: []
  platform:
  - net462
- uid: System.Data.EntityKey.EntityKeyValues
  id: EntityKeyValues
  parent: System.Data.EntityKey
  langs:
  - csharp
  name: EntityKeyValues
  nameWithType: EntityKey.EntityKeyValues
  fullName: System.Data.EntityKey.EntityKeyValues
  type: Property
  assemblies:
  - System.Data.Entity
  namespace: System.Data
  summary: "Hämtar eller anger viktiga värden som är associerade med den här <xref href=&quot;System.Data.EntityKey&quot;> </xref>."
  remarks: "Den <xref:System.Data.EntityKey>klassen innehåller en kopia av de värden som tillsammans bildar logiska nyckeln som har angetts för den här entiteten.</xref:System.Data.EntityKey>       Medlemmarna i den <xref:System.Collections.ObjectModel.ReadOnlyCollection%601>ha ett egenskapsnamn och ett värde i en <xref:System.Collections.Generic.KeyValuePair%602>, där nyckeln är namnet och värdet är det faktiska värdet för denna egenskap i objektet.</xref:System.Collections.Generic.KeyValuePair%602> </xref:System.Collections.ObjectModel.ReadOnlyCollection%601>"
  syntax:
    content: public System.Data.EntityKeyMember[] EntityKeyValues { get; set; }
    return:
      type: System.Data.EntityKeyMember[]
      description: "En &lt;xref:System.Collections.ObjectModel.ReadOnlyCollection%601&gt; av nyckelvärdena för det här <xref href=&quot;System.Data.EntityKey&quot;> </xref>."
  overload: System.Data.EntityKey.EntityKeyValues*
  exceptions: []
  platform:
  - net462
- uid: System.Data.EntityKey.EntityNotValidKey
  id: EntityNotValidKey
  parent: System.Data.EntityKey
  langs:
  - csharp
  name: EntityNotValidKey
  nameWithType: EntityKey.EntityNotValidKey
  fullName: System.Data.EntityKey.EntityNotValidKey
  type: Field
  assemblies:
  - System.Data.Entity
  namespace: System.Data
  summary: "En enkel <xref href=&quot;System.Data.EntityKey&quot;> </xref> identifiera en enhet som härrör från en misslyckad [BEHANDLAR](~/add/includes/ajax-current-ext-md.md) igen."
  remarks: "Det finns olika sätt att få en ogiltig entitet. Det vanligaste scenariot är när en [!INCLUDE[esql](~/add/includes/ajax-current-ext-md.md)] fråga använder den [BEHANDLAR](../Topic/TREAT%20\\(Entity%20SQL\\).md) operatorn för att tolka en instans av en polymorfisk typ som en viss typ och instans i fråga matchar inte. ([BEHANDLAR](../Topic/TREAT%20\\(Entity%20SQL\\).md) liknar C# `as` operatorn). I det här fallet frågan returnerar en entitet som inte är giltigt och enhetsnyckeln på den resulterande entiteten är inställd på EntityNotValidKey."
  syntax:
    content: public static readonly System.Data.EntityKey EntityNotValidKey;
    return:
      type: System.Data.EntityKey
      description: "Som ska läggas till."
  exceptions: []
  platform:
  - net462
- uid: System.Data.EntityKey.EntitySetName
  id: EntitySetName
  parent: System.Data.EntityKey
  langs:
  - csharp
  name: EntitySetName
  nameWithType: EntityKey.EntitySetName
  fullName: System.Data.EntityKey.EntitySetName
  type: Property
  assemblies:
  - System.Data.Entity
  namespace: System.Data
  summary: "Hämtar eller anger namnet på entitetsuppsättningen."
  syntax:
    content: public string EntitySetName { get; set; }
    return:
      type: System.String
      description: "En <xref:System.String>värde som är namnet på enheten som har angetts för entiteten som den <xref href=&quot;System.Data.EntityKey&quot;> </xref> tillhör.</xref:System.String>"
  overload: System.Data.EntityKey.EntitySetName*
  exceptions: []
  platform:
  - net462
- uid: System.Data.EntityKey.Equals(System.Data.EntityKey)
  id: Equals(System.Data.EntityKey)
  parent: System.Data.EntityKey
  langs:
  - csharp
  name: Equals(EntityKey)
  nameWithType: EntityKey.Equals(EntityKey)
  fullName: System.Data.EntityKey.Equals(EntityKey)
  type: Method
  assemblies:
  - System.Data.Entity
  namespace: System.Data
  summary: "Returnerar ett värde som anger om den här instansen är lika med en angiven <xref href=&quot;System.Data.EntityKey&quot;> </xref>."
  remarks: "Temporära nycklar har olika jämförelse semantik än permanent nycklar:-temporära nycklar använder referenslikheten. Det vill säga två refererar till exakt samma tillfälliga <xref:System.Data.EntityKey>instans är lika men inte andra <xref:System.Data.EntityKey>instanserna är lika.</xref:System.Data.EntityKey> </xref:System.Data.EntityKey>      -Permanent nycklarna bestämmer likheten baserat på värdena i inneslutna nyckelegenskaper och <xref:System.Data.Metadata.Edm.EntitySet>.</xref:System.Data.Metadata.Edm.EntitySet> Det vill säga du kan ha två separata <xref:System.Data.EntityKey>instanser som är lika med om deras entitetsuppsättningar är identiska och deras viktiga värden är lika.</xref:System.Data.EntityKey>       Temporära nycklar har dessutom ingen <xref:System.Data.Metadata.Edm.EntitySet>eller nyckelvärden, men permanent nycklar utföra</xref:System.Data.Metadata.Edm.EntitySet>"
  syntax:
    content: public bool Equals (System.Data.EntityKey other);
    parameters:
    - id: other
      type: System.Data.EntityKey
      description: "En <xref href=&quot;System.Data.EntityKey&quot;> </xref> objekt för att jämföra med den här instansen."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Om den här instansen och <code> other </code> har samma värden, annars <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Data.EntityKey.Equals*
  exceptions: []
  platform:
  - net462
- uid: System.Data.EntityKey.Equals(System.Object)
  id: Equals(System.Object)
  parent: System.Data.EntityKey
  langs:
  - csharp
  name: Equals(Object)
  nameWithType: EntityKey.Equals(Object)
  fullName: System.Data.EntityKey.Equals(Object)
  type: Method
  assemblies:
  - System.Data.Entity
  namespace: System.Data
  summary: "Returnerar ett värde som anger om den här instansen är lika med ett angivet-objekt."
  remarks: "Temporära nycklar har olika jämförelse semantik än permanent nycklar:-temporära nycklar använder referenslikheten. Det vill säga två refererar till exakt samma tillfälliga <xref:System.Data.EntityKey>instans är lika men inte andra <xref:System.Data.EntityKey>instanserna är lika.</xref:System.Data.EntityKey> </xref:System.Data.EntityKey>      -Permanent nycklarna bestämmer likheten baserat på värdena i inneslutna nyckelegenskaper och <xref:System.Data.Metadata.Edm.EntitySet>.</xref:System.Data.Metadata.Edm.EntitySet> Det vill säga du kan ha två separata <xref:System.Data.EntityKey>instanser som är lika med om deras <xref:System.Data.Metadata.Edm.EntitySet>objektet är samma objekt och deras värden är lika.</xref:System.Data.Metadata.Edm.EntitySet> </xref:System.Data.EntityKey>       Temporära nycklar har dessutom ingen <xref:System.Data.Metadata.Edm.EntitySet>eller nyckelvärden, men permanent nycklar utföra</xref:System.Data.Metadata.Edm.EntitySet>"
  syntax:
    content: public override bool Equals (object obj);
    parameters:
    - id: obj
      type: System.Object
      description: "En <xref:System.Object>ska jämföras med den här instansen.</xref:System.Object>"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Om den här instansen och <code> obj </code> har samma värden, annars <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Data.EntityKey.Equals*
  exceptions: []
  platform:
  - net462
- uid: System.Data.EntityKey.GetEntitySet(System.Data.Metadata.Edm.MetadataWorkspace)
  id: GetEntitySet(System.Data.Metadata.Edm.MetadataWorkspace)
  parent: System.Data.EntityKey
  langs:
  - csharp
  name: GetEntitySet(MetadataWorkspace)
  nameWithType: EntityKey.GetEntitySet(MetadataWorkspace)
  fullName: System.Data.EntityKey.GetEntitySet(MetadataWorkspace)
  type: Method
  assemblies:
  - System.Data.Entity
  namespace: System.Data
  summary: "Hämtar entitetsuppsättning för den här entitetsnyckeln från arbetsytan angivna metadata."
  remarks: "Entitetsuppsättningen nås baserat på entiteten behållarens namn och namnet på nyckeln."
  syntax:
    content: public System.Data.Metadata.Edm.EntitySet GetEntitySet (System.Data.Metadata.Edm.MetadataWorkspace metadataWorkspace);
    parameters:
    - id: metadataWorkspace
      type: System.Data.Metadata.Edm.MetadataWorkspace
      description: "Arbetsytan metadata som innehåller entiteten."
    return:
      type: System.Data.Metadata.Edm.EntitySet
      description: "Den <xref href=&quot;System.Data.Metadata.Edm.EntitySet&quot;> </xref> för enhetsnyckeln."
  overload: System.Data.EntityKey.GetEntitySet*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Det gick inte att hitta entitetsuppsättningen i arbetsytan angivna metadata."
  platform:
  - net462
- uid: System.Data.EntityKey.GetHashCode
  id: GetHashCode
  parent: System.Data.EntityKey
  langs:
  - csharp
  name: GetHashCode()
  nameWithType: EntityKey.GetHashCode()
  fullName: System.Data.EntityKey.GetHashCode()
  type: Method
  assemblies:
  - System.Data.Entity
  namespace: System.Data
  summary: "Fungerar som en hash-funktionen för aktuellt <xref href=&quot;System.Data.EntityKey&quot;> </xref> objekt. GetHashCode är lämplig för hash-algoritmer och datastrukturer som en hash-tabell."
  syntax:
    content: public override int GetHashCode ();
    parameters: []
    return:
      type: System.Int32
      description: "En hash-koden för aktuellt <xref href=&quot;System.Data.EntityKey&quot;> </xref>."
  overload: System.Data.EntityKey.GetHashCode*
  exceptions: []
  platform:
  - net462
- uid: System.Data.EntityKey.IsTemporary
  id: IsTemporary
  parent: System.Data.EntityKey
  langs:
  - csharp
  name: IsTemporary
  nameWithType: EntityKey.IsTemporary
  fullName: System.Data.EntityKey.IsTemporary
  type: Property
  assemblies:
  - System.Data.Entity
  namespace: System.Data
  summary: "Hämtar ett värde som anger om den <xref href=&quot;System.Data.EntityKey&quot;> </xref> är tillfällig."
  remarks: "När en ny entitet skapas den [!INCLUDE[adonet_ef](~/add/includes/adonet-ef-md.md)] definierar tillfällig nyckel och egenskapen IsTemporary `true`. När du anropar den <xref:System.Data.Objects.ObjectContext.SaveChanges%2A>-metoden i [!INCLUDE[adonet_ef](~/add/includes/adonet-ef-md.md)] tilldelas en permanent nyckel och egenskapen IsTemporary `false`.</xref:System.Data.Objects.ObjectContext.SaveChanges%2A>      > [!NOTE] > Temporära nycklar skapas automatiskt av framework; kan inte konstrueras direkt av en användare.       Temporära nycklar har olika jämförelse semantik än permanent nycklar:-temporära nycklar använder referenslikheten. Det vill säga två refererar till exakt samma tillfälliga <xref:System.Data.EntityKey>instans är lika men inte andra <xref:System.Data.EntityKey>instanserna är lika.</xref:System.Data.EntityKey> </xref:System.Data.EntityKey>      -Permanent nycklarna bestämmer likheten baserat på värdena i inneslutna nyckelegenskaper och <xref:System.Data.Metadata.Edm.EntitySet>.</xref:System.Data.Metadata.Edm.EntitySet> Det vill säga du kan ha två separata <xref:System.Data.EntityKey>instanser som är lika med om deras entitetsuppsättningar är identiska och deras viktiga värden är lika.</xref:System.Data.EntityKey>       Temporära nycklar har dessutom ingen <xref:System.Data.Metadata.Edm.EntitySet>eller nyckelvärden, men permanent nycklar utföra</xref:System.Data.Metadata.Edm.EntitySet>       När den <xref:System.Data.Objects.ObjectStateEntry.AcceptChanges%2A>metoden anropas för en entitet <xref:System.Data.Objects.ObjectStateEntry>och entiteten övergångar från den <xref:System.Data.EntityState>till <xref:System.Data.EntityState>tillstånd, den [!INCLUDE[adonet_ef](~/add/includes/adonet-ef-md.md)] automatiskt beräknar en ny permanent nyckel för entiteten och synkroniserar alla temporära nycklar referenser.</xref:System.Data.EntityState> </xref:System.Data.EntityState> </xref:System.Data.Objects.ObjectStateEntry> </xref:System.Data.Objects.ObjectStateEntry.AcceptChanges%2A>"
  syntax:
    content: public bool IsTemporary { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Om den <xref href=&quot;System.Data.EntityKey&quot;> </xref> är tillfälligt, annars <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Data.EntityKey.IsTemporary*
  exceptions: []
  platform:
  - net462
- uid: System.Data.EntityKey.NoEntitySetKey
  id: NoEntitySetKey
  parent: System.Data.EntityKey
  langs:
  - csharp
  name: NoEntitySetKey
  nameWithType: EntityKey.NoEntitySetKey
  fullName: System.Data.EntityKey.NoEntitySetKey
  type: Field
  assemblies:
  - System.Data.Entity
  namespace: System.Data
  summary: "En singleton <xref href=&quot;System.Data.EntityKey&quot;> </xref> av en skrivskyddad enhet har identifierats."
  remarks: "En skrivskyddad enhet identifierar en enhet som är giltig i varje sätt, förutom att det inte är associerad med en faktisk enhet. Detta kan inträffa som en del av resultatet av en [!INCLUDE[esql](~/add/includes/ajax-current-ext-md.md)] fråga som skapar och returnerar en entitetsinstans som anges i texten för frågan (i stället för en entitet som har hämtats från en databastabell). En entitet som inte har en entitet som angetts kan inte behållas i databasen tills den är associerad med vissa entitetsuppsättning. Därför objektet materializer behandlar den här typen av enhet som om den <xref:System.Data.Objects.MergeOption>sammanslagningsalternativ har angetts, oavsett faktiska merge-alternativ som angavs.</xref:System.Data.Objects.MergeOption> Ett entitetsobjekt skapas, men kommer inte att matcha sin identitet och den kommer inte att lägga till tillståndshanterarens som en del av processen materialisering."
  syntax:
    content: public static readonly System.Data.EntityKey NoEntitySetKey;
    return:
      type: System.Data.EntityKey
      description: "Som ska läggas till."
  exceptions: []
  platform:
  - net462
- uid: System.Data.EntityKey.OnDeserialized(System.Runtime.Serialization.StreamingContext)
  id: OnDeserialized(System.Runtime.Serialization.StreamingContext)
  parent: System.Data.EntityKey
  langs:
  - csharp
  name: OnDeserialized(StreamingContext)
  nameWithType: EntityKey.OnDeserialized(StreamingContext)
  fullName: System.Data.EntityKey.OnDeserialized(StreamingContext)
  type: Method
  assemblies:
  - System.Data.Entity
  namespace: System.Data
  summary: "Helper-metod som används för att deserialisera en <xref href=&quot;System.Data.EntityKey&quot;> </xref>."
  remarks: "OnDeserialized används av tjänster vid deserialisering av ett <xref:System.Data.EntityKey>.</xref:System.Data.EntityKey> Mer information finns i [serialisering av objekt](http://msdn.microsoft.com/en-us/06c77f9b-5b2e-4c78-b3e3-8c148ba0ea99)."
  syntax:
    content: public void OnDeserialized (System.Runtime.Serialization.StreamingContext context);
    parameters:
    - id: context
      type: System.Runtime.Serialization.StreamingContext
      description: "Beskriver källa och mål för en given serialiserad dataström och ger en ytterligare kontext som definieras av anroparen."
  overload: System.Data.EntityKey.OnDeserialized*
  exceptions: []
  platform:
  - net462
- uid: System.Data.EntityKey.OnDeserializing(System.Runtime.Serialization.StreamingContext)
  id: OnDeserializing(System.Runtime.Serialization.StreamingContext)
  parent: System.Data.EntityKey
  langs:
  - csharp
  name: OnDeserializing(StreamingContext)
  nameWithType: EntityKey.OnDeserializing(StreamingContext)
  fullName: System.Data.EntityKey.OnDeserializing(StreamingContext)
  type: Method
  assemblies:
  - System.Data.Entity
  namespace: System.Data
  summary: "Helper-metod som används för att deserialisera en <xref href=&quot;System.Data.EntityKey&quot;> </xref>."
  remarks: "OnDeserializing används av tjänster vid deserialisering av ett <xref:System.Data.EntityKey>.</xref:System.Data.EntityKey> Mer information finns i [serialisering av objekt](http://msdn.microsoft.com/en-us/06c77f9b-5b2e-4c78-b3e3-8c148ba0ea99)."
  syntax:
    content: public void OnDeserializing (System.Runtime.Serialization.StreamingContext context);
    parameters:
    - id: context
      type: System.Runtime.Serialization.StreamingContext
      description: "Beskriver källa och mål för en given serialiserad dataström och ger en ytterligare kontext som definieras av anroparen."
  overload: System.Data.EntityKey.OnDeserializing*
  exceptions: []
  platform:
  - net462
- uid: System.Data.EntityKey.op_Equality(System.Data.EntityKey,System.Data.EntityKey)
  id: op_Equality(System.Data.EntityKey,System.Data.EntityKey)
  parent: System.Data.EntityKey
  langs:
  - csharp
  name: op_Equality(EntityKey,EntityKey)
  nameWithType: EntityKey.op_Equality(EntityKey,EntityKey)
  fullName: System.Data.EntityKey.op_Equality(EntityKey,EntityKey)
  type: Operator
  assemblies:
  - System.Data.Entity
  namespace: System.Data
  summary: "Jämför två <xref href=&quot;System.Data.EntityKey&quot;> </xref> objekt."
  remarks: "Temporära nycklar har olika jämförelse semantik än permanent nycklar:-temporära nycklar använder referenslikheten. Det vill säga två refererar till exakt samma tillfälliga <xref:System.Data.EntityKey>instans är lika men inte andra <xref:System.Data.EntityKey>instanserna är lika.</xref:System.Data.EntityKey> </xref:System.Data.EntityKey>      -Permanent nycklarna bestämmer likheten baserat på värdena i inneslutna nyckelegenskaper och <xref:System.Data.Metadata.Edm.EntitySet>.</xref:System.Data.Metadata.Edm.EntitySet> Det vill säga du kan ha två separata <xref:System.Data.EntityKey>instanser som är lika med om deras entitetsuppsättningar är identiska och deras viktiga värden är lika.</xref:System.Data.EntityKey>       Temporära nycklar har dessutom ingen <xref:System.Data.Metadata.Edm.EntitySet>eller nyckelvärden, men permanent nycklar utföra</xref:System.Data.Metadata.Edm.EntitySet>"
  syntax:
    content: public static bool op_Equality (System.Data.EntityKey key1, System.Data.EntityKey key2);
    parameters:
    - id: key1
      type: System.Data.EntityKey
      description: "En <xref href=&quot;System.Data.EntityKey&quot;> </xref> ska jämföras."
    - id: key2
      type: System.Data.EntityKey
      description: "En <xref href=&quot;System.Data.EntityKey&quot;> </xref> ska jämföras."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>if the <code>key1</code> and <code>key2</code> values are equal; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Data.EntityKey.op_Equality*
  exceptions: []
  platform:
  - net462
- uid: System.Data.EntityKey.op_Inequality(System.Data.EntityKey,System.Data.EntityKey)
  id: op_Inequality(System.Data.EntityKey,System.Data.EntityKey)
  parent: System.Data.EntityKey
  langs:
  - csharp
  name: op_Inequality(EntityKey,EntityKey)
  nameWithType: EntityKey.op_Inequality(EntityKey,EntityKey)
  fullName: System.Data.EntityKey.op_Inequality(EntityKey,EntityKey)
  type: Operator
  assemblies:
  - System.Data.Entity
  namespace: System.Data
  summary: "Jämför två <xref href=&quot;System.Data.EntityKey&quot;> </xref> objekt."
  remarks: "Temporära nycklar har olika jämförelse semantik än permanent nycklar:-temporära nycklar använder referenslikheten. Det vill säga två refererar till exakt samma tillfälliga <xref:System.Data.EntityKey>instans är lika men inte andra <xref:System.Data.EntityKey>instanserna är lika.</xref:System.Data.EntityKey> </xref:System.Data.EntityKey>      -Permanent nycklarna bestämmer likheten baserat på värdena i inneslutna nyckelegenskaper och <xref:System.Data.Metadata.Edm.EntitySet>.</xref:System.Data.Metadata.Edm.EntitySet> Det vill säga du kan ha två separata <xref:System.Data.EntityKey>instanser som är lika med om deras entitetsuppsättningar är identiska och deras viktiga värden är lika.</xref:System.Data.EntityKey>       Temporära nycklar har dessutom ingen <xref:System.Data.Metadata.Edm.EntitySet>eller nyckelvärden, men utföra regelbundna nycklar</xref:System.Data.Metadata.Edm.EntitySet>"
  syntax:
    content: public static bool op_Inequality (System.Data.EntityKey key1, System.Data.EntityKey key2);
    parameters:
    - id: key1
      type: System.Data.EntityKey
      description: "En <xref href=&quot;System.Data.EntityKey&quot;> </xref> ska jämföras."
    - id: key2
      type: System.Data.EntityKey
      description: "En <xref href=&quot;System.Data.EntityKey&quot;> </xref> ska jämföras."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>if the <code>key1</code> and <code>key2</code> values are not equal; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Data.EntityKey.op_Inequality*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.Data.EntityKey.#ctor
  parent: System.Data.EntityKey
  isExternal: false
  name: EntityKey()
  nameWithType: EntityKey.EntityKey()
  fullName: System.Data.EntityKey.EntityKey()
- uid: System.Data.EntityKey.#ctor(System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}})
  parent: System.Data.EntityKey
  isExternal: false
  name: EntityKey(String,IEnumerable<KeyValuePair<String,Object>>)
  nameWithType: EntityKey.EntityKey(String,IEnumerable<KeyValuePair<String,Object>>)
  fullName: System.Data.EntityKey.EntityKey(String,IEnumerable<KeyValuePair<String,Object>>)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}}
  parent: System.Collections.Generic
  isExternal: true
  name: IEnumerable<KeyValuePair<String,Object>>
  nameWithType: IEnumerable<KeyValuePair<String,Object>>
  fullName: System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.String,System.Object>>
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable<System.Collections.Generic.KeyValuePair<System.String,System.Object>>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: KeyValuePair<System.String,System.Object>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: Object
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Data.EntityKey.#ctor(System.String,System.Collections.Generic.IEnumerable{System.Data.EntityKeyMember})
  parent: System.Data.EntityKey
  isExternal: false
  name: EntityKey(String,IEnumerable<EntityKeyMember>)
  nameWithType: EntityKey.EntityKey(String,IEnumerable<EntityKeyMember>)
  fullName: System.Data.EntityKey.EntityKey(String,IEnumerable<EntityKeyMember>)
- uid: System.Collections.Generic.IEnumerable{System.Data.EntityKeyMember}
  parent: System.Collections.Generic
  isExternal: true
  name: IEnumerable<EntityKeyMember>
  nameWithType: IEnumerable<EntityKeyMember>
  fullName: System.Collections.Generic.IEnumerable<System.Data.EntityKeyMember>
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable<System.Data.EntityKeyMember>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Data.EntityKeyMember
    name: EntityKeyMember
    nameWithType: EntityKeyMember
    fullName: EntityKeyMember
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Data.EntityKey.#ctor(System.String,System.String,System.Object)
  parent: System.Data.EntityKey
  isExternal: false
  name: EntityKey(String,String,Object)
  nameWithType: EntityKey.EntityKey(String,String,Object)
  fullName: System.Data.EntityKey.EntityKey(String,String,Object)
- uid: System.Data.EntityKey.EntityContainerName
  parent: System.Data.EntityKey
  isExternal: false
  name: EntityContainerName
  nameWithType: EntityKey.EntityContainerName
  fullName: System.Data.EntityKey.EntityContainerName
- uid: System.Data.EntityKey.EntityKeyValues
  parent: System.Data.EntityKey
  isExternal: false
  name: EntityKeyValues
  nameWithType: EntityKey.EntityKeyValues
  fullName: System.Data.EntityKey.EntityKeyValues
- uid: System.Data.EntityKeyMember[]
  parent: System.Data
  isExternal: false
  name: EntityKeyMember
  nameWithType: EntityKeyMember
  fullName: System.Data.EntityKeyMember[]
  spec.csharp:
  - uid: System.Data.EntityKeyMember
    name: EntityKeyMember
    nameWithType: EntityKeyMember
    fullName: EntityKeyMember[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Data.EntityKey.EntityNotValidKey
  parent: System.Data.EntityKey
  isExternal: false
  name: EntityNotValidKey
  nameWithType: EntityKey.EntityNotValidKey
  fullName: System.Data.EntityKey.EntityNotValidKey
- uid: System.Data.EntityKey
  parent: System.Data
  isExternal: false
  name: EntityKey
  nameWithType: EntityKey
  fullName: System.Data.EntityKey
- uid: System.Data.EntityKey.EntitySetName
  parent: System.Data.EntityKey
  isExternal: false
  name: EntitySetName
  nameWithType: EntityKey.EntitySetName
  fullName: System.Data.EntityKey.EntitySetName
- uid: System.Data.EntityKey.Equals(System.Data.EntityKey)
  parent: System.Data.EntityKey
  isExternal: false
  name: Equals(EntityKey)
  nameWithType: EntityKey.Equals(EntityKey)
  fullName: System.Data.EntityKey.Equals(EntityKey)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Data.EntityKey.Equals(System.Object)
  parent: System.Data.EntityKey
  isExternal: false
  name: Equals(Object)
  nameWithType: EntityKey.Equals(Object)
  fullName: System.Data.EntityKey.Equals(Object)
- uid: System.Data.EntityKey.GetEntitySet(System.Data.Metadata.Edm.MetadataWorkspace)
  parent: System.Data.EntityKey
  isExternal: false
  name: GetEntitySet(MetadataWorkspace)
  nameWithType: EntityKey.GetEntitySet(MetadataWorkspace)
  fullName: System.Data.EntityKey.GetEntitySet(MetadataWorkspace)
- uid: System.Data.Metadata.Edm.EntitySet
  parent: System.Data.Metadata.Edm
  isExternal: false
  name: EntitySet
  nameWithType: EntitySet
  fullName: System.Data.Metadata.Edm.EntitySet
- uid: System.Data.Metadata.Edm.MetadataWorkspace
  parent: System.Data.Metadata.Edm
  isExternal: false
  name: MetadataWorkspace
  nameWithType: MetadataWorkspace
  fullName: System.Data.Metadata.Edm.MetadataWorkspace
- uid: System.Data.EntityKey.GetHashCode
  parent: System.Data.EntityKey
  isExternal: false
  name: GetHashCode()
  nameWithType: EntityKey.GetHashCode()
  fullName: System.Data.EntityKey.GetHashCode()
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Data.EntityKey.IsTemporary
  parent: System.Data.EntityKey
  isExternal: false
  name: IsTemporary
  nameWithType: EntityKey.IsTemporary
  fullName: System.Data.EntityKey.IsTemporary
- uid: System.Data.EntityKey.NoEntitySetKey
  parent: System.Data.EntityKey
  isExternal: false
  name: NoEntitySetKey
  nameWithType: EntityKey.NoEntitySetKey
  fullName: System.Data.EntityKey.NoEntitySetKey
- uid: System.Data.EntityKey.OnDeserialized(System.Runtime.Serialization.StreamingContext)
  parent: System.Data.EntityKey
  isExternal: false
  name: OnDeserialized(StreamingContext)
  nameWithType: EntityKey.OnDeserialized(StreamingContext)
  fullName: System.Data.EntityKey.OnDeserialized(StreamingContext)
- uid: System.Runtime.Serialization.StreamingContext
  parent: System.Runtime.Serialization
  isExternal: true
  name: StreamingContext
  nameWithType: StreamingContext
  fullName: System.Runtime.Serialization.StreamingContext
- uid: System.Data.EntityKey.OnDeserializing(System.Runtime.Serialization.StreamingContext)
  parent: System.Data.EntityKey
  isExternal: false
  name: OnDeserializing(StreamingContext)
  nameWithType: EntityKey.OnDeserializing(StreamingContext)
  fullName: System.Data.EntityKey.OnDeserializing(StreamingContext)
- uid: System.Data.EntityKey.op_Equality(System.Data.EntityKey,System.Data.EntityKey)
  parent: System.Data.EntityKey
  isExternal: false
  name: op_Equality(EntityKey,EntityKey)
  nameWithType: EntityKey.op_Equality(EntityKey,EntityKey)
  fullName: System.Data.EntityKey.op_Equality(EntityKey,EntityKey)
- uid: System.Data.EntityKey.op_Inequality(System.Data.EntityKey,System.Data.EntityKey)
  parent: System.Data.EntityKey
  isExternal: false
  name: op_Inequality(EntityKey,EntityKey)
  nameWithType: EntityKey.op_Inequality(EntityKey,EntityKey)
  fullName: System.Data.EntityKey.op_Inequality(EntityKey,EntityKey)
- uid: System.Data.EntityKey.#ctor*
  parent: System.Data.EntityKey
  isExternal: false
  name: EntityKey
  nameWithType: EntityKey.EntityKey
- uid: System.Data.EntityKey.EntityContainerName*
  parent: System.Data.EntityKey
  isExternal: false
  name: EntityContainerName
  nameWithType: EntityKey.EntityContainerName
- uid: System.Data.EntityKey.EntityKeyValues*
  parent: System.Data.EntityKey
  isExternal: false
  name: EntityKeyValues
  nameWithType: EntityKey.EntityKeyValues
- uid: System.Data.EntityKey.EntitySetName*
  parent: System.Data.EntityKey
  isExternal: false
  name: EntitySetName
  nameWithType: EntityKey.EntitySetName
- uid: System.Data.EntityKey.Equals*
  parent: System.Data.EntityKey
  isExternal: false
  name: Equals
  nameWithType: EntityKey.Equals
- uid: System.Data.EntityKey.GetEntitySet*
  parent: System.Data.EntityKey
  isExternal: false
  name: GetEntitySet
  nameWithType: EntityKey.GetEntitySet
- uid: System.Data.EntityKey.GetHashCode*
  parent: System.Data.EntityKey
  isExternal: false
  name: GetHashCode
  nameWithType: EntityKey.GetHashCode
- uid: System.Data.EntityKey.IsTemporary*
  parent: System.Data.EntityKey
  isExternal: false
  name: IsTemporary
  nameWithType: EntityKey.IsTemporary
- uid: System.Data.EntityKey.OnDeserialized*
  parent: System.Data.EntityKey
  isExternal: false
  name: OnDeserialized
  nameWithType: EntityKey.OnDeserialized
- uid: System.Data.EntityKey.OnDeserializing*
  parent: System.Data.EntityKey
  isExternal: false
  name: OnDeserializing
  nameWithType: EntityKey.OnDeserializing
- uid: System.Data.EntityKey.op_Equality*
  parent: System.Data.EntityKey
  isExternal: false
  name: op_Equality
  nameWithType: EntityKey.op_Equality
- uid: System.Data.EntityKey.op_Inequality*
  parent: System.Data.EntityKey
  isExternal: false
  name: op_Inequality
  nameWithType: EntityKey.op_Inequality
