### YamlMime:ManagedReference
items:
- uid: System.Diagnostics.EventLog
  id: EventLog
  children:
  - System.Diagnostics.EventLog.#ctor
  - System.Diagnostics.EventLog.#ctor(System.String)
  - System.Diagnostics.EventLog.#ctor(System.String,System.String)
  - System.Diagnostics.EventLog.#ctor(System.String,System.String,System.String)
  - System.Diagnostics.EventLog.BeginInit
  - System.Diagnostics.EventLog.Clear
  - System.Diagnostics.EventLog.Close
  - System.Diagnostics.EventLog.CreateEventSource(System.Diagnostics.EventSourceCreationData)
  - System.Diagnostics.EventLog.CreateEventSource(System.String,System.String)
  - System.Diagnostics.EventLog.CreateEventSource(System.String,System.String,System.String)
  - System.Diagnostics.EventLog.Delete(System.String)
  - System.Diagnostics.EventLog.Delete(System.String,System.String)
  - System.Diagnostics.EventLog.DeleteEventSource(System.String)
  - System.Diagnostics.EventLog.DeleteEventSource(System.String,System.String)
  - System.Diagnostics.EventLog.Dispose(System.Boolean)
  - System.Diagnostics.EventLog.EnableRaisingEvents
  - System.Diagnostics.EventLog.EndInit
  - System.Diagnostics.EventLog.Entries
  - System.Diagnostics.EventLog.EntryWritten
  - System.Diagnostics.EventLog.Exists(System.String)
  - System.Diagnostics.EventLog.Exists(System.String,System.String)
  - System.Diagnostics.EventLog.GetEventLogs
  - System.Diagnostics.EventLog.GetEventLogs(System.String)
  - System.Diagnostics.EventLog.Log
  - System.Diagnostics.EventLog.LogDisplayName
  - System.Diagnostics.EventLog.LogNameFromSourceName(System.String,System.String)
  - System.Diagnostics.EventLog.MachineName
  - System.Diagnostics.EventLog.MaximumKilobytes
  - System.Diagnostics.EventLog.MinimumRetentionDays
  - System.Diagnostics.EventLog.ModifyOverflowPolicy(System.Diagnostics.OverflowAction,System.Int32)
  - System.Diagnostics.EventLog.OverflowAction
  - System.Diagnostics.EventLog.RegisterDisplayName(System.String,System.Int64)
  - System.Diagnostics.EventLog.Source
  - System.Diagnostics.EventLog.SourceExists(System.String)
  - System.Diagnostics.EventLog.SourceExists(System.String,System.String)
  - System.Diagnostics.EventLog.SynchronizingObject
  - System.Diagnostics.EventLog.WriteEntry(System.String)
  - System.Diagnostics.EventLog.WriteEntry(System.String,System.Diagnostics.EventLogEntryType)
  - System.Diagnostics.EventLog.WriteEntry(System.String,System.String)
  - System.Diagnostics.EventLog.WriteEntry(System.String,System.Diagnostics.EventLogEntryType,System.Int32)
  - System.Diagnostics.EventLog.WriteEntry(System.String,System.String,System.Diagnostics.EventLogEntryType)
  - System.Diagnostics.EventLog.WriteEntry(System.String,System.Diagnostics.EventLogEntryType,System.Int32,System.Int16)
  - System.Diagnostics.EventLog.WriteEntry(System.String,System.String,System.Diagnostics.EventLogEntryType,System.Int32)
  - System.Diagnostics.EventLog.WriteEntry(System.String,System.Diagnostics.EventLogEntryType,System.Int32,System.Int16,System.Byte[])
  - System.Diagnostics.EventLog.WriteEntry(System.String,System.String,System.Diagnostics.EventLogEntryType,System.Int32,System.Int16)
  - System.Diagnostics.EventLog.WriteEntry(System.String,System.String,System.Diagnostics.EventLogEntryType,System.Int32,System.Int16,System.Byte[])
  - System.Diagnostics.EventLog.WriteEvent(System.Diagnostics.EventInstance,System.Object[])
  - System.Diagnostics.EventLog.WriteEvent(System.Diagnostics.EventInstance,System.Byte[],System.Object[])
  - System.Diagnostics.EventLog.WriteEvent(System.String,System.Diagnostics.EventInstance,System.Object[])
  - System.Diagnostics.EventLog.WriteEvent(System.String,System.Diagnostics.EventInstance,System.Byte[],System.Object[])
  langs:
  - csharp
  name: EventLog
  nameWithType: EventLog
  fullName: System.Diagnostics.EventLog
  type: Class
  summary: "Tillhandahåller interaktion med händelseloggar i Windows."
  remarks: "Händelseloggen kan du komma åt eller anpassa Windows-händelseloggar, som registrerar information om viktiga händelser för programvara eller maskinvara. Använda händelseloggen kan du läsa från befintliga loggar, skriva poster till loggar, skapa eller ta bort händelsekällor, ta bort loggar och svarar på loggposter. Du kan också skapa nya loggar när du skapar en händelsekälla.      > [!IMPORTANT] > Den här typen implementerar den <xref:System.IDisposable>gränssnitt.</xref:System.IDisposable> När du är klar med typ, ta bort den direkt eller indirekt. Om du vill ta bort av typen direkt, anropa dess <xref:System.IDisposable.Dispose%2A>metod i en `try` / `catch` block.</xref:System.IDisposable.Dispose%2A> Om du vill ta hand om den indirekt, använda en språk-konstruktion som `using` (i C#) eller `Using` (i Visual Basic). Mer information finns i avsnittet &quot;Med hjälp av ett objekt som implementerar IDisposable&quot; i den <xref:System.IDisposable>gränssnittet avsnittet.</xref:System.IDisposable>       Förutom att ge åtkomst till enskilda händelseloggar och deras poster, kan EventLog-klassen du öppna insamling av alla händelseloggar. Du kan använda den `static` medlemmar i händelseloggen för att ta bort loggar, hämta loggen listor, skapa eller ta bort en källa eller avgöra om en dator som redan innehåller en viss källa.       Det finns tre standard händelseloggar: program, System och säkerhet. En säkerhetslogg är skrivskyddad. Andra program och tjänster som du installerar, till exempel Active Directory, kan ha ytterligare händelseloggar.       Det är några säkerhetsaspekter när du använder EventLog-klassen. Händelseloggen kräver <xref:System.Diagnostics.EventLogPermission>behörigheter för specifika åtgärder i .NET Framework 2.0 och senare versioner eller fullständigt förtroende i .NET Framework 1.0- och 1.1.</xref:System.Diagnostics.EventLogPermission> Vi rekommenderar att <xref:System.Diagnostics.EventLogPermission>inte beviljas delvis betrodd kod.</xref:System.Diagnostics.EventLogPermission>  Du bör aldrig lägga till händelseloggen objekt, inklusive <xref:System.Diagnostics.EventLogEntryCollection>och <xref:System.Diagnostics.EventLogEntry>objekt, i mindre betrodd kod.</xref:System.Diagnostics.EventLogEntry> </xref:System.Diagnostics.EventLogEntryCollection> Till exempel kan skapar EventLog-objekt, skriver en post och sedan överföra händelseloggen objekt som delvis betrodd kod skapa ett säkerhetsproblem eftersom möjligheten att läsa och skriva till händelseloggen tillåter kod för att utföra åtgärder som utfärdar händelseloggmeddelanden i ett annat program.       Från och med Windows Vista anger kontroll av användarkonto (User Account Control) autentiseringsuppgifterna för en användare. Om du är medlem i gruppen inbyggda administratörer tilldelas två körning åtkomst-token: en standardanvändares åtkomst-token och en administratör åtkomst-token. Som standard är standard användarrollen. Om du vill köra koden som ansluter till säkerhetsloggen måste du först höja dina autentiseringsuppgifter från standardanvändare till administratören. Du kan göra detta när du startar ett program genom att öppna snabbmenyn för programmet (om du använder en mus, högerklickar du på ikonen) och som anger att du vill köra som administratör.       Du kan använda händelseloggen för att skapa anpassade händelseloggar som du kan visa via serverns Loggboken. Använd den <xref:System.Diagnostics.EventLog.RegisterDisplayName%2A>metod för att visa ett lokaliserat namn på händelseloggen i Loggboken.</xref:System.Diagnostics.EventLog.RegisterDisplayName%2A> Använd den <xref:System.Diagnostics.EventLog.ModifyOverflowPolicy%2A>metoden för att konfigurera beteendet för händelseloggen när den når sin maximala storlek.</xref:System.Diagnostics.EventLog.ModifyOverflowPolicy%2A>       Ange namnet på loggen om du vill läsa från en händelselogg (<xref:System.Diagnostics.EventLog.Log%2A> egenskapen) och datornamn (<xref:System.Diagnostics.EventLog.MachineName%2A> egenskapen för händelseloggen</xref:System.Diagnostics.EventLog.MachineName%2A> </xref:System.Diagnostics.EventLog.Log%2A> Om du inte anger datornamnet för servern, den lokala datorn, &quot;.&quot;, antas. Det är inte nödvändigt att ange händelsekällan (<xref:System.Diagnostics.EventLog.Source%2A> egenskapen), eftersom en källa krävs endast för att skriva till loggar.</xref:System.Diagnostics.EventLog.Source%2A> Den <xref:System.Diagnostics.EventLog.Entries%2A>egenskapen fylls automatiskt i händelseloggen lista med poster.</xref:System.Diagnostics.EventLog.Entries%2A>       Ange om du vill skriva till en händelselogg eller skapa en händelsekälla (<xref:System.Diagnostics.EventLog.Source%2A> egenskap).</xref:System.Diagnostics.EventLog.Source%2A> Du måste ha administratörsbehörighet på datorn för att skapa en ny händelsekälla. Händelsekällan registrerar ditt program med händelseloggen som en giltig källa för transaktioner. Du kan använda händelsekällan för att skriva till endast en logg i taget. Den <xref:System.Diagnostics.EventLog.Source%2A>egenskapen kan vara en slumpmässig sträng, men namnet måste vara avskild från andra källor på datorn.</xref:System.Diagnostics.EventLog.Source%2A> Händelsekällan är vanligtvis namnet på programmet eller en annan identifierande sträng. Försök att skapa en dubblett <xref:System.Diagnostics.EventLog.Source%2A>värdet genererar ett undantag.</xref:System.Diagnostics.EventLog.Source%2A> En enskild händelselogg kan dock vara kopplad till flera källor.       Om händelsekällan för händelseloggen som är kopplat till EventLog-instansen inte finns, skapas en ny händelsekälla. Om du vill skapa en händelsekälla i Windows Vista och senare eller Windows Server 2003, måste du ha administratörsbehörighet.       Det här kravet är eftersom alla händelseloggar, inklusive säkerhetsloggar, måste sökas igenom för att avgöra om händelsekällan är unika. Från och med Windows Vista har användare inte behörighet att komma åt säkerhetsloggen; Därför kan en <xref:System.Security.SecurityException>genereras.</xref:System.Security.SecurityException>      > [!IMPORTANT] > Att skapa eller ta bort en händelsekälla kräver synkronisering av underliggande kod via en namngiven mutex. Om ett mycket Privilegierade program låser namngiven mutex, gör försök att skapa eller ta bort en händelsekälla att programmet slutar svara tills låset frigörs. Om du vill undvika det här problemet, aldrig bevilja <xref:System.Security.Permissions.SecurityPermissionFlag>behörighet att icke betrodd kod.</xref:System.Security.Permissions.SecurityPermissionFlag> Dessutom <xref:System.Security.Permissions.SecurityPermissionFlag>behörighet potentiellt kan andra behörigheter kan åsidosättas och bör endast beviljas till hög betrodd kod.</xref:System.Security.Permissions.SecurityPermissionFlag>       Program och tjänster ska skriva till programloggen eller till en anpassad logg. Drivrutiner ska skriva i systemloggen. Om du inte uttryckligen anger <xref:System.Diagnostics.EventLog.Log%2A>egenskapen händelseloggen standardvärdena till programmets.</xref:System.Diagnostics.EventLog.Log%2A>      > [!NOTE] > Det finns inget att skydda ett program från att skriva som alla registrerade datakällor.  Om ett program har beviljats <xref:System.Diagnostics.EventLogPermissionAccess>behörighet, det kan skriva händelser för någon giltig källa som är registrerad på datorn.</xref:System.Diagnostics.EventLogPermissionAccess>       Använd <xref:System.Diagnostics.EventLog.WriteEvent%2A>och <xref:System.Diagnostics.EventLog.WriteEntry%2A>metoder för att skriva händelser till en händelselogg.</xref:System.Diagnostics.EventLog.WriteEntry%2A> </xref:System.Diagnostics.EventLog.WriteEvent%2A> Du måste ange en händelsekälla om du vill skriva händelser. Du måste skapa och konfigurera händelsekällan innan den första posten med källan.       Skapa ny händelsekälla under installationen av programmet. Det ger dig tid för operativsystemet för att uppdatera listan över registrerade händelsekällor och deras konfiguration. Om operativsystemet har inte uppdaterats sin lista över händelsekällor och försök att skriva en händelse med källan nya Skrivåtgärden misslyckas. Du kan konfigurera en ny datakälla med hjälp av en <xref:System.Diagnostics.EventLogInstaller>objektet eller <xref:System.Diagnostics.EventLog.CreateEventSource%2A>metod.</xref:System.Diagnostics.EventLog.CreateEventSource%2A> </xref:System.Diagnostics.EventLogInstaller> Du måste ha administratörsbehörighet på datorn för att skapa en ny händelsekälla.       Varje källa kan skriva till händelseloggen för endast en i taget. programmet kan dock använda flera källor för att skriva till flera händelseloggar. Programmet kan till exempel kräva flera källor som konfigurerats för olika händelseloggar eller annan resursfiler. Om du vill ändra konfigurationsinformationen för en befintlig datakälla måste du ta bort källan och sedan skapa den med den nya konfigurationen. Om andra program eller -komponenter använder befintliga källan, skapar du en ny källa med den uppdaterade konfigurationen i stället för att ta bort den befintliga datakällan.       Du kan registrera händelsekällan med lokaliserade resurserna för din händelse kategori och meddelandet strängar. Programmet kan skriva händelseloggposter med resursidentifierare i stället för att ange de faktiska strängvärdena. Referera till den <xref:System.Diagnostics.EventLogInstaller>och <xref:System.Diagnostics.EventSourceCreationData>klasser för mer information om hur du konfigurerar din datakälla med resursfiler.</xref:System.Diagnostics.EventSourceCreationData> </xref:System.Diagnostics.EventLogInstaller>       Om programmet skriver strängvärden direkt till händelseloggen, behöver du inte ange egenskaper för källan för resursen. Källan måste konfigureras för att skriva lokaliserade poster eller för att skriva direkt strängar. Om ditt program skrivs poster med både resursidentifierare och strängvärden, måste du registrera två olika källor. Till exempel konfigurera en källa med resursfiler och sedan använda som källa i <xref:System.Diagnostics.EventLog.WriteEvent%2A>metoden att skriva poster med hjälp av resursidentifierare till händelseloggen.</xref:System.Diagnostics.EventLog.WriteEvent%2A> Skapa sedan en annan källa utan resursfiler, och använda som källa i den <xref:System.Diagnostics.EventLog.WriteEntry%2A>metod för att skriva strängar direkt till händelseloggen med hjälp av den här källan.</xref:System.Diagnostics.EventLog.WriteEntry%2A>       När skrivs händelser, måste du minst ange antingen en message-sträng eller resurs-ID för en message-sträng. Andra egenskaper för händelse är valfria. Exempel på inställningar för valfri händelse är följande:-du kan ange den <xref:System.Diagnostics.EventLogEntryType>Ange vilken ikon som visas i Loggboken för posten.</xref:System.Diagnostics.EventLogEntryType>      -Du kan ange en kategori-ID för händelsen, om programmet använder kategorier för att filtrera händelser.      -Du kan koppla binärdata till händelsepost om du vill koppla ytterligare information till en given händelse.      > [!IMPORTANT] > Händelseloggning tar upp diskutrymme, processortid och andra systemresurser. Det är viktigt att logga bara viktig information. Vi rekommenderar att du placerar händelseloggen anrop i en sökväg i stället för i den huvudsakliga kodsökvägen så de inte påverka prestanda negativt.       En lista över inledande egenskapsvärden för en instans av händelseloggen finns det <xref:System.Diagnostics.EventLog.%23ctor%2A>konstruktor.</xref:System.Diagnostics.EventLog.%23ctor%2A>"
  example:
  - "The following example creates the event source `MySource` if it doesn't already exist, and writes an entry to the event log `MyNewLog`.  \n  \n> [!NOTE]\n>  Starting with Windows Vista, you must run this application as an administrator.  \n  \n [!code-cs[Classic EventLog.CreateEventSource Example#1](~/add/codesnippet/csharp/t-system.diagnostics.eve_0_1.cs)]\n [!code-cpp[Classic EventLog.CreateEventSource Example#1](~/add/codesnippet/cpp/t-system.diagnostics.eve_0_1.cpp)]\n [!code-vb[Classic EventLog.CreateEventSource Example#1](~/add/codesnippet/visualbasic/t-system.diagnostics.eve_0_1.vb)]"
  syntax:
    content: >-
      [System.ComponentModel.DefaultEvent("EntryWritten")]

      [System.ComponentModel.InstallerType("System.Diagnostics.EventLogInstaller, System.Configuration.Install, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]

      [System.Diagnostics.MonitoringDescription("EventLogDesc")]

      public class EventLog : System.ComponentModel.Component, System.ComponentModel.ISupportInitialize
  inheritance:
  - System.Object
  - System.MarshalByRefObject
  - System.ComponentModel.Component
  implements:
  - System.ComponentModel.ISupportInitialize
  inheritedMembers:
  - System.ComponentModel.Component.CanRaiseEvents
  - System.ComponentModel.Component.Container
  - System.ComponentModel.Component.DesignMode
  - System.ComponentModel.Component.Dispose
  - System.ComponentModel.Component.Disposed
  - System.ComponentModel.Component.Events
  - System.ComponentModel.Component.GetService(System.Type)
  - System.ComponentModel.Component.Site
  - System.ComponentModel.Component.ToString
  - System.MarshalByRefObject.CreateObjRef(System.Type)
  - System.MarshalByRefObject.GetLifetimeService
  - System.MarshalByRefObject.InitializeLifetimeService
  - System.MarshalByRefObject.MemberwiseClone(System.Boolean)
  platform:
  - net462
- uid: System.Diagnostics.EventLog.#ctor
  id: '#ctor'
  parent: System.Diagnostics.EventLog
  langs:
  - csharp
  name: EventLog()
  nameWithType: EventLog.EventLog()
  fullName: System.Diagnostics.EventLog.EventLog()
  type: Constructor
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Initierar en ny instans av den <xref href=&quot;System.Diagnostics.EventLog&quot;> </xref> klass. Koppla inte instansen med någon annan logg."
  remarks: "Innan du anropar <xref:System.Diagnostics.EventLog.WriteEntry%2A>, ange den <xref:System.Diagnostics.EventLog.Source%2A>egenskapen för den <xref:System.Diagnostics.EventLog>instans.</xref:System.Diagnostics.EventLog> </xref:System.Diagnostics.EventLog.Source%2A> </xref:System.Diagnostics.EventLog.WriteEntry%2A> Om du bara läser <xref:System.Diagnostics.EventLog.Entries%2A>från loggen, kan du alternativt Ange bara den <xref:System.Diagnostics.EventLog.Log%2A>och <xref:System.Diagnostics.EventLog.MachineName%2A>Egenskaper.</xref:System.Diagnostics.EventLog.MachineName%2A> </xref:System.Diagnostics.EventLog.Log%2A> </xref:System.Diagnostics.EventLog.Entries%2A>      > [!NOTE] > Om du inte anger en <xref:System.Diagnostics.EventLog.MachineName%2A>, den lokala datorn (&quot;.&quot;) antas.</xref:System.Diagnostics.EventLog.MachineName%2A>       I följande tabell visas första egenskapsvärden för en instans av <xref:System.Diagnostics.EventLog>.</xref:System.Diagnostics.EventLog>      | Egenskapen | Ursprungligt värde |   |--------------|-------------------|   | <xref:System.Diagnostics.EventLog.Source%2A>| En tom sträng (&quot;&quot;). | | <xref:System.Diagnostics.EventLog.Log%2A>| En tom sträng (&quot;&quot;). | | <xref:System.Diagnostics.EventLog.MachineName%2A>| Den lokala datorn (&quot;.&quot;). |</xref:System.Diagnostics.EventLog.MachineName%2A> </xref:System.Diagnostics.EventLog.Log%2A> </xref:System.Diagnostics.EventLog.Source%2A>"
  example:
  - "The following example creates the source `MySource` if it does not already exist, and writes an entry to the event log `MyNewLog`.  \n  \n [!code-cs[Classic EventLog.CreateEventSource Example#1](~/add/codesnippet/csharp/m-system.diagnostics.eve_9_1.cs)]\n [!code-cpp[Classic EventLog.CreateEventSource Example#1](~/add/codesnippet/cpp/m-system.diagnostics.eve_9_1.cpp)]\n [!code-vb[Classic EventLog.CreateEventSource Example#1](~/add/codesnippet/visualbasic/m-system.diagnostics.eve_9_1.vb)]"
  syntax:
    content: public EventLog ();
    parameters: []
  overload: System.Diagnostics.EventLog.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.EventLog.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: System.Diagnostics.EventLog
  langs:
  - csharp
  name: EventLog(String)
  nameWithType: EventLog.EventLog(String)
  fullName: System.Diagnostics.EventLog.EventLog(String)
  type: Constructor
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Initierar en ny instans av den <xref href=&quot;System.Diagnostics.EventLog&quot;> </xref> klass. Associerar instansen med en logg på den lokala datorn."
  remarks: "Denna överlagring anger den <xref:System.Diagnostics.EventLog.Log%2A>egenskapen till den `logName` parameter.</xref:System.Diagnostics.EventLog.Log%2A> Innan du anropar <xref:System.Diagnostics.EventLog.WriteEntry%2A>, ange den <xref:System.Diagnostics.EventLog.Source%2A>egenskapen för den <xref:System.Diagnostics.EventLog>instans.</xref:System.Diagnostics.EventLog> </xref:System.Diagnostics.EventLog.Source%2A> </xref:System.Diagnostics.EventLog.WriteEntry%2A> Om du bara läser <xref:System.Diagnostics.EventLog.Entries%2A>från loggen, kan du alternativt Ange bara den <xref:System.Diagnostics.EventLog.Log%2A>och <xref:System.Diagnostics.EventLog.MachineName%2A>Egenskaper.</xref:System.Diagnostics.EventLog.MachineName%2A> </xref:System.Diagnostics.EventLog.Log%2A> </xref:System.Diagnostics.EventLog.Entries%2A>      > [!NOTE] > Om du inte anger en <xref:System.Diagnostics.EventLog.MachineName%2A>, den lokala datorn (&quot;.&quot;) antas.</xref:System.Diagnostics.EventLog.MachineName%2A> Denna överlagring för konstruktorn anger den <xref:System.Diagnostics.EventLog.Log%2A>egenskap, men du kan ändra detta innan du läser den <xref:System.Diagnostics.EventLog.Entries%2A>egenskapen.</xref:System.Diagnostics.EventLog.Entries%2A> </xref:System.Diagnostics.EventLog.Log%2A>       Om källan som du anger i den <xref:System.Diagnostics.EventLog.Source%2A>egenskapen är unikt från andra källor på datorn, ett efterföljande anrop till <xref:System.Diagnostics.EventLog.WriteEntry%2A>skapar en logg med det angivna namnet om det inte redan finns.</xref:System.Diagnostics.EventLog.WriteEntry%2A> </xref:System.Diagnostics.EventLog.Source%2A>       I följande tabell visas första egenskapsvärden för en instans av <xref:System.Diagnostics.EventLog>.</xref:System.Diagnostics.EventLog>      | Egenskapen | Ursprungligt värde |   |--------------|-------------------|   | <xref:System.Diagnostics.EventLog.Source%2A>| En tom sträng (&quot;&quot;). | | <xref:System.Diagnostics.EventLog.Log%2A>| Den `logName` parameter. |   | <xref:System.Diagnostics.EventLog.MachineName%2A>| Den lokala datorn (&quot;.&quot;). |</xref:System.Diagnostics.EventLog.MachineName%2A> </xref:System.Diagnostics.EventLog.Log%2A> </xref:System.Diagnostics.EventLog.Source%2A>"
  example:
  - "The following example reads entries in the event log, \"myNewLog\", on the local computer.  \n  \n [!code-cpp[Classic EventLog.EventLog1 Example#1](~/add/codesnippet/cpp/m-system.diagnostics.eve_13_1.cpp)]\n [!code-cs[Classic EventLog.EventLog1 Example#1](~/add/codesnippet/csharp/m-system.diagnostics.eve_13_1.cs)]\n [!code-vb[Classic EventLog.EventLog1 Example#1](~/add/codesnippet/visualbasic/m-system.diagnostics.eve_13_1.vb)]"
  syntax:
    content: public EventLog (string logName);
    parameters:
    - id: logName
      type: System.String
      description: "Namnet på loggen på den lokala datorn."
  overload: System.Diagnostics.EventLog.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "Namnet på loggen är <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Namnet på loggen är ogiltig."
  platform:
  - net462
- uid: System.Diagnostics.EventLog.#ctor(System.String,System.String)
  id: '#ctor(System.String,System.String)'
  parent: System.Diagnostics.EventLog
  langs:
  - csharp
  name: EventLog(String,String)
  nameWithType: EventLog.EventLog(String,String)
  fullName: System.Diagnostics.EventLog.EventLog(String,String)
  type: Constructor
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Initierar en ny instans av den <xref href=&quot;System.Diagnostics.EventLog&quot;> </xref> klass. Associerar instansen med en logg på den angivna datorn."
  remarks: "Denna överlagring anger den <xref:System.Diagnostics.EventLog.Log%2A>egenskapen till den `logName` parameter och <xref:System.Diagnostics.EventLog.MachineName%2A>egenskapen till den `machineName` parameter.</xref:System.Diagnostics.EventLog.MachineName%2A> </xref:System.Diagnostics.EventLog.Log%2A> Innan du anropar <xref:System.Diagnostics.EventLog.WriteEntry%2A>, anger du <xref:System.Diagnostics.EventLog.Source%2A>egenskapen i <xref:System.Diagnostics.EventLog>.</xref:System.Diagnostics.EventLog> </xref:System.Diagnostics.EventLog.Source%2A> </xref:System.Diagnostics.EventLog.WriteEntry%2A> Om du bara läser <xref:System.Diagnostics.EventLog.Entries%2A>från loggen, kan du alternativt Ange bara den <xref:System.Diagnostics.EventLog.Log%2A>och <xref:System.Diagnostics.EventLog.MachineName%2A>Egenskaper.</xref:System.Diagnostics.EventLog.MachineName%2A> </xref:System.Diagnostics.EventLog.Log%2A> </xref:System.Diagnostics.EventLog.Entries%2A>      > [!NOTE] > Denna överlagring för konstruktorn anger den <xref:System.Diagnostics.EventLog.Log%2A>och <xref:System.Diagnostics.EventLog.MachineName%2A>Egenskaper, men du kan ändra antingen innan läsning av <xref:System.Diagnostics.EventLog.Entries%2A>egenskap.</xref:System.Diagnostics.EventLog.Entries%2A> </xref:System.Diagnostics.EventLog.MachineName%2A> </xref:System.Diagnostics.EventLog.Log%2A>       I följande tabell visas första egenskapsvärden för en instans av <xref:System.Diagnostics.EventLog>.</xref:System.Diagnostics.EventLog>      | Egenskapen | Ursprungligt värde |   |--------------|-------------------|   | <xref:System.Diagnostics.EventLog.Source%2A>| En tom sträng (&quot;&quot;). | | <xref:System.Diagnostics.EventLog.Log%2A>| Den `logName` parameter. |   | <xref:System.Diagnostics.EventLog.MachineName%2A>| Den `machineName` parameter. |</xref:System.Diagnostics.EventLog.MachineName%2A> </xref:System.Diagnostics.EventLog.Log%2A> </xref:System.Diagnostics.EventLog.Source%2A>"
  example:
  - "The following example reads entries in the event log, \"myNewLog\", on the computer \"myServer\".  \n  \n [!code-cs[Classic EventLog.EventLog2 Example#1](~/add/codesnippet/csharp/m-system.diagnostics.eve_0_1.cs)]\n [!code-cpp[Classic EventLog.EventLog2 Example#1](~/add/codesnippet/cpp/m-system.diagnostics.eve_0_1.cpp)]\n [!code-vb[Classic EventLog.EventLog2 Example#1](~/add/codesnippet/visualbasic/m-system.diagnostics.eve_0_1.vb)]"
  syntax:
    content: public EventLog (string logName, string machineName);
    parameters:
    - id: logName
      type: System.String
      description: "Namnet på loggen på den angivna datorn."
    - id: machineName
      type: System.String
      description: "Den dator där loggfilen finns."
  overload: System.Diagnostics.EventLog.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "Namnet på loggen är <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Namnet på loggen är ogiltig.       - eller - datornamn är ogiltigt."
  platform:
  - net462
- uid: System.Diagnostics.EventLog.#ctor(System.String,System.String,System.String)
  id: '#ctor(System.String,System.String,System.String)'
  parent: System.Diagnostics.EventLog
  langs:
  - csharp
  name: EventLog(String,String,String)
  nameWithType: EventLog.EventLog(String,String,String)
  fullName: System.Diagnostics.EventLog.EventLog(String,String,String)
  type: Constructor
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Initierar en ny instans av den <xref href=&quot;System.Diagnostics.EventLog&quot;> </xref> klass. Associerar instansen med en logg på den angivna datorn, skapar och tilldelar den angivna källan till den <xref href=&quot;System.Diagnostics.EventLog&quot;> </xref>."
  remarks: "Den här konstruktorn anger den <xref:System.Diagnostics.EventLog.Log%2A>egenskapen till den `logName` parameter, den <xref:System.Diagnostics.EventLog.MachineName%2A>egenskapen till den `machineName` parameter, och <xref:System.Diagnostics.EventLog.Source%2A>egenskapen till den `source` parametern.</xref:System.Diagnostics.EventLog.Source%2A> </xref:System.Diagnostics.EventLog.MachineName%2A> </xref:System.Diagnostics.EventLog.Log%2A> <xref:System.Diagnostics.EventLog.Source%2A>Egenskapen är obligatorisk när du skriver en händelselogg.</xref:System.Diagnostics.EventLog.Source%2A> Men om du endast läsa från en händelselogg endast den <xref:System.Diagnostics.EventLog.Log%2A>och <xref:System.Diagnostics.EventLog.MachineName%2A>Egenskaper krävs (förutsatt att händelseloggen på servern har en källa som redan är associerad med den).</xref:System.Diagnostics.EventLog.MachineName%2A> </xref:System.Diagnostics.EventLog.Log%2A> Om du endast läsa från händelseloggen, en annan överlagring för konstruktorn kan vara tillräckligt.       I följande tabell visas första egenskapsvärden för en instans av <xref:System.Diagnostics.EventLog>.</xref:System.Diagnostics.EventLog>      | Egenskapen | Ursprungligt värde |   |--------------|-------------------|   | <xref:System.Diagnostics.EventLog.Source%2A>| Den `source` parameter. |   | <xref:System.Diagnostics.EventLog.Log%2A>| Den `logName` parameter. |   | <xref:System.Diagnostics.EventLog.MachineName%2A>| Den `machineName` parameter. |</xref:System.Diagnostics.EventLog.MachineName%2A> </xref:System.Diagnostics.EventLog.Log%2A> </xref:System.Diagnostics.EventLog.Source%2A>"
  example:
  - "The following example writes an entry to an event log, \"MyNewLog\", on the local computer, using the source \"MySource\".  \n  \n [!code-cs[Classic EventLog.EventLog3 Example#1](~/add/codesnippet/csharp/fd99d44e-2d79-45f8-97e3-_1.cs)]\n [!code-cpp[Classic EventLog.EventLog3 Example#1](~/add/codesnippet/cpp/fd99d44e-2d79-45f8-97e3-_1.cpp)]\n [!code-vb[Classic EventLog.EventLog3 Example#1](~/add/codesnippet/visualbasic/fd99d44e-2d79-45f8-97e3-_1.vb)]"
  syntax:
    content: public EventLog (string logName, string machineName, string source);
    parameters:
    - id: logName
      type: System.String
      description: "Namnet på loggen på den angivna datorn"
    - id: machineName
      type: System.String
      description: "Den dator där loggfilen finns."
    - id: source
      type: System.String
      description: "Källan för poster i händelseloggen."
  overload: System.Diagnostics.EventLog.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "Namnet på loggen är <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Namnet på loggen är ogiltig.       - eller - datornamn är ogiltigt."
  platform:
  - net462
- uid: System.Diagnostics.EventLog.BeginInit
  id: BeginInit
  parent: System.Diagnostics.EventLog
  langs:
  - csharp
  name: BeginInit()
  nameWithType: EventLog.BeginInit()
  fullName: System.Diagnostics.EventLog.BeginInit()
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Börjar initieringen av en <xref href=&quot;System.Diagnostics.EventLog&quot;> </xref> används i ett formulär eller används av en annan komponent. Initieringen av inträffar vid körning."
  remarks: "Den [!INCLUDE[vsprvslong](~/add/includes/ajax-current-ext-md.md)] design miljö använder den här metoden för att starta initieringen av en komponent som används i ett formulär eller av en annan komponent. Den <xref:System.Diagnostics.EventLog.EndInit%2A>metoden slutar initieringen.</xref:System.Diagnostics.EventLog.EndInit%2A> Med BeginInit och <xref:System.Diagnostics.EventLog.EndInit%2A>sätt förhindra att kontrollen används innan den har initierats.</xref:System.Diagnostics.EventLog.EndInit%2A>"
  syntax:
    content: public void BeginInit ();
    parameters: []
  overload: System.Diagnostics.EventLog.BeginInit*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "<xref href=&quot;System.Diagnostics.EventLog&quot;></xref>har redan initierats."
  platform:
  - net462
- uid: System.Diagnostics.EventLog.Clear
  id: Clear
  parent: System.Diagnostics.EventLog
  langs:
  - csharp
  name: Clear()
  nameWithType: EventLog.Clear()
  fullName: System.Diagnostics.EventLog.Clear()
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Tar bort alla poster från händelseloggen."
  remarks: "Händelseloggar anges med en maximal storlek som avgör hur många poster som de kan innehålla. När en händelselogg är full, slutar när den nya händelseinformation eller börjar att skriva över tidigare poster. Du kan använda den här metoden för att rensa loggen för befintliga transaktioner och göra det möjligt att börja spela in händelser igen om händelsen inspelning slutar. Du måste ha administratörsbehörighet på datorn som finns i loggen för att ta bort poster i händelseloggen.       Stänger Rensa händelseloggen, släpper händelsehanterare, hämtar nya läsa och skriva handtag, och sedan öppnar Loggboken. Händelser som tagits emot efter anropet till metoden avmarkeras inte tillsammans med befintliga händelser."
  example:
  - "The following example clears an event log.  \n  \n> [!CAUTION]\n>  Because Application, System, Security, and other non-custom logs can contain crucial information; be sure to specify a custom log before executing this example code. This example deletes the custom log `myNewLog`.  \n  \n [!code-cs[Classic EventLog.Clear Example#1](~/add/codesnippet/csharp/m-system.diagnostics.eve_11_1.cs)]\n [!code-vb[Classic EventLog.Clear Example#1](~/add/codesnippet/visualbasic/m-system.diagnostics.eve_11_1.vb)]\n [!code-cpp[Classic EventLog.Clear Example#1](~/add/codesnippet/cpp/m-system.diagnostics.eve_11_1.cpp)]"
  syntax:
    content: public void Clear ();
    parameters: []
  overload: System.Diagnostics.EventLog.Clear*
  exceptions:
  - type: System.ComponentModel.Win32Exception
    commentId: T:System.ComponentModel.Win32Exception
    description: "Händelseloggen rensades inte.       - eller - loggen kan inte öppnas. En Windows-felkoden är inte tillgänglig."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Ett värde har angetts för den <xref:System.Diagnostics.EventLog.Log*>egenskapen.</xref:System.Diagnostics.EventLog.Log*> Kontrollera att namnet på loggen inte är en tom sträng."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Loggen finns inte."
  platform:
  - net462
- uid: System.Diagnostics.EventLog.Close
  id: Close
  parent: System.Diagnostics.EventLog
  langs:
  - csharp
  name: Close()
  nameWithType: EventLog.Close()
  fullName: System.Diagnostics.EventLog.Close()
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Stänger händelselogg och versioner läsa och skriva referenser."
  remarks: "Close-metoden anropas av den skyddade <xref:System.ComponentModel.Component.Dispose%2A>metod.</xref:System.ComponentModel.Component.Dispose%2A> Du behöver inte anropa Close innan du anropar <xref:System.ComponentModel.Component.Dispose%2A>.</xref:System.ComponentModel.Component.Dispose%2A>"
  syntax:
    content: public void Close ();
    parameters: []
  overload: System.Diagnostics.EventLog.Close*
  exceptions:
  - type: System.ComponentModel.Win32Exception
    commentId: T:System.ComponentModel.Win32Exception
    description: "Läs i händelseloggen-referensen eller Skriv referensen frigjordes inte har."
  platform:
  - net462
- uid: System.Diagnostics.EventLog.CreateEventSource(System.Diagnostics.EventSourceCreationData)
  id: CreateEventSource(System.Diagnostics.EventSourceCreationData)
  parent: System.Diagnostics.EventLog
  langs:
  - csharp
  name: CreateEventSource(EventSourceCreationData)
  nameWithType: EventLog.CreateEventSource(EventSourceCreationData)
  fullName: System.Diagnostics.EventLog.CreateEventSource(EventSourceCreationData)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Upprättar en giltig händelsekällan för lokaliserade händelse skrivs meddelanden med hjälp av de angivna konfigurationsegenskaperna för händelsekällan och motsvarande händelselogg."
  remarks: "Use this overload to configure a new source for writing entries to an event log on the local computer or a remote computer. It is not necessary to use this method to read from an event log.  \n  \n The CreateEventSource method uses the input `sourceData`<xref:System.Diagnostics.EventSourceCreationData.Source%2A>, <xref:System.Diagnostics.EventSourceCreationData.LogName%2A> and <xref:System.Diagnostics.EventSourceCreationData.MachineName%2A> properties to create registry values on the target computer for the new source and its associated event log. A new source name cannot match an existing source name or an existing event log name on the target computer. If the <xref:System.Diagnostics.EventSourceCreationData.LogName%2A> property is not set, the source is registered for the Application event log. If the <xref:System.Diagnostics.EventSourceCreationData.MachineName%2A> is not set, the source is registered on the local computer.  \n  \n> [!NOTE]\n>  To create an event source in Windows Vista and later or Windows Server 2003, you must have administrative privileges.  \n>   \n>  The reason for this requirement is that all event logs, including security, must be searched to determine whether the event source is unique. Starting with Windows Vista, users do not have permission to access the security log; therefore, a <xref:System.Security.SecurityException> is thrown.  \n>   \n>  Starting with Windows Vista, User Account Control (UAC) determines the privileges of a user. If you are a member of the Built-in Administrators group, you are assigned two run-time access tokens: a standard user access token and an administrator access token. By default, you are in the standard user role. To execute the code that accesses the security log, you must first elevate your privileges from standard user to administrator. You can do this when you start an application by right-clicking the application icon and indicating that you want to run as an administrator.  \n  \n Use <xref:System.Diagnostics.EventLog.WriteEvent%2A> and <xref:System.Diagnostics.EventLog.WriteEntry%2A> to write events to an event log. You must specify an event source to write events; you must create and configure the event source before writing the first entry with the source.  \n  \n Create the new event source during the installation of your application. This allows time for the operating system to refresh its list of registered event sources and their configuration. If the operating system has not refreshed its list of event sources, and you attempt to write an event with the new source, the write operation will fail. You can configure a new source using an <xref:System.Diagnostics.EventLogInstaller>, or using the <xref:System.Diagnostics.EventLog.CreateEventSource%2A> method. You must have administrative rights on the computer to create a new event source.  \n  \n You can create an event source for an existing event log or a new event log. When you create a new source for a new event log, the system registers the source for that log, but the log is not created until the first entry is written to it.  \n  \n The operating system stores event logs as files. When you use <xref:System.Diagnostics.EventLogInstaller> or <xref:System.Diagnostics.EventLog.CreateEventSource%2A> to create a new event log, the associated file is stored in the %SystemRoot%\\System32\\Config directory on the specified computer. The file name is set by appending the first 8 characters of the <xref:System.Diagnostics.EventLog.Log%2A> property with the \".evt\" file name extension.  \n  \n Each source can only write to only one event log at a time; however, your application can use multiple sources to write to multiple event logs. For example, your application might require multiple sources configured for different event logs or different resource files.  \n  \n You can register the event source with localized resource file(s) for your event category and message strings. Your application can write event log entries using resource identifiers, rather than specifying the actual string. The Event Viewer uses the resource identifier to find and display the corresponding string from the localized resource file based on current language settings. You can register a separate file for event categories, messages and parameter insertion strings, or you can register the same resource file for all three types of strings. Use the <xref:System.Diagnostics.EventSourceCreationData.CategoryCount%2A>, <xref:System.Diagnostics.EventSourceCreationData.CategoryResourceFile%2A>, <xref:System.Diagnostics.EventSourceCreationData.MessageResourceFile%2A>, and <xref:System.Diagnostics.EventSourceCreationData.ParameterResourceFile%2A> properties to configure the source to write localized entries to the event log. If your application writes strings values directly to the event log, you do not need to set these properties.  \n  \n The source must be configured either for writing localized entries or for writing direct strings. If your application writes entries using both resource identifiers and string values, you must register two separate sources. For example, configure one source with resource files, and then use that source in the <xref:System.Diagnostics.EventLog.WriteEvent%2A> method to write entries using resource identifiers to the event log. Then create a different source without resource files, and use that source in the <xref:System.Diagnostics.EventLog.WriteEntry%2A> method to write strings directly to the event log using that source.  \n  \n To change the configuration details of an existing source, you must delete the source and then create it with the new configuration. If other applications or components use the existing source, create a new source with the updated configuration rather than deleting the existing source.  \n  \n> [!NOTE]\n>  If a source is configured for an event log, and you reconfigure it for another event log, you must restart the computer for the changes to take effect."
  example:
  - "The following example determines whether the event source named `SampleApplicationSource` is registered on the local computer. If the event source does not exist, the example sets the message resource file for the source and creates the new event source. Finally, the example sets the localized display name for the event log, using the resource identifier value in `DisplayNameMsgId` and the resource file path in `messageFile`.  \n  \n [!code-cpp[EventLog_WriteEvent#6](~/add/codesnippet/cpp/4fd418fb-73e7-42a9-9ba2-_1.cpp)]\n [!code-vb[EventLog_WriteEvent#6](~/add/codesnippet/visualbasic/4fd418fb-73e7-42a9-9ba2-_1.vb)]\n [!code-cs[EventLog_WriteEvent#6](~/add/codesnippet/csharp/4fd418fb-73e7-42a9-9ba2-_1.cs)]  \n  \n The example uses the following message text file, built into the resource library EventLogMsgs.dll. A message text file is the source from which the message resource file is created. The message text file defines the resource identifiers and text for the category, event message, and parameter insertion strings. Specifically, resource identifier 5001 is defined for the localized name of the event log.  \n  \n```  \n; // EventLogMsgs.mc  \n; // ********************************************************  \n  \n; // Use the following commands to build this file:  \n  \n; //   mc -s EventLogMsgs.mc  \n; //   rc EventLogMsgs.rc  \n; //   link /DLL /SUBSYSTEM:WINDOWS /NOENTRY /MACHINE:x86 EventLogMsgs.Res   \n; // ********************************************************  \n  \n; // - Event categories -  \n; // Categories must be numbered consecutively starting at 1.  \n; // ********************************************************  \n  \nMessageId=0x1  \nSeverity=Success  \nSymbolicName=INSTALL_CATEGORY  \nLanguage=English  \nInstallation  \n.  \n  \nMessageId=0x2  \nSeverity=Success  \nSymbolicName=QUERY_CATEGORY  \nLanguage=English  \nDatabase Query  \n.  \n  \nMessageId=0x3  \nSeverity=Success  \nSymbolicName=REFRESH_CATEGORY  \nLanguage=English  \nData Refresh  \n.  \n  \n; // - Event messages -  \n; // *********************************  \n  \nMessageId = 1000  \nSeverity = Success  \nFacility = Application  \nSymbolicName = AUDIT_SUCCESS_MESSAGE_ID_1000  \nLanguage=English  \nMy application message text, in English, for message id 1000, called from %1.  \n.  \n  \nMessageId = 1001  \nSeverity = Warning  \nFacility = Application  \nSymbolicName = AUDIT_FAILED_MESSAGE_ID_1001  \nLanguage=English  \nMy application message text, in English, for message id 1001, called from %1.  \n.  \n  \nMessageId = 1002  \nSeverity = Success  \nFacility = Application  \nSymbolicName = GENERIC_INFO_MESSAGE_ID_1002  \nLanguage=English  \nMy generic information message in English, for message id 1002.  \n.  \n  \nMessageId = 1003  \nSeverity = Warning  \nFacility = Application  \nSymbolicName = GENERIC_WARNING_MESSAGE_ID_1003  \nLanguage=English  \nMy generic warning message in English, for message id 1003, called from %1.  \n.  \n  \nMessageId = 1004  \nSeverity = Success  \nFacility = Application  \nSymbolicName = UPDATE_CYCLE_COMPLETE_MESSAGE_ID_1004  \nLanguage=English  \nThe update cycle is complete for %%5002.  \n.  \n  \nMessageId = 1005  \nSeverity = Warning  \nFacility = Application  \nSymbolicName = SERVER_CONNECTION_DOWN_MESSAGE_ID_1005  \nLanguage=English  \nThe refresh operation did not complete because the connection to server %1 could not be established.  \n.  \n  \n; // - Event log display name -  \n; // ********************************************************  \n  \nMessageId = 5001  \nSeverity = Success  \nFacility = Application  \nSymbolicName = EVENT_LOG_DISPLAY_NAME_MSGID  \nLanguage=English  \nSample Event Log  \n.  \n  \n; // - Event message parameters -  \n; //   Language independent insertion strings  \n; // ********************************************************  \n  \nMessageId = 5002  \nSeverity = Success  \nFacility = Application  \nSymbolicName = EVENT_LOG_SERVICE_NAME_MSGID  \nLanguage=English  \nSVC_UPDATE.EXE  \n.  \n```"
  syntax:
    content: public static void CreateEventSource (System.Diagnostics.EventSourceCreationData sourceData);
    parameters:
    - id: sourceData
      type: System.Diagnostics.EventSourceCreationData
      description: "Konfigurationsegenskaper för händelsekällan och dess mål-händelseloggen."
  overload: System.Diagnostics.EventLog.CreateEventSource*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The computer name specified in <code>sourceData</code> is not valid.  \n  \n \\- or -  \n  \n The source name specified in <code>sourceData</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.  \n  \n \\- or -  \n  \n The log name specified in <code>sourceData</code> is not valid. Event log names must consist of printable characters and cannot include the characters '*', '?', or '\\\\'.  \n  \n \\- or -  \n  \n The log name specified in <code>sourceData</code> is not valid for user log creation. The Event log names AppEvent, SysEvent, and SecEvent are reserved for system use.  \n  \n \\- or -  \n  \n The log name matches an existing event source name.  \n  \n \\- or -  \n  \n The source name specified in <code>sourceData</code> results in a registry key path longer than 254 characters.  \n  \n \\- or -  \n  \n The first 8 characters of the log name specified in <code>sourceData</code> are not unique.  \n  \n \\- or -  \n  \n The source name specified in <code>sourceData</code> is already registered.  \n  \n \\- or -  \n  \n The source name specified in <code>sourceData</code> matches an existing event log name."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Det gick inte att öppna registernyckeln för händelseloggen."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>sourceData</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Diagnostics.EventLog.CreateEventSource(System.String,System.String)
  id: CreateEventSource(System.String,System.String)
  parent: System.Diagnostics.EventLog
  langs:
  - csharp
  name: CreateEventSource(String,String)
  nameWithType: EventLog.CreateEventSource(String,String)
  fullName: System.Diagnostics.EventLog.CreateEventSource(String,String)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Etablerar angivna datakällans namn som en giltig händelsekälla för att skriva poster till en loggfil på den lokala datorn. Den här metoden kan också skapa en ny anpassad logg på den lokala datorn."
  remarks: "Use this overload to create a custom log or to create and register a <xref:System.Diagnostics.EventLog.Source%2A> to an existing log on the local computer.  \n  \n If `logName` is `null` or an empty string (\"\") when you call <xref:System.Diagnostics.EventLog.CreateEventSource%2A>, the log defaults to the Application log. If the log does not exist on the local computer, the system creates a custom log and registers your application as a <xref:System.Diagnostics.EventLog.Source%2A> for that log.  \n  \n> [!NOTE]\n>  To create an event source in Windows Vista and later or Windows Server 2003, you must have administrative privileges.  \n>   \n>  The reason for this requirement is that all event logs, including security, must be searched to determine whether the event source is unique. Starting with Windows Vista, users do not have permission to access the security log; therefore, a <xref:System.Security.SecurityException> is thrown.  \n>   \n>  In Windows Vista and later, User Account Control (UAC) determines the privileges of a user. If you are a member of the Built-in Administrators group, you are assigned two run-time access tokens: a standard user access token and an administrator access token. By default, you are in the standard user role. To execute the code that accesses the security log, you must first elevate your privileges from standard user to administrator. You can do this when you start an application by right-clicking the application icon and indicating that you want to run as an administrator.  \n  \n You only need to create an event source if you are writing to the event log. Before writing an entry to an event log, you must register the event source with the event log as a valid source of events. When you write a log entry, the system uses the <xref:System.Diagnostics.EventLog.Source%2A> to find the appropriate log in which to place your entry. If you are reading the event log, you can either specify the <xref:System.Diagnostics.EventLog.Source%2A>, or a <xref:System.Diagnostics.EventLog.Log%2A> and <xref:System.Diagnostics.EventLog.MachineName%2A>.  \n  \n> [!NOTE]\n>  You are not required to specify the <xref:System.Diagnostics.EventLog.MachineName%2A> if you are connecting to a log on the local computer. If you do not specify the <xref:System.Diagnostics.EventLog.MachineName%2A> when reading from a log, the local computer (\".\") is assumed.  \n  \n Use <xref:System.Diagnostics.EventLog.WriteEvent%2A> and <xref:System.Diagnostics.EventLog.WriteEntry%2A> to write events to an event log. You must specify an event source to write events; you must create and configure the event source before writing the first entry with the source.  \n  \n Create the new event source during the installation of your application. This allows time for the operating system to refresh its list of registered event sources and their configuration. If the operating system has not refreshed its list of event sources, and you attempt to write an event with the new source, the write operation will fail. You can configure a new source using an <xref:System.Diagnostics.EventLogInstaller>, or using the <xref:System.Diagnostics.EventLog.CreateEventSource%2A> method. You must have administrative rights on the computer to create a new event source.  \n  \n You can create an event source for an existing event log or a new event log. When you create a new source for a new event log, the system registers the source for that log, but the log is not created until the first entry is written to it.  \n  \n The operating system stores event logs as files. When you use <xref:System.Diagnostics.EventLogInstaller> or <xref:System.Diagnostics.EventLog.CreateEventSource%2A> to create a new event log, the associated file is stored in the %SystemRoot%\\System32\\Config directory on the specified computer. The file name is set by appending the first 8 characters of the <xref:System.Diagnostics.EventLog.Log%2A> property with the \".evt\" file name extension.  \n  \n The source must be unique on the local computer; a new source name cannot match an existing source name or an existing event log name. Each source can write to only one event log at a time; however, your application can use multiple sources to write to multiple event logs. For example, your application might require multiple sources configured for different event logs or different resource files.  \n  \n The source must be configured either for writing localized entries or for writing direct strings. If your application writes entries using both resource identifiers and string values, you must register two separate sources. For example, configure one source with resource files, and then use that source in the <xref:System.Diagnostics.EventLog.WriteEvent%2A> method to write entries using resource identifiers to the event log. Then create a different source without resource files, and use that source in the <xref:System.Diagnostics.EventLog.WriteEntry%2A> method to write strings directly to the event log using that source.  \n  \n To change the configuration details of an existing source, you must delete the source and then create it with the new configuration. If other applications or components use the existing source, create a new source with the updated configuration rather than deleting the existing source.  \n  \n> [!NOTE]\n>  If a source has already been mapped to a log and you remap it to a new log, you must restart the computer for the changes to take effect."
  example:
  - "The following example creates the source `MySource` if it does not already exist, and writes an entry to the event log `MyNewLog`.  \n  \n [!code-cs[Classic EventLog.CreateEventSource Example#1](~/add/codesnippet/csharp/m-system.diagnostics.eve_15_1.cs)]\n [!code-cpp[Classic EventLog.CreateEventSource Example#1](~/add/codesnippet/cpp/m-system.diagnostics.eve_15_1.cpp)]\n [!code-vb[Classic EventLog.CreateEventSource Example#1](~/add/codesnippet/visualbasic/m-system.diagnostics.eve_15_1.vb)]"
  syntax:
    content: public static void CreateEventSource (string source, string logName);
    parameters:
    - id: source
      type: System.String
      description: "Källnamn som programmet har registrerats på den lokala datorn."
    - id: logName
      type: System.String
      description: "Namnet på loggen skrivs den ursprungliga transaktioner till. Möjliga värden är program, System eller en anpassad händelselogg."
  overload: System.Diagnostics.EventLog.CreateEventSource*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>source</code> is an empty string (\"\") or <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.  \n  \n \\- or -  \n  \n <code>logName</code> is not a valid event log name. Event log names must consist of printable characters, and cannot include the characters '*', '?', or '\\\\'.  \n  \n \\- or -  \n  \n <code>logName</code> is not valid for user log creation. The event log names AppEvent, SysEvent, and SecEvent are reserved for system use.  \n  \n \\- or -  \n  \n The log name matches an existing event source name.  \n  \n \\- or -  \n  \n The source name results in a registry key path longer than 254 characters.  \n  \n \\- or -  \n  \n The first 8 characters of <code>logName</code> match the first 8 characters of an existing event log name.  \n  \n \\- or -  \n  \n The source cannot be registered because it already exists on the local computer.  \n  \n \\- or -  \n  \n The source name matches an existing event log name."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Det gick inte att öppna registernyckeln för händelseloggen på den lokala datorn."
  platform:
  - net462
- uid: System.Diagnostics.EventLog.CreateEventSource(System.String,System.String,System.String)
  id: CreateEventSource(System.String,System.String,System.String)
  parent: System.Diagnostics.EventLog
  langs:
  - csharp
  name: CreateEventSource(String,String,String)
  nameWithType: EventLog.CreateEventSource(String,String,String)
  fullName: System.Diagnostics.EventLog.CreateEventSource(String,String,String)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Etablerar angivna datakällans namn som en giltig händelsekälla för att skriva poster till en loggfil på den angivna datorn. Den här metoden kan även användas för att skapa en ny anpassad logg på den angivna datorn."
  remarks: "Use this overload to create a custom log or to create and register a <xref:System.Diagnostics.EventLog.Source%2A> to an existing log on the specified computer.  \n  \n If `logName` is `null` or an empty string (\"\") when you call <xref:System.Diagnostics.EventLog.CreateEventSource%2A>, the log defaults to the Application log. If the log does not exist on the specified computer, the system creates a custom log and registers your application as a <xref:System.Diagnostics.EventLog.Source%2A> for that log.  \n  \n You only need to create an event source if you are writing to the event log. Before writing an entry to an event log, you must register the event source with the event log as a valid source of events. When you write a log entry, the system uses the <xref:System.Diagnostics.EventLog.Source%2A> to find the appropriate log in which to place your entry. If you are reading the event log, you can either specify the <xref:System.Diagnostics.EventLog.Source%2A>, or a <xref:System.Diagnostics.EventLog.Log%2A> and <xref:System.Diagnostics.EventLog.MachineName%2A>.  \n  \n> [!NOTE]\n>  To create an event source in Windows Vista and later or Windows Server 2003, you must have administrative privileges.  \n>   \n>  The reason for this requirement is that all event logs, including security, must be searched to determine whether the event source is unique. In Windows Vista and later, users do not have permission to access the security log; therefore, a <xref:System.Security.SecurityException> is thrown.  \n>   \n>  In Windows Vista and later, User Account Control (UAC) determines the privileges of a user. If you are a member of the Built-in Administrators group, you are assigned two run-time access tokens: a standard user access token and an administrator access token. By default, you are in the standard user role. To execute the code that accesses the security log, you must first elevate your privileges from standard user to administrator. You can do this when you start an application by right-clicking the application icon and indicating that you want to run as an administrator.  \n  \n Use <xref:System.Diagnostics.EventLog.WriteEvent%2A> and <xref:System.Diagnostics.EventLog.WriteEntry%2A> to write events to an event log. You must specify an event source to write events; you must create and configure the event source before writing the first entry with the source.  \n  \n Create the new event source during the installation of your application. This allows time for the operating system to refresh its list of registered event sources and their configuration. If the operating system has not refreshed its list of event sources, and you attempt to write an event with the new source, the write operation will fail. You can configure a new source using an <xref:System.Diagnostics.EventLogInstaller>, or using the <xref:System.Diagnostics.EventLog.CreateEventSource%2A> method. You must have administrative rights on the computer to create a new event source.  \n  \n You can create an event source for an existing event log or a new event log. When you create a new source for a new event log, the system registers the source for that log, but the log is not created until the first entry is written to it.  \n  \n The operating system stores event logs as files. When you use <xref:System.Diagnostics.EventLogInstaller> or <xref:System.Diagnostics.EventLog.CreateEventSource%2A> to create a new event log, the associated file is stored in the %SystemRoot%\\System32\\Config directory on the specified computer. The file name is set by appending the first 8 characters of the <xref:System.Diagnostics.EventLog.Log%2A> property with the \".evt\" file name extension.  \n  \n The source must be unique on the local computer; a new source name cannot match an existing source name or an existing event log name. Each source can write to only one event log at a time; however, your application can use multiple sources to write to multiple event logs. For example, your application might require multiple sources configured for different event logs or different resource files.  \n  \n The source must be configured either for writing localized entries or for writing direct strings. If your application writes entries using both resource identifiers and string values, you must register two separate sources. For example, configure one source with resource files, and then use that source in the <xref:System.Diagnostics.EventLog.WriteEvent%2A> method to write entries using resource identifiers to the event log. Then create a different source without resource files, and use that source in the <xref:System.Diagnostics.EventLog.WriteEntry%2A> method to write strings directly to the event log using that source.  \n  \n To change the configuration details of an existing source, you must delete the source and then create it with the new configuration. If other applications or components use the existing source, create a new source with the updated configuration rather than deleting the existing source.  \n  \n> [!NOTE]\n>  If a source has already been mapped to a log and you remap it to a new log, you must restart the computer for the changes to take effect."
  example:
  - "The following example creates the source `MySource` on the computer `MyServer`, and writes an entry to the event log `MyNewLog`.  \n  \n [!code-cpp[Classic EventLog.SourceExists1 Example#1](~/add/codesnippet/cpp/86732307-05e6-4c1a-b98e-_1.cpp)]\n [!code-cs[Classic EventLog.SourceExists1 Example#1](~/add/codesnippet/csharp/86732307-05e6-4c1a-b98e-_1.cs)]\n [!code-vb[Classic EventLog.SourceExists1 Example#1](~/add/codesnippet/visualbasic/86732307-05e6-4c1a-b98e-_1.vb)]"
  syntax:
    content: public static void CreateEventSource (string source, string logName, string machineName);
    parameters:
    - id: source
      type: System.String
      description: "Källan som programmet har registrerats på den angivna datorn."
    - id: logName
      type: System.String
      description: "Namnet på loggen skrivs den ursprungliga transaktioner till. Möjliga värden är program, System eller en anpassad händelselogg. Om du inte anger ett värde `logName` programmet som standard."
    - id: machineName
      type: System.String
      description: "Namnet på datorn för att registrera den här händelsekällan med, eller &quot;.&quot; för den lokala datorn."
  overload: System.Diagnostics.EventLog.CreateEventSource*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The <code>machineName</code> is not a valid computer name.  \n  \n \\- or -  \n  \n <code>source</code> is an empty string (\"\") or <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.  \n  \n \\- or -  \n  \n <code>logName</code> is not a valid event log name. Event log names must consist of printable characters, and cannot include the characters '*', '?', or '\\\\'.  \n  \n \\- or -  \n  \n <code>logName</code> is not valid for user log creation. The event log names AppEvent, SysEvent, and SecEvent are reserved for system use.  \n  \n \\- or -  \n  \n The log name matches an existing event source name.  \n  \n \\- or -  \n  \n The source name results in a registry key path longer than 254 characters.  \n  \n \\- or -  \n  \n The first 8 characters of <code>logName</code> match the first 8 characters of an existing event log name on the specified computer.  \n  \n \\- or -  \n  \n The source cannot be registered because it already exists on the specified computer.  \n  \n \\- or -  \n  \n The source name matches an existing event source name."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Det gick inte att öppna registernyckeln för händelseloggen på den angivna datorn."
  platform:
  - net462
- uid: System.Diagnostics.EventLog.Delete(System.String)
  id: Delete(System.String)
  parent: System.Diagnostics.EventLog
  langs:
  - csharp
  name: Delete(String)
  nameWithType: EventLog.Delete(String)
  fullName: System.Diagnostics.EventLog.Delete(String)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Tar bort en händelselogg från den lokala datorn."
  remarks: "Använd den här metoden när du vill ta bort loggen är på den lokala datorn. Du kan ta bort alla loggen på datorn, förutsatt att du har rätt registerbehörigheterna.       Ta bort tar bort loggen som anges av `logName` från den lokala datorn. Om du vill ta bort den källa som registrerats till en logg anropa <xref:System.Diagnostics.EventLog.DeleteEventSource%2A>.</xref:System.Diagnostics.EventLog.DeleteEventSource%2A> Om du bara vill ta bort logghändelserna anropa <xref:System.Diagnostics.EventLog.Clear%2A>.</xref:System.Diagnostics.EventLog.Clear%2A> Ta bort och <xref:System.Diagnostics.EventLog.DeleteEventSource%2A>är `static` metoder, så de kan anropas på själva klassen.</xref:System.Diagnostics.EventLog.DeleteEventSource%2A> Det är inte nödvändigt att skapa en ny instans av <xref:System.Diagnostics.EventLog>att anropa antingen metoden.</xref:System.Diagnostics.EventLog>       Delete-metoden tar först bort filen som innehåller innehållet i loggen. Sedan ansluter till registret och tar bort de händelsekällor som har registrerats för loggen. Om du återskapa loggen vid ett senare tillfälle, bör du registrera händelsekällorna igen, om de ska återanvändas. Om du inte registrerar händelsekällorna och andra användare skriva till en händelsekälla utan att ange en loggnamn kommer händelsekällan att skapas i programmets händelselogg. Därför kan skriver program som tidigare var kunna skriva poster i loggen du bort och återskapas till programloggen i stället, eftersom den innehåller nu händelsekällan.      > [!NOTE] > Kan vara svåra att återskapa en händelselogg. Undvik att ta bort någon av skapats händelseloggar, till exempel programloggen.       Tar bort en logg via ett anrop till ta bort automatiskt de källor som registrerats i loggen. Detta kan göra andra program som använder den loggen ur funktion."
  example:
  - "The following example deletes a log from the local computer. The example determines the log from its source.  \n  \n> [!NOTE]\n>  More than one source might write to an event log. Before deleting a custom log, make sure there are no other sources writing to that log.  \n  \n [!code-cpp[Classic EventLog.DeleteEventSource Example#1](~/add/codesnippet/cpp/m-system.diagnostics.eve_12_1.cpp)]\n [!code-vb[Classic EventLog.DeleteEventSource Example#1](~/add/codesnippet/visualbasic/m-system.diagnostics.eve_12_1.vb)]\n [!code-cs[Classic EventLog.DeleteEventSource Example#1](~/add/codesnippet/csharp/m-system.diagnostics.eve_12_1.cs)]"
  syntax:
    content: public static void Delete (string logName);
    parameters:
    - id: logName
      type: System.String
      description: 'Namnet på loggen som ska ta bort. Möjliga värden är: program, säkerhet, System och eventuella anpassade händelseloggar på datorn.'
  overload: System.Diagnostics.EventLog.Delete*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>logName</code>en tom sträng (&quot;&quot;) eller <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "The registry key for the event log could not be opened on the local computer.  \n  \n \\- or -  \n  \n The log does not exist on the local computer."
  - type: System.ComponentModel.Win32Exception
    commentId: T:System.ComponentModel.Win32Exception
    description: "Händelseloggen rensades inte.       - eller - loggen kan inte öppnas. En Windows-felkoden är inte tillgänglig."
  platform:
  - net462
- uid: System.Diagnostics.EventLog.Delete(System.String,System.String)
  id: Delete(System.String,System.String)
  parent: System.Diagnostics.EventLog
  langs:
  - csharp
  name: Delete(String,String)
  nameWithType: EventLog.Delete(String,String)
  fullName: System.Diagnostics.EventLog.Delete(String,String)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Tar bort en händelselogg från den angivna datorn."
  remarks: "Använd den här metoden när du vill ta bort loggen är på en fjärrdator. Du kan ta bort alla loggen på datorn, förutsatt att du har rätt registerbehörigheterna.       <xref:System.Diagnostics.EventLog.Delete%2A>tar bort loggen som anges av `logName` från den dator som anges av `machineName`.</xref:System.Diagnostics.EventLog.Delete%2A> Om du vill ta bort den källa som registrerats till en logg anropa <xref:System.Diagnostics.EventLog.DeleteEventSource%2A>.</xref:System.Diagnostics.EventLog.DeleteEventSource%2A> Om du bara vill ta bort logghändelserna anropa <xref:System.Diagnostics.EventLog.Clear%2A>.</xref:System.Diagnostics.EventLog.Clear%2A> <xref:System.Diagnostics.EventLog.Delete%2A>och <xref:System.Diagnostics.EventLog.DeleteEventSource%2A>är `static` metoder, så de kan anropas på själva klassen.</xref:System.Diagnostics.EventLog.DeleteEventSource%2A></xref:System.Diagnostics.EventLog.Delete%2A> Det är inte nödvändigt att skapa en instans av <xref:System.Diagnostics.EventLog>att anropa antingen metoden.</xref:System.Diagnostics.EventLog>       Den här metoden tar först bort filen som innehåller innehållet i loggen. Sedan ansluter till registret och tar bort de händelsekällor som har registrerats för loggen. Om du återskapa loggen vid ett senare tillfälle, bör du registrera händelsekällorna igen, om de ska återanvändas. Om du inte registrerar händelsekällorna och andra användare skriva till en händelsekälla utan att ange en loggnamn kommer händelsekällan att skapas i programmets händelselogg. Därför kan skriver program som tidigare var kunna skriva poster i loggen du bort och återskapas till programloggen i stället, eftersom den innehåller nu händelsekällan.      > [!NOTE] > Kan vara svåra att återskapa en händelselogg. Undvik att ta bort någon av skapats händelseloggar, till exempel programloggen.       Om du tar bort en logg via ett anrop till <xref:System.Diagnostics.EventLog.Delete%2A>tas automatiskt bort datakällor som har registrerats för den logg.</xref:System.Diagnostics.EventLog.Delete%2A> Detta kan göra andra program som använder den loggen ur funktion."
  example:
  - "The following example deletes a log from the specified computer. The example determines the log from its source.  \n  \n> [!NOTE]\n>  More than one source might write to an event log. Before deleting a custom log, make sure there are no other sources writing to that log.  \n  \n [!code-cs[Classic EventLog.Delete1 Example#1](~/add/codesnippet/csharp/m-system.diagnostics.eve_17_1.cs)]\n [!code-cpp[Classic EventLog.Delete1 Example#1](~/add/codesnippet/cpp/m-system.diagnostics.eve_17_1.cpp)]\n [!code-vb[Classic EventLog.Delete1 Example#1](~/add/codesnippet/visualbasic/m-system.diagnostics.eve_17_1.vb)]"
  syntax:
    content: public static void Delete (string logName, string machineName);
    parameters:
    - id: logName
      type: System.String
      description: 'Namnet på loggen som ska ta bort. Möjliga värden är: program, säkerhet, System och eventuella anpassade händelseloggar på den angivna datorn.'
    - id: machineName
      type: System.String
      description: "Namnet på datorn för att ta bort loggen, eller &quot;.&quot; för den lokala datorn."
  overload: System.Diagnostics.EventLog.Delete*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>logName</code> is an empty string (\"\") or <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.  \n  \n \\- or -  \n  \n <code>machineName</code> is not a valid computer name."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "The registry key for the event log could not be opened on the specified computer.  \n  \n \\- or -  \n  \n The log does not exist on the specified computer."
  - type: System.ComponentModel.Win32Exception
    commentId: T:System.ComponentModel.Win32Exception
    description: "Händelseloggen rensades inte.       - eller - loggen kan inte öppnas. En Windows-felkoden är inte tillgänglig."
  platform:
  - net462
- uid: System.Diagnostics.EventLog.DeleteEventSource(System.String)
  id: DeleteEventSource(System.String)
  parent: System.Diagnostics.EventLog
  langs:
  - csharp
  name: DeleteEventSource(String)
  nameWithType: EventLog.DeleteEventSource(String)
  fullName: System.Diagnostics.EventLog.DeleteEventSource(String)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Tar bort datakällan Händelseregistrering från händelseloggen på den lokala datorn."
  remarks: "Använd den här metoden för att ta bort registreringen av en <xref:System.Diagnostics.EventLog.Source%2A>från den lokala datorn.</xref:System.Diagnostics.EventLog.Source%2A> DeleteEventSource har åtkomst till registret på den lokala datorn och tar bort registreringen av ditt program som en giltig källa för händelser.       Du kan ta bort komponenten som en giltig källa för händelser om du inte behöver skriva poster till loggen. Du kan till exempel göra detta om du behöver ändra komponenten från en logg till en annan. Eftersom en källa kan endast registreras för en logg i taget, måste ändra loggen du ta bort den aktuella registreringen.       DeleteEventSource tar bort den källa som registrerats till en logg. Om du vill ta bort själva loggen anropa <xref:System.Diagnostics.EventLog.Delete%2A>.</xref:System.Diagnostics.EventLog.Delete%2A> Om du bara vill ta bort logghändelserna anropa <xref:System.Diagnostics.EventLog.Clear%2A>.</xref:System.Diagnostics.EventLog.Clear%2A> <xref:System.Diagnostics.EventLog.Delete%2A>och DeleteEventSource är `static` metoder, så de kan anropas på själva klassen.</xref:System.Diagnostics.EventLog.Delete%2A> Det är inte nödvändigt att skapa en instans av <xref:System.Diagnostics.EventLog>att anropa antingen metoden.</xref:System.Diagnostics.EventLog>       Om du tar bort en logg via ett anrop till <xref:System.Diagnostics.EventLog.Delete%2A>tas automatiskt bort datakällor som har registrerats för den logg.</xref:System.Diagnostics.EventLog.Delete%2A> Detta kan göra andra program som använder den loggen ur funktion.      > [!NOTE] > Om en datakälla har redan mappats till en logg och du mappa den till en ny loggfil, du måste starta om datorn för att ändringarna ska börja gälla."
  example:
  - "The following example deletes a source from the local computer. The example determines the log from its source, and then deletes the log.  \n  \n> [!NOTE]\n>  More than one source might write to an event log. Before deleting a custom log, make sure there are no other sources writing to that log.  \n  \n [!code-cpp[Classic EventLog.DeleteEventSource Example#1](~/add/codesnippet/cpp/m-system.diagnostics.eve_8_1.cpp)]\n [!code-vb[Classic EventLog.DeleteEventSource Example#1](~/add/codesnippet/visualbasic/m-system.diagnostics.eve_8_1.vb)]\n [!code-cs[Classic EventLog.DeleteEventSource Example#1](~/add/codesnippet/csharp/m-system.diagnostics.eve_8_1.cs)]"
  syntax:
    content: public static void DeleteEventSource (string source);
    parameters:
    - id: source
      type: System.String
      description: "Namnet som programmet är registrerad i händelseloggen system."
  overload: System.Diagnostics.EventLog.DeleteEventSource*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The <code>source</code> parameter does not exist in the registry of the local computer.  \n  \n \\- or -  \n  \n You do not have write access on the registry key for the event log."
  platform:
  - net462
- uid: System.Diagnostics.EventLog.DeleteEventSource(System.String,System.String)
  id: DeleteEventSource(System.String,System.String)
  parent: System.Diagnostics.EventLog
  langs:
  - csharp
  name: DeleteEventSource(String,String)
  nameWithType: EventLog.DeleteEventSource(String,String)
  fullName: System.Diagnostics.EventLog.DeleteEventSource(String,String)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Tar bort programmets Händelseregistrering källa från den angivna datorn."
  remarks: "Använd den här överlagring för att ta bort registreringen av en <xref:System.Diagnostics.EventLog.Source%2A>från en fjärrdator.</xref:System.Diagnostics.EventLog.Source%2A> <xref:System.Diagnostics.EventLog.DeleteEventSource%2A>ansluter till registret på den dator som anges av `machineName` och tar bort registreringen av ditt program som en giltig källa för händelser.</xref:System.Diagnostics.EventLog.DeleteEventSource%2A>       Du kan ta bort komponenten som en giltig källa för händelser om du inte behöver skriva poster till loggen. Du kan till exempel göra detta om du behöver ändra komponenten från en logg till en annan. Eftersom en källa kan endast registreras för en logg i taget, måste ändra loggen du ta bort den aktuella registreringen.       <xref:System.Diagnostics.EventLog.DeleteEventSource%2A>tar bort den källa som registrerats till en logg.</xref:System.Diagnostics.EventLog.DeleteEventSource%2A> Om du vill ta bort själva loggen anropa <xref:System.Diagnostics.EventLog.Delete%2A>.</xref:System.Diagnostics.EventLog.Delete%2A> Om du bara vill ta bort logghändelserna anropa <xref:System.Diagnostics.EventLog.Clear%2A>.</xref:System.Diagnostics.EventLog.Clear%2A> <xref:System.Diagnostics.EventLog.Delete%2A>och <xref:System.Diagnostics.EventLog.DeleteEventSource%2A>är `static` metoder, så de kan anropas på själva klassen.</xref:System.Diagnostics.EventLog.DeleteEventSource%2A></xref:System.Diagnostics.EventLog.Delete%2A> Det är inte nödvändigt att skapa en instans av <xref:System.Diagnostics.EventLog>att anropa antingen metoden.</xref:System.Diagnostics.EventLog>       Om du tar bort en logg via ett anrop till <xref:System.Diagnostics.EventLog.Delete%2A>tas automatiskt bort datakällor som har registrerats för den logg.</xref:System.Diagnostics.EventLog.Delete%2A> Detta kan göra andra program som använder den loggen ur funktion.      > [!NOTE] > Om en datakälla har redan mappats till en logg och du mappa den till en ny loggfil, du måste starta om datorn för att ändringarna ska börja gälla."
  example:
  - "The following example deletes a source from the specified computer. The example determines the log from its source, and then deletes the log.  \n  \n> [!NOTE]\n>  More than one source might write to an event log. Before deleting a custom log, make sure there are no other sources writing to that log.  \n  \n [!code-cs[Classic EventLog.Delete1 Example#1](~/add/codesnippet/csharp/m-system.diagnostics.eve_6_1.cs)]\n [!code-cpp[Classic EventLog.Delete1 Example#1](~/add/codesnippet/cpp/m-system.diagnostics.eve_6_1.cpp)]\n [!code-vb[Classic EventLog.Delete1 Example#1](~/add/codesnippet/visualbasic/m-system.diagnostics.eve_6_1.vb)]"
  syntax:
    content: public static void DeleteEventSource (string source, string machineName);
    parameters:
    - id: source
      type: System.String
      description: "Namnet som programmet är registrerad i händelseloggen system."
    - id: machineName
      type: System.String
      description: "Namnet på den dator som ska avregistreras från, eller &quot;.&quot; för den lokala datorn."
  overload: System.Diagnostics.EventLog.DeleteEventSource*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The <code>machineName</code> parameter is invalid.  \n  \n \\- or -  \n  \n The <code>source</code> parameter does not exist in the registry of the specified computer.  \n  \n \\- or -  \n  \n You do not have write access on the registry key for the event log."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "<code>source</code>kan inte tas bort eftersom i registret överordnade registernyckeln för <code>source</code> innehåller inte en nyckel med samma namn."
  platform:
  - net462
- uid: System.Diagnostics.EventLog.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.Diagnostics.EventLog
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: EventLog.Dispose(Boolean)
  fullName: System.Diagnostics.EventLog.Dispose(Boolean)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Släpper de ohanterade resurser som används av den <xref href=&quot;System.Diagnostics.EventLog&quot;> </xref>, och du kan också släpper hanterade resurser."
  remarks: "Den här metoden anropas av allmänheten `Dispose()`metod och <xref:System.Object.Finalize%2A>metod.</xref:System.Object.Finalize%2A> `Dispose()`anropar den skyddade `Dispose(Boolean)` metod med den `disposing` parametern `true`. <xref:System.Object.Finalize%2A>anropar `Dispose` med `disposing` inställd på `false`.</xref:System.Object.Finalize%2A>       När den `disposing` parametern är true, den här metoden Frigör alla resurser som innehas av alla hanterade objekt som den här <xref:System.Diagnostics.EventLog>referenser.</xref:System.Diagnostics.EventLog> Den här metoden startar den `Dispose()` metod för varje refererade till objekt."
  syntax:
    content: protected override void Dispose (bool disposing);
    parameters:
    - id: disposing
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Frisläpp både hanterade och ohanterade resurser. <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> att släppa endast resurser som inte hanteras."
  overload: System.Diagnostics.EventLog.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.EventLog.EnableRaisingEvents
  id: EnableRaisingEvents
  parent: System.Diagnostics.EventLog
  langs:
  - csharp
  name: EnableRaisingEvents
  nameWithType: EventLog.EnableRaisingEvents
  fullName: System.Diagnostics.EventLog.EnableRaisingEvents
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Hämtar eller anger ett värde som anger om den <xref href=&quot;System.Diagnostics.EventLog&quot;> </xref> tar emot <xref href=&quot;System.Diagnostics.EventLog.EntryWritten&quot;> </xref> händelsemeddelanden."
  remarks: "Egenskapen EnableRaisingEvents bestämmer om <xref:System.Diagnostics.EventLog>genererar händelser när posterna har skrivits till loggen</xref:System.Diagnostics.EventLog> När egenskapen är `true`, komponenter som tar emot den <xref:System.Diagnostics.EventLog.EntryWritten>händelsen får ett meddelande när en post skrivs till loggfilen som anges i den <xref:System.Diagnostics.EventLog.Log%2A>egenskapen.</xref:System.Diagnostics.EventLog.Log%2A> </xref:System.Diagnostics.EventLog.EntryWritten> Om EnableRaisingEvents är `false`, inga händelser aktiveras.      > [!NOTE] > Du kan ta emot meddelanden om händelser endast när poster skrivs på den lokala datorn. Du kan inte ta emot meddelanden om poster sparas på fjärrdatorer."
  example:
  - "The following example handles an <xref:System.Diagnostics.EventLog.EntryWritten> event.  \n  \n [!code-cs[Classic EventLog.EnableRaisingEvents Example#1](~/add/codesnippet/csharp/p-system.diagnostics.eve_32_1.cs)]\n [!code-vb[Classic EventLog.EnableRaisingEvents Example#1](~/add/codesnippet/visualbasic/p-system.diagnostics.eve_32_1.vb)]\n [!code-cpp[Classic EventLog.EnableRaisingEvents Example#1](~/add/codesnippet/cpp/p-system.diagnostics.eve_32_1.cpp)]"
  syntax:
    content: public bool EnableRaisingEvents { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Om den <xref href=&quot;System.Diagnostics.EventLog&quot;> </xref> får ett meddelande när en post har skrivits till loggen, annars <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Diagnostics.EventLog.EnableRaisingEvents*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Händelseloggen finns på en fjärrdator."
  platform:
  - net462
- uid: System.Diagnostics.EventLog.EndInit
  id: EndInit
  parent: System.Diagnostics.EventLog
  langs:
  - csharp
  name: EndInit()
  nameWithType: EventLog.EndInit()
  fullName: System.Diagnostics.EventLog.EndInit()
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Slutar initieringen av en <xref href=&quot;System.Diagnostics.EventLog&quot;> </xref> används i ett formulär eller en annan komponent. Initieringen av inträffar vid körning."
  remarks: "Den [!INCLUDE[vsprvslong](~/add/includes/ajax-current-ext-md.md)] design miljö använder den här metoden för att avsluta initieringen av en komponent som används i ett formulär eller av en annan komponent. Den <xref:System.Diagnostics.EventLog.BeginInit%2A>metoden startar initieringen.</xref:System.Diagnostics.EventLog.BeginInit%2A> Med hjälp av den <xref:System.Diagnostics.EventLog.BeginInit%2A>och EndInit metoder som förhindrar att kontrollen används innan den har initierats.</xref:System.Diagnostics.EventLog.BeginInit%2A>"
  syntax:
    content: public void EndInit ();
    parameters: []
  overload: System.Diagnostics.EventLog.EndInit*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.EventLog.Entries
  id: Entries
  parent: System.Diagnostics.EventLog
  langs:
  - csharp
  name: Entries
  nameWithType: EventLog.Entries
  fullName: System.Diagnostics.EventLog.Entries
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Hämtar innehållet i händelseloggen."
  remarks: "Använd poster medlem vid läsning från händelseloggen.       Eftersom egenskapen är skrivskyddad, kan inte du ändra en post eller skriva till loggfilen transaktionerna. Ange i stället en <xref:System.Diagnostics.EventLog.Source%2A>och anropa <xref:System.Diagnostics.EventLog.WriteEntry%2A>att skriva en ny loggpost.</xref:System.Diagnostics.EventLog.WriteEntry%2A> </xref:System.Diagnostics.EventLog.Source%2A> Du kan använda poster för att räkna antalet poster i händelseloggen och visa alla <xref:System.Diagnostics.EventLogEntry>i samlingen.</xref:System.Diagnostics.EventLogEntry> Använd den indexerade <xref:System.Diagnostics.EventLogEntryCollection.Item%2A>medlem för att hämta information om en viss post som <xref:System.Diagnostics.EventLogEntry.Message%2A>, <xref:System.Diagnostics.EventLogEntry.Category%2A>, <xref:System.Diagnostics.EventLogEntry.TimeWritten%2A>, eller <xref:System.Diagnostics.EventLogEntry.EntryType%2A>.</xref:System.Diagnostics.EventLogEntry.EntryType%2A> </xref:System.Diagnostics.EventLogEntry.TimeWritten%2A> </xref:System.Diagnostics.EventLogEntry.Category%2A> </xref:System.Diagnostics.EventLogEntry.Message%2A> </xref:System.Diagnostics.EventLogEntryCollection.Item%2A>       Det är inte nödvändigt att ange en <xref:System.Diagnostics.EventLog.Source%2A>när endast läsa från en.</xref:System.Diagnostics.EventLog.Source%2A> Du kan ange endast den <xref:System.Diagnostics.EventLog.Log%2A>namn och <xref:System.Diagnostics.EventLog.MachineName%2A>(server-datornamn) egenskaper för den <xref:System.Diagnostics.EventLog>instans.</xref:System.Diagnostics.EventLog> </xref:System.Diagnostics.EventLog.MachineName%2A> </xref:System.Diagnostics.EventLog.Log%2A> I båda fallen fylls automatiskt medlemmen poster i händelseloggen lista med poster. Du kan välja lämplig indexet för ett objekt i listan om du vill läsa enskilda transaktioner.       En viktig skillnad mellan läsning och skrivning loggposter är att det inte är nödvändigt att explicit anropa en metod som skrivskyddade. Efter den <xref:System.Diagnostics.EventLog.Log%2A>och <xref:System.Diagnostics.EventLog.MachineName%2A>anges egenskapen poster fylls i automatiskt.</xref:System.Diagnostics.EventLog.MachineName%2A> </xref:System.Diagnostics.EventLog.Log%2A> Om du ändrar värdet <xref:System.Diagnostics.EventLog.Log%2A>eller <xref:System.Diagnostics.EventLog.MachineName%2A>property posterna egenskapen fylls nästa gång du läsa det.</xref:System.Diagnostics.EventLog.MachineName%2A> </xref:System.Diagnostics.EventLog.Log%2A>      > [!NOTE] > Du behöver inte ange <xref:System.Diagnostics.EventLog.MachineName%2A>Om du ansluter till en.</xref:System.Diagnostics.EventLog.MachineName%2A> Om du inte anger den <xref:System.Diagnostics.EventLog.MachineName%2A>, den lokala datorn, &quot;.&quot;, antas.</xref:System.Diagnostics.EventLog.MachineName%2A>"
  example:
  - "The following example reads entries in the event log, \"MyNewLog\", on the local computer.  \n  \n [!code-cs[Classic EventLog.Entries Example#1](~/add/codesnippet/csharp/p-system.diagnostics.eve_23_1.cs)]\n [!code-cpp[Classic EventLog.Entries Example#1](~/add/codesnippet/cpp/p-system.diagnostics.eve_23_1.cpp)]\n [!code-vb[Classic EventLog.Entries Example#1](~/add/codesnippet/visualbasic/p-system.diagnostics.eve_23_1.vb)]"
  syntax:
    content: public System.Diagnostics.EventLogEntryCollection Entries { get; }
    return:
      type: System.Diagnostics.EventLogEntryCollection
      description: "En <xref href=&quot;System.Diagnostics.EventLogEntryCollection&quot;> </xref> hålla posterna i händelseloggen. Varje post är associerad med en instans av den <xref href=&quot;System.Diagnostics.EventLogEntry&quot;> </xref> klass."
  overload: System.Diagnostics.EventLog.Entries*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.EventLog.EntryWritten
  id: EntryWritten
  parent: System.Diagnostics.EventLog
  langs:
  - csharp
  name: EntryWritten
  nameWithType: EventLog.EntryWritten
  fullName: System.Diagnostics.EventLog.EntryWritten
  type: Event
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Inträffar när en post skrivs till händelseloggen på den lokala datorn."
  remarks: "Om du vill få meddelanden om händelser, måste du ange <xref:System.Diagnostics.EventLog.EnableRaisingEvents%2A>till `true`.</xref:System.Diagnostics.EventLog.EnableRaisingEvents%2A> Du kan endast få meddelanden om händelser när poster skrivs på den lokala datorn. Du kan inte ta emot meddelanden om poster sparas på fjärrdatorer.       När du skapar en EntryWritten-delegat kan identifiera den metod som hanterar händelsen. Lägga till en instans av delegaten händelsen om du vill associera händelsen med din händelsehanterare. Händelsehanteraren anropas när händelsen inträffar, tills du tar bort delegaten. Mer information om hur du hanterar händelser med ombud finns [händelser](~/add/includes/ajax-current-ext-md.md).       Systemet svarar på <xref:System.Diagnostics.EventLog.WriteEntry%2A>endast om den senaste write-händelsen inträffade minst sex sekunder tidigare.</xref:System.Diagnostics.EventLog.WriteEntry%2A> Detta innebär att du får bara en EntryWritten händelseavisering inom ett intervall med sex sekund, även om mer än en händelselogg ändrar inträffar. Om du infogar ett tillräckligt lång strömsparläge intervall (cirka 10 sekunder) mellan anrop till <xref:System.Diagnostics.EventLog.WriteEntry%2A>, minskar risken för att förlora en händelse.</xref:System.Diagnostics.EventLog.WriteEntry%2A> Om skrivning händelser inträffar oftare, kan du dock inte får händelseavisering förrän nästa intervall. Vanligtvis missade händelsemeddelanden är inte förlorade, men fördröjd."
  example:
  - "The following example handles an entry written event.  \n  \n [!code-cs[Classic EventLog.EntryWritten Example#1](~/add/codesnippet/csharp/e-system.diagnostics.eve_1.cs)]\n [!code-cpp[Classic EventLog.EntryWritten Example#1](~/add/codesnippet/cpp/e-system.diagnostics.eve_1.cpp)]\n [!code-vb[Classic EventLog.EntryWritten Example#1](~/add/codesnippet/visualbasic/e-system.diagnostics.eve_1.vb)]"
  syntax:
    content: public event System.Diagnostics.EntryWrittenEventHandler EntryWritten;
    return:
      type: System.Diagnostics.EntryWrittenEventHandler
      description: "Som ska läggas till."
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.EventLog.Exists(System.String)
  id: Exists(System.String)
  parent: System.Diagnostics.EventLog
  langs:
  - csharp
  name: Exists(String)
  nameWithType: EventLog.Exists(String)
  fullName: System.Diagnostics.EventLog.Exists(String)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Avgör om loggen finns på den lokala datorn."
  remarks: "Använd den här metoden för att avgöra om det finns en loggfil på den lokala datorn. Om du vill avgöra om en datakälla finns på den lokala datorn, använder du <xref:System.Diagnostics.EventLog.SourceExists%2A>.</xref:System.Diagnostics.EventLog.SourceExists%2A>       Eftersom den här metoden har åtkomst till registret, måste du ha lämpliga registerbehörigheterna på den lokala datorn. Annars returnerar frågan `false`.       Eftersom du inte kan ge en ny loggfil namnet på en befintlig logg på samma dator, Använd den här metoden innan du skapar en ny loggfil för att fastställa om det angivna `logName` finns redan på den lokala datorn. Den `logName` parametern är inte skiftlägeskänsliga.       Det finns är en `static` metod, så den kan anropas på själva klassen. Det är inte nödvändigt att skapa en instans av <xref:System.Diagnostics.EventLog>att anropa Exists.</xref:System.Diagnostics.EventLog>"
  example:
  - >-
    [!code-cpp[EventLog_Exists_1#1](~/add/codesnippet/cpp/m-system.diagnostics.eve_4_1.cpp)]
     [!code-vb[EventLog_Exists_1#1](~/add/codesnippet/visualbasic/m-system.diagnostics.eve_4_1.vb)]
     [!code-cs[EventLog_Exists_1#1](~/add/codesnippet/csharp/m-system.diagnostics.eve_4_1.cs)]
  syntax:
    content: public static bool Exists (string logName);
    parameters:
    - id: logName
      type: System.String
      description: 'Namnet på loggen som ska eftersökas. Möjliga värden är: program, säkerhet, System, andra programspecifika loggar (till exempel de som är associerade med Active Directory) eller någon annan anpassad logg på datorn.'
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Om loggen finns på den lokala datorn. Annars <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Diagnostics.EventLog.Exists*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Loggnamn är <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> eller värdet är tomt."
  platform:
  - net462
- uid: System.Diagnostics.EventLog.Exists(System.String,System.String)
  id: Exists(System.String,System.String)
  parent: System.Diagnostics.EventLog
  langs:
  - csharp
  name: Exists(String,String)
  nameWithType: EventLog.Exists(String,String)
  fullName: System.Diagnostics.EventLog.Exists(String,String)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Avgör om loggen finns på den angivna datorn."
  remarks: "Använd den här metoden för att avgöra om en logg finns på en fjärrdator. Om du vill avgöra om en datakälla finns på en fjärrdator, använda <xref:System.Diagnostics.EventLog.SourceExists%2A>.</xref:System.Diagnostics.EventLog.SourceExists%2A>       Eftersom den här metoden har åtkomst till registret, måste du ha lämpliga registerbehörigheterna på den angivna datorn. Annars returnerar frågan `false`.       Eftersom du inte kan ge en ny loggfil namnet på en befintlig logg på samma dator, Använd den här metoden innan du skapar en ny loggfil för att avgöra om en med det angivna `logName` finns redan på den server som anges av den `machineName` parameter. Den `logName` och `machineName` parametrar är inte skiftlägeskänsliga.       <xref:System.Diagnostics.EventLog.Exists%2A>är en `static` metod, så den kan anropas på själva klassen.</xref:System.Diagnostics.EventLog.Exists%2A> Det är inte nödvändigt att skapa en ny instans av <xref:System.Diagnostics.EventLog>att anropa <xref:System.Diagnostics.EventLog.Exists%2A>.</xref:System.Diagnostics.EventLog.Exists%2A> </xref:System.Diagnostics.EventLog>"
  syntax:
    content: public static bool Exists (string logName, string machineName);
    parameters:
    - id: logName
      type: System.String
      description: 'Loggen som ska eftersökas. Möjliga värden är: program, säkerhet, System, andra programspecifika loggar (till exempel de som är associerade med Active Directory) eller någon annan anpassad logg på datorn.'
    - id: machineName
      type: System.String
      description: "Namnet på den dator där du vill söka efter loggen, eller &quot;.&quot; för den lokala datorn."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Om loggen finns på den angivna datorn. Annars <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Diagnostics.EventLog.Exists*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Den <code> machineName </code> parametern är ett ogiltigt format. Kontrollera att du har använt korrekt syntax för den dator som du söker.       - eller - <code> logName </code> är <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> eller värdet är tomt."
  platform:
  - net462
- uid: System.Diagnostics.EventLog.GetEventLogs
  id: GetEventLogs
  parent: System.Diagnostics.EventLog
  langs:
  - csharp
  name: GetEventLogs()
  nameWithType: EventLog.GetEventLogs()
  fullName: System.Diagnostics.EventLog.GetEventLogs()
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Söker efter alla händelseloggar på den lokala datorn och skapar en matris med <xref href=&quot;System.Diagnostics.EventLog&quot;> </xref> objekt som innehåller listan."
  remarks: "Matris med <xref:System.Diagnostics.EventLog>objekt är en ögonblicksbild av alla händelseloggar på den lokala datorn när anropet till GetEventLogs görs.</xref:System.Diagnostics.EventLog> Detta är inte en dynamisk samling så inte avspeglar tas bort eller skapa loggar i realtid. Du bör kontrollera att en logg i matrisen finns innan du kan läsa eller skriva till den. Matrisen innehåller vanligen minst tre loggar: program, System och säkerhet. Om du har skapat anpassade loggar på den lokala datorn, visas de i matrisen samt.       Du måste ha rätt registerbehörigheterna för att hämta listan över händelseloggar. Dessa behörigheter är identiska med de krävs för att anropa <xref:System.Diagnostics.EventLog.Exists%2A>och <xref:System.Diagnostics.EventLog.SourceExists%2A>.</xref:System.Diagnostics.EventLog.SourceExists%2A> </xref:System.Diagnostics.EventLog.Exists%2A>"
  example:
  - "The following example enumerates the event logs defined on the local computer, and displays configuration details for each event log.  \n  \n [!code-vb[EventLogProperties#2](~/add/codesnippet/visualbasic/m-system.diagnostics.eve_10_1.vb)]\n [!code-cpp[EventLogProperties#2](~/add/codesnippet/cpp/m-system.diagnostics.eve_10_1.cpp)]\n [!code-cs[EventLogProperties#2](~/add/codesnippet/csharp/m-system.diagnostics.eve_10_1.cs)]"
  syntax:
    content: public static System.Diagnostics.EventLog[] GetEventLogs ();
    parameters: []
    return:
      type: System.Diagnostics.EventLog[]
      description: "En matris av typen <xref href=&quot;System.Diagnostics.EventLog&quot;> </xref> som representerar loggarna på den lokala datorn."
  overload: System.Diagnostics.EventLog.GetEventLogs*
  exceptions:
  - type: System.SystemException
    commentId: T:System.SystemException
    description: "Du har inte läsbehörighet till registret.       - eller - det finns ingen tjänst för händelseloggen på datorn."
  platform:
  - net462
- uid: System.Diagnostics.EventLog.GetEventLogs(System.String)
  id: GetEventLogs(System.String)
  parent: System.Diagnostics.EventLog
  langs:
  - csharp
  name: GetEventLogs(String)
  nameWithType: EventLog.GetEventLogs(String)
  fullName: System.Diagnostics.EventLog.GetEventLogs(String)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Söker efter alla händelseloggar på den angivna datorn och skapar en matris med <xref href=&quot;System.Diagnostics.EventLog&quot;> </xref> objekt som innehåller listan."
  remarks: "Matris med <xref:System.Diagnostics.EventLog>objekt är en ögonblicksbild av alla händelseloggar på den dator som anges av den `machineName` parameter när anropet till <xref:System.Diagnostics.EventLog.GetEventLogs%2A>görs.</xref:System.Diagnostics.EventLog.GetEventLogs%2A> </xref:System.Diagnostics.EventLog> Detta är inte en dynamisk samling så inte avspeglar tas bort eller skapa loggar i realtid. Du bör kontrollera att en logg i matrisen finns innan du kan läsa eller skriva till den. Matrisen innehåller vanligen minst tre loggar: program, System och säkerhet. Om du har skapat anpassade loggar på den angivna datorn visas de i matrisen samt.       <xref:System.Diagnostics.EventLog.GetEventLogs%2A>är en `static` metod, så den kan anropas på den <xref:System.Diagnostics.EventLog>klassen sig själv.</xref:System.Diagnostics.EventLog></xref:System.Diagnostics.EventLog.GetEventLogs%2A> Det är inte nödvändigt att skapa en instans av en <xref:System.Diagnostics.EventLog>objekt att göra ett anrop till metoden.</xref:System.Diagnostics.EventLog>       Du måste ha rätt registerbehörigheterna för att hämta listan över händelseloggar. Dessa behörigheter är identiska med de krävs för att anropa <xref:System.Diagnostics.EventLog.Exists%2A>och <xref:System.Diagnostics.EventLog.SourceExists%2A>.</xref:System.Diagnostics.EventLog.SourceExists%2A> </xref:System.Diagnostics.EventLog.Exists%2A>"
  example:
  - "The following example gets a list of logs on the computer \"myServer\". It then outputs the name of each log.  \n  \n [!code-cpp[Classic EventLog.GetEventLogs1 Example#1](~/add/codesnippet/cpp/m-system.diagnostics.eve_18_1.cpp)]\n [!code-cs[Classic EventLog.GetEventLogs1 Example#1](~/add/codesnippet/csharp/m-system.diagnostics.eve_18_1.cs)]\n [!code-vb[Classic EventLog.GetEventLogs1 Example#1](~/add/codesnippet/visualbasic/m-system.diagnostics.eve_18_1.vb)]"
  syntax:
    content: public static System.Diagnostics.EventLog[] GetEventLogs (string machineName);
    parameters:
    - id: machineName
      type: System.String
      description: "Den dator som du vill söka efter händelseloggar."
    return:
      type: System.Diagnostics.EventLog[]
      description: "En matris av typen <xref href=&quot;System.Diagnostics.EventLog&quot;> </xref> som representerar loggfilerna på den angivna datorn."
  overload: System.Diagnostics.EventLog.GetEventLogs*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Den <code> machineName </code> parametern är ett felaktigt datornamn."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Du har inte läsbehörighet till registret.       - eller - det finns ingen tjänst för händelseloggen på datorn."
  platform:
  - net462
- uid: System.Diagnostics.EventLog.Log
  id: Log
  parent: System.Diagnostics.EventLog
  langs:
  - csharp
  name: Log
  nameWithType: EventLog.Log
  fullName: System.Diagnostics.EventLog.Log
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Hämtar eller anger namnet på loggen att läsa från eller skriva till."
  remarks: "Three log files exist by default on the server: Application, System, and Security. Applications and services use the Application log file. Device drivers use the System log file. The system generates success and failure audit events in the Security log when auditing is turned on. If you have other applications installed, like Active Directory on Windows servers, there might be other default log files. In addition, you can create custom log files on a local or remote computer. Custom logs help organize your entries in a more detailed way than is allowed when your components write events to the default Application log.  \n  \n> [!NOTE]\n>  Log names are limited to eight characters. According to the system, MyLogSample1 and MyLogSample2 are the same log.  \n  \n If you write to an event log, it is not enough to specify the Log property. You must associate a <xref:System.Diagnostics.EventLog.Source%2A> property with your event log resource to connect it to a particular log. It is not necessary to specify a <xref:System.Diagnostics.EventLog.Source%2A> when only reading from a log, but an event source must be associated with the event log resource in the server's registry. You can specify only the Log name and <xref:System.Diagnostics.EventLog.MachineName%2A> (server computer name) to read from it.  \n  \n> [!NOTE]\n>  You are not required to specify the <xref:System.Diagnostics.EventLog.MachineName%2A> if you are connecting to a log. If you do not specify the <xref:System.Diagnostics.EventLog.MachineName%2A>, the local computer (\".\") is assumed.  \n  \n If the <xref:System.Diagnostics.EventLog.Source%2A> property has not been specified, a call to Log returns an empty string if Log has not been explicitly set (by setting the Log property, or through the constructor). If the <xref:System.Diagnostics.EventLog.Source%2A> has been specified, Log returns the name of the log to which that source was registered.  \n  \n A source can only be registered to one log at a time. If the <xref:System.Diagnostics.EventLog.Source%2A> property was set for an instance of <xref:System.Diagnostics.EventLog>, you cannot change the Log property for that <xref:System.Diagnostics.EventLog> without changing the value of <xref:System.Diagnostics.EventLog.Source%2A> or calling <xref:System.Diagnostics.EventLog.DeleteEventSource%2A> first. If you change the Log property after the <xref:System.Diagnostics.EventLog.Source%2A> property has been set, writing a log entry throws an exception.  \n  \n The operating system stores event logs as files. When you use <xref:System.Diagnostics.EventLogInstaller> or <xref:System.Diagnostics.EventLog.CreateEventSource%2A> to create a new event log, the associated file is stored in the %SystemRoot%\\System32\\Config directory on the specified computer. The file name is set by appending the first 8 characters of the Log property with the \".evt\" file name extension.  \n  \n You cannot create a new log using the Log property alone (without specifying a source for the log). You can call <xref:System.Diagnostics.EventLog.CreateEventSource%2A>, passing in a new log name as a parameter, and then call <xref:System.Diagnostics.EventLog.DeleteEventSource%2A>. However, the intent is usually either to create (and write entries to) new application-specific logs, or to read from existing logs.  \n  \n If the Log value changes, the event log is closed and all event handles are released.  \n  \n> [!CAUTION]\n>  If you set the Log property to the name of a log that does not exist, the system attaches the <xref:System.Diagnostics.EventLog> to the Application log, but does not warn you that it is using a log other than the one you specified."
  example:
  - "The following example reads entries in the event log, \"NewEventLog\", on the local computer.  \n  \n [!code-cpp[Classic EventLog.Log Example#1](~/add/codesnippet/cpp/p-system.diagnostics.eve_17_1.cpp)]\n [!code-cs[Classic EventLog.Log Example#1](~/add/codesnippet/csharp/p-system.diagnostics.eve_17_1.cs)]\n [!code-vb[Classic EventLog.Log Example#1](~/add/codesnippet/visualbasic/p-system.diagnostics.eve_17_1.vb)]"
  syntax:
    content: public string Log { get; set; }
    return:
      type: System.String
      description: "Namnet på loggen. Detta kan vara program, System, säkerhet eller ett anpassat loggnamn. Standardvärdet är en tom sträng (&quot;&quot;)."
  overload: System.Diagnostics.EventLog.Log*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.EventLog.LogDisplayName
  id: LogDisplayName
  parent: System.Diagnostics.EventLog
  langs:
  - csharp
  name: LogDisplayName
  nameWithType: EventLog.LogDisplayName
  fullName: System.Diagnostics.EventLog.LogDisplayName
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Hämtar i händelseloggen eget namn."
  remarks: "> [!NOTE]> I Windows Vista och senare, har användare inte behörighet att komma åt säkerhetsloggen. Om du kör Windows Vista eller senare som en användare, kommer en <xref:System.Security.SecurityException>när du försöker komma åt visningsnamnet för en händelse i loggen för säkerhet</xref:System.Security.SecurityException>   >> I Windows Vista och senare, anger behörigheter för en användare för kontroll av användarkonto (User Account Control). Om du är medlem i gruppen inbyggda administratörer tilldelas två körning åtkomst-token: en standardanvändares åtkomst-token och en administratör åtkomst-token. Som standard är standard användarrollen. Om du vill köra koden som ansluter till säkerhetsloggen måste du först höja din behörighet från standardanvändare till administratören. Du kan göra detta när du startar ett program genom att högerklicka på programikonen och som anger att du vill köra som administratör."
  example:
  - "The following example enumerates the event logs defined on the local computer and displays the LogDisplayName for each event log.  \n  \n [!code-vb[EventLogProperties#2](~/add/codesnippet/visualbasic/p-system.diagnostics.eve_29_1.vb)]\n [!code-cpp[EventLogProperties#2](~/add/codesnippet/cpp/p-system.diagnostics.eve_29_1.cpp)]\n [!code-cs[EventLogProperties#2](~/add/codesnippet/csharp/p-system.diagnostics.eve_29_1.cs)]"
  syntax:
    content: public string LogDisplayName { get; }
    return:
      type: System.String
      description: "Ett namn som representerar loggen i Loggboken för systemets."
  overload: System.Diagnostics.EventLog.LogDisplayName*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Den angivna <xref:System.Diagnostics.EventLog.Log*>finns inte i registret för den här datorn.</xref:System.Diagnostics.EventLog.Log*>"
  platform:
  - net462
- uid: System.Diagnostics.EventLog.LogNameFromSourceName(System.String,System.String)
  id: LogNameFromSourceName(System.String,System.String)
  parent: System.Diagnostics.EventLog
  langs:
  - csharp
  name: LogNameFromSourceName(String,String)
  nameWithType: EventLog.LogNameFromSourceName(String,String)
  fullName: System.Diagnostics.EventLog.LogNameFromSourceName(String,String)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Hämtar namnet på loggen som den angivna källan är registrerad."
  remarks: "Händelsekällan anger vad loggar händelsen. Det är ofta namnet på programmet eller namnet på en underkomponenten för programmet, om programmet är stor. Program och tjänster ska skriva till programloggen eller en anpassad logg. Drivrutiner ska skriva i systemloggen.       När du skapar en ny källa kan bara att skriva till en logg i taget, registrerar systemet ditt program med händelseloggen som en giltig källa för transaktioner. Den <xref:System.Diagnostics.EventLog.Source%2A>egenskapen kan vara valfri sträng, men namnet kan inte användas av andra källor på datorn.</xref:System.Diagnostics.EventLog.Source%2A> Ett försök att skapa en duplicerad <xref:System.Diagnostics.EventLog.Source%2A>värdet genererar ett undantag.</xref:System.Diagnostics.EventLog.Source%2A> En enskild händelselogg kan dock ha flera olika källor skrivning till den."
  example:
  - "The following example deletes a source from the local computer. The example determines the log from its source, and then deletes the log.  \n  \n> [!NOTE]\n>  More than one source might write to an event log. Before deleting a custom log, make sure there are no other sources writing to that log.  \n  \n [!code-cpp[Classic EventLog.DeleteEventSource Example#1](~/add/codesnippet/cpp/m-system.diagnostics.eve_2_1.cpp)]\n [!code-vb[Classic EventLog.DeleteEventSource Example#1](~/add/codesnippet/visualbasic/m-system.diagnostics.eve_2_1.vb)]\n [!code-cs[Classic EventLog.DeleteEventSource Example#1](~/add/codesnippet/csharp/m-system.diagnostics.eve_2_1.cs)]"
  syntax:
    content: public static string LogNameFromSourceName (string source, string machineName);
    parameters:
    - id: source
      type: System.String
      description: "Namnet på händelsekällan."
    - id: machineName
      type: System.String
      description: "Namnet på den dator som ska eftersökas eller &quot;.&quot; för den lokala datorn."
    return:
      type: System.String
      description: "Namnet på loggen som är associerade med den angivna källan i registret."
  overload: System.Diagnostics.EventLog.LogNameFromSourceName*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.EventLog.MachineName
  id: MachineName
  parent: System.Diagnostics.EventLog
  langs:
  - csharp
  name: MachineName
  nameWithType: EventLog.MachineName
  fullName: System.Diagnostics.EventLog.MachineName
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Hämtar eller anger namnet på datorn som du vill läsa eller skriva händelser."
  remarks: "Om du skriver till en händelselogg, måste du associera en <xref:System.Diagnostics.EventLog.Source%2A>med händelseloggen-objekt för att ansluta den till en viss.</xref:System.Diagnostics.EventLog.Source%2A> Det är inte nödvändigt att ange <xref:System.Diagnostics.EventLog.Source%2A>egenskapen när endast läsa från en.</xref:System.Diagnostics.EventLog.Source%2A> Du kan ange endast den <xref:System.Diagnostics.EventLog.Log%2A>namn och MachineName (server-datornamn).</xref:System.Diagnostics.EventLog.Log%2A>      > [!NOTE] > Behöver du inte ange datornamn om du ansluter till en logg. Om du inte anger datornamn, den lokala datorn (&quot;.&quot;) antas.       En källa kan bara registreras för en logg i taget. Om den <xref:System.Diagnostics.EventLog.Source%2A>egenskapen har angetts för en instans av <xref:System.Diagnostics.EventLog>, du kan inte ändra egenskapen MachineName för som <xref:System.Diagnostics.EventLog>utan att ändra värdet för <xref:System.Diagnostics.EventLog.Source%2A>eller anropa <xref:System.Diagnostics.EventLog.DeleteEventSource%2A>första.</xref:System.Diagnostics.EventLog.DeleteEventSource%2A> </xref:System.Diagnostics.EventLog.Source%2A> </xref:System.Diagnostics.EventLog> </xref:System.Diagnostics.EventLog> </xref:System.Diagnostics.EventLog.Source%2A> Om du ändrar egenskapen MachineName den <xref:System.Diagnostics.EventLog>stängs alla referenser och reattaches till loggen och källa på den nya datorn.</xref:System.Diagnostics.EventLog>       MachineName-värdet får inte vara en tom sträng. Om den inte uttryckligen har angetts används som standard den lokala datorn (&quot;.&quot;)."
  example:
  - "The following example reads entries in the event log, \"NewEventLog\", on a specified computer.  \n  \n [!code-cs[Classic EventLog.MachineName Example#1](~/add/codesnippet/csharp/p-system.diagnostics.eve_6_1.cs)]\n [!code-vb[Classic EventLog.MachineName Example#1](~/add/codesnippet/visualbasic/p-system.diagnostics.eve_6_1.vb)]\n [!code-cpp[Classic EventLog.MachineName Example#1](~/add/codesnippet/cpp/p-system.diagnostics.eve_6_1.cpp)]"
  syntax:
    content: public string MachineName { get; set; }
    return:
      type: System.String
      description: "Namnet på den server som finns i händelseloggen. Standardvärdet är den lokala datorn (&quot;.&quot;)."
  overload: System.Diagnostics.EventLog.MachineName*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Datornamn är ogiltigt."
  platform:
  - net462
- uid: System.Diagnostics.EventLog.MaximumKilobytes
  id: MaximumKilobytes
  parent: System.Diagnostics.EventLog
  langs:
  - csharp
  name: MaximumKilobytes
  nameWithType: EventLog.MaximumKilobytes
  fullName: System.Diagnostics.EventLog.MaximumKilobytes
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Hämtar eller anger den maximala storleken i kilobyte."
  remarks: "Egenskapen MaximumKilobytes representerar storleksgränsen på i händelseloggen. När loggen når storleksgränsen den konfigurerade <xref:System.Diagnostics.EventLog.OverflowAction%2A>värdet avgör huruvida nya poster tas bort, eller om nya poster över äldre poster.</xref:System.Diagnostics.EventLog.OverflowAction%2A>      > [!NOTE] > Denna egenskap representerar en konfigurationsinställning för händelseloggen som representeras av den här instansen. När loggen når maximal storlek, anger den här egenskapen hur operativsystemet hanterar nya poster som skrivits av alla händelsekällor som registrerats för händelseloggen."
  example:
  - "The following example enumerates the event logs defined on the local computer, and displays configuration details for each event log.  \n  \n [!code-vb[EventLogProperties#2](~/add/codesnippet/visualbasic/p-system.diagnostics.eve_15_1.vb)]\n [!code-cpp[EventLogProperties#2](~/add/codesnippet/cpp/p-system.diagnostics.eve_15_1.cpp)]\n [!code-cs[EventLogProperties#2](~/add/codesnippet/csharp/p-system.diagnostics.eve_15_1.cs)]"
  syntax:
    content: public long MaximumKilobytes { get; set; }
    return:
      type: System.Int64
      description: "Den maximala händelseloggstorleken i kilobyte. Standardvärdet är 512, som anger en maximal storlek på 512 kB."
  overload: System.Diagnostics.EventLog.MaximumKilobytes*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "Det angivna värdet är mindre än 64, eller större än 4194240 eller inte en jämn multipel av 64."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "The <xref:System.Diagnostics.EventLog.Log*> value is not a valid log name.  \n  \n \\- or -  \n  \n The registry key for the event log could not be opened on the target computer."
  platform:
  - net462
- uid: System.Diagnostics.EventLog.MinimumRetentionDays
  id: MinimumRetentionDays
  parent: System.Diagnostics.EventLog
  langs:
  - csharp
  name: MinimumRetentionDays
  nameWithType: EventLog.MinimumRetentionDays
  fullName: System.Diagnostics.EventLog.MinimumRetentionDays
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Hämtar antalet dagar att behålla poster i händelseloggen."
  remarks: "Använd egenskapen MinimumRetentionDays för att undersöka den aktuella inställningen för en händelselogg. Använd <xref:System.Diagnostics.EventLog.ModifyOverflowPolicy%2A>att ändra det minsta antalet dagar som måste behållas varje post i händelseloggen.</xref:System.Diagnostics.EventLog.ModifyOverflowPolicy%2A>       MinimumRetentionDays värde beror på konfigurerade spill funktionssätt i händelseloggen. Om den <xref:System.Diagnostics.OverflowAction>för en händelselogg egenskapen <xref:System.Diagnostics.OverflowAction>, och sedan MinimumRetentionDays-värdet är 0.</xref:System.Diagnostics.OverflowAction> </xref:System.Diagnostics.OverflowAction> Om den <xref:System.Diagnostics.OverflowAction>för en händelselogg egenskapen <xref:System.Diagnostics.OverflowAction>, och sedan MinimumRetentionDays-värdet är-1.</xref:System.Diagnostics.OverflowAction> </xref:System.Diagnostics.OverflowAction> Om den <xref:System.Diagnostics.OverflowAction>för en händelselogg egenskapen <xref:System.Diagnostics.OverflowAction>, och sedan MinimumRetentionDays-värdet är större än noll och representerar antalet dagar att behålla poster i händelseloggen när händelseloggen är full.</xref:System.Diagnostics.OverflowAction> </xref:System.Diagnostics.OverflowAction>       Spill problemet inträffar bara när en händelselogg uppnår storleksgränsen. När en <xref:System.Diagnostics.EventLog>har dess <xref:System.Diagnostics.EventLog.OverflowAction%2A>inställd på <xref:System.Diagnostics.OverflowAction>, och loggen når maximal storlek och sedan nya poster skrivs endast om de ersätter poster vars ålder överskrider perioden som MinimumRetentionDays.</xref:System.Diagnostics.OverflowAction> </xref:System.Diagnostics.EventLog.OverflowAction%2A> </xref:System.Diagnostics.EventLog> Det är lämpligt att behålla händelseposter minst när händelseloggen arkiveras regelbundet. Annars riskerar du att förlora nya poster när loggen når sin gräns. Ange minst dagar efter händelser baserat på schemat för en viss händelselogg Arkiv för att undvika att förlora nya händelseinformation."
  example:
  - "The following example enumerates the event logs defined on the local computer, and displays configuration details for each event log.  \n  \n [!code-vb[EventLogProperties#2](~/add/codesnippet/visualbasic/p-system.diagnostics.eve_12_1.vb)]\n [!code-cpp[EventLogProperties#2](~/add/codesnippet/cpp/p-system.diagnostics.eve_12_1.cpp)]\n [!code-cs[EventLogProperties#2](~/add/codesnippet/csharp/p-system.diagnostics.eve_12_1.cs)]"
  syntax:
    content: public int MinimumRetentionDays { get; }
    return:
      type: System.Int32
      description: "Antal dagar som bevaras poster i händelseloggen. Standardvärdet är 7."
  overload: System.Diagnostics.EventLog.MinimumRetentionDays*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.EventLog.ModifyOverflowPolicy(System.Diagnostics.OverflowAction,System.Int32)
  id: ModifyOverflowPolicy(System.Diagnostics.OverflowAction,System.Int32)
  parent: System.Diagnostics.EventLog
  langs:
  - csharp
  name: ModifyOverflowPolicy(OverflowAction,Int32)
  nameWithType: EventLog.ModifyOverflowPolicy(OverflowAction,Int32)
  fullName: System.Diagnostics.EventLog.ModifyOverflowPolicy(OverflowAction,Int32)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Ändrar konfigurerade funktionen för att skriva nya poster när loggen når maximal storlek."
  remarks: "Spill beteendet för en händelselogg anger vad som händer när nya poster som ska skrivas till en logg som har nått maximal storlek.      > [!NOTE] > Beteendet spill gäller endast när en händelselogg når maximal storlek. Den spill påverkar inte skriva en ny post till en logg som kan anpassas ytterligare händelseloggposter.       Metoden ModifyOverflowPolicy konfigurerar spill beteendet för en händelselogg. <xref:System.Diagnostics.EventLog>instans.</xref:System.Diagnostics.EventLog> När du anropar den här metoden för händelseloggen som anges av den <xref:System.Diagnostics.EventLog.Log%2A>-egenskapen i <xref:System.Diagnostics.EventLog.OverflowAction%2A>och <xref:System.Diagnostics.EventLog.MinimumRetentionDays%2A>egenskapsvärden återspeglar beteendet nyligen konfigurerade spill.</xref:System.Diagnostics.EventLog.MinimumRetentionDays%2A> </xref:System.Diagnostics.EventLog.OverflowAction%2A> </xref:System.Diagnostics.EventLog.Log%2A>      > [!NOTE] > Denna egenskap representerar en konfigurationsinställning för händelseloggen som representeras av den här instansen. När loggen når maximal storlek, anger den här egenskapen hur operativsystemet hanterar nya poster som skrivits av alla händelsekällor som registrerats för händelseloggen.       Ange den `action` parameter till <xref:System.Diagnostics.OverflowAction>att indikera att en ny post skriver över den äldsta posten när den <xref:System.Diagnostics.EventLog>når sin maximala storlek.</xref:System.Diagnostics.EventLog> </xref:System.Diagnostics.OverflowAction> Om den `action` parametern anges till <xref:System.Diagnostics.OverflowAction>, `retentionDays` värdet på parametern ignoreras.</xref:System.Diagnostics.OverflowAction>       Ange den `action` parameter till <xref:System.Diagnostics.OverflowAction>att indikera att varje ny transaktion skriver över äldre poster när den <xref:System.Diagnostics.EventLog>når sin maximala storlek.</xref:System.Diagnostics.EventLog> </xref:System.Diagnostics.OverflowAction> Ange antalet dagar som händelser måste behållas i loggen med hjälp av `retentionDays` parameter. Händelser som sparas i kvarhållningsintervallet inte skrivs över av nya poster.       Ange den `action` parameter till <xref:System.Diagnostics.OverflowAction>Ignorera nya händelser när loggen har nåtts.</xref:System.Diagnostics.OverflowAction> Om den `action` parametern anges till <xref:System.Diagnostics.OverflowAction>, `retentionDays` värdet på parametern ignoreras.</xref:System.Diagnostics.OverflowAction>      > [!CAUTION] > Principen spill till <xref:System.Diagnostics.OverflowAction>anger att nya poster ignoreras när händelseloggen är full.</xref:System.Diagnostics.OverflowAction> Om du använder den här inställningen, kontrollera händelseloggen är regelbundet arkiveras och rensas för att undvika att nå maxstorlek."
  example:
  - "The following example displays the configured overflow policy for a specified event log, and allows the user to select a new overflow policy setting for the event log.  \n  \n [!code-vb[EventLogProperties#3](~/add/codesnippet/visualbasic/0b0fc273-a638-4af9-ae99-_1.vb)]\n [!code-cpp[EventLogProperties#3](~/add/codesnippet/cpp/0b0fc273-a638-4af9-ae99-_1.cpp)]\n [!code-cs[EventLogProperties#3](~/add/codesnippet/csharp/0b0fc273-a638-4af9-ae99-_1.cs)]"
  syntax:
    content: public void ModifyOverflowPolicy (System.Diagnostics.OverflowAction action, int retentionDays);
    parameters:
    - id: action
      type: System.Diagnostics.OverflowAction
      description: "Spill beteendet för att skriva nya poster i händelseloggen."
    - id: retentionDays
      type: System.Int32
      description: "Det minsta antalet dagar som varje post i händelseloggen finns kvar. Den här parametern används bara om `action` är inställd på <xref href=&quot;System.Diagnostics.OverflowAction&quot;> </xref>."
  overload: System.Diagnostics.EventLog.ModifyOverflowPolicy*
  exceptions:
  - type: System.ComponentModel.InvalidEnumArgumentException
    commentId: T:System.ComponentModel.InvalidEnumArgumentException
    description: "<code>action</code>är inte ett giltigt <xref:System.Diagnostics.EventLog.OverflowAction*> värde."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>retentionDays</code>är mindre än 1, eller större än 365."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "The <xref:System.Diagnostics.EventLog.Log*> value is not a valid log name.  \n  \n \\- or -  \n  \n The registry key for the event log could not be opened on the target computer."
  platform:
  - net462
- uid: System.Diagnostics.EventLog.OverflowAction
  id: OverflowAction
  parent: System.Diagnostics.EventLog
  langs:
  - csharp
  name: OverflowAction
  nameWithType: EventLog.OverflowAction
  fullName: System.Diagnostics.EventLog.OverflowAction
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Hämtar det konfigurerade beteenden för att lagra nya poster när loggen når sin maximala loggfilsstorleken."
  remarks: "Händelseloggar växer i storlek som nya händelser skrivs till dem. Varje händelseloggen har en gräns för konfigurerade maximala storleken. den <xref:System.Diagnostics.EventLog.MaximumKilobytes%2A>definierar egenskapen det maximala antalet kilobyte för händelsen loggfilens storlek.</xref:System.Diagnostics.EventLog.MaximumKilobytes%2A>       Använda egenskapsvärdet OverflowAction för att undersöka konfigurerade spill beteendet för en händelselogg i maximal storlek. Använd <xref:System.Diagnostics.EventLog.ModifyOverflowPolicy%2A>metoden för att ändra spill beteendet för en händelselogg.</xref:System.Diagnostics.EventLog.ModifyOverflowPolicy%2A>      > [!NOTE] > Beteendet spill gäller endast när en händelselogg når maximal storlek. Den spill påverkar inte skriva en ny post till en logg som kan anpassas ytterligare händelseloggposter."
  example:
  - "The following example enumerates the event logs defined on the local computer, and displays configuration details for each event log.  \n  \n [!code-vb[EventLogProperties#2](~/add/codesnippet/visualbasic/p-system.diagnostics.eve_28_1.vb)]\n [!code-cpp[EventLogProperties#2](~/add/codesnippet/cpp/p-system.diagnostics.eve_28_1.cpp)]\n [!code-cs[EventLogProperties#2](~/add/codesnippet/csharp/p-system.diagnostics.eve_28_1.cs)]"
  syntax:
    content: public System.Diagnostics.OverflowAction OverflowAction { get; }
    return:
      type: System.Diagnostics.OverflowAction
      description: "Den <xref href=&quot;System.Diagnostics.OverflowAction&quot;> </xref> värde som anger beteendet konfigurerade för att lagra nya poster när loggen når Loggfilens största storlek. Standardvärdet är <xref href=&quot;System.Diagnostics.OverflowAction&quot;> </xref>."
  overload: System.Diagnostics.EventLog.OverflowAction*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.EventLog.RegisterDisplayName(System.String,System.Int64)
  id: RegisterDisplayName(System.String,System.Int64)
  parent: System.Diagnostics.EventLog
  langs:
  - csharp
  name: RegisterDisplayName(String,Int64)
  nameWithType: EventLog.RegisterDisplayName(String,Int64)
  fullName: System.Diagnostics.EventLog.RegisterDisplayName(String,Int64)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Anger det lokaliserade namnet på händelseloggen som visas i Loggboken-servern."
  remarks: "Använd RegisterDisplayName för att registrera och visa ett lokaliserat namn i Loggboken för anpassade händelseloggar.       Den angivna Resursidentifieraren måste motsvara en lokaliserad sträng som definierats i resursfilen. Loggboken visar anpassade händelseloggen med hjälp av den lokaliserade strängen och de aktuella inställningarna för kultur. Du kan till exempel definiera flera Händelseloggnamn lokaliserade för olika kulturer i resursfilen. Loggboken visar den lokaliserade strängen som motsvarar kultur-inställningarna för den aktuella användaren.       Om Loggboken inte kan läsa in lokaliserad sträng från resursfilen, eller om inget namn har registrerats för händelseloggen, visar Loggboken händelseloggens namn som definierats i <xref:System.Diagnostics.EventLog.Log%2A>.</xref:System.Diagnostics.EventLog.Log%2A>      > [!NOTE] > Du behöver inte registrera ett namn för de fördefinierade händelseloggarna. Operativsystemet journaler lokaliserade visningsnamnen för händelseloggarna program, System och säkerhet."
  example:
  - "The following example determines whether the event source named `SampleApplicationSource` is registered on the local computer. If the event source does not exist, the example sets the message resource file for the source and creates the new event source. Finally, the example sets the localized display name for the event log, using the resource identifier value in `DisplayNameMsgId` and the resource file path in `messageFile`.  \n  \n [!code-cpp[EventLog_WriteEvent#6](~/add/codesnippet/cpp/m-system.diagnostics.eve_1_1.cpp)]\n [!code-vb[EventLog_WriteEvent#6](~/add/codesnippet/visualbasic/m-system.diagnostics.eve_1_1.vb)]\n [!code-cs[EventLog_WriteEvent#6](~/add/codesnippet/csharp/m-system.diagnostics.eve_1_1.cs)]  \n  \n The example uses the following message text file, built into the resource library EventLogMsgs.dll. A message text file is the source from which the message resource file is created. The message text file defines the resource identifiers and text for the category, event message, and parameter insertion strings. Specifically, resource identifier 5001 is defined for the localized name of the event log.  \n  \n```  \n; // EventLogMsgs.mc  \n; // ********************************************************  \n  \n; // Use the following commands to build this file:  \n  \n; //   mc -s EventLogMsgs.mc  \n; //   rc EventLogMsgs.rc  \n; //   link /DLL /SUBSYSTEM:WINDOWS /NOENTRY /MACHINE:x86 EventLogMsgs.Res   \n; // ********************************************************  \n  \n; // - Event categories -  \n; // Categories must be numbered consecutively starting at 1.  \n; // ********************************************************  \n  \nMessageId=0x1  \nSeverity=Success  \nSymbolicName=INSTALL_CATEGORY  \nLanguage=English  \nInstallation  \n.  \n  \nMessageId=0x2  \nSeverity=Success  \nSymbolicName=QUERY_CATEGORY  \nLanguage=English  \nDatabase Query  \n.  \n  \nMessageId=0x3  \nSeverity=Success  \nSymbolicName=REFRESH_CATEGORY  \nLanguage=English  \nData Refresh  \n.  \n  \n; // - Event messages -  \n; // *********************************  \n  \nMessageId = 1000  \nSeverity = Success  \nFacility = Application  \nSymbolicName = AUDIT_SUCCESS_MESSAGE_ID_1000  \nLanguage=English  \nMy application message text, in English, for message id 1000, called from %1.  \n.  \n  \nMessageId = 1001  \nSeverity = Warning  \nFacility = Application  \nSymbolicName = AUDIT_FAILED_MESSAGE_ID_1001  \nLanguage=English  \nMy application message text, in English, for message id 1001, called from %1.  \n.  \n  \nMessageId = 1002  \nSeverity = Success  \nFacility = Application  \nSymbolicName = GENERIC_INFO_MESSAGE_ID_1002  \nLanguage=English  \nMy generic information message in English, for message id 1002.  \n.  \n  \nMessageId = 1003  \nSeverity = Warning  \nFacility = Application  \nSymbolicName = GENERIC_WARNING_MESSAGE_ID_1003  \nLanguage=English  \nMy generic warning message in English, for message id 1003, called from %1.  \n.  \n  \nMessageId = 1004  \nSeverity = Success  \nFacility = Application  \nSymbolicName = UPDATE_CYCLE_COMPLETE_MESSAGE_ID_1004  \nLanguage=English  \nThe update cycle is complete for %%5002.  \n.  \n  \nMessageId = 1005  \nSeverity = Warning  \nFacility = Application  \nSymbolicName = SERVER_CONNECTION_DOWN_MESSAGE_ID_1005  \nLanguage=English  \nThe refresh operation did not complete because the connection to server %1 could not be established.  \n.  \n  \n; // - Event log display name -  \n; // ********************************************************  \n  \nMessageId = 5001  \nSeverity = Success  \nFacility = Application  \nSymbolicName = EVENT_LOG_DISPLAY_NAME_MSGID  \nLanguage=English  \nSample Event Log  \n.  \n  \n; // - Event message parameters -  \n; //   Language independent insertion strings  \n; // ********************************************************  \n  \nMessageId = 5002  \nSeverity = Success  \nFacility = Application  \nSymbolicName = EVENT_LOG_SERVICE_NAME_MSGID  \nLanguage=English  \nSVC_UPDATE.EXE  \n.  \n```"
  syntax:
    content: public void RegisterDisplayName (string resourceFile, long resourceId);
    parameters:
    - id: resourceFile
      type: System.String
      description: "Fullständiga sökvägen till en lokaliserad resurs-fil."
    - id: resourceId
      type: System.Int64
      description: "Resursidentifieraren som indexerar en lokaliserad sträng i resursfilen."
  overload: System.Diagnostics.EventLog.RegisterDisplayName*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "The <xref:System.Diagnostics.EventLog.Log*> value is not a valid log name.  \n  \n \\- or -  \n  \n The registry key for the event log could not be opened on the target computer."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>resourceFile </code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Diagnostics.EventLog.Source
  id: Source
  parent: System.Diagnostics.EventLog
  langs:
  - csharp
  name: Source
  nameWithType: EventLog.Source
  fullName: System.Diagnostics.EventLog.Source
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Hämtar eller anger källnamnet att registrera och användas vid skrivning till händelseloggen."
  remarks: "Händelsekällan anger vad loggar händelsen. Det är ofta namnet på programmet eller namnet på en underkomponenten för programmet, om programmet är stor. Program och tjänster ska skriva till programloggen eller en anpassad logg. Drivrutiner ska skriva i systemloggen.       Du behöver bara ange en händelsekälla om du skriver till en händelselogg. Innan du skriver en post till en händelselogg, måste du registrera händelsekällan med händelseloggen som en giltig källa för händelser. När du skriver en loggpost används egenskapen Source för att hitta relevant logg att placera din inmatning. Om du läser loggen kan du antingen ange käll- eller en <xref:System.Diagnostics.EventLog.Log%2A>och <xref:System.Diagnostics.EventLog.MachineName%2A>.</xref:System.Diagnostics.EventLog.MachineName%2A> </xref:System.Diagnostics.EventLog.Log%2A>      > [!NOTE] > Du behöver inte ange den <xref:System.Diagnostics.EventLog.MachineName%2A>Om du ansluter till en logg på den lokala datorn.</xref:System.Diagnostics.EventLog.MachineName%2A> Om du inte anger den <xref:System.Diagnostics.EventLog.MachineName%2A>, den lokala datorn (&quot;.&quot;) antas.</xref:System.Diagnostics.EventLog.MachineName%2A>       Använda <xref:System.Diagnostics.EventLog.WriteEvent%2A>och <xref:System.Diagnostics.EventLog.WriteEntry%2A>skriva händelser till en händelselogg.</xref:System.Diagnostics.EventLog.WriteEntry%2A> </xref:System.Diagnostics.EventLog.WriteEvent%2A> Du måste ange en händelsekälla om du vill skriva händelser. Du måste skapa och konfigurera händelsekällan innan den första posten med källan.       Skapa ny händelsekälla under installationen av programmet. Det ger dig tid för operativsystemet för att uppdatera listan över registrerade händelsekällor och deras konfiguration. Om operativsystemet inte har uppdaterats sin lista över händelsekällor och försök att skriva en händelse med källan nya Skrivåtgärden misslyckas. Du kan konfigurera en ny datakälla med hjälp av en <xref:System.Diagnostics.EventLogInstaller>, eller med hjälp av den <xref:System.Diagnostics.EventLog.CreateEventSource%2A>metoden.</xref:System.Diagnostics.EventLog.CreateEventSource%2A> </xref:System.Diagnostics.EventLogInstaller> Du måste ha administratörsbehörighet på datorn för att skapa en ny händelsekälla.       Du kan skapa en händelsekälla för en befintlig händelselogg eller en ny händelselogg. När du skapar en ny källa för en ny händelselogg systemet registrerar källa för den loggen, men loggen skapas inte förrän den första posten skrivs till den.       Källan måste vara unika på den lokala datorn. ett nytt namn för datakällan kan inte matcha en befintlig datakällans namn eller ett befintligt namn i händelseloggen. Varje källa kan skriva till händelseloggen för endast en i taget. programmet kan dock använda flera källor för att skriva till flera händelseloggar. Programmet kan till exempel kräva flera källor som konfigurerats för olika händelseloggar eller annan resursfiler.       Om du ändrar källan-värdet i <xref:System.Diagnostics.EventLog>till som den är registrerad är stängd och alla händelsehanterare släpps.</xref:System.Diagnostics.EventLog>       Källan måste konfigureras för att skriva lokaliserade poster eller för att skriva direkt strängar. Om ditt program skrivs poster med både resursidentifierare och strängvärden, måste du registrera två olika källor. Till exempel konfigurera en källa med resursfiler och sedan använda som källa i <xref:System.Diagnostics.EventLog.WriteEvent%2A>metoden att skriva poster med hjälp av resursidentifierare till händelseloggen.</xref:System.Diagnostics.EventLog.WriteEvent%2A> Skapa sedan en annan källa utan resursfiler, och använda som källa i den <xref:System.Diagnostics.EventLog.WriteEntry%2A>metod för att skriva strängar direkt till händelseloggen med hjälp av den här källan.</xref:System.Diagnostics.EventLog.WriteEntry%2A>       Om du vill ändra konfigurationsinformationen för en befintlig datakälla måste du ta bort källan och sedan skapa den med den nya konfigurationen. Om andra program eller -komponenter använder befintliga källan, skapar du en ny källa med den uppdaterade konfigurationen i stället för att ta bort den befintliga datakällan.      > [!NOTE] > Om en datakälla har redan mappats till en logg och du mappa den till en ny loggfil, du måste starta om datorn för att ändringarna ska börja gälla."
  example:
  - "The following example creates the source `MySource` if it does not already exist, and writes an entry to the event log `MyNewLog`.  \n  \n [!code-cs[Classic EventLog.Source Example#1](~/add/codesnippet/csharp/p-system.diagnostics.eve_18_1.cs)]\n [!code-vb[Classic EventLog.Source Example#1](~/add/codesnippet/visualbasic/p-system.diagnostics.eve_18_1.vb)]\n [!code-cpp[Classic EventLog.Source Example#1](~/add/codesnippet/cpp/p-system.diagnostics.eve_18_1.cpp)]"
  syntax:
    content: public string Source { get; set; }
    return:
      type: System.String
      description: "Namnet som registrerats med händelseloggen som källa för transaktioner. Standardvärdet är en tom sträng (&quot;&quot;)."
  overload: System.Diagnostics.EventLog.Source*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Källnamnet resulterar i en registersökväg längre än 254 tecken."
  platform:
  - net462
- uid: System.Diagnostics.EventLog.SourceExists(System.String)
  id: SourceExists(System.String)
  parent: System.Diagnostics.EventLog
  langs:
  - csharp
  name: SourceExists(String)
  nameWithType: EventLog.SourceExists(String)
  fullName: System.Diagnostics.EventLog.SourceExists(String)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Anger om en händelsekälla är registrerad på den lokala datorn."
  remarks: "Använd den här metoden för att avgöra om en händelsekälla finns på den lokala datorn. Om du vill fastställa om det finns en loggfil på den lokala datorn använda <xref:System.Diagnostics.EventLog.Exists%2A>.</xref:System.Diagnostics.EventLog.Exists%2A>       Eftersom den här metoden har åtkomst till registret, måste du ha lämpliga registerbehörigheterna på den lokala datorn. Annars en <xref:System.Security.SecurityException>genereras.</xref:System.Security.SecurityException>      > [!NOTE] > Om du vill söka efter en händelsekälla i Windows Vista och senare eller Windows Server 2003, måste du ha administratörsbehörighet.   >> Orsaken till det här kravet är att alla händelseloggar, inklusive säkerhet, måste sökas igenom för att avgöra om händelsekällan är unika. Från och med Windows Vista har användare inte behörighet att komma åt säkerhetsloggen; Därför kan en <xref:System.Security.SecurityException>genereras.</xref:System.Security.SecurityException>   >> Från och med Windows Vista, kontroll av användarkonto (User Account Control) anger behörigheter för en användare. Om du är medlem i gruppen inbyggda administratörer tilldelas två körning åtkomst-token: en standardanvändares åtkomst-token och en administratör åtkomst-token. Som standard är standard användarrollen. Om du vill köra koden som ansluter till prestandaräknare, måste du först höja din behörighet från standardanvändare till administratören. Du kan göra detta när du startar ett program genom att högerklicka på programikonen och som anger att du vill köra som administratör.      > [!NOTE] > En tjänst som körs under den <xref:System.ServiceProcess.ServiceAccount>kontot har inte den behörighet som krävs för att utföra den här metoden.</xref:System.ServiceProcess.ServiceAccount> Lösningen är att kontrollera om händelsekällan finns i den <xref:System.ServiceProcess.ServiceInstaller>, och om det inte finns, om du vill skapa källan i installationsprogrammet.</xref:System.ServiceProcess.ServiceInstaller>       Eftersom du inte kan ge en ny källa namnet på en befintlig datakälla på samma dator, Använd den här metoden innan du försöker för att anropa <xref:System.Diagnostics.EventLog.CreateEventSource%2A>så att en datakälla med namnet som angetts av `source` inte redan finns på den lokala datorn.</xref:System.Diagnostics.EventLog.CreateEventSource%2A> Den `source` parameter är inte skiftlägeskänsligt."
  example:
  - "The following example creates the source `MySource` if it does not already exist, and writes an entry to the event log `MyNewLog`.  \n  \n [!code-cs[Classic EventLog.Source Example#1](~/add/codesnippet/csharp/m-system.diagnostics.eve_14_1.cs)]\n [!code-vb[Classic EventLog.Source Example#1](~/add/codesnippet/visualbasic/m-system.diagnostics.eve_14_1.vb)]\n [!code-cpp[Classic EventLog.Source Example#1](~/add/codesnippet/cpp/m-system.diagnostics.eve_14_1.cpp)]"
  syntax:
    content: public static bool SourceExists (string source);
    parameters:
    - id: source
      type: System.String
      description: "Namnet på händelsekällan."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Om händelsekällan är registrerad på den lokala datorn. Annars <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Diagnostics.EventLog.SourceExists*
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "<code>source</code>hittades inte, men vissa eller alla händelseloggar gick inte att söka."
  platform:
  - net462
- uid: System.Diagnostics.EventLog.SourceExists(System.String,System.String)
  id: SourceExists(System.String,System.String)
  parent: System.Diagnostics.EventLog
  langs:
  - csharp
  name: SourceExists(String,String)
  nameWithType: EventLog.SourceExists(String,String)
  fullName: System.Diagnostics.EventLog.SourceExists(String,String)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Anger om en händelsekälla är registrerad på en angiven dator."
  remarks: "Använd den här metoden för att avgöra om en händelsekälla finns på den dator som anges av den `machineName` parameter. Om du vill avgöra om en logg finns på den angivna datorn Använd <xref:System.Diagnostics.EventLog.Exists%2A>.</xref:System.Diagnostics.EventLog.Exists%2A>       Eftersom den här metoden har åtkomst till registret, måste du ha lämpliga registerbehörigheterna på den angivna servern. Annars en <xref:System.Security.SecurityException>genereras.</xref:System.Security.SecurityException>      > [!NOTE] > Om du vill söka efter en händelsekälla i Windows Vista och senare eller Windows Server 2003, måste du ha administratörsbehörighet.   >> Orsaken till det här kravet är att alla händelseloggar, inklusive säkerhet, måste sökas igenom för att avgöra om händelsekällan är unika. Från och med Windows Vista har användare inte behörighet att komma åt säkerhetsloggen; Därför kan en <xref:System.Security.SecurityException>genereras.</xref:System.Security.SecurityException>   >> Från och med Windows Vista, kontroll av användarkonto (User Account Control) anger behörigheter för en användare. Om du är medlem i gruppen inbyggda administratörer tilldelas två körning åtkomst-token: en standardanvändares åtkomst-token och en administratör åtkomst-token. Som standard är standard användarrollen. Om du vill köra koden som ansluter till prestandaräknare, måste du först höja din behörighet från standardanvändare till administratören. Du kan göra detta när du startar ett program genom att högerklicka på programikonen och som anger att du vill köra som administratör.      > [!NOTE] > En tjänst som körs under den <xref:System.ServiceProcess.ServiceAccount>kontot har inte den behörighet som krävs för att utföra den här metoden.</xref:System.ServiceProcess.ServiceAccount> Lösningen är att kontrollera om händelsekällan finns i den <xref:System.ServiceProcess.ServiceInstaller>, och om det inte finns, om du vill skapa källan i installationsprogrammet.</xref:System.ServiceProcess.ServiceInstaller>       Eftersom du inte kan ge en ny källa namnet på en befintlig datakälla på samma dator, Använd den här metoden innan du försöker för att anropa <xref:System.Diagnostics.EventLog.CreateEventSource%2A>så att en datakälla med namnet som angetts av `source` inte redan finns på datorn.</xref:System.Diagnostics.EventLog.CreateEventSource%2A> Den `source` och `machineName` parametrar är inte skiftlägeskänsliga.       <xref:System.Diagnostics.EventLog.SourceExists%2A>är en `static` metod, så den kan anropas på själva klassen.</xref:System.Diagnostics.EventLog.SourceExists%2A> Det är inte nödvändigt att skapa en instans för <xref:System.Diagnostics.EventLog>att anropa <xref:System.Diagnostics.EventLog.SourceExists%2A>.</xref:System.Diagnostics.EventLog.SourceExists%2A> </xref:System.Diagnostics.EventLog>"
  example:
  - "The following example creates the source `MySource` on the computer `MyServer`, and writes an entry to the event log `MyNewLog`.  \n  \n [!code-cpp[Classic EventLog.SourceExists1 Example#1](~/add/codesnippet/cpp/m-system.diagnostics.eve_16_1.cpp)]\n [!code-cs[Classic EventLog.SourceExists1 Example#1](~/add/codesnippet/csharp/m-system.diagnostics.eve_16_1.cs)]\n [!code-vb[Classic EventLog.SourceExists1 Example#1](~/add/codesnippet/visualbasic/m-system.diagnostics.eve_16_1.vb)]"
  syntax:
    content: public static bool SourceExists (string source, string machineName);
    parameters:
    - id: source
      type: System.String
      description: "Namnet på händelsekällan."
    - id: machineName
      type: System.String
      description: "Namnet på den dator som ska eftersökas eller &quot;.&quot; för den lokala datorn."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Om händelsekällan är registrerad på den angivna datorn. Annars <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Diagnostics.EventLog.SourceExists*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>machineName</code>är ett felaktigt datornamn."
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "<code>source</code>hittades inte, men vissa eller alla händelseloggar gick inte att söka."
  platform:
  - net462
- uid: System.Diagnostics.EventLog.SynchronizingObject
  id: SynchronizingObject
  parent: System.Diagnostics.EventLog
  langs:
  - csharp
  name: SynchronizingObject
  nameWithType: EventLog.SynchronizingObject
  fullName: System.Diagnostics.EventLog.SynchronizingObject
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Hämtar eller anger det objekt som används för att konvertera de händelsehanteraranrop som utfärdas till följd av ett <xref href=&quot;System.Diagnostics.EventLog&quot;> </xref> transaktionen skrivs händelse."
  remarks: "När SynchronizingObject är `null`, metoder som hanterar den <xref:System.Diagnostics.EventLog.EntryWritten>händelse anropas på en tråd från system trådpoolen.</xref:System.Diagnostics.EventLog.EntryWritten> Mer information om system tråd pooler finns <xref:System.Threading.ThreadPool>.</xref:System.Threading.ThreadPool>       När den <xref:System.Diagnostics.EventLog.EntryWritten>händelsen hanterats av en visual Windows Forms komponenten, till exempel en knapp och ansluter till komponenten via trådpoolen system inte kanske fungerar eller leda till ett undantag.</xref:System.Diagnostics.EventLog.EntryWritten> Undvik detta genom att ange SynchronizingObject till en Windows Forms-komponent, vilket gör att de metoder som hanterar den <xref:System.Diagnostics.EventLog.EntryWritten>händelse anropas på samma tråd där komponenten skapades.</xref:System.Diagnostics.EventLog.EntryWritten>       Om den <xref:System.Diagnostics.EventLog>används i [!INCLUDE[vsprvslong](~/add/includes/ajax-current-ext-md.md)] SynchronizingObject anges i en Windows Forms-designer automatiskt till kontrollen som innehåller <xref:System.Diagnostics.EventLog>.</xref:System.Diagnostics.EventLog> </xref:System.Diagnostics.EventLog> Till exempel om du placerar en <xref:System.Diagnostics.EventLog>på en designer för Form1 (som ärver från <xref:System.Windows.Forms.Form>) SynchronizingObject-egenskapen för <xref:System.Diagnostics.EventLog>anges till instansen av Form1.</xref:System.Diagnostics.EventLog> </xref:System.Windows.Forms.Form> </xref:System.Diagnostics.EventLog>"
  syntax:
    content: public System.ComponentModel.ISynchronizeInvoke SynchronizingObject { get; set; }
    return:
      type: System.ComponentModel.ISynchronizeInvoke
      description: "Den <xref href=&quot;System.ComponentModel.ISynchronizeInvoke&quot;> </xref> används för att konvertera händelsehanteraren anrop som utfärdats till följd av ett <xref href=&quot;System.Diagnostics.EventLog.EntryWritten&quot;> </xref> händelse i händelseloggen."
  overload: System.Diagnostics.EventLog.SynchronizingObject*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.EventLog.WriteEntry(System.String)
  id: WriteEntry(System.String)
  parent: System.Diagnostics.EventLog
  langs:
  - csharp
  name: WriteEntry(String)
  nameWithType: EventLog.WriteEntry(String)
  fullName: System.Diagnostics.EventLog.WriteEntry(String)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Skriver typen posten, med angivna meddelandetexten i händelseloggen."
  remarks: "Använd den här metoden för att skriva en informationspost i händelseloggen som är associerade med den här <xref:System.Diagnostics.EventLog>instans.</xref:System.Diagnostics.EventLog> Om du vill ange någon annan <xref:System.Diagnostics.EventLogEntryType>använder en annan överlagring för <xref:System.Diagnostics.EventLog.WriteEntry%2A>.</xref:System.Diagnostics.EventLog.WriteEntry%2A> </xref:System.Diagnostics.EventLogEntryType>      > [!NOTE] > Den `message` strängen får inte innehålla %*n*, där *n* är ett heltalsvärde (till exempel %1) eftersom Loggboken behandlas den som en infogningssträng. Eftersom en Internet Protocol version 6 (IPv6)-adressen kan innehålla detta teckensekvensen, kan du inte logga en händelsemeddelande som innehåller en IPv6-adress.       Du måste ange <xref:System.Diagnostics.EventLog.Source%2A>egenskapen på <xref:System.Diagnostics.EventLog>komponenten innan du kan skriva poster i loggen</xref:System.Diagnostics.EventLog> </xref:System.Diagnostics.EventLog.Source%2A> Du måste skapa och konfigurera händelsekällan innan den första posten med källan.       Skapa ny händelsekälla under installationen av programmet. Det ger dig tid för operativsystemet för att uppdatera listan över registrerade händelsekällor och deras konfiguration. Om operativsystemet inte har uppdaterats sin lista över händelsekällor och försök att skriva en händelse med källan nya Skrivåtgärden misslyckas. Du kan konfigurera en ny datakälla med hjälp av en <xref:System.Diagnostics.EventLogInstaller>, eller med hjälp av den <xref:System.Diagnostics.EventLog.CreateEventSource%2A>metoden.</xref:System.Diagnostics.EventLog.CreateEventSource%2A> </xref:System.Diagnostics.EventLogInstaller> Du måste ha administratörsbehörighet på datorn för att skapa en ny händelsekälla.       Om källan anges i den <xref:System.Diagnostics.EventLog.Source%2A>egenskapen för detta <xref:System.Diagnostics.EventLog>instansen är inte registrerad på den dator där komponenten skriver till, <xref:System.Diagnostics.EventLog.WriteEntry%2A>anrop <xref:System.Diagnostics.EventLog.CreateEventSource%2A>och registrerar källan.</xref:System.Diagnostics.EventLog.CreateEventSource%2A> </xref:System.Diagnostics.EventLog.WriteEntry%2A> </xref:System.Diagnostics.EventLog> </xref:System.Diagnostics.EventLog.Source%2A>      > [!NOTE] > Om du inte anger en <xref:System.Diagnostics.EventLog.MachineName%2A>för din <xref:System.Diagnostics.EventLog>instansen innan du anropar <xref:System.Diagnostics.EventLog.CreateEventSource%2A>eller <xref:System.Diagnostics.EventLog.WriteEntry%2A>, den lokala datorn (&quot;.&quot;) antas.</xref:System.Diagnostics.EventLog.WriteEntry%2A> </xref:System.Diagnostics.EventLog.CreateEventSource%2A> </xref:System.Diagnostics.EventLog> </xref:System.Diagnostics.EventLog.MachineName%2A>       Om datorn måste registreras <xref:System.Diagnostics.EventLog.Source%2A>via ett anrop till <xref:System.Diagnostics.EventLog.WriteEntry%2A>och <xref:System.Diagnostics.EventLog.Log%2A>egenskapen har inte ställts in på din <xref:System.Diagnostics.EventLog>instans, loggen som standard programmets.</xref:System.Diagnostics.EventLog> </xref:System.Diagnostics.EventLog.Log%2A> </xref:System.Diagnostics.EventLog.WriteEntry%2A> </xref:System.Diagnostics.EventLog.Source%2A>      > [!NOTE] > Många av de undantag som anges ovan genereras av fel som uppstår under processen med att registrera <xref:System.Diagnostics.EventLog.Source%2A>.</xref:System.Diagnostics.EventLog.Source%2A>       Källan måste konfigureras för att skriva lokaliserade poster eller för att skriva direkt strängar. Den <xref:System.Diagnostics.EventLog.WriteEntry%2A>metoden skriver den angivna strängen direkt till händelseloggen; den inte använder en lokaliserbara meddelandet resursfil.</xref:System.Diagnostics.EventLog.WriteEntry%2A> Använd den <xref:System.Diagnostics.EventLog.WriteEvent%2A>metod för att skriva händelser med hjälp av en lokaliserad resurs meddelandefil.</xref:System.Diagnostics.EventLog.WriteEvent%2A>       Om ditt program skrivs poster med både resursidentifierare och strängvärden, måste du registrera två olika källor. Till exempel konfigurera en källa med resursfiler och sedan använda som källa i <xref:System.Diagnostics.EventLog.WriteEvent%2A>metoden att skriva poster med hjälp av resursidentifierare till händelseloggen.</xref:System.Diagnostics.EventLog.WriteEvent%2A> Skapa sedan en annan källa utan resursfiler, och använda som källa i den <xref:System.Diagnostics.EventLog.WriteEntry%2A>metod för att skriva strängar direkt till händelseloggen med hjälp av den här källan.</xref:System.Diagnostics.EventLog.WriteEntry%2A>      > [!NOTE] > Om du skriver en post till en fjärrdator, värdet för meddelande (textsträng) kanske inte som du förväntar dig om fjärrdatorn inte körs i .NET Framework.      > [!NOTE] > Om den `message` parametern innehåller ett null-tecken, meddelande i händelseloggen avbryts vid NUL-tecknet."
  example:
  - "The following example creates the source `MySource` if it does not already exist, and writes an entry to the event log `MyNewLog`.  \n  \n [!code-cs[Classic EventLog.CreateEventSource Example#1](~/add/codesnippet/csharp/m-system.diagnostics.eve_7_1.cs)]\n [!code-cpp[Classic EventLog.CreateEventSource Example#1](~/add/codesnippet/cpp/m-system.diagnostics.eve_7_1.cpp)]\n [!code-vb[Classic EventLog.CreateEventSource Example#1](~/add/codesnippet/visualbasic/m-system.diagnostics.eve_7_1.vb)]"
  syntax:
    content: public void WriteEntry (string message);
    parameters:
    - id: message
      type: System.String
      description: "Strängen att skriva till händelseloggen."
  overload: System.Diagnostics.EventLog.WriteEntry*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The <xref:System.Diagnostics.EventLog.Source*> property of the <xref href=\"System.Diagnostics.EventLog\"></xref> has not been set.  \n  \n -or-  \n  \n The method attempted to register a new event source, but the computer name in <xref:System.Diagnostics.EventLog.MachineName*> is not valid.  \n  \n \\- or -  \n  \n The source is already registered for a different event log.  \n  \n \\- or -  \n  \n The message string is longer than 31,839 bytes (32,766 bytes on Windows operating systems before Windows Vista).  \n  \n \\- or -  \n  \n The source name results in a registry key path longer than 254 characters."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Det gick inte att öppna registernyckeln för händelseloggen."
  - type: System.ComponentModel.Win32Exception
    commentId: T:System.ComponentModel.Win32Exception
    description: "Operativsystemet rapporterade ett fel när du skriver händelse posten i händelseloggen. En Windows-felkoden är inte tillgänglig."
  platform:
  - net462
- uid: System.Diagnostics.EventLog.WriteEntry(System.String,System.Diagnostics.EventLogEntryType)
  id: WriteEntry(System.String,System.Diagnostics.EventLogEntryType)
  parent: System.Diagnostics.EventLog
  langs:
  - csharp
  name: WriteEntry(String,EventLogEntryType)
  nameWithType: EventLog.WriteEntry(String,EventLogEntryType)
  fullName: System.Diagnostics.EventLog.WriteEntry(String,EventLogEntryType)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Skriver ett fel, varning, information, lyckad granskning eller fel granskningspost med angivna meddelandetexten i händelseloggen."
  remarks: "Använd den här metoden för att skriva en post för en angiven <xref:System.Diagnostics.EventLogEntryType>händelselogg.</xref:System.Diagnostics.EventLogEntryType> Den `type` anges med en ikon och text i kolumnen typ i Loggboken för en logg.      > [!NOTE] > Den `message` strängen får inte innehålla %*n*, där *n* är ett heltalsvärde (till exempel %1) eftersom Loggboken behandlas den som en infogningssträng. Eftersom en Internet Protocol version 6 (IPv6)-adressen kan innehålla detta teckensekvensen, kan du inte logga en händelsemeddelande som innehåller en IPv6-adress.       Du måste ange <xref:System.Diagnostics.EventLog.Source%2A>egenskapen på <xref:System.Diagnostics.EventLog>komponenten innan du kan skriva poster i loggen</xref:System.Diagnostics.EventLog> </xref:System.Diagnostics.EventLog.Source%2A> Du måste skapa och konfigurera händelsekällan innan den första posten med källan.       Skapa ny händelsekälla under installationen av programmet. Det ger dig tid för operativsystemet för att uppdatera listan över registrerade händelsekällor och deras konfiguration. Om operativsystemet inte har uppdaterats sin lista över händelsekällor och försök att skriva en händelse med källan nya Skrivåtgärden misslyckas. Du kan konfigurera en ny datakälla med hjälp av en <xref:System.Diagnostics.EventLogInstaller>, eller med hjälp av den <xref:System.Diagnostics.EventLog.CreateEventSource%2A>metoden.</xref:System.Diagnostics.EventLog.CreateEventSource%2A> </xref:System.Diagnostics.EventLogInstaller> Du måste ha administratörsbehörighet på datorn för att skapa en ny händelsekälla.       Om källan anges i den <xref:System.Diagnostics.EventLog.Source%2A>egenskapen för detta <xref:System.Diagnostics.EventLog>instansen är inte registrerad på den dator där komponenten skriver till, <xref:System.Diagnostics.EventLog.WriteEntry%2A>anrop <xref:System.Diagnostics.EventLog.CreateEventSource%2A>och registrerar källan.</xref:System.Diagnostics.EventLog.CreateEventSource%2A> </xref:System.Diagnostics.EventLog.WriteEntry%2A> </xref:System.Diagnostics.EventLog> </xref:System.Diagnostics.EventLog.Source%2A>      > [!NOTE] > Om du inte anger en <xref:System.Diagnostics.EventLog.MachineName%2A>för din <xref:System.Diagnostics.EventLog>instansen innan du anropar <xref:System.Diagnostics.EventLog.CreateEventSource%2A>eller <xref:System.Diagnostics.EventLog.WriteEntry%2A>, den lokala datorn (&quot;.&quot;) antas.</xref:System.Diagnostics.EventLog.WriteEntry%2A> </xref:System.Diagnostics.EventLog.CreateEventSource%2A> </xref:System.Diagnostics.EventLog> </xref:System.Diagnostics.EventLog.MachineName%2A>       Om datorn måste registreras <xref:System.Diagnostics.EventLog.Source%2A>via ett anrop till <xref:System.Diagnostics.EventLog.WriteEntry%2A>och <xref:System.Diagnostics.EventLog.Log%2A>egenskapen har inte ställts in på din <xref:System.Diagnostics.EventLog>instans, loggen som standard programmets.</xref:System.Diagnostics.EventLog> </xref:System.Diagnostics.EventLog.Log%2A> </xref:System.Diagnostics.EventLog.WriteEntry%2A> </xref:System.Diagnostics.EventLog.Source%2A>      > [!NOTE] > Många undantag som anges ovan har genererats av fel som uppstår under processen med att registrera <xref:System.Diagnostics.EventLog.Source%2A>.</xref:System.Diagnostics.EventLog.Source%2A>       Källan måste konfigureras för att skriva lokaliserade poster eller för att skriva direkt strängar. Den <xref:System.Diagnostics.EventLog.WriteEntry%2A>metoden skriver den angivna strängen direkt till händelseloggen; den inte använder en lokaliserbara meddelandet resursfil.</xref:System.Diagnostics.EventLog.WriteEntry%2A> Använd den <xref:System.Diagnostics.EventLog.WriteEvent%2A>metod för att skriva händelser med hjälp av en lokaliserad resurs meddelandefil.</xref:System.Diagnostics.EventLog.WriteEvent%2A>       Om ditt program skrivs poster med både resursidentifierare och strängvärden, måste du registrera två olika källor. Till exempel konfigurera en källa med resursfiler och sedan använda som källa i <xref:System.Diagnostics.EventLog.WriteEvent%2A>metoden att skriva poster med hjälp av resursidentifierare till händelseloggen.</xref:System.Diagnostics.EventLog.WriteEvent%2A> Skapa sedan en annan källa utan resursfiler, och använda som källa i den <xref:System.Diagnostics.EventLog.WriteEntry%2A>metod för att skriva strängar direkt till händelseloggen med hjälp av den här källan.</xref:System.Diagnostics.EventLog.WriteEntry%2A>      > [!NOTE] > Om du skriver en post till en fjärrdator, värdet för meddelande (textsträng) kanske inte som du förväntar dig om fjärrdatorn inte körs i .NET Framework.      > [!NOTE] > Om den `message` parametern innehåller ett null-tecken, meddelande i händelseloggen avbryts vid NUL-tecknet."
  example:
  - "The following example writes a warning entry to an event log, \"MyNewLog\", on the local computer.  \n  \n [!code-cpp[Classic EventLog.WriteEntry2 Example#1](~/add/codesnippet/cpp/19aeba79-224e-4604-90d9-_1.cpp)]\n [!code-cs[Classic EventLog.WriteEntry2 Example#1](~/add/codesnippet/csharp/19aeba79-224e-4604-90d9-_1.cs)]\n [!code-vb[Classic EventLog.WriteEntry2 Example#1](~/add/codesnippet/visualbasic/19aeba79-224e-4604-90d9-_1.vb)]"
  syntax:
    content: public void WriteEntry (string message, System.Diagnostics.EventLogEntryType type);
    parameters:
    - id: message
      type: System.String
      description: "Strängen att skriva till händelseloggen."
    - id: type
      type: System.Diagnostics.EventLogEntryType
      description: "En av de <xref href=&quot;System.Diagnostics.EventLogEntryType&quot;> </xref> värden."
  overload: System.Diagnostics.EventLog.WriteEntry*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The <xref:System.Diagnostics.EventLog.Source*> property of the <xref href=\"System.Diagnostics.EventLog\"></xref> has not been set.  \n  \n -or-  \n  \n The method attempted to register a new event source, but the computer name in <xref:System.Diagnostics.EventLog.MachineName*> is not valid.  \n  \n \\- or -  \n  \n The source is already registered for a different event log.  \n  \n \\- or -  \n  \n The message string is longer than 31,839 bytes (32,766 bytes on Windows operating systems before Windows Vista).  \n  \n \\- or -  \n  \n The source name results in a registry key path longer than 254 characters."
  - type: System.ComponentModel.InvalidEnumArgumentException
    commentId: T:System.ComponentModel.InvalidEnumArgumentException
    description: "<code>type</code>är inte ett giltigt <xref href=&quot;System.Diagnostics.EventLogEntryType&quot;> </xref>."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Det gick inte att öppna registernyckeln för händelseloggen."
  - type: System.ComponentModel.Win32Exception
    commentId: T:System.ComponentModel.Win32Exception
    description: "Operativsystemet rapporterade ett fel när du skriver händelse posten i händelseloggen. En Windows-felkoden är inte tillgänglig."
  platform:
  - net462
- uid: System.Diagnostics.EventLog.WriteEntry(System.String,System.String)
  id: WriteEntry(System.String,System.String)
  parent: System.Diagnostics.EventLog
  langs:
  - csharp
  name: WriteEntry(String,String)
  nameWithType: EventLog.WriteEntry(String,String)
  fullName: System.Diagnostics.EventLog.WriteEntry(String,String)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Skriver en post för typ av information med angivna meddelandetexten i händelseloggen med hjälp av den angivna registrerade händelsekällan."
  remarks: "Använd den här metoden för att skriva en information i händelseloggen med hjälp av en källa som redan har registrerats som en händelsekälla för relevant logg. Om du vill ange någon annan <xref:System.Diagnostics.EventLogEntryType>använder en annan överlagring för <xref:System.Diagnostics.EventLog.WriteEntry%2A>.</xref:System.Diagnostics.EventLog.WriteEntry%2A> </xref:System.Diagnostics.EventLogEntryType>       Du måste skapa och konfigurera händelsekällan innan den första posten med källan. Skapa ny händelsekälla under installationen av programmet. Det ger dig tid för operativsystemet för att uppdatera listan över registrerade händelsekällor och deras konfiguration. Om operativsystemet inte har uppdaterats sin lista över händelsekällor och försök att skriva en händelse med källan nya Skrivåtgärden misslyckas. Du kan konfigurera en ny datakälla med hjälp av en <xref:System.Diagnostics.EventLogInstaller>, eller med hjälp av den <xref:System.Diagnostics.EventLog.CreateEventSource%2A>metoden.</xref:System.Diagnostics.EventLog.CreateEventSource%2A> </xref:System.Diagnostics.EventLogInstaller> Du måste ha administratörsbehörighet på datorn för att skapa en ny händelsekälla.       Källan måste konfigureras för att skriva lokaliserade poster eller för att skriva direkt strängar. Den <xref:System.Diagnostics.EventLog.WriteEntry%2A>metoden skriver den angivna strängen direkt till händelseloggen; den inte använder en lokaliserbara meddelandet resursfil.</xref:System.Diagnostics.EventLog.WriteEntry%2A> Använd den <xref:System.Diagnostics.EventLog.WriteEvent%2A>metod för att skriva händelser med hjälp av en lokaliserad resurs meddelandefil.</xref:System.Diagnostics.EventLog.WriteEvent%2A>       Om ditt program skrivs poster med både resursidentifierare och strängvärden, måste du registrera två olika källor. Till exempel konfigurera en källa med resursfiler och sedan använda som källa i <xref:System.Diagnostics.EventLog.WriteEvent%2A>metoden att skriva poster med hjälp av resursidentifierare till händelseloggen.</xref:System.Diagnostics.EventLog.WriteEvent%2A> Skapa sedan en annan källa utan resursfiler, och använda som källa i den <xref:System.Diagnostics.EventLog.WriteEntry%2A>metod för att skriva strängar direkt till händelseloggen med hjälp av den här källan.</xref:System.Diagnostics.EventLog.WriteEntry%2A>      > [!NOTE] > Om den `message` parametern innehåller ett null-tecken, meddelande i händelseloggen avbryts vid NUL-tecknet.   >> De `message` strängen får inte innehålla %*n*, där *n* är ett heltalsvärde (till exempel %1) eftersom Loggboken behandlas den som en infogningssträng. Eftersom en Internet Protocol version 6 (IPv6)-adressen kan innehålla detta teckensekvensen, kan du inte logga en händelsemeddelande som innehåller en IPv6-adress."
  example:
  - "The following example creates the source `MySource` if it does not already exist, and writes an entry to the event log `MyNewLog`.  \n  \n [!code-cpp[Classic EventLog.WriteEntry1 Example#1](~/add/codesnippet/cpp/m-system.diagnostics.eve_3_1.cpp)]\n [!code-cs[Classic EventLog.WriteEntry1 Example#1](~/add/codesnippet/csharp/m-system.diagnostics.eve_3_1.cs)]\n [!code-vb[Classic EventLog.WriteEntry1 Example#1](~/add/codesnippet/visualbasic/m-system.diagnostics.eve_3_1.vb)]"
  syntax:
    content: public static void WriteEntry (string source, string message);
    parameters:
    - id: source
      type: System.String
      description: "Källan som programmet har registrerats på den angivna datorn."
    - id: message
      type: System.String
      description: "Strängen att skriva till händelseloggen."
  overload: System.Diagnostics.EventLog.WriteEntry*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The <code>source</code> value is an empty string (\"\").  \n  \n \\- or -  \n  \n The <code>source</code> value is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.  \n  \n \\- or -  \n  \n The message string is longer than 31,839 bytes (32,766 bytes on Windows operating systems before Windows Vista).  \n  \n \\- or -  \n  \n The source name results in a registry key path longer than 254 characters."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Det gick inte att öppna registernyckeln för händelseloggen."
  - type: System.ComponentModel.Win32Exception
    commentId: T:System.ComponentModel.Win32Exception
    description: "Operativsystemet rapporterade ett fel när du skriver händelse posten i händelseloggen. En Windows-felkoden är inte tillgänglig."
  platform:
  - net462
- uid: System.Diagnostics.EventLog.WriteEntry(System.String,System.Diagnostics.EventLogEntryType,System.Int32)
  id: WriteEntry(System.String,System.Diagnostics.EventLogEntryType,System.Int32)
  parent: System.Diagnostics.EventLog
  langs:
  - csharp
  name: WriteEntry(String,EventLogEntryType,Int32)
  nameWithType: EventLog.WriteEntry(String,EventLogEntryType,Int32)
  fullName: System.Diagnostics.EventLog.WriteEntry(String,EventLogEntryType,Int32)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Skriver en post med det angivna meddelandetext och programdefinierade Händelseidentifieraren i händelseloggen."
  remarks: "Använd den här metoden för att skriva en post med en tillämpningsdefinierad `eventID` i händelseloggen. Den `eventID` tillsammans med källan som unikt identifierar en händelse. Varje program kan definiera en egen numrerade händelser och beskrivningssträngarna de mappar. Händelsen visningsprogram visa dessa strängvärden för att hjälpa användaren att förstå vad som hände och rekommenderar vilka åtgärder som ska vidtas.      > [!NOTE] > Den `message` strängen får inte innehålla %*n*, där *n* är ett heltalsvärde (till exempel %1) eftersom Loggboken behandlas den som en infogningssträng. Eftersom en Internet Protocol version 6 (IPv6)-adressen kan innehålla detta teckensekvensen, kan du inte logga en händelsemeddelande som innehåller en IPv6-adress.       Förutom händelse-ID, kan du ange en <xref:System.Diagnostics.EventLogEntryType>för den händelse som skrivs till händelseloggen.</xref:System.Diagnostics.EventLogEntryType> Den `type` anges med en ikon och text i kolumnen typ i Loggboken för en logg. Den här parametern anger om vilken typ av händelse är fel, varning, information, lyckad granskning eller fel vid granskning.       Du måste ange <xref:System.Diagnostics.EventLog.Source%2A>egenskapen på <xref:System.Diagnostics.EventLog>komponenten innan du kan skriva poster i loggen</xref:System.Diagnostics.EventLog> </xref:System.Diagnostics.EventLog.Source%2A> Du måste skapa och konfigurera händelsekällan innan den första posten med källan.       Skapa ny händelsekälla under installationen av programmet. Det ger dig tid för operativsystemet för att uppdatera listan över registrerade händelsekällor och deras konfiguration. Om operativsystemet inte har uppdaterats sin lista över händelsekällor och försök att skriva en händelse med källan nya Skrivåtgärden misslyckas. Du kan konfigurera en ny datakälla med hjälp av en <xref:System.Diagnostics.EventLogInstaller>, eller med hjälp av den <xref:System.Diagnostics.EventLog.CreateEventSource%2A>metoden.</xref:System.Diagnostics.EventLog.CreateEventSource%2A> </xref:System.Diagnostics.EventLogInstaller> Du måste ha administratörsbehörighet på datorn för att skapa en ny händelsekälla.       Om källan anges i den <xref:System.Diagnostics.EventLog.Source%2A>egenskapen för detta <xref:System.Diagnostics.EventLog>instansen är inte registrerad på den dator där komponenten skriver till, <xref:System.Diagnostics.EventLog.WriteEntry%2A>anrop <xref:System.Diagnostics.EventLog.CreateEventSource%2A>och registrerar källan.</xref:System.Diagnostics.EventLog.CreateEventSource%2A> </xref:System.Diagnostics.EventLog.WriteEntry%2A> </xref:System.Diagnostics.EventLog> </xref:System.Diagnostics.EventLog.Source%2A>      > [!NOTE] > Om du inte anger en <xref:System.Diagnostics.EventLog.MachineName%2A>för din <xref:System.Diagnostics.EventLog>instansen innan du anropar <xref:System.Diagnostics.EventLog.CreateEventSource%2A>eller <xref:System.Diagnostics.EventLog.WriteEntry%2A>, den lokala datorn (&quot;.&quot;) antas.</xref:System.Diagnostics.EventLog.WriteEntry%2A> </xref:System.Diagnostics.EventLog.CreateEventSource%2A> </xref:System.Diagnostics.EventLog> </xref:System.Diagnostics.EventLog.MachineName%2A>       Om datorn måste registreras <xref:System.Diagnostics.EventLog.Source%2A>via ett anrop till <xref:System.Diagnostics.EventLog.WriteEntry%2A>och <xref:System.Diagnostics.EventLog.Log%2A>egenskapen har inte ställts in på din <xref:System.Diagnostics.EventLog>instans, loggen som standard programmets.</xref:System.Diagnostics.EventLog> </xref:System.Diagnostics.EventLog.Log%2A> </xref:System.Diagnostics.EventLog.WriteEntry%2A> </xref:System.Diagnostics.EventLog.Source%2A>      > [!NOTE] > Många undantag som anges ovan har genererats av fel som uppstår under processen med att registrera <xref:System.Diagnostics.EventLog.Source%2A>.</xref:System.Diagnostics.EventLog.Source%2A>       Källan måste konfigureras för att skriva lokaliserade poster eller för att skriva direkt strängar. Den <xref:System.Diagnostics.EventLog.WriteEntry%2A>metoden skriver den angivna strängen direkt till händelseloggen; den inte använder en lokaliserbara meddelandet resursfil.</xref:System.Diagnostics.EventLog.WriteEntry%2A> Använd den <xref:System.Diagnostics.EventLog.WriteEvent%2A>metod för att skriva händelser med hjälp av en lokaliserad resurs meddelandefil.</xref:System.Diagnostics.EventLog.WriteEvent%2A>       Om ditt program skrivs poster med både resursidentifierare och strängvärden, måste du registrera två olika källor. Till exempel konfigurera en källa med resursfiler och sedan använda som källa i <xref:System.Diagnostics.EventLog.WriteEvent%2A>metoden att skriva poster med hjälp av resursidentifierare till händelseloggen.</xref:System.Diagnostics.EventLog.WriteEvent%2A> Skapa sedan en annan källa utan resursfiler, och använda som källa i den <xref:System.Diagnostics.EventLog.WriteEntry%2A>metod för att skriva strängar direkt till händelseloggen med hjälp av den här källan.</xref:System.Diagnostics.EventLog.WriteEntry%2A>      > [!NOTE] > Om du skriver en post till en fjärrdator, värdet för meddelande (textsträng) kanske inte som du förväntar dig om fjärrdatorn inte körs i .NET Framework.      > [!NOTE] > Om den `message` parametern innehåller ett null-tecken, meddelande i händelseloggen avbryts vid NUL-tecknet."
  example:
  - >-
    [!code-cpp[EventLog_WriteEntry_1_3#3](~/add/codesnippet/cpp/597042ed-6d84-4ccf-a867-_1.cpp)]
     [!code-cs[EventLog_WriteEntry_1_3#3](~/add/codesnippet/csharp/597042ed-6d84-4ccf-a867-_1.cs)]
     [!code-vb[EventLog_WriteEntry_1_3#3](~/add/codesnippet/visualbasic/597042ed-6d84-4ccf-a867-_1.vb)]
  syntax:
    content: public void WriteEntry (string message, System.Diagnostics.EventLogEntryType type, int eventID);
    parameters:
    - id: message
      type: System.String
      description: "Strängen att skriva till händelseloggen."
    - id: type
      type: System.Diagnostics.EventLogEntryType
      description: "En av de <xref href=&quot;System.Diagnostics.EventLogEntryType&quot;> </xref> värden."
    - id: eventID
      type: System.Int32
      description: "Programspecifika identifierare för händelsen."
  overload: System.Diagnostics.EventLog.WriteEntry*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The <xref:System.Diagnostics.EventLog.Source*> property of the <xref href=\"System.Diagnostics.EventLog\"></xref> has not been set.  \n  \n -or-  \n  \n The method attempted to register a new event source, but the computer name in <xref:System.Diagnostics.EventLog.MachineName*> is not valid.  \n  \n \\- or -  \n  \n The source is already registered for a different event log.  \n  \n \\- or -  \n  \n <code>eventID</code> is less than zero or greater than &lt;xref:System.UInt16.MaxValue?displayProperty=fullName&gt;.  \n  \n \\- or -  \n  \n The message string is longer than 31,839 bytes (32,766 bytes on Windows operating systems before Windows Vista).  \n  \n \\- or -  \n  \n The source name results in a registry key path longer than 254 characters."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Det gick inte att öppna registernyckeln för händelseloggen."
  - type: System.ComponentModel.InvalidEnumArgumentException
    commentId: T:System.ComponentModel.InvalidEnumArgumentException
    description: "<code>type</code>är inte ett giltigt <xref href=&quot;System.Diagnostics.EventLogEntryType&quot;> </xref>."
  - type: System.ComponentModel.Win32Exception
    commentId: T:System.ComponentModel.Win32Exception
    description: "Operativsystemet rapporterade ett fel när du skriver händelse posten i händelseloggen. En Windows-felkoden är inte tillgänglig."
  platform:
  - net462
- uid: System.Diagnostics.EventLog.WriteEntry(System.String,System.String,System.Diagnostics.EventLogEntryType)
  id: WriteEntry(System.String,System.String,System.Diagnostics.EventLogEntryType)
  parent: System.Diagnostics.EventLog
  langs:
  - csharp
  name: WriteEntry(String,String,EventLogEntryType)
  nameWithType: EventLog.WriteEntry(String,String,EventLogEntryType)
  fullName: System.Diagnostics.EventLog.WriteEntry(String,String,EventLogEntryType)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Skriver ett fel, varning, information, lyckad granskning eller fel granskningspost med angivna meddelandetexten i händelseloggen med hjälp av den angivna registrerade händelsekällan."
  remarks: "Använd den här metoden för att skriva en post för en angiven <xref:System.Diagnostics.EventLogEntryType>i händelseloggen med hjälp av en källa som redan har registrerats som en händelsekälla för lämplig.</xref:System.Diagnostics.EventLogEntryType> Den `type` anges med en ikon och text i kolumnen typ i Loggboken för en logg.      > [!NOTE] > Den `message` strängen får inte innehålla %*n*, där *n* är ett heltalsvärde (till exempel %1) eftersom Loggboken behandlas den som en infogningssträng. Eftersom en Internet Protocol version 6 (IPv6)-adressen kan innehålla detta teckensekvensen, kan du inte logga en händelsemeddelande som innehåller en IPv6-adress.       Du måste skapa och konfigurera händelsekällan innan den första posten med källan. Skapa ny händelsekälla under installationen av programmet. Det ger dig tid för operativsystemet för att uppdatera listan över registrerade händelsekällor och deras konfiguration. Om operativsystemet inte har uppdaterats sin lista över händelsekällor och försök att skriva en händelse med källan nya Skrivåtgärden misslyckas. Du kan konfigurera en ny datakälla med hjälp av en <xref:System.Diagnostics.EventLogInstaller>, eller med hjälp av den <xref:System.Diagnostics.EventLog.CreateEventSource%2A>metoden.</xref:System.Diagnostics.EventLog.CreateEventSource%2A> </xref:System.Diagnostics.EventLogInstaller> Du måste ha administratörsbehörighet på datorn för att skapa en ny händelsekälla.       Källan måste konfigureras för att skriva lokaliserade poster eller för att skriva direkt strängar. Den <xref:System.Diagnostics.EventLog.WriteEntry%2A>metoden skriver den angivna strängen direkt till händelseloggen; den inte använder en lokaliserbara meddelandet resursfil.</xref:System.Diagnostics.EventLog.WriteEntry%2A> Använd den <xref:System.Diagnostics.EventLog.WriteEvent%2A>metod för att skriva händelser med hjälp av en lokaliserad resurs meddelandefil.</xref:System.Diagnostics.EventLog.WriteEvent%2A>       Om ditt program skrivs poster med både resursidentifierare och strängvärden, måste du registrera två olika källor. Till exempel konfigurera en källa med resursfiler och sedan använda som källa i <xref:System.Diagnostics.EventLog.WriteEvent%2A>metoden att skriva poster med hjälp av resursidentifierare till händelseloggen.</xref:System.Diagnostics.EventLog.WriteEvent%2A> Skapa sedan en annan källa utan resursfiler, och använda som källa i den <xref:System.Diagnostics.EventLog.WriteEntry%2A>metod för att skriva strängar direkt till händelseloggen med hjälp av den här källan.</xref:System.Diagnostics.EventLog.WriteEntry%2A>      > [!NOTE] > Om den `message` parametern innehåller ett null-tecken, meddelande i händelseloggen avbryts vid NUL-tecknet."
  example:
  - "The following example writes a warning entry to an event log, \"MyNewLog\", on the local computer.  \n  \n [!code-cs[Classic EventLog.WriteEntry3 Example#1](~/add/codesnippet/csharp/c03f903c-8fbd-441f-afe0-_1.cs)]\n [!code-vb[Classic EventLog.WriteEntry3 Example#1](~/add/codesnippet/visualbasic/c03f903c-8fbd-441f-afe0-_1.vb)]\n [!code-cpp[Classic EventLog.WriteEntry3 Example#1](~/add/codesnippet/cpp/c03f903c-8fbd-441f-afe0-_1.cpp)]"
  syntax:
    content: public static void WriteEntry (string source, string message, System.Diagnostics.EventLogEntryType type);
    parameters:
    - id: source
      type: System.String
      description: "Källan som programmet har registrerats på den angivna datorn."
    - id: message
      type: System.String
      description: "Strängen att skriva till händelseloggen."
    - id: type
      type: System.Diagnostics.EventLogEntryType
      description: "En av de <xref href=&quot;System.Diagnostics.EventLogEntryType&quot;> </xref> värden."
  overload: System.Diagnostics.EventLog.WriteEntry*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The <code>source</code> value is an empty string (\"\").  \n  \n \\- or -  \n  \n The <code>source</code> value is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.  \n  \n \\- or -  \n  \n The message string is longer than 31,839 bytes (32,766 bytes on Windows operating systems before Windows Vista).  \n  \n \\- or -  \n  \n The source name results in a registry key path longer than 254 characters."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Det gick inte att öppna registernyckeln för händelseloggen."
  - type: System.ComponentModel.InvalidEnumArgumentException
    commentId: T:System.ComponentModel.InvalidEnumArgumentException
    description: "<code>type</code>är inte ett giltigt <xref href=&quot;System.Diagnostics.EventLogEntryType&quot;> </xref>."
  - type: System.ComponentModel.Win32Exception
    commentId: T:System.ComponentModel.Win32Exception
    description: "Operativsystemet rapporterade ett fel när du skriver händelse posten i händelseloggen. En Windows-felkoden är inte tillgänglig."
  platform:
  - net462
- uid: System.Diagnostics.EventLog.WriteEntry(System.String,System.Diagnostics.EventLogEntryType,System.Int32,System.Int16)
  id: WriteEntry(System.String,System.Diagnostics.EventLogEntryType,System.Int32,System.Int16)
  parent: System.Diagnostics.EventLog
  langs:
  - csharp
  name: WriteEntry(String,EventLogEntryType,Int32,Int16)
  nameWithType: EventLog.WriteEntry(String,EventLogEntryType,Int32,Int16)
  fullName: System.Diagnostics.EventLog.WriteEntry(String,EventLogEntryType,Int32,Int16)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Skriver en post med angivna meddelandetext, programdefinierade Händelseidentifierare och programdefinierade kategori i händelseloggen."
  remarks: "Använd den här metoden för att skriva en post med en tillämpningsdefinierad `category` i händelseloggen. Loggboken använder kategorin för att filtrera händelser som skrivits av en händelsekälla. Loggboken kan visa kategorin som ett numeriskt värde eller den kan använda kategorin som en resurs-ID för att visa en lokaliserad kategori-sträng.      > [!NOTE] > Den `category` parametern måste vara ett positivt värde. Negativa kategorivärden visas som en kompletterande positivt tal i Loggboken. Till exempel visas en – 10 som 65 526, 1 som 65 535.      > [!NOTE] > Den `message` strängen får inte innehålla %*n*, där *n* är ett heltalsvärde (till exempel %1) eftersom Loggboken behandlas den som en infogningssträng. Eftersom en Internet Protocol version 6 (IPv6)-adressen kan innehålla detta teckensekvensen, kan du inte logga en händelsemeddelande som innehåller en IPv6-adress.       Om du vill visa lokaliserad kategori strängar i Loggboken, måste du använda en händelsekälla konfigurerad med en kategori resursfil och ange den `category` till en resursidentifierare i resursfilen kategori. Om händelsekällan inte har en konfigurerad kategori resursfil eller den angivna `category` inte index en sträng i resursfilen kategori och sedan Loggboken visar numeriska kategori-värdet för posten. Konfigurera resursfilen kategori, tillsammans med antalet kategori strängar i resursfilen, med <xref:System.Diagnostics.EventLogInstaller>eller <xref:System.Diagnostics.EventSourceCreationData>klass.</xref:System.Diagnostics.EventSourceCreationData> </xref:System.Diagnostics.EventLogInstaller>       Utöver kategori, kan du ange händelse-ID för händelsen som skrivs till händelseloggen. Händelseidentifierare tillsammans med händelsekällan, identifiera en händelse. Varje program kan definiera en egen numrerade händelser och beskrivningssträngarna de mappar. Händelsen visningsprogram visa dessa strängvärden för att hjälpa användaren att förstå vad som hände och rekommenderar vilka åtgärder som ska vidtas.       Slutligen kan du ange en <xref:System.Diagnostics.EventLogEntryType>för den händelse som skrivs till händelseloggen.</xref:System.Diagnostics.EventLogEntryType> Den `type` anges med en ikon och text i kolumnen typ i Loggboken för en logg. Den här parametern anger om vilken typ av händelse är fel, varning, information, lyckad granskning eller fel vid granskning.       Du måste ange <xref:System.Diagnostics.EventLog.Source%2A>egenskapen på <xref:System.Diagnostics.EventLog>komponenten innan du kan skriva poster i loggen</xref:System.Diagnostics.EventLog> </xref:System.Diagnostics.EventLog.Source%2A> Du måste skapa och konfigurera händelsekällan innan den första posten med källan.       Skapa ny händelsekälla under installationen av programmet. Det ger dig tid för operativsystemet för att uppdatera listan över registrerade händelsekällor och deras konfiguration. Om operativsystemet inte har uppdaterats sin lista över händelsekällor och försök att skriva en händelse med källan nya Skrivåtgärden misslyckas. Du kan konfigurera en ny datakälla med hjälp av en <xref:System.Diagnostics.EventLogInstaller>, eller med hjälp av den <xref:System.Diagnostics.EventLog.CreateEventSource%2A>metoden.</xref:System.Diagnostics.EventLog.CreateEventSource%2A> </xref:System.Diagnostics.EventLogInstaller> Du måste ha administratörsbehörighet på datorn för att skapa en ny händelsekälla.       Om källan anges i den <xref:System.Diagnostics.EventLog.Source%2A>egenskapen för detta <xref:System.Diagnostics.EventLog>instansen är inte registrerad på den dator där komponenten skriver till, <xref:System.Diagnostics.EventLog.WriteEntry%2A>anrop <xref:System.Diagnostics.EventLog.CreateEventSource%2A>och registrerar källan.</xref:System.Diagnostics.EventLog.CreateEventSource%2A> </xref:System.Diagnostics.EventLog.WriteEntry%2A> </xref:System.Diagnostics.EventLog> </xref:System.Diagnostics.EventLog.Source%2A>      > [!NOTE] > Om du inte anger en <xref:System.Diagnostics.EventLog.MachineName%2A>för din <xref:System.Diagnostics.EventLog>instansen innan du anropar <xref:System.Diagnostics.EventLog.CreateEventSource%2A>eller <xref:System.Diagnostics.EventLog.WriteEntry%2A>, den lokala datorn (&quot;.&quot;) antas.</xref:System.Diagnostics.EventLog.WriteEntry%2A> </xref:System.Diagnostics.EventLog.CreateEventSource%2A> </xref:System.Diagnostics.EventLog> </xref:System.Diagnostics.EventLog.MachineName%2A>       Om datorn måste registreras <xref:System.Diagnostics.EventLog.Source%2A>via ett anrop till <xref:System.Diagnostics.EventLog.WriteEntry%2A>och <xref:System.Diagnostics.EventLog.Log%2A>egenskapen har inte ställts in på din <xref:System.Diagnostics.EventLog>instans, loggen som standard programmets.</xref:System.Diagnostics.EventLog> </xref:System.Diagnostics.EventLog.Log%2A> </xref:System.Diagnostics.EventLog.WriteEntry%2A> </xref:System.Diagnostics.EventLog.Source%2A>      > [!NOTE] > Många undantag som anges ovan har genererats av fel som uppstår under processen med att registrera <xref:System.Diagnostics.EventLog.Source%2A>.</xref:System.Diagnostics.EventLog.Source%2A>       Källan måste konfigureras för att skriva lokaliserade poster eller för att skriva direkt strängar. Den <xref:System.Diagnostics.EventLog.WriteEntry%2A>metoden skriver den angivna strängen direkt till händelseloggen; den inte använder en lokaliserbara meddelandet resursfil.</xref:System.Diagnostics.EventLog.WriteEntry%2A> Använd den <xref:System.Diagnostics.EventLog.WriteEvent%2A>metod för att skriva händelser med hjälp av en lokaliserad resurs meddelandefil.</xref:System.Diagnostics.EventLog.WriteEvent%2A>       Om ditt program skrivs poster med både resursidentifierare och strängvärden, måste du registrera två olika källor. Till exempel konfigurera en källa med resursfiler och sedan använda som källa i <xref:System.Diagnostics.EventLog.WriteEvent%2A>metoden att skriva poster med hjälp av resursidentifierare till händelseloggen.</xref:System.Diagnostics.EventLog.WriteEvent%2A> Skapa sedan en annan källa utan resursfiler, och använda som källa i den <xref:System.Diagnostics.EventLog.WriteEntry%2A>metod för att skriva strängar direkt till händelseloggen med hjälp av den här källan.</xref:System.Diagnostics.EventLog.WriteEntry%2A>      > [!NOTE] > Om du skriver en post till en fjärrdator, värdet för meddelande (textsträng) kanske inte som du förväntar dig om fjärrdatorn inte körs i .NET Framework.      > [!NOTE] > Om den `message` parametern innehåller ett null-tecken, meddelande i händelseloggen avbryts vid NUL-tecknet."
  example:
  - >-
    [!code-cpp[EventLog_WriteEntry_1_3#3](~/add/codesnippet/cpp/b3db94bc-a96c-4168-a8f0-_1.cpp)]
     [!code-cs[EventLog_WriteEntry_1_3#3](~/add/codesnippet/csharp/b3db94bc-a96c-4168-a8f0-_1.cs)]
     [!code-vb[EventLog_WriteEntry_1_3#3](~/add/codesnippet/visualbasic/b3db94bc-a96c-4168-a8f0-_1.vb)]
  syntax:
    content: public void WriteEntry (string message, System.Diagnostics.EventLogEntryType type, int eventID, short category);
    parameters:
    - id: message
      type: System.String
      description: "Strängen att skriva till händelseloggen."
    - id: type
      type: System.Diagnostics.EventLogEntryType
      description: "En av de <xref href=&quot;System.Diagnostics.EventLogEntryType&quot;> </xref> värden."
    - id: eventID
      type: System.Int32
      description: "Programspecifika identifierare för händelsen."
    - id: category
      type: System.Int16
      description: "Underkategorin programspecifika data som är associerad med meddelandet."
  overload: System.Diagnostics.EventLog.WriteEntry*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The <xref:System.Diagnostics.EventLog.Source*> property of the <xref href=\"System.Diagnostics.EventLog\"></xref> has not been set.  \n  \n -or-  \n  \n The method attempted to register a new event source, but the computer name in <xref:System.Diagnostics.EventLog.MachineName*> is not valid.  \n  \n \\- or -  \n  \n The source is already registered for a different event log.  \n  \n \\- or -  \n  \n <code>eventID</code> is less than zero or greater than &lt;xref:System.UInt16.MaxValue?displayProperty=fullName&gt;.  \n  \n \\- or -  \n  \n The message string is longer than 31,839 bytes (32,766 bytes on Windows operating systems before Windows Vista).  \n  \n \\- or -  \n  \n The source name results in a registry key path longer than 254 characters."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Det gick inte att öppna registernyckeln för händelseloggen."
  - type: System.ComponentModel.InvalidEnumArgumentException
    commentId: T:System.ComponentModel.InvalidEnumArgumentException
    description: "<code>type</code>är inte ett giltigt <xref href=&quot;System.Diagnostics.EventLogEntryType&quot;> </xref>."
  - type: System.ComponentModel.Win32Exception
    commentId: T:System.ComponentModel.Win32Exception
    description: "Operativsystemet rapporterade ett fel när du skriver händelse posten i händelseloggen. En Windows-felkoden är inte tillgänglig."
  platform:
  - net462
- uid: System.Diagnostics.EventLog.WriteEntry(System.String,System.String,System.Diagnostics.EventLogEntryType,System.Int32)
  id: WriteEntry(System.String,System.String,System.Diagnostics.EventLogEntryType,System.Int32)
  parent: System.Diagnostics.EventLog
  langs:
  - csharp
  name: WriteEntry(String,String,EventLogEntryType,Int32)
  nameWithType: EventLog.WriteEntry(String,String,EventLogEntryType,Int32)
  fullName: System.Diagnostics.EventLog.WriteEntry(String,String,EventLogEntryType,Int32)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Skriver en post med det angivna meddelandetext och programdefinierade Händelseidentifieraren i händelseloggen med hjälp av den angivna registrerade händelsekällan."
  remarks: "Använd den här metoden för att skriva en post med en tillämpningsdefinierad `eventID` i händelseloggen med hjälp av en källa redan registrerade som en händelsekälla för relevant logg. Den `eventID`, tillsammans med källan, identifiera en händelse. Varje program kan definiera en egen numrerade händelser och beskrivningssträngarna de mappar. Händelsen visningsprogram finns strängarna för användare för att hjälpa användaren att förstå vad som hände och rekommenderar vilka åtgärder som ska vidtas.      > [!NOTE] > Den `message` strängen får inte innehålla %*n*, där *n* är ett heltalsvärde (till exempel %1) eftersom Loggboken behandlas den som en infogningssträng. Eftersom en Internet Protocol version 6 (IPv6)-adressen kan innehålla detta teckensekvensen, kan du inte logga en händelsemeddelande som innehåller en IPv6-adress.       Förutom Händelseidentifierare denna överbelastning av <xref:System.Diagnostics.EventLog.WriteEntry%2A>kan du ange en <xref:System.Diagnostics.EventLogEntryType>för den händelse som skrivs till händelseloggen.</xref:System.Diagnostics.EventLogEntryType> </xref:System.Diagnostics.EventLog.WriteEntry%2A> Den `type` anges med en ikon och text i kolumnen typ i Loggboken för en logg. Den här parametern anger om vilken typ av händelse är fel, varning, information, lyckad granskning eller fel vid granskning.       Du måste skapa och konfigurera händelsekällan innan den första posten med källan. Skapa ny händelsekälla under installationen av programmet. Det ger dig tid för operativsystemet för att uppdatera listan över registrerade händelsekällor och deras konfiguration. Om operativsystemet inte har uppdaterats sin lista över händelsekällor och försök att skriva en händelse med källan nya Skrivåtgärden misslyckas. Du kan konfigurera en ny datakälla med hjälp av en <xref:System.Diagnostics.EventLogInstaller>, eller med hjälp av den <xref:System.Diagnostics.EventLog.CreateEventSource%2A>metoden.</xref:System.Diagnostics.EventLog.CreateEventSource%2A> </xref:System.Diagnostics.EventLogInstaller> Du måste ha administratörsbehörighet på datorn för att skapa en ny händelsekälla.       Källan måste konfigureras för att skriva lokaliserade poster eller för att skriva direkt strängar. Den <xref:System.Diagnostics.EventLog.WriteEntry%2A>metoden skriver den angivna strängen direkt till händelseloggen; den inte använder en lokaliserbara meddelandet resursfil.</xref:System.Diagnostics.EventLog.WriteEntry%2A> Använd den <xref:System.Diagnostics.EventLog.WriteEvent%2A>metod för att skriva händelser med hjälp av en lokaliserad resurs meddelandefil.</xref:System.Diagnostics.EventLog.WriteEvent%2A>       Om ditt program skrivs poster med både resursidentifierare och strängvärden, måste du registrera två olika källor. Till exempel konfigurera en källa med resursfiler och sedan använda som källa i <xref:System.Diagnostics.EventLog.WriteEvent%2A>metoden att skriva poster med hjälp av resursidentifierare till händelseloggen.</xref:System.Diagnostics.EventLog.WriteEvent%2A> Skapa sedan en annan källa utan resursfiler, och använda som källa i den <xref:System.Diagnostics.EventLog.WriteEntry%2A>metod för att skriva strängar direkt till händelseloggen med hjälp av den här källan.</xref:System.Diagnostics.EventLog.WriteEntry%2A>      > [!NOTE] > Om den `message` parametern innehåller ett null-tecken, meddelande i händelseloggen avbryts vid NUL-tecknet."
  example:
  - >-
    [!code-cs[EventLog_WriteEntry_4#1](~/add/codesnippet/csharp/2d8498b8-a54d-48c9-9ee7-_1.cs)]
     [!code-cpp[EventLog_WriteEntry_4#1](~/add/codesnippet/cpp/2d8498b8-a54d-48c9-9ee7-_1.cpp)]
     [!code-vb[EventLog_WriteEntry_4#1](~/add/codesnippet/visualbasic/2d8498b8-a54d-48c9-9ee7-_1.vb)]
  syntax:
    content: public static void WriteEntry (string source, string message, System.Diagnostics.EventLogEntryType type, int eventID);
    parameters:
    - id: source
      type: System.String
      description: "Källan som programmet har registrerats på den angivna datorn."
    - id: message
      type: System.String
      description: "Strängen att skriva till händelseloggen."
    - id: type
      type: System.Diagnostics.EventLogEntryType
      description: "En av de <xref href=&quot;System.Diagnostics.EventLogEntryType&quot;> </xref> värden."
    - id: eventID
      type: System.Int32
      description: "Programspecifika identifierare för händelsen."
  overload: System.Diagnostics.EventLog.WriteEntry*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The <code>source</code> value is an empty string (\"\").  \n  \n \\- or -  \n  \n The <code>source</code> value is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.  \n  \n \\- or -  \n  \n <code>eventID</code> is less than zero or greater than &lt;xref:System.UInt16.MaxValue?displayProperty=fullName&gt;.  \n  \n \\- or -  \n  \n The message string is longer than 31,839 bytes (32,766 bytes on Windows operating systems before Windows Vista).  \n  \n \\- or -  \n  \n The source name results in a registry key path longer than 254 characters."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Det gick inte att öppna registernyckeln för händelseloggen."
  - type: System.ComponentModel.InvalidEnumArgumentException
    commentId: T:System.ComponentModel.InvalidEnumArgumentException
    description: "<code>type</code>är inte ett giltigt <xref href=&quot;System.Diagnostics.EventLogEntryType&quot;> </xref>."
  - type: System.ComponentModel.Win32Exception
    commentId: T:System.ComponentModel.Win32Exception
    description: "Operativsystemet rapporterade ett fel när du skriver händelse posten i händelseloggen. En Windows-felkoden är inte tillgänglig."
  platform:
  - net462
- uid: System.Diagnostics.EventLog.WriteEntry(System.String,System.Diagnostics.EventLogEntryType,System.Int32,System.Int16,System.Byte[])
  id: WriteEntry(System.String,System.Diagnostics.EventLogEntryType,System.Int32,System.Int16,System.Byte[])
  parent: System.Diagnostics.EventLog
  langs:
  - csharp
  name: WriteEntry(String,EventLogEntryType,Int32,Int16,Byte[])
  nameWithType: EventLog.WriteEntry(String,EventLogEntryType,Int32,Int16,Byte[])
  fullName: System.Diagnostics.EventLog.WriteEntry(String,EventLogEntryType,Int32,Int16,Byte[])
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Skriver en post med angivna meddelandetext, programdefinierade Händelseidentifierare och programdefinierade kategori i händelseloggen och lägger till binära data i meddelandet."
  remarks: "Använd den här överlagring dataskrivning programdefinierade händelsespecifika till händelseloggen. Loggboken tolka inte data. rådata visas bara i formatet kombinerade hexadecimalt och text. Sparsam händelsespecifika data, inklusive det bara om du är säker på att det ska vara praktiskt att någon felsöka problemet. Du kan också använda händelsespecifika data för att lagra information om programmet kan bearbeta oberoende av Loggboken. Du kan till exempel skriva ett visningsprogram för händelserna eller skriva ett program som söker igenom loggfilen och skapar rapporter som innehåller information från händelsespecifika data.       Du kan ange en tillämpningsdefinierad kategori och en tillämpningsdefinierad Händelseidentifierare förutom binära data. Loggboken använder kategorin för att filtrera händelser som skrivits av en händelsekälla. Loggboken kan visa kategorin som ett numeriskt värde eller den kan använda kategorin som en resurs-ID för att visa en lokaliserad kategori-sträng.      > [!NOTE] > Den `message` strängen får inte innehålla %*n*, där *n* är ett heltalsvärde (till exempel %1) eftersom Loggboken behandlas den som en infogningssträng. Eftersom en Internet Protocol version 6 (IPv6)-adressen kan innehålla detta teckensekvensen, kan du inte logga en händelsemeddelande som innehåller en IPv6-adress.      > [!NOTE] > Den `category` parametern måste vara ett positivt värde. Negativa kategorivärden visas som en kompletterande positivt tal i Loggboken. Till exempel visas en – 10 som 65 526, 1 som 65 535.       Om du vill visa lokaliserad kategori strängar i Loggboken, måste du använda en händelsekälla konfigurerad med en kategori resursfil och ange den `category` till en resursidentifierare i resursfilen kategori. Om händelsekällan inte har en konfigurerad kategori resursfil eller den angivna `category` inte index en sträng i resursfilen kategori och sedan Loggboken visar numeriska kategori-värdet för posten. Konfigurera resursfilen kategori, tillsammans med antalet kategori strängar i resursfilen, med <xref:System.Diagnostics.EventLogInstaller>eller <xref:System.Diagnostics.EventSourceCreationData>klass.</xref:System.Diagnostics.EventSourceCreationData> </xref:System.Diagnostics.EventLogInstaller>       Händelseidentifierare tillsammans med händelsekällan, identifiera en händelse. Varje program kan definiera en egen numrerade händelser och beskrivningssträngarna de mappar. Händelsen visningsprogram visa dessa strängvärden för att hjälpa användaren att förstå vad som hände och rekommenderar vilka åtgärder som ska vidtas.       Slutligen kan du ange en <xref:System.Diagnostics.EventLogEntryType>för den händelse som skrivs till händelseloggen.</xref:System.Diagnostics.EventLogEntryType> Den `type` anges med en ikon och text i kolumnen typ i Loggboken för en logg. Den här parametern anger om vilken typ av händelse är fel, varning, information, lyckad granskning eller fel vid granskning.       Du måste ange <xref:System.Diagnostics.EventLog.Source%2A>egenskapen på <xref:System.Diagnostics.EventLog>komponenten innan du kan skriva poster i loggen</xref:System.Diagnostics.EventLog> </xref:System.Diagnostics.EventLog.Source%2A> Du måste skapa och konfigurera händelsekällan innan den första posten med källan.       Skapa ny händelsekälla under installationen av programmet. Det ger dig tid för operativsystemet för att uppdatera listan över registrerade händelsekällor och deras konfiguration. Om operativsystemet inte har uppdaterats sin lista över händelsekällor och försök att skriva en händelse med källan nya Skrivåtgärden misslyckas. Du kan konfigurera en ny datakälla med hjälp av en <xref:System.Diagnostics.EventLogInstaller>, eller med hjälp av den <xref:System.Diagnostics.EventLog.CreateEventSource%2A>metoden.</xref:System.Diagnostics.EventLog.CreateEventSource%2A> </xref:System.Diagnostics.EventLogInstaller> Du måste ha administratörsbehörighet på datorn för att skapa en ny händelsekälla.       Om källan anges i den <xref:System.Diagnostics.EventLog.Source%2A>egenskapen för detta <xref:System.Diagnostics.EventLog>instansen är inte registrerad på den dator där komponenten skriver till, <xref:System.Diagnostics.EventLog.WriteEntry%2A>anrop <xref:System.Diagnostics.EventLog.CreateEventSource%2A>och registrerar källan.</xref:System.Diagnostics.EventLog.CreateEventSource%2A> </xref:System.Diagnostics.EventLog.WriteEntry%2A> </xref:System.Diagnostics.EventLog> </xref:System.Diagnostics.EventLog.Source%2A>      > [!NOTE] > Om du inte anger en <xref:System.Diagnostics.EventLog.MachineName%2A>för din <xref:System.Diagnostics.EventLog>instansen innan du anropar <xref:System.Diagnostics.EventLog.CreateEventSource%2A>eller <xref:System.Diagnostics.EventLog.WriteEntry%2A>, den lokala datorn (&quot;.&quot;) antas.</xref:System.Diagnostics.EventLog.WriteEntry%2A> </xref:System.Diagnostics.EventLog.CreateEventSource%2A> </xref:System.Diagnostics.EventLog> </xref:System.Diagnostics.EventLog.MachineName%2A>       Om datorn måste registreras <xref:System.Diagnostics.EventLog.Source%2A>via ett anrop till <xref:System.Diagnostics.EventLog.WriteEntry%2A>och <xref:System.Diagnostics.EventLog.Log%2A>egenskapen har inte ställts in på din <xref:System.Diagnostics.EventLog>instans, loggen som standard programmets.</xref:System.Diagnostics.EventLog> </xref:System.Diagnostics.EventLog.Log%2A> </xref:System.Diagnostics.EventLog.WriteEntry%2A> </xref:System.Diagnostics.EventLog.Source%2A>      > [!NOTE] > Många undantag som anges ovan har genererats av fel som uppstår under processen med att registrera <xref:System.Diagnostics.EventLog.Source%2A>.</xref:System.Diagnostics.EventLog.Source%2A>       Källan måste konfigureras för att skriva lokaliserade poster eller för att skriva direkt strängar. Den <xref:System.Diagnostics.EventLog.WriteEntry%2A>metoden skriver den angivna strängen direkt till händelseloggen; den inte använder en lokaliserbara meddelandet resursfil.</xref:System.Diagnostics.EventLog.WriteEntry%2A> Använd den <xref:System.Diagnostics.EventLog.WriteEvent%2A>metod för att skriva händelser med hjälp av en lokaliserad resurs meddelandefil.</xref:System.Diagnostics.EventLog.WriteEvent%2A>       Om ditt program skrivs poster med både resursidentifierare och strängvärden, måste du registrera två olika källor. Till exempel konfigurera en källa med resursfiler och sedan använda som källa i <xref:System.Diagnostics.EventLog.WriteEvent%2A>metoden att skriva poster med hjälp av resursidentifierare till händelseloggen.</xref:System.Diagnostics.EventLog.WriteEvent%2A> Skapa sedan en annan källa utan resursfiler, och använda som källa i den <xref:System.Diagnostics.EventLog.WriteEntry%2A>metod för att skriva strängar direkt till händelseloggen med hjälp av den här källan.</xref:System.Diagnostics.EventLog.WriteEntry%2A>      > [!NOTE] > Om du skriver en post till en fjärrdator, värdet för meddelande (textsträng) kanske inte som du förväntar dig om fjärrdatorn inte körs i .NET Framework.      > [!NOTE] > Om den `message` parametern innehåller ett null-tecken, meddelande i händelseloggen avbryts vid NUL-tecknet."
  example:
  - >-
    [!code-cs[EventLog_WriteEntry_5#1](~/add/codesnippet/csharp/1c6518b6-dc55-4c74-9028-_1.cs)]
     [!code-vb[EventLog_WriteEntry_5#1](~/add/codesnippet/visualbasic/1c6518b6-dc55-4c74-9028-_1.vb)]
     [!code-cpp[EventLog_WriteEntry_5#1](~/add/codesnippet/cpp/1c6518b6-dc55-4c74-9028-_1.cpp)]
  syntax:
    content: public void WriteEntry (string message, System.Diagnostics.EventLogEntryType type, int eventID, short category, byte[] rawData);
    parameters:
    - id: message
      type: System.String
      description: "Strängen att skriva till händelseloggen."
    - id: type
      type: System.Diagnostics.EventLogEntryType
      description: "En av de <xref href=&quot;System.Diagnostics.EventLogEntryType&quot;> </xref> värden."
    - id: eventID
      type: System.Int32
      description: "Programspecifika identifierare för händelsen."
    - id: category
      type: System.Int16
      description: "Underkategorin programspecifika data som är associerad med meddelandet."
    - id: rawData
      type: System.Byte[]
      description: "En matris med byte som innehåller binära data som är associerad med transaktionen."
  overload: System.Diagnostics.EventLog.WriteEntry*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The <xref:System.Diagnostics.EventLog.Source*> property of the <xref href=\"System.Diagnostics.EventLog\"></xref> has not been set.  \n  \n -or-  \n  \n The method attempted to register a new event source, but the computer name in <xref:System.Diagnostics.EventLog.MachineName*> is not valid.  \n  \n \\- or -  \n  \n The source is already registered for a different event log.  \n  \n \\- or -  \n  \n <code>eventID</code> is less than zero or greater than &lt;xref:System.UInt16.MaxValue?displayProperty=fullName&gt;.  \n  \n \\- or -  \n  \n The message string is longer than 31,839 bytes (32,766 bytes on Windows operating systems before Windows Vista).  \n  \n \\- or -  \n  \n The source name results in a registry key path longer than 254 characters."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Det gick inte att öppna registernyckeln för händelseloggen."
  - type: System.ComponentModel.InvalidEnumArgumentException
    commentId: T:System.ComponentModel.InvalidEnumArgumentException
    description: "<code>type</code>är inte ett giltigt <xref href=&quot;System.Diagnostics.EventLogEntryType&quot;> </xref>."
  - type: System.ComponentModel.Win32Exception
    commentId: T:System.ComponentModel.Win32Exception
    description: "Operativsystemet rapporterade ett fel när du skriver händelse posten i händelseloggen. En Windows-felkoden är inte tillgänglig."
  platform:
  - net462
- uid: System.Diagnostics.EventLog.WriteEntry(System.String,System.String,System.Diagnostics.EventLogEntryType,System.Int32,System.Int16)
  id: WriteEntry(System.String,System.String,System.Diagnostics.EventLogEntryType,System.Int32,System.Int16)
  parent: System.Diagnostics.EventLog
  langs:
  - csharp
  name: WriteEntry(String,String,EventLogEntryType,Int32,Int16)
  nameWithType: EventLog.WriteEntry(String,String,EventLogEntryType,Int32,Int16)
  fullName: System.Diagnostics.EventLog.WriteEntry(String,String,EventLogEntryType,Int32,Int16)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Skriver en post med angivna meddelandetext, programdefinierade Händelseidentifierare och programdefinierade kategori i händelseloggen med hjälp av den angivna registrerade händelsekällan. Den <code> category </code> kan användas av Loggboken för att filtrera händelser i loggen."
  remarks: "Använd den här metoden för att skriva en post med en tillämpningsdefinierad `category` med hjälp av en källa som redan har registrerats som en händelsekälla för relevant logg i händelseloggen. Loggboken använder kategorin för att filtrera händelser som skrivits av en händelsekälla. Loggboken kan visa kategorin som ett numeriskt värde eller den kan använda kategorin som en resurs-ID för att visa en lokaliserad kategori-sträng.      > [!NOTE] > Den `category` parametern måste vara ett positivt värde. Negativa kategorivärden visas som en kompletterande positivt tal i Loggboken. Till exempel visas en – 10 som 65 526, 1 som 65 535.       Om du vill visa lokaliserad kategori strängar i Loggboken, måste du använda en händelsekälla konfigurerad med en kategori resursfil och ange den `category` till en resursidentifierare i resursfilen kategori. Om händelsekällan inte har en konfigurerad kategori resursfil eller den angivna `category` inte index en sträng i resursfilen kategori och sedan Loggboken visar numeriska kategori-värdet för posten. Konfigurera resursfilen kategori, tillsammans med antalet kategori strängar i resursfilen, med <xref:System.Diagnostics.EventLogInstaller>eller <xref:System.Diagnostics.EventSourceCreationData>klass.</xref:System.Diagnostics.EventSourceCreationData> </xref:System.Diagnostics.EventLogInstaller>       Utöver kategori, kan du ange händelse-ID för händelsen som skrivs till händelseloggen. Händelseidentifierare tillsammans med händelsekällan, identifiera en händelse. Varje program kan definiera en egen numrerade händelser och beskrivningssträngarna de mappar. Händelsen visningsprogram visa dessa strängvärden för att hjälpa användaren att förstå vad som hände och rekommenderar vilka åtgärder som ska vidtas.       Slutligen kan du ange en <xref:System.Diagnostics.EventLogEntryType>för den händelse som skrivs till händelseloggen.</xref:System.Diagnostics.EventLogEntryType> Den `type` anges med en ikon och text i kolumnen typ i Loggboken för en logg. Den här parametern anger om vilken typ av händelse är fel, varning, information, lyckad granskning eller fel vid granskning.       Du måste skapa och konfigurera händelsekällan innan den första posten med källan. Skapa ny händelsekälla under installationen av programmet. Det ger dig tid för operativsystemet för att uppdatera listan över registrerade händelsekällor och deras konfiguration. Om operativsystemet inte har uppdaterats sin lista över händelsekällor och försök att skriva en händelse med källan nya Skrivåtgärden misslyckas. Du kan konfigurera en ny datakälla med hjälp av en <xref:System.Diagnostics.EventLogInstaller>, eller med hjälp av den <xref:System.Diagnostics.EventLog.CreateEventSource%2A>metoden.</xref:System.Diagnostics.EventLog.CreateEventSource%2A> </xref:System.Diagnostics.EventLogInstaller> Du måste ha administratörsbehörighet på datorn för att skapa en ny händelsekälla.       Källan måste konfigureras för att skriva lokaliserade poster eller för att skriva direkt strängar. Den <xref:System.Diagnostics.EventLog.WriteEntry%2A>metoden skriver den angivna strängen direkt till händelseloggen; den inte använder en lokaliserbara meddelandet resursfil.</xref:System.Diagnostics.EventLog.WriteEntry%2A> Använd den <xref:System.Diagnostics.EventLog.WriteEvent%2A>metod för att skriva händelser med hjälp av en lokaliserad resurs meddelandefil.</xref:System.Diagnostics.EventLog.WriteEvent%2A>       Om ditt program skrivs poster med både resursidentifierare och strängvärden, måste du registrera två olika källor. Till exempel konfigurera en källa med resursfiler och sedan använda som källa i <xref:System.Diagnostics.EventLog.WriteEvent%2A>metoden att skriva poster med hjälp av resursidentifierare till händelseloggen.</xref:System.Diagnostics.EventLog.WriteEvent%2A> Skapa sedan en annan källa utan resursfiler, och använda som källa i den <xref:System.Diagnostics.EventLog.WriteEntry%2A>metod för att skriva strängar direkt till händelseloggen med hjälp av den här källan.</xref:System.Diagnostics.EventLog.WriteEntry%2A>      > [!NOTE] > Om den `message` parametern innehåller ett null-tecken, meddelande i händelseloggen avbryts vid NUL-tecknet.   >> De `message` strängen får inte innehålla %*n*, där *n* är ett heltalsvärde (till exempel %1) eftersom Loggboken behandlas den som en infogningssträng. Eftersom en Internet Protocol version 6 (IPv6)-adressen kan innehålla detta teckensekvensen, kan du inte logga en händelsemeddelande som innehåller en IPv6-adress."
  example:
  - >-
    [!code-cpp[EventLog_WriteEntry_1_3#1](~/add/codesnippet/cpp/189fd615-c100-4e72-9c0b-_1.cpp)]
     [!code-cs[EventLog_WriteEntry_1_3#1](~/add/codesnippet/csharp/189fd615-c100-4e72-9c0b-_1.cs)]
     [!code-vb[EventLog_WriteEntry_1_3#1](~/add/codesnippet/visualbasic/189fd615-c100-4e72-9c0b-_1.vb)]
  syntax:
    content: public static void WriteEntry (string source, string message, System.Diagnostics.EventLogEntryType type, int eventID, short category);
    parameters:
    - id: source
      type: System.String
      description: "Källan som programmet har registrerats på den angivna datorn."
    - id: message
      type: System.String
      description: "Strängen att skriva till händelseloggen."
    - id: type
      type: System.Diagnostics.EventLogEntryType
      description: "En av de <xref href=&quot;System.Diagnostics.EventLogEntryType&quot;> </xref> värden."
    - id: eventID
      type: System.Int32
      description: "Programspecifika identifierare för händelsen."
    - id: category
      type: System.Int16
      description: "Underkategorin programspecifika data som är associerad med meddelandet."
  overload: System.Diagnostics.EventLog.WriteEntry*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The <code>source</code> value is an empty string (\"\").  \n  \n \\- or -  \n  \n The <code>source</code> value is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.  \n  \n \\- or -  \n  \n <code>eventID</code> is less than zero or greater than &lt;xref:System.UInt16.MaxValue?displayProperty=fullName&gt;.  \n  \n \\- or -  \n  \n The message string is longer than 31,839 bytes (32,766 bytes on Windows operating systems before Windows Vista).  \n  \n \\- or -  \n  \n The source name results in a registry key path longer than 254 characters."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Det gick inte att öppna registernyckeln för händelseloggen."
  - type: System.ComponentModel.InvalidEnumArgumentException
    commentId: T:System.ComponentModel.InvalidEnumArgumentException
    description: "<code>type</code>är inte ett giltigt <xref href=&quot;System.Diagnostics.EventLogEntryType&quot;> </xref>."
  - type: System.ComponentModel.Win32Exception
    commentId: T:System.ComponentModel.Win32Exception
    description: "Operativsystemet rapporterade ett fel när du skriver händelse posten i händelseloggen. En Windows-felkoden är inte tillgänglig."
  platform:
  - net462
- uid: System.Diagnostics.EventLog.WriteEntry(System.String,System.String,System.Diagnostics.EventLogEntryType,System.Int32,System.Int16,System.Byte[])
  id: WriteEntry(System.String,System.String,System.Diagnostics.EventLogEntryType,System.Int32,System.Int16,System.Byte[])
  parent: System.Diagnostics.EventLog
  langs:
  - csharp
  name: WriteEntry(String,String,EventLogEntryType,Int32,Int16,Byte[])
  nameWithType: EventLog.WriteEntry(String,String,EventLogEntryType,Int32,Int16,Byte[])
  fullName: System.Diagnostics.EventLog.WriteEntry(String,String,EventLogEntryType,Int32,Int16,Byte[])
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Skriver en post med angivna meddelandetext, programdefinierade Händelseidentifierare och programdefinierade kategori i händelseloggen (med angivna registrerade händelsekällan) och lägger till binära data i meddelandet."
  remarks: "Använd den här metoden för att skriva programdefinierade händelsespecifika data i händelseloggen med hjälp av en källa som redan har registrerats som en händelsekälla för relevant logg. Loggboken tolka inte data. rådata visas bara i formatet kombinerade hexadecimalt och text. Använda händelsespecifika data sparsamt. Inkludera den bara om du är säker på att det kan vara användbart. Du kan också använda händelsespecifika data för att lagra information om programmet kan bearbeta oberoende av Loggboken. Du kan till exempel skriva ett visningsprogram för händelserna eller skriva ett program som söker igenom loggfilen och skapar rapporter som innehåller information från händelsespecifika data.       Du kan ange en tillämpningsdefinierad kategori och en tillämpningsdefinierad Händelseidentifierare förutom binära data. Loggboken använder kategorin för att filtrera händelser som skrivits av en händelsekälla. Loggboken kan visa kategorin som ett numeriskt värde eller den kan använda kategorin som en resurs-ID för att visa en lokaliserad kategori-sträng.      > [!NOTE] > Den `category` parametern måste vara ett positivt värde. Negativa kategorivärden visas som en kompletterande positivt tal i Loggboken. Till exempel visas en – 10 som 65 526, 1 som 65 535.       Om du vill visa lokaliserad kategori strängar i Loggboken, måste du använda en händelsekälla konfigurerad med en kategori resursfil och ange den `category` till en resursidentifierare i resursfilen kategori. Om händelsekällan inte har en konfigurerad kategori resursfil eller den angivna `category` inte index en sträng i resursfilen kategori och sedan Loggboken visar numeriska kategori-värdet för posten. Konfigurera resursfilen kategori, tillsammans med antalet kategori strängar i resursfilen, med <xref:System.Diagnostics.EventLogInstaller>eller <xref:System.Diagnostics.EventSourceCreationData>klass.</xref:System.Diagnostics.EventSourceCreationData> </xref:System.Diagnostics.EventLogInstaller>       Händelseidentifierare tillsammans med händelsekällan, identifiera en händelse. Varje program kan definiera en egen numrerade händelser och beskrivningssträngarna de mappar. Händelsen visningsprogram visa dessa strängvärden för att hjälpa användaren att förstå vad som hände och rekommenderar vilka åtgärder som ska vidtas.       Slutligen kan du ange en <xref:System.Diagnostics.EventLogEntryType>för den händelse som skrivs till händelseloggen.</xref:System.Diagnostics.EventLogEntryType> Den `type` anges med en ikon och text i kolumnen typ i Loggboken för en logg. Den här parametern anger om vilken typ av händelse är fel, varning, information, lyckad granskning eller fel vid granskning.       Du måste skapa och konfigurera händelsekällan innan den första posten med källan. Skapa ny händelsekälla under installationen av programmet. Det ger dig tid för operativsystemet för att uppdatera listan över registrerade händelsekällor och deras konfiguration. Om operativsystemet inte har uppdaterats sin lista över händelsekällor och försök att skriva en händelse med källan nya Skrivåtgärden misslyckas. Du kan konfigurera en ny datakälla med hjälp av en <xref:System.Diagnostics.EventLogInstaller>, eller med hjälp av den <xref:System.Diagnostics.EventLog.CreateEventSource%2A>metoden.</xref:System.Diagnostics.EventLog.CreateEventSource%2A> </xref:System.Diagnostics.EventLogInstaller> Du måste ha administratörsbehörighet på datorn för att skapa en ny händelsekälla.       Källan måste konfigureras för att skriva lokaliserade poster eller för att skriva direkt strängar. Den <xref:System.Diagnostics.EventLog.WriteEntry%2A>metoden skriver den angivna strängen direkt till händelseloggen; den inte använder en lokaliserbara meddelandet resursfil.</xref:System.Diagnostics.EventLog.WriteEntry%2A> Använd den <xref:System.Diagnostics.EventLog.WriteEvent%2A>metod för att skriva händelser med hjälp av en lokaliserad resurs meddelandefil.</xref:System.Diagnostics.EventLog.WriteEvent%2A>       Om ditt program skrivs poster med både resursidentifierare och strängvärden, måste du registrera två olika källor. Till exempel konfigurera en källa med resursfiler och sedan använda som källa i <xref:System.Diagnostics.EventLog.WriteEvent%2A>metoden att skriva poster med hjälp av resursidentifierare till händelseloggen.</xref:System.Diagnostics.EventLog.WriteEvent%2A> Skapa sedan en annan källa utan resursfiler, och använda som källa i den <xref:System.Diagnostics.EventLog.WriteEntry%2A>metod för att skriva strängar direkt till händelseloggen med hjälp av den här källan.</xref:System.Diagnostics.EventLog.WriteEntry%2A>      > [!NOTE] > Om den `message` parametern innehåller ett null-tecken, meddelande i händelseloggen avbryts vid NUL-tecknet.   >> De `message` strängen får inte innehålla %*n*, där *n* är ett heltalsvärde (till exempel %1) eftersom Loggboken behandlas den som en infogningssträng. Eftersom en Internet Protocol version 6 (IPv6)-adressen kan innehålla detta teckensekvensen, kan du inte logga en händelsemeddelande som innehåller en IPv6-adress."
  example:
  - >-
    [!code-cpp[EventLog_WriteEntry_1_3#2](~/add/codesnippet/cpp/0b90a83a-dcc8-46e6-a8db-_1.cpp)]
     [!code-cs[EventLog_WriteEntry_1_3#2](~/add/codesnippet/csharp/0b90a83a-dcc8-46e6-a8db-_1.cs)]
     [!code-vb[EventLog_WriteEntry_1_3#2](~/add/codesnippet/visualbasic/0b90a83a-dcc8-46e6-a8db-_1.vb)]
  syntax:
    content: public static void WriteEntry (string source, string message, System.Diagnostics.EventLogEntryType type, int eventID, short category, byte[] rawData);
    parameters:
    - id: source
      type: System.String
      description: "Källan som programmet har registrerats på den angivna datorn."
    - id: message
      type: System.String
      description: "Strängen att skriva till händelseloggen."
    - id: type
      type: System.Diagnostics.EventLogEntryType
      description: "En av de <xref href=&quot;System.Diagnostics.EventLogEntryType&quot;> </xref> värden."
    - id: eventID
      type: System.Int32
      description: "Programspecifika identifierare för händelsen."
    - id: category
      type: System.Int16
      description: "Underkategorin programspecifika data som är associerad med meddelandet."
    - id: rawData
      type: System.Byte[]
      description: "En matris med byte som innehåller binära data som är associerad med transaktionen."
  overload: System.Diagnostics.EventLog.WriteEntry*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The <code>source</code> value is an empty string (\"\").  \n  \n \\- or -  \n  \n The <code>source</code> value is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.  \n  \n \\- or -  \n  \n <code>eventID</code> is less than zero or greater than &lt;xref:System.UInt16.MaxValue?displayProperty=fullName&gt;.  \n  \n \\- or -  \n  \n The message string is longer than 31,839 bytes (32,766 bytes on Windows operating systems before Windows Vista).  \n  \n \\- or -  \n  \n The source name results in a registry key path longer than 254 characters."
  - type: System.ComponentModel.InvalidEnumArgumentException
    commentId: T:System.ComponentModel.InvalidEnumArgumentException
    description: "<code>type</code>är inte ett giltigt <xref href=&quot;System.Diagnostics.EventLogEntryType&quot;> </xref>."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Det gick inte att öppna registernyckeln för händelseloggen."
  - type: System.ComponentModel.Win32Exception
    commentId: T:System.ComponentModel.Win32Exception
    description: "Operativsystemet rapporterade ett fel när du skriver händelse posten i händelseloggen. En Windows-felkoden är inte tillgänglig."
  platform:
  - net462
- uid: System.Diagnostics.EventLog.WriteEvent(System.Diagnostics.EventInstance,System.Object[])
  id: WriteEvent(System.Diagnostics.EventInstance,System.Object[])
  parent: System.Diagnostics.EventLog
  langs:
  - csharp
  name: WriteEvent(EventInstance,Object[])
  nameWithType: EventLog.WriteEvent(EventInstance,Object[])
  fullName: System.Diagnostics.EventLog.WriteEvent(EventInstance,Object[])
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Skriver en lokaliserad post i händelseloggen."
  remarks: "Använd den här metoden för att skriva en lokaliserad post i händelseloggen. Du kan ange egenskaper för händelse med resursidentifierare i stället för strängvärden. Resurs-ID: n används i Loggboken för att visa motsvarande strängar från filen lokaliserad resurs för <xref:System.Diagnostics.EventLog.Source%2A>.</xref:System.Diagnostics.EventLog.Source%2A> Du måste registrera källan med motsvarande resursfilen innan du skriver händelser med hjälp av resurs-ID: n.       Indata `instance` instans anger händelsemeddelande och egenskaper. Ange den <xref:System.Diagnostics.EventInstance.InstanceId%2A>av den `instance` indata för definierade meddelandet i källfilen meddelandet resurs.</xref:System.Diagnostics.EventInstance.InstanceId%2A> Du kan du ange den <xref:System.Diagnostics.EventInstance.CategoryId%2A>och <xref:System.Diagnostics.EventInstance.EntryType%2A>av den `instance` indata för att definiera kategori och händelsen typ av händelsepost.</xref:System.Diagnostics.EventInstance.EntryType%2A> </xref:System.Diagnostics.EventInstance.CategoryId%2A> Du kan också ange en strängmatris språkoberoende att infoga i lokaliserade meddelandetexten. Ange `values` till `null` om meddelandet inte innehåller formatering platshållare för ersättningssträngar.       Du måste ange <xref:System.Diagnostics.EventLog.Source%2A>egenskapen på <xref:System.Diagnostics.EventLog>komponenten innan du använder <xref:System.Diagnostics.EventLog.WriteEvent%2A>.</xref:System.Diagnostics.EventLog.WriteEvent%2A> </xref:System.Diagnostics.EventLog> </xref:System.Diagnostics.EventLog.Source%2A> Den angivna källan måste konfigureras för att skriva lokaliserade poster i loggen; källan måste minst ha en meddelandefil resurs som definierats.       Du måste skapa och konfigurera händelsekällan innan den första posten med källan. Skapa ny händelsekälla under installationen av programmet. Det ger dig tid för operativsystemet för att uppdatera listan över registrerade händelsekällor och deras konfiguration. Om operativsystemet inte har uppdaterats sin lista över händelsekällor och försök att skriva en händelse med källan nya Skrivåtgärden misslyckas. Du kan konfigurera en ny datakälla med hjälp av en <xref:System.Diagnostics.EventLogInstaller>, eller med hjälp av den <xref:System.Diagnostics.EventLog.CreateEventSource%2A>metoden.</xref:System.Diagnostics.EventLog.CreateEventSource%2A> </xref:System.Diagnostics.EventLogInstaller> Du måste ha administratörsbehörighet på datorn för att skapa en ny händelsekälla.       Källan måste konfigureras för att skriva lokaliserade poster eller för att skriva direkt strängar. Använd <xref:System.Diagnostics.EventLog.WriteEntry%2A>metoden om ditt program skriver strängvärden direkt till händelseloggen.</xref:System.Diagnostics.EventLog.WriteEntry%2A>       Om ditt program skrivs poster med både resursidentifierare och strängvärden, måste du registrera två olika källor. Till exempel konfigurera en källa med resursfiler och sedan använda som källa i <xref:System.Diagnostics.EventLog.WriteEvent%2A>metoden att skriva poster med hjälp av resursidentifierare till händelseloggen.</xref:System.Diagnostics.EventLog.WriteEvent%2A> Skapa sedan en annan källa utan resursfiler, och använda som källa i den <xref:System.Diagnostics.EventLog.WriteEntry%2A>metod för att skriva strängar direkt till händelseloggen med hjälp av den här källan.</xref:System.Diagnostics.EventLog.WriteEntry%2A>      > [!NOTE] > Om du skriver en post till en fjärrdator, värdet för den `message` strängen kan inte vara vad du förväntar dig om fjärrdatorn inte körs i .NET Framework. Dessutom den `message` strängen får inte innehålla %*n*, där *n* är ett heltalsvärde (till exempel %1) eftersom Loggboken behandlas den som en infogningssträng. Eftersom en Internet Protocol version 6 (IPv6)-adressen kan innehålla detta teckensekvensen, kan du inte logga en händelsemeddelande som innehåller en IPv6-adress."
  example:
  - "The following example writes two audit entries to the event log `myNewLog`. The example creates a new event source and a new event log if they do not exist on the local computer. The event message text is specified using a resource identifier in a resource file.  \n  \n [!code-cpp[EventLog_WriteEvent#7](~/add/codesnippet/cpp/6a714dbf-bcbc-4f5a-a8b4-_1.cpp)]\n [!code-vb[EventLog_WriteEvent#7](~/add/codesnippet/visualbasic/6a714dbf-bcbc-4f5a-a8b4-_1.vb)]\n [!code-cs[EventLog_WriteEvent#7](~/add/codesnippet/csharp/6a714dbf-bcbc-4f5a-a8b4-_1.cs)]  \n  \n The example uses the following message text file, built into the resource library EventLogMsgs.dll. A message text file is the source from which the message resource file is created. The message text file defines the resource identifiers and text for the category, event message, and parameter insertion strings.  \n  \n```  \n; // EventLogMsgs.mc  \n; // ********************************************************  \n  \n; // Use the following commands to build this file:  \n  \n; //   mc -s EventLogMsgs.mc  \n; //   rc EventLogMsgs.rc  \n; //   link /DLL /SUBSYSTEM:WINDOWS /NOENTRY /MACHINE:x86 EventLogMsgs.Res   \n; // ********************************************************  \n  \n; // - Event categories -  \n; // Categories must be numbered consecutively starting at 1.  \n; // ********************************************************  \n  \nMessageId=0x1  \nSeverity=Success  \nSymbolicName=INSTALL_CATEGORY  \nLanguage=English  \nInstallation  \n.  \n  \nMessageId=0x2  \nSeverity=Success  \nSymbolicName=QUERY_CATEGORY  \nLanguage=English  \nDatabase Query  \n.  \n  \nMessageId=0x3  \nSeverity=Success  \nSymbolicName=REFRESH_CATEGORY  \nLanguage=English  \nData Refresh  \n.  \n  \n; // - Event messages -  \n; // *********************************  \n  \nMessageId = 1000  \nSeverity = Success  \nFacility = Application  \nSymbolicName = AUDIT_SUCCESS_MESSAGE_ID_1000  \nLanguage=English  \nMy application message text, in English, for message id 1000, called from %1.  \n.  \n  \nMessageId = 1001  \nSeverity = Warning  \nFacility = Application  \nSymbolicName = AUDIT_FAILED_MESSAGE_ID_1001  \nLanguage=English  \nMy application message text, in English, for message id 1001, called from %1.  \n.  \n  \nMessageId = 1002  \nSeverity = Success  \nFacility = Application  \nSymbolicName = GENERIC_INFO_MESSAGE_ID_1002  \nLanguage=English  \nMy generic information message in English, for message id 1002.  \n.  \n  \nMessageId = 1003  \nSeverity = Warning  \nFacility = Application  \nSymbolicName = GENERIC_WARNING_MESSAGE_ID_1003  \nLanguage=English  \nMy generic warning message in English, for message id 1003, called from %1.  \n.  \n  \nMessageId = 1004  \nSeverity = Success  \nFacility = Application  \nSymbolicName = UPDATE_CYCLE_COMPLETE_MESSAGE_ID_1004  \nLanguage=English  \nThe update cycle is complete for %%5002.  \n.  \n  \nMessageId = 1005  \nSeverity = Warning  \nFacility = Application  \nSymbolicName = SERVER_CONNECTION_DOWN_MESSAGE_ID_1005  \nLanguage=English  \nThe refresh operation did not complete because the connection to server %1 could not be established.  \n.  \n  \n; // - Event log display name -  \n; // ********************************************************  \n  \nMessageId = 5001  \nSeverity = Success  \nFacility = Application  \nSymbolicName = EVENT_LOG_DISPLAY_NAME_MSGID  \nLanguage=English  \nSample Event Log  \n.  \n  \n; // - Event message parameters -  \n; //   Language independent insertion strings  \n; // ********************************************************  \n  \nMessageId = 5002  \nSeverity = Success  \nFacility = Application  \nSymbolicName = EVENT_LOG_SERVICE_NAME_MSGID  \nLanguage=English  \nSVC_UPDATE.EXE  \n.  \n```"
  syntax:
    content: public void WriteEvent (System.Diagnostics.EventInstance instance, object[] values);
    parameters:
    - id: instance
      type: System.Diagnostics.EventInstance
      description: "En <xref href=&quot;System.Diagnostics.EventInstance&quot;> </xref> -instans som representerar en lokaliserad händelselogg."
    - id: values
      type: System.Object[]
      description: "En matris med strängar som ska kopplas till meddelandetext för post i händelseloggen."
  overload: System.Diagnostics.EventLog.WriteEvent*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The <xref:System.Diagnostics.EventLog.Source*> property of the <xref href=\"System.Diagnostics.EventLog\"></xref> has not been set.  \n  \n -or-  \n  \n The method attempted to register a new event source, but the computer name in <xref:System.Diagnostics.EventLog.MachineName*> is not valid.  \n  \n \\- or -  \n  \n The source is already registered for a different event log.  \n  \n \\- or -  \n  \n <code>instance.InstanceId</code> is less than zero or greater than &lt;xref:System.UInt16.MaxValue?displayProperty=fullName&gt;.  \n  \n \\- or -  \n  \n <code>values</code> has more than 256 elements.  \n  \n \\- or -  \n  \n One of the <code>values</code> elements is longer than 32766 bytes.  \n  \n \\- or -  \n  \n The source name results in a registry key path longer than 254 characters."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>instance</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Det gick inte att öppna registernyckeln för händelseloggen."
  - type: System.ComponentModel.Win32Exception
    commentId: T:System.ComponentModel.Win32Exception
    description: "Operativsystemet rapporterade ett fel när du skriver händelse posten i händelseloggen. En Windows-felkoden är inte tillgänglig."
  platform:
  - net462
- uid: System.Diagnostics.EventLog.WriteEvent(System.Diagnostics.EventInstance,System.Byte[],System.Object[])
  id: WriteEvent(System.Diagnostics.EventInstance,System.Byte[],System.Object[])
  parent: System.Diagnostics.EventLog
  langs:
  - csharp
  name: WriteEvent(EventInstance,Byte[],Object[])
  nameWithType: EventLog.WriteEvent(EventInstance,Byte[],Object[])
  fullName: System.Diagnostics.EventLog.WriteEvent(EventInstance,Byte[],Object[])
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Skriver en post i händelseloggen med angivna händelsedata, meddelande ersättningssträngar och tillhörande binära data."
  remarks: "Använd den här metoden för att skriva en lokaliserad med ytterligare händelsespecifika data i händelseloggen. Du kan ange egenskaper för händelse med resursidentifierare i stället för strängvärden. Resurs-ID: n används i Loggboken för att visa motsvarande strängar från filen lokaliserad resurs för <xref:System.Diagnostics.EventLog.Source%2A>.</xref:System.Diagnostics.EventLog.Source%2A> Du måste registrera källan med motsvarande resursfilen innan du skriver händelser med hjälp av resurs-ID: n.       Indata `instance` instans anger händelsemeddelande och egenskaper. Ange den <xref:System.Diagnostics.EventInstance.InstanceId%2A>av den `instance` indata för definierade meddelandet i källfilen meddelandet resurs.</xref:System.Diagnostics.EventInstance.InstanceId%2A> Du kan du ange den <xref:System.Diagnostics.EventInstance.CategoryId%2A>och <xref:System.Diagnostics.EventInstance.EntryType%2A>av den `instance` indata för att definiera kategori och händelsen typ av händelsepost.</xref:System.Diagnostics.EventInstance.EntryType%2A> </xref:System.Diagnostics.EventInstance.CategoryId%2A> Du kan också ange en strängmatris språkoberoende att infoga i lokaliserade meddelandetexten. Ange `values` till `null` om meddelandet inte innehåller formatering platshållare för ersättningssträngar.       Ange binära data med en händelse när det är nödvändigt att ge mer information för händelsen. Till exempel använda den `data` parametern för att inkludera information på ett specifikt fel. Loggboken tolka inte den associerade händelsedata; informationen visas i formatet kombinerade hexadecimalt och text. Använda händelsespecifika data sparsamt. Inkludera den bara om du är säker på att det kan vara användbart. Du kan också använda händelsespecifika data för att lagra information om programmet kan bearbeta oberoende av Loggboken. Du kan till exempel skriva ett visningsprogram för händelserna eller skriva ett program som söker igenom händelseloggen och skapar rapporter som innehåller information från händelsespecifika data.       Du måste ange <xref:System.Diagnostics.EventLog.Source%2A>egenskapen på <xref:System.Diagnostics.EventLog>komponenten innan komponenten innan du använder <xref:System.Diagnostics.EventLog.WriteEvent%2A>.</xref:System.Diagnostics.EventLog.WriteEvent%2A> </xref:System.Diagnostics.EventLog> </xref:System.Diagnostics.EventLog.Source%2A> Den angivna källan måste konfigureras för att skriva lokaliserade poster i loggen; källan måste minst ha en meddelandefil resurs som definierats.       Du måste skapa och konfigurera händelsekällan innan den första posten med källan. Skapa ny händelsekälla under installationen av programmet. Det ger dig tid för operativsystemet för att uppdatera listan över registrerade händelsekällor och deras konfiguration. Om operativsystemet inte har uppdaterats sin lista över händelsekällor och försök att skriva en händelse med källan nya Skrivåtgärden misslyckas. Du kan konfigurera en ny datakälla med hjälp av en <xref:System.Diagnostics.EventLogInstaller>, eller med hjälp av den <xref:System.Diagnostics.EventLog.CreateEventSource%2A>metoden.</xref:System.Diagnostics.EventLog.CreateEventSource%2A> </xref:System.Diagnostics.EventLogInstaller> Du måste ha administratörsbehörighet på datorn för att skapa en ny händelsekälla.      > [!NOTE] > Om du inte anger en <xref:System.Diagnostics.EventLog.MachineName%2A>för din <xref:System.Diagnostics.EventLog>instansen innan du anropar <xref:System.Diagnostics.EventLog.WriteEvent%2A>, den lokala datorn (&quot;.&quot;) antas.</xref:System.Diagnostics.EventLog.WriteEvent%2A> </xref:System.Diagnostics.EventLog> </xref:System.Diagnostics.EventLog.MachineName%2A>       Källan måste konfigureras för att skriva lokaliserade poster eller för att skriva direkt strängar. Använd <xref:System.Diagnostics.EventLog.WriteEntry%2A>metoden om ditt program skriver strängvärden direkt till händelseloggen.</xref:System.Diagnostics.EventLog.WriteEntry%2A>       Om ditt program skrivs poster med både resursidentifierare och strängvärden, måste du registrera två olika källor. Till exempel konfigurera en källa med resursfiler och sedan använda som källa i <xref:System.Diagnostics.EventLog.WriteEvent%2A>metoden att skriva poster med hjälp av resursidentifierare till händelseloggen.</xref:System.Diagnostics.EventLog.WriteEvent%2A> Skapa sedan en annan källa utan resursfiler, och använda som källa i den <xref:System.Diagnostics.EventLog.WriteEntry%2A>metod för att skriva strängar direkt till händelseloggen med hjälp av den här källan.</xref:System.Diagnostics.EventLog.WriteEntry%2A>      > [!NOTE] > Om du skriver en post till en fjärrdator, värdet för den `message` strängen kan inte vara vad du förväntar dig om fjärrdatorn inte körs i .NET Framework. Dessutom den `message` strängen får inte innehålla %*n*, där *n* är ett heltalsvärde (till exempel %1) eftersom Loggboken behandlas den som en infogningssträng. Eftersom en Internet Protocol version 6 (IPv6)-adressen kan innehålla detta teckensekvensen, kan du inte logga en händelsemeddelande som innehåller en IPv6-adress."
  example:
  - "The following example writes two audit entries to the event log `myNewLog`. The example creates a new event source and a new event log if they do not exist on the local computer. The event message text is specified using a resource identifier in a resource file.  \n  \n [!code-cpp[EventLog_WriteEvent#7](~/add/codesnippet/cpp/9c997f17-0108-4c5c-b894-_1.cpp)]\n [!code-vb[EventLog_WriteEvent#7](~/add/codesnippet/visualbasic/9c997f17-0108-4c5c-b894-_1.vb)]\n [!code-cs[EventLog_WriteEvent#7](~/add/codesnippet/csharp/9c997f17-0108-4c5c-b894-_1.cs)]  \n  \n The example uses the following message text file, built into the resource library EventLogMsgs.dll. A message text file is the source from which the message resource file is created. The message text file defines the resource identifiers and text for the category, event message, and parameter insertion strings.  \n  \n```  \n; // EventLogMsgs.mc  \n; // ********************************************************  \n  \n; // Use the following commands to build this file:  \n  \n; //   mc -s EventLogMsgs.mc  \n; //   rc EventLogMsgs.rc  \n; //   link /DLL /SUBSYSTEM:WINDOWS /NOENTRY /MACHINE:x86 EventLogMsgs.Res   \n; // ********************************************************  \n  \n; // - Event categories -  \n; // Categories must be numbered consecutively starting at 1.  \n; // ********************************************************  \n  \nMessageId=0x1  \nSeverity=Success  \nSymbolicName=INSTALL_CATEGORY  \nLanguage=English  \nInstallation  \n.  \n  \nMessageId=0x2  \nSeverity=Success  \nSymbolicName=QUERY_CATEGORY  \nLanguage=English  \nDatabase Query  \n.  \n  \nMessageId=0x3  \nSeverity=Success  \nSymbolicName=REFRESH_CATEGORY  \nLanguage=English  \nData Refresh  \n.  \n  \n; // - Event messages -  \n; // *********************************  \n  \nMessageId = 1000  \nSeverity = Success  \nFacility = Application  \nSymbolicName = AUDIT_SUCCESS_MESSAGE_ID_1000  \nLanguage=English  \nMy application message text, in English, for message id 1000, called from %1.  \n.  \n  \nMessageId = 1001  \nSeverity = Warning  \nFacility = Application  \nSymbolicName = AUDIT_FAILED_MESSAGE_ID_1001  \nLanguage=English  \nMy application message text, in English, for message id 1001, called from %1.  \n.  \n  \nMessageId = 1002  \nSeverity = Success  \nFacility = Application  \nSymbolicName = GENERIC_INFO_MESSAGE_ID_1002  \nLanguage=English  \nMy generic information message in English, for message id 1002.  \n.  \n  \nMessageId = 1003  \nSeverity = Warning  \nFacility = Application  \nSymbolicName = GENERIC_WARNING_MESSAGE_ID_1003  \nLanguage=English  \nMy generic warning message in English, for message id 1003, called from %1.  \n.  \n  \nMessageId = 1004  \nSeverity = Success  \nFacility = Application  \nSymbolicName = UPDATE_CYCLE_COMPLETE_MESSAGE_ID_1004  \nLanguage=English  \nThe update cycle is complete for %%5002.  \n.  \n  \nMessageId = 1005  \nSeverity = Warning  \nFacility = Application  \nSymbolicName = SERVER_CONNECTION_DOWN_MESSAGE_ID_1005  \nLanguage=English  \nThe refresh operation did not complete because the connection to server %1 could not be established.  \n.  \n  \n; // - Event log display name -  \n; // ********************************************************  \n  \nMessageId = 5001  \nSeverity = Success  \nFacility = Application  \nSymbolicName = EVENT_LOG_DISPLAY_NAME_MSGID  \nLanguage=English  \nSample Event Log  \n.  \n  \n; // - Event message parameters -  \n; //   Language independent insertion strings  \n; // ********************************************************  \n  \nMessageId = 5002  \nSeverity = Success  \nFacility = Application  \nSymbolicName = EVENT_LOG_SERVICE_NAME_MSGID  \nLanguage=English  \nSVC_UPDATE.EXE  \n.  \n```"
  syntax:
    content: public void WriteEvent (System.Diagnostics.EventInstance instance, byte[] data, object[] values);
    parameters:
    - id: instance
      type: System.Diagnostics.EventInstance
      description: "En <xref href=&quot;System.Diagnostics.EventInstance&quot;> </xref> -instans som representerar en lokaliserad händelselogg."
    - id: data
      type: System.Byte[]
      description: "En matris med byte som innehåller binära data som är associerad med transaktionen."
    - id: values
      type: System.Object[]
      description: "En matris med strängar som ska kopplas till meddelandetext för post i händelseloggen."
  overload: System.Diagnostics.EventLog.WriteEvent*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The <xref:System.Diagnostics.EventLog.Source*> property of the <xref href=\"System.Diagnostics.EventLog\"></xref> has not been set.  \n  \n -or-  \n  \n The method attempted to register a new event source, but the computer name in <xref:System.Diagnostics.EventLog.MachineName*> is not valid.  \n  \n \\- or -  \n  \n The source is already registered for a different event log.  \n  \n \\- or -  \n  \n <code>instance.InstanceId</code> is less than zero or greater than &lt;xref:System.UInt16.MaxValue?displayProperty=fullName&gt;.  \n  \n \\- or -  \n  \n <code>values</code> has more than 256 elements.  \n  \n \\- or -  \n  \n One of the <code>values</code> elements is longer than 32766 bytes.  \n  \n \\- or -  \n  \n The source name results in a registry key path longer than 254 characters."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>instance</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Det gick inte att öppna registernyckeln för händelseloggen."
  - type: System.ComponentModel.Win32Exception
    commentId: T:System.ComponentModel.Win32Exception
    description: "Operativsystemet rapporterade ett fel när du skriver händelse posten i händelseloggen. En Windows-felkoden är inte tillgänglig."
  platform:
  - net462
- uid: System.Diagnostics.EventLog.WriteEvent(System.String,System.Diagnostics.EventInstance,System.Object[])
  id: WriteEvent(System.String,System.Diagnostics.EventInstance,System.Object[])
  parent: System.Diagnostics.EventLog
  langs:
  - csharp
  name: WriteEvent(String,EventInstance,Object[])
  nameWithType: EventLog.WriteEvent(String,EventInstance,Object[])
  fullName: System.Diagnostics.EventLog.WriteEvent(String,EventInstance,Object[])
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Skriver en post i händelseloggen med den angivna händelsen data och meddelandet ersättningssträngar, med hjälp av den angivna registrerade händelsekällan."
  remarks: "Använd den här metoden för att skriva en lokaliserad post i händelseloggen med hjälp av en källa som redan har registrerats som en händelsekälla för relevant logg. Du kan ange egenskaper för händelse med resursidentifierare i stället för strängvärden. Loggboken använder resurs-ID: n för att visa motsvarande strängar från filen lokaliserad resurs för datakällan. Du måste registrera källan med motsvarande resursfilen innan du skriver händelser med hjälp av resurs-ID: n.       Indata `instance` instans anger händelsemeddelande och egenskaper. Ange den <xref:System.Diagnostics.EventInstance.InstanceId%2A>av den `instance` indata för definierade meddelandet i källfilen meddelandet resurs.</xref:System.Diagnostics.EventInstance.InstanceId%2A> Du kan du ange den <xref:System.Diagnostics.EventInstance.CategoryId%2A>och <xref:System.Diagnostics.EventInstance.EntryType%2A>av den `instance` indata för att definiera kategori och händelsen typ av händelsepost.</xref:System.Diagnostics.EventInstance.EntryType%2A> </xref:System.Diagnostics.EventInstance.CategoryId%2A> Du kan också ange en strängmatris språkoberoende att infoga i lokaliserade meddelandetexten. Ange `values` till `null` om meddelandet inte innehåller formatering platshållare för ersättningssträngar.       Den angivna källan måste registreras för en händelselogg innan du använder <xref:System.Diagnostics.EventLog.WriteEvent%2A>.</xref:System.Diagnostics.EventLog.WriteEvent%2A> Den angivna källan måste konfigureras för att skriva lokaliserade poster i loggen; källan måste minst ha en meddelandefil resurs som definierats.       Du måste skapa och konfigurera händelsekällan innan den första posten med källan. Skapa ny händelsekälla under installationen av programmet. Det ger dig tid för operativsystemet för att uppdatera listan över registrerade händelsekällor och deras konfiguration. Om operativsystemet inte har uppdaterats sin lista över händelsekällor och försök att skriva en händelse med källan nya Skrivåtgärden misslyckas. Du kan konfigurera en ny datakälla med hjälp av en <xref:System.Diagnostics.EventLogInstaller>, eller med hjälp av den <xref:System.Diagnostics.EventLog.CreateEventSource%2A>metoden.</xref:System.Diagnostics.EventLog.CreateEventSource%2A> </xref:System.Diagnostics.EventLogInstaller> Du måste ha administratörsbehörighet på datorn för att skapa en ny händelsekälla.       Källan måste konfigureras för att skriva lokaliserade poster eller för att skriva direkt strängar. Använd <xref:System.Diagnostics.EventLog.WriteEntry%2A>metoden om ditt program skriver strängvärden direkt till händelseloggen.</xref:System.Diagnostics.EventLog.WriteEntry%2A>       Om ditt program skrivs poster med både resursidentifierare och strängvärden, måste du registrera två olika källor. Till exempel konfigurera en källa med resursfiler och sedan använda som källa i <xref:System.Diagnostics.EventLog.WriteEvent%2A>metoden att skriva poster med hjälp av resursidentifierare till händelseloggen.</xref:System.Diagnostics.EventLog.WriteEvent%2A> Skapa sedan en annan källa utan resursfiler, och använda som källa i den <xref:System.Diagnostics.EventLog.WriteEntry%2A>metod för att skriva strängar direkt till händelseloggen med hjälp av den här källan.</xref:System.Diagnostics.EventLog.WriteEntry%2A>"
  example:
  - "The following example writes an informational event entry and a warning event entry to an existing event log. The event message text is specified using a resource identifier in a resource file. The example assumes the corresponding resource file has been registered for the source.  \n  \n [!code-cpp[EventLog_WriteEvent#8](~/add/codesnippet/cpp/a57d89b3-94d2-4b9a-803c-_1.cpp)]\n [!code-vb[EventLog_WriteEvent#8](~/add/codesnippet/visualbasic/a57d89b3-94d2-4b9a-803c-_1.vb)]\n [!code-cs[EventLog_WriteEvent#8](~/add/codesnippet/csharp/a57d89b3-94d2-4b9a-803c-_1.cs)]  \n  \n The example uses the following message text file, built into the resource library EventLogMsgs.dll. A message text file is the source from which the message resource file is created. The message text file defines the resource identifiers and text for the category, event message, and parameter insertion strings.  \n  \n```  \n; // EventLogMsgs.mc  \n; // ********************************************************  \n  \n; // Use the following commands to build this file:  \n  \n; //   mc -s EventLogMsgs.mc  \n; //   rc EventLogMsgs.rc  \n; //   link /DLL /SUBSYSTEM:WINDOWS /NOENTRY /MACHINE:x86 EventLogMsgs.Res   \n; // ********************************************************  \n  \n; // - Event categories -  \n; // Categories must be numbered consecutively starting at 1.  \n; // ********************************************************  \n  \nMessageId=0x1  \nSeverity=Success  \nSymbolicName=INSTALL_CATEGORY  \nLanguage=English  \nInstallation  \n.  \n  \nMessageId=0x2  \nSeverity=Success  \nSymbolicName=QUERY_CATEGORY  \nLanguage=English  \nDatabase Query  \n.  \n  \nMessageId=0x3  \nSeverity=Success  \nSymbolicName=REFRESH_CATEGORY  \nLanguage=English  \nData Refresh  \n.  \n  \n; // - Event messages -  \n; // *********************************  \n  \nMessageId = 1000  \nSeverity = Success  \nFacility = Application  \nSymbolicName = AUDIT_SUCCESS_MESSAGE_ID_1000  \nLanguage=English  \nMy application message text, in English, for message id 1000, called from %1.  \n.  \n  \nMessageId = 1001  \nSeverity = Warning  \nFacility = Application  \nSymbolicName = AUDIT_FAILED_MESSAGE_ID_1001  \nLanguage=English  \nMy application message text, in English, for message id 1001, called from %1.  \n.  \n  \nMessageId = 1002  \nSeverity = Success  \nFacility = Application  \nSymbolicName = GENERIC_INFO_MESSAGE_ID_1002  \nLanguage=English  \nMy generic information message in English, for message id 1002.  \n.  \n  \nMessageId = 1003  \nSeverity = Warning  \nFacility = Application  \nSymbolicName = GENERIC_WARNING_MESSAGE_ID_1003  \nLanguage=English  \nMy generic warning message in English, for message id 1003, called from %1.  \n.  \n  \nMessageId = 1004  \nSeverity = Success  \nFacility = Application  \nSymbolicName = UPDATE_CYCLE_COMPLETE_MESSAGE_ID_1004  \nLanguage=English  \nThe update cycle is complete for %%5002.  \n.  \n  \nMessageId = 1005  \nSeverity = Warning  \nFacility = Application  \nSymbolicName = SERVER_CONNECTION_DOWN_MESSAGE_ID_1005  \nLanguage=English  \nThe refresh operation did not complete because the connection to server %1 could not be established.  \n.  \n  \n; // - Event log display name -  \n; // ********************************************************  \n  \nMessageId = 5001  \nSeverity = Success  \nFacility = Application  \nSymbolicName = EVENT_LOG_DISPLAY_NAME_MSGID  \nLanguage=English  \nSample Event Log  \n.  \n  \n; // - Event message parameters -  \n; //   Language independent insertion strings  \n; // ********************************************************  \n  \nMessageId = 5002  \nSeverity = Success  \nFacility = Application  \nSymbolicName = EVENT_LOG_SERVICE_NAME_MSGID  \nLanguage=English  \nSVC_UPDATE.EXE  \n.  \n```"
  syntax:
    content: public static void WriteEvent (string source, System.Diagnostics.EventInstance instance, object[] values);
    parameters:
    - id: source
      type: System.String
      description: "Namnet på händelsekällan registrerats för programmet på den angivna datorn."
    - id: instance
      type: System.Diagnostics.EventInstance
      description: "En <xref href=&quot;System.Diagnostics.EventInstance&quot;> </xref> -instans som representerar en lokaliserad händelselogg."
    - id: values
      type: System.Object[]
      description: "En matris med strängar som ska kopplas till meddelandetext för post i händelseloggen."
  overload: System.Diagnostics.EventLog.WriteEvent*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The <code>source</code> value is an empty string (\"\").  \n  \n \\- or -  \n  \n The <code>source</code> value is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.  \n  \n \\- or -  \n  \n <code>instance.InstanceId</code> is less than zero or greater than &lt;xref:System.UInt16.MaxValue?displayProperty=fullName&gt;.  \n  \n \\- or -  \n  \n <code>values</code> has more than 256 elements.  \n  \n \\- or -  \n  \n One of the <code>values</code> elements is longer than 32766 bytes.  \n  \n \\- or -  \n  \n The source name results in a registry key path longer than 254 characters."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>instance</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Det gick inte att öppna registernyckeln för händelseloggen."
  - type: System.ComponentModel.Win32Exception
    commentId: T:System.ComponentModel.Win32Exception
    description: "Operativsystemet rapporterade ett fel när du skriver händelse posten i händelseloggen. En Windows-felkoden är inte tillgänglig."
  platform:
  - net462
- uid: System.Diagnostics.EventLog.WriteEvent(System.String,System.Diagnostics.EventInstance,System.Byte[],System.Object[])
  id: WriteEvent(System.String,System.Diagnostics.EventInstance,System.Byte[],System.Object[])
  parent: System.Diagnostics.EventLog
  langs:
  - csharp
  name: WriteEvent(String,EventInstance,Byte[],Object[])
  nameWithType: EventLog.WriteEvent(String,EventInstance,Byte[],Object[])
  fullName: System.Diagnostics.EventLog.WriteEvent(String,EventInstance,Byte[],Object[])
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Skriver en händelse loggpost med de angivna händelsedata meddelandet ersättningssträngar och tillhörande binära data och använder den angivna registrerad händelsekälla."
  remarks: "Använd den här metoden för att skriva en lokaliserad med ytterligare händelsespecifika data i händelseloggen med hjälp av en källa som redan har registrerats som en händelsekälla för relevant logg. Du kan ange egenskaper för händelse med resursidentifierare i stället för strängvärden. Loggboken använder resurs-ID: n för att visa motsvarande strängar från filen lokaliserad resurs för datakällan. Du måste registrera källan med motsvarande resursfilen innan du skriver händelser med hjälp av resurs-ID: n.       Indata `instance` instans anger händelsemeddelande och egenskaper. Ange den <xref:System.Diagnostics.EventInstance.InstanceId%2A>av den `instance` indata för definierade meddelandet i källfilen meddelandet resurs.</xref:System.Diagnostics.EventInstance.InstanceId%2A> Du kan du ange den <xref:System.Diagnostics.EventInstance.CategoryId%2A>och <xref:System.Diagnostics.EventInstance.EntryType%2A>av den `instance` indata för att definiera kategori och händelsen typ av händelsepost.</xref:System.Diagnostics.EventInstance.EntryType%2A> </xref:System.Diagnostics.EventInstance.CategoryId%2A> Du kan också ange en strängmatris språkoberoende att infoga i lokaliserade meddelandetexten. Ange `values` till `null` om meddelandet inte innehåller formatering platshållare för ersättningssträngar.       Ange binära data med en händelse när det är nödvändigt att ge mer information för händelsen. Till exempel använda den `data` parametern för att inkludera information på ett specifikt fel. Loggboken tolka inte den associerade händelsedata; informationen visas i formatet kombinerade hexadecimalt och text. Använda händelsespecifika data sparsamt. Inkludera den bara om du är säker på att det kan vara användbart. Du kan också använda händelsespecifika data för att lagra information om programmet kan bearbeta oberoende av Loggboken. Du kan till exempel skriva ett visningsprogram för händelserna eller skriva ett program som söker igenom händelseloggen och skapar rapporter som innehåller information från händelsespecifika data.       Den angivna källan måste registreras för en händelselogg innan du använder <xref:System.Diagnostics.EventLog.WriteEvent%2A>.</xref:System.Diagnostics.EventLog.WriteEvent%2A> Den angivna källan måste konfigureras för att skriva lokaliserade poster i loggen; källan måste minst ha en meddelandefil resurs som definierats.       Du måste skapa och konfigurera händelsekällan innan den första posten med källan. Skapa ny händelsekälla under installationen av programmet. Det ger dig tid för operativsystemet för att uppdatera listan över registrerade händelsekällor och deras konfiguration. Om operativsystemet inte har uppdaterats sin lista över händelsekällor och försök att skriva en händelse med källan nya Skrivåtgärden misslyckas. Du kan konfigurera en ny datakälla med hjälp av en <xref:System.Diagnostics.EventLogInstaller>, eller med hjälp av den <xref:System.Diagnostics.EventLog.CreateEventSource%2A>metoden.</xref:System.Diagnostics.EventLog.CreateEventSource%2A> </xref:System.Diagnostics.EventLogInstaller> Du måste ha administratörsbehörighet på datorn för att skapa en ny händelsekälla.       Källan måste konfigureras för att skriva lokaliserade poster eller för att skriva direkt strängar. Använd <xref:System.Diagnostics.EventLog.WriteEntry%2A>metoden om ditt program skriver strängvärden direkt till händelseloggen.</xref:System.Diagnostics.EventLog.WriteEntry%2A>       Om ditt program skrivs poster med både resursidentifierare och strängvärden, måste du registrera två olika källor. Till exempel konfigurera en källa med resursfiler och sedan använda som källa i <xref:System.Diagnostics.EventLog.WriteEvent%2A>metoden att skriva poster med hjälp av resursidentifierare till händelseloggen.</xref:System.Diagnostics.EventLog.WriteEvent%2A> Skapa sedan en annan källa utan resursfiler, och använda som källa i den <xref:System.Diagnostics.EventLog.WriteEntry%2A>metod för att skriva strängar direkt till händelseloggen med hjälp av den här källan.</xref:System.Diagnostics.EventLog.WriteEntry%2A>"
  example:
  - "The following example writes an informational event entry and a warning event entry to an existing event log. The event message text is specified using a resource identifier in a resource file. The example assumes the corresponding resource file has been registered for the source.  \n  \n [!code-cpp[EventLog_WriteEvent#8](~/add/codesnippet/cpp/d4971002-e0d1-493b-96f8-_1.cpp)]\n [!code-vb[EventLog_WriteEvent#8](~/add/codesnippet/visualbasic/d4971002-e0d1-493b-96f8-_1.vb)]\n [!code-cs[EventLog_WriteEvent#8](~/add/codesnippet/csharp/d4971002-e0d1-493b-96f8-_1.cs)]  \n  \n The example uses the following message text file, built into the resource library EventLogMsgs.dll. A message text file is the source from which the message resource file is created. The message text file defines the resource identifiers and text for the category, event message, and parameter insertion strings.  \n  \n```  \n; // EventLogMsgs.mc  \n; // ********************************************************  \n  \n; // Use the following commands to build this file:  \n  \n; //   mc -s EventLogMsgs.mc  \n; //   rc EventLogMsgs.rc  \n; //   link /DLL /SUBSYSTEM:WINDOWS /NOENTRY /MACHINE:x86 EventLogMsgs.Res   \n; // ********************************************************  \n  \n; // - Event categories -  \n; // Categories must be numbered consecutively starting at 1.  \n; // ********************************************************  \n  \nMessageId=0x1  \nSeverity=Success  \nSymbolicName=INSTALL_CATEGORY  \nLanguage=English  \nInstallation  \n.  \n  \nMessageId=0x2  \nSeverity=Success  \nSymbolicName=QUERY_CATEGORY  \nLanguage=English  \nDatabase Query  \n.  \n  \nMessageId=0x3  \nSeverity=Success  \nSymbolicName=REFRESH_CATEGORY  \nLanguage=English  \nData Refresh  \n.  \n  \n; // - Event messages -  \n; // *********************************  \n  \nMessageId = 1000  \nSeverity = Success  \nFacility = Application  \nSymbolicName = AUDIT_SUCCESS_MESSAGE_ID_1000  \nLanguage=English  \nMy application message text, in English, for message id 1000, called from %1.  \n.  \n  \nMessageId = 1001  \nSeverity = Warning  \nFacility = Application  \nSymbolicName = AUDIT_FAILED_MESSAGE_ID_1001  \nLanguage=English  \nMy application message text, in English, for message id 1001, called from %1.  \n.  \n  \nMessageId = 1002  \nSeverity = Success  \nFacility = Application  \nSymbolicName = GENERIC_INFO_MESSAGE_ID_1002  \nLanguage=English  \nMy generic information message in English, for message id 1002.  \n.  \n  \nMessageId = 1003  \nSeverity = Warning  \nFacility = Application  \nSymbolicName = GENERIC_WARNING_MESSAGE_ID_1003  \nLanguage=English  \nMy generic warning message in English, for message id 1003, called from %1.  \n.  \n  \nMessageId = 1004  \nSeverity = Success  \nFacility = Application  \nSymbolicName = UPDATE_CYCLE_COMPLETE_MESSAGE_ID_1004  \nLanguage=English  \nThe update cycle is complete for %%5002.  \n.  \n  \nMessageId = 1005  \nSeverity = Warning  \nFacility = Application  \nSymbolicName = SERVER_CONNECTION_DOWN_MESSAGE_ID_1005  \nLanguage=English  \nThe refresh operation did not complete because the connection to server %1 could not be established.  \n.  \n  \n; // - Event log display name -  \n; // ********************************************************  \n  \nMessageId = 5001  \nSeverity = Success  \nFacility = Application  \nSymbolicName = EVENT_LOG_DISPLAY_NAME_MSGID  \nLanguage=English  \nSample Event Log  \n.  \n  \n; // - Event message parameters -  \n; //   Language independent insertion strings  \n; // ********************************************************  \n  \nMessageId = 5002  \nSeverity = Success  \nFacility = Application  \nSymbolicName = EVENT_LOG_SERVICE_NAME_MSGID  \nLanguage=English  \nSVC_UPDATE.EXE  \n.  \n```"
  syntax:
    content: public static void WriteEvent (string source, System.Diagnostics.EventInstance instance, byte[] data, object[] values);
    parameters:
    - id: source
      type: System.String
      description: "Namnet på händelsekällan registrerats för programmet på den angivna datorn."
    - id: instance
      type: System.Diagnostics.EventInstance
      description: "En <xref href=&quot;System.Diagnostics.EventInstance&quot;> </xref> -instans som representerar en lokaliserad händelselogg."
    - id: data
      type: System.Byte[]
      description: "En matris med byte som innehåller binära data som är associerad med transaktionen."
    - id: values
      type: System.Object[]
      description: "En matris med strängar som ska kopplas till meddelandetext för post i händelseloggen."
  overload: System.Diagnostics.EventLog.WriteEvent*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The <code>source</code> value is an empty string (\"\").  \n  \n \\- or -  \n  \n The <code>source</code> value is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.  \n  \n \\- or -  \n  \n <code>instance.InstanceId</code> is less than zero or greater than &lt;xref:System.UInt16.MaxValue?displayProperty=fullName&gt;.  \n  \n \\- or -  \n  \n <code>values</code> has more than 256 elements.  \n  \n \\- or -  \n  \n One of the <code>values</code> elements is longer than 32766 bytes.  \n  \n \\- or -  \n  \n The source name results in a registry key path longer than 254 characters."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>instance</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Det gick inte att öppna registernyckeln för händelseloggen."
  - type: System.ComponentModel.Win32Exception
    commentId: T:System.ComponentModel.Win32Exception
    description: "Operativsystemet rapporterade ett fel när du skriver händelse posten i händelseloggen. En Windows-felkoden är inte tillgänglig."
  platform:
  - net462
references:
- uid: System.ComponentModel.Component
  isExternal: false
  name: System.ComponentModel.Component
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.ComponentModel.Win32Exception
  parent: System.ComponentModel
  isExternal: false
  name: Win32Exception
  nameWithType: Win32Exception
  fullName: System.ComponentModel.Win32Exception
- uid: System.SystemException
  parent: System
  isExternal: false
  name: SystemException
  nameWithType: SystemException
  fullName: System.SystemException
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.ComponentModel.InvalidEnumArgumentException
  parent: System.ComponentModel
  isExternal: false
  name: InvalidEnumArgumentException
  nameWithType: InvalidEnumArgumentException
  fullName: System.ComponentModel.InvalidEnumArgumentException
- uid: System.Security.SecurityException
  isExternal: true
  name: System.Security.SecurityException
- uid: System.Diagnostics.EventLog.#ctor
  parent: System.Diagnostics.EventLog
  isExternal: false
  name: EventLog()
  nameWithType: EventLog.EventLog()
  fullName: System.Diagnostics.EventLog.EventLog()
- uid: System.Diagnostics.EventLog.#ctor(System.String)
  parent: System.Diagnostics.EventLog
  isExternal: false
  name: EventLog(String)
  nameWithType: EventLog.EventLog(String)
  fullName: System.Diagnostics.EventLog.EventLog(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Diagnostics.EventLog.#ctor(System.String,System.String)
  parent: System.Diagnostics.EventLog
  isExternal: false
  name: EventLog(String,String)
  nameWithType: EventLog.EventLog(String,String)
  fullName: System.Diagnostics.EventLog.EventLog(String,String)
- uid: System.Diagnostics.EventLog.#ctor(System.String,System.String,System.String)
  parent: System.Diagnostics.EventLog
  isExternal: false
  name: EventLog(String,String,String)
  nameWithType: EventLog.EventLog(String,String,String)
  fullName: System.Diagnostics.EventLog.EventLog(String,String,String)
- uid: System.Diagnostics.EventLog.BeginInit
  parent: System.Diagnostics.EventLog
  isExternal: false
  name: BeginInit()
  nameWithType: EventLog.BeginInit()
  fullName: System.Diagnostics.EventLog.BeginInit()
- uid: System.Diagnostics.EventLog.Clear
  parent: System.Diagnostics.EventLog
  isExternal: false
  name: Clear()
  nameWithType: EventLog.Clear()
  fullName: System.Diagnostics.EventLog.Clear()
- uid: System.Diagnostics.EventLog.Close
  parent: System.Diagnostics.EventLog
  isExternal: false
  name: Close()
  nameWithType: EventLog.Close()
  fullName: System.Diagnostics.EventLog.Close()
- uid: System.Diagnostics.EventLog.CreateEventSource(System.Diagnostics.EventSourceCreationData)
  parent: System.Diagnostics.EventLog
  isExternal: false
  name: CreateEventSource(EventSourceCreationData)
  nameWithType: EventLog.CreateEventSource(EventSourceCreationData)
  fullName: System.Diagnostics.EventLog.CreateEventSource(EventSourceCreationData)
- uid: System.Diagnostics.EventSourceCreationData
  parent: System.Diagnostics
  isExternal: false
  name: EventSourceCreationData
  nameWithType: EventSourceCreationData
  fullName: System.Diagnostics.EventSourceCreationData
- uid: System.Diagnostics.EventLog.CreateEventSource(System.String,System.String)
  parent: System.Diagnostics.EventLog
  isExternal: false
  name: CreateEventSource(String,String)
  nameWithType: EventLog.CreateEventSource(String,String)
  fullName: System.Diagnostics.EventLog.CreateEventSource(String,String)
- uid: System.Diagnostics.EventLog.CreateEventSource(System.String,System.String,System.String)
  parent: System.Diagnostics.EventLog
  isExternal: false
  name: CreateEventSource(String,String,String)
  nameWithType: EventLog.CreateEventSource(String,String,String)
  fullName: System.Diagnostics.EventLog.CreateEventSource(String,String,String)
- uid: System.Diagnostics.EventLog.Delete(System.String)
  parent: System.Diagnostics.EventLog
  isExternal: false
  name: Delete(String)
  nameWithType: EventLog.Delete(String)
  fullName: System.Diagnostics.EventLog.Delete(String)
- uid: System.Diagnostics.EventLog.Delete(System.String,System.String)
  parent: System.Diagnostics.EventLog
  isExternal: false
  name: Delete(String,String)
  nameWithType: EventLog.Delete(String,String)
  fullName: System.Diagnostics.EventLog.Delete(String,String)
- uid: System.Diagnostics.EventLog.DeleteEventSource(System.String)
  parent: System.Diagnostics.EventLog
  isExternal: false
  name: DeleteEventSource(String)
  nameWithType: EventLog.DeleteEventSource(String)
  fullName: System.Diagnostics.EventLog.DeleteEventSource(String)
- uid: System.Diagnostics.EventLog.DeleteEventSource(System.String,System.String)
  parent: System.Diagnostics.EventLog
  isExternal: false
  name: DeleteEventSource(String,String)
  nameWithType: EventLog.DeleteEventSource(String,String)
  fullName: System.Diagnostics.EventLog.DeleteEventSource(String,String)
- uid: System.Diagnostics.EventLog.Dispose(System.Boolean)
  parent: System.Diagnostics.EventLog
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: EventLog.Dispose(Boolean)
  fullName: System.Diagnostics.EventLog.Dispose(Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Diagnostics.EventLog.EnableRaisingEvents
  parent: System.Diagnostics.EventLog
  isExternal: false
  name: EnableRaisingEvents
  nameWithType: EventLog.EnableRaisingEvents
  fullName: System.Diagnostics.EventLog.EnableRaisingEvents
- uid: System.Diagnostics.EventLog.EndInit
  parent: System.Diagnostics.EventLog
  isExternal: false
  name: EndInit()
  nameWithType: EventLog.EndInit()
  fullName: System.Diagnostics.EventLog.EndInit()
- uid: System.Diagnostics.EventLog.Entries
  parent: System.Diagnostics.EventLog
  isExternal: false
  name: Entries
  nameWithType: EventLog.Entries
  fullName: System.Diagnostics.EventLog.Entries
- uid: System.Diagnostics.EventLogEntryCollection
  parent: System.Diagnostics
  isExternal: false
  name: EventLogEntryCollection
  nameWithType: EventLogEntryCollection
  fullName: System.Diagnostics.EventLogEntryCollection
- uid: System.Diagnostics.EventLog.EntryWritten
  parent: System.Diagnostics.EventLog
  isExternal: false
  name: EntryWritten
  nameWithType: EventLog.EntryWritten
  fullName: System.Diagnostics.EventLog.EntryWritten
- uid: System.Diagnostics.EntryWrittenEventHandler
  parent: System.Diagnostics
  isExternal: false
  name: EntryWrittenEventHandler
  nameWithType: EntryWrittenEventHandler
  fullName: System.Diagnostics.EntryWrittenEventHandler
- uid: System.Diagnostics.EventLog.Exists(System.String)
  parent: System.Diagnostics.EventLog
  isExternal: false
  name: Exists(String)
  nameWithType: EventLog.Exists(String)
  fullName: System.Diagnostics.EventLog.Exists(String)
- uid: System.Diagnostics.EventLog.Exists(System.String,System.String)
  parent: System.Diagnostics.EventLog
  isExternal: false
  name: Exists(String,String)
  nameWithType: EventLog.Exists(String,String)
  fullName: System.Diagnostics.EventLog.Exists(String,String)
- uid: System.Diagnostics.EventLog.GetEventLogs
  parent: System.Diagnostics.EventLog
  isExternal: false
  name: GetEventLogs()
  nameWithType: EventLog.GetEventLogs()
  fullName: System.Diagnostics.EventLog.GetEventLogs()
- uid: System.Diagnostics.EventLog[]
  parent: System.Diagnostics
  isExternal: false
  name: EventLog
  nameWithType: EventLog
  fullName: System.Diagnostics.EventLog[]
  spec.csharp:
  - uid: System.Diagnostics.EventLog
    name: EventLog
    nameWithType: EventLog
    fullName: EventLog[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Diagnostics.EventLog.GetEventLogs(System.String)
  parent: System.Diagnostics.EventLog
  isExternal: false
  name: GetEventLogs(String)
  nameWithType: EventLog.GetEventLogs(String)
  fullName: System.Diagnostics.EventLog.GetEventLogs(String)
- uid: System.Diagnostics.EventLog.Log
  parent: System.Diagnostics.EventLog
  isExternal: false
  name: Log
  nameWithType: EventLog.Log
  fullName: System.Diagnostics.EventLog.Log
- uid: System.Diagnostics.EventLog.LogDisplayName
  parent: System.Diagnostics.EventLog
  isExternal: false
  name: LogDisplayName
  nameWithType: EventLog.LogDisplayName
  fullName: System.Diagnostics.EventLog.LogDisplayName
- uid: System.Diagnostics.EventLog.LogNameFromSourceName(System.String,System.String)
  parent: System.Diagnostics.EventLog
  isExternal: false
  name: LogNameFromSourceName(String,String)
  nameWithType: EventLog.LogNameFromSourceName(String,String)
  fullName: System.Diagnostics.EventLog.LogNameFromSourceName(String,String)
- uid: System.Diagnostics.EventLog.MachineName
  parent: System.Diagnostics.EventLog
  isExternal: false
  name: MachineName
  nameWithType: EventLog.MachineName
  fullName: System.Diagnostics.EventLog.MachineName
- uid: System.Diagnostics.EventLog.MaximumKilobytes
  parent: System.Diagnostics.EventLog
  isExternal: false
  name: MaximumKilobytes
  nameWithType: EventLog.MaximumKilobytes
  fullName: System.Diagnostics.EventLog.MaximumKilobytes
- uid: System.Int64
  parent: System
  isExternal: true
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: System.Diagnostics.EventLog.MinimumRetentionDays
  parent: System.Diagnostics.EventLog
  isExternal: false
  name: MinimumRetentionDays
  nameWithType: EventLog.MinimumRetentionDays
  fullName: System.Diagnostics.EventLog.MinimumRetentionDays
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Diagnostics.EventLog.ModifyOverflowPolicy(System.Diagnostics.OverflowAction,System.Int32)
  parent: System.Diagnostics.EventLog
  isExternal: false
  name: ModifyOverflowPolicy(OverflowAction,Int32)
  nameWithType: EventLog.ModifyOverflowPolicy(OverflowAction,Int32)
  fullName: System.Diagnostics.EventLog.ModifyOverflowPolicy(OverflowAction,Int32)
- uid: System.Diagnostics.OverflowAction
  parent: System.Diagnostics
  isExternal: false
  name: OverflowAction
  nameWithType: OverflowAction
  fullName: System.Diagnostics.OverflowAction
- uid: System.Diagnostics.EventLog.OverflowAction
  parent: System.Diagnostics.EventLog
  isExternal: false
  name: OverflowAction
  nameWithType: EventLog.OverflowAction
  fullName: System.Diagnostics.EventLog.OverflowAction
- uid: System.Diagnostics.EventLog.RegisterDisplayName(System.String,System.Int64)
  parent: System.Diagnostics.EventLog
  isExternal: false
  name: RegisterDisplayName(String,Int64)
  nameWithType: EventLog.RegisterDisplayName(String,Int64)
  fullName: System.Diagnostics.EventLog.RegisterDisplayName(String,Int64)
- uid: System.Diagnostics.EventLog.Source
  parent: System.Diagnostics.EventLog
  isExternal: false
  name: Source
  nameWithType: EventLog.Source
  fullName: System.Diagnostics.EventLog.Source
- uid: System.Diagnostics.EventLog.SourceExists(System.String)
  parent: System.Diagnostics.EventLog
  isExternal: false
  name: SourceExists(String)
  nameWithType: EventLog.SourceExists(String)
  fullName: System.Diagnostics.EventLog.SourceExists(String)
- uid: System.Diagnostics.EventLog.SourceExists(System.String,System.String)
  parent: System.Diagnostics.EventLog
  isExternal: false
  name: SourceExists(String,String)
  nameWithType: EventLog.SourceExists(String,String)
  fullName: System.Diagnostics.EventLog.SourceExists(String,String)
- uid: System.Diagnostics.EventLog.SynchronizingObject
  parent: System.Diagnostics.EventLog
  isExternal: false
  name: SynchronizingObject
  nameWithType: EventLog.SynchronizingObject
  fullName: System.Diagnostics.EventLog.SynchronizingObject
- uid: System.ComponentModel.ISynchronizeInvoke
  parent: System.ComponentModel
  isExternal: false
  name: ISynchronizeInvoke
  nameWithType: ISynchronizeInvoke
  fullName: System.ComponentModel.ISynchronizeInvoke
- uid: System.Diagnostics.EventLog.WriteEntry(System.String)
  parent: System.Diagnostics.EventLog
  isExternal: false
  name: WriteEntry(String)
  nameWithType: EventLog.WriteEntry(String)
  fullName: System.Diagnostics.EventLog.WriteEntry(String)
- uid: System.Diagnostics.EventLog.WriteEntry(System.String,System.Diagnostics.EventLogEntryType)
  parent: System.Diagnostics.EventLog
  isExternal: false
  name: WriteEntry(String,EventLogEntryType)
  nameWithType: EventLog.WriteEntry(String,EventLogEntryType)
  fullName: System.Diagnostics.EventLog.WriteEntry(String,EventLogEntryType)
- uid: System.Diagnostics.EventLogEntryType
  parent: System.Diagnostics
  isExternal: false
  name: EventLogEntryType
  nameWithType: EventLogEntryType
  fullName: System.Diagnostics.EventLogEntryType
- uid: System.Diagnostics.EventLog.WriteEntry(System.String,System.String)
  parent: System.Diagnostics.EventLog
  isExternal: false
  name: WriteEntry(String,String)
  nameWithType: EventLog.WriteEntry(String,String)
  fullName: System.Diagnostics.EventLog.WriteEntry(String,String)
- uid: System.Diagnostics.EventLog.WriteEntry(System.String,System.Diagnostics.EventLogEntryType,System.Int32)
  parent: System.Diagnostics.EventLog
  isExternal: false
  name: WriteEntry(String,EventLogEntryType,Int32)
  nameWithType: EventLog.WriteEntry(String,EventLogEntryType,Int32)
  fullName: System.Diagnostics.EventLog.WriteEntry(String,EventLogEntryType,Int32)
- uid: System.Diagnostics.EventLog.WriteEntry(System.String,System.String,System.Diagnostics.EventLogEntryType)
  parent: System.Diagnostics.EventLog
  isExternal: false
  name: WriteEntry(String,String,EventLogEntryType)
  nameWithType: EventLog.WriteEntry(String,String,EventLogEntryType)
  fullName: System.Diagnostics.EventLog.WriteEntry(String,String,EventLogEntryType)
- uid: System.Diagnostics.EventLog.WriteEntry(System.String,System.Diagnostics.EventLogEntryType,System.Int32,System.Int16)
  parent: System.Diagnostics.EventLog
  isExternal: false
  name: WriteEntry(String,EventLogEntryType,Int32,Int16)
  nameWithType: EventLog.WriteEntry(String,EventLogEntryType,Int32,Int16)
  fullName: System.Diagnostics.EventLog.WriteEntry(String,EventLogEntryType,Int32,Int16)
- uid: System.Int16
  parent: System
  isExternal: true
  name: Int16
  nameWithType: Int16
  fullName: System.Int16
- uid: System.Diagnostics.EventLog.WriteEntry(System.String,System.String,System.Diagnostics.EventLogEntryType,System.Int32)
  parent: System.Diagnostics.EventLog
  isExternal: false
  name: WriteEntry(String,String,EventLogEntryType,Int32)
  nameWithType: EventLog.WriteEntry(String,String,EventLogEntryType,Int32)
  fullName: System.Diagnostics.EventLog.WriteEntry(String,String,EventLogEntryType,Int32)
- uid: System.Diagnostics.EventLog.WriteEntry(System.String,System.Diagnostics.EventLogEntryType,System.Int32,System.Int16,System.Byte[])
  parent: System.Diagnostics.EventLog
  isExternal: false
  name: WriteEntry(String,EventLogEntryType,Int32,Int16,Byte[])
  nameWithType: EventLog.WriteEntry(String,EventLogEntryType,Int32,Int16,Byte[])
  fullName: System.Diagnostics.EventLog.WriteEntry(String,EventLogEntryType,Int32,Int16,Byte[])
- uid: System.Byte[]
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: Byte[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Diagnostics.EventLog.WriteEntry(System.String,System.String,System.Diagnostics.EventLogEntryType,System.Int32,System.Int16)
  parent: System.Diagnostics.EventLog
  isExternal: false
  name: WriteEntry(String,String,EventLogEntryType,Int32,Int16)
  nameWithType: EventLog.WriteEntry(String,String,EventLogEntryType,Int32,Int16)
  fullName: System.Diagnostics.EventLog.WriteEntry(String,String,EventLogEntryType,Int32,Int16)
- uid: System.Diagnostics.EventLog.WriteEntry(System.String,System.String,System.Diagnostics.EventLogEntryType,System.Int32,System.Int16,System.Byte[])
  parent: System.Diagnostics.EventLog
  isExternal: false
  name: WriteEntry(String,String,EventLogEntryType,Int32,Int16,Byte[])
  nameWithType: EventLog.WriteEntry(String,String,EventLogEntryType,Int32,Int16,Byte[])
  fullName: System.Diagnostics.EventLog.WriteEntry(String,String,EventLogEntryType,Int32,Int16,Byte[])
- uid: System.Diagnostics.EventLog.WriteEvent(System.Diagnostics.EventInstance,System.Object[])
  parent: System.Diagnostics.EventLog
  isExternal: false
  name: WriteEvent(EventInstance,Object[])
  nameWithType: EventLog.WriteEvent(EventInstance,Object[])
  fullName: System.Diagnostics.EventLog.WriteEvent(EventInstance,Object[])
- uid: System.Diagnostics.EventInstance
  parent: System.Diagnostics
  isExternal: false
  name: EventInstance
  nameWithType: EventInstance
  fullName: System.Diagnostics.EventInstance
- uid: System.Object[]
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object[]
  spec.csharp:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: Object[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Diagnostics.EventLog.WriteEvent(System.Diagnostics.EventInstance,System.Byte[],System.Object[])
  parent: System.Diagnostics.EventLog
  isExternal: false
  name: WriteEvent(EventInstance,Byte[],Object[])
  nameWithType: EventLog.WriteEvent(EventInstance,Byte[],Object[])
  fullName: System.Diagnostics.EventLog.WriteEvent(EventInstance,Byte[],Object[])
- uid: System.Diagnostics.EventLog.WriteEvent(System.String,System.Diagnostics.EventInstance,System.Object[])
  parent: System.Diagnostics.EventLog
  isExternal: false
  name: WriteEvent(String,EventInstance,Object[])
  nameWithType: EventLog.WriteEvent(String,EventInstance,Object[])
  fullName: System.Diagnostics.EventLog.WriteEvent(String,EventInstance,Object[])
- uid: System.Diagnostics.EventLog.WriteEvent(System.String,System.Diagnostics.EventInstance,System.Byte[],System.Object[])
  parent: System.Diagnostics.EventLog
  isExternal: false
  name: WriteEvent(String,EventInstance,Byte[],Object[])
  nameWithType: EventLog.WriteEvent(String,EventInstance,Byte[],Object[])
  fullName: System.Diagnostics.EventLog.WriteEvent(String,EventInstance,Byte[],Object[])
- uid: System.Diagnostics.EventLog.#ctor*
  parent: System.Diagnostics.EventLog
  isExternal: false
  name: EventLog
  nameWithType: EventLog.EventLog
- uid: System.Diagnostics.EventLog.BeginInit*
  parent: System.Diagnostics.EventLog
  isExternal: false
  name: BeginInit
  nameWithType: EventLog.BeginInit
- uid: System.Diagnostics.EventLog.Clear*
  parent: System.Diagnostics.EventLog
  isExternal: false
  name: Clear
  nameWithType: EventLog.Clear
- uid: System.Diagnostics.EventLog.Close*
  parent: System.Diagnostics.EventLog
  isExternal: false
  name: Close
  nameWithType: EventLog.Close
- uid: System.Diagnostics.EventLog.CreateEventSource*
  parent: System.Diagnostics.EventLog
  isExternal: false
  name: CreateEventSource
  nameWithType: EventLog.CreateEventSource
- uid: System.Diagnostics.EventLog.Delete*
  parent: System.Diagnostics.EventLog
  isExternal: false
  name: Delete
  nameWithType: EventLog.Delete
- uid: System.Diagnostics.EventLog.DeleteEventSource*
  parent: System.Diagnostics.EventLog
  isExternal: false
  name: DeleteEventSource
  nameWithType: EventLog.DeleteEventSource
- uid: System.Diagnostics.EventLog.Dispose*
  parent: System.Diagnostics.EventLog
  isExternal: false
  name: Dispose
  nameWithType: EventLog.Dispose
- uid: System.Diagnostics.EventLog.EnableRaisingEvents*
  parent: System.Diagnostics.EventLog
  isExternal: false
  name: EnableRaisingEvents
  nameWithType: EventLog.EnableRaisingEvents
- uid: System.Diagnostics.EventLog.EndInit*
  parent: System.Diagnostics.EventLog
  isExternal: false
  name: EndInit
  nameWithType: EventLog.EndInit
- uid: System.Diagnostics.EventLog.Entries*
  parent: System.Diagnostics.EventLog
  isExternal: false
  name: Entries
  nameWithType: EventLog.Entries
- uid: System.Diagnostics.EventLog.Exists*
  parent: System.Diagnostics.EventLog
  isExternal: false
  name: Exists
  nameWithType: EventLog.Exists
- uid: System.Diagnostics.EventLog.GetEventLogs*
  parent: System.Diagnostics.EventLog
  isExternal: false
  name: GetEventLogs
  nameWithType: EventLog.GetEventLogs
- uid: System.Diagnostics.EventLog.Log*
  parent: System.Diagnostics.EventLog
  isExternal: false
  name: Log
  nameWithType: EventLog.Log
- uid: System.Diagnostics.EventLog.LogDisplayName*
  parent: System.Diagnostics.EventLog
  isExternal: false
  name: LogDisplayName
  nameWithType: EventLog.LogDisplayName
- uid: System.Diagnostics.EventLog.LogNameFromSourceName*
  parent: System.Diagnostics.EventLog
  isExternal: false
  name: LogNameFromSourceName
  nameWithType: EventLog.LogNameFromSourceName
- uid: System.Diagnostics.EventLog.MachineName*
  parent: System.Diagnostics.EventLog
  isExternal: false
  name: MachineName
  nameWithType: EventLog.MachineName
- uid: System.Diagnostics.EventLog.MaximumKilobytes*
  parent: System.Diagnostics.EventLog
  isExternal: false
  name: MaximumKilobytes
  nameWithType: EventLog.MaximumKilobytes
- uid: System.Diagnostics.EventLog.MinimumRetentionDays*
  parent: System.Diagnostics.EventLog
  isExternal: false
  name: MinimumRetentionDays
  nameWithType: EventLog.MinimumRetentionDays
- uid: System.Diagnostics.EventLog.ModifyOverflowPolicy*
  parent: System.Diagnostics.EventLog
  isExternal: false
  name: ModifyOverflowPolicy
  nameWithType: EventLog.ModifyOverflowPolicy
- uid: System.Diagnostics.EventLog.OverflowAction*
  parent: System.Diagnostics.EventLog
  isExternal: false
  name: OverflowAction
  nameWithType: EventLog.OverflowAction
- uid: System.Diagnostics.EventLog.RegisterDisplayName*
  parent: System.Diagnostics.EventLog
  isExternal: false
  name: RegisterDisplayName
  nameWithType: EventLog.RegisterDisplayName
- uid: System.Diagnostics.EventLog.Source*
  parent: System.Diagnostics.EventLog
  isExternal: false
  name: Source
  nameWithType: EventLog.Source
- uid: System.Diagnostics.EventLog.SourceExists*
  parent: System.Diagnostics.EventLog
  isExternal: false
  name: SourceExists
  nameWithType: EventLog.SourceExists
- uid: System.Diagnostics.EventLog.SynchronizingObject*
  parent: System.Diagnostics.EventLog
  isExternal: false
  name: SynchronizingObject
  nameWithType: EventLog.SynchronizingObject
- uid: System.Diagnostics.EventLog.WriteEntry*
  parent: System.Diagnostics.EventLog
  isExternal: false
  name: WriteEntry
  nameWithType: EventLog.WriteEntry
- uid: System.Diagnostics.EventLog.WriteEvent*
  parent: System.Diagnostics.EventLog
  isExternal: false
  name: WriteEvent
  nameWithType: EventLog.WriteEvent
