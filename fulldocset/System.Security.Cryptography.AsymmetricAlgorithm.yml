### YamlMime:ManagedReference
items:
- uid: System.Security.Cryptography.AsymmetricAlgorithm
  id: AsymmetricAlgorithm
  children:
  - System.Security.Cryptography.AsymmetricAlgorithm.#ctor
  - System.Security.Cryptography.AsymmetricAlgorithm.Clear
  - System.Security.Cryptography.AsymmetricAlgorithm.Create
  - System.Security.Cryptography.AsymmetricAlgorithm.Create(System.String)
  - System.Security.Cryptography.AsymmetricAlgorithm.Dispose
  - System.Security.Cryptography.AsymmetricAlgorithm.Dispose(System.Boolean)
  - System.Security.Cryptography.AsymmetricAlgorithm.FromXmlString(System.String)
  - System.Security.Cryptography.AsymmetricAlgorithm.KeyExchangeAlgorithm
  - System.Security.Cryptography.AsymmetricAlgorithm.KeySize
  - System.Security.Cryptography.AsymmetricAlgorithm.KeySizeValue
  - System.Security.Cryptography.AsymmetricAlgorithm.LegalKeySizes
  - System.Security.Cryptography.AsymmetricAlgorithm.LegalKeySizesValue
  - System.Security.Cryptography.AsymmetricAlgorithm.SignatureAlgorithm
  - System.Security.Cryptography.AsymmetricAlgorithm.ToXmlString(System.Boolean)
  langs:
  - csharp
  name: AsymmetricAlgorithm
  nameWithType: AsymmetricAlgorithm
  fullName: System.Security.Cryptography.AsymmetricAlgorithm
  type: Class
  summary: "Representerar den abstrakt basklass för alla implementeringar av asymmetriska algoritmer måste ärva från vilken."
  remarks: "Asymmetriska krypteringsalgoritmer, även kallat algoritmer för offentliga nycklar, kräver att både avsändaren och mottagaren har ett par relaterade nycklar: en privat nyckel och en offentlig nyckel. Båda nycklarna är unika för entiteten. Den offentliga nyckeln kan göras tillgänglig för alla; den här nyckeln används för att koda data som skickas till en mottagare. Den privata nyckeln måste hållas privata av mottagaren; den här nyckeln används för avkodning meddelanden kodad med mottagarens offentliga nyckel. Den <xref:System.Security.Cryptography.RSACryptoServiceProvider>klassen är en implementering av en offentlig nyckelalgoritm.</xref:System.Security.Cryptography.RSACryptoServiceProvider> En detaljerad beskrivning av algoritmer för kryptering med offentlig nyckel och i avsnittet &quot;Kryptering med offentlig nyckel&quot; i [kryptografiska tjänster](~/add/includes/ajax-current-ext-md.md). Information om hur du använder verktyget starkt krypterat namn (Sn.exe) för att skapa nyckelpar finns [så här: skapa en nyckel för privat-offentligt](~/add/includes/ajax-current-ext-md.md).       Du kan använda system för offentlig nyckel för att bilda digitala signaturer. Digitala signaturer används för att skydda integriteten hos data. Till exempel vill använda ett system med offentlig nyckel för att signera ett meddelande, gäller avsändaren först hash-funktion på meddelandet för att skapa ett meddelandesammandrag. Avsändaren krypterar message digest med avsändarens privat nyckel för att skapa avsändarens personlig signatur. Vid mottagning av meddelandet och signatur kan mottagaren dekrypterar signaturen i avsändarens offentliga nyckel för att återställa meddelandesammandraget, och hashar meddelandet med samma hash-algoritm som används av avsändaren. Om meddelandesammandrag som mottagaren beräknar matchar meddelandesammandrag togs emot från avsändaren, förutsätter mottagaren att meddelandet inte har ändrats under överföringen. Observera att vem som helst kan verifiera en signatur, eftersom avsändarens offentliga nyckel är vanliga kunskap. Den här tekniken behåller inte PFS för meddelandet. för att meddelandet ska vara hemliga, måste det också vara krypterad.       .NET Framework har följande klasser som implementerar algoritmer för digital signatur: <xref:System.Security.Cryptography.DSACryptoServiceProvider>, <xref:System.Security.Cryptography.RSACryptoServiceProvider>, <xref:System.Security.Cryptography.ECDsa>(basklassen), och <xref:System.Security.Cryptography.ECDsaCng>.</xref:System.Security.Cryptography.ECDsaCng> </xref:System.Security.Cryptography.ECDsa> </xref:System.Security.Cryptography.RSACryptoServiceProvider> </xref:System.Security.Cryptography.DSACryptoServiceProvider>       Den <xref:System.Security.Cryptography>namnområde ger konkreta klasser för <xref:System.Security.Cryptography.RSA>och <xref:System.Security.Cryptography.DSA>endast.</xref:System.Security.Cryptography.DSA> </xref:System.Security.Cryptography.RSA> </xref:System.Security.Cryptography>       Information om hur du använder RSA-algoritm för att kryptera och dekryptera XML-data och skapa och verifiera XML digitala signaturer finns dessa artiklar:- [så här: kryptera XML-element med asymmetriska nycklar](~/add/includes/ajax-current-ext-md.md)      -   [så: dekryptera XML-element med asymmetriska nycklar](~/add/includes/ajax-current-ext-md.md)      -   [så här: Logga XML-dokument med digitala signaturer](~/add/includes/ajax-current-ext-md.md)      -   [så: verifiera den digitala signaturer i XML-dokument](~/add/includes/ajax-current-ext-md.md)"
  example:
  - "The following code example demonstrates how to implement a custom asymmetric algorithm inherited from the AsymmetricAlgorithm class.  An additional class is provided to demonstrate how to use the custom class.  \n  \n [!code-cs[System.Security.Cryptography.AsymmetricAlgorithm#2](~/add/codesnippet/csharp/t-system.security.crypto_0_1.cs)]\n [!code-cpp[System.Security.Cryptography.AsymmetricAlgorithm#2](~/add/codesnippet/cpp/t-system.security.crypto_0_1.cpp)]\n [!code-vb[System.Security.Cryptography.AsymmetricAlgorithm#2](~/add/codesnippet/visualbasic/t-system.security.crypto_0_1.vb)]  \n  \n Here's an additional class that demonstrates how to use the custom class.  \n  \n [!code-cs[System.Security.Cryptography.AsymmetricAlgorithm#3](~/add/codesnippet/csharp/t-system.security.crypto_0_2.cs)]\n [!code-vb[System.Security.Cryptography.AsymmetricAlgorithm#3](~/add/codesnippet/visualbasic/t-system.security.crypto_0_2.vb)]\n [!code-cpp[System.Security.Cryptography.AsymmetricAlgorithm#3](~/add/codesnippet/cpp/t-system.security.crypto_0_2.cpp)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public abstract class AsymmetricAlgorithm : IDisposable
  inheritance:
  - System.Object
  implements:
  - System.IDisposable
  inheritedMembers: []
  platform:
  - net462
- uid: System.Security.Cryptography.AsymmetricAlgorithm.#ctor
  id: '#ctor'
  parent: System.Security.Cryptography.AsymmetricAlgorithm
  langs:
  - csharp
  name: AsymmetricAlgorithm()
  nameWithType: AsymmetricAlgorithm.AsymmetricAlgorithm()
  fullName: System.Security.Cryptography.AsymmetricAlgorithm.AsymmetricAlgorithm()
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Initierar en ny instans av den <xref href=&quot;System.Security.Cryptography.AsymmetricAlgorithm&quot;> </xref> klass."
  remarks: "Du kan inte skapa en instans av en abstrakt klass. Programkod som skapar en ny instans av en härledd klass. Den <xref:System.Security.Cryptography.RSACryptoServiceProvider>och <xref:System.Security.Cryptography.DSACryptoServiceProvider>klasser är endast stöds för närvarande implementeringar.</xref:System.Security.Cryptography.DSACryptoServiceProvider> </xref:System.Security.Cryptography.RSACryptoServiceProvider>"
  syntax:
    content: protected AsymmetricAlgorithm ();
    parameters: []
  overload: System.Security.Cryptography.AsymmetricAlgorithm.#ctor*
  exceptions:
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "Implementeringen av den härledda klassen är inte giltig."
  platform:
  - net462
- uid: System.Security.Cryptography.AsymmetricAlgorithm.Clear
  id: Clear
  parent: System.Security.Cryptography.AsymmetricAlgorithm
  langs:
  - csharp
  name: Clear()
  nameWithType: AsymmetricAlgorithm.Clear()
  fullName: System.Security.Cryptography.AsymmetricAlgorithm.Clear()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Frigör alla resurser som används av den <xref href=&quot;System.Security.Cryptography.AsymmetricAlgorithm&quot;> </xref> klass."
  remarks: "Den här metoden är ett enkelt anrop till den <xref:System.IDisposable.Dispose%2A?displayProperty=fullName>metoden.</xref:System.IDisposable.Dispose%2A?displayProperty=fullName>       Anropar `Dispose` tillåter resurserna som används av den <xref:System.Security.Cryptography.AsymmetricAlgorithm>klass som ska allokeras för andra ändamål.</xref:System.Security.Cryptography.AsymmetricAlgorithm> Mer information om `Dispose`, se [rengöras ohanterade resurser](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following code example demonstrates how to call the Clear method to release the resources of the current `customCrypto` object. This code example is part of a larger example provided for the <xref:System.Security.Cryptography.AsymmetricAlgorithm> class.  \n  \n [!code-cs[System.Security.Cryptography.AsymmetricAlgorithm#1](~/add/codesnippet/csharp/m-system.security.crypto_101_1.cs)]\n [!code-vb[System.Security.Cryptography.AsymmetricAlgorithm#1](~/add/codesnippet/visualbasic/m-system.security.crypto_101_1.vb)]\n [!code-cpp[System.Security.Cryptography.AsymmetricAlgorithm#1](~/add/codesnippet/cpp/m-system.security.crypto_101_1.cpp)]"
  syntax:
    content: public void Clear ();
    parameters: []
  overload: System.Security.Cryptography.AsymmetricAlgorithm.Clear*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.AsymmetricAlgorithm.Create
  id: Create
  parent: System.Security.Cryptography.AsymmetricAlgorithm
  langs:
  - csharp
  name: Create()
  nameWithType: AsymmetricAlgorithm.Create()
  fullName: System.Security.Cryptography.AsymmetricAlgorithm.Create()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Skapar en kryptografisk standard-objekt används för att utföra den asymmetriska algoritmen."
  remarks: ''
  example:
  - "The following code example demonstrates how to implement the Create method in an extended class. This code example is part of a larger example provided for the <xref:System.Security.Cryptography.AsymmetricAlgorithm> class.  \n  \n [!code-cs[System.Security.Cryptography.AsymmetricAlgorithm#11](~/add/codesnippet/csharp/m-system.security.crypto_87_1.cs)]\n [!code-cpp[System.Security.Cryptography.AsymmetricAlgorithm#11](~/add/codesnippet/cpp/m-system.security.crypto_87_1.cpp)]\n [!code-vb[System.Security.Cryptography.AsymmetricAlgorithm#11](~/add/codesnippet/visualbasic/m-system.security.crypto_87_1.vb)]"
  syntax:
    content: public static System.Security.Cryptography.AsymmetricAlgorithm Create ();
    parameters: []
    return:
      type: System.Security.Cryptography.AsymmetricAlgorithm
      description: "En ny <xref href=&quot;System.Security.Cryptography.RSACryptoServiceProvider&quot;> </xref> instansen om standardinställningarna har ändrats med den [ &lt;cryptoClass&gt; elementet](../Topic/%3CcryptoClass%3E%20Element.md)."
  overload: System.Security.Cryptography.AsymmetricAlgorithm.Create*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.AsymmetricAlgorithm.Create(System.String)
  id: Create(System.String)
  parent: System.Security.Cryptography.AsymmetricAlgorithm
  langs:
  - csharp
  name: Create(String)
  nameWithType: AsymmetricAlgorithm.Create(String)
  fullName: System.Security.Cryptography.AsymmetricAlgorithm.Create(String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Skapar en instans av den angivna implementeringen av en asymmetriska algoritmen."
  remarks: ''
  example:
  - "The following code example demonstrates how to implement the Create method in an extended class. This code example is part of a larger example provided for the <xref:System.Security.Cryptography.AsymmetricAlgorithm> class.  \n  \n [!code-cs[System.Security.Cryptography.AsymmetricAlgorithm#12](~/add/codesnippet/csharp/m-system.security.crypto_118_1.cs)]\n [!code-cpp[System.Security.Cryptography.AsymmetricAlgorithm#12](~/add/codesnippet/cpp/m-system.security.crypto_118_1.cpp)]\n [!code-vb[System.Security.Cryptography.AsymmetricAlgorithm#12](~/add/codesnippet/visualbasic/m-system.security.crypto_118_1.vb)]"
  syntax:
    content: public static System.Security.Cryptography.AsymmetricAlgorithm Create (string algName);
    parameters:
    - id: algName
      type: System.String
      description: "Den asymmetriska algoritmimplementeringen ska användas. I följande tabell visas de giltiga värdena för den `algName` parametern och algoritmer som du kan mappa till.       <table><thead><tr><th> Värdet för parametern       </th><th> Implementerar       </th></tr></thead><tbody><tr><td> System.Security.Cryptography.AsymmetricAlgorithm       </td><td><xref href=&quot;System.Security.Cryptography.AsymmetricAlgorithm&quot;></xref></td></tr><tr><td> RSA       </td><td><xref href=&quot;System.Security.Cryptography.RSA&quot;></xref></td></tr><tr><td> System.Security.Cryptography.RSA       </td><td><xref href=&quot;System.Security.Cryptography.RSA&quot;></xref></td></tr><tr><td> DSA       </td><td><xref href=&quot;System.Security.Cryptography.DSA&quot;></xref></td></tr><tr><td> System.Security.Cryptography.DSA       </td><td><xref href=&quot;System.Security.Cryptography.DSA&quot;></xref></td></tr><tr><td> ECDsa       </td><td><xref href=&quot;System.Security.Cryptography.ECDsa&quot;></xref></td></tr><tr><td> ECDsaCng       </td><td><xref href=&quot;System.Security.Cryptography.ECDsaCng&quot;></xref></td></tr><tr><td> System.Security.Cryptography.ECDsaCng       </td><td><xref href=&quot;System.Security.Cryptography.ECDsaCng&quot;></xref></td></tr><tr><td> ECDH       </td><td><xref href=&quot;System.Security.Cryptography.ECDiffieHellman&quot;></xref></td></tr><tr><td> ECDiffieHellman       </td><td><xref href=&quot;System.Security.Cryptography.ECDiffieHellman&quot;></xref></td></tr><tr><td> ECDiffieHellmanCng       </td><td><xref href=&quot;System.Security.Cryptography.ECDiffieHellmanCng&quot;></xref></td></tr><tr><td> System.Security.Cryptography.ECDiffieHellmanCng       </td><td><xref href=&quot;System.Security.Cryptography.ECDiffieHellmanCng&quot;></xref></td></tr></tbody></table>"
    return:
      type: System.Security.Cryptography.AsymmetricAlgorithm
      description: "En ny instans av den angivna asymmetriska algoritmimplementeringen."
  overload: System.Security.Cryptography.AsymmetricAlgorithm.Create*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.AsymmetricAlgorithm.Dispose
  id: Dispose
  parent: System.Security.Cryptography.AsymmetricAlgorithm
  langs:
  - csharp
  name: Dispose()
  nameWithType: AsymmetricAlgorithm.Dispose()
  fullName: System.Security.Cryptography.AsymmetricAlgorithm.Dispose()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Frigör alla resurser som används av den aktuella instansen av den <xref href=&quot;System.Security.Cryptography.AsymmetricAlgorithm&quot;> </xref> klass."
  remarks: "Anropa `Dispose` när du är klar med hjälp av <xref:System.Security.Cryptography.AsymmetricAlgorithm>.</xref:System.Security.Cryptography.AsymmetricAlgorithm> Den `Dispose` metoden lämnar kvar det <xref:System.Security.Cryptography.AsymmetricAlgorithm>oanvändbar.</xref:System.Security.Cryptography.AsymmetricAlgorithm> Efter att `Dispose`, måste du släppa alla referenser till den <xref:System.Security.Cryptography.AsymmetricAlgorithm>så skräpinsamlingen kan frigöra minne som den <xref:System.Security.Cryptography.AsymmetricAlgorithm>var upptar.</xref:System.Security.Cryptography.AsymmetricAlgorithm> </xref:System.Security.Cryptography.AsymmetricAlgorithm>       Mer information finns i [Rensa ohanterade resurser](~/add/includes/ajax-current-ext-md.md) och [implementera en metod för ta bort](~/add/includes/ajax-current-ext-md.md).      > [!NOTE] > Alltid anropet `Dispose` innan du släpper senaste referens till <xref:System.Security.Cryptography.AsymmetricAlgorithm>.</xref:System.Security.Cryptography.AsymmetricAlgorithm> De resurser som den använder frigörs annars inte förrän skräpinsamlingen anrop av <xref:System.Security.Cryptography.AsymmetricAlgorithm>objektets `Finalize` metod.</xref:System.Security.Cryptography.AsymmetricAlgorithm>"
  syntax:
    content: public void Dispose ();
    parameters: []
  overload: System.Security.Cryptography.AsymmetricAlgorithm.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.AsymmetricAlgorithm.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.Security.Cryptography.AsymmetricAlgorithm
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: AsymmetricAlgorithm.Dispose(Boolean)
  fullName: System.Security.Cryptography.AsymmetricAlgorithm.Dispose(Boolean)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Släpper de ohanterade resurser som används av den <xref href=&quot;System.Security.Cryptography.AsymmetricAlgorithm&quot;> </xref> klassen och eventuellt släpper hanterade resurser."
  remarks: "Den här metoden anropas av allmänheten `Dispose()` metod och `Finalize` metod. `Dispose()`anropar den skyddade `Dispose(Boolean)` metod med den `disposing` parametern `true`. `Finalize`anropar `Dispose` med `disposing` inställd på `false`.       När den `disposing` parametern är `true`, den här metoden Frigör alla resurser som innehas av alla hanterade objekt som den här <xref:System.Security.Cryptography.AsymmetricAlgorithm>referenser.</xref:System.Security.Cryptography.AsymmetricAlgorithm> Den här metoden startar den `Dispose()` metod för varje refererade till objekt."
  syntax:
    content: protected virtual void Dispose (bool disposing);
    parameters:
    - id: disposing
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Frisläpp både hanterade och ohanterade resurser. <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> att släppa endast resurser som inte hanteras."
  overload: System.Security.Cryptography.AsymmetricAlgorithm.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.AsymmetricAlgorithm.FromXmlString(System.String)
  id: FromXmlString(System.String)
  parent: System.Security.Cryptography.AsymmetricAlgorithm
  langs:
  - csharp
  name: FromXmlString(String)
  nameWithType: AsymmetricAlgorithm.FromXmlString(String)
  fullName: System.Security.Cryptography.AsymmetricAlgorithm.FromXmlString(String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "När åsidosätts i en härledd klass Rekonstruerar en <xref href=&quot;System.Security.Cryptography.AsymmetricAlgorithm&quot;> </xref> objekt från en XML-sträng. I annat fall utlöser <xref:System.NotImplementedException>.</xref:System.NotImplementedException>"
  remarks: ''
  example:
  - "The following code example demonstrates how to implement the FromXmlString method to parse the specified XML string to populate the current <xref:System.Security.Cryptography.CspParameters> object. This code example is part of a larger example provided for the <xref:System.Security.Cryptography.AsymmetricAlgorithm> class.  \n  \n [!code-cs[System.Security.Cryptography.AsymmetricAlgorithm#4](~/add/codesnippet/csharp/m-system.security.crypto_86_1.cs)]\n [!code-cpp[System.Security.Cryptography.AsymmetricAlgorithm#4](~/add/codesnippet/cpp/m-system.security.crypto_86_1.cpp)]\n [!code-vb[System.Security.Cryptography.AsymmetricAlgorithm#4](~/add/codesnippet/visualbasic/m-system.security.crypto_86_1.vb)]"
  syntax:
    content: public virtual void FromXmlString (string xmlString);
    parameters:
    - id: xmlString
      type: System.String
      description: "XML-strängen som ska användas för att återskapa den <xref href=&quot;System.Security.Cryptography.AsymmetricAlgorithm&quot;> </xref> objekt."
  overload: System.Security.Cryptography.AsymmetricAlgorithm.FromXmlString*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.AsymmetricAlgorithm.KeyExchangeAlgorithm
  id: KeyExchangeAlgorithm
  parent: System.Security.Cryptography.AsymmetricAlgorithm
  langs:
  - csharp
  name: KeyExchangeAlgorithm
  nameWithType: AsymmetricAlgorithm.KeyExchangeAlgorithm
  fullName: System.Security.Cryptography.AsymmetricAlgorithm.KeyExchangeAlgorithm
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Hämtar namnet på nyckelutbytesalgoritmen när åsidosätts i en härledd klass. I annat fall utlöser <xref:System.NotImplementedException>.</xref:System.NotImplementedException>"
  remarks: ''
  example:
  - "The following code example demonstrates how to override the KeyExchangeAlgorithm property to return the name for the key exchange algorithm. This code example is part of a larger example provided for the <xref:System.Security.Cryptography.AsymmetricAlgorithm> class.  \n  \n [!code-cs[System.Security.Cryptography.AsymmetricAlgorithm#6](~/add/codesnippet/csharp/p-system.security.crypto_83_1.cs)]\n [!code-cpp[System.Security.Cryptography.AsymmetricAlgorithm#6](~/add/codesnippet/cpp/p-system.security.crypto_83_1.cpp)]\n [!code-vb[System.Security.Cryptography.AsymmetricAlgorithm#6](~/add/codesnippet/visualbasic/p-system.security.crypto_83_1.vb)]"
  syntax:
    content: public virtual string KeyExchangeAlgorithm { get; }
    return:
      type: System.String
      description: "Namnet på nyckelutbytesalgoritmen."
  overload: System.Security.Cryptography.AsymmetricAlgorithm.KeyExchangeAlgorithm*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.AsymmetricAlgorithm.KeySize
  id: KeySize
  parent: System.Security.Cryptography.AsymmetricAlgorithm
  langs:
  - csharp
  name: KeySize
  nameWithType: AsymmetricAlgorithm.KeySize
  fullName: System.Security.Cryptography.AsymmetricAlgorithm.KeySize
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Hämtar eller anger storlek, i antal bitar viktiga modulus används av den asymmetriska algoritmen."
  remarks: "Giltig nyckel storlekar som anges av viss implementeringen av den asymmetriska algoritmen och visas i den <xref:System.Security.Cryptography.AsymmetricAlgorithm.LegalKeySizes%2A>egenskapen.</xref:System.Security.Cryptography.AsymmetricAlgorithm.LegalKeySizes%2A>"
  example:
  - "The following code example demonstrates how to override the KeySize property to verify that it falls within the range identified in the local `keySizes` member variable. This code example is part of a larger example provided for the <xref:System.Security.Cryptography.AsymmetricAlgorithm> class.  \n  \n [!code-cs[System.Security.Cryptography.AsymmetricAlgorithm#9](~/add/codesnippet/csharp/p-system.security.crypto_112_1.cs)]\n [!code-cpp[System.Security.Cryptography.AsymmetricAlgorithm#9](~/add/codesnippet/cpp/p-system.security.crypto_112_1.cpp)]\n [!code-vb[System.Security.Cryptography.AsymmetricAlgorithm#9](~/add/codesnippet/visualbasic/p-system.security.crypto_112_1.vb)]"
  syntax:
    content: public virtual int KeySize { get; set; }
    return:
      type: System.Int32
      description: "Storlek i antal bitar viktiga modulus används av den asymmetriska algoritmen."
  overload: System.Security.Cryptography.AsymmetricAlgorithm.KeySize*
  exceptions:
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "Nyckelmodulstorleken är ogiltig."
  platform:
  - net462
- uid: System.Security.Cryptography.AsymmetricAlgorithm.KeySizeValue
  id: KeySizeValue
  parent: System.Security.Cryptography.AsymmetricAlgorithm
  langs:
  - csharp
  name: KeySizeValue
  nameWithType: AsymmetricAlgorithm.KeySizeValue
  fullName: System.Security.Cryptography.AsymmetricAlgorithm.KeySizeValue
  type: Field
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Representerar storlek i antal bitar viktiga modulus används av den asymmetriska algoritmen."
  remarks: "Giltig nyckel storlekar som anges av viss implementeringen av den asymmetriska algoritmen och visas i den <xref:System.Security.Cryptography.AsymmetricAlgorithm.LegalKeySizes%2A>egenskapen.</xref:System.Security.Cryptography.AsymmetricAlgorithm.LegalKeySizes%2A>       Det här fältet är tillgänglig via den <xref:System.Security.Cryptography.AsymmetricAlgorithm.KeySize%2A>egenskapen.</xref:System.Security.Cryptography.AsymmetricAlgorithm.KeySize%2A>"
  syntax:
    content: protected int KeySizeValue;
    return:
      type: System.Int32
      description: "Som ska läggas till."
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.AsymmetricAlgorithm.LegalKeySizes
  id: LegalKeySizes
  parent: System.Security.Cryptography.AsymmetricAlgorithm
  langs:
  - csharp
  name: LegalKeySizes
  nameWithType: AsymmetricAlgorithm.LegalKeySizes
  fullName: System.Security.Cryptography.AsymmetricAlgorithm.LegalKeySizes
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Hämtar de viktiga storlekar som stöds av den asymmetriska algoritmen."
  remarks: "Den asymmetriska algoritmen stöder endast viktiga storlekar som matchar en post i denna matris."
  example:
  - "The following code example demonstrates how to call the LegalKeySizes property to retrieve the <xref:System.Security.Cryptography.KeySizes.MinSize%2A>, <xref:System.Security.Cryptography.KeySizes.MaxSize%2A>, and <xref:System.Security.Cryptography.KeySizes.SkipSize%2A> properties. This code example is part of a larger example provided for the <xref:System.Security.Cryptography.AsymmetricAlgorithm> class.  \n  \n [!code-cs[System.Security.Cryptography.AsymmetricAlgorithm#10](~/add/codesnippet/csharp/p-system.security.crypto_30_1.cs)]\n [!code-vb[System.Security.Cryptography.AsymmetricAlgorithm#10](~/add/codesnippet/visualbasic/p-system.security.crypto_30_1.vb)]\n [!code-cpp[System.Security.Cryptography.AsymmetricAlgorithm#10](~/add/codesnippet/cpp/p-system.security.crypto_30_1.cpp)]"
  syntax:
    content: public virtual System.Security.Cryptography.KeySizes[] LegalKeySizes { get; }
    return:
      type: System.Security.Cryptography.KeySizes[]
      description: "En matris som innehåller viktiga storlekar som stöds av den asymmetriska algoritmen."
  overload: System.Security.Cryptography.AsymmetricAlgorithm.LegalKeySizes*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.AsymmetricAlgorithm.LegalKeySizesValue
  id: LegalKeySizesValue
  parent: System.Security.Cryptography.AsymmetricAlgorithm
  langs:
  - csharp
  name: LegalKeySizesValue
  nameWithType: AsymmetricAlgorithm.LegalKeySizesValue
  fullName: System.Security.Cryptography.AsymmetricAlgorithm.LegalKeySizesValue
  type: Field
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Anger de viktiga storlekar som stöds av den asymmetriska algoritmen."
  remarks: "Den asymmetriska algoritmen stöder endast viktiga storlekar som matchar en post i denna matris.       Det här fältet är tillgänglig via den <xref:System.Security.Cryptography.AsymmetricAlgorithm.LegalKeySizes%2A>egenskapen.</xref:System.Security.Cryptography.AsymmetricAlgorithm.LegalKeySizes%2A>"
  syntax:
    content: protected System.Security.Cryptography.KeySizes[] LegalKeySizesValue;
    return:
      type: System.Security.Cryptography.KeySizes[]
      description: "Som ska läggas till."
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.AsymmetricAlgorithm.SignatureAlgorithm
  id: SignatureAlgorithm
  parent: System.Security.Cryptography.AsymmetricAlgorithm
  langs:
  - csharp
  name: SignatureAlgorithm
  nameWithType: AsymmetricAlgorithm.SignatureAlgorithm
  fullName: System.Security.Cryptography.AsymmetricAlgorithm.SignatureAlgorithm
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Hämtar namnet på signaturalgoritmen implementeras i en härledd klass. Annars utlöser alltid <xref:System.NotImplementedException>.</xref:System.NotImplementedException>"
  remarks: ''
  example:
  - "The following code example demonstrates how to override the SignatureAlgorithm property to return the name of the signature algorithm. This code example is part of a larger example provided for the <xref:System.Security.Cryptography.AsymmetricAlgorithm> class.  \n  \n [!code-cs[System.Security.Cryptography.AsymmetricAlgorithm#7](~/add/codesnippet/csharp/p-system.security.crypto_43_1.cs)]\n [!code-cpp[System.Security.Cryptography.AsymmetricAlgorithm#7](~/add/codesnippet/cpp/p-system.security.crypto_43_1.cpp)]\n [!code-vb[System.Security.Cryptography.AsymmetricAlgorithm#7](~/add/codesnippet/visualbasic/p-system.security.crypto_43_1.vb)]"
  syntax:
    content: public virtual string SignatureAlgorithm { get; }
    return:
      type: System.String
      description: "Namnet på signaturalgoritmen."
  overload: System.Security.Cryptography.AsymmetricAlgorithm.SignatureAlgorithm*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.AsymmetricAlgorithm.ToXmlString(System.Boolean)
  id: ToXmlString(System.Boolean)
  parent: System.Security.Cryptography.AsymmetricAlgorithm
  langs:
  - csharp
  name: ToXmlString(Boolean)
  nameWithType: AsymmetricAlgorithm.ToXmlString(Boolean)
  fullName: System.Security.Cryptography.AsymmetricAlgorithm.ToXmlString(Boolean)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "När åsidosätts i härledda klassen skapas och returnerar en XML-sträng som innehåller aktuella <xref href=&quot;System.Security.Cryptography.AsymmetricAlgorithm&quot;> </xref> objekt. I annat fall utlöser <xref:System.NotImplementedException>.</xref:System.NotImplementedException>"
  remarks: ''
  example:
  - "The following code example demonstrates how to call the ToXmlString method to create an XML representation of the parameters in the current <xref:System.Security.Cryptography.AsymmetricAlgorithm> object. This code example is part of a larger example provided for the <xref:System.Security.Cryptography.AsymmetricAlgorithm> class.  \n  \n [!code-cs[System.Security.Cryptography.AsymmetricAlgorithm#5](~/add/codesnippet/csharp/m-system.security.crypto_109_1.cs)]\n [!code-cpp[System.Security.Cryptography.AsymmetricAlgorithm#5](~/add/codesnippet/cpp/m-system.security.crypto_109_1.cpp)]\n [!code-vb[System.Security.Cryptography.AsymmetricAlgorithm#5](~/add/codesnippet/visualbasic/m-system.security.crypto_109_1.vb)]"
  syntax:
    content: public virtual string ToXmlString (bool includePrivateParameters);
    parameters:
    - id: includePrivateParameters
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>att inkludera privata parametrar. Annars <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
    return:
      type: System.String
      description: "En XML-strängen kodning av aktuellt <xref href=&quot;System.Security.Cryptography.AsymmetricAlgorithm&quot;> </xref> objekt."
  overload: System.Security.Cryptography.AsymmetricAlgorithm.ToXmlString*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Security.Cryptography.CryptographicException
  parent: System.Security.Cryptography
  isExternal: false
  name: CryptographicException
  nameWithType: CryptographicException
  fullName: System.Security.Cryptography.CryptographicException
- uid: System.Security.Cryptography.AsymmetricAlgorithm.#ctor
  parent: System.Security.Cryptography.AsymmetricAlgorithm
  isExternal: false
  name: AsymmetricAlgorithm()
  nameWithType: AsymmetricAlgorithm.AsymmetricAlgorithm()
  fullName: System.Security.Cryptography.AsymmetricAlgorithm.AsymmetricAlgorithm()
- uid: System.Security.Cryptography.AsymmetricAlgorithm.Clear
  parent: System.Security.Cryptography.AsymmetricAlgorithm
  isExternal: false
  name: Clear()
  nameWithType: AsymmetricAlgorithm.Clear()
  fullName: System.Security.Cryptography.AsymmetricAlgorithm.Clear()
- uid: System.Security.Cryptography.AsymmetricAlgorithm.Create
  parent: System.Security.Cryptography.AsymmetricAlgorithm
  isExternal: false
  name: Create()
  nameWithType: AsymmetricAlgorithm.Create()
  fullName: System.Security.Cryptography.AsymmetricAlgorithm.Create()
- uid: System.Security.Cryptography.AsymmetricAlgorithm
  parent: System.Security.Cryptography
  isExternal: false
  name: AsymmetricAlgorithm
  nameWithType: AsymmetricAlgorithm
  fullName: System.Security.Cryptography.AsymmetricAlgorithm
- uid: System.Security.Cryptography.AsymmetricAlgorithm.Create(System.String)
  parent: System.Security.Cryptography.AsymmetricAlgorithm
  isExternal: false
  name: Create(String)
  nameWithType: AsymmetricAlgorithm.Create(String)
  fullName: System.Security.Cryptography.AsymmetricAlgorithm.Create(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Security.Cryptography.AsymmetricAlgorithm.Dispose
  parent: System.Security.Cryptography.AsymmetricAlgorithm
  isExternal: false
  name: Dispose()
  nameWithType: AsymmetricAlgorithm.Dispose()
  fullName: System.Security.Cryptography.AsymmetricAlgorithm.Dispose()
- uid: System.Security.Cryptography.AsymmetricAlgorithm.Dispose(System.Boolean)
  parent: System.Security.Cryptography.AsymmetricAlgorithm
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: AsymmetricAlgorithm.Dispose(Boolean)
  fullName: System.Security.Cryptography.AsymmetricAlgorithm.Dispose(Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Security.Cryptography.AsymmetricAlgorithm.FromXmlString(System.String)
  parent: System.Security.Cryptography.AsymmetricAlgorithm
  isExternal: false
  name: FromXmlString(String)
  nameWithType: AsymmetricAlgorithm.FromXmlString(String)
  fullName: System.Security.Cryptography.AsymmetricAlgorithm.FromXmlString(String)
- uid: System.Security.Cryptography.AsymmetricAlgorithm.KeyExchangeAlgorithm
  parent: System.Security.Cryptography.AsymmetricAlgorithm
  isExternal: false
  name: KeyExchangeAlgorithm
  nameWithType: AsymmetricAlgorithm.KeyExchangeAlgorithm
  fullName: System.Security.Cryptography.AsymmetricAlgorithm.KeyExchangeAlgorithm
- uid: System.Security.Cryptography.AsymmetricAlgorithm.KeySize
  parent: System.Security.Cryptography.AsymmetricAlgorithm
  isExternal: false
  name: KeySize
  nameWithType: AsymmetricAlgorithm.KeySize
  fullName: System.Security.Cryptography.AsymmetricAlgorithm.KeySize
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Security.Cryptography.AsymmetricAlgorithm.KeySizeValue
  parent: System.Security.Cryptography.AsymmetricAlgorithm
  isExternal: false
  name: KeySizeValue
  nameWithType: AsymmetricAlgorithm.KeySizeValue
  fullName: System.Security.Cryptography.AsymmetricAlgorithm.KeySizeValue
- uid: System.Security.Cryptography.AsymmetricAlgorithm.LegalKeySizes
  parent: System.Security.Cryptography.AsymmetricAlgorithm
  isExternal: false
  name: LegalKeySizes
  nameWithType: AsymmetricAlgorithm.LegalKeySizes
  fullName: System.Security.Cryptography.AsymmetricAlgorithm.LegalKeySizes
- uid: System.Security.Cryptography.KeySizes[]
  parent: System.Security.Cryptography
  isExternal: false
  name: KeySizes
  nameWithType: KeySizes
  fullName: System.Security.Cryptography.KeySizes[]
  spec.csharp:
  - uid: System.Security.Cryptography.KeySizes
    name: KeySizes
    nameWithType: KeySizes
    fullName: KeySizes[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Security.Cryptography.AsymmetricAlgorithm.LegalKeySizesValue
  parent: System.Security.Cryptography.AsymmetricAlgorithm
  isExternal: false
  name: LegalKeySizesValue
  nameWithType: AsymmetricAlgorithm.LegalKeySizesValue
  fullName: System.Security.Cryptography.AsymmetricAlgorithm.LegalKeySizesValue
- uid: System.Security.Cryptography.AsymmetricAlgorithm.SignatureAlgorithm
  parent: System.Security.Cryptography.AsymmetricAlgorithm
  isExternal: false
  name: SignatureAlgorithm
  nameWithType: AsymmetricAlgorithm.SignatureAlgorithm
  fullName: System.Security.Cryptography.AsymmetricAlgorithm.SignatureAlgorithm
- uid: System.Security.Cryptography.AsymmetricAlgorithm.ToXmlString(System.Boolean)
  parent: System.Security.Cryptography.AsymmetricAlgorithm
  isExternal: false
  name: ToXmlString(Boolean)
  nameWithType: AsymmetricAlgorithm.ToXmlString(Boolean)
  fullName: System.Security.Cryptography.AsymmetricAlgorithm.ToXmlString(Boolean)
- uid: System.Security.Cryptography.AsymmetricAlgorithm.#ctor*
  parent: System.Security.Cryptography.AsymmetricAlgorithm
  isExternal: false
  name: AsymmetricAlgorithm
  nameWithType: AsymmetricAlgorithm.AsymmetricAlgorithm
- uid: System.Security.Cryptography.AsymmetricAlgorithm.Clear*
  parent: System.Security.Cryptography.AsymmetricAlgorithm
  isExternal: false
  name: Clear
  nameWithType: AsymmetricAlgorithm.Clear
- uid: System.Security.Cryptography.AsymmetricAlgorithm.Create*
  parent: System.Security.Cryptography.AsymmetricAlgorithm
  isExternal: false
  name: Create
  nameWithType: AsymmetricAlgorithm.Create
- uid: System.Security.Cryptography.AsymmetricAlgorithm.Dispose*
  parent: System.Security.Cryptography.AsymmetricAlgorithm
  isExternal: false
  name: Dispose
  nameWithType: AsymmetricAlgorithm.Dispose
- uid: System.Security.Cryptography.AsymmetricAlgorithm.FromXmlString*
  parent: System.Security.Cryptography.AsymmetricAlgorithm
  isExternal: false
  name: FromXmlString
  nameWithType: AsymmetricAlgorithm.FromXmlString
- uid: System.Security.Cryptography.AsymmetricAlgorithm.KeyExchangeAlgorithm*
  parent: System.Security.Cryptography.AsymmetricAlgorithm
  isExternal: false
  name: KeyExchangeAlgorithm
  nameWithType: AsymmetricAlgorithm.KeyExchangeAlgorithm
- uid: System.Security.Cryptography.AsymmetricAlgorithm.KeySize*
  parent: System.Security.Cryptography.AsymmetricAlgorithm
  isExternal: false
  name: KeySize
  nameWithType: AsymmetricAlgorithm.KeySize
- uid: System.Security.Cryptography.AsymmetricAlgorithm.LegalKeySizes*
  parent: System.Security.Cryptography.AsymmetricAlgorithm
  isExternal: false
  name: LegalKeySizes
  nameWithType: AsymmetricAlgorithm.LegalKeySizes
- uid: System.Security.Cryptography.AsymmetricAlgorithm.SignatureAlgorithm*
  parent: System.Security.Cryptography.AsymmetricAlgorithm
  isExternal: false
  name: SignatureAlgorithm
  nameWithType: AsymmetricAlgorithm.SignatureAlgorithm
- uid: System.Security.Cryptography.AsymmetricAlgorithm.ToXmlString*
  parent: System.Security.Cryptography.AsymmetricAlgorithm
  isExternal: false
  name: ToXmlString
  nameWithType: AsymmetricAlgorithm.ToXmlString
