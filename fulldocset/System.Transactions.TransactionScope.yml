### YamlMime:ManagedReference
items:
- uid: System.Transactions.TransactionScope
  id: TransactionScope
  children:
  - System.Transactions.TransactionScope.#ctor
  - System.Transactions.TransactionScope.#ctor(System.Transactions.Transaction)
  - System.Transactions.TransactionScope.#ctor(System.Transactions.TransactionScopeAsyncFlowOption)
  - System.Transactions.TransactionScope.#ctor(System.Transactions.TransactionScopeOption)
  - System.Transactions.TransactionScope.#ctor(System.Transactions.Transaction,System.TimeSpan)
  - System.Transactions.TransactionScope.#ctor(System.Transactions.Transaction,System.Transactions.TransactionScopeAsyncFlowOption)
  - System.Transactions.TransactionScope.#ctor(System.Transactions.TransactionScopeOption,System.TimeSpan)
  - System.Transactions.TransactionScope.#ctor(System.Transactions.TransactionScopeOption,System.Transactions.TransactionOptions)
  - System.Transactions.TransactionScope.#ctor(System.Transactions.TransactionScopeOption,System.Transactions.TransactionScopeAsyncFlowOption)
  - System.Transactions.TransactionScope.#ctor(System.Transactions.Transaction,System.TimeSpan,System.Transactions.EnterpriseServicesInteropOption)
  - System.Transactions.TransactionScope.#ctor(System.Transactions.Transaction,System.TimeSpan,System.Transactions.TransactionScopeAsyncFlowOption)
  - System.Transactions.TransactionScope.#ctor(System.Transactions.TransactionScopeOption,System.TimeSpan,System.Transactions.TransactionScopeAsyncFlowOption)
  - System.Transactions.TransactionScope.#ctor(System.Transactions.TransactionScopeOption,System.Transactions.TransactionOptions,System.Transactions.EnterpriseServicesInteropOption)
  - System.Transactions.TransactionScope.#ctor(System.Transactions.TransactionScopeOption,System.Transactions.TransactionOptions,System.Transactions.TransactionScopeAsyncFlowOption)
  - System.Transactions.TransactionScope.Complete
  - System.Transactions.TransactionScope.Dispose
  langs:
  - csharp
  name: TransactionScope
  nameWithType: TransactionScope
  fullName: System.Transactions.TransactionScope
  type: Class
  summary: "Gör ett kodblock transaktionella. Den här klassen kan inte ärvas."
  remarks: "Den <xref:System.Transactions>infrastruktur tillhandahåller både en explicit programmeringsmodell baserat på den <xref:System.Transactions.Transaction>klass, samt en implicit programmeringsmodell med hjälp av klassen TransactionScope som hanteras automatiskt transaktioner av infrastrukturen.</xref:System.Transactions.Transaction> </xref:System.Transactions>      > [!IMPORTANT] > Rekommenderas att du skapar implicit transaktioner med hjälp av klassen TransactionScope så att den omgivande transaktionskontexten hanteras automatiskt åt dig. Du bör också använda TransactionScope och <xref:System.Transactions.DependentTransaction>klass för program som kräver användning av samma transaktion i flera funktionsanrop eller flera tråd anrop.</xref:System.Transactions.DependentTransaction> Mer information om den här modellen finns i [implementera en Implicit transaktion med transaktionsomfånget](http://msdn.microsoft.com/en-us/1ddba95e-7587-48b2-8838-708c275e7199) avsnittet. Mer information om hur du skriver en tillämpning finns [skriva A tillämpningen](http://msdn.microsoft.com/en-us/4a7cc4d1-0891-4605-941f-a933b9ce5bc8).       När en instans skapades av ett TransactionScope av den `new` instruktionen transaktionshanteraren anger vilken transaktion att delta i. När bestämmas deltar omfånget alltid i den aktuella transaktionen. Beslutet baseras på två faktorer: om det finns en omgivande transaktion och värdet för den `TransactionScopeOption` parametern i konstruktorn.  Den omgivande transaktionen är koden körs i transaktionen. Du kan hämta en referens till den omgivande transaktionen genom att anropa statisk <xref:System.Transactions.Transaction.Current%2A>egenskap för <xref:System.Transactions.Transaction>klass.</xref:System.Transactions.Transaction> </xref:System.Transactions.Transaction.Current%2A> Mer information om hur den här parametern används finns i avsnittet &quot;Transaktionen flödas Management&quot; i den [implementera en Implicit transaktion med transaktionsomfånget](http://msdn.microsoft.com/en-us/1ddba95e-7587-48b2-8838-708c275e7199) avsnittet.       Om inget undantag uppstår inom transaktionsomfånget (som är mellan initieringen av TransactionScope objektet och anropas av dess <xref:System.Transactions.TransactionScope.Dispose%2A>metod), och sedan transaktionen som omfattningen deltar tillåts fortsätta.</xref:System.Transactions.TransactionScope.Dispose%2A> Om ett undantag sker inom transaktionsomfånget kommer transaktionen som det är en del att återställas.       När programmet har slutförts allt arbete som ska utföras i en transaktion, du bör kontakta den <xref:System.Transactions.TransactionScope.Complete%2A>metoden bara en gång för att informera den transaktionshanteraren att den är godkänd för att genomföra transaktionen.</xref:System.Transactions.TransactionScope.Complete%2A> Att anropa den här metoden inte avbryta transaktionen.       Ett anrop till den <xref:System.Transactions.TransactionScope.Dispose%2A>metoden markerar slutet på transaktionsomfånget.</xref:System.Transactions.TransactionScope.Dispose%2A> Undantag som uppstår när du anropar den här metoden kan inte påverka transaktionen.       Om du ändrar du värdet för <xref:System.Transactions.Transaction.Current%2A>inuti ett område, genereras ett undantag när <xref:System.Transactions.TransactionScope.Dispose%2A>anropas.</xref:System.Transactions.TransactionScope.Dispose%2A> </xref:System.Transactions.Transaction.Current%2A> Men i slutet av området återställs föregående värde. Dessutom, om du anropar <xref:System.Transactions.TransactionScope.Dispose%2A>på <xref:System.Transactions.Transaction.Current%2A>inuti ett transaktionsområde som skapade transaktionen, avbryter transaktionen i slutet av området.</xref:System.Transactions.Transaction.Current%2A> </xref:System.Transactions.TransactionScope.Dispose%2A>"
  example:
  - "The following example demonstrates how to use the TransactionScope class to define a block of code to participate in a transaction.  \n  \n [!code-vb[TransactionScope#1](~/add/codesnippet/visualbasic/t-system.transactions.tr_0_1.vb)]\n [!code-cs[TransactionScope#1](~/add/codesnippet/csharp/t-system.transactions.tr_0_1.cs)]"
  syntax:
    content: 'public sealed class TransactionScope : IDisposable'
  inheritance:
  - System.Object
  implements:
  - System.IDisposable
  inheritedMembers: []
  platform:
  - net462
- uid: System.Transactions.TransactionScope.#ctor
  id: '#ctor'
  parent: System.Transactions.TransactionScope
  langs:
  - csharp
  name: TransactionScope()
  nameWithType: TransactionScope.TransactionScope()
  fullName: System.Transactions.TransactionScope.TransactionScope()
  type: Constructor
  assemblies:
  - System.Transactions
  namespace: System.Transactions
  summary: "Initierar en ny instans av den <xref href=&quot;System.Transactions.TransactionScope&quot;> </xref> klass."
  remarks: "Den här konstruktorn skapar ett nytt transaktionsomfång med alternativet transaktion scope lika med <xref:System.Transactions.TransactionScopeOption>.</xref:System.Transactions.TransactionScopeOption> Detta innebär att en transaktion krävs av nytt scope och den omgivande transaktionen används om det redan finns. I annat fall skapas en ny transaktion innan du anger omfång."
  syntax:
    content: public TransactionScope ();
    parameters: []
  overload: System.Transactions.TransactionScope.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Transactions.TransactionScope.#ctor(System.Transactions.Transaction)
  id: '#ctor(System.Transactions.Transaction)'
  parent: System.Transactions.TransactionScope
  langs:
  - csharp
  name: TransactionScope(Transaction)
  nameWithType: TransactionScope.TransactionScope(Transaction)
  fullName: System.Transactions.TransactionScope.TransactionScope(Transaction)
  type: Constructor
  assemblies:
  - System.Transactions
  namespace: System.Transactions
  summary: "Initierar en ny instans av den <xref href=&quot;System.Transactions.TransactionScope&quot;> </xref> klassen och anger den angivna transaktionen som den omgivande transaktionen så att transaktionella arbete inuti scope använder den här transaktionen."
  syntax:
    content: public TransactionScope (System.Transactions.Transaction transactionToUse);
    parameters:
    - id: transactionToUse
      type: System.Transactions.Transaction
      description: "Transaktionen som anges som den omgivande transaktionen så att transaktionella arbete inuti scope använder den här transaktionen."
  overload: System.Transactions.TransactionScope.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Transactions.TransactionScope.#ctor(System.Transactions.TransactionScopeAsyncFlowOption)
  id: '#ctor(System.Transactions.TransactionScopeAsyncFlowOption)'
  parent: System.Transactions.TransactionScope
  langs:
  - csharp
  name: TransactionScope(TransactionScopeAsyncFlowOption)
  nameWithType: TransactionScope.TransactionScope(TransactionScopeAsyncFlowOption)
  fullName: System.Transactions.TransactionScope.TransactionScope(TransactionScopeAsyncFlowOption)
  type: Constructor
  assemblies:
  - System.Transactions
  namespace: System.Transactions
  summary: "[Stöds i .NET Framework 4.5.1 och senare versioner]       Initierar en ny instans av den <xref href=&quot;System.Transactions.TransactionScope&quot;> </xref> klass med alternativet angivna asynkront flöde."
  syntax:
    content: public TransactionScope (System.Transactions.TransactionScopeAsyncFlowOption asyncFlowOption);
    parameters:
    - id: asyncFlowOption
      type: System.Transactions.TransactionScopeAsyncFlowOption
      description: "En instans av den <xref href=&quot;System.Transactions.TransactionScopeAsyncFlowOption&quot;> </xref> uppräkning som beskriver om den omgivande transaktionen som är associerade med transaktionsomfånget flödar över tråd återupptagande när du använder aktiviteten eller asynkrona/await .NET asynkron programmering mönster."
  overload: System.Transactions.TransactionScope.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Transactions.TransactionScope.#ctor(System.Transactions.TransactionScopeOption)
  id: '#ctor(System.Transactions.TransactionScopeOption)'
  parent: System.Transactions.TransactionScope
  langs:
  - csharp
  name: TransactionScope(TransactionScopeOption)
  nameWithType: TransactionScope.TransactionScope(TransactionScopeOption)
  fullName: System.Transactions.TransactionScope.TransactionScope(TransactionScopeOption)
  type: Constructor
  assemblies:
  - System.Transactions
  namespace: System.Transactions
  summary: "Initierar en ny instans av den <xref href=&quot;System.Transactions.TransactionScope&quot;> </xref> klass med de angivna kraven."
  syntax:
    content: public TransactionScope (System.Transactions.TransactionScopeOption scopeOption);
    parameters:
    - id: scopeOption
      type: System.Transactions.TransactionScopeOption
      description: "En instans av den <xref href=&quot;System.Transactions.TransactionScopeOption&quot;> </xref> uppräkning som beskriver transaktionen som är associerade med den här transaktionen omfattning."
  overload: System.Transactions.TransactionScope.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Transactions.TransactionScope.#ctor(System.Transactions.Transaction,System.TimeSpan)
  id: '#ctor(System.Transactions.Transaction,System.TimeSpan)'
  parent: System.Transactions.TransactionScope
  langs:
  - csharp
  name: TransactionScope(Transaction,TimeSpan)
  nameWithType: TransactionScope.TransactionScope(Transaction,TimeSpan)
  fullName: System.Transactions.TransactionScope.TransactionScope(Transaction,TimeSpan)
  type: Constructor
  assemblies:
  - System.Transactions
  namespace: System.Transactions
  summary: "Initierar en ny instans av den <xref href=&quot;System.Transactions.TransactionScope&quot;> </xref> klass med det angivna tidsgränsvärdet och ställer in den angivna transaktionen som den omgivande transaktionen så att transaktionella arbete inuti scope använder den här transaktionen."
  syntax:
    content: public TransactionScope (System.Transactions.Transaction transactionToUse, TimeSpan scopeTimeout);
    parameters:
    - id: transactionToUse
      type: System.Transactions.Transaction
      description: "Transaktionen som anges som den omgivande transaktionen så att transaktionella arbete inuti scope använder den här transaktionen."
    - id: scopeTimeout
      type: System.TimeSpan
      description: "Den <xref:System.TimeSpan>efter vilken transaktionsomfånget timeout och avbryter transaktionen.</xref:System.TimeSpan>"
  overload: System.Transactions.TransactionScope.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Transactions.TransactionScope.#ctor(System.Transactions.Transaction,System.Transactions.TransactionScopeAsyncFlowOption)
  id: '#ctor(System.Transactions.Transaction,System.Transactions.TransactionScopeAsyncFlowOption)'
  parent: System.Transactions.TransactionScope
  langs:
  - csharp
  name: TransactionScope(Transaction,TransactionScopeAsyncFlowOption)
  nameWithType: TransactionScope.TransactionScope(Transaction,TransactionScopeAsyncFlowOption)
  fullName: System.Transactions.TransactionScope.TransactionScope(Transaction,TransactionScopeAsyncFlowOption)
  type: Constructor
  assemblies:
  - System.Transactions
  namespace: System.Transactions
  summary: "[Stöds i .NET Framework 4.5.1 och senare versioner]       Initierar en ny instans av den <xref href=&quot;System.Transactions.TransactionScope&quot;> </xref> klassen och anger den angivna transaktionen som den omgivande transaktionen så att transaktionella arbete inuti scope använder den här transaktionen."
  syntax:
    content: public TransactionScope (System.Transactions.Transaction transactionToUse, System.Transactions.TransactionScopeAsyncFlowOption asyncFlowOption);
    parameters:
    - id: transactionToUse
      type: System.Transactions.Transaction
      description: "Transaktionen som anges som den omgivande transaktionen så att transaktionella arbete inuti scope använder den här transaktionen."
    - id: asyncFlowOption
      type: System.Transactions.TransactionScopeAsyncFlowOption
      description: "En instans av den <xref href=&quot;System.Transactions.TransactionScopeAsyncFlowOption&quot;> </xref> uppräkning som beskriver om den omgivande transaktionen som är associerade med transaktionsomfånget flödar över tråd återupptagande när du använder aktiviteten eller asynkrona/await .NET asynkron programmering mönster."
  overload: System.Transactions.TransactionScope.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Transactions.TransactionScope.#ctor(System.Transactions.TransactionScopeOption,System.TimeSpan)
  id: '#ctor(System.Transactions.TransactionScopeOption,System.TimeSpan)'
  parent: System.Transactions.TransactionScope
  langs:
  - csharp
  name: TransactionScope(TransactionScopeOption,TimeSpan)
  nameWithType: TransactionScope.TransactionScope(TransactionScopeOption,TimeSpan)
  fullName: System.Transactions.TransactionScope.TransactionScope(TransactionScopeOption,TimeSpan)
  type: Constructor
  assemblies:
  - System.Transactions
  namespace: System.Transactions
  summary: "Initierar en ny instans av den <xref href=&quot;System.Transactions.TransactionScope&quot;> </xref> klass med de angivna timeout-värdet och krav."
  syntax:
    content: public TransactionScope (System.Transactions.TransactionScopeOption scopeOption, TimeSpan scopeTimeout);
    parameters:
    - id: scopeOption
      type: System.Transactions.TransactionScopeOption
      description: "En instans av den <xref href=&quot;System.Transactions.TransactionScopeOption&quot;> </xref> uppräkning som beskriver transaktionen som är associerade med den här transaktionen omfattning."
    - id: scopeTimeout
      type: System.TimeSpan
      description: "Den <xref:System.TimeSpan>efter vilken transaktionsomfånget timeout och avbryter transaktionen.</xref:System.TimeSpan>"
  overload: System.Transactions.TransactionScope.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Transactions.TransactionScope.#ctor(System.Transactions.TransactionScopeOption,System.Transactions.TransactionOptions)
  id: '#ctor(System.Transactions.TransactionScopeOption,System.Transactions.TransactionOptions)'
  parent: System.Transactions.TransactionScope
  langs:
  - csharp
  name: TransactionScope(TransactionScopeOption,TransactionOptions)
  nameWithType: TransactionScope.TransactionScope(TransactionScopeOption,TransactionOptions)
  fullName: System.Transactions.TransactionScope.TransactionScope(TransactionScopeOption,TransactionOptions)
  type: Constructor
  assemblies:
  - System.Transactions
  namespace: System.Transactions
  summary: "Initierar en ny instans av den <xref href=&quot;System.Transactions.TransactionScope&quot;> </xref> klass med de angivna kraven."
  remarks: "När du använder den `transactionOptions` parametern för att ange en <xref:System.Transactions.IsolationLevel>, och omfång skapar en transaktion senare, den nya transaktionen är associerad med den angivna Isoleringsnivån.</xref:System.Transactions.IsolationLevel> Om en isoleringsnivå som skickas tillsammans med en transaktion, transaktionen måste ha en identisk isoleringsnivå eller ett undantag."
  syntax:
    content: public TransactionScope (System.Transactions.TransactionScopeOption scopeOption, System.Transactions.TransactionOptions transactionOptions);
    parameters:
    - id: scopeOption
      type: System.Transactions.TransactionScopeOption
      description: "En instans av den <xref href=&quot;System.Transactions.TransactionScopeOption&quot;> </xref> uppräkning som beskriver transaktionen som är associerade med den här transaktionen omfattning."
    - id: transactionOptions
      type: System.Transactions.TransactionOptions
      description: "En <xref href=&quot;System.Transactions.TransactionOptions&quot;> </xref> struktur som beskriver transaktionsalternativ ska användas om en ny transaktion skapas. Om en befintlig transaktion används gäller timeout-värde i den här parametern transaktions-scope. Transaktionen avbryts om denna tid går ut innan omfånget tas bort."
  overload: System.Transactions.TransactionScope.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Transactions.TransactionScope.#ctor(System.Transactions.TransactionScopeOption,System.Transactions.TransactionScopeAsyncFlowOption)
  id: '#ctor(System.Transactions.TransactionScopeOption,System.Transactions.TransactionScopeAsyncFlowOption)'
  parent: System.Transactions.TransactionScope
  langs:
  - csharp
  name: TransactionScope(TransactionScopeOption,TransactionScopeAsyncFlowOption)
  nameWithType: TransactionScope.TransactionScope(TransactionScopeOption,TransactionScopeAsyncFlowOption)
  fullName: System.Transactions.TransactionScope.TransactionScope(TransactionScopeOption,TransactionScopeAsyncFlowOption)
  type: Constructor
  assemblies:
  - System.Transactions
  namespace: System.Transactions
  summary: "[Stöds i .NET Framework 4.5.1 och senare versioner]       Initierar en ny instans av den <xref href=&quot;System.Transactions.TransactionScope&quot;> </xref> klass med de angivna kraven och asynkront flöde alternativet."
  syntax:
    content: public TransactionScope (System.Transactions.TransactionScopeOption scopeOption, System.Transactions.TransactionScopeAsyncFlowOption asyncFlowOption);
    parameters:
    - id: scopeOption
      type: System.Transactions.TransactionScopeOption
      description: "En instans av den <xref href=&quot;System.Transactions.TransactionScopeOption&quot;> </xref> uppräkning som beskriver transaktionen som är associerade med den här transaktionen omfattning."
    - id: asyncFlowOption
      type: System.Transactions.TransactionScopeAsyncFlowOption
      description: "En instans av den <xref href=&quot;System.Transactions.TransactionScopeAsyncFlowOption&quot;> </xref> uppräkning som beskriver om den omgivande transaktionen som är associerade med transaktionsomfånget flödar över tråd återupptagande när du använder aktiviteten eller asynkrona/await .NET asynkron programmering mönster."
  overload: System.Transactions.TransactionScope.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Transactions.TransactionScope.#ctor(System.Transactions.Transaction,System.TimeSpan,System.Transactions.EnterpriseServicesInteropOption)
  id: '#ctor(System.Transactions.Transaction,System.TimeSpan,System.Transactions.EnterpriseServicesInteropOption)'
  parent: System.Transactions.TransactionScope
  langs:
  - csharp
  name: TransactionScope(Transaction,TimeSpan,EnterpriseServicesInteropOption)
  nameWithType: TransactionScope.TransactionScope(Transaction,TimeSpan,EnterpriseServicesInteropOption)
  fullName: System.Transactions.TransactionScope.TransactionScope(Transaction,TimeSpan,EnterpriseServicesInteropOption)
  type: Constructor
  assemblies:
  - System.Transactions
  namespace: System.Transactions
  summary: "Initierar en ny instans av den <xref href=&quot;System.Transactions.TransactionScope&quot;> </xref> klass med de angivna timeout-värdet och COM + samverkanskrav, och ställer in den angivna transaktionen som den omgivande transaktionen så att transaktionella arbete inuti scope använder den här transaktionen."
  remarks: '**Obs** den här metoden använder <xref:System.Security.Permissions.SecurityAction>att förhindra att anropas från icke betrodd kod; dock endast omedelbar anropare krävs för att inneha den `FullTrust` behörighetsgruppen.</xref:System.Security.Permissions.SecurityAction>'
  syntax:
    content: public TransactionScope (System.Transactions.Transaction transactionToUse, TimeSpan scopeTimeout, System.Transactions.EnterpriseServicesInteropOption interopOption);
    parameters:
    - id: transactionToUse
      type: System.Transactions.Transaction
      description: "Transaktionen som anges som den omgivande transaktionen så att transaktionella arbete inuti scope använder den här transaktionen."
    - id: scopeTimeout
      type: System.TimeSpan
      description: "Den <xref:System.TimeSpan>efter vilken transaktionsomfånget timeout och avbryter transaktionen.</xref:System.TimeSpan>"
    - id: interopOption
      type: System.Transactions.EnterpriseServicesInteropOption
      description: "En instans av den <xref href=&quot;System.Transactions.EnterpriseServicesInteropOption&quot;> </xref> uppräkning som beskriver hur den associerade transaktionen samverkar med COM +-transaktioner."
  overload: System.Transactions.TransactionScope.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Transactions.TransactionScope.#ctor(System.Transactions.Transaction,System.TimeSpan,System.Transactions.TransactionScopeAsyncFlowOption)
  id: '#ctor(System.Transactions.Transaction,System.TimeSpan,System.Transactions.TransactionScopeAsyncFlowOption)'
  parent: System.Transactions.TransactionScope
  langs:
  - csharp
  name: TransactionScope(Transaction,TimeSpan,TransactionScopeAsyncFlowOption)
  nameWithType: TransactionScope.TransactionScope(Transaction,TimeSpan,TransactionScopeAsyncFlowOption)
  fullName: System.Transactions.TransactionScope.TransactionScope(Transaction,TimeSpan,TransactionScopeAsyncFlowOption)
  type: Constructor
  assemblies:
  - System.Transactions
  namespace: System.Transactions
  summary: "[Stöds i .NET Framework 4.5.1 och senare versioner]       Initierar en ny instans av den <xref href=&quot;System.Transactions.TransactionScope&quot;> </xref> klass med det angivna tidsgränsvärdet och ställer in den angivna transaktionen som den omgivande transaktionen så att transaktionella arbete inuti scope använder den här transaktionen."
  syntax:
    content: public TransactionScope (System.Transactions.Transaction transactionToUse, TimeSpan scopeTimeout, System.Transactions.TransactionScopeAsyncFlowOption asyncFlowOption);
    parameters:
    - id: transactionToUse
      type: System.Transactions.Transaction
      description: "Transaktionen som anges som den omgivande transaktionen så att transaktionella arbete inuti scope använder den här transaktionen."
    - id: scopeTimeout
      type: System.TimeSpan
      description: "Den <xref:System.TimeSpan>efter vilken transaktionsomfånget timeout och avbryter transaktionen.</xref:System.TimeSpan>"
    - id: asyncFlowOption
      type: System.Transactions.TransactionScopeAsyncFlowOption
      description: "En instans av den <xref href=&quot;System.Transactions.TransactionScopeAsyncFlowOption&quot;> </xref> uppräkning som beskriver om den omgivande transaktionen som är associerade med transaktionsomfånget flödar över tråd återupptagande när du använder aktiviteten eller asynkrona/await .NET asynkron programmering mönster."
  overload: System.Transactions.TransactionScope.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Transactions.TransactionScope.#ctor(System.Transactions.TransactionScopeOption,System.TimeSpan,System.Transactions.TransactionScopeAsyncFlowOption)
  id: '#ctor(System.Transactions.TransactionScopeOption,System.TimeSpan,System.Transactions.TransactionScopeAsyncFlowOption)'
  parent: System.Transactions.TransactionScope
  langs:
  - csharp
  name: TransactionScope(TransactionScopeOption,TimeSpan,TransactionScopeAsyncFlowOption)
  nameWithType: TransactionScope.TransactionScope(TransactionScopeOption,TimeSpan,TransactionScopeAsyncFlowOption)
  fullName: System.Transactions.TransactionScope.TransactionScope(TransactionScopeOption,TimeSpan,TransactionScopeAsyncFlowOption)
  type: Constructor
  assemblies:
  - System.Transactions
  namespace: System.Transactions
  summary: "[Stöds i .NET Framework 4.5.1 och senare versioner]       Initierar en ny instans av den <xref href=&quot;System.Transactions.TransactionScope&quot;> </xref> klass med angivna timeout-värde, krav och asynkront flöde alternativet."
  syntax:
    content: public TransactionScope (System.Transactions.TransactionScopeOption scopeOption, TimeSpan scopeTimeout, System.Transactions.TransactionScopeAsyncFlowOption asyncFlowOption);
    parameters:
    - id: scopeOption
      type: System.Transactions.TransactionScopeOption
      description: "En instans av den <xref href=&quot;System.Transactions.TransactionScopeOption&quot;> </xref> uppräkning som beskriver transaktionen som är associerade med den här transaktionen omfattning."
    - id: scopeTimeout
      type: System.TimeSpan
      description: "Den <xref:System.TimeSpan>efter vilken transaktionsomfånget timeout och avbryter transaktionen.</xref:System.TimeSpan>"
    - id: asyncFlowOption
      type: System.Transactions.TransactionScopeAsyncFlowOption
      description: "En instans av den <xref href=&quot;System.Transactions.TransactionScopeAsyncFlowOption&quot;> </xref> uppräkning som beskriver om den omgivande transaktionen som är associerade med transaktionsomfånget flödar över tråd återupptagande när du använder aktiviteten eller asynkrona/await .NET asynkron programmering mönster."
  overload: System.Transactions.TransactionScope.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Transactions.TransactionScope.#ctor(System.Transactions.TransactionScopeOption,System.Transactions.TransactionOptions,System.Transactions.EnterpriseServicesInteropOption)
  id: '#ctor(System.Transactions.TransactionScopeOption,System.Transactions.TransactionOptions,System.Transactions.EnterpriseServicesInteropOption)'
  parent: System.Transactions.TransactionScope
  langs:
  - csharp
  name: TransactionScope(TransactionScopeOption,TransactionOptions,EnterpriseServicesInteropOption)
  nameWithType: TransactionScope.TransactionScope(TransactionScopeOption,TransactionOptions,EnterpriseServicesInteropOption)
  fullName: System.Transactions.TransactionScope.TransactionScope(TransactionScopeOption,TransactionOptions,EnterpriseServicesInteropOption)
  type: Constructor
  assemblies:
  - System.Transactions
  namespace: System.Transactions
  summary: "Initierar en ny instans av den <xref href=&quot;System.Transactions.TransactionScope&quot;> </xref> klass med angivet omfång och COM +-samverkanskrav och transaktionsalternativ."
  remarks: "När du använder den `transactionOptions` parametern för att ange en <xref:System.Transactions.IsolationLevel>, och omfång skapar en transaktion senare, den nya transaktionen är associerad med den angivna Isoleringsnivån.</xref:System.Transactions.IsolationLevel> Om en isoleringsnivå som skickas tillsammans med en transaktion, transaktionen måste ha en identisk isoleringsnivå eller ett undantag.       **Obs** den här metoden använder <xref:System.Security.Permissions.SecurityAction>att förhindra att anropas från icke betrodd kod; dock endast omedelbar anropare krävs för att inneha den `FullTrust` behörighetsgruppen.</xref:System.Security.Permissions.SecurityAction>"
  syntax:
    content: public TransactionScope (System.Transactions.TransactionScopeOption scopeOption, System.Transactions.TransactionOptions transactionOptions, System.Transactions.EnterpriseServicesInteropOption interopOption);
    parameters:
    - id: scopeOption
      type: System.Transactions.TransactionScopeOption
      description: "En instans av den <xref href=&quot;System.Transactions.TransactionScopeOption&quot;> </xref> uppräkning som beskriver transaktionen som är associerade med den här transaktionen omfattning."
    - id: transactionOptions
      type: System.Transactions.TransactionOptions
      description: "En <xref href=&quot;System.Transactions.TransactionOptions&quot;> </xref> struktur som beskriver transaktionsalternativ ska användas om en ny transaktion skapas. Om en befintlig transaktion används gäller timeout-värde i den här parametern transaktions-scope. Transaktionen avbryts om denna tid går ut innan omfånget tas bort."
    - id: interopOption
      type: System.Transactions.EnterpriseServicesInteropOption
      description: "En instans av den <xref href=&quot;System.Transactions.EnterpriseServicesInteropOption&quot;> </xref> uppräkning som beskriver hur den associerade transaktionen samverkar med COM +-transaktioner."
  overload: System.Transactions.TransactionScope.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Transactions.TransactionScope.#ctor(System.Transactions.TransactionScopeOption,System.Transactions.TransactionOptions,System.Transactions.TransactionScopeAsyncFlowOption)
  id: '#ctor(System.Transactions.TransactionScopeOption,System.Transactions.TransactionOptions,System.Transactions.TransactionScopeAsyncFlowOption)'
  parent: System.Transactions.TransactionScope
  langs:
  - csharp
  name: TransactionScope(TransactionScopeOption,TransactionOptions,TransactionScopeAsyncFlowOption)
  nameWithType: TransactionScope.TransactionScope(TransactionScopeOption,TransactionOptions,TransactionScopeAsyncFlowOption)
  fullName: System.Transactions.TransactionScope.TransactionScope(TransactionScopeOption,TransactionOptions,TransactionScopeAsyncFlowOption)
  type: Constructor
  assemblies:
  - System.Transactions
  namespace: System.Transactions
  summary: "[Stöds i .NET Framework 4.5.1 och senare versioner]       Initierar en ny instans av den <xref href=&quot;System.Transactions.TransactionScope&quot;> </xref> klass med de angivna kraven och asynkront flöde alternativet."
  syntax:
    content: public TransactionScope (System.Transactions.TransactionScopeOption scopeOption, System.Transactions.TransactionOptions transactionOptions, System.Transactions.TransactionScopeAsyncFlowOption asyncFlowOption);
    parameters:
    - id: scopeOption
      type: System.Transactions.TransactionScopeOption
      description: "En instans av den <xref href=&quot;System.Transactions.TransactionScopeOption&quot;> </xref> uppräkning som beskriver transaktionen som är associerade med den här transaktionen omfattning."
    - id: transactionOptions
      type: System.Transactions.TransactionOptions
      description: "En <xref href=&quot;System.Transactions.TransactionOptions&quot;> </xref> struktur som beskriver transaktionsalternativ ska användas om en ny transaktion skapas. Om en befintlig transaktion används gäller timeout-värde i den här parametern transaktions-scope. Transaktionen avbryts om denna tid går ut innan omfånget tas bort."
    - id: asyncFlowOption
      type: System.Transactions.TransactionScopeAsyncFlowOption
      description: "En instans av den <xref href=&quot;System.Transactions.TransactionScopeAsyncFlowOption&quot;> </xref> uppräkning som beskriver om den omgivande transaktionen som är associerade med transaktionsomfånget flödar över tråd återupptagande när du använder aktiviteten eller asynkrona/await .NET asynkron programmering mönster."
  overload: System.Transactions.TransactionScope.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Transactions.TransactionScope.Complete
  id: Complete
  parent: System.Transactions.TransactionScope
  langs:
  - csharp
  name: Complete()
  nameWithType: TransactionScope.Complete()
  fullName: System.Transactions.TransactionScope.Complete()
  type: Method
  assemblies:
  - System.Transactions
  namespace: System.Transactions
  summary: "Anger att alla åtgärder inom omfånget har slutförts."
  remarks: "När du är nöjd att alla åtgärder inom omfånget har slutförts, bör du anropa den här metoden bara en gång för att informera den transaktionshanteraren att tillståndet för alla resurser är konsekvent och transaktionen inte kan verkställas. Är det mycket bra idé att placera anropet som den sista instruktionen i det `using` block.       Mer information om hur den här metoden används finns i [implementera en Implicit transaktion med transaktionsomfånget](http://msdn.microsoft.com/en-us/1ddba95e-7587-48b2-8838-708c275e7199) avsnittet.       Att anropa den här metoden inte avbryta transaktionen, eftersom transaktionshanteraren tolkar det som ett systemfel eller undantag inom omfånget för transaktionen. Du bör också Observera dock att om du anropar den här metoden inte garanterar ett genomförande av transaktionen. Det är bara ett sätt att informera transaktionshanterare av din status. När du anropar den här metoden kan du inte längre komma åt den omgivande transaktionen via den <xref:System.Transactions.Transaction.Current%2A>egenskapen och försök att göra så resulterar i ett undantag som genereras.</xref:System.Transactions.Transaction.Current%2A>       Det faktiska arbetet i commit mellan resurser manager sker på de `End Using` instruktionen om den <xref:System.Transactions.TransactionScope>objektet som skapade transaktionen.</xref:System.Transactions.TransactionScope> Om det inte har skapat transaktionen sker genomförandet när <xref:System.Transactions.CommittableTransaction.Commit%2A>anropas av ägaren av det <xref:System.Transactions.CommittableTransaction>objektet.</xref:System.Transactions.CommittableTransaction> </xref:System.Transactions.CommittableTransaction.Commit%2A> Då transaktionshanteraren anropar resursen chefer och informerar dem om att antingen bekräfta eller ångra, baserat på om den här metoden anropades på den <xref:System.Transactions.TransactionScope>objekt.</xref:System.Transactions.TransactionScope>"
  example:
  - "The following example demonstrates how to use the <xref:System.Transactions.TransactionScope> class to define a block of code to participate in a transaction.  \n  \n [!code-vb[TransactionScope#1](~/add/codesnippet/visualbasic/m-system.transactions.tr_1_1.vb)]\n [!code-cs[TransactionScope#1](~/add/codesnippet/csharp/m-system.transactions.tr_1_1.cs)]"
  syntax:
    content: public void Complete ();
    parameters: []
  overload: System.Transactions.TransactionScope.Complete*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Den här metoden har redan anropats en gång."
  platform:
  - net462
- uid: System.Transactions.TransactionScope.Dispose
  id: Dispose
  parent: System.Transactions.TransactionScope
  langs:
  - csharp
  name: Dispose()
  nameWithType: TransactionScope.Dispose()
  fullName: System.Transactions.TransactionScope.Dispose()
  type: Method
  assemblies:
  - System.Transactions
  namespace: System.Transactions
  summary: "Slutar transaktions-scope."
  remarks: "Den här metoden anropas markerar slutet på transaktions-scope. Om den <xref:System.Transactions.TransactionScope>objektet skapade transaktionen och <xref:System.Transactions.TransactionScope.Complete%2A>anropades i omfattningen, den <xref:System.Transactions.TransactionScope>objekt försöker genomföra transaktionen när den här metoden anropas.</xref:System.Transactions.TransactionScope> </xref:System.Transactions.TransactionScope.Complete%2A> </xref:System.Transactions.TransactionScope>       Användning av C# `using` konstruktionen garanterar att den här metoden kallas även om ett undantag inträffar. Undantag som uppstår när du anropar den här metoden kan inte påverka transaktionen. Den här metoden också återställer den omgivande transaktionen till den ursprungliga tillstånd. En <xref:System.Transactions.TransactionAbortedException>genereras om inte genomförs transaktionen faktiskt.</xref:System.Transactions.TransactionAbortedException>       Den här metoden är synkron och blockerar tills transaktionen har genomförts eller avbrutits. Därför bör du vara mycket försiktig när du använder den här metoden i ett program för Windows-formulär (WinForm) eller ett dödläge kan inträffa. Om du anropa den här metoden inuti en händelse för WinForm-kontroll (t.ex, klicka på en knapp) och använder den synkrona <xref:System.Windows.Forms.Control.Invoke%2A>metod för att dirigera kontrollen att utföra vissa uppgifter för Användargränssnittet (till exempel ändra färger) under bearbetningen transaktionen, sker ett dödläge.</xref:System.Windows.Forms.Control.Invoke%2A> Detta beror på att den <xref:System.Windows.Forms.Control.Invoke%2A>metoden synkront, blockerar arbetstråden tills UI-tråden har slutförts fjäderlayoutjobbet.</xref:System.Windows.Forms.Control.Invoke%2A> Men i vårt scenario väntar UI-tråden också arbetstråd att genomföra transaktionen. Resultatet är att det inte kan fortsätta och omfånget väntar på obestämd tid genomförandet avslutas. Du bör använda <xref:System.Windows.Forms.Control.BeginInvoke%2A>stället <xref:System.Windows.Forms.Control.Invoke%2A>om möjligt eftersom den är asynkron och därmed mindre risk för dödläge.</xref:System.Windows.Forms.Control.Invoke%2A> </xref:System.Windows.Forms.Control.BeginInvoke%2A>       Mer information om hur den här metoden används finns i [implementera en Implicit transaktion med transaktionsomfånget](http://msdn.microsoft.com/en-us/1ddba95e-7587-48b2-8838-708c275e7199) avsnittet."
  example:
  - "The following example demonstrates how to use the <xref:System.Transactions.TransactionScope> class to define a block of code to participate in a transaction.  \n  \n [!code-vb[TransactionScope#1](~/add/codesnippet/visualbasic/m-system.transactions.tr_0_1.vb)]\n [!code-cs[TransactionScope#1](~/add/codesnippet/csharp/m-system.transactions.tr_0_1.cs)]"
  syntax:
    content: public void Dispose ();
    parameters: []
  overload: System.Transactions.TransactionScope.Dispose*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.Transactions.TransactionScope.#ctor
  parent: System.Transactions.TransactionScope
  isExternal: false
  name: TransactionScope()
  nameWithType: TransactionScope.TransactionScope()
  fullName: System.Transactions.TransactionScope.TransactionScope()
- uid: System.Transactions.TransactionScope.#ctor(System.Transactions.Transaction)
  parent: System.Transactions.TransactionScope
  isExternal: false
  name: TransactionScope(Transaction)
  nameWithType: TransactionScope.TransactionScope(Transaction)
  fullName: System.Transactions.TransactionScope.TransactionScope(Transaction)
- uid: System.Transactions.Transaction
  parent: System.Transactions
  isExternal: false
  name: Transaction
  nameWithType: Transaction
  fullName: System.Transactions.Transaction
- uid: System.Transactions.TransactionScope.#ctor(System.Transactions.TransactionScopeAsyncFlowOption)
  parent: System.Transactions.TransactionScope
  isExternal: false
  name: TransactionScope(TransactionScopeAsyncFlowOption)
  nameWithType: TransactionScope.TransactionScope(TransactionScopeAsyncFlowOption)
  fullName: System.Transactions.TransactionScope.TransactionScope(TransactionScopeAsyncFlowOption)
- uid: System.Transactions.TransactionScopeAsyncFlowOption
  parent: System.Transactions
  isExternal: false
  name: TransactionScopeAsyncFlowOption
  nameWithType: TransactionScopeAsyncFlowOption
  fullName: System.Transactions.TransactionScopeAsyncFlowOption
- uid: System.Transactions.TransactionScope.#ctor(System.Transactions.TransactionScopeOption)
  parent: System.Transactions.TransactionScope
  isExternal: false
  name: TransactionScope(TransactionScopeOption)
  nameWithType: TransactionScope.TransactionScope(TransactionScopeOption)
  fullName: System.Transactions.TransactionScope.TransactionScope(TransactionScopeOption)
- uid: System.Transactions.TransactionScopeOption
  parent: System.Transactions
  isExternal: false
  name: TransactionScopeOption
  nameWithType: TransactionScopeOption
  fullName: System.Transactions.TransactionScopeOption
- uid: System.Transactions.TransactionScope.#ctor(System.Transactions.Transaction,System.TimeSpan)
  parent: System.Transactions.TransactionScope
  isExternal: false
  name: TransactionScope(Transaction,TimeSpan)
  nameWithType: TransactionScope.TransactionScope(Transaction,TimeSpan)
  fullName: System.Transactions.TransactionScope.TransactionScope(Transaction,TimeSpan)
- uid: System.TimeSpan
  parent: System
  isExternal: true
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: System.TimeSpan
- uid: System.Transactions.TransactionScope.#ctor(System.Transactions.Transaction,System.Transactions.TransactionScopeAsyncFlowOption)
  parent: System.Transactions.TransactionScope
  isExternal: false
  name: TransactionScope(Transaction,TransactionScopeAsyncFlowOption)
  nameWithType: TransactionScope.TransactionScope(Transaction,TransactionScopeAsyncFlowOption)
  fullName: System.Transactions.TransactionScope.TransactionScope(Transaction,TransactionScopeAsyncFlowOption)
- uid: System.Transactions.TransactionScope.#ctor(System.Transactions.TransactionScopeOption,System.TimeSpan)
  parent: System.Transactions.TransactionScope
  isExternal: false
  name: TransactionScope(TransactionScopeOption,TimeSpan)
  nameWithType: TransactionScope.TransactionScope(TransactionScopeOption,TimeSpan)
  fullName: System.Transactions.TransactionScope.TransactionScope(TransactionScopeOption,TimeSpan)
- uid: System.Transactions.TransactionScope.#ctor(System.Transactions.TransactionScopeOption,System.Transactions.TransactionOptions)
  parent: System.Transactions.TransactionScope
  isExternal: false
  name: TransactionScope(TransactionScopeOption,TransactionOptions)
  nameWithType: TransactionScope.TransactionScope(TransactionScopeOption,TransactionOptions)
  fullName: System.Transactions.TransactionScope.TransactionScope(TransactionScopeOption,TransactionOptions)
- uid: System.Transactions.TransactionOptions
  parent: System.Transactions
  isExternal: false
  name: TransactionOptions
  nameWithType: TransactionOptions
  fullName: System.Transactions.TransactionOptions
- uid: System.Transactions.TransactionScope.#ctor(System.Transactions.TransactionScopeOption,System.Transactions.TransactionScopeAsyncFlowOption)
  parent: System.Transactions.TransactionScope
  isExternal: false
  name: TransactionScope(TransactionScopeOption,TransactionScopeAsyncFlowOption)
  nameWithType: TransactionScope.TransactionScope(TransactionScopeOption,TransactionScopeAsyncFlowOption)
  fullName: System.Transactions.TransactionScope.TransactionScope(TransactionScopeOption,TransactionScopeAsyncFlowOption)
- uid: System.Transactions.TransactionScope.#ctor(System.Transactions.Transaction,System.TimeSpan,System.Transactions.EnterpriseServicesInteropOption)
  parent: System.Transactions.TransactionScope
  isExternal: false
  name: TransactionScope(Transaction,TimeSpan,EnterpriseServicesInteropOption)
  nameWithType: TransactionScope.TransactionScope(Transaction,TimeSpan,EnterpriseServicesInteropOption)
  fullName: System.Transactions.TransactionScope.TransactionScope(Transaction,TimeSpan,EnterpriseServicesInteropOption)
- uid: System.Transactions.EnterpriseServicesInteropOption
  parent: System.Transactions
  isExternal: false
  name: EnterpriseServicesInteropOption
  nameWithType: EnterpriseServicesInteropOption
  fullName: System.Transactions.EnterpriseServicesInteropOption
- uid: System.Transactions.TransactionScope.#ctor(System.Transactions.Transaction,System.TimeSpan,System.Transactions.TransactionScopeAsyncFlowOption)
  parent: System.Transactions.TransactionScope
  isExternal: false
  name: TransactionScope(Transaction,TimeSpan,TransactionScopeAsyncFlowOption)
  nameWithType: TransactionScope.TransactionScope(Transaction,TimeSpan,TransactionScopeAsyncFlowOption)
  fullName: System.Transactions.TransactionScope.TransactionScope(Transaction,TimeSpan,TransactionScopeAsyncFlowOption)
- uid: System.Transactions.TransactionScope.#ctor(System.Transactions.TransactionScopeOption,System.TimeSpan,System.Transactions.TransactionScopeAsyncFlowOption)
  parent: System.Transactions.TransactionScope
  isExternal: false
  name: TransactionScope(TransactionScopeOption,TimeSpan,TransactionScopeAsyncFlowOption)
  nameWithType: TransactionScope.TransactionScope(TransactionScopeOption,TimeSpan,TransactionScopeAsyncFlowOption)
  fullName: System.Transactions.TransactionScope.TransactionScope(TransactionScopeOption,TimeSpan,TransactionScopeAsyncFlowOption)
- uid: System.Transactions.TransactionScope.#ctor(System.Transactions.TransactionScopeOption,System.Transactions.TransactionOptions,System.Transactions.EnterpriseServicesInteropOption)
  parent: System.Transactions.TransactionScope
  isExternal: false
  name: TransactionScope(TransactionScopeOption,TransactionOptions,EnterpriseServicesInteropOption)
  nameWithType: TransactionScope.TransactionScope(TransactionScopeOption,TransactionOptions,EnterpriseServicesInteropOption)
  fullName: System.Transactions.TransactionScope.TransactionScope(TransactionScopeOption,TransactionOptions,EnterpriseServicesInteropOption)
- uid: System.Transactions.TransactionScope.#ctor(System.Transactions.TransactionScopeOption,System.Transactions.TransactionOptions,System.Transactions.TransactionScopeAsyncFlowOption)
  parent: System.Transactions.TransactionScope
  isExternal: false
  name: TransactionScope(TransactionScopeOption,TransactionOptions,TransactionScopeAsyncFlowOption)
  nameWithType: TransactionScope.TransactionScope(TransactionScopeOption,TransactionOptions,TransactionScopeAsyncFlowOption)
  fullName: System.Transactions.TransactionScope.TransactionScope(TransactionScopeOption,TransactionOptions,TransactionScopeAsyncFlowOption)
- uid: System.Transactions.TransactionScope.Complete
  parent: System.Transactions.TransactionScope
  isExternal: false
  name: Complete()
  nameWithType: TransactionScope.Complete()
  fullName: System.Transactions.TransactionScope.Complete()
- uid: System.Transactions.TransactionScope.Dispose
  parent: System.Transactions.TransactionScope
  isExternal: false
  name: Dispose()
  nameWithType: TransactionScope.Dispose()
  fullName: System.Transactions.TransactionScope.Dispose()
- uid: System.Transactions.TransactionScope.#ctor*
  parent: System.Transactions.TransactionScope
  isExternal: false
  name: TransactionScope
  nameWithType: TransactionScope.TransactionScope
- uid: System.Transactions.TransactionScope.Complete*
  parent: System.Transactions.TransactionScope
  isExternal: false
  name: Complete
  nameWithType: TransactionScope.Complete
- uid: System.Transactions.TransactionScope.Dispose*
  parent: System.Transactions.TransactionScope
  isExternal: false
  name: Dispose
  nameWithType: TransactionScope.Dispose
