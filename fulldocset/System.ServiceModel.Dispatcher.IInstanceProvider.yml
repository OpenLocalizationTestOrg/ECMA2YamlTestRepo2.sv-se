### YamlMime:ManagedReference
items:
- uid: System.ServiceModel.Dispatcher.IInstanceProvider
  id: IInstanceProvider
  children:
  - System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance(System.ServiceModel.InstanceContext)
  - System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance(System.ServiceModel.InstanceContext,System.ServiceModel.Channels.Message)
  - System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance(System.ServiceModel.InstanceContext,System.Object)
  langs:
  - csharp
  name: IInstanceProvider
  nameWithType: IInstanceProvider
  fullName: System.ServiceModel.Dispatcher.IInstanceProvider
  type: Interface
  summary: "Deklarerar metoder som tillhandahåller en tjänst objekt eller Återanvänd en serviceobjektet för en [!INCLUDE[indigo1](~/add/includes/ajax-current-ext-md.md)] service."
  remarks: "Implementera IInstanceProvider-gränssnittet för att styra skapandet och återanvändning av service-objekt när en begärt eller tagits bort av en <xref:System.ServiceModel.InstanceContext>objektet.</xref:System.ServiceModel.InstanceContext>       När gränssnittet IInstanceProvider implementeras måste du tilldela dina anpassade instansobjektet providern till den <xref:System.ServiceModel.Dispatcher.DispatchRuntime.InstanceProvider%2A>egenskap med en slutpunkt med (en <xref:System.ServiceModel.Description.IEndpointBehavior>objekt) eller ett beteende för kontrakt (en <xref:System.ServiceModel.Description.IContractBehavior>objekt).</xref:System.ServiceModel.Description.IContractBehavior> </xref:System.ServiceModel.Description.IEndpointBehavior> </xref:System.ServiceModel.Dispatcher.DispatchRuntime.InstanceProvider%2A>       Om mekanismen för infogning är en slutpunkt med kan du även implementera en <xref:System.ServiceModel.Configuration.BehaviorExtensionElement>objekt som kan infoga det beteende som använder en konfigurationsfil.</xref:System.ServiceModel.Configuration.BehaviorExtensionElement> Om mekanismen för infogning är ett kontrakt, du kan infoga beteendet programmässigt innan tjänstvärden eller du kan implementera ett anpassat attribut. (Ett exempel på kontraktet beteende-metoden finns i avsnittet exempel).       IInstanceProvider har två metoder, <xref:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance%2A>och <xref:System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance%2A>.</xref:System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance%2A> </xref:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance%2A> Dessa metoder implementeras normalt om du vill skapa service-objekt med en standardkonstruktor eller initiera eller avyttra vissa tillstånd som rör livslängden för objektet. Tjänsten objektpoolning är ett exempel på anpassade IInstanceProvider funktioner.       Normalt den <xref:System.ServiceModel.InstanceContext>anropar den <xref:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance%2A>när den <xref:System.ServiceModel.InstanceContext>först skapas och anropar den <xref:System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance%2A>metoden när den <xref:System.ServiceModel.InstanceContext>är stängd.</xref:System.ServiceModel.InstanceContext> </xref:System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance%2A> </xref:System.ServiceModel.InstanceContext> </xref:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance%2A> </xref:System.ServiceModel.InstanceContext>       Det finns två sätt att orsaka en <xref:System.ServiceModel.InstanceContext>objekt att släppa en serviceobjektet innan den <xref:System.ServiceModel.InstanceContext>är stängd.</xref:System.ServiceModel.InstanceContext> </xref:System.ServiceModel.InstanceContext> Den första metoden är att ange <xref:System.ServiceModel.OperationBehaviorAttribute.ReleaseInstanceMode%2A>eller <xref:System.ServiceModel.ReleaseInstanceMode> <xref:System.ServiceModel.ReleaseInstanceMode>.</xref:System.ServiceModel.ReleaseInstanceMode> </xref:System.ServiceModel.ReleaseInstanceMode> </xref:System.ServiceModel.OperationBehaviorAttribute.ReleaseInstanceMode%2A> Den andra metoden är att anropa den <xref:System.ServiceModel.InstanceContext.ReleaseServiceInstance%2A>metoden.</xref:System.ServiceModel.InstanceContext.ReleaseServiceInstance%2A> Om detta görs i <xref:System.ServiceModel.InstanceContext>anrop av <xref:System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance%2A>metod på den dispatcher instansprovidern.</xref:System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance%2A> </xref:System.ServiceModel.InstanceContext> Om ett nytt meddelande tas emot efter att instansen har släppts [!INCLUDE[indigo2](~/add/includes/ajax-current-ext-md.md)] skapar en ny instans med hjälp av <xref:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance%2A>metod.</xref:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance%2A>      > [!NOTE] > Om <xref:System.ServiceModel.InstanceContextMode>av tjänsten är <xref:System.ServiceModel.InstanceContextMode>systemet anropar inte den <xref:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance%2A>eller <xref:System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance%2A>metoder även om användaren har inte tillhandahållit ett välkänt tjänstobjekt om inte användaren direkt anropar <xref:System.ServiceModel.InstanceContext.ReleaseServiceInstance%2A>och sedan anropar <xref:System.ServiceModel.InstanceContext.GetServiceInstance%2A>.</xref:System.ServiceModel.InstanceContext.GetServiceInstance%2A> </xref:System.ServiceModel.InstanceContext.ReleaseServiceInstance%2A> </xref:System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance%2A> </xref:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance%2A> </xref:System.ServiceModel.InstanceContextMode> </xref:System.ServiceModel.InstanceContextMode>"
  example:
  - "The following code example shows how to implement IInstanceProvider that provides \"singleton\" behavior; it always returns the same service instance and does not recycle it.  \n  \n [!code-cs[IContractBehavior#1](~/add/codesnippet/csharp/icontractbehavior.client/objectproviderbehavior.cs#1)]\n [!code-vb[IContractBehavior#1](~/add/codesnippet/visualbasic/icontractbehavior.client/objectproviderbehavior.vb#1)]  \n  \n The following code example shows how to implement a custom attribute that implements <xref:System.ServiceModel.Description.IContractBehavior> to insert the custom service instance provider. It also implements <xref:System.ServiceModel.Description.IContractBehaviorAttribute>, which binds its use to a specific contract.  \n  \n [!code-cs[IContractBehavior#2](~/add/codesnippet/csharp/icontractbehavior.client/objectproviderbehavior.cs#2)]\n [!code-vb[IContractBehavior#2](~/add/codesnippet/visualbasic/icontractbehavior.client/objectproviderbehavior.vb#2)]"
  syntax:
    content: public interface IInstanceProvider
  implements: []
  platform:
  - net462
- uid: System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance(System.ServiceModel.InstanceContext)
  id: GetInstance(System.ServiceModel.InstanceContext)
  parent: System.ServiceModel.Dispatcher.IInstanceProvider
  langs:
  - csharp
  name: GetInstance(InstanceContext)
  nameWithType: IInstanceProvider.GetInstance(InstanceContext)
  fullName: System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance(InstanceContext)
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Dispatcher
  summary: "Returnerar en serviceobjekt beroende på den angivna <xref:System.ServiceModel.InstanceContext>objektet.</xref:System.ServiceModel.InstanceContext>"
  remarks: "Använd GetInstance-metod för att styra tjänsten exakt objekt som en [!INCLUDE[indigo2](~/add/includes/ajax-current-ext-md.md)] tjänsten tar emot när den försöker skapa en ny."
  example:
  - "The following code example shows how to implement <xref:System.ServiceModel.Dispatcher.IInstanceProvider> that provides \"singleton\" behavior; it always returns the same service instance and does not recycle it.  \n  \n [!code-cs[IContractBehavior#1](~/add/codesnippet/csharp/icontractbehavior.client/objectproviderbehavior.cs#1)]\n [!code-vb[IContractBehavior#1](~/add/codesnippet/visualbasic/icontractbehavior.client/objectproviderbehavior.vb#1)]  \n  \n The following code example shows how to implement a custom attribute that implements <xref:System.ServiceModel.Description.IContractBehavior> to insert the custom service instance provider. It also implements <xref:System.ServiceModel.Description.IContractBehaviorAttribute>, which binds its use to a specific contract.  \n  \n [!code-cs[IContractBehavior#2](~/add/codesnippet/csharp/icontractbehavior.client/objectproviderbehavior.cs#2)]\n [!code-vb[IContractBehavior#2](~/add/codesnippet/visualbasic/icontractbehavior.client/objectproviderbehavior.vb#2)]"
  syntax:
    content: public object GetInstance (System.ServiceModel.InstanceContext instanceContext);
    parameters:
    - id: instanceContext
      type: System.ServiceModel.InstanceContext
      description: "Aktuellt <xref:System.ServiceModel.InstanceContext>objektet.</xref:System.ServiceModel.InstanceContext>"
    return:
      type: System.Object
      description: "Ett användardefinierat serviceobjekt."
  overload: System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance(System.ServiceModel.InstanceContext,System.ServiceModel.Channels.Message)
  id: GetInstance(System.ServiceModel.InstanceContext,System.ServiceModel.Channels.Message)
  parent: System.ServiceModel.Dispatcher.IInstanceProvider
  langs:
  - csharp
  name: GetInstance(InstanceContext,Message)
  nameWithType: IInstanceProvider.GetInstance(InstanceContext,Message)
  fullName: System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance(InstanceContext,Message)
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Dispatcher
  summary: "Returnerar en serviceobjekt beroende på den angivna <xref:System.ServiceModel.InstanceContext>objektet.</xref:System.ServiceModel.InstanceContext>"
  remarks: "Använd GetInstance-metod för att styra tjänsten exakt objekt som en [!INCLUDE[indigo2](~/add/includes/ajax-current-ext-md.md)] tjänsten tar emot när den försöker skapa en ny."
  example:
  - "The following code example shows how to implement <xref:System.ServiceModel.Dispatcher.IInstanceProvider> that provides \"singleton\" behavior; it always returns the same service instance and does not recycle it.  \n  \n [!code-cs[IContractBehavior#1](~/add/codesnippet/csharp/icontractbehavior.client/objectproviderbehavior.cs#1)]\n [!code-vb[IContractBehavior#1](~/add/codesnippet/visualbasic/icontractbehavior.client/objectproviderbehavior.vb#1)]  \n  \n The following code example shows how to implement a custom attribute that implements <xref:System.ServiceModel.Description.IContractBehavior> to insert the custom service instance provider. It also implements <xref:System.ServiceModel.Description.IContractBehaviorAttribute>, which binds its use to a specific contract.  \n  \n [!code-cs[IContractBehavior#2](~/add/codesnippet/csharp/icontractbehavior.client/objectproviderbehavior.cs#2)]\n [!code-vb[IContractBehavior#2](~/add/codesnippet/visualbasic/icontractbehavior.client/objectproviderbehavior.vb#2)]"
  syntax:
    content: public object GetInstance (System.ServiceModel.InstanceContext instanceContext, System.ServiceModel.Channels.Message message);
    parameters:
    - id: instanceContext
      type: System.ServiceModel.InstanceContext
      description: "Aktuellt <xref:System.ServiceModel.InstanceContext>objektet.</xref:System.ServiceModel.InstanceContext>"
    - id: message
      type: System.ServiceModel.Channels.Message
      description: "Det meddelande som utlöste ett tjänstobjekt skapas."
    return:
      type: System.Object
      description: "Serviceobjekt."
  overload: System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance(System.ServiceModel.InstanceContext,System.Object)
  id: ReleaseInstance(System.ServiceModel.InstanceContext,System.Object)
  parent: System.ServiceModel.Dispatcher.IInstanceProvider
  langs:
  - csharp
  name: ReleaseInstance(InstanceContext,Object)
  nameWithType: IInstanceProvider.ReleaseInstance(InstanceContext,Object)
  fullName: System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance(InstanceContext,Object)
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Dispatcher
  summary: "Anropas när en <xref:System.ServiceModel.InstanceContext>objektet återanvänds en serviceobjektet.</xref:System.ServiceModel.InstanceContext>"
  remarks: "Använd metoden ReleaseInstance för att utföra vissa anpassade resursen tillgänglig eller andra återanvändning anpassning när en tjänst återanvänds ett serviceobjekt."
  syntax:
    content: public void ReleaseInstance (System.ServiceModel.InstanceContext instanceContext, object instance);
    parameters:
    - id: instanceContext
      type: System.ServiceModel.InstanceContext
      description: "Tjänstens instans kontext."
    - id: instance
      type: System.Object
      description: "Serviceobjekt som ska återvinnas."
  overload: System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance*
  exceptions: []
  platform:
  - net462
references:
- uid: System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance(System.ServiceModel.InstanceContext)
  parent: System.ServiceModel.Dispatcher.IInstanceProvider
  isExternal: false
  name: GetInstance(InstanceContext)
  nameWithType: IInstanceProvider.GetInstance(InstanceContext)
  fullName: System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance(InstanceContext)
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.ServiceModel.InstanceContext
  parent: System.ServiceModel
  isExternal: true
  name: InstanceContext
  nameWithType: InstanceContext
  fullName: System.ServiceModel.InstanceContext
- uid: System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance(System.ServiceModel.InstanceContext,System.ServiceModel.Channels.Message)
  parent: System.ServiceModel.Dispatcher.IInstanceProvider
  isExternal: false
  name: GetInstance(InstanceContext,Message)
  nameWithType: IInstanceProvider.GetInstance(InstanceContext,Message)
  fullName: System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance(InstanceContext,Message)
- uid: System.ServiceModel.Channels.Message
  parent: System.ServiceModel.Channels
  isExternal: true
  name: Message
  nameWithType: Message
  fullName: System.ServiceModel.Channels.Message
- uid: System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance(System.ServiceModel.InstanceContext,System.Object)
  parent: System.ServiceModel.Dispatcher.IInstanceProvider
  isExternal: false
  name: ReleaseInstance(InstanceContext,Object)
  nameWithType: IInstanceProvider.ReleaseInstance(InstanceContext,Object)
  fullName: System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance(InstanceContext,Object)
- uid: System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance*
  parent: System.ServiceModel.Dispatcher.IInstanceProvider
  isExternal: false
  name: GetInstance
  nameWithType: IInstanceProvider.GetInstance
- uid: System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance*
  parent: System.ServiceModel.Dispatcher.IInstanceProvider
  isExternal: false
  name: ReleaseInstance
  nameWithType: IInstanceProvider.ReleaseInstance
