### YamlMime:ManagedReference
items:
- uid: System.Threading.ThreadAbortException
  id: ThreadAbortException
  children:
  - System.Threading.ThreadAbortException.ExceptionState
  langs:
  - csharp
  name: ThreadAbortException
  nameWithType: ThreadAbortException
  fullName: System.Threading.ThreadAbortException
  type: Class
  summary: "Undantag som utlöses när ett anrop görs till den <xref:System.Threading.Thread.Abort*>metoden.</xref:System.Threading.Thread.Abort*> Den här klassen kan inte ärvas."
  remarks: "När ett anrop görs för att den <xref:System.Threading.Thread.Abort%2A>metod för att ta bort en tråd common language runtime genererar en ThreadAbortException.</xref:System.Threading.Thread.Abort%2A> ThreadAbortException är ett undantag som kan fångas, men den aktiveras automatiskt igen i slutet av den `catch` block. När det här undantaget utlöses körningen kör alla de `finally` block innan du avslutar tråden. Eftersom tråden kan göra en unbounded beräkning i den `finally` block eller anrop <xref:System.Threading.Thread.ResetAbort%2A?displayProperty=fullName>Om du vill avbryta avbrottet, det är inte säkert att tråden ska aldrig avslutas.</xref:System.Threading.Thread.ResetAbort%2A?displayProperty=fullName> Om du vill vänta tills den avbrutna tråden har avslutats, kan du anropa den <xref:System.Threading.Thread.Join%2A?displayProperty=fullName>metoden.</xref:System.Threading.Thread.Join%2A?displayProperty=fullName> <xref:System.Threading.Thread.Join%2A>är ett blockerande anrop som inte returnerar tills tråden slutar verkligen körs.</xref:System.Threading.Thread.Join%2A>      > [!NOTE] > När common language runtime (CLR) slutar bakgrund threadsafter alla förgrunden trådar i en hanterad körbar fil har avslutats, använder inte <xref:System.Threading.Thread.Abort%2A?displayProperty=fullName>.</xref:System.Threading.Thread.Abort%2A?displayProperty=fullName> Därför kan använda du inte ThreadAbortException för att upptäcka när bakgrundstrådar avslutas av CLR.       ThreadAbortException använder HRESULT COR_E_THREADABORTED, som har värdet 0x80131530.      > [!NOTE] > Värdet för den ärvda <xref:System.Exception.Data%2A>egenskapen är alltid `null`.</xref:System.Exception.Data%2A>"
  example:
  - "The following example demonstrates aborting a thread. The thread that receives the `ThreadAbortException` uses the <xref:System.Threading.Thread.ResetAbort%2A> method to cancel the abort request and continue executing.  \n  \n [!code-cpp[ThreadAbEx#1](~/add/codesnippet/cpp/t-system.threading.threa_4_1.cpp)]\n [!code-vb[ThreadAbEx#1](~/add/codesnippet/visualbasic/t-system.threading.threa_4_1.vb)]\n [!code-cs[ThreadAbEx#1](~/add/codesnippet/csharp/t-system.threading.threa_4_1.cs)]  \n  \n This code produces the following output:  \n  \n```  \nThread - working.  \nMain - aborting my thread.  \nThread - caught ThreadAbortException - resetting.  \nException message: Thread was being aborted.  \nThread - still alive and working.  \nThread - finished working.  \nMain ending.  \n```"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public sealed class ThreadAbortException : SystemException
  inheritance:
  - System.Exception
  - System.SystemException
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Threading.ThreadAbortException.ExceptionState
  id: ExceptionState
  parent: System.Threading.ThreadAbortException
  langs:
  - csharp
  name: ExceptionState
  nameWithType: ThreadAbortException.ExceptionState
  fullName: System.Threading.ThreadAbortException.ExceptionState
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Threading
  summary: "Hämtar ett objekt som innehåller programspecifik information som rör avbrottet tråd."
  remarks: "Objektet som returneras av den här egenskapen har angetts via den `stateInfo` parameter för den <xref:System.Threading.Thread.Abort%2A>metoden.</xref:System.Threading.Thread.Abort%2A> Exakta innehåll och användning av det här objektet är program som anges. Det är vanligt att förmedla information som är meningsfullt för tråden som avslutades."
  example:
  - "The following code example shows how to pass information to a thread that is being aborted.  \n  \n [!code-cs[System.Threading.Thread.Abort2#1](~/add/codesnippet/csharp/p-system.threading.threa_10_1.cs)]\n [!code-cpp[System.Threading.Thread.Abort2#1](~/add/codesnippet/cpp/p-system.threading.threa_10_1.cpp)]\n [!code-vb[System.Threading.Thread.Abort2#1](~/add/codesnippet/visualbasic/p-system.threading.threa_10_1.vb)]"
  syntax:
    content: public object ExceptionState { get; }
    return:
      type: System.Object
      description: "Ett objekt som innehåller programspecifik information."
  overload: System.Threading.ThreadAbortException.ExceptionState*
  exceptions: []
  platform:
  - net462
references:
- uid: System.SystemException
  isExternal: false
  name: System.SystemException
- uid: System.Threading.ThreadAbortException.ExceptionState
  parent: System.Threading.ThreadAbortException
  isExternal: false
  name: ExceptionState
  nameWithType: ThreadAbortException.ExceptionState
  fullName: System.Threading.ThreadAbortException.ExceptionState
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Threading.ThreadAbortException.ExceptionState*
  parent: System.Threading.ThreadAbortException
  isExternal: false
  name: ExceptionState
  nameWithType: ThreadAbortException.ExceptionState
