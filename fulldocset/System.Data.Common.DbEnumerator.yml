### YamlMime:ManagedReference
items:
- uid: System.Data.Common.DbEnumerator
  id: DbEnumerator
  children:
  - System.Data.Common.DbEnumerator.#ctor(System.Data.Common.DbDataReader)
  - System.Data.Common.DbEnumerator.#ctor(System.Data.IDataReader)
  - System.Data.Common.DbEnumerator.#ctor(System.Data.Common.DbDataReader,System.Boolean)
  - System.Data.Common.DbEnumerator.#ctor(System.Data.IDataReader,System.Boolean)
  - System.Data.Common.DbEnumerator.Current
  - System.Data.Common.DbEnumerator.MoveNext
  - System.Data.Common.DbEnumerator.Reset
  langs:
  - csharp
  name: DbEnumerator
  nameWithType: DbEnumerator
  fullName: System.Data.Common.DbEnumerator
  type: Class
  summary: "Visar den <xref:System.Collections.IEnumerable.GetEnumerator*>metod som stöder en enkel iteration via en samling av en .NET Framework-dataprovidern.</xref:System.Collections.IEnumerable.GetEnumerator*>"
  remarks: "Klassen DbEnumerator implementeras av en .NET Framework-dataprovider för att ge stöd för bindning av data.       Objektet DbEnumerator är avsedd att användas med endast en resultset avsiktligt. Om du kör en batch-instruktion som innehåller två SQL SELECT-uttryck som returnerar olika scheman, kan den andra instruktionen inte returnera hela schemat. Om du vill undvika detta kan få en DbEnumerator för varje resultset och sedan anropa den `NextResult` metod i en .NET Framework data provider DataReader-objektet."
  syntax:
    content: 'public class DbEnumerator : System.Collections.IEnumerator'
  inheritance:
  - System.Object
  implements:
  - System.Collections.IEnumerator
  inheritedMembers: []
  platform:
  - net462
- uid: System.Data.Common.DbEnumerator.#ctor(System.Data.Common.DbDataReader)
  id: '#ctor(System.Data.Common.DbDataReader)'
  parent: System.Data.Common.DbEnumerator
  langs:
  - csharp
  name: DbEnumerator(DbDataReader)
  nameWithType: DbEnumerator.DbEnumerator(DbDataReader)
  fullName: System.Data.Common.DbEnumerator.DbEnumerator(DbDataReader)
  type: Constructor
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Initierar en ny instans av den <xref href=&quot;System.Data.Common.DbEnumerator&quot;> </xref> klass med ge n dataläsaren."
  syntax:
    content: public DbEnumerator (System.Data.Common.DbDataReader reader);
    parameters:
    - id: reader
      type: System.Data.Common.DbDataReader
      description: "DataReader som iterera."
  overload: System.Data.Common.DbEnumerator.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DbEnumerator.#ctor(System.Data.IDataReader)
  id: '#ctor(System.Data.IDataReader)'
  parent: System.Data.Common.DbEnumerator
  langs:
  - csharp
  name: DbEnumerator(IDataReader)
  nameWithType: DbEnumerator.DbEnumerator(IDataReader)
  fullName: System.Data.Common.DbEnumerator.DbEnumerator(IDataReader)
  type: Constructor
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Initierar en ny instans av den <xref href=&quot;System.Data.Common.DbEnumerator&quot;> </xref> klassen med hjälp av den angivna <xref uid=&quot;langword_csharp_DataReader&quot; name=&quot;DataReader&quot; href=&quot;&quot;> </xref>."
  syntax:
    content: public DbEnumerator (System.Data.IDataReader reader);
    parameters:
    - id: reader
      type: System.Data.IDataReader
      description: "Den <xref uid=&quot;langword_csharp_DataReader&quot; name=&quot;DataReader&quot; href=&quot;&quot;> </xref> som iterera."
  overload: System.Data.Common.DbEnumerator.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DbEnumerator.#ctor(System.Data.Common.DbDataReader,System.Boolean)
  id: '#ctor(System.Data.Common.DbDataReader,System.Boolean)'
  parent: System.Data.Common.DbEnumerator
  langs:
  - csharp
  name: DbEnumerator(DbDataReader,Boolean)
  nameWithType: DbEnumerator.DbEnumerator(DbDataReader,Boolean)
  fullName: System.Data.Common.DbEnumerator.DbEnumerator(DbDataReader,Boolean)
  type: Constructor
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Initierar en ny instans av den <xref href=&quot;System.Data.Common.DbEnumerator&quot;> </xref> klassen med hjälp av den angivna smartkortsläsaren och anger om du vill stänga automatiskt läsaren har gått igenom dess data."
  syntax:
    content: public DbEnumerator (System.Data.Common.DbDataReader reader, bool closeReader);
    parameters:
    - id: reader
      type: System.Data.Common.DbDataReader
      description: "DataReader som iterera."
    - id: closeReader
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Stäng automatiskt DataReader-objektet har gått igenom dess data. Annars <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Data.Common.DbEnumerator.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DbEnumerator.#ctor(System.Data.IDataReader,System.Boolean)
  id: '#ctor(System.Data.IDataReader,System.Boolean)'
  parent: System.Data.Common.DbEnumerator
  langs:
  - csharp
  name: DbEnumerator(IDataReader,Boolean)
  nameWithType: DbEnumerator.DbEnumerator(IDataReader,Boolean)
  fullName: System.Data.Common.DbEnumerator.DbEnumerator(IDataReader,Boolean)
  type: Constructor
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Initierar en ny instans av den <xref href=&quot;System.Data.Common.DbEnumerator&quot;> </xref> klassen med hjälp av den angivna <xref uid=&quot;langword_csharp_DataReader&quot; name=&quot;DataReader&quot; href=&quot;&quot;> </xref>, och anger om du vill stänga automatiskt den <xref uid=&quot;langword_csharp_DataReader&quot; name=&quot;DataReader&quot; href=&quot;&quot;> </xref> har gått igenom dess data."
  syntax:
    content: public DbEnumerator (System.Data.IDataReader reader, bool closeReader);
    parameters:
    - id: reader
      type: System.Data.IDataReader
      description: "Den <xref uid=&quot;langword_csharp_DataReader&quot; name=&quot;DataReader&quot; href=&quot;&quot;> </xref> som iterera."
    - id: closeReader
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Stäng automatiskt den <xref uid=&quot;langword_csharp_DataReader&quot; name=&quot;DataReader&quot; href=&quot;&quot;> </xref> har gått igenom data; annars <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Data.Common.DbEnumerator.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DbEnumerator.Current
  id: Current
  parent: System.Data.Common.DbEnumerator
  langs:
  - csharp
  name: Current
  nameWithType: DbEnumerator.Current
  fullName: System.Data.Common.DbEnumerator.Current
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Hämtar det aktuella elementet i mängden."
  remarks: "När du har skapat en uppräknare eller efter en <xref:System.Data.Common.DbEnumerator.Reset%2A>, <xref:System.Data.Common.DbEnumerator.MoveNext%2A>måste anropas för att gå vidare uppräknaren till det första elementet i mängden innan du läser värdet på Current; annars är odefinierad.</xref:System.Data.Common.DbEnumerator.MoveNext%2A> </xref:System.Data.Common.DbEnumerator.Reset%2A> Aktuella också genererar ett undantag om senast anropet till <xref:System.Data.Common.DbEnumerator.MoveNext%2A>returnerade false, vilket anger slutet av samlingen.</xref:System.Data.Common.DbEnumerator.MoveNext%2A> Aktuella inte flytta positionen för uppräknaren och efterföljande anrop till aktuella returnera samma objekt förrän antingen <xref:System.Data.Common.DbEnumerator.MoveNext%2A>eller <xref:System.Data.Common.DbEnumerator.Reset%2A>kallas.</xref:System.Data.Common.DbEnumerator.Reset%2A> </xref:System.Data.Common.DbEnumerator.MoveNext%2A> En uppräknare är giltig så länge samlingen förblir oförändrad. Om ändringar görs i samlingen, till exempel lägga till, ändra eller ta bort element uppräknaren är blir inaktuella och nästa anropa eller <xref:System.Data.Common.DbEnumerator.MoveNext%2A> <xref:System.Data.Common.DbEnumerator.Reset%2A>genererar <xref:System.InvalidOperationException>.</xref:System.InvalidOperationException> </xref:System.Data.Common.DbEnumerator.Reset%2A> </xref:System.Data.Common.DbEnumerator.MoveNext%2A> Om samlingen har ändrats mellan <xref:System.Data.Common.DbEnumerator.MoveNext%2A>och aktuella, aktuella returnerar elementet som anges, även om uppräknaren redan är ogiltiga.</xref:System.Data.Common.DbEnumerator.MoveNext%2A>"
  syntax:
    content: public object Current { get; }
    return:
      type: System.Object
      description: "Det aktuella elementet i mängden."
  overload: System.Data.Common.DbEnumerator.Current*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Uppräknaren har placerats före det första elementet i mängden eller efter det sista elementet."
  platform:
  - net462
- uid: System.Data.Common.DbEnumerator.MoveNext
  id: MoveNext
  parent: System.Data.Common.DbEnumerator
  langs:
  - csharp
  name: MoveNext()
  nameWithType: DbEnumerator.MoveNext()
  fullName: System.Data.Common.DbEnumerator.MoveNext()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Avancerar uppräknaren till nästa element i samlingen."
  remarks: "När du har skapat en uppräknare eller efter ett anrop till <xref:System.Data.Common.DbEnumerator.Reset%2A>en Uppräknaren står före det första elementet i mängden och det första anropet till MoveNext flyttar uppräknaren över det första elementet i mängden.</xref:System.Data.Common.DbEnumerator.Reset%2A> Efter slutet av samlingen skickas efterföljande anrop till MoveNext returnerar false tills <xref:System.Data.Common.DbEnumerator.Reset%2A>kallas.</xref:System.Data.Common.DbEnumerator.Reset%2A> En uppräknare är giltig så länge samlingen förblir oförändrad. Om ändringar i samlingen, till exempel lägga till, ändra eller ta bort element uppräknaren är blir inaktuella och nästa anrop till MoveNext eller <xref:System.Data.Common.DbEnumerator.Reset%2A>utlöser <xref:System.InvalidOperationException>.</xref:System.InvalidOperationException> </xref:System.Data.Common.DbEnumerator.Reset%2A>"
  syntax:
    content: public bool MoveNext ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Om uppräknaren har avancerade till nästa element; <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> om uppräknaren har passerat slutet av samlingen."
  overload: System.Data.Common.DbEnumerator.MoveNext*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Samlingen har ändrats efter att uppräknaren skapades."
  platform:
  - net462
- uid: System.Data.Common.DbEnumerator.Reset
  id: Reset
  parent: System.Data.Common.DbEnumerator
  langs:
  - csharp
  name: Reset()
  nameWithType: DbEnumerator.Reset()
  fullName: System.Data.Common.DbEnumerator.Reset()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Anger uppräknaren till sin ursprungliga position är före det första elementet i mängden."
  remarks: "En uppräknare är giltig så länge samlingen förblir oförändrad. Om ändringar görs i samlingen, till exempel lägga till, ändra eller ta bort element, uppräknaren blir inaktuella och nästa anrop till <xref:System.Data.Common.DbEnumerator.MoveNext%2A>eller Återställ utlöser <xref:System.InvalidOperationException>.</xref:System.InvalidOperationException> </xref:System.Data.Common.DbEnumerator.MoveNext%2A>"
  syntax:
    content: public void Reset ();
    parameters: []
  overload: System.Data.Common.DbEnumerator.Reset*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Samlingen har ändrats efter att uppräknaren skapades."
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.Data.Common.DbEnumerator.#ctor(System.Data.Common.DbDataReader)
  parent: System.Data.Common.DbEnumerator
  isExternal: false
  name: DbEnumerator(DbDataReader)
  nameWithType: DbEnumerator.DbEnumerator(DbDataReader)
  fullName: System.Data.Common.DbEnumerator.DbEnumerator(DbDataReader)
- uid: System.Data.Common.DbDataReader
  parent: System.Data.Common
  isExternal: false
  name: DbDataReader
  nameWithType: DbDataReader
  fullName: System.Data.Common.DbDataReader
- uid: System.Data.Common.DbEnumerator.#ctor(System.Data.IDataReader)
  parent: System.Data.Common.DbEnumerator
  isExternal: false
  name: DbEnumerator(IDataReader)
  nameWithType: DbEnumerator.DbEnumerator(IDataReader)
  fullName: System.Data.Common.DbEnumerator.DbEnumerator(IDataReader)
- uid: System.Data.IDataReader
  parent: System.Data
  isExternal: false
  name: IDataReader
  nameWithType: IDataReader
  fullName: System.Data.IDataReader
- uid: System.Data.Common.DbEnumerator.#ctor(System.Data.Common.DbDataReader,System.Boolean)
  parent: System.Data.Common.DbEnumerator
  isExternal: false
  name: DbEnumerator(DbDataReader,Boolean)
  nameWithType: DbEnumerator.DbEnumerator(DbDataReader,Boolean)
  fullName: System.Data.Common.DbEnumerator.DbEnumerator(DbDataReader,Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Data.Common.DbEnumerator.#ctor(System.Data.IDataReader,System.Boolean)
  parent: System.Data.Common.DbEnumerator
  isExternal: false
  name: DbEnumerator(IDataReader,Boolean)
  nameWithType: DbEnumerator.DbEnumerator(IDataReader,Boolean)
  fullName: System.Data.Common.DbEnumerator.DbEnumerator(IDataReader,Boolean)
- uid: System.Data.Common.DbEnumerator.Current
  parent: System.Data.Common.DbEnumerator
  isExternal: false
  name: Current
  nameWithType: DbEnumerator.Current
  fullName: System.Data.Common.DbEnumerator.Current
- uid: System.Data.Common.DbEnumerator.MoveNext
  parent: System.Data.Common.DbEnumerator
  isExternal: false
  name: MoveNext()
  nameWithType: DbEnumerator.MoveNext()
  fullName: System.Data.Common.DbEnumerator.MoveNext()
- uid: System.Data.Common.DbEnumerator.Reset
  parent: System.Data.Common.DbEnumerator
  isExternal: false
  name: Reset()
  nameWithType: DbEnumerator.Reset()
  fullName: System.Data.Common.DbEnumerator.Reset()
- uid: System.Data.Common.DbEnumerator.#ctor*
  parent: System.Data.Common.DbEnumerator
  isExternal: false
  name: DbEnumerator
  nameWithType: DbEnumerator.DbEnumerator
- uid: System.Data.Common.DbEnumerator.Current*
  parent: System.Data.Common.DbEnumerator
  isExternal: false
  name: Current
  nameWithType: DbEnumerator.Current
- uid: System.Data.Common.DbEnumerator.MoveNext*
  parent: System.Data.Common.DbEnumerator
  isExternal: false
  name: MoveNext
  nameWithType: DbEnumerator.MoveNext
- uid: System.Data.Common.DbEnumerator.Reset*
  parent: System.Data.Common.DbEnumerator
  isExternal: false
  name: Reset
  nameWithType: DbEnumerator.Reset
