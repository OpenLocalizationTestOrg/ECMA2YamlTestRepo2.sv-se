### YamlMime:ManagedReference
items:
- uid: System.Windows.PropertyPath
  id: PropertyPath
  children:
  - System.Windows.PropertyPath.#ctor(System.Object)
  - System.Windows.PropertyPath.#ctor(System.String,System.Object[])
  - System.Windows.PropertyPath.Path
  - System.Windows.PropertyPath.PathParameters
  langs:
  - csharp
  name: PropertyPath
  nameWithType: PropertyPath
  fullName: System.Windows.PropertyPath
  type: Class
  summary: "Implementerar en datastruktur för att beskriva en egenskap som en sökväg nedan en annan egenskap eller under ett ägande typen. Egenskapen sökvägar används i databindning till objekt och storyboards och tidslinjer för animeringar."
  remarks: "Den här klassen innehåller en sträng <xref:System.Windows.PropertyPath.Path%2A>, och listan över beroendeegenskaper som är <xref:System.Windows.PropertyPath.PathParameters%2A>i strängen<xref:System.Windows.PropertyPath.Path%2A>.</xref:System.Windows.PropertyPath.Path%2A> </xref:System.Windows.PropertyPath.PathParameters%2A> </xref:System.Windows.PropertyPath.Path%2A>       PropertyPath stöder två lägen för beteende: **läget** beskriver en sökväg till en egenskap som används som källa för en annan åtgärd. Det här läget används av den <xref:System.Windows.Data.Binding>klass som stöd för databindning.</xref:System.Windows.Data.Binding>       **Mål-läge** beskriver en sökväg till en egenskap som ska anges som en target-egenskap. Det här läget används av animering stöd storyboard och tidslinje setter.       Till exempel `Background.Opacity` är en sökväg i två steg. Denna sökväg innebär: hitta först den `Background` egenskapen för ett objekt, hämta värdeobjektet som den `Background` egenskap är inställd på och hämta värdet för den `Opacity` egenskapen för objektet.      <a name=&quot;xamlAttributeUsage_PropertyPath&quot;></a>## XAML attributsyntax ```   <object property=&quot;propertyPath&quot; .../>   ``` <a name=&quot;xamlValues_PropertyPath&quot;> </a> ## XAML värden *propertyPath* en sträng som ska utvärderas för att vara en enkla eller avancerade egenskapssökvägen.       Syntaxen för att ange en PropertyPath [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] är flexibel men komplexa och beskrivs i avsnittet separat [PropertyPath XAML-syntaxen](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: >-
      [System.ComponentModel.TypeConverter(typeof(System.Windows.PropertyPathConverter))]

      public sealed class PropertyPath
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Windows.PropertyPath.#ctor(System.Object)
  id: '#ctor(System.Object)'
  parent: System.Windows.PropertyPath
  langs:
  - csharp
  name: PropertyPath(Object)
  nameWithType: PropertyPath.PropertyPath(Object)
  fullName: System.Windows.PropertyPath.PropertyPath(Object)
  type: Constructor
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "Initierar en ny instans av den <xref href=&quot;System.Windows.PropertyPath&quot;> </xref> klass."
  remarks: "Den här konstruktorn har två helt olika användningar beroende på om den används för en käll-läge egenskapen sökväg för en bindning eller för ett enda steg egenskapssökvägen mål-läge för ett storyboard-mål.       Om du använder detta <xref:System.Windows.PropertyPath>i läget för en bindning `parameter` är en sträng som representerar ett egenskapsnamn eller kan vara en sträng som beskriver en &quot;stega igenom&quot; sökväg till egenskap i den [!INCLUDE[TLA2#tla_clr](~/add/includes/tla2sharptla-clr-md.md)] objektmodellen för objektet som används som källa för en bindning.</xref:System.Windows.PropertyPath> För egenskapen bindningssökväg är det tecken som identifierar ett &quot;steg&quot; en punkt (.). Indexerare referenser (inklusive flera indexerare och typen differentiering) stöds också. Mer information om syntaxen för strängen som uttryckligen används av <xref:System.Windows.Data.Binding>objekt, se <xref:System.Windows.Data.Binding.Path%2A?displayProperty=fullName>.</xref:System.Windows.Data.Binding.Path%2A?displayProperty=fullName> </xref:System.Windows.Data.Binding> En egenskap som används som källa för bindning behöver inte vara en beroendeegenskap. Om bindningen uppdaterar dubbelriktat måste egenskapen refererar till vara skrivskyddad. Observera också att bindningen målet måste vara en beroendeegenskap. Mer information finns i [bindning översikt över](~/add/includes/ajax-current-ext-md.md).       Om du använder detta <xref:System.Windows.PropertyPath>i målläge för en enda steg sökväg för en storyboard-mål, `parameter` anges vanligtvis som typen <xref:System.Windows.DependencyProperty>.</xref:System.Windows.DependencyProperty> </xref:System.Windows.PropertyPath> Du kan också ange en sträng som är i <xref:System.Windows.DependencyProperty.Name%2A>.</xref:System.Windows.DependencyProperty.Name%2A> Någon av dessa utvärderas till samma resultat, eftersom den lagras internt som en sträng. En angivna <xref:System.Windows.DependencyProperty>konverteras till en sträng via <xref:System.Windows.Markup.DependencyPropertyConverter>.</xref:System.Windows.Markup.DependencyPropertyConverter> </xref:System.Windows.DependencyProperty> <xref:System.Windows.Markup.DependencyPropertyConverter>Stöder ett kvalificerat namngivningsformat för-dependency properties, så att du kan ange en *typeName*.* propertyName* kvalificerade beroende egenskapssträng till konstruktorn PropertyPath i koden.</xref:System.Windows.Markup.DependencyPropertyConverter> Sökväg till egenskapsvärde beroende är detsamma som en sammansatt sökväg. En komplex sökväg <xref:System.Windows.PropertyPath>ska i stället skapas med den <xref:System.Windows.PropertyPath.%23ctor%2A?displayProperty=fullName>konstruktor.</xref:System.Windows.PropertyPath.%23ctor%2A?displayProperty=fullName> </xref:System.Windows.PropertyPath>"
  syntax:
    content: public PropertyPath (object parameter);
    parameters:
    - id: parameter
      type: System.Object
      description: "Sökväg till en egenskap som antingen beskriver en sökväg till en [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] egenskap eller en enda beroendeegenskap."
  overload: System.Windows.PropertyPath.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.PropertyPath.#ctor(System.String,System.Object[])
  id: '#ctor(System.String,System.Object[])'
  parent: System.Windows.PropertyPath
  langs:
  - csharp
  name: PropertyPath(String,Object[])
  nameWithType: PropertyPath.PropertyPath(String,Object[])
  fullName: System.Windows.PropertyPath.PropertyPath(String,Object[])
  type: Constructor
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "Initierar en ny instans av den <xref href=&quot;System.Windows.PropertyPath&quot;> </xref> klass med de angivna pathing tokensträng och parametrar."
  remarks: "Den här signaturen används vanligtvis endast för mål-läge <xref:System.Windows.PropertyPath>användningsområden med komplexa sökvägar.</xref:System.Windows.PropertyPath>       Den här konstruktorn stöder `params` för den `pathParameters` konstruktorargument. Därför kan du ange innehållet i `pathParameters` som en serie kommaavgränsade konstruktorargument som fyller på matrisen i stället för att behöva en matris av dimension och Fyll den med den `pathParameters` objekt. Varje objekt som du anger måste vara något av följande typer: <xref:System.Windows.DependencyProperty>, <xref:System.Reflection.PropertyInfo> <xref:System.ComponentModel.PropertyDescriptor>.</xref:System.ComponentModel.PropertyDescriptor> </xref:System.Reflection.PropertyInfo> </xref:System.Windows.DependencyProperty>       Mer information om kraven för parametrarna finns <xref:System.Windows.PropertyPath.Path%2A>och <xref:System.Windows.PropertyPath.PathParameters%2A>.</xref:System.Windows.PropertyPath.PathParameters%2A> </xref:System.Windows.PropertyPath.Path%2A>"
  syntax:
    content: public PropertyPath (string path, object[] pathParameters);
    parameters:
    - id: path
      type: System.String
      description: "En sträng som anger den <xref:System.Windows.PropertyPath.Path*>, i formatet principfilerna.</xref:System.Windows.PropertyPath.Path*>"
    - id: pathParameters
      type: System.Object[]
      description: "En matris med objekt som anger <xref:System.Windows.PropertyPath.PathParameters*>.</xref:System.Windows.PropertyPath.PathParameters*>"
  overload: System.Windows.PropertyPath.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.PropertyPath.Path
  id: Path
  parent: System.Windows.PropertyPath
  langs:
  - csharp
  name: Path
  nameWithType: PropertyPath.Path
  fullName: System.Windows.PropertyPath.Path
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "Hämtar eller anger den sträng som beskriver sökvägen."
  remarks: "The string contained in this property has three completely different meanings depending on whether a <xref:System.Windows.PropertyPath> is being used for a source-mode property path for a binding, for a target-mode single-step property path for a storyboard target, or for a complex path for a storyboard target.  \n  \n If using this <xref:System.Windows.PropertyPath> in source mode for a binding, Path is a string representing a property name, or can be a string that describes a \"step-through\" path to the property in the [!INCLUDE[TLA2#tla_clr](~/add/includes/tla2sharptla-clr-md.md)] object model of the object that is being used as the source for a binding. For a binding property path, the character that identifies a \"step\" is a dot (.). Indexer references (including multiple indexers, and type differentiation) are also supported. For more details on the syntax of the string as specifically used by the <xref:System.Windows.Data.Binding> object, see <xref:System.Windows.Data.Binding.Path%2A?displayProperty=fullName>. A property used as a binding source need not be a dependency property. If the binding updates two-way, the property source must be read-write. Also note that the binding target does have to be a dependency property. For details, see [Data Binding Overview](~/add/includes/ajax-current-ext-md.md).  \n  \n If using this <xref:System.Windows.PropertyPath> in target mode for a single-step path for a storyboard target, <xref:System.Windows.PropertyPath> is a string that is a *typeName*.*propertyName* qualified dependency property name string.  \n  \n If using this <xref:System.Windows.PropertyPath> for a complex path for a storyboard target, Path is a tokenized string format that describes the relationships of the various objects given in the <xref:System.Windows.PropertyPath.PathParameters%2A>.  \n  \n-   Each item in the array is specified in this format by the array index for the item enclosed in parentheses. For example, to specify the first item in the array, the string token is `(0)`.  \n  \n-   Relationships between items (\"steps\" in the path) are specified by a dot (.). The property forward of the dot is the first step in the path, the property after is the second step, and so on (you can specify steps beyond two). The last step in the chain always represents the property being animated.  \n  \n-   Items within collection properties are accessed with an indexer syntax, with the index within square brackets ([ and ]). The indexer is additive to the token representing the property. For example, the following is a two-step path, with the token combination in the first step specifying the second item from within the collection of that property: `(0)[1].(1)` . You cannot use an indexer on the last property in the chain; you cannot animate the actual collection position, you must animate a property on that object.  \n  \n The path string for a <xref:System.Windows.PropertyPath> is typically established through the constructors: the <xref:System.Windows.PropertyPath.%23ctor%28System.Object%29> signature for bindings or single-step storyboard targets, the [PropertyPath(String, Object\\[\\])](assetId:///M:System.Windows.PropertyPath.#ctor(System.String,System.Object[])?qualifyHint=False&autoUpgrade=False) signature for multi-step storyboard targets.  \n  \n **XAML:** When you use a <xref:System.Windows.PropertyPath> to describe a property reference in [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)], as an attribute value, the string that you specify is first handled by a type converter (<xref:System.Windows.PropertyPathConverter>). This type converter then processes the string and based on its syntax will call one of the <xref:System.Windows.PropertyPath> constructor signatures. This indirection through the type converter handling an attribute value is generally how you use <xref:System.Windows.PropertyPath> in [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)], rather than declaring a <xref:System.Windows.PropertyPath> object element and then applying specific values to attributes such as Path and <xref:System.Windows.PropertyPath.PathParameters%2A>. For more information, see [PropertyPath XAML Syntax](~/add/includes/ajax-current-ext-md.md).  \n  \n<a name=\"xamlTextUsage_Path\"></a>   \n## XAML Text Usage  \n Members of the <xref:System.Windows.PropertyPath> type are not typically set in a direct [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] syntax. See Remarks."
  syntax:
    content: public string Path { get; set; }
    return:
      type: System.String
      description: "Den sträng som beskriver sökvägen."
  overload: System.Windows.PropertyPath.Path*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.PropertyPath.PathParameters
  id: PathParameters
  parent: System.Windows.PropertyPath
  langs:
  - csharp
  name: PathParameters
  nameWithType: PropertyPath.PathParameters
  fullName: System.Windows.PropertyPath.PathParameters
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "Hämtar listan över parametrar som ska användas när sökvägen refererar till indexerade parametrar."
  remarks: "Egenskaperna för en <xref:System.Windows.PropertyPath>upprättas vanligtvis via konstruktorer.</xref:System.Windows.PropertyPath> För att ställa in PathParameters, den <xref:System.Windows.PropertyPath.%23ctor%2A>konstruktorn är speciellt användbart eftersom den `pathParameters` konstruktorargument utses `params`, vilket innebär att du inte behöver skapa eller dimension en matris för konstruktion.</xref:System.Windows.PropertyPath.%23ctor%2A> Du kan bara ange varje medlem i matrisen som en extra parameter.       Om den slutliga egenskap som är målet är en <xref:System.Windows.Freezable>Skriv värdet kommer att klonas.</xref:System.Windows.Freezable> Mer information finns i [Storyboards översikt](~/add/includes/ajax-current-ext-md.md).       Faktiska utvärdering av egenskapen kedjan utförs av storyboard animering mekanismer. På den <xref:System.Windows.PropertyPath>nivån, utförs ingen verifiering för att kontrollera att stegen för sökvägen ansluta alls.</xref:System.Windows.PropertyPath> Du kan exempelvis skapa sökväg till en egenskap som har <xref:System.Windows.Controls.Control.BackgroundProperty?displayProperty=fullName>som det första steget och <xref:System.Windows.FrameworkElement.FlowDirectionProperty?displayProperty=fullName>som det andra steget.</xref:System.Windows.FrameworkElement.FlowDirectionProperty?displayProperty=fullName> </xref:System.Windows.Controls.Control.BackgroundProperty?displayProperty=fullName> Men en egenskapssökvägen skulle misslyckas om faktiskt används som mål, eftersom penseln som fyller <xref:System.Windows.Controls.Control.BackgroundProperty?displayProperty=fullName>inte har en <xref:System.Windows.FrameworkElement.FlowDirection%2A?displayProperty=fullName>egenskap.</xref:System.Windows.FrameworkElement.FlowDirection%2A?displayProperty=fullName> </xref:System.Windows.Controls.Control.BackgroundProperty?displayProperty=fullName> Ogiltig egenskap sökvägar misslyckas automatiskt. Mer information finns i [Storyboards översikt](../Topic/Storyboards%20Overview.md).       **XAML:** när du använder en <xref:System.Windows.PropertyPath>att beskriva en referens i [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)], enligt ett attributvärde strängen som du anger först hanteras av en typkonverterare (<xref:System.Windows.PropertyPathConverter>).</xref:System.Windows.PropertyPathConverter> </xref:System.Windows.PropertyPath> Den här typkonverterare behandlar strängen och baserat på dess syntax ska anropa en av de <xref:System.Windows.PropertyPath>konstruktorn signaturer.</xref:System.Windows.PropertyPath> Detta trick via typkonverterare som hanterar ett attributvärde är generellt sett hur du använder <xref:System.Windows.PropertyPath>i [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)], i stället för att deklarera en <xref:System.Windows.PropertyPath>objekt-elementet och tillämpa specifika värden på attribut som <xref:System.Windows.PropertyPath.Path%2A>och PathParameters.</xref:System.Windows.PropertyPath.Path%2A> </xref:System.Windows.PropertyPath> </xref:System.Windows.PropertyPath> Mer information finns i [PropertyPath XAML-syntaxen](~/add/includes/ajax-current-ext-md.md).      <a name=&quot;xamlTextUsage_PathParameters&quot;></a>## XAML Text användning medlemmar i den <xref:System.Windows.PropertyPath>typen vanligtvis inte är inställda i en direkt [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] syntax.</xref:System.Windows.PropertyPath> Se anmärkning."
  syntax:
    content: public System.Collections.ObjectModel.Collection<object> PathParameters { get; }
    return:
      type: System.Collections.ObjectModel.Collection{System.Object}
      description: "Parameterlista."
  overload: System.Windows.PropertyPath.PathParameters*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Windows.PropertyPath.#ctor(System.Object)
  parent: System.Windows.PropertyPath
  isExternal: false
  name: PropertyPath(Object)
  nameWithType: PropertyPath.PropertyPath(Object)
  fullName: System.Windows.PropertyPath.PropertyPath(Object)
- uid: System.Windows.PropertyPath.#ctor(System.String,System.Object[])
  parent: System.Windows.PropertyPath
  isExternal: false
  name: PropertyPath(String,Object[])
  nameWithType: PropertyPath.PropertyPath(String,Object[])
  fullName: System.Windows.PropertyPath.PropertyPath(String,Object[])
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Object[]
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object[]
  spec.csharp:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: Object[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Windows.PropertyPath.Path
  parent: System.Windows.PropertyPath
  isExternal: false
  name: Path
  nameWithType: PropertyPath.Path
  fullName: System.Windows.PropertyPath.Path
- uid: System.Windows.PropertyPath.PathParameters
  parent: System.Windows.PropertyPath
  isExternal: false
  name: PathParameters
  nameWithType: PropertyPath.PathParameters
  fullName: System.Windows.PropertyPath.PathParameters
- uid: System.Collections.ObjectModel.Collection{System.Object}
  parent: System.Collections.ObjectModel
  isExternal: true
  name: Collection<Object>
  nameWithType: Collection<Object>
  fullName: System.Collections.ObjectModel.Collection<System.Object>
  spec.csharp:
  - uid: System.Collections.ObjectModel.Collection`1
    name: Collection
    nameWithType: Collection
    fullName: Collection<System.Object>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: Object
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Windows.PropertyPath.#ctor*
  parent: System.Windows.PropertyPath
  isExternal: false
  name: PropertyPath
  nameWithType: PropertyPath.PropertyPath
- uid: System.Windows.PropertyPath.Path*
  parent: System.Windows.PropertyPath
  isExternal: false
  name: Path
  nameWithType: PropertyPath.Path
- uid: System.Windows.PropertyPath.PathParameters*
  parent: System.Windows.PropertyPath
  isExternal: false
  name: PathParameters
  nameWithType: PropertyPath.PathParameters
