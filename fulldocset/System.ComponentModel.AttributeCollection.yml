### YamlMime:ManagedReference
items:
- uid: System.ComponentModel.AttributeCollection
  id: AttributeCollection
  children:
  - System.ComponentModel.AttributeCollection.#ctor
  - System.ComponentModel.AttributeCollection.#ctor(System.Attribute[])
  - System.ComponentModel.AttributeCollection.Attributes
  - System.ComponentModel.AttributeCollection.Contains(System.Attribute)
  - System.ComponentModel.AttributeCollection.Contains(System.Attribute[])
  - System.ComponentModel.AttributeCollection.CopyTo(System.Array,System.Int32)
  - System.ComponentModel.AttributeCollection.Count
  - System.ComponentModel.AttributeCollection.Empty
  - System.ComponentModel.AttributeCollection.FromExisting(System.ComponentModel.AttributeCollection,System.Attribute[])
  - System.ComponentModel.AttributeCollection.GetDefaultAttribute(System.Type)
  - System.ComponentModel.AttributeCollection.GetEnumerator
  - System.ComponentModel.AttributeCollection.Item(System.Int32)
  - System.ComponentModel.AttributeCollection.Item(System.Type)
  - System.ComponentModel.AttributeCollection.Matches(System.Attribute)
  - System.ComponentModel.AttributeCollection.Matches(System.Attribute[])
  - System.ComponentModel.AttributeCollection.System#Collections#ICollection#Count
  - System.ComponentModel.AttributeCollection.System#Collections#ICollection#IsSynchronized
  - System.ComponentModel.AttributeCollection.System#Collections#ICollection#SyncRoot
  - System.ComponentModel.AttributeCollection.System#Collections#IEnumerable#GetEnumerator
  langs:
  - csharp
  name: AttributeCollection
  nameWithType: AttributeCollection
  fullName: System.ComponentModel.AttributeCollection
  type: Class
  summary: "Representerar en samling attribut."
  remarks: "Klassen AttributeCollection är skrivskyddade. den implementerar inte metoder för att lägga till eller ta bort attribut. Du måste ärva från den här klassen för att implementera dessa metoder.       Använd den <xref:System.ComponentModel.AttributeCollection.Count%2A>egenskapen för att ta reda på antalet attribut som finns i samlingen.</xref:System.ComponentModel.AttributeCollection.Count%2A>       Du kan också använda metoderna i klassen för att fråga samlingen om dess innehåll. Anropa den <xref:System.ComponentModel.AttributeCollection.Contains%2A>metod för att kontrollera att ett attribut eller attributet matris finns i samlingen.</xref:System.ComponentModel.AttributeCollection.Contains%2A> Anropa den <xref:System.ComponentModel.AttributeCollection.Matches%2A>metod för att kontrollera att ett specificerat attribut eller en matris med attribut finns i samlingen och att värdena för de angivna attributen är samma som värden i samlingen.</xref:System.ComponentModel.AttributeCollection.Matches%2A>       Även om de flesta attribut har standardvärden, krävs inte standardvärden. Om attributet har inget standardvärde `null` returneras från egenskapen indexerade som tar en typ. När du definierar dina egna attribut, kan du deklarera ett standardvärde genom att tillhandahålla en konstruktor som inte tar några argument eller definiera en offentlig statiska fält för din typ av attribut med namnet &quot;Standard&quot;."
  example:
  - "The first code example checks to see whether the <xref:System.ComponentModel.BrowsableAttribute> has been set in this collection. The second code example gets the actual value of the <xref:System.ComponentModel.DescriptionAttribute> for a button. Both examples require that `button1` and `textBox1` have been created on a form. When using attributes, verify that an attribute has been set, or access its value.  \n  \n [!code-cpp[Classic AttributeCollection Example#1](~/add/codesnippet/cpp/t-system.componentmodel._150_1.cpp)]\n [!code-cs[Classic AttributeCollection Example#1](~/add/codesnippet/csharp/t-system.componentmodel._150_1.cs)]\n [!code-vb[Classic AttributeCollection Example#1](~/add/codesnippet/visualbasic/t-system.componentmodel._150_1.vb)]  \n  \n [!code-cpp[Classic AttributeCollection Example#2](~/add/codesnippet/cpp/t-system.componentmodel._150_2.cpp)]\n [!code-cs[Classic AttributeCollection Example#2](~/add/codesnippet/csharp/t-system.componentmodel._150_2.cs)]\n [!code-vb[Classic AttributeCollection Example#2](~/add/codesnippet/visualbasic/t-system.componentmodel._150_2.vb)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public class AttributeCollection : System.Collections.ICollection
  inheritance:
  - System.Object
  implements:
  - System.Collections.ICollection
  inheritedMembers: []
  platform:
  - net462
- uid: System.ComponentModel.AttributeCollection.#ctor
  id: '#ctor'
  parent: System.ComponentModel.AttributeCollection
  langs:
  - csharp
  name: AttributeCollection()
  nameWithType: AttributeCollection.AttributeCollection()
  fullName: System.ComponentModel.AttributeCollection.AttributeCollection()
  type: Constructor
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Initierar en ny instans av den <xref href=&quot;System.ComponentModel.AttributeCollection&quot;> </xref> klass."
  syntax:
    content: protected AttributeCollection ();
    parameters: []
  overload: System.ComponentModel.AttributeCollection.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.AttributeCollection.#ctor(System.Attribute[])
  id: '#ctor(System.Attribute[])'
  parent: System.ComponentModel.AttributeCollection
  langs:
  - csharp
  name: AttributeCollection(Attribute[])
  nameWithType: AttributeCollection.AttributeCollection(Attribute[])
  fullName: System.ComponentModel.AttributeCollection.AttributeCollection(Attribute[])
  type: Constructor
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Initierar en ny instans av den <xref href=&quot;System.ComponentModel.AttributeCollection&quot;> </xref> klass."
  remarks: ''
  example:
  - "The following code example creates a new <xref:System.ComponentModel.AttributeCollection> using the attributes on `button1`. It assumes that `button1` has been created on a form.  \n  \n [!code-cpp[Classic AttributeCollection.AttributeCollection Example#1](~/add/codesnippet/cpp/m-system.componentmodel._17_1.cpp)]\n [!code-cs[Classic AttributeCollection.AttributeCollection Example#1](~/add/codesnippet/csharp/m-system.componentmodel._17_1.cs)]\n [!code-vb[Classic AttributeCollection.AttributeCollection Example#1](~/add/codesnippet/visualbasic/m-system.componentmodel._17_1.vb)]"
  syntax:
    content: public AttributeCollection (Attribute[] attributes);
    parameters:
    - id: attributes
      type: System.Attribute[]
      description: "En matris av typen <xref:System.Attribute>som ger attributen för den här samlingen.</xref:System.Attribute>"
  overload: System.ComponentModel.AttributeCollection.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>attributes</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.ComponentModel.AttributeCollection.Attributes
  id: Attributes
  parent: System.ComponentModel.AttributeCollection
  langs:
  - csharp
  name: Attributes
  nameWithType: AttributeCollection.Attributes
  fullName: System.ComponentModel.AttributeCollection.Attributes
  type: Property
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Hämtar samlingen attribut."
  syntax:
    content: protected virtual Attribute[] Attributes { get; }
    return:
      type: System.Attribute[]
      description: "Attributet-samling."
  overload: System.ComponentModel.AttributeCollection.Attributes*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.AttributeCollection.Contains(System.Attribute)
  id: Contains(System.Attribute)
  parent: System.ComponentModel.AttributeCollection
  langs:
  - csharp
  name: Contains(Attribute)
  nameWithType: AttributeCollection.Contains(Attribute)
  fullName: System.ComponentModel.AttributeCollection.Contains(Attribute)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Bestämmer om den här samlingen av attribut har det angivna attributet."
  remarks: "Samlingen har det angivna attributet om typen för attributet finns i samlingen, och om värdet för det angivna attributet är detsamma som värdet på instansen av attributet i samlingen.       Skillnaden mellan de <xref:System.ComponentModel.AttributeCollection.Matches%2A>och innehåller metoder som <xref:System.ComponentModel.AttributeCollection.Matches%2A>anrop av <xref:System.Attribute.Match%2A>metod på ett attribut och innehåller anrop den <xref:System.Object.Equals%2A>metoden.</xref:System.Object.Equals%2A> </xref:System.Attribute.Match%2A> </xref:System.ComponentModel.AttributeCollection.Matches%2A> </xref:System.ComponentModel.AttributeCollection.Matches%2A>       Metoderna gör samma sak för de flesta attribut. För attribut som kan ha flera flaggor dock <xref:System.Attribute.Match%2A>implementeras normalt så att den returnerar `true` om någon av flaggorna är uppfyllda.</xref:System.Attribute.Match%2A> Tänk dig ett dataattribut bindning med booleska flaggor &quot;SupportsSql&quot;, &quot;SupportsOleDb&quot; och &quot;SupportsXml&quot;. Det här attributet kan finnas på en egenskap som har stöd för alla tre metoder för databindning. Det ofta är fallet programmerare behöver veta endast om en viss metod är tillgänglig, inte alla tre. Därför programmerare kan använda <xref:System.Attribute.Match%2A>med en instans av attributet som innehåller endast flaggor i programmerare måste.</xref:System.Attribute.Match%2A>"
  example:
  - "The following code example checks to see whether the collection has a <xref:System.ComponentModel.BrowsableAttribute> set to `true`. It assumes that `button1` and `textBox1` have been created on a form.  \n  \n [!code-vb[Classic AttributeCollection.Contains Example#1](~/add/codesnippet/visualbasic/m-system.componentmodel._16_1.vb)]\n [!code-cs[Classic AttributeCollection.Contains Example#1](~/add/codesnippet/csharp/m-system.componentmodel._16_1.cs)]\n [!code-cpp[Classic AttributeCollection.Contains Example#1](~/add/codesnippet/cpp/m-system.componentmodel._16_1.cpp)]"
  syntax:
    content: public bool Contains (Attribute attribute);
    parameters:
    - id: attribute
      type: System.Attribute
      description: "En <xref:System.Attribute>att hitta i samlingen.</xref:System.Attribute>"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Om samlingen innehåller attributet eller standardattributet för typ av attribut; Annars <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.ComponentModel.AttributeCollection.Contains*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.AttributeCollection.Contains(System.Attribute[])
  id: Contains(System.Attribute[])
  parent: System.ComponentModel.AttributeCollection
  langs:
  - csharp
  name: Contains(Attribute[])
  nameWithType: AttributeCollection.Contains(Attribute[])
  fullName: System.ComponentModel.AttributeCollection.Contains(Attribute[])
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Anger om samlingen attributet innehåller alla de angivna attributen i matrisen attribut."
  remarks: "Den angivna matrisen med attribut finns i den här samlingen om alla angivna attributtyper finns i samlingen och varje attribut i den angivna matrisen är samma som ett attribut i samlingen."
  example:
  - "The following code example compares the attributes in `button1` and `textBox1` to see whether the attributes for the button are contained in the attributes for the text box. It assumes that both `button1` and `textBox1` have been created on a form.  \n  \n [!code-cs[Classic AttributeCollection.Contains1 Example#1](~/add/codesnippet/csharp/m-system.componentmodel._42_1.cs)]\n [!code-vb[Classic AttributeCollection.Contains1 Example#1](~/add/codesnippet/visualbasic/m-system.componentmodel._42_1.vb)]\n [!code-cpp[Classic AttributeCollection.Contains1 Example#1](~/add/codesnippet/cpp/m-system.componentmodel._42_1.cpp)]"
  syntax:
    content: public bool Contains (Attribute[] attributes);
    parameters:
    - id: attributes
      type: System.Attribute[]
      description: "En matris av typen <xref:System.Attribute>att hitta i samlingen.</xref:System.Attribute>"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Om samlingen innehåller alla attribut; Annars <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.ComponentModel.AttributeCollection.Contains*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.AttributeCollection.CopyTo(System.Array,System.Int32)
  id: CopyTo(System.Array,System.Int32)
  parent: System.ComponentModel.AttributeCollection
  langs:
  - csharp
  name: CopyTo(Array,Int32)
  nameWithType: AttributeCollection.CopyTo(Array,Int32)
  fullName: System.ComponentModel.AttributeCollection.CopyTo(Array,Int32)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Kopierar samlingen till en matris som börjar med det angivna indexet."
  syntax:
    content: public void CopyTo (Array array, int index);
    parameters:
    - id: array
      type: System.Array
      description: "Den <xref:System.Array>att samlingen för att kopiera.</xref:System.Array>"
    - id: index
      type: System.Int32
      description: "Indexet för att starta från."
  overload: System.ComponentModel.AttributeCollection.CopyTo*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.AttributeCollection.Count
  id: Count
  parent: System.ComponentModel.AttributeCollection
  langs:
  - csharp
  name: Count
  nameWithType: AttributeCollection.Count
  fullName: System.ComponentModel.AttributeCollection.Count
  type: Property
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Hämtar antalet attribut."
  remarks: "Du kan använda egenskapen Count för att ange gränserna för en loop som upprepas i en samling objekt. Om inte mängden är nollbaserade, måste du använda `Count - 1` som den övre gränsen för loopen."
  example:
  - "The following code example uses the Count property to print the number of properties on `button1` in a text box. It assumes that `button1` and `textBox1` have been created on a form.  \n  \n [!code-cs[Classic AttributeCollection.Count Example#1](~/add/codesnippet/csharp/p-system.componentmodel._11_1.cs)]\n [!code-vb[Classic AttributeCollection.Count Example#1](~/add/codesnippet/visualbasic/p-system.componentmodel._11_1.vb)]\n [!code-cpp[Classic AttributeCollection.Count Example#1](~/add/codesnippet/cpp/p-system.componentmodel._11_1.cpp)]"
  syntax:
    content: public int Count { get; }
    return:
      type: System.Int32
      description: "Antalet attribut."
  overload: System.ComponentModel.AttributeCollection.Count*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.AttributeCollection.Empty
  id: Empty
  parent: System.ComponentModel.AttributeCollection
  langs:
  - csharp
  name: Empty
  nameWithType: AttributeCollection.Empty
  fullName: System.ComponentModel.AttributeCollection.Empty
  type: Field
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Anger en tom samling som du kan använda i stället för att skapa en ny. Det här fältet är skrivskyddat."
  syntax:
    content: public static readonly System.ComponentModel.AttributeCollection Empty;
    return:
      type: System.ComponentModel.AttributeCollection
      description: "Som ska läggas till."
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.AttributeCollection.FromExisting(System.ComponentModel.AttributeCollection,System.Attribute[])
  id: FromExisting(System.ComponentModel.AttributeCollection,System.Attribute[])
  parent: System.ComponentModel.AttributeCollection
  langs:
  - csharp
  name: FromExisting(AttributeCollection,Attribute[])
  nameWithType: AttributeCollection.FromExisting(AttributeCollection,Attribute[])
  fullName: System.ComponentModel.AttributeCollection.FromExisting(AttributeCollection,Attribute[])
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Skapar en ny <xref href=&quot;System.ComponentModel.AttributeCollection&quot;> </xref> från en befintlig <xref href=&quot;System.ComponentModel.AttributeCollection&quot;> </xref>."
  remarks: "Om den `newAttributes` -parameter har angetts dess <xref:System.Attribute>transaktioner slås samman med den `existing` parameter.</xref:System.Attribute>"
  syntax:
    content: public static System.ComponentModel.AttributeCollection FromExisting (System.ComponentModel.AttributeCollection existing, Attribute[] newAttributes);
    parameters:
    - id: existing
      type: System.ComponentModel.AttributeCollection
      description: "En <xref href=&quot;System.ComponentModel.AttributeCollection&quot;> </xref> som du vill skapa kopian."
    - id: newAttributes
      type: System.Attribute[]
      description: "En matris av typen <xref:System.Attribute>som ger attributen för den här samlingen.</xref:System.Attribute> Can be <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
    return:
      type: System.ComponentModel.AttributeCollection
      description: "A new <xref href=&quot;System.ComponentModel.AttributeCollection&quot;></xref> that is a copy of <code>existing</code>."
  overload: System.ComponentModel.AttributeCollection.FromExisting*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>existing</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.ComponentModel.AttributeCollection.GetDefaultAttribute(System.Type)
  id: GetDefaultAttribute(System.Type)
  parent: System.ComponentModel.AttributeCollection
  langs:
  - csharp
  name: GetDefaultAttribute(Type)
  nameWithType: AttributeCollection.GetDefaultAttribute(Type)
  fullName: System.ComponentModel.AttributeCollection.GetDefaultAttribute(Type)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Returnerar den standard <xref:System.Attribute>i en viss <xref:System.Type>.</xref:System.Type> </xref:System.Attribute>"
  syntax:
    content: protected Attribute GetDefaultAttribute (Type attributeType);
    parameters:
    - id: attributeType
      type: System.Type
      description: "Den <xref:System.Type>av attributet som ska hämtas.</xref:System.Type>"
    return:
      type: System.Attribute
      description: "Standard <xref:System.Attribute>för en given <code> attributeType </code>.</xref:System.Attribute>"
  overload: System.ComponentModel.AttributeCollection.GetDefaultAttribute*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.AttributeCollection.GetEnumerator
  id: GetEnumerator
  parent: System.ComponentModel.AttributeCollection
  langs:
  - csharp
  name: GetEnumerator()
  nameWithType: AttributeCollection.GetEnumerator()
  fullName: System.ComponentModel.AttributeCollection.GetEnumerator()
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Hämtar en uppräknare för den här samlingen."
  remarks: ''
  example:
  - "The following code example gets an enumerator for the attributes on `button1`. It uses the enumerator to print the names of the attributes in the collection. It assumes that `button1` and `textBox1` have been created on a form.  \n  \n [!code-cpp[Classic AttributeCollection.GetEnumerator Example#1](~/add/codesnippet/cpp/m-system.componentmodel._31_1.cpp)]\n [!code-cs[Classic AttributeCollection.GetEnumerator Example#1](~/add/codesnippet/csharp/m-system.componentmodel._31_1.cs)]\n [!code-vb[Classic AttributeCollection.GetEnumerator Example#1](~/add/codesnippet/visualbasic/m-system.componentmodel._31_1.vb)]"
  syntax:
    content: public System.Collections.IEnumerator GetEnumerator ();
    parameters: []
    return:
      type: System.Collections.IEnumerator
      description: "En uppräknare av typen <xref:System.Collections.IEnumerator>.</xref:System.Collections.IEnumerator>"
  overload: System.ComponentModel.AttributeCollection.GetEnumerator*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.AttributeCollection.Item(System.Int32)
  id: Item(System.Int32)
  parent: System.ComponentModel.AttributeCollection
  langs:
  - csharp
  name: Item(Int32)
  nameWithType: AttributeCollection.Item(Int32)
  fullName: System.ComponentModel.AttributeCollection.Item(Int32)
  type: Property
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Hämtar attributet med det angivna antalet index."
  remarks: "Antalet index är nollbaserade. Därför måste du ta bort 1 från numeriska positionen för en viss <xref:System.Attribute>åtkomst till den <xref:System.Attribute>.</xref:System.Attribute> </xref:System.Attribute> Till exempel för att hämta tredje <xref:System.Attribute>, måste du ange `myColl[2]`.</xref:System.Attribute>"
  example:
  - "The following code example uses the Item property to print the name of the <xref:System.Attribute> specified by the index number in a text box. Because the index number is zero-based, this code example prints the name of the second <xref:System.Attribute> in a text box. It assumes `button1` and `textBox1` have been created on a form.  \n  \n [!code-cs[Classic AttributeCollection.this Example#1](~/add/codesnippet/csharp/p-system.componentmodel._5_1.cs)]\n [!code-vb[Classic AttributeCollection.this Example#1](~/add/codesnippet/visualbasic/p-system.componentmodel._5_1.vb)]\n [!code-cpp[Classic AttributeCollection.this Example#1](~/add/codesnippet/cpp/p-system.componentmodel._5_1.cpp)]"
  syntax:
    content: public virtual Attribute this[int index] { get; }
    parameters:
    - id: index
      type: System.Int32
      description: "Det nollbaserade indexet för <xref href=&quot;System.ComponentModel.AttributeCollection&quot;> </xref>."
    return:
      type: System.Attribute
      description: "Den <xref:System.Attribute>med det angivna antalet index.</xref:System.Attribute>"
  overload: System.ComponentModel.AttributeCollection.Item*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.AttributeCollection.Item(System.Type)
  id: Item(System.Type)
  parent: System.ComponentModel.AttributeCollection
  langs:
  - csharp
  name: Item(Type)
  nameWithType: AttributeCollection.Item(Type)
  fullName: System.ComponentModel.AttributeCollection.Item(Type)
  type: Property
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Hämtar attributet med den angivna typen."
  remarks: "Om attributet inte finns i samlingen, returnerar standardvärdet för typ av attribut i den här egenskapen."
  example:
  - "The following code example gets the <xref:System.ComponentModel.DesignerAttribute> from the collection and prints its value. It assumes that `button1` and `textBox1` have been created on a form.  \n  \n For this code example to run, you must provide the fully qualified assembly name. For information about how to obtain the fully qualified assembly name, see [Assembly Names](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[Classic AttributeCollection.this1 Example#1](~/add/codesnippet/csharp/p-system.componentmodel._9_1.cs)]\n [!code-cpp[Classic AttributeCollection.this1 Example#1](~/add/codesnippet/cpp/p-system.componentmodel._9_1.cpp)]\n [!code-vb[Classic AttributeCollection.this1 Example#1](~/add/codesnippet/visualbasic/p-system.componentmodel._9_1.vb)]"
  syntax:
    content: public virtual Attribute this[Type attributeType] { get; }
    parameters:
    - id: attributeType
      type: System.Type
      description: "Den <xref:System.Type>av den <xref:System.Attribute>att hämta från samlingen.</xref:System.Attribute> </xref:System.Type>"
    return:
      type: System.Attribute
      description: "Den <xref:System.Attribute>med den angivna typen, eller om attributet inte finns, standardvärdet för attributtypen.</xref:System.Attribute>"
  overload: System.ComponentModel.AttributeCollection.Item*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.AttributeCollection.Matches(System.Attribute)
  id: Matches(System.Attribute)
  parent: System.ComponentModel.AttributeCollection
  langs:
  - csharp
  name: Matches(Attribute)
  nameWithType: AttributeCollection.Matches(Attribute)
  fullName: System.ComponentModel.AttributeCollection.Matches(Attribute)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Anger om ett specifikt attribut är samma som ett attribut i samlingen."
  remarks: "Ett attribut kan ge stöd för matchning.       Skillnaden mellan matchningarna och <xref:System.ComponentModel.AttributeCollection.Contains%2A>metoder är att matchar anropar den <xref:System.Attribute.Match%2A>metod på ett attribut och <xref:System.ComponentModel.AttributeCollection.Contains%2A>anrop av <xref:System.Object.Equals%2A>metod.</xref:System.Object.Equals%2A> </xref:System.ComponentModel.AttributeCollection.Contains%2A> </xref:System.Attribute.Match%2A> </xref:System.ComponentModel.AttributeCollection.Contains%2A>       Metoderna gör samma sak för de flesta attribut. För attribut som kan ha flera flaggor dock <xref:System.Attribute.Match%2A>implementeras normalt så att den returnerar `true` om någon av flaggorna är uppfyllda.</xref:System.Attribute.Match%2A> Tänk dig ett dataattribut bindning med booleska flaggor &quot;SupportsSql&quot;, &quot;SupportsOleDb&quot; och &quot;SupportsXml&quot;. Det här attributet kan finnas på en egenskap som har stöd för alla tre databindning metoder. Det ofta är fallet programmerare behöver veta endast om en viss metod är tillgänglig, inte alla tre. Därför programmerare kan använda <xref:System.Attribute.Match%2A>med en instans av attributet som innehåller endast flaggor i programmerare måste.</xref:System.Attribute.Match%2A>"
  example:
  - "The following code example verifies that the <xref:System.ComponentModel.BrowsableAttribute> is a member of the collection and that it has been set to `true`. It assumes that `button1` and `textBox1` have been created on a form.  \n  \n [!code-cpp[Classic AttributeCollection.Matches Example#1](~/add/codesnippet/cpp/m-system.componentmodel._11_1.cpp)]\n [!code-vb[Classic AttributeCollection.Matches Example#1](~/add/codesnippet/visualbasic/m-system.componentmodel._11_1.vb)]\n [!code-cs[Classic AttributeCollection.Matches Example#1](~/add/codesnippet/csharp/m-system.componentmodel._11_1.cs)]"
  syntax:
    content: public bool Matches (Attribute attribute);
    parameters:
    - id: attribute
      type: System.Attribute
      description: "En instans av <xref:System.Attribute>ska jämföras med attribut i den här samlingen.</xref:System.Attribute>"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Om attributet ingår i samlingen och har samma värde som attributet i samlingen; Annars <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.ComponentModel.AttributeCollection.Matches*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.AttributeCollection.Matches(System.Attribute[])
  id: Matches(System.Attribute[])
  parent: System.ComponentModel.AttributeCollection
  langs:
  - csharp
  name: Matches(Attribute[])
  nameWithType: AttributeCollection.Matches(Attribute[])
  fullName: System.ComponentModel.AttributeCollection.Matches(Attribute[])
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Avgör om attributen i den angivna matrisen är samma som attribut i samlingen."
  remarks: "Ett attribut kan ge stöd för matchning."
  example:
  - "The following code example compares the attributes in a button and a text box to see whether they match. It assumes that `button1` and `textBox1` have been created on a form.  \n  \n [!code-cpp[Classic AttributeCollection.Matches1 Example#1](~/add/codesnippet/cpp/m-system.componentmodel._40_1.cpp)]\n [!code-cs[Classic AttributeCollection.Matches1 Example#1](~/add/codesnippet/csharp/m-system.componentmodel._40_1.cs)]\n [!code-vb[Classic AttributeCollection.Matches1 Example#1](~/add/codesnippet/visualbasic/m-system.componentmodel._40_1.vb)]"
  syntax:
    content: public bool Matches (Attribute[] attributes);
    parameters:
    - id: attributes
      type: System.Attribute[]
      description: "En matris med <xref href=&quot;System.CodeDom.MemberAttributes&quot;> </xref> ska jämföras med attribut i den här samlingen."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Om alla attribut i matrisen finns i samlingen och har samma värden som attribut i samlingen; Annars <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.ComponentModel.AttributeCollection.Matches*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.AttributeCollection.System#Collections#ICollection#Count
  id: System#Collections#ICollection#Count
  isEii: true
  parent: System.ComponentModel.AttributeCollection
  langs:
  - csharp
  name: System.Collections.ICollection.Count
  nameWithType: AttributeCollection.System.Collections.ICollection.Count
  fullName: System.ComponentModel.AttributeCollection.System.Collections.ICollection.Count
  type: Property
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Hämtar antalet element i samlingen."
  syntax:
    content: int System.Collections.ICollection.Count { get; }
    return:
      type: System.Int32
      description: "Antal element som ingår i samlingen."
  overload: System.ComponentModel.AttributeCollection.System#Collections#ICollection#Count*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.AttributeCollection.System#Collections#ICollection#IsSynchronized
  id: System#Collections#ICollection#IsSynchronized
  isEii: true
  parent: System.ComponentModel.AttributeCollection
  langs:
  - csharp
  name: System.Collections.ICollection.IsSynchronized
  nameWithType: AttributeCollection.System.Collections.ICollection.IsSynchronized
  fullName: System.ComponentModel.AttributeCollection.System.Collections.ICollection.IsSynchronized
  type: Property
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Hämtar ett värde som anger om åtkomst till samlingen synkroniseras (trådsäkra)."
  syntax:
    content: bool System.Collections.ICollection.IsSynchronized { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Om åtkomst till samlingen synkroniseras (trådsäkra); Annars <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.ComponentModel.AttributeCollection.System#Collections#ICollection#IsSynchronized*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.AttributeCollection.System#Collections#ICollection#SyncRoot
  id: System#Collections#ICollection#SyncRoot
  isEii: true
  parent: System.ComponentModel.AttributeCollection
  langs:
  - csharp
  name: System.Collections.ICollection.SyncRoot
  nameWithType: AttributeCollection.System.Collections.ICollection.SyncRoot
  fullName: System.ComponentModel.AttributeCollection.System.Collections.ICollection.SyncRoot
  type: Property
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Hämtar ett objekt som kan användas för att synkronisera åtkomst till samlingen."
  syntax:
    content: object System.Collections.ICollection.SyncRoot { get; }
    return:
      type: System.Object
      description: "Ett objekt som kan användas för att synkronisera åtkomst till samlingen."
  overload: System.ComponentModel.AttributeCollection.System#Collections#ICollection#SyncRoot*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.AttributeCollection.System#Collections#IEnumerable#GetEnumerator
  id: System#Collections#IEnumerable#GetEnumerator
  isEii: true
  parent: System.ComponentModel.AttributeCollection
  langs:
  - csharp
  name: System.Collections.IEnumerable.GetEnumerator()
  nameWithType: AttributeCollection.System.Collections.IEnumerable.GetEnumerator()
  fullName: System.ComponentModel.AttributeCollection.System.Collections.IEnumerable.GetEnumerator()
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Returnerar en <xref:System.Collections.IEnumerator>för <xref:System.Collections.IDictionary>.</xref:System.Collections.IDictionary> </xref:System.Collections.IEnumerator>"
  syntax:
    content: System.Collections.IEnumerator IEnumerable.GetEnumerator ();
    parameters: []
    return:
      type: System.Collections.IEnumerator
      description: "En <xref:System.Collections.IEnumerator>för <xref:System.Collections.IDictionary>.</xref:System.Collections.IDictionary> </xref:System.Collections.IEnumerator>"
  overload: System.ComponentModel.AttributeCollection.System#Collections#IEnumerable#GetEnumerator*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ComponentModel.AttributeCollection.#ctor
  parent: System.ComponentModel.AttributeCollection
  isExternal: false
  name: AttributeCollection()
  nameWithType: AttributeCollection.AttributeCollection()
  fullName: System.ComponentModel.AttributeCollection.AttributeCollection()
- uid: System.ComponentModel.AttributeCollection.#ctor(System.Attribute[])
  parent: System.ComponentModel.AttributeCollection
  isExternal: false
  name: AttributeCollection(Attribute[])
  nameWithType: AttributeCollection.AttributeCollection(Attribute[])
  fullName: System.ComponentModel.AttributeCollection.AttributeCollection(Attribute[])
- uid: System.Attribute[]
  parent: System
  isExternal: true
  name: Attribute
  nameWithType: Attribute
  fullName: System.Attribute[]
  spec.csharp:
  - uid: System.Attribute
    name: Attribute
    nameWithType: Attribute
    fullName: Attribute[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.ComponentModel.AttributeCollection.Attributes
  parent: System.ComponentModel.AttributeCollection
  isExternal: false
  name: Attributes
  nameWithType: AttributeCollection.Attributes
  fullName: System.ComponentModel.AttributeCollection.Attributes
- uid: System.ComponentModel.AttributeCollection.Contains(System.Attribute)
  parent: System.ComponentModel.AttributeCollection
  isExternal: false
  name: Contains(Attribute)
  nameWithType: AttributeCollection.Contains(Attribute)
  fullName: System.ComponentModel.AttributeCollection.Contains(Attribute)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Attribute
  parent: System
  isExternal: true
  name: Attribute
  nameWithType: Attribute
  fullName: System.Attribute
- uid: System.ComponentModel.AttributeCollection.Contains(System.Attribute[])
  parent: System.ComponentModel.AttributeCollection
  isExternal: false
  name: Contains(Attribute[])
  nameWithType: AttributeCollection.Contains(Attribute[])
  fullName: System.ComponentModel.AttributeCollection.Contains(Attribute[])
- uid: System.ComponentModel.AttributeCollection.CopyTo(System.Array,System.Int32)
  parent: System.ComponentModel.AttributeCollection
  isExternal: false
  name: CopyTo(Array,Int32)
  nameWithType: AttributeCollection.CopyTo(Array,Int32)
  fullName: System.ComponentModel.AttributeCollection.CopyTo(Array,Int32)
- uid: System.Array
  parent: System
  isExternal: true
  name: Array
  nameWithType: Array
  fullName: System.Array
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.ComponentModel.AttributeCollection.Count
  parent: System.ComponentModel.AttributeCollection
  isExternal: false
  name: Count
  nameWithType: AttributeCollection.Count
  fullName: System.ComponentModel.AttributeCollection.Count
- uid: System.ComponentModel.AttributeCollection.Empty
  parent: System.ComponentModel.AttributeCollection
  isExternal: false
  name: Empty
  nameWithType: AttributeCollection.Empty
  fullName: System.ComponentModel.AttributeCollection.Empty
- uid: System.ComponentModel.AttributeCollection
  parent: System.ComponentModel
  isExternal: false
  name: AttributeCollection
  nameWithType: AttributeCollection
  fullName: System.ComponentModel.AttributeCollection
- uid: System.ComponentModel.AttributeCollection.FromExisting(System.ComponentModel.AttributeCollection,System.Attribute[])
  parent: System.ComponentModel.AttributeCollection
  isExternal: false
  name: FromExisting(AttributeCollection,Attribute[])
  nameWithType: AttributeCollection.FromExisting(AttributeCollection,Attribute[])
  fullName: System.ComponentModel.AttributeCollection.FromExisting(AttributeCollection,Attribute[])
- uid: System.ComponentModel.AttributeCollection.GetDefaultAttribute(System.Type)
  parent: System.ComponentModel.AttributeCollection
  isExternal: false
  name: GetDefaultAttribute(Type)
  nameWithType: AttributeCollection.GetDefaultAttribute(Type)
  fullName: System.ComponentModel.AttributeCollection.GetDefaultAttribute(Type)
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.ComponentModel.AttributeCollection.GetEnumerator
  parent: System.ComponentModel.AttributeCollection
  isExternal: false
  name: GetEnumerator()
  nameWithType: AttributeCollection.GetEnumerator()
  fullName: System.ComponentModel.AttributeCollection.GetEnumerator()
- uid: System.Collections.IEnumerator
  parent: System.Collections
  isExternal: true
  name: IEnumerator
  nameWithType: IEnumerator
  fullName: System.Collections.IEnumerator
- uid: System.ComponentModel.AttributeCollection.Item(System.Int32)
  parent: System.ComponentModel.AttributeCollection
  isExternal: false
  name: Item(Int32)
  nameWithType: AttributeCollection.Item(Int32)
  fullName: System.ComponentModel.AttributeCollection.Item(Int32)
- uid: System.ComponentModel.AttributeCollection.Item(System.Type)
  parent: System.ComponentModel.AttributeCollection
  isExternal: false
  name: Item(Type)
  nameWithType: AttributeCollection.Item(Type)
  fullName: System.ComponentModel.AttributeCollection.Item(Type)
- uid: System.ComponentModel.AttributeCollection.Matches(System.Attribute)
  parent: System.ComponentModel.AttributeCollection
  isExternal: false
  name: Matches(Attribute)
  nameWithType: AttributeCollection.Matches(Attribute)
  fullName: System.ComponentModel.AttributeCollection.Matches(Attribute)
- uid: System.ComponentModel.AttributeCollection.Matches(System.Attribute[])
  parent: System.ComponentModel.AttributeCollection
  isExternal: false
  name: Matches(Attribute[])
  nameWithType: AttributeCollection.Matches(Attribute[])
  fullName: System.ComponentModel.AttributeCollection.Matches(Attribute[])
- uid: System.ComponentModel.AttributeCollection.System#Collections#ICollection#Count
  parent: System.ComponentModel.AttributeCollection
  isExternal: false
  name: System.Collections.ICollection.Count
  nameWithType: AttributeCollection.System.Collections.ICollection.Count
  fullName: System.ComponentModel.AttributeCollection.System.Collections.ICollection.Count
- uid: System.ComponentModel.AttributeCollection.System#Collections#ICollection#IsSynchronized
  parent: System.ComponentModel.AttributeCollection
  isExternal: false
  name: System.Collections.ICollection.IsSynchronized
  nameWithType: AttributeCollection.System.Collections.ICollection.IsSynchronized
  fullName: System.ComponentModel.AttributeCollection.System.Collections.ICollection.IsSynchronized
- uid: System.ComponentModel.AttributeCollection.System#Collections#ICollection#SyncRoot
  parent: System.ComponentModel.AttributeCollection
  isExternal: false
  name: System.Collections.ICollection.SyncRoot
  nameWithType: AttributeCollection.System.Collections.ICollection.SyncRoot
  fullName: System.ComponentModel.AttributeCollection.System.Collections.ICollection.SyncRoot
- uid: System.ComponentModel.AttributeCollection.System#Collections#IEnumerable#GetEnumerator
  parent: System.ComponentModel.AttributeCollection
  isExternal: false
  name: System.Collections.IEnumerable.GetEnumerator()
  nameWithType: AttributeCollection.System.Collections.IEnumerable.GetEnumerator()
  fullName: System.ComponentModel.AttributeCollection.System.Collections.IEnumerable.GetEnumerator()
- uid: System.ComponentModel.AttributeCollection.#ctor*
  parent: System.ComponentModel.AttributeCollection
  isExternal: false
  name: AttributeCollection
  nameWithType: AttributeCollection.AttributeCollection
- uid: System.ComponentModel.AttributeCollection.Attributes*
  parent: System.ComponentModel.AttributeCollection
  isExternal: false
  name: Attributes
  nameWithType: AttributeCollection.Attributes
- uid: System.ComponentModel.AttributeCollection.Contains*
  parent: System.ComponentModel.AttributeCollection
  isExternal: false
  name: Contains
  nameWithType: AttributeCollection.Contains
- uid: System.ComponentModel.AttributeCollection.CopyTo*
  parent: System.ComponentModel.AttributeCollection
  isExternal: false
  name: CopyTo
  nameWithType: AttributeCollection.CopyTo
- uid: System.ComponentModel.AttributeCollection.Count*
  parent: System.ComponentModel.AttributeCollection
  isExternal: false
  name: Count
  nameWithType: AttributeCollection.Count
- uid: System.ComponentModel.AttributeCollection.FromExisting*
  parent: System.ComponentModel.AttributeCollection
  isExternal: false
  name: FromExisting
  nameWithType: AttributeCollection.FromExisting
- uid: System.ComponentModel.AttributeCollection.GetDefaultAttribute*
  parent: System.ComponentModel.AttributeCollection
  isExternal: false
  name: GetDefaultAttribute
  nameWithType: AttributeCollection.GetDefaultAttribute
- uid: System.ComponentModel.AttributeCollection.GetEnumerator*
  parent: System.ComponentModel.AttributeCollection
  isExternal: false
  name: GetEnumerator
  nameWithType: AttributeCollection.GetEnumerator
- uid: System.ComponentModel.AttributeCollection.Item*
  parent: System.ComponentModel.AttributeCollection
  isExternal: false
  name: Item
  nameWithType: AttributeCollection.Item
- uid: System.ComponentModel.AttributeCollection.Matches*
  parent: System.ComponentModel.AttributeCollection
  isExternal: false
  name: Matches
  nameWithType: AttributeCollection.Matches
- uid: System.ComponentModel.AttributeCollection.System#Collections#ICollection#Count*
  parent: System.ComponentModel.AttributeCollection
  isExternal: false
  name: System.Collections.ICollection.Count
  nameWithType: AttributeCollection.System.Collections.ICollection.Count
- uid: System.ComponentModel.AttributeCollection.System#Collections#ICollection#IsSynchronized*
  parent: System.ComponentModel.AttributeCollection
  isExternal: false
  name: System.Collections.ICollection.IsSynchronized
  nameWithType: AttributeCollection.System.Collections.ICollection.IsSynchronized
- uid: System.ComponentModel.AttributeCollection.System#Collections#ICollection#SyncRoot*
  parent: System.ComponentModel.AttributeCollection
  isExternal: false
  name: System.Collections.ICollection.SyncRoot
  nameWithType: AttributeCollection.System.Collections.ICollection.SyncRoot
- uid: System.ComponentModel.AttributeCollection.System#Collections#IEnumerable#GetEnumerator*
  parent: System.ComponentModel.AttributeCollection
  isExternal: false
  name: System.Collections.IEnumerable.GetEnumerator
  nameWithType: AttributeCollection.System.Collections.IEnumerable.GetEnumerator
