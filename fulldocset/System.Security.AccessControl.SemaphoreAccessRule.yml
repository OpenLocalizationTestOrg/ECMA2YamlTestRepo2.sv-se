### YamlMime:ManagedReference
items:
- uid: System.Security.AccessControl.SemaphoreAccessRule
  id: SemaphoreAccessRule
  children:
  - System.Security.AccessControl.SemaphoreAccessRule.#ctor(System.Security.Principal.IdentityReference,System.Security.AccessControl.SemaphoreRights,System.Security.AccessControl.AccessControlType)
  - System.Security.AccessControl.SemaphoreAccessRule.#ctor(System.String,System.Security.AccessControl.SemaphoreRights,System.Security.AccessControl.AccessControlType)
  - System.Security.AccessControl.SemaphoreAccessRule.SemaphoreRights
  langs:
  - csharp
  name: SemaphoreAccessRule
  nameWithType: SemaphoreAccessRule
  fullName: System.Security.AccessControl.SemaphoreAccessRule
  type: Class
  summary: "Representerar en uppsättning behörigheter beviljas eller nekas för en användare eller grupp. Den här klassen kan inte ärvas."
  remarks: "Klassen SemaphoreAccessRule är en av de klasser som .NET Framework tillhandahåller för hantering av windowssäkerhet för åtkomstkontroll på namngiven system semaforer. En översikt över dessa klasser och deras förhållande till de underliggande Windows åtkomstkontroll strukturerna, finns i <xref:System.Security.AccessControl.SemaphoreSecurity>.</xref:System.Security.AccessControl.SemaphoreSecurity>      > [!NOTE] > Säkerhet för åtkomstkontroll är användbar bara för Windows med namnet system semaforer. Om en <xref:System.Threading.Semaphore>-objektet representerar en lokal semafor, åtkomstkontroll är irrelevanta.</xref:System.Threading.Semaphore>       Om du vill hämta en lista över regler som tillämpas på en namngiven semafor använder den <xref:System.Threading.Semaphore.GetAccessControl%2A?displayProperty=fullName>metod för att hämta en <xref:System.Security.AccessControl.SemaphoreSecurity>objekt och sedan använda dess <xref:System.Security.AccessControl.CommonObjectSecurity.GetAccessRules%2A>metod för att hämta en samling objekt SemaphoreAccessRule.</xref:System.Security.AccessControl.CommonObjectSecurity.GetAccessRules%2A> </xref:System.Security.AccessControl.SemaphoreSecurity> </xref:System.Threading.Semaphore.GetAccessControl%2A?displayProperty=fullName>       SemaphoreAccessRule objekt mappar inte&1; med åtkomstkontrollposter i underliggande discretionary access control list (DACL). När du får en uppsättning regler för alla åtkomst för en semafor innehåller uppsättningen det minsta antalet regler som för närvarande krävs att uttrycka alla åtkomstkontrollposter.      > [!NOTE] > Underliggande åtkomstkontrollposterna ändras när du använder och ta bort regler. Informationen i regler kopplas om möjligt om du vill behålla det lägsta antalet poster för åtkomstkontroll. Därför när du läser den aktuella listan över regler det kanske inte precis likadant ut som listan över alla regler som du har lagt till.       Använd SemaphoreAccessRule objekt för att ange behörighet för att tillåta eller neka till en användare eller grupp. En SemaphoreAccessRule-objektet representerar alltid åtkomst eller nekas åtkomst, inte båda.       Om du vill tillämpa en regel för en namngiven systemsemafor, använda den <xref:System.Threading.Semaphore.GetAccessControl%2A?displayProperty=fullName>metod för att hämta den <xref:System.Security.AccessControl.SemaphoreSecurity>objekt.</xref:System.Security.AccessControl.SemaphoreSecurity> </xref:System.Threading.Semaphore.GetAccessControl%2A?displayProperty=fullName> Ändra den <xref:System.Security.AccessControl.SemaphoreSecurity>objektet med hjälp av dess metoder att lägga till regeln och sedan använda den <xref:System.Threading.Semaphore.SetAccessControl%2A?displayProperty=fullName>metod för att återansluta säkerhetsobjektet.</xref:System.Threading.Semaphore.SetAccessControl%2A?displayProperty=fullName> </xref:System.Security.AccessControl.SemaphoreSecurity>      > [!IMPORTANT] > Ändringar du gör en <xref:System.Security.AccessControl.SemaphoreSecurity>objektet påverkar inte behörighet för en namngiven semaforen förrän du anropar den <xref:System.Threading.Semaphore.SetAccessControl%2A?displayProperty=fullName>metod för att tilldela ändras-objekt till namngivna semaforen.</xref:System.Threading.Semaphore.SetAccessControl%2A?displayProperty=fullName> </xref:System.Security.AccessControl.SemaphoreSecurity>       SemaphoreAccessRule objekt kan inte ändras. Säkerhet för en semafor ändras med hjälp av den <xref:System.Security.AccessControl.SemaphoreSecurity>klassen för att lägga till eller ta bort regler; när du gör detta underliggande åtkomstkontrollposterna ändras.</xref:System.Security.AccessControl.SemaphoreSecurity>      > [!NOTE] > Säkerhet för synkroniseringsobjekt stöds inte för Windows 98 eller Windows ME."
  example:
  - "The following code example demonstrates the separation between <xref:System.Security.AccessControl.AccessControlType> rules and <xref:System.Security.AccessControl.AccessControlType> rules, and shows the combination of rights in compatible rules. The example creates a <xref:System.Security.AccessControl.SemaphoreSecurity> object, adds rules that allow and deny various rights for the current user, and displays the resulting pair of rules. The example then allows new rights for the current user and displays the result, showing that the new rights are merged with the existing <xref:System.Security.AccessControl.AccessControlType> rule.  \n  \n> [!NOTE]\n>  This example does not attach the security object to a <xref:System.Threading.Semaphore> object. Examples that attach security objects can be found in <xref:System.Threading.Semaphore.GetAccessControl%2A?displayProperty=fullName> and <xref:System.Threading.Semaphore.SetAccessControl%2A?displayProperty=fullName>.  \n  \n [!code-cs[System.Security.AccessControl.SemaphoreSecurity.AddAccessRule#1](~/add/codesnippet/csharp/t-system.security.access_3_1.cs)]\n [!code-vb[System.Security.AccessControl.SemaphoreSecurity.AddAccessRule#1](~/add/codesnippet/visualbasic/t-system.security.access_3_1.vb)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(false)]

      public sealed class SemaphoreAccessRule : System.Security.AccessControl.AccessRule
  inheritance:
  - System.Object
  - System.Security.AccessControl.AuthorizationRule
  - System.Security.AccessControl.AccessRule
  implements: []
  inheritedMembers:
  - System.Security.AccessControl.AccessRule.AccessControlType
  - System.Security.AccessControl.AuthorizationRule.AccessMask
  - System.Security.AccessControl.AuthorizationRule.IdentityReference
  - System.Security.AccessControl.AuthorizationRule.InheritanceFlags
  - System.Security.AccessControl.AuthorizationRule.IsInherited
  - System.Security.AccessControl.AuthorizationRule.PropagationFlags
  platform:
  - net462
- uid: System.Security.AccessControl.SemaphoreAccessRule.#ctor(System.Security.Principal.IdentityReference,System.Security.AccessControl.SemaphoreRights,System.Security.AccessControl.AccessControlType)
  id: '#ctor(System.Security.Principal.IdentityReference,System.Security.AccessControl.SemaphoreRights,System.Security.AccessControl.AccessControlType)'
  parent: System.Security.AccessControl.SemaphoreAccessRule
  langs:
  - csharp
  name: SemaphoreAccessRule(IdentityReference,SemaphoreRights,AccessControlType)
  nameWithType: SemaphoreAccessRule.SemaphoreAccessRule(IdentityReference,SemaphoreRights,AccessControlType)
  fullName: System.Security.AccessControl.SemaphoreAccessRule.SemaphoreAccessRule(IdentityReference,SemaphoreRights,AccessControlType)
  type: Constructor
  assemblies:
  - System
  namespace: System.Security.AccessControl
  summary: "Initierar en ny instans av den <xref href=&quot;System.Security.AccessControl.SemaphoreAccessRule&quot;> </xref> klassen som anger den användare eller grupp som regeln gäller för de behörighet som krävs, och om de angivna åtkomstbehörigheterna tillåts eller nekas."
  remarks: "Ange en <xref:System.Threading.Semaphore>, till exempel genom att anropa den <xref:System.Threading.WaitHandle.WaitOne%2A>metoden, måste användaren ha <xref:System.Security.AccessControl.SemaphoreRights?displayProperty=fullName>åtkomst.</xref:System.Security.AccessControl.SemaphoreRights?displayProperty=fullName> </xref:System.Threading.WaitHandle.WaitOne%2A> </xref:System.Threading.Semaphore> Avsluta semaforen, genom att anropa den <xref:System.Threading.Semaphore.Release%2A>metoden, måste användaren ha <xref:System.Security.AccessControl.SemaphoreRights?displayProperty=fullName>åtkomst.</xref:System.Security.AccessControl.SemaphoreRights?displayProperty=fullName> </xref:System.Threading.Semaphore.Release%2A>"
  syntax:
    content: public SemaphoreAccessRule (System.Security.Principal.IdentityReference identity, System.Security.AccessControl.SemaphoreRights eventRights, System.Security.AccessControl.AccessControlType type);
    parameters:
    - id: identity
      type: System.Security.Principal.IdentityReference
      description: "Användaren eller gruppen som regeln gäller för. Måste vara av typen <xref href=&quot;System.Security.Principal.SecurityIdentifier&quot;> </xref> eller en typ som <xref href=&quot;System.Security.Principal.NTAccount&quot;> </xref> som kan konverteras till typen <xref href=&quot;System.Security.Principal.SecurityIdentifier&quot;> </xref>."
    - id: eventRights
      type: System.Security.AccessControl.SemaphoreRights
      description: "En binär kombination av <xref href=&quot;System.Security.AccessControl.SemaphoreRights&quot;> </xref> värden som anger rättigheterna som tillåts eller nekas."
    - id: type
      type: System.Security.AccessControl.AccessControlType
      description: "En av de <xref href=&quot;System.Security.AccessControl.AccessControlType&quot;> </xref> värden som anger om rättigheterna som tillåts eller nekas."
  overload: System.Security.AccessControl.SemaphoreAccessRule.#ctor*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>eventRights</code>Anger ett ogiltigt värde.       - eller - <code>type</code> anger ett ogiltigt värde."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>identity</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>.       - eller - <code>eventRights</code> är noll."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>identity</code>är inget av typen <xref href=&quot;System.Security.Principal.SecurityIdentifier&quot;> </xref> eller av en typ som <xref href=&quot;System.Security.Principal.NTAccount&quot;> </xref> som kan konverteras till typen <xref href=&quot;System.Security.Principal.SecurityIdentifier&quot;> </xref>."
  platform:
  - net462
- uid: System.Security.AccessControl.SemaphoreAccessRule.#ctor(System.String,System.Security.AccessControl.SemaphoreRights,System.Security.AccessControl.AccessControlType)
  id: '#ctor(System.String,System.Security.AccessControl.SemaphoreRights,System.Security.AccessControl.AccessControlType)'
  parent: System.Security.AccessControl.SemaphoreAccessRule
  langs:
  - csharp
  name: SemaphoreAccessRule(String,SemaphoreRights,AccessControlType)
  nameWithType: SemaphoreAccessRule.SemaphoreAccessRule(String,SemaphoreRights,AccessControlType)
  fullName: System.Security.AccessControl.SemaphoreAccessRule.SemaphoreAccessRule(String,SemaphoreRights,AccessControlType)
  type: Constructor
  assemblies:
  - System
  namespace: System.Security.AccessControl
  summary: "Initierar en ny instans av den <xref href=&quot;System.Security.AccessControl.SemaphoreAccessRule&quot;> </xref> klassen, som anger namnet på användaren eller gruppen som regeln gäller för de behörighet som krävs, och om de angivna åtkomstbehörigheterna tillåts eller nekas."
  remarks: "Ange en <xref:System.Threading.Semaphore>, till exempel genom att anropa den <xref:System.Threading.WaitHandle.WaitOne%2A>metoden, måste användaren ha <xref:System.Security.AccessControl.SemaphoreRights?displayProperty=fullName>åtkomst.</xref:System.Security.AccessControl.SemaphoreRights?displayProperty=fullName> </xref:System.Threading.WaitHandle.WaitOne%2A> </xref:System.Threading.Semaphore> Avsluta semaforen, genom att anropa den <xref:System.Threading.Semaphore.Release%2A>metoden, måste användaren ha <xref:System.Security.AccessControl.SemaphoreRights?displayProperty=fullName>åtkomst.</xref:System.Security.AccessControl.SemaphoreRights?displayProperty=fullName> </xref:System.Threading.Semaphore.Release%2A>       Den här konstruktorn är likvärdiga med att skapa en <xref:System.Security.Principal.NTAccount>objekt genom att skicka `identity` till den <xref:System.Security.Principal.NTAccount.%23ctor%28System.String%29?displayProperty=fullName>konstruktorn och skicka den nyligen skapade <xref:System.Security.Principal.NTAccount>objekt i <xref:System.Security.AccessControl.SemaphoreAccessRule.%23ctor%28System.Security.Principal.IdentityReference%2CSystem.Security.AccessControl.SemaphoreRights%2CSystem.Security.AccessControl.AccessControlType%29>konstruktor.</xref:System.Security.AccessControl.SemaphoreAccessRule.%23ctor%28System.Security.Principal.IdentityReference%2CSystem.Security.AccessControl.SemaphoreRights%2CSystem.Security.AccessControl.AccessControlType%29> </xref:System.Security.Principal.NTAccount> </xref:System.Security.Principal.NTAccount.%23ctor%28System.String%29?displayProperty=fullName> </xref:System.Security.Principal.NTAccount>"
  example:
  - "The following code example demonstrates the use of this constructor to create <xref:System.Security.AccessControl.SemaphoreAccessRule> objects. The example creates a <xref:System.Security.AccessControl.SemaphoreSecurity> object, adds rules that allow and deny various rights for the current user, and displays the resulting pair of rules. The example then allows new rights for the current user and displays the result, showing that the new rights are merged with the existing <xref:System.Security.AccessControl.AccessControlType> rule.  \n  \n> [!NOTE]\n>  This example does not attach the security object to a <xref:System.Threading.Semaphore> object. Examples that attach security objects can be found in <xref:System.Threading.Semaphore.GetAccessControl%2A?displayProperty=fullName> and <xref:System.Threading.Semaphore.SetAccessControl%2A?displayProperty=fullName>.  \n  \n [!code-cs[System.Security.AccessControl.SemaphoreSecurity.AddAccessRule#1](~/add/codesnippet/csharp/09c19b7f-c894-4d29-aa9f-_1.cs)]\n [!code-vb[System.Security.AccessControl.SemaphoreSecurity.AddAccessRule#1](~/add/codesnippet/visualbasic/09c19b7f-c894-4d29-aa9f-_1.vb)]"
  syntax:
    content: public SemaphoreAccessRule (string identity, System.Security.AccessControl.SemaphoreRights eventRights, System.Security.AccessControl.AccessControlType type);
    parameters:
    - id: identity
      type: System.String
      description: "Namnet på användaren eller gruppen som regeln gäller."
    - id: eventRights
      type: System.Security.AccessControl.SemaphoreRights
      description: "En binär kombination av <xref href=&quot;System.Security.AccessControl.SemaphoreRights&quot;> </xref> värden som anger rättigheterna som tillåts eller nekas."
    - id: type
      type: System.Security.AccessControl.AccessControlType
      description: "En av de <xref href=&quot;System.Security.AccessControl.AccessControlType&quot;> </xref> värden som anger om rättigheterna som tillåts eller nekas."
  overload: System.Security.AccessControl.SemaphoreAccessRule.#ctor*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>eventRights</code>Anger ett ogiltigt värde.       - eller - <code>type</code> anger ett ogiltigt värde."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>eventRights</code>är noll."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>identity</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>.       - eller - <code>identity</code> är en sträng med längden noll.       - eller - <code>identity</code> är längre än 512 tecken."
  platform:
  - net462
- uid: System.Security.AccessControl.SemaphoreAccessRule.SemaphoreRights
  id: SemaphoreRights
  parent: System.Security.AccessControl.SemaphoreAccessRule
  langs:
  - csharp
  name: SemaphoreRights
  nameWithType: SemaphoreAccessRule.SemaphoreRights
  fullName: System.Security.AccessControl.SemaphoreAccessRule.SemaphoreRights
  type: Property
  assemblies:
  - System
  namespace: System.Security.AccessControl
  summary: "Hämtar de rättigheter som tillåts eller nekas av regeln."
  remarks: "<xref:System.Security.AccessControl.SemaphoreAccessRule>objekt är inte ändras.</xref:System.Security.AccessControl.SemaphoreAccessRule> Du kan skapa en ny åtkomstregel som representerar en annan användare, andra rättigheter eller en annan <xref:System.Security.AccessControl.AccessControlType>, men du kan inte ändra en befintlig åtkomstregel.</xref:System.Security.AccessControl.AccessControlType>"
  example:
  - "The following code example demonstrates the use of the SemaphoreRights property to display the rights in the set of rules contained in a <xref:System.Security.AccessControl.SemaphoreSecurity> object. The example creates a <xref:System.Security.AccessControl.SemaphoreSecurity> object, adds rules that allow and deny various rights for the current user, and displays the resulting pair of rules. The example then allows new rights for the current user and displays the result, showing that the new rights are merged with the existing <xref:System.Security.AccessControl.AccessControlType> rule.  \n  \n> [!NOTE]\n>  This example does not attach the security object to a <xref:System.Threading.Semaphore> object. Examples that attach security objects can be found in <xref:System.Threading.Semaphore.GetAccessControl%2A?displayProperty=fullName> and <xref:System.Threading.Semaphore.SetAccessControl%2A?displayProperty=fullName>.  \n  \n [!code-cs[System.Security.AccessControl.SemaphoreSecurity.AddAccessRule#1](~/add/codesnippet/csharp/p-system.security.access_1_1.cs)]\n [!code-vb[System.Security.AccessControl.SemaphoreSecurity.AddAccessRule#1](~/add/codesnippet/visualbasic/p-system.security.access_1_1.vb)]"
  syntax:
    content: public System.Security.AccessControl.SemaphoreRights SemaphoreRights { get; }
    return:
      type: System.Security.AccessControl.SemaphoreRights
      description: "En binär kombination av <xref href=&quot;System.Security.AccessControl.SemaphoreRights&quot;> </xref> värden som anger rättigheterna som tillåts eller nekas av regeln."
  overload: System.Security.AccessControl.SemaphoreAccessRule.SemaphoreRights*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Security.AccessControl.AccessRule
  isExternal: false
  name: System.Security.AccessControl.AccessRule
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.Security.AccessControl.SemaphoreAccessRule.#ctor(System.Security.Principal.IdentityReference,System.Security.AccessControl.SemaphoreRights,System.Security.AccessControl.AccessControlType)
  parent: System.Security.AccessControl.SemaphoreAccessRule
  isExternal: false
  name: SemaphoreAccessRule(IdentityReference,SemaphoreRights,AccessControlType)
  nameWithType: SemaphoreAccessRule.SemaphoreAccessRule(IdentityReference,SemaphoreRights,AccessControlType)
  fullName: System.Security.AccessControl.SemaphoreAccessRule.SemaphoreAccessRule(IdentityReference,SemaphoreRights,AccessControlType)
- uid: System.Security.Principal.IdentityReference
  parent: System.Security.Principal
  isExternal: false
  name: IdentityReference
  nameWithType: IdentityReference
  fullName: System.Security.Principal.IdentityReference
- uid: System.Security.AccessControl.SemaphoreRights
  parent: System.Security.AccessControl
  isExternal: false
  name: SemaphoreRights
  nameWithType: SemaphoreRights
  fullName: System.Security.AccessControl.SemaphoreRights
- uid: System.Security.AccessControl.AccessControlType
  parent: System.Security.AccessControl
  isExternal: false
  name: AccessControlType
  nameWithType: AccessControlType
  fullName: System.Security.AccessControl.AccessControlType
- uid: System.Security.AccessControl.SemaphoreAccessRule.#ctor(System.String,System.Security.AccessControl.SemaphoreRights,System.Security.AccessControl.AccessControlType)
  parent: System.Security.AccessControl.SemaphoreAccessRule
  isExternal: false
  name: SemaphoreAccessRule(String,SemaphoreRights,AccessControlType)
  nameWithType: SemaphoreAccessRule.SemaphoreAccessRule(String,SemaphoreRights,AccessControlType)
  fullName: System.Security.AccessControl.SemaphoreAccessRule.SemaphoreAccessRule(String,SemaphoreRights,AccessControlType)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Security.AccessControl.SemaphoreAccessRule.SemaphoreRights
  parent: System.Security.AccessControl.SemaphoreAccessRule
  isExternal: false
  name: SemaphoreRights
  nameWithType: SemaphoreAccessRule.SemaphoreRights
  fullName: System.Security.AccessControl.SemaphoreAccessRule.SemaphoreRights
- uid: System.Security.AccessControl.SemaphoreAccessRule.#ctor*
  parent: System.Security.AccessControl.SemaphoreAccessRule
  isExternal: false
  name: SemaphoreAccessRule
  nameWithType: SemaphoreAccessRule.SemaphoreAccessRule
- uid: System.Security.AccessControl.SemaphoreAccessRule.SemaphoreRights*
  parent: System.Security.AccessControl.SemaphoreAccessRule
  isExternal: false
  name: SemaphoreRights
  nameWithType: SemaphoreAccessRule.SemaphoreRights
