### YamlMime:ManagedReference
items:
- uid: System.ServiceModel.Dispatcher.IErrorHandler
  id: IErrorHandler
  children:
  - System.ServiceModel.Dispatcher.IErrorHandler.HandleError(System.Exception)
  - System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault(System.Exception,System.ServiceModel.Channels.MessageVersion,System.ServiceModel.Channels.Message@)
  langs:
  - csharp
  name: IErrorHandler
  nameWithType: IErrorHandler
  fullName: System.ServiceModel.Dispatcher.IErrorHandler
  type: Interface
  summary: "Kan en implementerare att styra felmeddelande som returneras till anroparen och du kan också utföra anpassade fel vid bearbetning, till exempel loggning."
  remarks: "För att styra beteendet för programmet explicit när ett undantag måste implementera gränssnittet IErrorHandler och lägger till den i den <xref:System.ServiceModel.Dispatcher.ChannelDispatcher>&quot;s <xref:System.ServiceModel.Dispatcher.ChannelDispatcher.ErrorHandlers%2A>egenskap.</xref:System.ServiceModel.Dispatcher.ChannelDispatcher.ErrorHandlers%2A> </xref:System.ServiceModel.Dispatcher.ChannelDispatcher> IErrorHandler kan du uttryckligen styra SOAP-fel genereras, Bestäm om du vill skicka tillbaka till klienten och utföra tillhörande uppgifter, t.ex loggning. Felhanterare anropas i den ordning som de har lagts till i <xref:System.ServiceModel.Dispatcher.ChannelDispatcher.ErrorHandlers%2A>egenskap.</xref:System.ServiceModel.Dispatcher.ChannelDispatcher.ErrorHandlers%2A>       Implementera den <xref:System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault%2A>metod för att styra felmeddelande som returneras till klienten.</xref:System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault%2A>       Implementera den <xref:System.ServiceModel.Dispatcher.IErrorHandler.HandleError%2A>metod för att se till att fel-relaterade funktioner, inklusive fel loggar, så en misslyckas snabbt, stänger av programmet, och så vidare.</xref:System.ServiceModel.Dispatcher.IErrorHandler.HandleError%2A>      > [!NOTE] > Eftersom den <xref:System.ServiceModel.Dispatcher.IErrorHandler.HandleError%2A>metod kan anropas från flera olika ställen det finns inga garantier görs om vilka tråd metoden anropas på.</xref:System.ServiceModel.Dispatcher.IErrorHandler.HandleError%2A> Är inte beroende <xref:System.ServiceModel.Dispatcher.IErrorHandler.HandleError%2A>metoden anropas på åtgärden tråd.</xref:System.ServiceModel.Dispatcher.IErrorHandler.HandleError%2A>       Alla <xref:System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault%2A>implementeringar kallas först innan du skickar ett svarsmeddelande.</xref:System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault%2A> När alla <xref:System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault%2A>implementeringar har anropats och returnera, och om `fault` är icke -`null`, skickas tillbaka till klienten enligt Åtgärdskontraktet.</xref:System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault%2A> Om `fault` är `null` efter att alla implementeringar har anropats svarsmeddelandet styrs av den <xref:System.ServiceModel.ServiceBehaviorAttribute.IncludeExceptionDetailInFaults%2A?displayProperty=fullName>egenskapsvärde.</xref:System.ServiceModel.ServiceBehaviorAttribute.IncludeExceptionDetailInFaults%2A?displayProperty=fullName>      > [!NOTE] > Undantag kan inträffa när alla <xref:System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault%2A>implementeringar kallas och ett svarsmeddelande överlämnas till kanalen.</xref:System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault%2A> Om en kanal-undantag inträffar (till exempel svårt serialisering meddelandet) IErrorHandler objekt meddelas. I så fall måste kontrollera du fortfarande som gör att användning av spårning för att identifiera problemet utvecklingsmiljön fångar in och visar sådana undantag eller. Mer information om spårning finns [med hjälp av spårning för att felsöka ditt program](~/add/includes/ajax-current-ext-md.md).       När svarsmeddelandet har skickats, alla <xref:System.ServiceModel.Dispatcher.IErrorHandler.HandleError%2A>implementeringar kallas i samma ordning.</xref:System.ServiceModel.Dispatcher.IErrorHandler.HandleError%2A>       Normalt en IErrorHandler-implementering har lagts till i den <xref:System.ServiceModel.Dispatcher.ChannelDispatcher.ErrorHandlers%2A>egenskapen för tjänsten (och klienten vid duplexkommunikation).</xref:System.ServiceModel.Dispatcher.ChannelDispatcher.ErrorHandlers%2A>       Du kan lägga till IErrorHandler körningsmiljön genom att implementera ett beteende (antingen en <xref:System.ServiceModel.Description.IServiceBehavior?displayProperty=fullName>, <xref:System.ServiceModel.Description.IEndpointBehavior?displayProperty=fullName>, <xref:System.ServiceModel.Description.IContractBehavior?displayProperty=fullName>, eller <xref:System.ServiceModel.Description.IOperationBehavior?displayProperty=fullName>objekt) och använder funktionen programmässigt, från en konfigurationsfil eller med ett anpassat attribut för att koppla din IErrorHandler.</xref:System.ServiceModel.Description.IOperationBehavior?displayProperty=fullName> </xref:System.ServiceModel.Description.IContractBehavior?displayProperty=fullName> </xref:System.ServiceModel.Description.IEndpointBehavior?displayProperty=fullName> </xref:System.ServiceModel.Description.IServiceBehavior?displayProperty=fullName>       Mer information om hur du använder beteenden för att ändra körningsmiljön finns [konfigurera och utöka Runtime med beteenden](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following code example demonstrates a service that implements IErrorHandler that returns only <xref:System.ServiceModel.FaultException%601> of type `GreetingFault` when a service method throws a managed exception.  \n  \n [!code-vb[IErrorHandler#6](~/add/codesnippet/visualbasic/ierrorhandler.client/ierrorhandler.vb#6)]\n [!code-cs[IErrorHandler#6](~/add/codesnippet/csharp/ierrorhandler.client/ierrorhandler.cs#6)]  \n  \n The following code example shows how to use a service behavior to add the IErrorHandler implementation to the <xref:System.ServiceModel.Dispatcher.ChannelDispatcher.ErrorHandlers%2A> property.  \n  \n [!code-vb[IErrorHandler#7](~/add/codesnippet/visualbasic/ierrorhandler.client/ierrorhandler.vb#7)]\n [!code-cs[IErrorHandler#7](~/add/codesnippet/csharp/ierrorhandler.client/ierrorhandler.cs#7)]  \n  \n The following code example shows how to configure the service to load the service behavior using an application configuration file. For more details about how to expose a service behavior in a configuration file, see <xref:System.ServiceModel.Description.IServiceBehavior>.  \n  \n```  \n  \n<configuration>  \n  <system.serviceModel>  \n    <services>  \n      <service   \n        name=\"Microsoft.WCF.Documentation.SampleService\"  \n        behaviorConfiguration=\"metaAndErrors\">  \n        <host>  \n          <baseAddresses>  \n            <add baseAddress=\"http://localhost:8080/SampleService\"/>  \n          </baseAddresses>  \n        </host>  \n        <endpoint  \n          address=\"\"  \n          binding=\"wsHttpBinding\"  \n          contract=\"Microsoft.WCF.Documentation.ISampleService\"  \n         />  \n        <endpoint  \n          address=\"mex\"  \n          binding=\"mexHttpBinding\"  \n          contract=\"IMetadataExchange\"  \n         />  \n      </service>  \n    </services>  \n    <behaviors>  \n      <serviceBehaviors>  \n        <behavior name=\"metaAndErrors\">  \n          <serviceDebug includeExceptionDetailInFaults=\"true\"/>  \n          <serviceMetadata httpGetEnabled=\"true\"/>  \n          <enforceGreetingFaults />  \n        </behavior>  \n      </serviceBehaviors>  \n    </behaviors>  \n    <extensions>  \n      <behaviorExtensions>  \n        <add   \n          name=\"enforceGreetingFaults\"   \n          type=\"Microsoft.WCF.Documentation.EnforceGreetingFaultBehavior, HostApplication, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null\"  \n        />  \n      </behaviorExtensions>  \n    </extensions>  \n  </system.serviceModel>  \n</configuration>  \n```"
  syntax:
    content: public interface IErrorHandler
  implements: []
  platform:
  - net462
- uid: System.ServiceModel.Dispatcher.IErrorHandler.HandleError(System.Exception)
  id: HandleError(System.Exception)
  parent: System.ServiceModel.Dispatcher.IErrorHandler
  langs:
  - csharp
  name: HandleError(Exception)
  nameWithType: IErrorHandler.HandleError(Exception)
  fullName: System.ServiceModel.Dispatcher.IErrorHandler.HandleError(Exception)
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Dispatcher
  summary: "Aktiverar fel nätverksrelaterad bearbetning och returnerar ett värde som anger om dispatcher avbryter sessionen och instans kontexten i vissa fall."
  remarks: "Använda HandleError-metoden för att implementera fel relaterade beteenden, till exempel felloggning systemmeddelanden avstängning av program och så vidare, och returnerar ett värde som anger om undantaget hanteras på rätt sätt.      > [!NOTE] > Eftersom HandleError-metod kan anropas från flera olika ställen det finns inga garantier görs om vilka tråd metoden anropas på. Är inte beroende av HandleError-metoden anropas på åtgärden tråd.       Alla <xref:System.ServiceModel.Dispatcher.IErrorHandler>implementeringar kallas.</xref:System.ServiceModel.Dispatcher.IErrorHandler> Som standard (när det returnera värdet är `false`), om det finns ett undantag, dispatcher avbryter alla sessioner och avbryter den <xref:System.ServiceModel.InstanceContext>om det <xref:System.ServiceModel.InstanceContextMode>är något annat än <xref:System.ServiceModel.InstanceContextMode>.</xref:System.ServiceModel.InstanceContextMode> </xref:System.ServiceModel.InstanceContextMode> </xref:System.ServiceModel.InstanceContext>  Undantaget betraktas som sedan ohanterat och några tillstånd anses vara skadad.       Returnera `true` från HandleError att förhindra det här standardbeteendet. Om en felhanterare returnerar `true` instruktion [!INCLUDE[indigo2](~/add/includes/ajax-current-ext-md.md)] att det är säkert att fortsätta använda tillstånd är kopplat till den misslyckade begäranden.       Om inga felhanterare returnerar `true` från HandleError metoden undantaget betraktas ohanterat och gäller för standardsvar, vilket kan innebära en avbrutna <xref:System.ServiceModel.InstanceContext?displayProperty=fullName>och channel vid kommunikation på en sessionskanalen eller <xref:System.ServiceModel.ServiceBehaviorAttribute.InstanceContextMode%2A?displayProperty=fullName>egenskapen är inte inställd på <xref:System.ServiceModel.InstanceContextMode?displayProperty=fullName>.</xref:System.ServiceModel.InstanceContextMode?displayProperty=fullName> </xref:System.ServiceModel.ServiceBehaviorAttribute.InstanceContextMode%2A?displayProperty=fullName> </xref:System.ServiceModel.InstanceContext?displayProperty=fullName>       Den `error` parametern är aldrig `null` och innehåller Undantagsobjektet utlöstes."
  example:
  - "The following code example demonstrates a service that implements <xref:System.ServiceModel.Dispatcher.IErrorHandler> that returns only <xref:System.ServiceModel.FaultException%601> of type `GreetingFault` when a service method throws a managed exception.  \n  \n [!code-vb[IErrorHandler#6](~/add/codesnippet/visualbasic/ierrorhandler.client/ierrorhandler.vb#6)]\n [!code-cs[IErrorHandler#6](~/add/codesnippet/csharp/ierrorhandler.client/ierrorhandler.cs#6)]  \n  \n The following code example shows how to use a service behavior to add the <xref:System.ServiceModel.Dispatcher.IErrorHandler> implementation to the <xref:System.ServiceModel.Dispatcher.ChannelDispatcher.ErrorHandlers%2A> property.  \n  \n [!code-vb[IErrorHandler#7](~/add/codesnippet/visualbasic/ierrorhandler.client/ierrorhandler.vb#7)]\n [!code-cs[IErrorHandler#7](~/add/codesnippet/csharp/ierrorhandler.client/ierrorhandler.cs#7)]  \n  \n The following code example shows how to configure the service to load the service behavior using an application configuration file. For more details about how to expose a service behavior in a configuration file, see <xref:System.ServiceModel.Description.IServiceBehavior>.  \n  \n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]"
  syntax:
    content: public bool HandleError (Exception error);
    parameters:
    - id: error
      type: System.Exception
      description: "Undantag som uppstod under bearbetning."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Om [!INCLUDE[indigo1](~/add/includes/ajax-current-ext-md.md)] bör inte avsluta sessionen (om sådan finns) och instansen kontexten om instansen kontexten inte är <xref href=&quot;System.ServiceModel.InstanceContextMode&quot;> </xref>, annars <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. Standardvärdet är <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.ServiceModel.Dispatcher.IErrorHandler.HandleError*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault(System.Exception,System.ServiceModel.Channels.MessageVersion,System.ServiceModel.Channels.Message@)
  id: ProvideFault(System.Exception,System.ServiceModel.Channels.MessageVersion,System.ServiceModel.Channels.Message@)
  parent: System.ServiceModel.Dispatcher.IErrorHandler
  langs:
  - csharp
  name: ProvideFault(Exception,MessageVersion,Message)
  nameWithType: IErrorHandler.ProvideFault(Exception,MessageVersion,Message)
  fullName: System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault(Exception,MessageVersion,Message)
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Dispatcher
  summary: "Kan skapa en anpassad &lt;xref:System.ServiceModel.FaultException%601&gt; som returneras från ett undantag under metod för en tjänst."
  remarks: "Implementera metoden ProvideFault för att skapa ett anpassat felmeddelande som returneras till klienten.  Metoden ProvideFault kallas alltid för undantag som lämnar åtgärder, utom när WCF-körningsmiljön identifierar undantag som särskilt allvarligt och skickas tillbaka undantaget sig själv. När alla ProvideFault implementeringar har anropats, felmeddelandet skickas tillbaka till klienten (om `fault` är icke -`null`). Om den `fault` parametern är `null` standard felet skickas till klienten.      > [!NOTE] > Det inkommande meddelandet som orsakade bearbetningsfelet är tillgänglig under den här metoden från den <xref:System.ServiceModel.OperationContext.RequestContext%2A?displayProperty=fullName>egenskapen.</xref:System.ServiceModel.OperationContext.RequestContext%2A?displayProperty=fullName>      > [!NOTE] > Eftersom ProvideFault-metod kan anropas från flera olika ställen det finns inga garantier görs om vilka tråd metoden anropas på. Är inte beroende av ProvideFault-metoden anropas på åtgärden tråd."
  example:
  - "The following code example demonstrates a service that implements <xref:System.ServiceModel.Dispatcher.IErrorHandler> that returns only <xref:System.ServiceModel.FaultException%601> of type `GreetingFault` when a service method throws a managed exception.  \n  \n [!code-vb[IErrorHandler#6](~/add/codesnippet/visualbasic/ierrorhandler.client/ierrorhandler.vb#6)]\n [!code-cs[IErrorHandler#6](~/add/codesnippet/csharp/ierrorhandler.client/ierrorhandler.cs#6)]  \n  \n The following code example shows how to use a service behavior to add the <xref:System.ServiceModel.Dispatcher.IErrorHandler> implementation to the <xref:System.ServiceModel.Dispatcher.ChannelDispatcher.ErrorHandlers%2A> property.  \n  \n [!code-vb[IErrorHandler#7](~/add/codesnippet/visualbasic/ierrorhandler.client/ierrorhandler.vb#7)]\n [!code-cs[IErrorHandler#7](~/add/codesnippet/csharp/ierrorhandler.client/ierrorhandler.cs#7)]  \n  \n The following code example shows how to configure the service to load the service behavior using an application configuration file. For more details about how to expose a service behavior in a configuration file, see <xref:System.ServiceModel.Description.IServiceBehavior>.  \n  \n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]"
  syntax:
    content: public void ProvideFault (Exception error, System.ServiceModel.Channels.MessageVersion version, ref System.ServiceModel.Channels.Message fault);
    parameters:
    - id: error
      type: System.Exception
      description: "Den <xref:System.Exception>objekt i en åtgärd i tjänsten.</xref:System.Exception>"
    - id: version
      type: System.ServiceModel.Channels.MessageVersion
      description: "Meddelandets SOAP-version."
    - id: fault
      type: System.ServiceModel.Channels.Message
      description: "Den &lt;xref:System.ServiceModel.Channels.Message?displayProperty=fullName&gt; objekt som returneras till klienten eller tjänsten i fallet med duplex."
  overload: System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault*
  exceptions: []
  platform:
  - net462
references:
- uid: System.ServiceModel.Dispatcher.IErrorHandler.HandleError(System.Exception)
  parent: System.ServiceModel.Dispatcher.IErrorHandler
  isExternal: false
  name: HandleError(Exception)
  nameWithType: IErrorHandler.HandleError(Exception)
  fullName: System.ServiceModel.Dispatcher.IErrorHandler.HandleError(Exception)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Exception
  parent: System
  isExternal: true
  name: Exception
  nameWithType: Exception
  fullName: System.Exception
- uid: System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault(System.Exception,System.ServiceModel.Channels.MessageVersion,System.ServiceModel.Channels.Message@)
  parent: System.ServiceModel.Dispatcher.IErrorHandler
  isExternal: false
  name: ProvideFault(Exception,MessageVersion,Message)
  nameWithType: IErrorHandler.ProvideFault(Exception,MessageVersion,Message)
  fullName: System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault(Exception,MessageVersion,Message)
- uid: System.ServiceModel.Channels.MessageVersion
  parent: System.ServiceModel.Channels
  isExternal: true
  name: MessageVersion
  nameWithType: MessageVersion
  fullName: System.ServiceModel.Channels.MessageVersion
- uid: System.ServiceModel.Channels.Message
  parent: System.ServiceModel.Channels
  isExternal: true
  name: Message
  nameWithType: Message
  fullName: System.ServiceModel.Channels.Message
- uid: System.ServiceModel.Dispatcher.IErrorHandler.HandleError*
  parent: System.ServiceModel.Dispatcher.IErrorHandler
  isExternal: false
  name: HandleError
  nameWithType: IErrorHandler.HandleError
- uid: System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault*
  parent: System.ServiceModel.Dispatcher.IErrorHandler
  isExternal: false
  name: ProvideFault
  nameWithType: IErrorHandler.ProvideFault
