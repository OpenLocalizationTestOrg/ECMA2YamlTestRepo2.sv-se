### YamlMime:ManagedReference
items:
- uid: System.DirectoryServices.SchemaNameCollection
  id: SchemaNameCollection
  children:
  - System.DirectoryServices.SchemaNameCollection.Add(System.String)
  - System.DirectoryServices.SchemaNameCollection.AddRange(System.DirectoryServices.SchemaNameCollection)
  - System.DirectoryServices.SchemaNameCollection.AddRange(System.String[])
  - System.DirectoryServices.SchemaNameCollection.Clear
  - System.DirectoryServices.SchemaNameCollection.Contains(System.String)
  - System.DirectoryServices.SchemaNameCollection.CopyTo(System.String[],System.Int32)
  - System.DirectoryServices.SchemaNameCollection.Count
  - System.DirectoryServices.SchemaNameCollection.GetEnumerator
  - System.DirectoryServices.SchemaNameCollection.IndexOf(System.String)
  - System.DirectoryServices.SchemaNameCollection.Insert(System.Int32,System.String)
  - System.DirectoryServices.SchemaNameCollection.Item(System.Int32)
  - System.DirectoryServices.SchemaNameCollection.Remove(System.String)
  - System.DirectoryServices.SchemaNameCollection.RemoveAt(System.Int32)
  - System.DirectoryServices.SchemaNameCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  - System.DirectoryServices.SchemaNameCollection.System#Collections#ICollection#IsSynchronized
  - System.DirectoryServices.SchemaNameCollection.System#Collections#ICollection#SyncRoot
  - System.DirectoryServices.SchemaNameCollection.System#Collections#IList#Add(System.Object)
  - System.DirectoryServices.SchemaNameCollection.System#Collections#IList#Contains(System.Object)
  - System.DirectoryServices.SchemaNameCollection.System#Collections#IList#IndexOf(System.Object)
  - System.DirectoryServices.SchemaNameCollection.System#Collections#IList#Insert(System.Int32,System.Object)
  - System.DirectoryServices.SchemaNameCollection.System#Collections#IList#IsFixedSize
  - System.DirectoryServices.SchemaNameCollection.System#Collections#IList#IsReadOnly
  - System.DirectoryServices.SchemaNameCollection.System#Collections#IList#Item(System.Int32)
  - System.DirectoryServices.SchemaNameCollection.System#Collections#IList#Remove(System.Object)
  langs:
  - csharp
  name: SchemaNameCollection
  nameWithType: SchemaNameCollection
  fullName: System.DirectoryServices.SchemaNameCollection
  type: Class
  summary: "Innehåller en lista över schemat namn som den <xref:System.DirectoryServices.DirectoryEntries.SchemaFilter*>egenskapen för en <xref href=&quot;System.DirectoryServices.DirectoryEntries&quot;> </xref> objekt kan använda.</xref:System.DirectoryServices.DirectoryEntries.SchemaFilter*>"
  syntax:
    content: 'public class SchemaNameCollection : System.Collections.IList'
  inheritance:
  - System.Object
  implements:
  - System.Collections.IList
  inheritedMembers: []
  platform:
  - net462
- uid: System.DirectoryServices.SchemaNameCollection.Add(System.String)
  id: Add(System.String)
  parent: System.DirectoryServices.SchemaNameCollection
  langs:
  - csharp
  name: Add(String)
  nameWithType: SchemaNameCollection.Add(String)
  fullName: System.DirectoryServices.SchemaNameCollection.Add(String)
  type: Method
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "Lägger till ett angivet namn i den här samlingen."
  syntax:
    content: public int Add (string value);
    parameters:
    - id: value
      type: System.String
      description: "Schemanamnet att lägga till den här samlingen."
    return:
      type: System.Int32
      description: "Det nollbaserade indexet för det angivna egenskapsvärdet. Om objektet inte finns, är det returnera värdet-1."
  overload: System.DirectoryServices.SchemaNameCollection.Add*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.SchemaNameCollection.AddRange(System.DirectoryServices.SchemaNameCollection)
  id: AddRange(System.DirectoryServices.SchemaNameCollection)
  parent: System.DirectoryServices.SchemaNameCollection
  langs:
  - csharp
  name: AddRange(SchemaNameCollection)
  nameWithType: SchemaNameCollection.AddRange(SchemaNameCollection)
  fullName: System.DirectoryServices.SchemaNameCollection.AddRange(SchemaNameCollection)
  type: Method
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "Lägger till en uppsättning angivna schemanamn i den här samlingen."
  syntax:
    content: public void AddRange (System.DirectoryServices.SchemaNameCollection value);
    parameters:
    - id: value
      type: System.DirectoryServices.SchemaNameCollection
      description: "En <xref href=&quot;System.DirectoryServices.SchemaNameCollection&quot;> </xref> som innehåller de schemanamn att lägga till."
  overload: System.DirectoryServices.SchemaNameCollection.AddRange*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.SchemaNameCollection.AddRange(System.String[])
  id: AddRange(System.String[])
  parent: System.DirectoryServices.SchemaNameCollection
  langs:
  - csharp
  name: AddRange(String[])
  nameWithType: SchemaNameCollection.AddRange(String[])
  fullName: System.DirectoryServices.SchemaNameCollection.AddRange(String[])
  type: Method
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "Lägger till en uppsättning angivna schemanamn i den här samlingen."
  syntax:
    content: public void AddRange (string[] value);
    parameters:
    - id: value
      type: System.String[]
      description: "En matris av typen <xref:System.String>som innehåller schemanamn lägga till.</xref:System.String>"
  overload: System.DirectoryServices.SchemaNameCollection.AddRange*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.SchemaNameCollection.Clear
  id: Clear
  parent: System.DirectoryServices.SchemaNameCollection
  langs:
  - csharp
  name: Clear()
  nameWithType: SchemaNameCollection.Clear()
  fullName: System.DirectoryServices.SchemaNameCollection.Clear()
  type: Method
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "Tar bort alla objekt från samlingen."
  syntax:
    content: public void Clear ();
    parameters: []
  overload: System.DirectoryServices.SchemaNameCollection.Clear*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.SchemaNameCollection.Contains(System.String)
  id: Contains(System.String)
  parent: System.DirectoryServices.SchemaNameCollection
  langs:
  - csharp
  name: Contains(String)
  nameWithType: SchemaNameCollection.Contains(String)
  fullName: System.DirectoryServices.SchemaNameCollection.Contains(String)
  type: Method
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "Anger om den här samlingen innehåller ett angivet namn."
  syntax:
    content: public bool Contains (string value);
    parameters:
    - id: value
      type: System.String
      description: "Schemanamnet att söka efter."
    return:
      type: System.Boolean
      description: "Det returnera värdet är <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref> om den angivna egenskapen tillhör den här samlingen; annars <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.DirectoryServices.SchemaNameCollection.Contains*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.SchemaNameCollection.CopyTo(System.String[],System.Int32)
  id: CopyTo(System.String[],System.Int32)
  parent: System.DirectoryServices.SchemaNameCollection
  langs:
  - csharp
  name: CopyTo(String[],Int32)
  nameWithType: SchemaNameCollection.CopyTo(String[],Int32)
  fullName: System.DirectoryServices.SchemaNameCollection.CopyTo(String[],Int32)
  type: Method
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "Kopierar schemanamn från samlingen till en matris med början vid ett visst index i matrisen."
  syntax:
    content: public void CopyTo (string[] stringArray, int index);
    parameters:
    - id: stringArray
      type: System.String[]
      description: "En matris av typen <xref:System.String>som tar emot schemanamn i den här samlingen.</xref:System.String>"
    - id: index
      type: System.Int32
      description: "Index som du vill börja kopiera schemanamn Nollbaserad matris."
  overload: System.DirectoryServices.SchemaNameCollection.CopyTo*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.SchemaNameCollection.Count
  id: Count
  parent: System.DirectoryServices.SchemaNameCollection
  langs:
  - csharp
  name: Count
  nameWithType: SchemaNameCollection.Count
  fullName: System.DirectoryServices.SchemaNameCollection.Count
  type: Property
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "Egenskapen Count hämtar antalet objekt i samlingen."
  syntax:
    content: public int Count { get; }
    return:
      type: System.Int32
      description: "Antal objekt i samlingen."
  overload: System.DirectoryServices.SchemaNameCollection.Count*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.SchemaNameCollection.GetEnumerator
  id: GetEnumerator
  parent: System.DirectoryServices.SchemaNameCollection
  langs:
  - csharp
  name: GetEnumerator()
  nameWithType: SchemaNameCollection.GetEnumerator()
  fullName: System.DirectoryServices.SchemaNameCollection.GetEnumerator()
  type: Method
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "Returnerar en uppräknare som du kan använda för att gå igenom den här samlingen."
  syntax:
    content: public System.Collections.IEnumerator GetEnumerator ();
    parameters: []
    return:
      type: System.Collections.IEnumerator
      description: "En uppräknare som du använde för att gå igenom den här samlingen."
  overload: System.DirectoryServices.SchemaNameCollection.GetEnumerator*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.SchemaNameCollection.IndexOf(System.String)
  id: IndexOf(System.String)
  parent: System.DirectoryServices.SchemaNameCollection
  langs:
  - csharp
  name: IndexOf(String)
  nameWithType: SchemaNameCollection.IndexOf(String)
  fullName: System.DirectoryServices.SchemaNameCollection.IndexOf(String)
  type: Method
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "Anger index för ett angivet namn i den här samlingen."
  syntax:
    content: public int IndexOf (string value);
    parameters:
    - id: value
      type: System.String
      description: "Schemanamnet att söka efter."
    return:
      type: System.Int32
      description: "Det nollbaserade indexet för det angivna schemanamnet eller -1 om schemanamnet inte hittades i samlingen."
  overload: System.DirectoryServices.SchemaNameCollection.IndexOf*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.SchemaNameCollection.Insert(System.Int32,System.String)
  id: Insert(System.Int32,System.String)
  parent: System.DirectoryServices.SchemaNameCollection
  langs:
  - csharp
  name: Insert(Int32,String)
  nameWithType: SchemaNameCollection.Insert(Int32,String)
  fullName: System.DirectoryServices.SchemaNameCollection.Insert(Int32,String)
  type: Method
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "Infogar ett schemanamn i den här samlingen vid ett specificerat index."
  remarks: "Om den `index` parametern är lika med antalet objekt i samlingen, den här metoden lägger till värdet i slutet av samlingen."
  syntax:
    content: public void Insert (int index, string value);
    parameters:
    - id: index
      type: System.Int32
      description: "Det nollbaserade indexet för samlingen som du vill infoga schemanamnet."
    - id: value
      type: System.String
      description: "Schemanamnet att infoga i den här samlingen."
  overload: System.DirectoryServices.SchemaNameCollection.Insert*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.SchemaNameCollection.Item(System.Int32)
  id: Item(System.Int32)
  parent: System.DirectoryServices.SchemaNameCollection
  langs:
  - csharp
  name: Item(Int32)
  nameWithType: SchemaNameCollection.Item(Int32)
  fullName: System.DirectoryServices.SchemaNameCollection.Item(Int32)
  type: Property
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "Hämtar eller anger det objekt som finns vid ett specificerat index."
  remarks: "I C# är den här egenskapen indexerare för <xref:System.DirectoryServices.SchemaNameCollection>klass.</xref:System.DirectoryServices.SchemaNameCollection>       Du kan använda indexerade standardegenskaper som definieras av en typ i JScript, men du kan inte explicit definiera egna. Men indexerade att ange attributet expando för en klass automatiskt tillhandahåller en standard egenskap vars typ är Object och vars Indextypen <xref:System.String>.</xref:System.String>"
  syntax:
    content: public string this[int index] { get; set; }
    parameters:
    - id: index
      type: System.Int32
      description: "Det nollbaserade indexet för samlingen."
    return:
      type: System.String
      description: "Det objekt som finns på det angivna indexet."
  overload: System.DirectoryServices.SchemaNameCollection.Item*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.SchemaNameCollection.Remove(System.String)
  id: Remove(System.String)
  parent: System.DirectoryServices.SchemaNameCollection
  langs:
  - csharp
  name: Remove(String)
  nameWithType: SchemaNameCollection.Remove(String)
  fullName: System.DirectoryServices.SchemaNameCollection.Remove(String)
  type: Method
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "Tar bort angivna schemanamnet från den här samlingen."
  syntax:
    content: public void Remove (string value);
    parameters:
    - id: value
      type: System.String
      description: "Schemanamnet ska tas bort."
  overload: System.DirectoryServices.SchemaNameCollection.Remove*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.SchemaNameCollection.RemoveAt(System.Int32)
  id: RemoveAt(System.Int32)
  parent: System.DirectoryServices.SchemaNameCollection
  langs:
  - csharp
  name: RemoveAt(Int32)
  nameWithType: SchemaNameCollection.RemoveAt(Int32)
  fullName: System.DirectoryServices.SchemaNameCollection.RemoveAt(Int32)
  type: Method
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "Tar bort schemanamnet på som vid ett specificerat index från samlingen."
  syntax:
    content: public void RemoveAt (int index);
    parameters:
    - id: index
      type: System.Int32
      description: "Det nollbaserade indexet för att ta bort schemanamnet."
  overload: System.DirectoryServices.SchemaNameCollection.RemoveAt*
  exceptions:
  - type: System.IndexOutOfRangeException
    commentId: T:System.IndexOutOfRangeException
    description: "Det nollbaserade indexet är antingen mindre än noll eller lika med mängdens storlek."
  platform:
  - net462
- uid: System.DirectoryServices.SchemaNameCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  id: System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  isEii: true
  parent: System.DirectoryServices.SchemaNameCollection
  langs:
  - csharp
  name: System.Collections.ICollection.CopyTo(Array,Int32)
  nameWithType: SchemaNameCollection.System.Collections.ICollection.CopyTo(Array,Int32)
  fullName: System.DirectoryServices.SchemaNameCollection.System.Collections.ICollection.CopyTo(Array,Int32)
  type: Method
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "Kopierar delarna av den <xref:System.Collections.ICollection>till en <xref:System.Array>början från en viss <xref:System.Array>index.</xref:System.Array> </xref:System.Array> </xref:System.Collections.ICollection>"
  syntax:
    content: void ICollection.CopyTo (Array array, int index);
    parameters:
    - id: array
      type: System.Array
      description: "Endimensionell <xref:System.Array>som är mål för element som kopieras från <xref:System.Collections.ICollection>.</xref:System.Collections.ICollection> </xref:System.Array> Den <xref:System.Array>måste ha Nollbaserad indexering.</xref:System.Array>"
    - id: index
      type: System.Int32
      description: "Det nollbaserade indexet i `array` vilka kopiera börjar."
  overload: System.DirectoryServices.SchemaNameCollection.System#Collections#ICollection#CopyTo*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>array</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>index</code>är mindre än noll."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>array</code>är multidimensionell.       - eller - antalet element i källan <xref:System.Collections.ICollection> är större än det tillgängliga utrymmet från <code>index</code> till slutet av destinationen <code>array</code>."
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "Typ av källan <xref:System.Collections.ICollection>kan inte omvandlas automatiskt till typ av målet <code> array </code>.</xref:System.Collections.ICollection>"
  platform:
  - net462
- uid: System.DirectoryServices.SchemaNameCollection.System#Collections#ICollection#IsSynchronized
  id: System#Collections#ICollection#IsSynchronized
  isEii: true
  parent: System.DirectoryServices.SchemaNameCollection
  langs:
  - csharp
  name: System.Collections.ICollection.IsSynchronized
  nameWithType: SchemaNameCollection.System.Collections.ICollection.IsSynchronized
  fullName: System.DirectoryServices.SchemaNameCollection.System.Collections.ICollection.IsSynchronized
  type: Property
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "Hämtar ett värde som anger om åtkomst till den <xref:System.Collections.ICollection>är synkroniserade (trådsäkra).</xref:System.Collections.ICollection>"
  remarks: "<xref:System.Collections.ICollection.SyncRoot%2A>Returnerar ett objekt som kan användas för att synkronisera åtkomst till <xref:System.Collections.ICollection>.</xref:System.Collections.ICollection></xref:System.Collections.ICollection.SyncRoot%2A>       De flesta samling klasser i den <xref:System.Collections?displayProperty=fullName>namnområde implementerar också en Synchronized-metoden, vilket ger en synkroniserade wrapper runt den underliggande mängden.</xref:System.Collections?displayProperty=fullName>       Uppräkning av en samling är är inte en trådsäker procedur. Även när en samling har synkroniserats, kan andra trådar ändå ändra samlingen, vilket gör att uppräknaren att utlösa ett undantag. För att garantera tråd under uppräkning, kan du låsa samlingen under hela uppräkning eller fånga undantag som uppstår till följd av ändringar som gjorts av andra trådar.       [Visual Basic och C#]       I följande exempel visas hur du låser en samling med hjälp av den <xref:System.Collections.ICollection.SyncRoot%2A>under hela uppräkningen: ```c#   ICollection myCollection = new ICollection();     lock(myCollection.SyncRoot) {     foreach (Object item in myCollection) {     // Insert your code here.     }    }   ``` ```vb#   Dim myCollection As New ICollection()    Dim item As Object    SyncLock myCollection.SyncRoot     For Each item In myCollection     &quot; Insert your code here.     Next item    End SyncLock   ```       </xref:System.Collections.ICollection.SyncRoot%2A>"
  syntax:
    content: bool System.Collections.ICollection.IsSynchronized { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Om åtkomst till den <xref:System.Collections.ICollection>är synkroniserade (trådsäkra); annars <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>.</xref:System.Collections.ICollection>"
  overload: System.DirectoryServices.SchemaNameCollection.System#Collections#ICollection#IsSynchronized*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.SchemaNameCollection.System#Collections#ICollection#SyncRoot
  id: System#Collections#ICollection#SyncRoot
  isEii: true
  parent: System.DirectoryServices.SchemaNameCollection
  langs:
  - csharp
  name: System.Collections.ICollection.SyncRoot
  nameWithType: SchemaNameCollection.System.Collections.ICollection.SyncRoot
  fullName: System.DirectoryServices.SchemaNameCollection.System.Collections.ICollection.SyncRoot
  type: Property
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "Hämtar ett objekt som kan användas för att synkronisera åtkomst till <xref:System.Collections.ICollection>.</xref:System.Collections.ICollection>"
  remarks: "För samlingar med ett underliggande arkivet inte är offentligt tillgänglig, är den förväntade implementeringen att returnera den aktuella instansen. Observera att pekaren till den aktuella instansen inte är tillräckligt för samlingar som omsluter andra samlingar; de ska returnera den underliggande mängden `SyncRoot` egenskapen.       De flesta samling klasser i den <xref:System.Collections?displayProperty=fullName>namnområde även implementera en `Synchronized` metod, vilket ger en synkroniserade wrapper runt den underliggande mängden.</xref:System.Collections?displayProperty=fullName> Härledda klasser kan dock ge sina egna synkroniserade versionen av en samling med hjälp av den <xref:System.Collections.ICollection.SyncRoot%2A>egenskapen.</xref:System.Collections.ICollection.SyncRoot%2A> Synkronisera kod måste utföra åtgärder på den <xref:System.Collections.ICollection.SyncRoot%2A>mängden inte direkt på samlingen.</xref:System.Collections.ICollection.SyncRoot%2A> Detta säkerställer att samlingar som är härledda från andra objekt ska fungera korrekt. Mer specifikt upprätthåller den rätt synkronisering med andra trådar som samtidigt ändra collection-instansen.       Om en `Synchronized` metod i en samling, den förväntade användningen av <xref:System.Collections.ICollection.SyncRoot%2A>ser ut så här: ```c#   ICollection MyCollection =...    lock(MyCollection.SyncRoot) {     // Some operation on the collection, which is now thread safe.    }   ``` ```vb#   Dim myCollection as New ICollection()    SyncLock myCollection.SyncRoot     &quot; Some operation on the collection, which is now thread safe.    End SyncLock   ``` räknas upp via en samling är inte är en procedur trådsäker.      </xref:System.Collections.ICollection.SyncRoot%2A> Även när en samling har synkroniserats, kan andra trådar ändå ändra samlingen, vilket gör att uppräknaren att utlösa ett undantag. För att garantera tråd under uppräkning, kan du låsa samlingen under hela uppräkning eller fånga undantag som uppstår till följd av ändringar som gjorts av andra trådar.       [Visual Basic och C#]       I följande exempel visas hur du låser en samling med hjälp av den <xref:System.Collections.ICollection.SyncRoot%2A>under hela uppräkningen: ```c#   ICollection myCollection = new ICollection();    lock(myCollection.SyncRoot) {     foreach (Object item in myCollection) {     // Insert your code here.     }    }   ``` ```vb#   Dim myCollection As New ICollection()    Dim item As Object    SyncLock myCollection.SyncRoot     For Each item In myCollection     &quot; Insert your code here.     Next item    End SyncLock   ```       </xref:System.Collections.ICollection.SyncRoot%2A>"
  syntax:
    content: object System.Collections.ICollection.SyncRoot { get; }
    return:
      type: System.Object
      description: "Ett objekt som kan användas för att synkronisera åtkomst till <xref:System.Collections.ICollection>.</xref:System.Collections.ICollection>"
  overload: System.DirectoryServices.SchemaNameCollection.System#Collections#ICollection#SyncRoot*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.SchemaNameCollection.System#Collections#IList#Add(System.Object)
  id: System#Collections#IList#Add(System.Object)
  isEii: true
  parent: System.DirectoryServices.SchemaNameCollection
  langs:
  - csharp
  name: System.Collections.IList.Add(Object)
  nameWithType: SchemaNameCollection.System.Collections.IList.Add(Object)
  fullName: System.DirectoryServices.SchemaNameCollection.System.Collections.IList.Add(Object)
  type: Method
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "Lägger till ett objekt i listan."
  syntax:
    content: int IList.Add (object value);
    parameters:
    - id: value
      type: System.Object
      description: "Objektet du vill lägga till i listan."
    return:
      type: System.Int32
      description: "Positionen där det nya objektet infogas."
  overload: System.DirectoryServices.SchemaNameCollection.System#Collections#IList#Add*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.SchemaNameCollection.System#Collections#IList#Contains(System.Object)
  id: System#Collections#IList#Contains(System.Object)
  isEii: true
  parent: System.DirectoryServices.SchemaNameCollection
  langs:
  - csharp
  name: System.Collections.IList.Contains(Object)
  nameWithType: SchemaNameCollection.System.Collections.IList.Contains(Object)
  fullName: System.DirectoryServices.SchemaNameCollection.System.Collections.IList.Contains(Object)
  type: Method
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "Anger om listan innehåller ett angivet värde."
  remarks: "Från och med .NET Framework 2.0 kan den här metoden använder lika med och CompareTo metoder för objekt i samlingen för att avgöra om objektet finns. I tidigare versioner av .NET Framework detta gjordes med är lika med och CompareTo metoder för parametern objekt för objekt i samlingen."
  syntax:
    content: bool IList.Contains (object value);
    parameters:
    - id: value
      type: System.Object
      description: "Värdet för att hitta i listan."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Om värdet finns i listan, annars <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.DirectoryServices.SchemaNameCollection.System#Collections#IList#Contains*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.SchemaNameCollection.System#Collections#IList#IndexOf(System.Object)
  id: System#Collections#IList#IndexOf(System.Object)
  isEii: true
  parent: System.DirectoryServices.SchemaNameCollection
  langs:
  - csharp
  name: System.Collections.IList.IndexOf(Object)
  nameWithType: SchemaNameCollection.System.Collections.IList.IndexOf(Object)
  fullName: System.DirectoryServices.SchemaNameCollection.System.Collections.IList.IndexOf(Object)
  type: Method
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "Anger index för ett angivet objekt i listan."
  remarks: "Från och med .NET Framework 2.0 kan den här metoden använder lika med och CompareTo metoder för objekt i samlingen för att avgöra om objektet finns. I tidigare versioner av .NET Framework detta gjordes med är lika med och CompareTo metoder för parametern objekt för objekt i samlingen."
  syntax:
    content: int IList.IndexOf (object value);
    parameters:
    - id: value
      type: System.Object
      description: "Objektet du vill leta upp i listan."
    return:
      type: System.Int32
      description: "Index för <code> value </code> om i listan, annars -1."
  overload: System.DirectoryServices.SchemaNameCollection.System#Collections#IList#IndexOf*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.SchemaNameCollection.System#Collections#IList#Insert(System.Int32,System.Object)
  id: System#Collections#IList#Insert(System.Int32,System.Object)
  isEii: true
  parent: System.DirectoryServices.SchemaNameCollection
  langs:
  - csharp
  name: System.Collections.IList.Insert(Int32,Object)
  nameWithType: SchemaNameCollection.System.Collections.IList.Insert(Int32,Object)
  fullName: System.DirectoryServices.SchemaNameCollection.System.Collections.IList.Insert(Int32,Object)
  type: Method
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "Infogar ett objekt i listan med det angivna indexet."
  remarks: "Om `index` är lika med antalet objekt i listan, sedan *värdet* läggs till i slutet.       Element som följer efter elementet borttagna flytta uppta vacated plats i samlingar med sammanhängande element, till exempel listor. Om samlingen är indexerad, uppdateras även indexen för element som flyttas."
  syntax:
    content: void IList.Insert (int index, object value);
    parameters:
    - id: index
      type: System.Int32
      description: "Det nollbaserade indexet som värdet ska infogas."
    - id: value
      type: System.Object
      description: "Objektet du vill infoga i listan."
  overload: System.DirectoryServices.SchemaNameCollection.System#Collections#IList#Insert*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.SchemaNameCollection.System#Collections#IList#IsFixedSize
  id: System#Collections#IList#IsFixedSize
  isEii: true
  parent: System.DirectoryServices.SchemaNameCollection
  langs:
  - csharp
  name: System.Collections.IList.IsFixedSize
  nameWithType: SchemaNameCollection.System.Collections.IList.IsFixedSize
  fullName: System.DirectoryServices.SchemaNameCollection.System.Collections.IList.IsFixedSize
  type: Property
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "Hämtar ett värde som anger om den <xref:System.Collections.IList>har en fast storlek.</xref:System.Collections.IList>"
  remarks: "En samling med en fast storlek kan inte tillägg eller borttagning av element när samlingen har skapats, men det gör ändringar av befintliga element."
  syntax:
    content: bool System.Collections.IList.IsFixedSize { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Om den <xref:System.Collections.IList>har en fast storlek, i annat fall <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>.</xref:System.Collections.IList>"
  overload: System.DirectoryServices.SchemaNameCollection.System#Collections#IList#IsFixedSize*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.SchemaNameCollection.System#Collections#IList#IsReadOnly
  id: System#Collections#IList#IsReadOnly
  isEii: true
  parent: System.DirectoryServices.SchemaNameCollection
  langs:
  - csharp
  name: System.Collections.IList.IsReadOnly
  nameWithType: SchemaNameCollection.System.Collections.IList.IsReadOnly
  fullName: System.DirectoryServices.SchemaNameCollection.System.Collections.IList.IsReadOnly
  type: Property
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "Hämtar ett värde som anger om den <xref:System.Collections.IList>är skrivskyddad.</xref:System.Collections.IList>"
  remarks: "En samling som är skrivskyddat tillåter inte att tillägg, borttagning eller ändring av element när samlingen har skapats."
  syntax:
    content: bool System.Collections.IList.IsReadOnly { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Om den <xref:System.Collections.IList>är skrivskyddad, annars <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>.</xref:System.Collections.IList>"
  overload: System.DirectoryServices.SchemaNameCollection.System#Collections#IList#IsReadOnly*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.SchemaNameCollection.System#Collections#IList#Item(System.Int32)
  id: System#Collections#IList#Item(System.Int32)
  isEii: true
  parent: System.DirectoryServices.SchemaNameCollection
  langs:
  - csharp
  name: System.Collections.IList.Item(Int32)
  nameWithType: SchemaNameCollection.System.Collections.IList.Item(Int32)
  fullName: System.DirectoryServices.SchemaNameCollection.System.Collections.IList.Item(Int32)
  type: Property
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "Hämtar eller anger elementet med det angivna indexet."
  remarks: 'Den här egenskapen ger möjlighet att komma åt ett visst element i samlingen med följande syntax: `myCollection[index]`.'
  syntax:
    content: object System.Collections.IList.Item[int index] { get; set; }
    parameters:
    - id: index
      type: System.Int32
      description: "Det nollbaserade indexet för elementet du vill hämta eller ange."
    return:
      type: System.Object
      description: "Element med det angivna indexet."
  overload: System.DirectoryServices.SchemaNameCollection.System#Collections#IList#Item*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>index</code>är inte ett giltigt index i den <xref:System.Collections.IList>."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "Egenskapen har angetts och <xref:System.Collections.IList>är skrivskyddad.</xref:System.Collections.IList>"
  platform:
  - net462
- uid: System.DirectoryServices.SchemaNameCollection.System#Collections#IList#Remove(System.Object)
  id: System#Collections#IList#Remove(System.Object)
  isEii: true
  parent: System.DirectoryServices.SchemaNameCollection
  langs:
  - csharp
  name: System.Collections.IList.Remove(Object)
  nameWithType: SchemaNameCollection.System.Collections.IList.Remove(Object)
  fullName: System.DirectoryServices.SchemaNameCollection.System.Collections.IList.Remove(Object)
  type: Method
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "Tar bort den första förekomsten av en specifik <code> value </code> från listan."
  remarks: "Element som följer efter elementet borttagna flytta uppta vacated plats i samlingar med sammanhängande element, till exempel listor. Om samlingen är indexerad, uppdateras även indexen för element som flyttas."
  syntax:
    content: void IList.Remove (object value);
    parameters:
    - id: value
      type: System.Object
      description: "Den `value` att ta bort från listan."
  overload: System.DirectoryServices.SchemaNameCollection.System#Collections#IList#Remove*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.IndexOutOfRangeException
  isExternal: true
  name: System.IndexOutOfRangeException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.InvalidCastException
  isExternal: true
  name: System.InvalidCastException
- uid: System.NotSupportedException
  isExternal: true
  name: System.NotSupportedException
- uid: System.DirectoryServices.SchemaNameCollection.Add(System.String)
  parent: System.DirectoryServices.SchemaNameCollection
  isExternal: false
  name: Add(String)
  nameWithType: SchemaNameCollection.Add(String)
  fullName: System.DirectoryServices.SchemaNameCollection.Add(String)
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.DirectoryServices.SchemaNameCollection.AddRange(System.DirectoryServices.SchemaNameCollection)
  parent: System.DirectoryServices.SchemaNameCollection
  isExternal: false
  name: AddRange(SchemaNameCollection)
  nameWithType: SchemaNameCollection.AddRange(SchemaNameCollection)
  fullName: System.DirectoryServices.SchemaNameCollection.AddRange(SchemaNameCollection)
- uid: System.DirectoryServices.SchemaNameCollection
  parent: System.DirectoryServices
  isExternal: false
  name: SchemaNameCollection
  nameWithType: SchemaNameCollection
  fullName: System.DirectoryServices.SchemaNameCollection
- uid: System.DirectoryServices.SchemaNameCollection.AddRange(System.String[])
  parent: System.DirectoryServices.SchemaNameCollection
  isExternal: false
  name: AddRange(String[])
  nameWithType: SchemaNameCollection.AddRange(String[])
  fullName: System.DirectoryServices.SchemaNameCollection.AddRange(String[])
- uid: System.String[]
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String[]
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.DirectoryServices.SchemaNameCollection.Clear
  parent: System.DirectoryServices.SchemaNameCollection
  isExternal: false
  name: Clear()
  nameWithType: SchemaNameCollection.Clear()
  fullName: System.DirectoryServices.SchemaNameCollection.Clear()
- uid: System.DirectoryServices.SchemaNameCollection.Contains(System.String)
  parent: System.DirectoryServices.SchemaNameCollection
  isExternal: false
  name: Contains(String)
  nameWithType: SchemaNameCollection.Contains(String)
  fullName: System.DirectoryServices.SchemaNameCollection.Contains(String)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.DirectoryServices.SchemaNameCollection.CopyTo(System.String[],System.Int32)
  parent: System.DirectoryServices.SchemaNameCollection
  isExternal: false
  name: CopyTo(String[],Int32)
  nameWithType: SchemaNameCollection.CopyTo(String[],Int32)
  fullName: System.DirectoryServices.SchemaNameCollection.CopyTo(String[],Int32)
- uid: System.DirectoryServices.SchemaNameCollection.Count
  parent: System.DirectoryServices.SchemaNameCollection
  isExternal: false
  name: Count
  nameWithType: SchemaNameCollection.Count
  fullName: System.DirectoryServices.SchemaNameCollection.Count
- uid: System.DirectoryServices.SchemaNameCollection.GetEnumerator
  parent: System.DirectoryServices.SchemaNameCollection
  isExternal: false
  name: GetEnumerator()
  nameWithType: SchemaNameCollection.GetEnumerator()
  fullName: System.DirectoryServices.SchemaNameCollection.GetEnumerator()
- uid: System.Collections.IEnumerator
  parent: System.Collections
  isExternal: true
  name: IEnumerator
  nameWithType: IEnumerator
  fullName: System.Collections.IEnumerator
- uid: System.DirectoryServices.SchemaNameCollection.IndexOf(System.String)
  parent: System.DirectoryServices.SchemaNameCollection
  isExternal: false
  name: IndexOf(String)
  nameWithType: SchemaNameCollection.IndexOf(String)
  fullName: System.DirectoryServices.SchemaNameCollection.IndexOf(String)
- uid: System.DirectoryServices.SchemaNameCollection.Insert(System.Int32,System.String)
  parent: System.DirectoryServices.SchemaNameCollection
  isExternal: false
  name: Insert(Int32,String)
  nameWithType: SchemaNameCollection.Insert(Int32,String)
  fullName: System.DirectoryServices.SchemaNameCollection.Insert(Int32,String)
- uid: System.DirectoryServices.SchemaNameCollection.Item(System.Int32)
  parent: System.DirectoryServices.SchemaNameCollection
  isExternal: false
  name: Item(Int32)
  nameWithType: SchemaNameCollection.Item(Int32)
  fullName: System.DirectoryServices.SchemaNameCollection.Item(Int32)
- uid: System.DirectoryServices.SchemaNameCollection.Remove(System.String)
  parent: System.DirectoryServices.SchemaNameCollection
  isExternal: false
  name: Remove(String)
  nameWithType: SchemaNameCollection.Remove(String)
  fullName: System.DirectoryServices.SchemaNameCollection.Remove(String)
- uid: System.DirectoryServices.SchemaNameCollection.RemoveAt(System.Int32)
  parent: System.DirectoryServices.SchemaNameCollection
  isExternal: false
  name: RemoveAt(Int32)
  nameWithType: SchemaNameCollection.RemoveAt(Int32)
  fullName: System.DirectoryServices.SchemaNameCollection.RemoveAt(Int32)
- uid: System.DirectoryServices.SchemaNameCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  parent: System.DirectoryServices.SchemaNameCollection
  isExternal: false
  name: System.Collections.ICollection.CopyTo(Array,Int32)
  nameWithType: SchemaNameCollection.System.Collections.ICollection.CopyTo(Array,Int32)
  fullName: System.DirectoryServices.SchemaNameCollection.System.Collections.ICollection.CopyTo(Array,Int32)
- uid: System.Array
  parent: System
  isExternal: true
  name: Array
  nameWithType: Array
  fullName: System.Array
- uid: System.DirectoryServices.SchemaNameCollection.System#Collections#ICollection#IsSynchronized
  parent: System.DirectoryServices.SchemaNameCollection
  isExternal: false
  name: System.Collections.ICollection.IsSynchronized
  nameWithType: SchemaNameCollection.System.Collections.ICollection.IsSynchronized
  fullName: System.DirectoryServices.SchemaNameCollection.System.Collections.ICollection.IsSynchronized
- uid: System.DirectoryServices.SchemaNameCollection.System#Collections#ICollection#SyncRoot
  parent: System.DirectoryServices.SchemaNameCollection
  isExternal: false
  name: System.Collections.ICollection.SyncRoot
  nameWithType: SchemaNameCollection.System.Collections.ICollection.SyncRoot
  fullName: System.DirectoryServices.SchemaNameCollection.System.Collections.ICollection.SyncRoot
- uid: System.DirectoryServices.SchemaNameCollection.System#Collections#IList#Add(System.Object)
  parent: System.DirectoryServices.SchemaNameCollection
  isExternal: false
  name: System.Collections.IList.Add(Object)
  nameWithType: SchemaNameCollection.System.Collections.IList.Add(Object)
  fullName: System.DirectoryServices.SchemaNameCollection.System.Collections.IList.Add(Object)
- uid: System.DirectoryServices.SchemaNameCollection.System#Collections#IList#Contains(System.Object)
  parent: System.DirectoryServices.SchemaNameCollection
  isExternal: false
  name: System.Collections.IList.Contains(Object)
  nameWithType: SchemaNameCollection.System.Collections.IList.Contains(Object)
  fullName: System.DirectoryServices.SchemaNameCollection.System.Collections.IList.Contains(Object)
- uid: System.DirectoryServices.SchemaNameCollection.System#Collections#IList#IndexOf(System.Object)
  parent: System.DirectoryServices.SchemaNameCollection
  isExternal: false
  name: System.Collections.IList.IndexOf(Object)
  nameWithType: SchemaNameCollection.System.Collections.IList.IndexOf(Object)
  fullName: System.DirectoryServices.SchemaNameCollection.System.Collections.IList.IndexOf(Object)
- uid: System.DirectoryServices.SchemaNameCollection.System#Collections#IList#Insert(System.Int32,System.Object)
  parent: System.DirectoryServices.SchemaNameCollection
  isExternal: false
  name: System.Collections.IList.Insert(Int32,Object)
  nameWithType: SchemaNameCollection.System.Collections.IList.Insert(Int32,Object)
  fullName: System.DirectoryServices.SchemaNameCollection.System.Collections.IList.Insert(Int32,Object)
- uid: System.DirectoryServices.SchemaNameCollection.System#Collections#IList#IsFixedSize
  parent: System.DirectoryServices.SchemaNameCollection
  isExternal: false
  name: System.Collections.IList.IsFixedSize
  nameWithType: SchemaNameCollection.System.Collections.IList.IsFixedSize
  fullName: System.DirectoryServices.SchemaNameCollection.System.Collections.IList.IsFixedSize
- uid: System.DirectoryServices.SchemaNameCollection.System#Collections#IList#IsReadOnly
  parent: System.DirectoryServices.SchemaNameCollection
  isExternal: false
  name: System.Collections.IList.IsReadOnly
  nameWithType: SchemaNameCollection.System.Collections.IList.IsReadOnly
  fullName: System.DirectoryServices.SchemaNameCollection.System.Collections.IList.IsReadOnly
- uid: System.DirectoryServices.SchemaNameCollection.System#Collections#IList#Item(System.Int32)
  parent: System.DirectoryServices.SchemaNameCollection
  isExternal: false
  name: System.Collections.IList.Item(Int32)
  nameWithType: SchemaNameCollection.System.Collections.IList.Item(Int32)
  fullName: System.DirectoryServices.SchemaNameCollection.System.Collections.IList.Item(Int32)
- uid: System.DirectoryServices.SchemaNameCollection.System#Collections#IList#Remove(System.Object)
  parent: System.DirectoryServices.SchemaNameCollection
  isExternal: false
  name: System.Collections.IList.Remove(Object)
  nameWithType: SchemaNameCollection.System.Collections.IList.Remove(Object)
  fullName: System.DirectoryServices.SchemaNameCollection.System.Collections.IList.Remove(Object)
- uid: System.DirectoryServices.SchemaNameCollection.Add*
  parent: System.DirectoryServices.SchemaNameCollection
  isExternal: false
  name: Add
  nameWithType: SchemaNameCollection.Add
- uid: System.DirectoryServices.SchemaNameCollection.AddRange*
  parent: System.DirectoryServices.SchemaNameCollection
  isExternal: false
  name: AddRange
  nameWithType: SchemaNameCollection.AddRange
- uid: System.DirectoryServices.SchemaNameCollection.Clear*
  parent: System.DirectoryServices.SchemaNameCollection
  isExternal: false
  name: Clear
  nameWithType: SchemaNameCollection.Clear
- uid: System.DirectoryServices.SchemaNameCollection.Contains*
  parent: System.DirectoryServices.SchemaNameCollection
  isExternal: false
  name: Contains
  nameWithType: SchemaNameCollection.Contains
- uid: System.DirectoryServices.SchemaNameCollection.CopyTo*
  parent: System.DirectoryServices.SchemaNameCollection
  isExternal: false
  name: CopyTo
  nameWithType: SchemaNameCollection.CopyTo
- uid: System.DirectoryServices.SchemaNameCollection.Count*
  parent: System.DirectoryServices.SchemaNameCollection
  isExternal: false
  name: Count
  nameWithType: SchemaNameCollection.Count
- uid: System.DirectoryServices.SchemaNameCollection.GetEnumerator*
  parent: System.DirectoryServices.SchemaNameCollection
  isExternal: false
  name: GetEnumerator
  nameWithType: SchemaNameCollection.GetEnumerator
- uid: System.DirectoryServices.SchemaNameCollection.IndexOf*
  parent: System.DirectoryServices.SchemaNameCollection
  isExternal: false
  name: IndexOf
  nameWithType: SchemaNameCollection.IndexOf
- uid: System.DirectoryServices.SchemaNameCollection.Insert*
  parent: System.DirectoryServices.SchemaNameCollection
  isExternal: false
  name: Insert
  nameWithType: SchemaNameCollection.Insert
- uid: System.DirectoryServices.SchemaNameCollection.Item*
  parent: System.DirectoryServices.SchemaNameCollection
  isExternal: false
  name: Item
  nameWithType: SchemaNameCollection.Item
- uid: System.DirectoryServices.SchemaNameCollection.Remove*
  parent: System.DirectoryServices.SchemaNameCollection
  isExternal: false
  name: Remove
  nameWithType: SchemaNameCollection.Remove
- uid: System.DirectoryServices.SchemaNameCollection.RemoveAt*
  parent: System.DirectoryServices.SchemaNameCollection
  isExternal: false
  name: RemoveAt
  nameWithType: SchemaNameCollection.RemoveAt
- uid: System.DirectoryServices.SchemaNameCollection.System#Collections#ICollection#CopyTo*
  parent: System.DirectoryServices.SchemaNameCollection
  isExternal: false
  name: System.Collections.ICollection.CopyTo
  nameWithType: SchemaNameCollection.System.Collections.ICollection.CopyTo
- uid: System.DirectoryServices.SchemaNameCollection.System#Collections#ICollection#IsSynchronized*
  parent: System.DirectoryServices.SchemaNameCollection
  isExternal: false
  name: System.Collections.ICollection.IsSynchronized
  nameWithType: SchemaNameCollection.System.Collections.ICollection.IsSynchronized
- uid: System.DirectoryServices.SchemaNameCollection.System#Collections#ICollection#SyncRoot*
  parent: System.DirectoryServices.SchemaNameCollection
  isExternal: false
  name: System.Collections.ICollection.SyncRoot
  nameWithType: SchemaNameCollection.System.Collections.ICollection.SyncRoot
- uid: System.DirectoryServices.SchemaNameCollection.System#Collections#IList#Add*
  parent: System.DirectoryServices.SchemaNameCollection
  isExternal: false
  name: System.Collections.IList.Add
  nameWithType: SchemaNameCollection.System.Collections.IList.Add
- uid: System.DirectoryServices.SchemaNameCollection.System#Collections#IList#Contains*
  parent: System.DirectoryServices.SchemaNameCollection
  isExternal: false
  name: System.Collections.IList.Contains
  nameWithType: SchemaNameCollection.System.Collections.IList.Contains
- uid: System.DirectoryServices.SchemaNameCollection.System#Collections#IList#IndexOf*
  parent: System.DirectoryServices.SchemaNameCollection
  isExternal: false
  name: System.Collections.IList.IndexOf
  nameWithType: SchemaNameCollection.System.Collections.IList.IndexOf
- uid: System.DirectoryServices.SchemaNameCollection.System#Collections#IList#Insert*
  parent: System.DirectoryServices.SchemaNameCollection
  isExternal: false
  name: System.Collections.IList.Insert
  nameWithType: SchemaNameCollection.System.Collections.IList.Insert
- uid: System.DirectoryServices.SchemaNameCollection.System#Collections#IList#IsFixedSize*
  parent: System.DirectoryServices.SchemaNameCollection
  isExternal: false
  name: System.Collections.IList.IsFixedSize
  nameWithType: SchemaNameCollection.System.Collections.IList.IsFixedSize
- uid: System.DirectoryServices.SchemaNameCollection.System#Collections#IList#IsReadOnly*
  parent: System.DirectoryServices.SchemaNameCollection
  isExternal: false
  name: System.Collections.IList.IsReadOnly
  nameWithType: SchemaNameCollection.System.Collections.IList.IsReadOnly
- uid: System.DirectoryServices.SchemaNameCollection.System#Collections#IList#Item*
  parent: System.DirectoryServices.SchemaNameCollection
  isExternal: false
  name: System.Collections.IList.Item
  nameWithType: SchemaNameCollection.System.Collections.IList.Item
- uid: System.DirectoryServices.SchemaNameCollection.System#Collections#IList#Remove*
  parent: System.DirectoryServices.SchemaNameCollection
  isExternal: false
  name: System.Collections.IList.Remove
  nameWithType: SchemaNameCollection.System.Collections.IList.Remove
