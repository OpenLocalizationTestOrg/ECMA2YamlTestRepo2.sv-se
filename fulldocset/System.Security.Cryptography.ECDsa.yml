### YamlMime:ManagedReference
items:
- uid: System.Security.Cryptography.ECDsa
  id: ECDsa
  children:
  - System.Security.Cryptography.ECDsa.#ctor
  - System.Security.Cryptography.ECDsa.Create
  - System.Security.Cryptography.ECDsa.Create(System.String)
  - System.Security.Cryptography.ECDsa.HashData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)
  - System.Security.Cryptography.ECDsa.HashData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)
  - System.Security.Cryptography.ECDsa.KeyExchangeAlgorithm
  - System.Security.Cryptography.ECDsa.SignatureAlgorithm
  - System.Security.Cryptography.ECDsa.SignData(System.Byte[],System.Security.Cryptography.HashAlgorithmName)
  - System.Security.Cryptography.ECDsa.SignData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)
  - System.Security.Cryptography.ECDsa.SignData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)
  - System.Security.Cryptography.ECDsa.SignHash(System.Byte[])
  - System.Security.Cryptography.ECDsa.VerifyData(System.Byte[],System.Byte[],System.Security.Cryptography.HashAlgorithmName)
  - System.Security.Cryptography.ECDsa.VerifyData(System.IO.Stream,System.Byte[],System.Security.Cryptography.HashAlgorithmName)
  - System.Security.Cryptography.ECDsa.VerifyData(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Security.Cryptography.HashAlgorithmName)
  - System.Security.Cryptography.ECDsa.VerifyHash(System.Byte[],System.Byte[])
  langs:
  - csharp
  name: ECDsa
  nameWithType: ECDsa
  fullName: System.Security.Cryptography.ECDsa
  type: Class
  summary: "Ger en abstrakt basklass som innehåller den Elliptic Curve Digital signatur algoritmen (ECDSA)."
  remarks: "Den här klassen fungerar som abstrakt basklass för <xref:System.Security.Cryptography.ECDsaCng>produkter.</xref:System.Security.Cryptography.ECDsaCng>"
  syntax:
    content: 'public abstract class ECDsa : System.Security.Cryptography.AsymmetricAlgorithm'
  inheritance:
  - System.Object
  - System.Security.Cryptography.AsymmetricAlgorithm
  implements: []
  inheritedMembers:
  - System.Security.Cryptography.AsymmetricAlgorithm.Clear
  - System.Security.Cryptography.AsymmetricAlgorithm.Dispose
  - System.Security.Cryptography.AsymmetricAlgorithm.Dispose(System.Boolean)
  - System.Security.Cryptography.AsymmetricAlgorithm.FromXmlString(System.String)
  - System.Security.Cryptography.AsymmetricAlgorithm.KeySize
  - System.Security.Cryptography.AsymmetricAlgorithm.KeySizeValue
  - System.Security.Cryptography.AsymmetricAlgorithm.LegalKeySizes
  - System.Security.Cryptography.AsymmetricAlgorithm.LegalKeySizesValue
  - System.Security.Cryptography.AsymmetricAlgorithm.ToXmlString(System.Boolean)
  platform:
  - net462
- uid: System.Security.Cryptography.ECDsa.#ctor
  id: '#ctor'
  parent: System.Security.Cryptography.ECDsa
  langs:
  - csharp
  name: ECDsa()
  nameWithType: ECDsa.ECDsa()
  fullName: System.Security.Cryptography.ECDsa.ECDsa()
  type: Constructor
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: "Initierar en ny instans av den <xref href=&quot;System.Security.Cryptography.ECDsa&quot;> </xref> klass."
  remarks: "Den här konstruktorn anropas av klasserna som härleds från <xref:System.Security.Cryptography.ECDsa>klassen.</xref:System.Security.Cryptography.ECDsa> Den <xref:System.Security.Cryptography.ECDsaCng>klassen är endast implementering för närvarande stöds av den [!INCLUDE[dnprdnshort](~/add/includes/dnprdnshort-md.md)].</xref:System.Security.Cryptography.ECDsaCng> Du kan ange en egen anpassad implementering."
  syntax:
    content: protected ECDsa ();
    parameters: []
  overload: System.Security.Cryptography.ECDsa.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.ECDsa.Create
  id: Create
  parent: System.Security.Cryptography.ECDsa
  langs:
  - csharp
  name: Create()
  nameWithType: ECDsa.Create()
  fullName: System.Security.Cryptography.ECDsa.Create()
  type: Method
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: "Skapar en ny instans av standardimplementering av den elliptisk kurva Digital signatur algoritmen (ECDSA)."
  syntax:
    content: public static System.Security.Cryptography.ECDsa Create ();
    parameters: []
    return:
      type: System.Security.Cryptography.ECDsa
      description: "En ny instans av standardimplementering (<xref href=&quot;System.Security.Cryptography.ECDsaCng&quot;></xref>) för den här klassen."
  overload: System.Security.Cryptography.ECDsa.Create*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.ECDsa.Create(System.String)
  id: Create(System.String)
  parent: System.Security.Cryptography.ECDsa
  langs:
  - csharp
  name: Create(String)
  nameWithType: ECDsa.Create(String)
  fullName: System.Security.Cryptography.ECDsa.Create(String)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: "Skapar en ny instans av den angivna implementeringen av den elliptisk kurva Digital signatur algoritmen (ECDSA)."
  remarks: "Om du utvecklar dina egna implementering av en <xref:System.Security.Cryptography.ECDsa>objekt du kan använda metodöverlagringen skapa för att skapa en anpassad `algorithm` sträng som anger din implementering.</xref:System.Security.Cryptography.ECDsa>       Om du anger ett anpassat värde för den `algorithm` parameter, den <xref:System.Security.Cryptography.CryptoConfig>objektet använder det för att avgöra om ett ECDSA-objekt kan skapas.</xref:System.Security.Cryptography.CryptoConfig>"
  syntax:
    content: public static System.Security.Cryptography.ECDsa Create (string algorithm);
    parameters:
    - id: algorithm
      type: System.String
      description: "The name of an ECDSA implementation. The following strings all refer to the same implementation, which is the only implementation currently supported in the [!INCLUDE[dnprdnshort](~/add/includes/dnprdnshort-md.md)]:  \n  \n \\- \"ECDsa\"  \n  \n \\- \"ECDsaCng\"  \n  \n \\- \"System.Security.Cryptography.ECDsaCng\"  \n  \n You can also provide the name of a custom ECDSA implementation."
    return:
      type: System.Security.Cryptography.ECDsa
      description: "En ny instans av den angivna implementeringen av den här klassen. Om det angivna algoritmnamnet inte mappas till en ECDSA-implementering, den här metoden returnerar <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  overload: System.Security.Cryptography.ECDsa.Create*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>algorithm</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Security.Cryptography.ECDsa.HashData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)
  id: HashData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)
  parent: System.Security.Cryptography.ECDsa
  langs:
  - csharp
  name: HashData(Stream,HashAlgorithmName)
  nameWithType: ECDsa.HashData(Stream,HashAlgorithmName)
  fullName: System.Security.Cryptography.ECDsa.HashData(Stream,HashAlgorithmName)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: "När åsidosätts i en härledd klass beräknar hash-värdet för den angivna binär dataströmmen med hjälp av den angivna hash-algoritmen."
  syntax:
    content: protected virtual byte[] HashData (System.IO.Stream data, System.Security.Cryptography.HashAlgorithmName hashAlgorithm);
    parameters:
    - id: data
      type: System.IO.Stream
      description: "Binär dataström till hash."
    - id: hashAlgorithm
      type: System.Security.Cryptography.HashAlgorithmName
      description: "Algoritmen som du använder för att hash-data."
    return:
      type: System.Byte[]
      description: "Data som hashformaterats."
  overload: System.Security.Cryptography.ECDsa.HashData*
  exceptions:
  - type: System.NotImplementedException
    commentId: T:System.NotImplementedException
    description: "En härledd klass måste åsidosätta den här metoden."
  platform:
  - net462
- uid: System.Security.Cryptography.ECDsa.HashData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)
  id: HashData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)
  parent: System.Security.Cryptography.ECDsa
  langs:
  - csharp
  name: HashData(Byte[],Int32,Int32,HashAlgorithmName)
  nameWithType: ECDsa.HashData(Byte[],Int32,Int32,HashAlgorithmName)
  fullName: System.Security.Cryptography.ECDsa.HashData(Byte[],Int32,Int32,HashAlgorithmName)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: "När åsidosätts i en härledd klass beräknar hash-värdet för den angivna delen av en bytematris med hjälp av den angivna hash-algoritmen."
  syntax:
    content: protected virtual byte[] HashData (byte[] data, int offset, int count, System.Security.Cryptography.HashAlgorithmName hashAlgorithm);
    parameters:
    - id: data
      type: System.Byte[]
      description: "Data som ska kodas."
    - id: offset
      type: System.Int32
      description: "Index för den första byten i `data` ska kodas."
    - id: count
      type: System.Int32
      description: "Antal byte som hash."
    - id: hashAlgorithm
      type: System.Security.Cryptography.HashAlgorithmName
      description: "Algoritmen som du använder för att hash-data."
    return:
      type: System.Byte[]
      description: "Data som hashformaterats."
  overload: System.Security.Cryptography.ECDsa.HashData*
  exceptions:
  - type: System.NotImplementedException
    commentId: T:System.NotImplementedException
    description: "En härledd klass måste åsidosätta den här metoden."
  platform:
  - net462
- uid: System.Security.Cryptography.ECDsa.KeyExchangeAlgorithm
  id: KeyExchangeAlgorithm
  parent: System.Security.Cryptography.ECDsa
  langs:
  - csharp
  name: KeyExchangeAlgorithm
  nameWithType: ECDsa.KeyExchangeAlgorithm
  fullName: System.Security.Cryptography.ECDsa.KeyExchangeAlgorithm
  type: Property
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: "Hämtar namnet på nyckelutbytesalgoritmen."
  remarks: "Den här egenskapen har ärvts från <xref:System.Security.Cryptography.AsymmetricAlgorithm>klass bas.</xref:System.Security.Cryptography.AsymmetricAlgorithm>       Den Elliptic Curve Digital signatur algoritmen (ECDSA) används för digital signatur generering; den inte används för nyckelhärledning därför, den här egenskapen returnerar `null`."
  syntax:
    content: public override string KeyExchangeAlgorithm { get; }
    return:
      type: System.String
      description: "Always <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  overload: System.Security.Cryptography.ECDsa.KeyExchangeAlgorithm*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.ECDsa.SignatureAlgorithm
  id: SignatureAlgorithm
  parent: System.Security.Cryptography.ECDsa
  langs:
  - csharp
  name: SignatureAlgorithm
  nameWithType: ECDsa.SignatureAlgorithm
  fullName: System.Security.Cryptography.ECDsa.SignatureAlgorithm
  type: Property
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: "Hämtar namnet på signaturalgoritmen."
  syntax:
    content: public override string SignatureAlgorithm { get; }
    return:
      type: System.String
      description: "Strängen &quot;ECDsa&quot;."
  overload: System.Security.Cryptography.ECDsa.SignatureAlgorithm*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.ECDsa.SignData(System.Byte[],System.Security.Cryptography.HashAlgorithmName)
  id: SignData(System.Byte[],System.Security.Cryptography.HashAlgorithmName)
  parent: System.Security.Cryptography.ECDsa
  langs:
  - csharp
  name: SignData(Byte[],HashAlgorithmName)
  nameWithType: ECDsa.SignData(Byte[],HashAlgorithmName)
  fullName: System.Security.Cryptography.ECDsa.SignData(Byte[],HashAlgorithmName)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: "Beräknar hash-värdet för den angivna byte-matris med hjälp av den angivna hashalgoritmen och signerar det resulterande hash-värdet."
  syntax:
    content: public virtual byte[] SignData (byte[] data, System.Security.Cryptography.HashAlgorithmName hashAlgorithm);
    parameters:
    - id: data
      type: System.Byte[]
      description: "Indata för att beräkna hash."
    - id: hashAlgorithm
      type: System.Security.Cryptography.HashAlgorithmName
      description: "Hash-algoritmen för att skapa hash-värdet."
    return:
      type: System.Byte[]
      description: "ECDSA signatur för angivna data."
  overload: System.Security.Cryptography.ECDsa.SignData*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>data</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>hashAlgorithm</code>.<xref:System.Security.Cryptography.HashAlgorithmName.Name*> är <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> eller &lt;xref:System.String.Empty?displayProperty=fullName&gt;."
  platform:
  - net462
- uid: System.Security.Cryptography.ECDsa.SignData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)
  id: SignData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)
  parent: System.Security.Cryptography.ECDsa
  langs:
  - csharp
  name: SignData(Stream,HashAlgorithmName)
  nameWithType: ECDsa.SignData(Stream,HashAlgorithmName)
  fullName: System.Security.Cryptography.ECDsa.SignData(Stream,HashAlgorithmName)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: "Beräknar hash-värdet för det angivna stream med hjälp av den angivna hashalgoritmen och signerar det resulterande hash-värdet."
  syntax:
    content: public virtual byte[] SignData (System.IO.Stream data, System.Security.Cryptography.HashAlgorithmName hashAlgorithm);
    parameters:
    - id: data
      type: System.IO.Stream
      description: "Indataströmmen som du vill beräkna hash."
    - id: hashAlgorithm
      type: System.Security.Cryptography.HashAlgorithmName
      description: "Hash-algoritmen för att skapa hash-värdet."
    return:
      type: System.Byte[]
      description: "ECDSA signatur för angivna data."
  overload: System.Security.Cryptography.ECDsa.SignData*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>data</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>hashAlgorithm</code>.<xref:System.Security.Cryptography.HashAlgorithmName.Name*> är <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> eller &lt;xref:System.String.Empty?displayProperty=fullName&gt;."
  platform:
  - net462
- uid: System.Security.Cryptography.ECDsa.SignData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)
  id: SignData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)
  parent: System.Security.Cryptography.ECDsa
  langs:
  - csharp
  name: SignData(Byte[],Int32,Int32,HashAlgorithmName)
  nameWithType: ECDsa.SignData(Byte[],Int32,Int32,HashAlgorithmName)
  fullName: System.Security.Cryptography.ECDsa.SignData(Byte[],Int32,Int32,HashAlgorithmName)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: "Beräknar hash-värdet för en del av den angivna byte-matris med hjälp av den angivna hashalgoritmen och signerar det resulterande hash-värdet."
  syntax:
    content: public virtual byte[] SignData (byte[] data, int offset, int count, System.Security.Cryptography.HashAlgorithmName hashAlgorithm);
    parameters:
    - id: data
      type: System.Byte[]
      description: "Indata för att beräkna hash."
    - id: offset
      type: System.Int32
      description: "Förskjutningen i matrisen som du vill börja använda data."
    - id: count
      type: System.Int32
      description: "Antal byte i matrisen som ska användas som data."
    - id: hashAlgorithm
      type: System.Security.Cryptography.HashAlgorithmName
      description: "Hash-algoritmen för att skapa hash-värdet."
    return:
      type: System.Byte[]
      description: "ECDSA signatur för angivna data."
  overload: System.Security.Cryptography.ECDsa.SignData*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>data</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>hashAlgorithm</code>.<xref:System.Security.Cryptography.HashAlgorithmName.Name*> är <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> eller &lt;xref:System.String.Empty?displayProperty=fullName&gt;."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>offset</code>är mindre än noll.       - eller - <code>count</code> är mindre än noll.       - eller - <code>offset</code>  + <code>count</code> – 1 resulterar i ett index som är större än den övre gränsen för <code>data</code>."
  platform:
  - net462
- uid: System.Security.Cryptography.ECDsa.SignHash(System.Byte[])
  id: SignHash(System.Byte[])
  parent: System.Security.Cryptography.ECDsa
  langs:
  - csharp
  name: SignHash(Byte[])
  nameWithType: ECDsa.SignHash(Byte[])
  fullName: System.Security.Cryptography.ECDsa.SignHash(Byte[])
  type: Method
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: "Genererar en digital signatur för det angivna hash-värdet."
  syntax:
    content: public abstract byte[] SignHash (byte[] hash);
    parameters:
    - id: hash
      type: System.Byte[]
      description: "Hash-värde för de data som ska signeras."
    return:
      type: System.Byte[]
      description: "En digital signatur som består av det angivna hash-värde som krypteras med den privata nyckeln."
  overload: System.Security.Cryptography.ECDsa.SignHash*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>hash</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Security.Cryptography.ECDsa.VerifyData(System.Byte[],System.Byte[],System.Security.Cryptography.HashAlgorithmName)
  id: VerifyData(System.Byte[],System.Byte[],System.Security.Cryptography.HashAlgorithmName)
  parent: System.Security.Cryptography.ECDsa
  langs:
  - csharp
  name: VerifyData(Byte[],Byte[],HashAlgorithmName)
  nameWithType: ECDsa.VerifyData(Byte[],Byte[],HashAlgorithmName)
  fullName: System.Security.Cryptography.ECDsa.VerifyData(Byte[],Byte[],HashAlgorithmName)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: "Kontrollerar att en digital signatur är giltig genom att beräkna hash-värdet för den angivna data med hjälp av den angivna hash-algoritmen och jämföra med den angivna signaturen."
  syntax:
    content: public bool VerifyData (byte[] data, byte[] signature, System.Security.Cryptography.HashAlgorithmName hashAlgorithm);
    parameters:
    - id: data
      type: System.Byte[]
      description: "Signerade data."
    - id: signature
      type: System.Byte[]
      description: "Signaturdata verifieras."
    - id: hashAlgorithm
      type: System.Security.Cryptography.HashAlgorithmName
      description: "Hash-algoritmen som används för att skapa hash-värdet för data."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Om signaturen är ogiltig. Annars <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Security.Cryptography.ECDsa.VerifyData*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>data</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>.       -or-       <code>signature</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>hashAlgorithm</code>.<xref:System.Security.Cryptography.HashAlgorithmName.Name*> är <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> eller &lt;xref:System.String.Empty?displayProperty=fullName&gt;."
  platform:
  - net462
- uid: System.Security.Cryptography.ECDsa.VerifyData(System.IO.Stream,System.Byte[],System.Security.Cryptography.HashAlgorithmName)
  id: VerifyData(System.IO.Stream,System.Byte[],System.Security.Cryptography.HashAlgorithmName)
  parent: System.Security.Cryptography.ECDsa
  langs:
  - csharp
  name: VerifyData(Stream,Byte[],HashAlgorithmName)
  nameWithType: ECDsa.VerifyData(Stream,Byte[],HashAlgorithmName)
  fullName: System.Security.Cryptography.ECDsa.VerifyData(Stream,Byte[],HashAlgorithmName)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: "Kontrollerar att en digital signatur är giltig genom att beräkna hash-värdet för den angivna strömma med hjälp av den angivna hashalgoritmen och jämföra dem med den angivna signaturen."
  syntax:
    content: public bool VerifyData (System.IO.Stream data, byte[] signature, System.Security.Cryptography.HashAlgorithmName hashAlgorithm);
    parameters:
    - id: data
      type: System.IO.Stream
      description: "Signerade data."
    - id: signature
      type: System.Byte[]
      description: "Signaturdata verifieras."
    - id: hashAlgorithm
      type: System.Security.Cryptography.HashAlgorithmName
      description: "Hash-algoritmen som används för att skapa hash-värdet för data."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Om signaturen är ogiltig. Annars <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Security.Cryptography.ECDsa.VerifyData*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>data</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>.       -or-       <code>signature</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>hashAlgorithm</code>.<xref:System.Security.Cryptography.HashAlgorithmName.Name*> är <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> eller &lt;xref:System.String.Empty?displayProperty=fullName&gt;."
  platform:
  - net462
- uid: System.Security.Cryptography.ECDsa.VerifyData(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Security.Cryptography.HashAlgorithmName)
  id: VerifyData(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Security.Cryptography.HashAlgorithmName)
  parent: System.Security.Cryptography.ECDsa
  langs:
  - csharp
  name: VerifyData(Byte[],Int32,Int32,Byte[],HashAlgorithmName)
  nameWithType: ECDsa.VerifyData(Byte[],Int32,Int32,Byte[],HashAlgorithmName)
  fullName: System.Security.Cryptography.ECDsa.VerifyData(Byte[],Int32,Int32,Byte[],HashAlgorithmName)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: "Kontrollerar att en digital signatur är giltig genom att beräkna hash-värdet för data i en del av en byte matrisen med hjälp av den angivna hashalgoritmen och jämföra dem med den angivna signaturen."
  syntax:
    content: public virtual bool VerifyData (byte[] data, int offset, int count, byte[] signature, System.Security.Cryptography.HashAlgorithmName hashAlgorithm);
    parameters:
    - id: data
      type: System.Byte[]
      description: "Signerade data."
    - id: offset
      type: System.Int32
      description: "StartIndex som du vill beräkna hash."
    - id: count
      type: System.Int32
      description: "Antal byte som hash."
    - id: signature
      type: System.Byte[]
      description: "Signaturdata verifieras."
    - id: hashAlgorithm
      type: System.Security.Cryptography.HashAlgorithmName
      description: "Hash-algoritmen som används för att skapa hash-värdet för data."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Om signaturen är ogiltig. Annars <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Security.Cryptography.ECDsa.VerifyData*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>data</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>.       -or-       <code>signature</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>hashAlgorithm</code>.<xref:System.Security.Cryptography.HashAlgorithmName.Name*> är <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> eller &lt;xref:System.String.Empty?displayProperty=fullName&gt;."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>offset</code>är mindre än noll.       - eller - <code>count</code> är mindre än noll.       - eller - <code>offset</code>  + <code>count</code> – 1 resulterar i ett index som är större än den övre gränsen för <code>data</code>."
  platform:
  - net462
- uid: System.Security.Cryptography.ECDsa.VerifyHash(System.Byte[],System.Byte[])
  id: VerifyHash(System.Byte[],System.Byte[])
  parent: System.Security.Cryptography.ECDsa
  langs:
  - csharp
  name: VerifyHash(Byte[],Byte[])
  nameWithType: ECDsa.VerifyHash(Byte[],Byte[])
  fullName: System.Security.Cryptography.ECDsa.VerifyHash(Byte[],Byte[])
  type: Method
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: "Verifierar en digital signatur mot specifika hash-värde."
  remarks: "Signaturen är först dekrypteras med hjälp av den offentliga nyckeln och sedan jämförs med hashvärde för verifiering."
  syntax:
    content: public abstract bool VerifyHash (byte[] hash, byte[] signature);
    parameters:
    - id: hash
      type: System.Byte[]
      description: "Hash-värdet för ett datablock."
    - id: signature
      type: System.Byte[]
      description: "Den digitala signaturen verifieras."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Om hash-värdet är lika med den dekrypterade signaturen; Annars <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Security.Cryptography.ECDsa.VerifyHash*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Security.Cryptography.AsymmetricAlgorithm
  isExternal: false
  name: System.Security.Cryptography.AsymmetricAlgorithm
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.NotImplementedException
  isExternal: true
  name: System.NotImplementedException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.Security.Cryptography.ECDsa.#ctor
  parent: System.Security.Cryptography.ECDsa
  isExternal: false
  name: ECDsa()
  nameWithType: ECDsa.ECDsa()
  fullName: System.Security.Cryptography.ECDsa.ECDsa()
- uid: System.Security.Cryptography.ECDsa.Create
  parent: System.Security.Cryptography.ECDsa
  isExternal: false
  name: Create()
  nameWithType: ECDsa.Create()
  fullName: System.Security.Cryptography.ECDsa.Create()
- uid: System.Security.Cryptography.ECDsa
  parent: System.Security.Cryptography
  isExternal: false
  name: ECDsa
  nameWithType: ECDsa
  fullName: System.Security.Cryptography.ECDsa
- uid: System.Security.Cryptography.ECDsa.Create(System.String)
  parent: System.Security.Cryptography.ECDsa
  isExternal: false
  name: Create(String)
  nameWithType: ECDsa.Create(String)
  fullName: System.Security.Cryptography.ECDsa.Create(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Security.Cryptography.ECDsa.HashData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)
  parent: System.Security.Cryptography.ECDsa
  isExternal: false
  name: HashData(Stream,HashAlgorithmName)
  nameWithType: ECDsa.HashData(Stream,HashAlgorithmName)
  fullName: System.Security.Cryptography.ECDsa.HashData(Stream,HashAlgorithmName)
- uid: System.Byte[]
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: Byte[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.IO.Stream
  parent: System.IO
  isExternal: true
  name: Stream
  nameWithType: Stream
  fullName: System.IO.Stream
- uid: System.Security.Cryptography.HashAlgorithmName
  parent: System.Security.Cryptography
  isExternal: false
  name: HashAlgorithmName
  nameWithType: HashAlgorithmName
  fullName: System.Security.Cryptography.HashAlgorithmName
- uid: System.Security.Cryptography.ECDsa.HashData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)
  parent: System.Security.Cryptography.ECDsa
  isExternal: false
  name: HashData(Byte[],Int32,Int32,HashAlgorithmName)
  nameWithType: ECDsa.HashData(Byte[],Int32,Int32,HashAlgorithmName)
  fullName: System.Security.Cryptography.ECDsa.HashData(Byte[],Int32,Int32,HashAlgorithmName)
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Security.Cryptography.ECDsa.KeyExchangeAlgorithm
  parent: System.Security.Cryptography.ECDsa
  isExternal: false
  name: KeyExchangeAlgorithm
  nameWithType: ECDsa.KeyExchangeAlgorithm
  fullName: System.Security.Cryptography.ECDsa.KeyExchangeAlgorithm
- uid: System.Security.Cryptography.ECDsa.SignatureAlgorithm
  parent: System.Security.Cryptography.ECDsa
  isExternal: false
  name: SignatureAlgorithm
  nameWithType: ECDsa.SignatureAlgorithm
  fullName: System.Security.Cryptography.ECDsa.SignatureAlgorithm
- uid: System.Security.Cryptography.ECDsa.SignData(System.Byte[],System.Security.Cryptography.HashAlgorithmName)
  parent: System.Security.Cryptography.ECDsa
  isExternal: false
  name: SignData(Byte[],HashAlgorithmName)
  nameWithType: ECDsa.SignData(Byte[],HashAlgorithmName)
  fullName: System.Security.Cryptography.ECDsa.SignData(Byte[],HashAlgorithmName)
- uid: System.Security.Cryptography.ECDsa.SignData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)
  parent: System.Security.Cryptography.ECDsa
  isExternal: false
  name: SignData(Stream,HashAlgorithmName)
  nameWithType: ECDsa.SignData(Stream,HashAlgorithmName)
  fullName: System.Security.Cryptography.ECDsa.SignData(Stream,HashAlgorithmName)
- uid: System.Security.Cryptography.ECDsa.SignData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)
  parent: System.Security.Cryptography.ECDsa
  isExternal: false
  name: SignData(Byte[],Int32,Int32,HashAlgorithmName)
  nameWithType: ECDsa.SignData(Byte[],Int32,Int32,HashAlgorithmName)
  fullName: System.Security.Cryptography.ECDsa.SignData(Byte[],Int32,Int32,HashAlgorithmName)
- uid: System.Security.Cryptography.ECDsa.SignHash(System.Byte[])
  parent: System.Security.Cryptography.ECDsa
  isExternal: false
  name: SignHash(Byte[])
  nameWithType: ECDsa.SignHash(Byte[])
  fullName: System.Security.Cryptography.ECDsa.SignHash(Byte[])
- uid: System.Security.Cryptography.ECDsa.VerifyData(System.Byte[],System.Byte[],System.Security.Cryptography.HashAlgorithmName)
  parent: System.Security.Cryptography.ECDsa
  isExternal: false
  name: VerifyData(Byte[],Byte[],HashAlgorithmName)
  nameWithType: ECDsa.VerifyData(Byte[],Byte[],HashAlgorithmName)
  fullName: System.Security.Cryptography.ECDsa.VerifyData(Byte[],Byte[],HashAlgorithmName)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Security.Cryptography.ECDsa.VerifyData(System.IO.Stream,System.Byte[],System.Security.Cryptography.HashAlgorithmName)
  parent: System.Security.Cryptography.ECDsa
  isExternal: false
  name: VerifyData(Stream,Byte[],HashAlgorithmName)
  nameWithType: ECDsa.VerifyData(Stream,Byte[],HashAlgorithmName)
  fullName: System.Security.Cryptography.ECDsa.VerifyData(Stream,Byte[],HashAlgorithmName)
- uid: System.Security.Cryptography.ECDsa.VerifyData(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Security.Cryptography.HashAlgorithmName)
  parent: System.Security.Cryptography.ECDsa
  isExternal: false
  name: VerifyData(Byte[],Int32,Int32,Byte[],HashAlgorithmName)
  nameWithType: ECDsa.VerifyData(Byte[],Int32,Int32,Byte[],HashAlgorithmName)
  fullName: System.Security.Cryptography.ECDsa.VerifyData(Byte[],Int32,Int32,Byte[],HashAlgorithmName)
- uid: System.Security.Cryptography.ECDsa.VerifyHash(System.Byte[],System.Byte[])
  parent: System.Security.Cryptography.ECDsa
  isExternal: false
  name: VerifyHash(Byte[],Byte[])
  nameWithType: ECDsa.VerifyHash(Byte[],Byte[])
  fullName: System.Security.Cryptography.ECDsa.VerifyHash(Byte[],Byte[])
- uid: System.Security.Cryptography.ECDsa.#ctor*
  parent: System.Security.Cryptography.ECDsa
  isExternal: false
  name: ECDsa
  nameWithType: ECDsa.ECDsa
- uid: System.Security.Cryptography.ECDsa.Create*
  parent: System.Security.Cryptography.ECDsa
  isExternal: false
  name: Create
  nameWithType: ECDsa.Create
- uid: System.Security.Cryptography.ECDsa.HashData*
  parent: System.Security.Cryptography.ECDsa
  isExternal: false
  name: HashData
  nameWithType: ECDsa.HashData
- uid: System.Security.Cryptography.ECDsa.KeyExchangeAlgorithm*
  parent: System.Security.Cryptography.ECDsa
  isExternal: false
  name: KeyExchangeAlgorithm
  nameWithType: ECDsa.KeyExchangeAlgorithm
- uid: System.Security.Cryptography.ECDsa.SignatureAlgorithm*
  parent: System.Security.Cryptography.ECDsa
  isExternal: false
  name: SignatureAlgorithm
  nameWithType: ECDsa.SignatureAlgorithm
- uid: System.Security.Cryptography.ECDsa.SignData*
  parent: System.Security.Cryptography.ECDsa
  isExternal: false
  name: SignData
  nameWithType: ECDsa.SignData
- uid: System.Security.Cryptography.ECDsa.SignHash*
  parent: System.Security.Cryptography.ECDsa
  isExternal: false
  name: SignHash
  nameWithType: ECDsa.SignHash
- uid: System.Security.Cryptography.ECDsa.VerifyData*
  parent: System.Security.Cryptography.ECDsa
  isExternal: false
  name: VerifyData
  nameWithType: ECDsa.VerifyData
- uid: System.Security.Cryptography.ECDsa.VerifyHash*
  parent: System.Security.Cryptography.ECDsa
  isExternal: false
  name: VerifyHash
  nameWithType: ECDsa.VerifyHash
