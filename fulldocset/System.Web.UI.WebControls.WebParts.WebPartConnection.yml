### YamlMime:ManagedReference
items:
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection
  id: WebPartConnection
  children:
  - System.Web.UI.WebControls.WebParts.WebPartConnection.#ctor
  - System.Web.UI.WebControls.WebParts.WebPartConnection.Consumer
  - System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPoint
  - System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPointID
  - System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerID
  - System.Web.UI.WebControls.WebParts.WebPartConnection.ID
  - System.Web.UI.WebControls.WebParts.WebPartConnection.IsActive
  - System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared
  - System.Web.UI.WebControls.WebParts.WebPartConnection.IsStatic
  - System.Web.UI.WebControls.WebParts.WebPartConnection.Provider
  - System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPoint
  - System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPointID
  - System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderID
  - System.Web.UI.WebControls.WebParts.WebPartConnection.ToString
  - System.Web.UI.WebControls.WebParts.WebPartConnection.Transformer
  - System.Web.UI.WebControls.WebParts.WebPartConnection.Transformers
  langs:
  - csharp
  name: WebPartConnection
  nameWithType: WebPartConnection
  fullName: System.Web.UI.WebControls.WebParts.WebPartConnection
  type: Class
  summary: "Innehåller ett objekt som gör det möjligt för två <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPart&quot;> </xref> kontroller för att bilda en anslutning. Den här klassen kan inte ärvas."
  remarks: "En anslutning i uppsättningen för kontroll av webbdelar är en länk eller en association mellan två <xref:System.Web.UI.WebControls.WebParts.WebPart>(eller andra server eller användaren) kontroller som gör det enkelt att dela data.</xref:System.Web.UI.WebControls.WebParts.WebPart> Denna möjlighet att dela data kan anslutna kontroller som ska användas på ett sätt som överskrider de funktionerna som erbjuds av isolerade kontroller. Till exempel om en kontroll ger postnummer data, och en annan kontroll kan läsa data och ge lokala väderinformation baserat på postnumret, ger sedan den anslutna kapaciteten för de två kontrollerna mer värde för användare. Om du vill utöka det här exemplet kan andra kontroller skapas att också visa information baserat på ett postnummer, till exempel en kontroll med länkar till lokala nyheter och dessa kontroller som fungerar med postnummer data kan dela data med enda kontrollen som innehåller ett postnummer. Slutanvändare av webbdelar program kan skapa och hantera anslutningar mellan dessa kompatibel kontroller direkt från en webbläsare med standard anslutningar-användargränssnittet (UI) som tillhandahålls av den <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone>kontroll eller med hjälp av ett anpassat gränssnitt som tillhandahålls av en utvecklare.</xref:System.Web.UI.WebControls.WebParts.ConnectionsZone>       Översikten WebPartConnection klass är ett allmänt med grundläggande uppgifter för att skapa en anslutning. Mer information om specifika komponenter och krav som ingår i att skapa anslutningar finns [översikt över webbserver delar anslutningar](~/add/includes/ajax-current-ext-md.md), eller se referens-klasser och kodexempel som nämns i följande diskussionen. Det finns flera grundläggande aspekter av anslutningen webbdelar: – två <xref:System.Web.UI.WebControls.WebParts.WebPart>kontroller.</xref:System.Web.UI.WebControls.WebParts.WebPart> Varje webbdelar anslutning består av två kontroller. Det är möjligt för en kontroll som ingår i mer än en anslutning samtidigt, men varje anslutning består av exakt två kontroller. Kontroller kan härledas direkt från den <xref:System.Web.UI.WebControls.WebParts.WebPart>basklass, och de kan vara andra kontroller, inklusive ASP.NET-kontroller, anpassade kontroller och användarkontroller.</xref:System.Web.UI.WebControls.WebParts.WebPart> Kontroller som inte härleds från den <xref:System.Web.UI.WebControls.WebParts.WebPart>class, om en <xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase>zonen, radbryts automatiskt med en <xref:System.Web.UI.WebControls.WebParts.GenericWebPart>objekt vid körning, vilket gör det enkelt att ärva från den <xref:System.Web.UI.WebControls.WebParts.WebPart>klass och funktion som körning <xref:System.Web.UI.WebControls.WebParts.WebPart>kontroller.</xref:System.Web.UI.WebControls.WebParts.WebPart> </xref:System.Web.UI.WebControls.WebParts.WebPart> </xref:System.Web.UI.WebControls.WebParts.GenericWebPart> </xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase> </xref:System.Web.UI.WebControls.WebParts.WebPart>      -Kontroller som finns i <xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase>zoner.</xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase> Båda <xref:System.Web.UI.WebControls.WebParts.WebPart>kontroller och en annan typ av server-kontroll måste finnas i en <xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase>zon för att kunna delta i webbdelar anslutningar (och de flesta andra webbdelar funktioner).</xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase> </xref:System.Web.UI.WebControls.WebParts.WebPart>      -Konsumenter och leverantörer. Det finns två kontroller i varje webbdelar anslutning: en leverantör av data och konsumenter av data. Providern tillhandahåller data för konsumenter via en angiven-metod som returnerar data i form av ett gränssnitt. (Ett exempel på hur du skapar och ange Återanropsmetoden finns i avsnittet exemplet i det här avsnittet.) Denna metod är känd som en anslutningspunkt för providern. Information om den här kopplingspunkten (dess &quot;vänligt&quot; namn, ett ID och typ av gränssnittet returnerade) finns i en <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>objektet som är associerat med kontrollen providern.</xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> Klienten tar emot data via en angiven metod som kan godkänna en instans av gränssnittet. Den här metoden kallas en Förbrukaranslutningspunkten och detaljer för kopplingspunkt (namn, ID och typ av gränssnitt) finns i en <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>objektet som är associerat med kontrollen konsumenten.</xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>      -Kompatibel kontroller eller en giltig transformator. För en anslutning ska fungera konsumenten och providern måste antingen vara kompatibel (vilket innebär att deras angivna anslutningen punkt metoder kan arbeta med samma typ av interface) eller det får inte finnas en <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer>objekt kan översätta den typ som stöds av providern till en typ som tolkas av konsumenten.</xref:System.Web.UI.WebControls.WebParts.WebPartTransformer>      -Ett WebPartConnection-objekt. För en anslutning till finns, måste det finnas en instans av klassen WebPartConnection som innehåller referenser till providern och konsumenten kontroller, tillsammans med information om sina anslutningspunkter. Om providern och konsumenten är inkompatibla och i stället använda en <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer>objekt att ansluta, anslutningen refererar till transformatorn.</xref:System.Web.UI.WebControls.WebParts.WebPartTransformer>      -Ett sätt att upprätta anslutningen. När kompatibel konsumenten och providern kontroller har korrekt utformad med punkt anslutningsmetoder och placeras i en zon och en WebPartConnection-objektet är tillgängligt, är det senaste grundläggande steg som krävs för att initiera anslutningen. Ett sätt som detta kan inträffa är för användare att skapa anslutningen via Användargränssnittet. Om du placerar en `<asp:connectionszone>` element på sidan och andra nödvändiga komponenter för en anslutning är på plats vid körning som en användare kan växla sidan till connect visningsläget klickar du på Anslut verb på verbmenyn för providern eller konsumenten och en anslutning UI (baserat på den <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone>kontroll) visas.</xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> Via Användargränssnittet, kan användaren initiera anslutningen. Ett annat sätt att initiera anslutningen är att göra det via programmering. I båda fallen om via Användargränssnittet eller programmässigt underliggande metod som initierar anslutningen är samma. Program-anrop i <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A>metod (eller <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A>metod om du använder en transformator) på den <xref:System.Web.UI.WebControls.WebParts.WebPartManager>styr, skicka till den providern konsumenten och deras respektive punkt anslutningsobjekt, och metoden returnerar en WebPartConnection-objekt.</xref:System.Web.UI.WebControls.WebParts.WebPartManager> </xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A> </xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A>       Klassen WebPartConnection definierar ett objekt som innehåller viktig information om en anslutning mellan två <xref:System.Web.UI.WebControls.WebParts.WebPart>kontroller.</xref:System.Web.UI.WebControls.WebParts.WebPart> Klassen innehåller nästan helt egenskaper som rör information om en viss anslutning. Flera egenskaper avse Konsumentkontroll i en anslutning. <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.Consumer%2A>Egenskapen refererar till konsumenten själva kontrollen, och den <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerID%2A>refererar till konsumentens-ID.</xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerID%2A> </xref:System.Web.UI.WebControls.WebParts.WebPartConnection.Consumer%2A> Den <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>konsumentens refererar till objekt som innehåller information om den Förbrukaranslutningspunkten <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPoint%2A>egenskap.</xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPoint%2A> </xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> Den <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPointID%2A>refererar till ID för den <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>objekt.</xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> </xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPointID%2A> Alla dessa konsument-relaterade anslutningsegenskaper måste ha ett värde som tilldelats att skapa en anslutning.       WebPartConnection klassen har också flera egenskaper som relaterar till providern kontroll i en anslutning och dessa motsvarar egenskaperna för en konsument. <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.Provider%2A>Egenskapen refererar till providern själva kontrollen, samtidigt som den <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderID%2A>refererar till ett ID.</xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderID%2A> </xref:System.Web.UI.WebControls.WebParts.WebPartConnection.Provider%2A> Den <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPoint%2A>egenskapsreferenser i <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>objekt, och <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPointID%2A>refererar till ID för den providerpunkt.</xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPointID%2A> </xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> </xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPoint%2A>       Flera egenskaper avse status för anslutningen. Den <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsActive%2A>egenskapen anger om anslutningen är aktiv (för närvarande utbyta data) eller inaktiva (fortfarande anslutna men inte aktivt dela data).</xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsActive%2A> Den <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared%2A>egenskapen anger om anslutningen är en delad (tillgänglig för alla användare på en sida) eller en viss användare-anslutning och <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsStatic%2A>egenskap anger om kontrollen är statiska (deklarerats i sidkoden och därmed permanent) eller dynamisk (som skapats via programmering, vilket innebär att den kan tas bort).</xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsStatic%2A> </xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared%2A>"
  example:
  - "The following code example demonstrates how to create a simple connection between two <xref:System.Web.UI.WebControls.WebParts.WebPart> controls. The example demonstrates three ways of forming a connection: declaratively, by placing tags for the connection in the markup of the Web page; programmatically, by creating the connection in code; and through the UI, by placing a <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> control on the page, which enables users to establish a connection.  \n  \n The code example has four parts:  \n  \n-   A user control that enables you to change the Web Parts display mode on a page.  \n  \n-   Source code for an interface and two <xref:System.Web.UI.WebControls.WebParts.WebPart> controls acting as the provider and the consumer for a connection.  \n  \n-   A Web page to host all the controls and run the code example.  \n  \n-   An explanation of how to run the example page.  \n  \n The first part of this code example is the user control that enables users to change display modes on a Web page. Save the following source code to an .ascx file, giving it the file name that is assigned to the `Src` attribute of the `Register` directive for this user control, which is near the top of the hosting Web page. For details about display modes and a description of the source code in this control, see [Walkthrough: Changing Display Modes on a Web Parts Page](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[WebParts_WebPartConnection_Overview#6](~/add/codesnippet/csharp/t-system.web.ui.webcontr_343_1.ascx)]\n [!code-vb[WebParts_WebPartConnection_Overview#6](~/add/codesnippet/visualbasic/t-system.web.ui.webcontr_343_1.ascx)]  \n  \n The second part of the code example is the source code for the interface and controls. The source file contains a simple interface named `IZipCode`. There is also a <xref:System.Web.UI.WebControls.WebParts.WebPart> class named `ZipCodeWebPart` that implements the interface and acts as the provider control. Its `ProvideIZipCode` method is the callback method that implements the interface's only member. The method simply returns an instance of the interface. Note that the method is marked with a `ConnectionProvider` attribute in its metadata. This is the mechanism for identifying the method as the callback method for the provider's connection point. The other <xref:System.Web.UI.WebControls.WebParts.WebPart> class is named `WeatherWebPart`, and it acts as the consumer for the connection. This class has a method named `GetZipCode` that gets an instance of the `IZipCode` interface from the provider control. Note that this method is marked as the consumer's connection point method with a `ConnectionConsumer` attribute in its metadata.  \n  \n For the code example to run, you must compile this source code. You can compile it explicitly and put the resulting assembly in your Web site's Bin folder or the global assembly cache. Alternatively, you can put the source code in your site's App_Code folder, where it will be dynamically compiled at run time. This code example uses dynamic compilation. For a walkthrough that demonstrates how to compile, see [Walkthrough: Developing and Using a Custom Web Server Control](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-vb[WebParts_WebPartConnection_Overview#2](~/add/codesnippet/visualbasic/t-system.web.ui.webcontr_343_2.vb)]\n [!code-cs[WebParts_WebPartConnection_Overview#2](~/add/codesnippet/csharp/t-system.web.ui.webcontr_343_2.cs)]  \n  \n The third part of the code example is the Web page. Near the top are the `Register` directives for the user control and the custom <xref:System.Web.UI.WebControls.WebParts.WebPart> controls. Because the example assumes dynamic compilation of the controls, the source code for the controls should be in an App_Code subfolder; the `Register` tag in the page references only an arbitrary tag prefix and the namespace of the controls. The custom <xref:System.Web.UI.WebControls.WebParts.WebPart> controls (the provider and consumer) are declared within the Web page's `<asp:webpartzone>` element, inside a `<zonetemplate>` element.  \n  \n The page provides three ways to form a connection between the custom controls. The first method is declarative. In the markup for the page, a <`StaticConnections>` element is declared, and within that is an `<asp:WebPartConnections>` element, with the various consumer and provider details of the connection specified as attributes. This is one way to create a connection, by declaring it directly in the Web page, specifically within the `<asp:WebPartManager>` element. Because of this static connection, a connection between the two custom controls is created immediately the first time the page loads.  \n  \n A second method for forming a connection between the controls is provided by the `<asp:connectionszone>` element in the page. If a user switches a page into connect display mode at run time, and clicks a connect verb on one of the custom controls, the `<asp:connectionszone>` element automatically renders the UI for creating a connection.  \n  \n The page also demonstrates a third way of creating a connection, which is to do it programmatically. In the `Button1_Click` method, the code creates a <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> object for the provider control, and retrieves its connection point details by calling the <xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetProviderConnectionPoints%2A> method. It carries out a similar task for the consumer control, calling the <xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetConsumerConnectionPoints%2A> method. Finally, it creates the new WebPartConnection object by calling the <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A> method on the <xref:System.Web.UI.WebControls.WebParts.WebPartManager> control.  \n  \n [!code-cs[WebParts_WebPartConnection_Overview#1](~/add/codesnippet/csharp/t-system.web.ui.webcontr_343_3.aspx)]\n [!code-vb[WebParts_WebPartConnection_Overview#1](~/add/codesnippet/visualbasic/t-system.web.ui.webcontr_343_3.aspx)]  \n  \n After you load the Web page in a browser, the first connection already exists because it is declared within the `<StaticConnections>` element. Enter some text in the **ZIP Code Provider** control, and it will be displayed in the consumer control. Next, disconnect the two controls. Using the **Display Mode** drop-down list control, change the page to connect display mode. Click the verbs menu (represented by a downward arrow in the title bar) for each of the <xref:System.Web.UI.WebControls.WebParts.WebPart> controls, and notice that each has a **Connect** option. This is a connect verb, which appears in the verbs menu only when the page is in connect mode. Click the connect verb on one of the controls, and the connection UI provided by the <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> control appears. Click the **Disconnect** button to end the static connection between the controls. Use the **Display Mode** control to return the page to browse mode. Try to enter some new text in the provider again, and note that because the controls are disconnected, the text fails to update in the consumer control.  \n  \n Next, use the same method as above to switch the page into connect display mode again. Click a connect verb on one of the controls. Click the **Create a Connection** link, and use the UI provided by the <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> control to create a connection between the controls. This is the second method for creating a connection. Note that as soon as the connection is formed, the last string you entered in the provider control (that failed to appear because the controls were disconnected) suddenly appears in the consumer, because the connection has been recreated. Click the **Disconnect** button to end the current connection that you just created. Return the page to browse mode. Enter some new text in the provider to demonstrate that the text is not updated, and that the controls are again disconnected.  \n  \n Return the page to connect display mode. Instead of clicking a connect verb, click the **Connect WebPart Controls** button, which illustrates the third method of forming a connection. This approach connects the controls programmatically in one simple step without having to use the <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> control. Note that as the connection is created, the last string you entered in the provider suddenly appears in the consumer control."
  syntax:
    content: >-
      [System.ComponentModel.TypeConverter(typeof(System.ComponentModel.ExpandableObjectConverter))]

      [System.Web.UI.ParseChildren(true, "Transformers")]

      public sealed class WebPartConnection
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.#ctor
  id: '#ctor'
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  langs:
  - csharp
  name: WebPartConnection()
  nameWithType: WebPartConnection.WebPartConnection()
  fullName: System.Web.UI.WebControls.WebParts.WebPartConnection.WebPartConnection()
  type: Constructor
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Initierar en ny instans av den <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartConnection&quot;> </xref> klass."
  remarks: "Konstruktorn WebPartConnection är offentliga så att ASP.NET-parsern kan skapa en instans när en anslutning har deklarerats i koden för webbsidan. den här konstruktorn är inte avsedd att användas i koden för utvecklare.       När du vill skapa en <xref:System.Web.UI.WebControls.WebParts.WebPartConnection>objekt programmässigt, bör du använda den <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A?displayProperty=fullName>eller <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A?displayProperty=fullName>metoden som anges i den <xref:System.Web.UI.WebControls.WebParts.WebPartManager>kontroll.</xref:System.Web.UI.WebControls.WebParts.WebPartManager> </xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A?displayProperty=fullName> </xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A?displayProperty=fullName> </xref:System.Web.UI.WebControls.WebParts.WebPartConnection> Dessa metoder hanterar många information om hur du skapar en anslutning och returnera ett <xref:System.Web.UI.WebControls.WebParts.WebPartConnection>objekt.</xref:System.Web.UI.WebControls.WebParts.WebPartConnection>       WebPartConnection konstruktören för den <xref:System.Web.UI.WebControls.WebParts.WebPartConnection>klass anger värdena för den <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared%2A>och <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsStatic%2A>egenskaper till `true`.</xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsStatic%2A> </xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared%2A> </xref:System.Web.UI.WebControls.WebParts.WebPartConnection> Därför ska vara statisk (vilket innebär att det deklareras i markeringen på sidan som innehåller) för en ny anslutning och delade (visas för alla användare på sidan). Detta är fallet när du lägger till en anslutning i vanligt scenario genom att deklarera anslutningen i markeringen på sidan med ett `<asp:webpartconnection>` element. I andra fall dock har en anslutning olika värden för dessa egenskaper. När du lägger till en anslutning via programmering genom att skapa connection-objektet i koden, och användaren visar sidan i standard användaranpassningsläge, till exempel skapas anslutningen som en dynamisk per user(visible only to the specific user)-anslutning.      > [!NOTE] > De <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared%2A>och <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsStatic%2A>Egenskaper är skrivskyddad, och dessa egenskaper som styr typ av en anslutning ställs internt av den <xref:System.Web.UI.WebControls.WebParts.WebPartManager>kontroll beroende på hur en anslutning upprättas (deklarativt i sidkoden eller programmässigt via din kod eller användargränssnittet).</xref:System.Web.UI.WebControls.WebParts.WebPartManager> </xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsStatic%2A> </xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared%2A>"
  syntax:
    content: public WebPartConnection ();
    parameters: []
  overload: System.Web.UI.WebControls.WebParts.WebPartConnection.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.Consumer
  id: Consumer
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  langs:
  - csharp
  name: Consumer
  nameWithType: WebPartConnection.Consumer
  fullName: System.Web.UI.WebControls.WebParts.WebPartConnection.Consumer
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Hämtar en <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPart&quot;> </xref> objekt som fungerar som Konsumentkontroll i en anslutning."
  remarks: "Varje webbdelar anslutning består av två kontroller som delar data. En kontroll som fungerar som leverantören av data och andra kontrollen fungerar som en konsument tar emot och bearbetar data från providern. Egenskapen konsumenten hämtar en referens till den <xref:System.Web.UI.WebControls.WebParts.WebPart>styra fungerar som en konsument i en relation för anslutningen.</xref:System.Web.UI.WebControls.WebParts.WebPart>"
  example:
  - "The following code example demonstrates the programmatic use of the Consumer property.  \n  \n The code example has four parts:  \n  \n-   A user control that enables you to change the Web Parts display mode on a page.  \n  \n-   Source code for an interface and two <xref:System.Web.UI.WebControls.WebParts.WebPart> controls acting as the provider and the consumer for a connection.  \n  \n-   A Web page to host all the controls and run the code example.  \n  \n-   An explanation of how to run the example page.  \n  \n The first part of this code example is the user control that enables users to change display modes on a Web page. Save the following source code to an .ascx file, giving it the file name that is assigned to the `Src` attribute of the `Register` directive for this user control, which is near the top of the hosting Web page. For details about display modes and a description of the source code in this control, see [Walkthrough: Changing Display Modes on a Web Parts Page](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-vb[WebParts_WebPartConnection_Consumer#6](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_487_1.ascx)]\n [!code-cs[WebParts_WebPartConnection_Consumer#6](~/add/codesnippet/csharp/p-system.web.ui.webcontr_487_1.ascx)]  \n  \n The second part of the code example is the source code for the two <xref:System.Web.UI.WebControls.WebParts.WebPart> controls that serve as the consumer and the provider for the connection, and an interface used for the connection points. For the code example to run, you must compile this source code. You can compile it explicitly and put the resulting assembly in your Web site's Bin folder or the global assembly cache. Alternatively, you can put the source code in your site's App_Code folder, where it will be dynamically compiled at run time. This code example uses dynamic compilation. For a walkthrough that demonstrates how to compile, see [Walkthrough: Developing and Using a Custom Web Server Control](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[WebParts_WebPartConnection_Consumer#2](~/add/codesnippet/csharp/p-system.web.ui.webcontr_487_2.cs)]\n [!code-vb[WebParts_WebPartConnection_Consumer#2](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_487_2.vb)]  \n  \n The third part of the code example is the code for the Web page that hosts the controls and demonstrates the use of the Consumer property. Near the top of the page are the `Register` directives for the user control and the custom controls. Because this example uses dynamic compilation, the `Register` directive for the source file does not need to reference an assembly name; it includes only an arbitrary tag prefix and the namespace of the controls. In the `Button2_Click` method, the code accesses the connection object through the <xref:System.Web.UI.WebControls.WebParts.WebPartManager> control, and gets a reference to the consumer control.  \n  \n [!code-cs[WebParts_WebPartConnection_Consumer#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_487_3.aspx)]\n [!code-vb[WebParts_WebPartConnection_Consumer#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_487_3.aspx)]  \n  \n After you load the page in a browser, use the **Display Mode** drop-down list control to switch the page to connect mode. Click the verbs menu (represented by the downward arrow in the title bar) on one of the <xref:System.Web.UI.WebControls.WebParts.WebPart> controls, and click the connect verb. Use the **Connect WebPart Controls** button, or the provided connection user interface (UI), to create a connection between the two controls. Click the **Display Consumer Info** button to run the code that demonstrates the Consumer property."
  syntax:
    content: public System.Web.UI.WebControls.WebParts.WebPart Consumer { get; }
    return:
      type: System.Web.UI.WebControls.WebParts.WebPart
      description: "En <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPart&quot;> </xref> som representerar webbdelar kontrollen fungerar som klienten i en anslutning."
  overload: System.Web.UI.WebControls.WebParts.WebPartConnection.Consumer*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Längden på den <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerID*>egenskapen är noll.</xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerID*>"
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPoint
  id: ConsumerConnectionPoint
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  langs:
  - csharp
  name: ConsumerConnectionPoint
  nameWithType: WebPartConnection.ConsumerConnectionPoint
  fullName: System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPoint
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Hämtar det objekt som fungerar som en anslutningspunkt för en kontroll som fungerar som en konsument i en anslutning."
  remarks: "Ett av de nödvändiga stegen för att skapa en anslutning mellan två <xref:System.Web.UI.WebControls.WebParts.WebPart>kontroller är att skapa anslutningspunkter för varje kontroll.</xref:System.Web.UI.WebControls.WebParts.WebPart> Anslutningspunkten är ett objekt som innehåller information om hur du ansluter till den kontroll som fungerar som en konsument. I konsumentens källkod någon av metoderna måste identifieras med de `ConnectionConsumer` attribut. Den <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>objekt som är associerad med en Konsumentkontroll innehåller information om metoden och attributet, inklusive ett ID för metoden, ett visningsnamn för användning i användargränssnittet (UI) och vilken typ av gränssnittet metoden kan hämta.</xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> Den här uppsättningen med information om konsumenten, dess metod för som utgör anslutningar och vilken typ av gränssnitt som den förstår utgör tillsammans en anslutningspunkten.       Som standard en <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>objekt kan ansluta till endast en <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>objekt i taget.</xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> </xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> En kund kan ha flera metoder som identifieras som möjligt konsumenten anslutningspunkter, men en konsument bara kan delta i en anslutning som konsument (därför bara en av dess konsumenten kopplingspunkter kan vara aktiva) i taget. Däremot ett <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>kan ansluta till valfritt antal <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>objekt.</xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> </xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> Den här standardfunktionen kan ändras genom att åsidosätta den <xref:System.Web.UI.WebControls.WebParts.ConnectionConsumerAttribute.AllowsMultipleConnections%2A>egenskapen på den <xref:System.Web.UI.WebControls.WebParts.ConnectionConsumerAttribute>attribut.</xref:System.Web.UI.WebControls.WebParts.ConnectionConsumerAttribute> </xref:System.Web.UI.WebControls.WebParts.ConnectionConsumerAttribute.AllowsMultipleConnections%2A>"
  example:
  - "The following code example demonstrates the programmatic use of the ConsumerConnectionPoint property.  \n  \n The example has four parts:  \n  \n-   A user control that enables you to change the Web Parts display mode on a page.  \n  \n-   Source code for an interface and two <xref:System.Web.UI.WebControls.WebParts.WebPart> controls acting as the provider and the consumer for a connection.  \n  \n-   A Web page to host all the controls and run the code example.  \n  \n-   An explanation of how to run the example page.  \n  \n The first part of this code example is the user control that enables users to change display modes on a Web page. Save the following source code to an .ascx file, giving it the file name that is assigned to the `Src` attribute of the `Register` directive for this user control, which is near the top of the hosting Web page. For details about display modes and a description of the source code in this control, see [Walkthrough: Changing Display Modes on a Web Parts Page](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[WebParts_WebPartConnection_ConsumerConnectionPoint#6](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1183_1.ascx)]\n [!code-vb[WebParts_WebPartConnection_ConsumerConnectionPoint#6](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1183_1.ascx)]  \n  \n The second part of the code example is the source code for the two <xref:System.Web.UI.WebControls.WebParts.WebPart> controls that serve as the consumer and the provider for the connection, and an interface used for the connection points. For the code example to run, you must compile this source code. You can compile it explicitly and put the resulting assembly in your Web site's Bin folder or the global assembly cache. Alternatively, you can put the source code in your site's App_Code folder, where it will be dynamically compiled at run time. This code example uses dynamic compilation. For a walkthrough that demonstrates how to compile, see [Walkthrough: Developing and Using a Custom Web Server Control](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-vb[WebParts_WebPartConnection_ConsumerConnectionPoint#2](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1183_2.vb)]\n [!code-cs[WebParts_WebPartConnection_ConsumerConnectionPoint#2](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1183_2.cs)]  \n  \n The third part of the code example is the code for the Web page that hosts the controls and demonstrates the use of the ConsumerConnectionPoint property. In the `Button1_Click` method, all the objects required to form a connection are created, including a <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> object. These objects are all passed to the <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A> method to create the connection. In the `Button2_Click` method, the code accesses the ConsumerConnectionPoint property and displays some details of the connection point.  \n  \n [!code-cs[WebParts_WebPartConnection_ConsumerConnectionPoint#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1183_3.aspx)]\n [!code-vb[WebParts_WebPartConnection_ConsumerConnectionPoint#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1183_3.aspx)]  \n  \n After you load the page in a browser, use the **Display Mode** drop-down list control to switch the page to connect mode. Click the verbs menu (represented by the downward arrow in the title bar) on one of the <xref:System.Web.UI.WebControls.WebParts.WebPart> controls, and click the connect verb. Use the **Connect WebPart Controls** button, or the provided connection UI, to create a connection between the two controls. Click the **ConnectionPoint Details** button to run the code that demonstrates the ConsumerConnectionPoint property."
  syntax:
    content: public System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint ConsumerConnectionPoint { get; }
    return:
      type: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint
      description: "En <xref href=&quot;System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint&quot;> </xref> som är associerad med kontrollen konsumenten i en anslutning."
  overload: System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPoint*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPointID
  id: ConsumerConnectionPointID
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  langs:
  - csharp
  name: ConsumerConnectionPointID
  nameWithType: WebPartConnection.ConsumerConnectionPointID
  fullName: System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPointID
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Hämtar eller anger egenskapens värde på en anslutning som refererar till ID för objektet som fungerar som anslutningspunkten för anslutningen."
  remarks: "För en statisk anslutning som deklarerats i koden för en webbsida, utvecklare kan ange vilka Förbrukaranslutningspunkten ska användas för anslutningen genom att tilldela ett värde till den `ConsumerConnectionPointID` attributet för den `<asp:webpartconnection>` element. Om ett värde inte har tilldelats attributet den <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID>egenskapens värde används.</xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID>       När du skapar dynamiska (programmässiga) anslutningar ska normalt du inte ange värdet på egenskapen ConsumerConnectionPointID. Kan du ringa den <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A>metoden på den <xref:System.Web.UI.WebControls.WebParts.WebPartManager>styra, skicka till den konsumenten och förbrukningspunkt point-objekt (tillsammans med andra nödvändiga parametrar) och metoden anger rätt ID för den Förbrukaranslutningspunkten.</xref:System.Web.UI.WebControls.WebParts.WebPartManager> </xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A> På liknande sätt, när du kopplar från kan du anropa den <xref:System.Web.UI.WebControls.WebParts.WebPartManager.DisconnectWebParts%2A>metoden utan att behöva ange egenskapsvärdet ConsumerConnectionPointID.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.DisconnectWebParts%2A>      > [!NOTE] > ID för en Förbrukaranslutningspunkten kan fastställas när du anger en <xref:System.Web.UI.WebControls.WebParts.WebPart>eller annan serverkontroll som en konsument.</xref:System.Web.UI.WebControls.WebParts.WebPart> Du måste identifiera en metod i konsumenten som hämtar en instans av ett gränssnitt som tillhandahålls av en provider-kontroll eller en transformator. För att identifiera metoden som markeras med den `ConnectionConsumer` koden attribut. När du lägger till det här attributet kan du lägga till en valfri sträng värdet parameter som fungerar som ett ID för klientens <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>objektet.</xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> Om du anger ett värde för parametern ID-blir värdet värdet på egenskapen ConsumerConnectionPointID för anslutningen. Om du inte anger ett ID-värde på <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID>egenskapens värde används.</xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID>"
  example:
  - "The following code example shows the declarative and programmatic use of the ConsumerConnectionPointID property.  \n  \n The example has four parts:  \n  \n-   A user control that enables you to change the Web Parts display mode on a page.  \n  \n-   Source code for an interface and two <xref:System.Web.UI.WebControls.WebParts.WebPart> controls acting as the provider and the consumer for a connection.  \n  \n-   A Web page to host all the controls and run the code example.  \n  \n-   An explanation of how to run the example page.  \n  \n The first part of this code example is the user control that enables users to change display modes on a Web page. Save the following source code to an .ascx file, giving it the file name that is assigned to the `Src` attribute of the `Register` directive for this user control, which is near the top of the hosting Web page. For details about display modes and a description of the source code in this control, see [Walkthrough: Changing Display Modes on a Web Parts Page](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[WebParts_WebPartConnection_ConsumerConnectionPointID#6](~/add/codesnippet/csharp/420efe59-4fbb-4b23-bdd1-_1.ascx)]\n [!code-vb[WebParts_WebPartConnection_ConsumerConnectionPointID#6](~/add/codesnippet/visualbasic/420efe59-4fbb-4b23-bdd1-_1.ascx)]  \n  \n The second part of the code example is the source code for the interface, and the consumer and provider controls. For the code example to run, you must compile this source code. You can compile it explicitly and put the resulting assembly in your Web site's Bin folder or the global assembly cache. Alternatively, you can put the source code in your site's App_Code folder, where it will be dynamically compiled at run time. This code example uses dynamic compilation. For a walkthrough that demonstrates how to compile, see [Walkthrough: Developing and Using a Custom Web Server Control](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[WebParts_WebPartConnection_ConsumerConnectionPointID#2](~/add/codesnippet/csharp/420efe59-4fbb-4b23-bdd1-_2.cs)]\n [!code-vb[WebParts_WebPartConnection_ConsumerConnectionPointID#2](~/add/codesnippet/visualbasic/420efe59-4fbb-4b23-bdd1-_2.vb)]  \n  \n The third part of the code example is the Web page. Note that a connection is declared in the page markup, using the `<StaticConnections>` and `<asp:WebPartsConnection>` elements. The connection declaration includes the required `ConsumerConnectionPointID` attribute. A second method for creating the connection appears in the `Button1_Click` method, where the code creates a new connection, using the connection point defined in the consumer control. Then, in the `Button2_Click` method, the code accesses the ConsumerConnectionPointID property.  \n  \n [!code-cs[WebParts_WebPartConnection_ConsumerConnectionPointID#1](~/add/codesnippet/csharp/420efe59-4fbb-4b23-bdd1-_3.aspx)]\n [!code-vb[WebParts_WebPartConnection_ConsumerConnectionPointID#1](~/add/codesnippet/visualbasic/420efe59-4fbb-4b23-bdd1-_3.aspx)]  \n  \n After you load the page in a browser, a connection already exists because of the static connection declared in the page. Enter some text in the provider control, and note that it is displayed in the consumer due to the connection. Next, disconnect the controls. Using the **Display Mode** drop-down list control, switch the page to connect mode. Click the verbs menu (represented by the downward arrow in the title bar) on one of the <xref:System.Web.UI.WebControls.WebParts.WebPart> controls, and click the connect verb. Click the **Disconnect** button. Use the **Connect WebPart Controls** button to recreate a connection between the two controls. Click the **ConnectionPoint Details** button to run the code that accesses the ConsumerConnectionPointID property value. The value is written out in a label below the controls."
  syntax:
    content: public string ConsumerConnectionPointID { get; set; }
    return:
      type: System.String
      description: "En sträng som innehåller ID: T för förbrukningspunkt punkt."
  overload: System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPointID*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerID
  id: ConsumerID
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  langs:
  - csharp
  name: ConsumerID
  nameWithType: WebPartConnection.ConsumerID
  fullName: System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerID
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Hämtar eller anger egenskapens värde på en anslutning som refererar till ID för den <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPart&quot;> </xref> styra fungerar som en konsument för anslutningen."
  remarks: "Värdet för egenskapen ConsumerID krävs när du skapar en anslutning mellan <xref:System.Web.UI.WebControls.WebParts.WebPart>kontroller.</xref:System.Web.UI.WebControls.WebParts.WebPart> Om ett värde som inte har tilldelats till egenskapen genereras ett undantag när den <xref:System.Web.UI.WebControls.WebParts.WebPartManager>kontroll försöker aktivera anslutningen.</xref:System.Web.UI.WebControls.WebParts.WebPartManager>"
  example:
  - "The following code example shows the declarative and programmatic use of the ConsumerID property.  \n  \n The example has four parts:  \n  \n-   A user control that enables you to change the Web Parts display mode on a page.  \n  \n-   Source code for an interface and two <xref:System.Web.UI.WebControls.WebParts.WebPart> controls acting as the provider and the consumer for a connection.  \n  \n-   A Web page to host all the controls and run the code example.  \n  \n-   An explanation of how to run the example page.  \n  \n The first part of this code example is the user control that enables users to change display modes on a Web page. Save the following source code to an .ascx file, giving it the file name that is assigned to the `Src` attribute of the `Register` directive for this user control, which is near the top of the hosting Web page. For details about display modes and a description of the source code in this control, see [Walkthrough: Changing Display Modes on a Web Parts Page](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[WebParts_WebPartConnection_ConsumerID#6](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1237_1.ascx)]\n [!code-vb[WebParts_WebPartConnection_ConsumerID#6](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1237_1.ascx)]  \n  \n The second part of the code example is the source code for the interface, and the consumer and provider controls. For the code example to run, you must compile this source code. You can compile it explicitly and put the resulting assembly in your Web site's Bin folder or the global assembly cache. Alternatively, you can put the source code in your site's App_Code folder, where it will be dynamically compiled at run time. This code example uses dynamic compilation. For a walkthrough that demonstrates how to compile, see [Walkthrough: Developing and Using a Custom Web Server Control](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[WebParts_WebPartConnection_ConsumerID#2](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1237_2.cs)]\n [!code-vb[WebParts_WebPartConnection_ConsumerID#2](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1237_2.vb)]  \n  \n The third part of the code example is the Web page. Note that a connection is declared in the page markup, using the `<StaticConnections>` and `<asp:WebPartsConnection>` elements. The connection declaration includes the required `ConsumerID` attribute. A second method for creating the connection appears in the `Button1_Click` method, where the code creates a new connection, using the connection point defined in the consumer control. Then, in the `Button2_Click` method, the code accesses the value of the ConsumerID property and displays it in a label.  \n  \n [!code-vb[WebParts_WebPartConnection_ConsumerID#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1237_3.aspx)]\n [!code-cs[WebParts_WebPartConnection_ConsumerID#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1237_3.aspx)]  \n  \n After you load the page in a browser, a connection already exists because of the static connection declared in the page. Enter some text in the provider control, and note that it is displayed in the consumer due to the connection. Next, disconnect the controls. Using the **Display Mode** drop-down list control, switch the page to connect mode. Click the verbs menu (represented by the downward arrow in the title bar) on one of the <xref:System.Web.UI.WebControls.WebParts.WebPart> controls, and click the connect verb. Click the **Disconnect** button. Use the **Connect WebPart Controls** button to recreate a connection between the two controls. Click the **Consumer Details** button to run the code that accesses the ConsumerID property value."
  syntax:
    content: public string ConsumerID { get; set; }
    return:
      type: System.String
      description: "En sträng som innehåller ID för den kontroll som fungerar som en konsument i en anslutning."
  overload: System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerID*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.ID
  id: ID
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  langs:
  - csharp
  name: ID
  nameWithType: WebPartConnection.ID
  fullName: System.Web.UI.WebControls.WebParts.WebPartConnection.ID
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Hämtar eller anger ID för en <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartConnection&quot;> </xref> objekt."
  remarks: "Varje <xref:System.Web.UI.WebControls.WebParts.WebPartConnection>objektet har ett unikt värde som tilldelats dess ID-egenskap.</xref:System.Web.UI.WebControls.WebParts.WebPartConnection> Detta är att säkerställa att det finns ett sätt att skilja mellan flera anslutningar.       Om du skapar en statisk anslutning genom att deklarera en `<asp:webpartconnection>` element i en webbsida, och du inte tilldelar ett värde till den `ID` attribut för anslutningen, ett undantag genereras när den <xref:System.Web.UI.WebControls.WebParts.WebPartManager>kontroll försöker aktivera anslutningen.</xref:System.Web.UI.WebControls.WebParts.WebPartManager>       När den <xref:System.Web.UI.WebControls.WebParts.WebPartManager>kontrollen skapar en ny dynamisk anslutning, anropar den <xref:System.Web.UI.WebControls.WebParts.WebPartManager.CreateDynamicConnectionID%2A>metod för att generera ett unikt ID för anslutningen.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.CreateDynamicConnectionID%2A> </xref:System.Web.UI.WebControls.WebParts.WebPartManager>"
  example:
  - "The following code example shows the declarative and programmatic use of the ID property.  \n  \n The example has four parts:  \n  \n-   A user control that enables you to change the Web Parts display mode on a page.  \n  \n-   Source code for an interface and two <xref:System.Web.UI.WebControls.WebParts.WebPart> controls acting as the provider and the consumer for a connection.  \n  \n-   A Web page to host all the controls and run the code example.  \n  \n-   An explanation of how to run the example page.  \n  \n The first part of this code example is the user control that enables users to change display modes on a Web page. Save the following source code to an .ascx file, giving it the file name that is assigned to the `Src` attribute of the `Register` directive for this user control, which is near the top of the hosting Web page. For details about display modes and a description of the source code in this control, see [Walkthrough: Changing Display Modes on a Web Parts Page](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[WebParts_WebPartConnection_ID#6](~/add/codesnippet/csharp/p-system.web.ui.webcontr_443_1.ascx)]\n [!code-vb[WebParts_WebPartConnection_ID#6](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_443_1.ascx)]  \n  \n The second part of the code example is the source code for the interface, and the consumer and provider controls. For the code example to run, you must compile this source code. You can compile it explicitly and put the resulting assembly in your Web site's Bin folder or the global assembly cache. Alternatively, you can put the source code in your site's App_Code folder, where it will be dynamically compiled at run time. This code example uses dynamic compilation. For a walkthrough that demonstrates how to compile, see [Walkthrough: Developing and Using a Custom Web Server Control](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[WebParts_WebPartConnection_ID#2](~/add/codesnippet/csharp/p-system.web.ui.webcontr_443_2.cs)]\n [!code-vb[WebParts_WebPartConnection_ID#2](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_443_2.vb)]  \n  \n The third part of the code example is the Web page. Note that a connection is declared in the page markup, using the `<StaticConnections>` and `<asp:WebPartsConnection>` elements. The connection declaration includes the required `ID` attribute. A second method for creating the connection appears in the `Button1_Click` method, where the code creates a new connection, using the connection point defined in the consumer control. Here, the ID property is not required, because the connection is dynamic, and the <xref:System.Web.UI.WebControls.WebParts.WebPartManager> control assigns an ID to the connection. In the `Button2_Click` method, the code accesses the value of the ID property and displays it in a label.  \n  \n [!code-cs[WebParts_WebPartConnection_ID#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_443_3.aspx)]\n [!code-vb[WebParts_WebPartConnection_ID#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_443_3.aspx)]  \n  \n After you load the page in a browser, a connection already exists because of the static connection declared in the page. Enter some text in the provider control, and note that it is displayed in the consumer due to the connection. Next, disconnect the controls. Using the **Display Mode** drop-down list control, switch the page to connect mode. Click the verbs menu (represented by the downward arrow in the title bar) on one of the <xref:System.Web.UI.WebControls.WebParts.WebPart> controls, and click the connect verb. Click the **Disconnect** button. Use the **Connect WebPart Controls** button to recreate a connection between the two controls. Click the **Connection Details** button to run the code that accesses the ID property value."
  syntax:
    content: public string ID { get; set; }
    return:
      type: System.String
      description: "En sträng som innehåller ID för en <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartConnection&quot;> </xref>."
  overload: System.Web.UI.WebControls.WebParts.WebPartConnection.ID*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.IsActive
  id: IsActive
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  langs:
  - csharp
  name: IsActive
  nameWithType: WebPartConnection.IsActive
  fullName: System.Web.UI.WebControls.WebParts.WebPartConnection.IsActive
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Hämtar ett värde som anger om en <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartConnection&quot;> </xref> objektet är för närvarande etablerade och kunna exchange-data mellan kontrollerna providern och konsumenter."
  remarks: "Egenskapen IsActive anger tillståndet hos en <xref:System.Web.UI.WebControls.WebParts.WebPartConnection>objektet.</xref:System.Web.UI.WebControls.WebParts.WebPartConnection> När anslutningen är i det här tillståndet kan providern och konsumenten kontrollerna i anslutningen är kommunicerande och kan utbyta data via ett gemensamt gränssnitt eller en <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer>objektet.</xref:System.Web.UI.WebControls.WebParts.WebPartTransformer>       När en användare visar en renderade sida som innehåller en upprättad anslutning i normal bläddringsläge, är anslutningen vanligtvis aktiv (om det inte gick att aktiveras på grund av en konflikt eller andra problem när sidan läses in). I början av sidan och kontroll livscykel, egenskapsvärdet är `false`. Anslutningen aktiveras endast när den <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectionsActivated>händelsen på den <xref:System.Web.UI.WebControls.WebParts.WebPartManager>kontrollen aktiveras.</xref:System.Web.UI.WebControls.WebParts.WebPartManager> </xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectionsActivated> Mer specifikt anslutningen aktiveras efter att klienten har hämtats en instans av det angivna gränssnittet från providern eller en <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer>objektet.</xref:System.Web.UI.WebControls.WebParts.WebPartTransformer>       Det är bra att känna av om en anslutning är aktiv i situationer där det kanske konflikter eller synkroniseringsproblem med på grund av flera anslutningar på en sida. Om det finns någon typ för en konflikt mellan två anslutningar, till exempel den <xref:System.Web.UI.WebControls.WebParts.WebPartManager>kontrollen har kan inte aktivera en av anslutningar för att undvika konflikten.</xref:System.Web.UI.WebControls.WebParts.WebPartManager>"
  example:
  - "The following code example demonstrates use of the IsActive property.  \n  \n The example has three parts:  \n  \n-   Source code for an interface and two <xref:System.Web.UI.WebControls.WebParts.WebPart> controls acting as the provider and the consumer for a connection.  \n  \n-   A Web page to host all the controls and run the code example.  \n  \n-   An explanation of how to run the example page.  \n  \n The first part of the code example is the source code for the interface, and the consumer and provider controls. For the code example to run, you must compile this source code. You can compile it explicitly and put the resulting assembly in your Web site's Bin folder or the global assembly cache. Alternatively, you can put the source code in your site's App_Code folder, where it will be dynamically compiled at run time. This code example uses dynamic compilation. For a walkthrough that demonstrates how to compile, see [Walkthrough: Developing and Using a Custom Web Server Control](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[WebParts_WebPartConnection_IsActive#2](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1322_1.cs)]\n [!code-vb[WebParts_WebPartConnection_IsActive#2](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1322_1.vb)]  \n  \n The second part of the code example is the Web page. Near the top is a `Register` directive that refers to the source code for the two dynamically compiled <xref:System.Web.UI.WebControls.WebParts.WebPart> controls. The static connection is declared within the `<StaticConnections>` element on the page. Within the `<script>` element are four event handlers. Each event handler checks the value of the IsActive property on the static connection, and writes a message to the <xref:System.Web.UI.WebControls.Label> control indicating whether the connection is active or inactive at that state of the page and control life cycle. This demonstrates at what point the connection becomes active, and that it remains active after the page is rendered.  \n  \n [!code-cs[WebParts_WebPartConnection_IsActive#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1322_2.aspx)]\n [!code-vb[WebParts_WebPartConnection_IsActive#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1322_2.aspx)]  \n  \n Load the page in a browser. The static connection is already created, and messages have already been written to the labels showing whether the connection was active at various points in the page and control life cycle. Click the **Connection Details** button, and note that the connection is not active at that point, but that the connection is reactivated each time after the <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectionsActivated> event, and that it is still active (and will remain so) after the <xref:System.Web.UI.Control.PreRender> event of the page."
  syntax:
    content: public bool IsActive { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Om anslutningen är aktiv. Annars <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Web.UI.WebControls.WebParts.WebPartConnection.IsActive*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared
  id: IsShared
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  langs:
  - csharp
  name: IsShared
  nameWithType: WebPartConnection.IsShared
  fullName: System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Hämtar ett värde som anger om en <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartConnection&quot;> </xref> objektet är synligt för alla användare eller bara för den aktuella användaren."
  remarks: "Precis som med enskilda <xref:System.Web.UI.WebControls.WebParts.WebPart>kontroller, en <xref:System.Web.UI.WebControls.WebParts.WebPartConnection>-objekt kan vara en delad eller en instans per användare.</xref:System.Web.UI.WebControls.WebParts.WebPartConnection> </xref:System.Web.UI.WebControls.WebParts.WebPart> En delad instans betyder att anslutningen är synliga för alla användare av en webbsida, och en instans per användare anslutningen visas endast för en viss användare.       I allmänhet avgör hur en anslutning har lagts till i en sida om anslutningen delas. Om anslutningen är deklarerad i koden för en webbsida och sedan anslutningen delas och egenskapsvärdet IsShared är `true`. Dessutom, om webbsidan delat anpassningsläge när en anslutning har lagts till, delas anslutningen också. Normalt när en användare använder den `<asp:connectionszone>` användargränssnittet (UI) för att lägga till en anslutning, sidan är i användaranpassningsläge, så att anslutningen inte har delats och egenskapsvärdet IsShared är `false`."
  example:
  - "The following code example demonstrates programmatic use of the IsShared property.  \n  \n The code example has five parts:  \n  \n-   A user control that enables you to change the Web Parts display mode on a page.  \n  \n-   Source code for an interface and two <xref:System.Web.UI.WebControls.WebParts.WebPart> controls acting as the provider and the consumer for a connection.  \n  \n-   A Web page to host all the controls and run the code example.  \n  \n-   An entry in the Web.config file that is required to run the example.  \n  \n-   An explanation of how to run the example page.  \n  \n The first part of this code example is the user control that enables users to change display modes on a Web page. Save the following source code to an .ascx file, giving it the file name that is assigned to the `Src` attribute of the `Register` directive for this user control, which is near the top of the hosting Web page. For details about display modes and a description of the source code in this control, see [Walkthrough: Changing Display Modes on a Web Parts Page](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[WebParts_WebPartConnection_IsShared#6](~/add/codesnippet/csharp/p-system.web.ui.webcontr_784_1.ascx)]\n [!code-vb[WebParts_WebPartConnection_IsShared#6](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_784_1.ascx)]  \n  \n The second part of the code example is the source code for the interface, and the consumer and provider controls. For the code example to run, you must compile this source code. You can compile it explicitly and put the resulting assembly in your Web site's Bin folder or the global assembly cache. Alternatively, you can put the source code in your site's App_Code folder, where it will be dynamically compiled at run time. This code example uses dynamic compilation. For a walkthrough that demonstrates how to compile, see [Walkthrough: Developing and Using a Custom Web Server Control](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[WebParts_WebPartConnection_IsShared#2](~/add/codesnippet/csharp/p-system.web.ui.webcontr_784_2.cs)]\n [!code-vb[WebParts_WebPartConnection_IsShared#2](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_784_2.vb)]  \n  \n The third part of the code example is the Web page. In the `Button2_Click` method, it checks the IsShared property of the existing connection and displays the result on the page.  \n  \n [!code-cs[WebParts_WebPartConnection_IsShared#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_784_3.aspx)]\n [!code-vb[WebParts_WebPartConnection_IsShared#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_784_3.aspx)]  \n  \n The fourth part of the code example is an entry in the Web.config file that is required for the user account that will be running the example to be able to edit the page in shared personalization scope. To enable this, you must have an entry in the Web.config file within the `<system.web>` section that looks like the following example.  \n  \n```  \n<webParts>  \n  <personalization>  \n    <authorization>  \n      <allow users=\"UserAccount\"  \n             roles=\"admin\"  \n             verbs=\"enterSharedScope\"/>  \n    </authorization>            \n  </personalization>  \n</webParts>  \n```  \n  \n After you load the page in a browser, use the **Display Mode** drop-down list control to switch the page to connect display mode. Click the **Connect WebPart Controls** button to form a connection. Next, click the **Connection Details** button to display whether the connection is shared. If you created the connection with the page in the default user personalization scope, the IsShared property value should be `false` for the connection.  \n  \n On the verbs menu of one of the <xref:System.Web.UI.WebControls.WebParts.WebPart> controls (indicated by the downward arrow in the title bar), click the connect verb. When the connection UI appears, click the **Disconnect** button to end the connection. Use the **Display Mode** control to return the page to browse mode.  \n  \n In the **Display Mode** control, select the **Shared** option to switch the page into shared personalization scope. Follow the same steps as those above to create a connection, and again click the **Connection Details** button to display whether the connection is shared. In this case, the value of the IsShared property should be `true`."
  syntax:
    content: public bool IsShared { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Om anslutningen delas; Annars <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.IsStatic
  id: IsStatic
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  langs:
  - csharp
  name: IsStatic
  nameWithType: WebPartConnection.IsStatic
  fullName: System.Web.UI.WebControls.WebParts.WebPartConnection.IsStatic
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Hämtar ett värde som anger om en <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartConnection&quot;> </xref> objektet är deklarerad i koden för en webbsida eller skapas via programmering."
  remarks: "Anslutningarna mellan webbdelarna kontroller kan vara statisk eller dynamisk. En statisk anslutning har deklarerats i koden för en webbsida med hjälp av en `<asp:WebPartConnection>` element. Dynamic-anslutningar skapas via programmering eller när en användare skapar en anslutning via användargränssnittet (UI) definieras av den <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone>kontroll.</xref:System.Web.UI.WebControls.WebParts.ConnectionsZone>       Statiska anslutningarna är delade objekt, vilket innebär att de är tillgängliga för alla användare av webbsidan. De är också huvudsakligen permanenta eftersom, som en statisk <xref:System.Web.UI.WebControls.WebParts.WebPart>kontroll, de kan inte tas bort permanent.</xref:System.Web.UI.WebControls.WebParts.WebPart>      > [!NOTE] > Medan en statisk connection-objektet inte kan tas bort permanent, den kan kopplas permanent. I det här fallet frånkopplade objekt skulle finns på servern, men slutanvändaren vara aldrig medveten om objektet finns på en sida."
  example:
  - "The following code example demonstrates the programmatic use of the IsStatic property.  \n  \n The code example has three parts:  \n  \n-   Source code for an interface and two <xref:System.Web.UI.WebControls.WebParts.WebPart> controls acting as the provider and the consumer for a connection.  \n  \n-   A Web page to host the controls and run the code example.  \n  \n-   An explanation of how to run the example page.  \n  \n The first part of the code example is the source code for the interface, and the consumer and provider controls. For the code example to run, you must compile this source code. You can compile it explicitly and put the resulting assembly in your Web site's Bin folder or the global assembly cache. Alternatively, you can put the source code in your site's App_Code folder, where it will be dynamically compiled at run time. This code example uses dynamic compilation. For a walkthrough that demonstrates how to compile, see [Walkthrough: Developing and Using a Custom Web Server Control](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[WebParts_WebPartConnection_IsStatic#2](~/add/codesnippet/csharp/p-system.web.ui.webcontr_499_1.cs)]\n [!code-vb[WebParts_WebPartConnection_IsStatic#2](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_499_1.vb)]  \n  \n The second part of the code example is the Web page. Near the top is a `Register` directive that refers to the source code for the two dynamically compiled <xref:System.Web.UI.WebControls.WebParts.WebPart> controls. The static connection is declared within the `<StaticConnections>` element on the page. The `Button1_Click` method accesses the IsStatic property to check whether the connection is static.  \n  \n [!code-vb[WebParts_WebPartConnection_IsStatic#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_499_2.aspx)]\n [!code-cs[WebParts_WebPartConnection_IsStatic#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_499_2.aspx)]  \n  \n Load the page in a browser. The static connection is already created. Enter some text in the provider control, and note that the text is displayed in the consumer control. Click the **Connection Details** button to display the value of the IsStatic property."
  syntax:
    content: public bool IsStatic { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Om anslutningen är statiskt. Annars <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Web.UI.WebControls.WebParts.WebPartConnection.IsStatic*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.Provider
  id: Provider
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  langs:
  - csharp
  name: Provider
  nameWithType: WebPartConnection.Provider
  fullName: System.Web.UI.WebControls.WebParts.WebPartConnection.Provider
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Hämtar en <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPart&quot;> </xref> kontroll som fungerar som en provider i en webbdelar-anslutning."
  remarks: "Varje webbdelar anslutning består av två <xref:System.Web.UI.WebControls.WebParts.WebPart>kontroller – en konsument och en provider-- och egenskapen returnerar en referens till provider-kontroll i en anslutning.</xref:System.Web.UI.WebControls.WebParts.WebPart>       Provider-kontroll krävs att upprätta en anslutning som sin motsvarighet i en anslutning (Konsumentkontroll). Om du skapar anslutningen via programmering eller genom att deklarera sidan beständiga format, måste du ange en kontroll ska fungera som leverantören för en anslutning."
  example:
  - "The following code example demonstrates use of the Provider property.  \n  \n The code example has three parts:  \n  \n-   Source code for an interface and two <xref:System.Web.UI.WebControls.WebParts.WebPart> controls acting as the provider and the consumer for a connection.  \n  \n-   A Web page to host the controls and run the code example.  \n  \n-   An explanation of how to run the example page.  \n  \n The first part of the code example is the source code for the interface, and the consumer and provider controls. For the code example to run, you must compile this source code. You can compile it explicitly and put the resulting assembly in your Web site's Bin folder or the global assembly cache. Alternatively, you can put the source code in your site's App_Code folder, where it will be dynamically compiled at run time. This code example uses dynamic compilation. For a walkthrough that demonstrates how to compile, see [Walkthrough: Developing and Using a Custom Web Server Control](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-vb[WebParts_WebPartConnection_Provider#2](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_43_1.vb)]\n [!code-cs[WebParts_WebPartConnection_Provider#2](~/add/codesnippet/csharp/p-system.web.ui.webcontr_43_1.cs)]  \n  \n The second part of the code example is the Web page. Near the top is a `Register` directive that refers to the source code for the two dynamically compiled <xref:System.Web.UI.WebControls.WebParts.WebPart> controls. The static connection is declared within the `<StaticConnections>` element on the page. Notice that in the `<asp:webpartconnection>` element, the `ProviderID` attribute has the ID of the provider control assigned to it. This is required to identify the provider for the static connection. The `Button1_Click` method accesses the Provider property and writes some of its details to a label.  \n  \n [!code-cs[WebParts_WebPartConnection_Provider#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_43_2.aspx)]\n [!code-vb[WebParts_WebPartConnection_Provider#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_43_2.aspx)]  \n  \n Load the page in a browser. The static connection is already created. Enter some text in the provider control, and note that the text is displayed in the consumer control. Click the **Provider Details** button to display some of the property values accessed through the Provider property."
  syntax:
    content: public System.Web.UI.WebControls.WebParts.WebPart Provider { get; }
    return:
      type: System.Web.UI.WebControls.WebParts.WebPart
      description: "En <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPart&quot;> </xref> som agerar som en leverantör av data."
  overload: System.Web.UI.WebControls.WebParts.WebPartConnection.Provider*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Längden på den <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderID*>egenskapsvärdet är noll.</xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderID*>"
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPoint
  id: ProviderConnectionPoint
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  langs:
  - csharp
  name: ProviderConnectionPoint
  nameWithType: WebPartConnection.ProviderConnectionPoint
  fullName: System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPoint
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Hämtar det objekt som fungerar som en anslutningspunkt för en <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPart&quot;> </xref> styra fungerar som en provider för en anslutning."
  remarks: "Ett av de nödvändiga stegen för att skapa en anslutning mellan två <xref:System.Web.UI.WebControls.WebParts.WebPart>kontroller är att skapa anslutningspunkter för varje kontroll.</xref:System.Web.UI.WebControls.WebParts.WebPart> Anslutningspunkten för providern är ett objekt som innehåller information om hur du ansluter till den kontroll som fungerar som en provider. I leverantörens källkod någon av metoderna måste identifieras med de `ConnectionProvider` attribut. Den <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>som är associerade med en provider kontrollen innehåller information om metoden och attributet, inklusive ett ID för metoden, ett visningsnamn för användning i användargränssnittet (UI) och vilken typ av gränssnittet instans metoden kan återgå till en Konsumentkontroll.</xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> Den här uppsättningen av information om providern, dess metod för som utgör anslutningar och vilken typ av gränssnitt som ger, utgör tillsammans en anslutningspunkt för providern.       Som standard en <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>kan ansluta till endast en <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>objekt i taget.</xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> </xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> En kund kan ha flera metoder som identifieras som möjligt konsumenten anslutningspunkter, men en konsument bara kan delta i en anslutning som konsument (därför bara en av dess konsumenten kopplingspunkter kan vara aktiva) i taget. Däremot ett <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>kan ansluta till valfritt antal <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>objekt som standard.</xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> </xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> Till exempel kan en provider-kontroll som innehåller ett postnummer vara ansluten till flera Konsumentkontroller som använder ett postnummer för att skapa olika typer av data baserat på ett postnummer väder data, nyheter och så vidare. Den här standardfunktionen kan ändras genom att åsidosätta den <xref:System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute.AllowsMultipleConnections%2A>egenskapen på den <xref:System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute>attribut.</xref:System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute> </xref:System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute.AllowsMultipleConnections%2A>"
  example:
  - "The following code example demonstrates the programmatic use of the ProviderConnectionPoint property.  \n  \n The example has four parts:  \n  \n-   A user control that enables you to change the Web Parts display mode on a page.  \n  \n-   Source code for an interface and two <xref:System.Web.UI.WebControls.WebParts.WebPart> controls acting as the provider and the consumer for a connection.  \n  \n-   A Web page to host all the controls and run the code example.  \n  \n-   An explanation of how to run the example page.  \n  \n The first part of this code example is the user control that enables users to change display modes on a Web page. Save the following source code to an .ascx file, giving it the file name that is assigned to the `Src` attribute of the `Register` directive for this user control, which is near the top of the hosting Web page. For details about display modes and a description of the source code in this control, see [Walkthrough: Changing Display Modes on a Web Parts Page](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[WebParts_WebPartConnection_ProviderConnectionPoint#6](~/add/codesnippet/csharp/p-system.web.ui.webcontr_471_1.ascx)]\n [!code-vb[WebParts_WebPartConnection_ProviderConnectionPoint#6](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_471_1.ascx)]  \n  \n The second part of the code example is the source code for the two <xref:System.Web.UI.WebControls.WebParts.WebPart> controls that serve as the consumer and the provider for the connection, and an interface used for the connection points. For the code example to run, you must compile this source code. You can compile it explicitly and put the resulting assembly in your Web site's Bin folder or the global assembly cache. Alternatively, you can put the source code in your site's App_Code folder, where it will be dynamically compiled at run time. This code example uses dynamic compilation. For a walkthrough that demonstrates how to compile, see [Walkthrough: Developing and Using a Custom Web Server Control](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[WebParts_WebPartConnection_ProviderConnectionPoint#2](~/add/codesnippet/csharp/p-system.web.ui.webcontr_471_2.cs)]\n [!code-vb[WebParts_WebPartConnection_ProviderConnectionPoint#2](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_471_2.vb)]  \n  \n The third part of the code example is the code for the Web page that hosts the controls and demonstrates the use of the ProviderConnectionPoint property. In the `Button1_Click` method, all the objects required to form a connection are created, including a <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> object. Note the call to the <xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetProviderConnectionPoints%2A> method on the <xref:System.Web.UI.WebControls.WebParts.WebPartManager> control. The various created objects are all passed to the <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A> method to create the connection. In the `Button2_Click` method, the code accesses the ProviderConnectionPoint property and displays some details of the connection point.  \n  \n [!code-cs[WebParts_WebPartConnection_ProviderConnectionPoint#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_471_3.aspx)]\n [!code-vb[WebParts_WebPartConnection_ProviderConnectionPoint#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_471_3.aspx)]  \n  \n After you load the page in a browser, use the **Display Mode** drop-down list control to switch the page to connect mode. Click the verbs menu (represented by the downward arrow in the title bar) on one of the <xref:System.Web.UI.WebControls.WebParts.WebPart> controls, and click the connect verb. Use the **Connect WebPart Controls** button, or the provided connection UI, to create a connection between the two controls. Click the **ConnectionPoint Details** button to run the code that demonstrates the ProviderConnectionPoint property."
  syntax:
    content: public System.Web.UI.WebControls.WebParts.ProviderConnectionPoint ProviderConnectionPoint { get; }
    return:
      type: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint
      description: "En <xref href=&quot;System.Web.UI.WebControls.WebParts.ProviderConnectionPoint&quot;> </xref> som är associerade med provider-kontroll i en anslutning."
  overload: System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPoint*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPointID
  id: ProviderConnectionPointID
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  langs:
  - csharp
  name: ProviderConnectionPointID
  nameWithType: WebPartConnection.ProviderConnectionPointID
  fullName: System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPointID
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Hämtar eller anger egenskapens värde på en anslutning som refererar till ID för objektet som fungerar som providerpunkt för anslutningen."
  remarks: "För en statisk anslutning som deklarerats i koden för en webbsida, utvecklare kan ange vilka Provideranslutningspunkten ska användas för anslutningen genom att tilldela ett värde till den `ProviderConnectionPointID` attributet för den `<asp:webpartconnection>` element. Om ett värde inte har tilldelats attributet den <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID>egenskapens värde används.</xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID>       När du skapar dynamiska (programmässiga) anslutningar ska normalt du inte ange värdet på egenskapen ProviderConnectionPointID. Kan du ringa den <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A>metoden på den <xref:System.Web.UI.WebControls.WebParts.WebPartManager>styra, skicka till den provider och leverantörsanslutning point-objekt (tillsammans med andra nödvändiga parametrar) och metoden anger rätt ID för den providerpunkt.</xref:System.Web.UI.WebControls.WebParts.WebPartManager> </xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A> På liknande sätt, när du kopplar från kan du anropa den <xref:System.Web.UI.WebControls.WebParts.WebPartManager.DisconnectWebParts%2A>metoden utan att behöva ange egenskapsvärdet ProviderConnectionPointID.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.DisconnectWebParts%2A>      > [!NOTE] > ID för en provider anslutningspunkt kan fastställas när du anger en <xref:System.Web.UI.WebControls.WebParts.WebPart>eller annan serverkontroll som en provider.</xref:System.Web.UI.WebControls.WebParts.WebPart> Du måste identifiera en metod i providern som har en instans av ett gränssnitt som innehåller data till en förbrukare skapas. För att identifiera metoden som markeras med den `ConnectionProvider` koden attribut. När du lägger till det här attributet kan du lägga till en valfri sträng värdet parameter som fungerar som ett ID för leverantörens <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>objektet.</xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> Om du anger ett värde för parametern ID-blir värdet värdet på egenskapen ProviderConnectionPointID för anslutningen. Om du inte anger ett ID-värde på <xref:System.Web.UI.WebControls.WebParts.WebPartManager>kontroll tilldelar ett ID som standard när objektet har skapats.</xref:System.Web.UI.WebControls.WebParts.WebPartManager>"
  example:
  - "The following code example shows the declarative and programmatic use of the ProviderConnectionPointID property.  \n  \n The example has four parts:  \n  \n-   A user control that enables you to change the Web Parts display mode on a page.  \n  \n-   Source code for an interface and two <xref:System.Web.UI.WebControls.WebParts.WebPart> controls acting as the provider and the consumer for a connection.  \n  \n-   A Web page to host all the controls and run the code example.  \n  \n-   An explanation of how to run the example page.  \n  \n The first part of this code example is the user control that enables users to change display modes on a Web page. Save the following source code to an .ascx file, giving it the file name that is assigned to the `Src` attribute of the `Register` directive for this user control, which is near the top of the hosting Web page. For details about display modes and a description of the source code in this control, see [Walkthrough: Changing Display Modes on a Web Parts Page](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[WebParts_WebPartConnection_ProviderConnectionPointID#6](~/add/codesnippet/csharp/8cfbdeee-12ad-4cb7-abb6-_1.ascx)]\n [!code-vb[WebParts_WebPartConnection_ProviderConnectionPointID#6](~/add/codesnippet/visualbasic/8cfbdeee-12ad-4cb7-abb6-_1.ascx)]  \n  \n The second part of the code example is the source code for the interface, and the consumer and provider controls. For the code example to run, you must compile this source code. You can compile it explicitly and put the resulting assembly in your Web site's Bin folder or the global assembly cache. Alternatively, you can put the source code in your site's App_Code folder, where it will be dynamically compiled at run time. This code example uses dynamic compilation. For a walkthrough that demonstrates how to compile, see [Walkthrough: Developing and Using a Custom Web Server Control](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-vb[WebParts_WebPartConnection_ProviderConnectionPointID#2](~/add/codesnippet/visualbasic/8cfbdeee-12ad-4cb7-abb6-_2.vb)]\n [!code-cs[WebParts_WebPartConnection_ProviderConnectionPointID#2](~/add/codesnippet/csharp/8cfbdeee-12ad-4cb7-abb6-_2.cs)]  \n  \n The third part of the code example is the Web page. Note that a connection is declared in the page markup, using the `<StaticConnections>` and `<asp:WebPartsConnection>` elements. The connection declaration includes the required `ProviderConnectionPointID` attribute. A second method for creating the connection appears in the `Button1_Click` method, where the code creates a new connection, using the connection point (and the ID) defined in the provider control. Then, in the `Button2_Click` method, the code accesses the ProviderConnectionPointID property.  \n  \n [!code-cs[WebParts_WebPartConnection_ProviderConnectionPointID#1](~/add/codesnippet/csharp/8cfbdeee-12ad-4cb7-abb6-_3.aspx)]\n [!code-vb[WebParts_WebPartConnection_ProviderConnectionPointID#1](~/add/codesnippet/visualbasic/8cfbdeee-12ad-4cb7-abb6-_3.aspx)]  \n  \n After you load the page in a browser, a connection already exists because of the static connection declared in the page. Enter some text in the provider control, and note that it is displayed in the consumer due to the connection. Next, disconnect the controls. Using the **Display Mode** drop-down list control, switch the page to connect mode. Click the verbs menu (represented by the downward arrow in the title bar) on one of the <xref:System.Web.UI.WebControls.WebParts.WebPart> controls, and click the connect verb. Click the **Disconnect** button. Use the **Connect WebPart Controls** button to recreate a connection between the two controls. Click the **ConnectionPoint Details** button to run the code that accesses the ProviderConnectionPointID property value. The value is written out in a label below the controls."
  syntax:
    content: public string ProviderConnectionPointID { get; set; }
    return:
      type: System.String
      description: "En sträng som innehåller ID för en provider anslutning point-objekt."
  overload: System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPointID*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderID
  id: ProviderID
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  langs:
  - csharp
  name: ProviderID
  nameWithType: WebPartConnection.ProviderID
  fullName: System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderID
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Hämtar eller anger egenskapens värde på en anslutning som refererar till ID för den <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPart&quot;> </xref> styra fungerar som en provider för anslutningen."
  remarks: "Värdet för egenskapen ProviderID krävs när du skapar en anslutning mellan två <xref:System.Web.UI.WebControls.WebParts.WebPart>kontroller.</xref:System.Web.UI.WebControls.WebParts.WebPart> Om ett värde som inte har tilldelats till egenskapen genereras ett undantag när den <xref:System.Web.UI.WebControls.WebParts.WebPartManager>kontroll försöker aktivera anslutningen.</xref:System.Web.UI.WebControls.WebParts.WebPartManager>"
  example:
  - "The following code example shows the declarative and programmatic use of the ProviderID property.  \n  \n The example has four parts:  \n  \n-   A user control that enables you to change the Web Parts display mode on a page.  \n  \n-   Source code for an interface and two <xref:System.Web.UI.WebControls.WebParts.WebPart> controls acting as the provider and the consumer for a connection.  \n  \n-   A Web page to host all the controls and run the code example.  \n  \n-   An explanation of how to run the example page.  \n  \n The first part of this code example is the user control that enables users to change display modes on a Web page. Save the following source code to an .ascx file, giving it the file name that is assigned to the `Src` attribute of the `Register` directive for this user control, which is near the top of the hosting Web page. For details about display modes and a description of the source code in this control, see [Walkthrough: Changing Display Modes on a Web Parts Page](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[WebParts_WebPartConnection_ProviderID#6](~/add/codesnippet/csharp/p-system.web.ui.webcontr_577_1.ascx)]\n [!code-vb[WebParts_WebPartConnection_ProviderID#6](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_577_1.ascx)]  \n  \n The second part of the code example is the source code for the interface, and the consumer and provider controls. For the code example to run, you must compile this source code. You can compile it explicitly and put the resulting assembly in your Web site's Bin folder or the global assembly cache. Alternatively, you can put the source code in your site's App_Code folder, where it will be dynamically compiled at run time. This code example uses dynamic compilation. For a walkthrough that demonstrates how to compile, see [Walkthrough: Developing and Using a Custom Web Server Control](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-vb[WebParts_WebPartConnection_ProviderID#2](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_577_2.vb)]\n [!code-cs[WebParts_WebPartConnection_ProviderID#2](~/add/codesnippet/csharp/p-system.web.ui.webcontr_577_2.cs)]  \n  \n The third part of the code example is the Web page. Note that a connection is declared in the page markup, using the `<StaticConnections>` and `<asp:WebPartsConnection>` elements. The connection declaration includes the required `ProviderID` attribute. A second method for creating the connection appears in the `Button1_Click` method, where the code creates a new connection, using the connection point defined in the consumer control. Then, in the `Button2_Click` method, the code accesses the value of the ProviderID property and displays it in a label.  \n  \n [!code-cs[WebParts_WebPartConnection_ProviderID#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_577_3.aspx)]\n [!code-vb[WebParts_WebPartConnection_ProviderID#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_577_3.aspx)]  \n  \n After you load the page in a browser, a connection already exists because of the static connection declared in the page. Enter some text in the provider control, and note that it is displayed in the consumer due to the connection. Next, disconnect the controls. To do that, use the **Display Mode** drop-down list control to switch the page to connect mode. Click the verbs menu (represented by the downward arrow in the title bar) on one of the <xref:System.Web.UI.WebControls.WebParts.WebPart> controls, and click the connect verb. Click the **Disconnect** button, and the controls are disconnected. Next, use the **Connect WebPart Controls** button to recreate a connection between the two controls. Click the **Consumer Details** button to run the code that accesses the ProviderID property value."
  syntax:
    content: public string ProviderID { get; set; }
    return:
      type: System.String
      description: "En sträng som innehåller ID för provider-kontroll."
  overload: System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderID*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.ToString
  id: ToString
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  langs:
  - csharp
  name: ToString()
  nameWithType: WebPartConnection.ToString()
  fullName: System.Web.UI.WebControls.WebParts.WebPartConnection.ToString()
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Åsidosätter den ärvda <xref:System.Object.ToString*>metoden och returnerar typen kort namn för anslutningsobjektet.</xref:System.Object.ToString*>"
  remarks: "Den här metoden används främst av praktiska skäl av kontrollen designers. Det förbättrar hur anslutningsobjekt visas i designvyn med kortare typnamn i stället för ett fullständigt kvalificerat namn. Men kan metoden anropas när som helst i koden där du vill veta namnet på ett anslutningsobjekt."
  example:
  - "The following code example demonstrates how to call the ToString method to return the short type name of a <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> object.  \n  \n The code example has three parts:  \n  \n-   Source code for an interface and two <xref:System.Web.UI.WebControls.WebParts.WebPart> controls acting as the provider and the consumer for a connection.  \n  \n-   A Web page to host the controls and run the code example.  \n  \n-   An explanation of how to run the example page.  \n  \n The first part of the code example is the source code for the interface, and the consumer and provider controls. For the code example to run, you must compile this source code. You can compile it explicitly and put the resulting assembly in your Web site's Bin folder or the global assembly cache. Alternatively, you can put the source code in your site's App_Code folder, where it will be dynamically compiled at run time. This code example uses dynamic compilation. For a walkthrough that demonstrates how to compile, see [Walkthrough: Developing and Using a Custom Web Server Control](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[WebParts_WebPartConnection_ToString#2](~/add/codesnippet/csharp/m-system.web.ui.webcontr_228_1.cs)]\n [!code-vb[WebParts_WebPartConnection_ToString#2](~/add/codesnippet/visualbasic/m-system.web.ui.webcontr_228_1.vb)]  \n  \n The second part of the code example is the Web page. Near the top is a `Register` directive that refers to the source code for the two dynamically compiled <xref:System.Web.UI.WebControls.WebParts.WebPart> controls. The static connection is declared within the `<StaticConnections>` element on the page. The `Button1_Click` method calls the ToString method to write the type name of the connection to a label.  \n  \n [!code-cs[WebParts_WebPartConnection_ToString#1](~/add/codesnippet/csharp/m-system.web.ui.webcontr_228_2.aspx)]\n [!code-vb[WebParts_WebPartConnection_ToString#1](~/add/codesnippet/visualbasic/m-system.web.ui.webcontr_228_2.aspx)]  \n  \n Load the page in a browser. The static connection is already created. Enter some text in the provider control, and note that the text is displayed in the consumer control. Click the **Connection Details** button to execute the ToString method."
  syntax:
    content: public override string ToString ();
    parameters: []
    return:
      type: System.String
      description: "En sträng som innehåller det korta (okvalificerade) typnamnet för en <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartConnection&quot;> </xref>."
  overload: System.Web.UI.WebControls.WebParts.WebPartConnection.ToString*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.Transformer
  id: Transformer
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  langs:
  - csharp
  name: Transformer
  nameWithType: WebPartConnection.Transformer
  fullName: System.Web.UI.WebControls.WebParts.WebPartConnection.Transformer
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Hämtar en <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartTransformer&quot;> </xref> objekt som används för att omvandla data mellan två kopplingspunkter för övrigt inkompatibla i en webbdelar-anslutning."
  remarks: "Det finns två sätt som providern och konsumenten kontrollerna i anslutningen kan ansluta i webbdelar-anslutning. De kan ansluta direkt till deras respektive <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint>objekt och en gränssnittstyp som kan uppfattas som båda kontrollerna.</xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> Eller, om de inte är kompatibla, de kan ansluta indirekt, via en <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer>objekt som omvandlar en gränssnittet instans från en leverantör till en typ som tolkas av en konsument.</xref:System.Web.UI.WebControls.WebParts.WebPartTransformer>       När en transformator krävs som en del av en anslutning, egenskapen transformatorn ger en referens till den <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer>objekt.</xref:System.Web.UI.WebControls.WebParts.WebPartTransformer> Du kan lägga till en transformator för en anslutning deklarativt i koden för en webbsida genom att lägga till en tagg för en anpassad transformator (eller någon av transformatorer som tillhandahålls med webbdelar kontroll) inom den `<asp:WebPartConnection>` element. Du kan också lägga till en transformator programmässigt, skapa en instans av den i koden och anropa den <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%28System.Web.UI.WebControls.WebParts.WebPart%2CSystem.Web.UI.WebControls.WebParts.ProviderConnectionPoint%2CSystem.Web.UI.WebControls.WebParts.WebPart%2CSystem.Web.UI.WebControls.WebParts.ConsumerConnectionPoint%2CSystem.Web.UI.WebControls.WebParts.WebPartTransformer%29>metoden på den <xref:System.Web.UI.WebControls.WebParts.WebPartManager>behörighet att skapa anslutningen skicka till den transformatorn objektet tillsammans med de obligatoriska parametrarna.</xref:System.Web.UI.WebControls.WebParts.WebPartManager> </xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%28System.Web.UI.WebControls.WebParts.WebPart%2CSystem.Web.UI.WebControls.WebParts.ProviderConnectionPoint%2CSystem.Web.UI.WebControls.WebParts.WebPart%2CSystem.Web.UI.WebControls.WebParts.ConsumerConnectionPoint%2CSystem.Web.UI.WebControls.WebParts.WebPartTransformer%29>"
  syntax:
    content: public System.Web.UI.WebControls.WebParts.WebPartTransformer Transformer { get; }
    return:
      type: System.Web.UI.WebControls.WebParts.WebPartTransformer
      description: "A <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartTransformer&quot;></xref>. Standardvärdet är <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  overload: System.Web.UI.WebControls.WebParts.WebPartConnection.Transformer*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.Transformers
  id: Transformers
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  langs:
  - csharp
  name: Transformers
  nameWithType: WebPartConnection.Transformers
  fullName: System.Web.UI.WebControls.WebParts.WebPartConnection.Transformers
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Hämtar en samling <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartTransformer&quot;> </xref> objekt som används internt av uppsättningen webbdelar kontroll."
  remarks: "Transformatorer egenskap aldrig är avsedd för användas av utvecklare. Om du vill komma åt transformatorn som är associerade med en anslutning kan utvecklare bör alltid använda den <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.Transformer%2A>egenskapen.</xref:System.Web.UI.WebControls.WebParts.WebPartConnection.Transformer%2A>       Egenskapen transformatorer används internt av kontrollen webbdelar aktiverar sidan utvecklare att deklarera transformatorn element i den `<asp:webpartconnection>` element i koden för en webbsida."
  syntax:
    content: public System.Web.UI.WebControls.WebParts.WebPartTransformerCollection Transformers { get; }
    return:
      type: System.Web.UI.WebControls.WebParts.WebPartTransformerCollection
      description: "En <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartTransformerCollection&quot;> </xref> som innehåller <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartTransformer&quot;> </xref> objekt."
  overload: System.Web.UI.WebControls.WebParts.WebPartConnection.Transformers*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.#ctor
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  isExternal: false
  name: WebPartConnection()
  nameWithType: WebPartConnection.WebPartConnection()
  fullName: System.Web.UI.WebControls.WebParts.WebPartConnection.WebPartConnection()
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.Consumer
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  isExternal: false
  name: Consumer
  nameWithType: WebPartConnection.Consumer
  fullName: System.Web.UI.WebControls.WebParts.WebPartConnection.Consumer
- uid: System.Web.UI.WebControls.WebParts.WebPart
  parent: System.Web.UI.WebControls.WebParts
  isExternal: false
  name: WebPart
  nameWithType: WebPart
  fullName: System.Web.UI.WebControls.WebParts.WebPart
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPoint
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  isExternal: false
  name: ConsumerConnectionPoint
  nameWithType: WebPartConnection.ConsumerConnectionPoint
  fullName: System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPoint
- uid: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint
  parent: System.Web.UI.WebControls.WebParts
  isExternal: false
  name: ConsumerConnectionPoint
  nameWithType: ConsumerConnectionPoint
  fullName: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPointID
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  isExternal: false
  name: ConsumerConnectionPointID
  nameWithType: WebPartConnection.ConsumerConnectionPointID
  fullName: System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPointID
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerID
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  isExternal: false
  name: ConsumerID
  nameWithType: WebPartConnection.ConsumerID
  fullName: System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerID
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.ID
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  isExternal: false
  name: ID
  nameWithType: WebPartConnection.ID
  fullName: System.Web.UI.WebControls.WebParts.WebPartConnection.ID
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.IsActive
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  isExternal: false
  name: IsActive
  nameWithType: WebPartConnection.IsActive
  fullName: System.Web.UI.WebControls.WebParts.WebPartConnection.IsActive
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  isExternal: false
  name: IsShared
  nameWithType: WebPartConnection.IsShared
  fullName: System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.IsStatic
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  isExternal: false
  name: IsStatic
  nameWithType: WebPartConnection.IsStatic
  fullName: System.Web.UI.WebControls.WebParts.WebPartConnection.IsStatic
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.Provider
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  isExternal: false
  name: Provider
  nameWithType: WebPartConnection.Provider
  fullName: System.Web.UI.WebControls.WebParts.WebPartConnection.Provider
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPoint
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  isExternal: false
  name: ProviderConnectionPoint
  nameWithType: WebPartConnection.ProviderConnectionPoint
  fullName: System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPoint
- uid: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint
  parent: System.Web.UI.WebControls.WebParts
  isExternal: false
  name: ProviderConnectionPoint
  nameWithType: ProviderConnectionPoint
  fullName: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPointID
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  isExternal: false
  name: ProviderConnectionPointID
  nameWithType: WebPartConnection.ProviderConnectionPointID
  fullName: System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPointID
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderID
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  isExternal: false
  name: ProviderID
  nameWithType: WebPartConnection.ProviderID
  fullName: System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderID
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.ToString
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  isExternal: false
  name: ToString()
  nameWithType: WebPartConnection.ToString()
  fullName: System.Web.UI.WebControls.WebParts.WebPartConnection.ToString()
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.Transformer
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  isExternal: false
  name: Transformer
  nameWithType: WebPartConnection.Transformer
  fullName: System.Web.UI.WebControls.WebParts.WebPartConnection.Transformer
- uid: System.Web.UI.WebControls.WebParts.WebPartTransformer
  parent: System.Web.UI.WebControls.WebParts
  isExternal: false
  name: WebPartTransformer
  nameWithType: WebPartTransformer
  fullName: System.Web.UI.WebControls.WebParts.WebPartTransformer
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.Transformers
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  isExternal: false
  name: Transformers
  nameWithType: WebPartConnection.Transformers
  fullName: System.Web.UI.WebControls.WebParts.WebPartConnection.Transformers
- uid: System.Web.UI.WebControls.WebParts.WebPartTransformerCollection
  parent: System.Web.UI.WebControls.WebParts
  isExternal: false
  name: WebPartTransformerCollection
  nameWithType: WebPartTransformerCollection
  fullName: System.Web.UI.WebControls.WebParts.WebPartTransformerCollection
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.#ctor*
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  isExternal: false
  name: WebPartConnection
  nameWithType: WebPartConnection.WebPartConnection
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.Consumer*
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  isExternal: false
  name: Consumer
  nameWithType: WebPartConnection.Consumer
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPoint*
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  isExternal: false
  name: ConsumerConnectionPoint
  nameWithType: WebPartConnection.ConsumerConnectionPoint
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPointID*
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  isExternal: false
  name: ConsumerConnectionPointID
  nameWithType: WebPartConnection.ConsumerConnectionPointID
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerID*
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  isExternal: false
  name: ConsumerID
  nameWithType: WebPartConnection.ConsumerID
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.ID*
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  isExternal: false
  name: ID
  nameWithType: WebPartConnection.ID
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.IsActive*
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  isExternal: false
  name: IsActive
  nameWithType: WebPartConnection.IsActive
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared*
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  isExternal: false
  name: IsShared
  nameWithType: WebPartConnection.IsShared
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.IsStatic*
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  isExternal: false
  name: IsStatic
  nameWithType: WebPartConnection.IsStatic
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.Provider*
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  isExternal: false
  name: Provider
  nameWithType: WebPartConnection.Provider
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPoint*
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  isExternal: false
  name: ProviderConnectionPoint
  nameWithType: WebPartConnection.ProviderConnectionPoint
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPointID*
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  isExternal: false
  name: ProviderConnectionPointID
  nameWithType: WebPartConnection.ProviderConnectionPointID
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderID*
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  isExternal: false
  name: ProviderID
  nameWithType: WebPartConnection.ProviderID
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.ToString*
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  isExternal: false
  name: ToString
  nameWithType: WebPartConnection.ToString
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.Transformer*
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  isExternal: false
  name: Transformer
  nameWithType: WebPartConnection.Transformer
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.Transformers*
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  isExternal: false
  name: Transformers
  nameWithType: WebPartConnection.Transformers
