### YamlMime:ManagedReference
items:
- uid: Microsoft.VisualBasic.Interaction
  id: Interaction
  children:
  - Microsoft.VisualBasic.Interaction.AppActivate(System.Int32)
  - Microsoft.VisualBasic.Interaction.AppActivate(System.String)
  - Microsoft.VisualBasic.Interaction.Beep
  - Microsoft.VisualBasic.Interaction.CallByName(System.Object,System.String,Microsoft.VisualBasic.CallType,System.Object[])
  - Microsoft.VisualBasic.Interaction.Choose(System.Double,System.Object[])
  - Microsoft.VisualBasic.Interaction.Command
  - Microsoft.VisualBasic.Interaction.CreateObject(System.String,System.String)
  - Microsoft.VisualBasic.Interaction.DeleteSetting(System.String,System.String,System.String)
  - Microsoft.VisualBasic.Interaction.Environ(System.Int32)
  - Microsoft.VisualBasic.Interaction.Environ(System.String)
  - Microsoft.VisualBasic.Interaction.GetAllSettings(System.String,System.String)
  - Microsoft.VisualBasic.Interaction.GetObject(System.String,System.String)
  - Microsoft.VisualBasic.Interaction.GetSetting(System.String,System.String,System.String,System.String)
  - Microsoft.VisualBasic.Interaction.IIf(System.Boolean,System.Object,System.Object)
  - Microsoft.VisualBasic.Interaction.InputBox(System.String,System.String,System.String,System.Int32,System.Int32)
  - Microsoft.VisualBasic.Interaction.MsgBox(System.Object,Microsoft.VisualBasic.MsgBoxStyle,System.Object)
  - Microsoft.VisualBasic.Interaction.Partition(System.Int64,System.Int64,System.Int64,System.Int64)
  - Microsoft.VisualBasic.Interaction.SaveSetting(System.String,System.String,System.String,System.String)
  - Microsoft.VisualBasic.Interaction.Shell(System.String,Microsoft.VisualBasic.AppWinStyle,System.Boolean,System.Int32)
  - Microsoft.VisualBasic.Interaction.Switch(System.Object[])
  langs:
  - csharp
  name: Interaction
  nameWithType: Interaction
  fullName: Microsoft.VisualBasic.Interaction
  type: Class
  summary: "Den <xref uid=&quot;langword_csharp_Interaction&quot; name=&quot;Interaction&quot; href=&quot;&quot;> </xref> modulen innehåller procedurer som används för att interagera med objekt, program och system."
  remarks: "Den här modulen stöder nyckelord i Visual Basic och körningsbibliotek medlemmar som kör andra program, anropa en metod eller egenskap, låter en signal från datorn, ange en kommandoradssträng, ändra COM-objekt och styra dialogrutor."
  example:
  - "The following example uses the `Shell` function to run an application specified by the user. Specifying <xref:Microsoft.VisualBasic.AppWinStyle?displayProperty=fullName> as the second argument opens the application in normal size and gives it the focus.  \n  \n```  \nDim procID As Integer  \n' Run calculator.  \nprocID = Shell(\"C:\\Windows\\system32\\calc.exe\", AppWinStyle.NormalFocus)  \n' The preceding path is for Windows XP.  \n' The Windows 2000 path is C:\\WINNT\\system32\\calc.exe.  \n```"
  syntax:
    content: >-
      [Microsoft.VisualBasic.CompilerServices.StandardModule]

      public sealed class Interaction
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Interaction.AppActivate(System.Int32)
  id: AppActivate(System.Int32)
  parent: Microsoft.VisualBasic.Interaction
  langs:
  - csharp
  name: AppActivate(Int32)
  nameWithType: Interaction.AppActivate(Int32)
  fullName: Microsoft.VisualBasic.Interaction.AppActivate(Int32)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Aktiverar ett program som redan körs."
  remarks: "Du använder `AppActivate` att sätta ett programs aktiva fönstret i fokus. Du kan inte ha en referens eller en referens till det aktiva fönstret eller veta vilket fönster är aktiv vid en given tidpunkt. I så fall kan du inte använda den <xref:System.Windows.Forms.Control.Focus%2A>metoden.</xref:System.Windows.Forms.Control.Focus%2A>       Den `AppActivate` funktionen ändrar fokus till namngivna program eller fönster men påverkar inte om det är maximerat eller minimerat. Fokus flyttas från programfönstret aktiverade när användaren utför en åtgärd som ändrar du fokus eller stänga fönstret. Du kan använda den `Shell` funktionen för att starta ett program och Ställ in fönsterformatet.       Om du använder den `Title` parametern `AppActivate` använder en skiftlägeskänslig jämförelse men annars kräver en exakt matchning med innehållet i namnlisten. Det verkar först via windows på den översta nivån och sedan via underordnade fönster. Om den inte finns en matchning, utlöser den <xref:System.ArgumentException>.</xref:System.ArgumentException>       Du kan använda `AppActivate` endast med processer som äger windows. De flesta konsolprogram inte äger windows, vilket innebär att de inte visas i listan över processer som `AppActivate` sökningar. När du kör från ett konsolprogram systemet skapar en separat process för att köra programmet och returnerar utdata till konsolen processen. Därför när du begär aktuella process-ID kan hämta du process-ID för den här separat process, i stället för den konsolprogram process-ID.       Vid körning av `AppActivate` funktionen aktiverar alla program som körs med ett namn som matchar `Title` eller med process-ID som matchar `ProcessId`. Om det finns ingen exakt matchning, aktiveras alla program som sträng vars namn slutar med `Title`. Om det finns mer än ett program med namnet `Title`, `AppActivate` godtyckligt väljer funktionen en för att aktivera.      > [!NOTE] > Den `AppActivate` funktionen kräver `UIPermission` på den <xref:System.Security.Permissions.UIPermissionWindow>nivå, vilket kan påverka körningen i partiellt förtroende situationer.</xref:System.Security.Permissions.UIPermissionWindow> Mer information finns i <xref:System.Security.Permissions.UIPermission>.</xref:System.Security.Permissions.UIPermission>"
  example:
  - "This example illustrates various uses of the `AppActivate` function to activate an application window. If a Notepad process is not running, the example throws an <xref:System.ArgumentException>. The `Shell` procedure assumes the applications are in the paths specified.  \n  \n [!code-vb[VbVbalrCatRef#11](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._135_1.vb)]"
  syntax:
    content: public static void AppActivate (int ProcessId);
    parameters:
    - id: ProcessId
      type: System.Int32
      description: "<xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;></xref>Ange ett Win32 processen ID-nummer som tilldelats den här processen. Du kan använda det ID som returneras av den <xref:Microsoft.VisualBasic.Interaction.Shell*>, under förutsättning att den inte är noll.</xref:Microsoft.VisualBasic.Interaction.Shell*>"
  overload: Microsoft.VisualBasic.Interaction.AppActivate*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Interaction.AppActivate(System.String)
  id: AppActivate(System.String)
  parent: Microsoft.VisualBasic.Interaction
  langs:
  - csharp
  name: AppActivate(String)
  nameWithType: Interaction.AppActivate(String)
  fullName: Microsoft.VisualBasic.Interaction.AppActivate(String)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Aktiverar ett program som redan körs."
  remarks: "Du använder `AppActivate` att sätta ett programs aktiva fönstret i fokus. Du kan inte ha en referens eller en referens till det aktiva fönstret eller veta vilket fönster är aktiv vid en given tidpunkt. I så fall kan du inte använda den <xref:System.Windows.Forms.Control.Focus%2A>metoden.</xref:System.Windows.Forms.Control.Focus%2A>       Den `AppActivate` funktionen ändrar fokus till namngivna program eller fönster men påverkar inte om det är maximerat eller minimerat. Fokus flyttas från programfönstret aktiverade när användaren utför en åtgärd som ändrar du fokus eller stänga fönstret. Du kan använda den `Shell` funktionen för att starta ett program och Ställ in fönsterformatet.       Om du använder den `Title` parametern `AppActivate` använder en skiftlägeskänslig jämförelse men annars kräver en exakt matchning med innehållet i namnlisten. Det verkar först via windows på den översta nivån och sedan via underordnade fönster. Om den inte finns en matchning, utlöser den <xref:System.ArgumentException>.</xref:System.ArgumentException>       Du kan använda `AppActivate` endast med processer som äger windows. De flesta konsolprogram inte äger windows, vilket innebär att de inte visas i listan över processer som `AppActivate` sökningar. När du kör från ett konsolprogram systemet skapar en separat process för att köra programmet och returnerar utdata till konsolen processen. Därför när du begär aktuella process-ID kan hämta du process-ID för den här separat process, i stället för den konsolprogram process-ID.       Vid körning av `AppActivate` funktionen aktiverar alla program som körs med ett namn som matchar `Title` eller med process-ID som matchar `ProcessId`. Om det finns ingen exakt matchning, aktiveras alla program som sträng vars namn slutar med `Title`. Om det finns mer än ett program med namnet `Title`, `AppActivate` godtyckligt väljer funktionen en för att aktivera.      > [!NOTE] > Den `AppActivate` funktionen kräver `UIPermission` på den <xref:System.Security.Permissions.UIPermissionWindow>nivå, vilket kan påverka körningen i partiellt förtroende situationer.</xref:System.Security.Permissions.UIPermissionWindow> Mer information finns i <xref:System.Security.Permissions.UIPermission>.</xref:System.Security.Permissions.UIPermission>"
  example:
  - "This example illustrates various uses of the `AppActivate` function to activate an application window. If a Notepad process is not running, the example throws an <xref:System.ArgumentException>. The `Shell` procedure assumes the applications are in the paths specified.  \n  \n [!code-vb[VbVbalrCatRef#11](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._229_1.vb)]"
  syntax:
    content: public static void AppActivate (string Title);
    parameters:
    - id: Title
      type: System.String
      description: "<xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>uttryck som anger rubriken i namnlisten i programmet som du vill aktivera. Du kan använda den rubrik som tilldelats programmet när den har startats."
  overload: Microsoft.VisualBasic.Interaction.AppActivate*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Interaction.Beep
  id: Beep
  parent: Microsoft.VisualBasic.Interaction
  langs:
  - csharp
  name: Beep()
  nameWithType: Interaction.Beep()
  fullName: Microsoft.VisualBasic.Interaction.Beep()
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Låter en ton i datorns högtalaren."
  remarks: "Breddsteg och varaktighet för signal beror på din maskin- och programvara och därför kan variera mellan datorer.      > [!NOTE] > Den `Beep` funktionen kräver `UIPermission` på den <xref:System.Security.Permissions.UIPermissionWindow>nivå, vilket kan påverka körningen i partiellt förtroende situationer.</xref:System.Security.Permissions.UIPermissionWindow> Mer information finns i <xref:System.Security.Permissions.UIPermission>.</xref:System.Security.Permissions.UIPermission>"
  example:
  - "This example uses the `Beep` function to sound a tone through the computer's speaker.  \n  \n [!code-vb[VbVbalrCatRef#59](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._129_1.vb)]"
  syntax:
    content: public static void Beep ();
    parameters: []
  overload: Microsoft.VisualBasic.Interaction.Beep*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Interaction.CallByName(System.Object,System.String,Microsoft.VisualBasic.CallType,System.Object[])
  id: CallByName(System.Object,System.String,Microsoft.VisualBasic.CallType,System.Object[])
  parent: Microsoft.VisualBasic.Interaction
  langs:
  - csharp
  name: CallByName(Object,String,CallType,Object[])
  nameWithType: Interaction.CallByName(Object,String,CallType,Object[])
  fullName: Microsoft.VisualBasic.Interaction.CallByName(Object,String,CallType,Object[])
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Kör en metod för ett objekt eller anger eller returnerar en egenskap för ett objekt."
  remarks: "Den `CallByName` funktionen används vid körning för att hämta en egenskap, ange en egenskap eller anropa en metod."
  example:
  - "In the following example, the first line uses `CallByName` to set the `Text` property of a text box, the second line retrieves the value of the `Text` property, and the third line invokes the `Move` method to move the text box.  \n  \n [!code-vb[VbVbalrFunctions#99](~/add/codesnippet/visualbasic/4d9384f0-535e-442c-920a-_1.vb)]  \n  \n [!code-vb[VbVbalrFunctions#20](~/add/codesnippet/visualbasic/4d9384f0-535e-442c-920a-_2.vb)]  \n  \n The next example uses the `CallByName` function to invoke the `Add` and `Item` methods of a collection object.  \n  \n [!code-vb[VbVbalrFunctions#21](~/add/codesnippet/visualbasic/4d9384f0-535e-442c-920a-_3.vb)]"
  syntax:
    content: public static object CallByName (object ObjectRef, string ProcName, Microsoft.VisualBasic.CallType UseCallType, object[] Args);
    parameters:
    - id: ObjectRef
      type: System.Object
      description: "Obligatoriskt. <xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;></xref>. En pekare till objektet exponera egenskapen eller metoden."
    - id: ProcName
      type: System.String
      description: "Obligatoriskt. <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>. Ett stränguttryck som innehåller namnet på egenskapen eller metoden i-objektet."
    - id: UseCallType
      type: Microsoft.VisualBasic.CallType
      description: "Obligatoriskt. En uppräkningsmedlem av typen <xref href=&quot;Microsoft.VisualBasic.CallType&quot;> </xref> som representerar typen av proceduren som anropas. The value of <xref uid=&quot;langword_csharp_CallType&quot; name=&quot;CallType&quot; href=&quot;&quot;></xref> can be <xref uid=&quot;langword_csharp_Method&quot; name=&quot;Method&quot; href=&quot;&quot;></xref>, <xref uid=&quot;langword_csharp_Get&quot; name=&quot;Get&quot; href=&quot;&quot;></xref>, or <xref uid=&quot;langword_csharp_Set&quot; name=&quot;Set&quot; href=&quot;&quot;></xref>."
    - id: Args
      type: System.Object[]
      description: "Valfritt. <xref uid=&quot;langword_csharp_ParamArray&quot; name=&quot;ParamArray&quot; href=&quot;&quot;></xref>. En parametermatris som innehåller argument som ska skickas till egenskapen eller metoden anropas."
    return:
      type: System.Object
      description: "Kör en metod för ett objekt eller anger eller returnerar en egenskap för ett objekt."
  overload: Microsoft.VisualBasic.Interaction.CallByName*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Invalid <code>UseCallType</code> value; must be <xref uid=&quot;langword_csharp_Method&quot; name=&quot;Method&quot; href=&quot;&quot;></xref>, <xref uid=&quot;langword_csharp_Get&quot; name=&quot;Get&quot; href=&quot;&quot;></xref>, or <xref uid=&quot;langword_csharp_Set&quot; name=&quot;Set&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Interaction.Choose(System.Double,System.Object[])
  id: Choose(System.Double,System.Object[])
  parent: Microsoft.VisualBasic.Interaction
  langs:
  - csharp
  name: Choose(Double,Object[])
  nameWithType: Interaction.Choose(Double,Object[])
  fullName: Microsoft.VisualBasic.Interaction.Choose(Double,Object[])
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Väljer och returnerar ett värde från en lista över argument."
  remarks: "Den `Choose` funktionen returnerar en medlem av listan över skickade `Choice()`, baserat på värdet för `Index`. Den första medlemmen i listan är markerad när `Index` är 1. Den sista medlemmen i listan är markerad när `Index` är `UBound`(`Choice()`). Om `Index` ligger utanför gränserna, `Choose` returnerar `Nothing`.       Om `Index` är inte ett heltal avrundas till närmaste heltal innan utvärderas.       Du kan använda `Choose` att leta upp ett värde i en lista med alternativ.      > [!NOTE] > Uttrycken i argumentlistan med kan innehålla funktionsanrop. Som en del av förberedelserna argumentlistan för anrop till `Choose`, Visual Basic-kompileraren anropar alla funktioner i varje uttryck. Det innebär att du inte förlita dig på en viss funktion inte anropas om ett annat uttryck är markerad som `Index`."
  example:
  - "This example uses the `Choose` function to display a name in response to an index passed into the procedure in the `Ind` parameter.  \n  \n [!code-vb[VbVbalrFunctions#22](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._248_1.vb)]"
  syntax:
    content: public static object Choose (double Index, object[] Choice);
    parameters:
    - id: Index
      type: System.Double
      description: "Obligatoriskt. <xref uid=&quot;langword_csharp_Double&quot; name=&quot;Double&quot; href=&quot;&quot;></xref>. Numeriska uttryck som resulterar i ett värde mellan 1 och antalet element som skickas i den `Choice` argumentet."
    - id: Choice
      type: System.Object[]
      description: "Obligatoriskt. <xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;></xref>parametermatris. Du kan ange en variabel eller ett uttryck som utvärderas till den <xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;> </xref> datatyp till en lista över <xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;> </xref> variabler eller uttryck avgränsade med kommatecken eller till en endimensionell matris av <xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;> </xref> element."
    return:
      type: System.Object
      description: "Väljer och returnerar ett värde från en lista över argument."
  overload: Microsoft.VisualBasic.Interaction.Choose*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Interaction.Command
  id: Command
  parent: Microsoft.VisualBasic.Interaction
  langs:
  - csharp
  name: Command()
  nameWithType: Interaction.Command()
  fullName: Microsoft.VisualBasic.Interaction.Command()
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Returnerar argumentet del av kommandoraden som används för att starta Visual Basic eller ett körbart program som utvecklats med Visual Basic. Den <xref uid=&quot;langword_csharp_My&quot; name=&quot;My&quot; href=&quot;&quot;> </xref> funktionen ger större produktivitet och prestanda än den <xref uid=&quot;langword_csharp_Command &quot; name=&quot;Command &quot; href=&quot;&quot;> </xref>funktion. Mer information finns i <xref:Microsoft.VisualBasic.ApplicationServices.ConsoleApplicationBase.CommandLineArgs*>.</xref:Microsoft.VisualBasic.ApplicationServices.ConsoleApplicationBase.CommandLineArgs*>"
  remarks: "När argumenten returneras kan du söka efter avgränsare, till exempel blanksteg, bakåt eller vidarebefordra snedstreck, bindestreck och citattecken för att dela eller söksträng för enskilda parametrar.       För program som utvecklats med Visual Basic och kompilerats till en .exe-fil i `Command` returneras alla argument som visas efter namnet på programmet på kommandoraden i det här formuläret: `MyApp(cmdlineargs)`."
  example:
  - "This example uses the `Command` function to return the command-line arguments in an object that contains an array.  \n  \n [!code-vb[VbVbalrCatRef#58](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._185_1.vb)]"
  syntax:
    content: public static string Command ();
    parameters: []
    return:
      type: System.String
      description: "Returnerar argumentet del av kommandoraden som används för att starta Visual Basic eller ett körbart program som utvecklats med Visual Basic.       Den <xref uid=&quot;langword_csharp_My&quot; name=&quot;My&quot; href=&quot;&quot;> </xref> funktionen ger större produktivitet och prestanda än den <xref uid=&quot;langword_csharp_Command &quot; name=&quot;Command &quot; href=&quot;&quot;> </xref>funktion. Mer information finns i <xref:Microsoft.VisualBasic.ApplicationServices.ConsoleApplicationBase.CommandLineArgs*>.</xref:Microsoft.VisualBasic.ApplicationServices.ConsoleApplicationBase.CommandLineArgs*>"
  overload: Microsoft.VisualBasic.Interaction.Command*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Interaction.CreateObject(System.String,System.String)
  id: CreateObject(System.String,System.String)
  parent: Microsoft.VisualBasic.Interaction
  langs:
  - csharp
  name: CreateObject(String,String)
  nameWithType: Interaction.CreateObject(String,String)
  fullName: Microsoft.VisualBasic.Interaction.CreateObject(String,String)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Skapar och returnerar en referens till ett COM-objekt. <xref uid=&quot;langword_csharp_CreateObject&quot; name=&quot;CreateObject&quot; href=&quot;&quot;></xref>Det går inte att användas för att skapa instanser av klasser i Visual Basic om dessa klasser explicit exponeras som COM-komponenter."
  remarks: "To create an instance of a COM component, assign the object returned by `CreateObject` to an object variable:  \n  \n```vb#  \nSub CreateADODB()  \n   Dim adoApp As Object  \n   adoApp = CreateObject(\"ADODB.Connection\")  \nEnd Sub  \n```  \n  \n The type of object variable you use to store the returned object can affect your application's performance. Declaring an object variable with the `As Object` clause creates a variable that can contain a reference to any type of object. However, access to the object through that variable is *late-bound*, that is, the binding occurs when your program runs. There are many reasons you should avoid late binding, including slower application performance.  \n  \n You can create an object variable that results in early binding—that is, binding when the program is compiled. To do so, add a reference to the type library for your object from the **COM** tab of the **Add Reference** dialog box on the **Project** menu. Then declare the object variable of the specific type of your object. In most cases, it is more efficient to use the `Dim` statement and a primary interop assembly to create objects than it is to use the `CreateObject` function.  \n  \n## Interacting with Unmanaged Code  \n Another issue is that COM objects use unmanaged code — code without the benefit of the common language runtime. There is a fair degree of complexity involved in mixing the managed code of Visual Basic with unmanaged code from COM. When you add a reference to a COM object, Visual Basic searches for a primary interop assembly (PIA) for that library; if it finds one, then it uses it. If it does not find a PIA, then it creates an interoperability assembly that contains local interoperability classes for each class in the COM library. For more information, see [COM Interoperability in .NET Framework Applications](~/add/includes/ajax-current-ext-md.md).  \n  \n You should generally use strongly bound objects and primary interop assemblies whenever possible. The examples below use the `CreateObject` function with Microsoft Office objects for demonstration purposes only. However, these objects are easier to use and more reliable when used with the appropriate primary interop assembly.  \n  \n## Creating an Object on a Remote Computer  \n You can create an object on a remote networked computer by passing the name of the computer to the `ServerName` argument of the `CreateObject` function. That name is the same as the Machine Name portion of a share name: for a share named \"\\\\\\MyServer\\Public,\" `ServerName` is \"MyServer.\"  \n  \n> [!NOTE]\n>  Refer to COM documentation (see Microsoft Developer Network) for additional information on making an application accessible on a remote networked computer. You may need to add a registry key for your application.  \n  \n The following code returns the version number of an instance of Excel running on a remote computer named `MyServer`:  \n  \n```vb#  \nSub CreateRemoteExcelObj()  \n    Dim xlApp As Object  \n    ' Replace string \"\\\\MyServer\" with name of the remote computer.  \n    xlApp = CreateObject(\"Excel.Application\", \"\\\\MyServer\")  \n    MsgBox(xlApp.Version)  \nEnd Sub  \n```  \n  \n If the remote server name is incorrect, or if it is unavailable, a run-time error occurs.  \n  \n> [!NOTE]\n>  Use `CreateObject` when there is no current instance of the object. If an instance of the object is already running, a new instance is started, and an object of the specified type is created. To use the current instance, or to start the application and have it load a file, use the `GetObject` function. If an object has registered itself as a single-instance object, only one instance of the object is created, no matter how many times `CreateObject` is executed.  \n  \n## Creating Framework Objects  \n You can use the `CreateObject` function only to create a COM object. While there is no exact equivalent mechanism for creating a .NET Framework object, the <xref:System.Activator> in the <xref:System> namespace contains methods to create local or remote objects. In particular, the <xref:System.Activator.CreateInstance%2A> method or the <xref:System.Activator.CreateInstanceFrom%2A> method might be useful.  \n  \n> [!IMPORTANT]\n>  The `CreateObject` function requires unmanaged code permission, which might affect its execution in partial-trust situations. For more information, see <xref:System.Security.Permissions.SecurityPermission> and [Code Access Permissions](http://msdn.microsoft.com/en-us/e5ae402f-6dda-4732-bbe8-77296630f675)."
  example:
  - "The following example uses the `CreateObject` function to create a Microsoft Excel worksheet and saves the worksheet to a file. To use this example, Excel must be installed on the computer where this program runs. Also, you must add a reference to the type library from the **COM** tab of the **Add Reference** dialog box on the **Project** menu. The name of the type library varies depending on the version of Excel installed on your computer. For example, the type library for Microsoft Excel 2002 is named **Microsoft Excel 10.0 Object Library**.  \n  \n [!code-vb[VbVbalrExcelObject#1](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._59_1.vb)]"
  syntax:
    content: public static object CreateObject (string ProgId, string ServerName = "");
    parameters:
    - id: ProgId
      type: System.String
      description: "Obligatoriskt. <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>. Program-ID för objektet skapa."
    - id: ServerName
      type: System.String
      description: "Valfritt. <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>. Namnet på servern där objektet skapas. Om `ServerName` är en tom sträng (&quot;&quot;), används den lokala datorn."
    return:
      type: System.Object
      description: "Skapar och returnerar en referens till ett COM-objekt. <xref uid=&quot;langword_csharp_CreateObject&quot; name=&quot;CreateObject&quot; href=&quot;&quot;></xref>Det går inte att användas för att skapa instanser av klasser i Visual Basic om dessa klasser explicit exponeras som COM-komponenter."
  overload: Microsoft.VisualBasic.Interaction.CreateObject*
  exceptions:
  - type: System.Exception
    commentId: T:System.Exception
    description: "Servern är inte tillgänglig"
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "Det finns inget objekt av den angivna typen"
  platform:
  - net462
- uid: Microsoft.VisualBasic.Interaction.DeleteSetting(System.String,System.String,System.String)
  id: DeleteSetting(System.String,System.String,System.String)
  parent: Microsoft.VisualBasic.Interaction
  langs:
  - csharp
  name: DeleteSetting(String,String,String)
  nameWithType: Interaction.DeleteSetting(String,String,String)
  fullName: Microsoft.VisualBasic.Interaction.DeleteSetting(String,String,String)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Tar bort ett avsnitt eller en inställning från ett program som anges i Windows-registret. Den <xref uid=&quot;langword_csharp_My&quot; name=&quot;My&quot; href=&quot;&quot;> </xref> funktionen ger dig större produktivitet och prestanda i registret åtgärder än den <xref uid=&quot;langword_csharp_DeleteSetting &quot; name=&quot;DeleteSetting &quot; href=&quot;&quot;> </xref>funktion. Mer information finns i <xref:Microsoft.VisualBasic.Devices.ServerComputer.Registry*>.</xref:Microsoft.VisualBasic.Devices.ServerComputer.Registry*>"
  remarks: "If all arguments are provided, the specified setting is deleted. A run-time error occurs if you attempt to use `DeleteSetting` on a nonexistent section or key setting.  \n  \n `DeleteSetting` requires that a user be logged on since it operates under the `HKEY_LOCAL_USER` registry key, which is not active until a user logs on interactively.  \n  \n Registry settings that are to be accessed from a non-interactive process (such as Mtx.exe) should be stored under either the `HKEY_LOCAL_MACHINE\\Software\\` or the `HKEY_USER\\DEFAULT\\Software` registry keys."
  example:
  - "The following example first uses the `SaveSetting` procedure to make entries in the Windows registry for the `MyApp` application, and then uses the `DeleteSetting` function to remove them. Because no `Key` argument is specified, the whole `Startup` section is deleted, including the section name and all of its keys.  \n  \n [!code-vb[VbVbalrCatRef#45](~/add/codesnippet/visualbasic/e195f0a5-815a-4af5-b672-_1.vb)]"
  syntax:
    content: public static void DeleteSetting (string AppName, string Section = null, string Key = null);
    parameters:
    - id: AppName
      type: System.String
      description: "Obligatoriskt. <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>uttryck som innehåller namnet på det program eller projekt som inställningen gäller för."
    - id: Section
      type: System.String
      description: "Obligatoriskt. <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>uttryck som innehåller namnet på avsnittet som inställningen tas bort. Om endast `AppName` och `Section` finns angivna i det angivna avsnittet tas bort tillsammans med alla inställningar."
    - id: Key
      type: System.String
      description: "Valfritt. <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>uttryck som innehåller namnet på inställningen tas bort."
  overload: Microsoft.VisualBasic.Interaction.DeleteSetting*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Användaren är inte inloggad."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Interaction.Environ(System.Int32)
  id: Environ(System.Int32)
  parent: Microsoft.VisualBasic.Interaction
  langs:
  - csharp
  name: Environ(Int32)
  nameWithType: Interaction.Environ(Int32)
  fullName: Microsoft.VisualBasic.Interaction.Environ(Int32)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Returnerar strängen som är kopplad till en miljövariabel med operativsystemet."
  remarks: "Om `Expression` innehåller en sträng i <xref:Microsoft.VisualBasic.Interaction.Environ%2A>funktionen returnerar text som tilldelats till den angivna miljö strängen – det vill säga texten efter likhetstecken (=) i tabellen miljö-sträng för att miljövariabeln.</xref:Microsoft.VisualBasic.Interaction.Environ%2A> Om strängen i `Expression` kan inte hittas i tabellen miljö-sträng, en tom sträng (&quot;&quot;) returneras.       Om `Expression` innehåller ett heltal, sträng använder numeriska position i tabellen miljö sträng returneras. I det här fallet <xref:Microsoft.VisualBasic.Interaction.Environ%2A>Returnerar all text, inklusive namnet på miljövariabeln.</xref:Microsoft.VisualBasic.Interaction.Environ%2A> Om det inte finns i den angivna positionen, <xref:Microsoft.VisualBasic.Interaction.Environ%2A>returnerar en sträng med längden noll.</xref:Microsoft.VisualBasic.Interaction.Environ%2A>      > [!IMPORTANT] > Den <xref:Microsoft.VisualBasic.Interaction.Environ%2A>funktionen kräver miljö behörighet, vilket kan påverka körningen i partiellt förtroende situationer.</xref:Microsoft.VisualBasic.Interaction.Environ%2A> Mer information finns i <xref:System.Security.Permissions.SecurityPermission>och [kod åtkomstbehörigheter](http://msdn.microsoft.com/en-us/e5ae402f-6dda-4732-bbe8-77296630f675).</xref:System.Security.Permissions.SecurityPermission>"
  example:
  - "This example uses the <xref:Microsoft.VisualBasic.Interaction.Environ%2A> function to supply the entry number and length of the `PATH` statement from the environment-string table.  \n  \n [!code-vb[VbVbalrCatRef#28](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._74_1.vb)]"
  syntax:
    content: public static string Environ (int Expression);
    parameters:
    - id: Expression
      type: System.Int32
      description: "Obligatoriskt. Uttryck som utvärderas antingen en sträng som innehåller namnet på en miljövariabel eller ett heltal som motsvarar en miljö sträng i tabellen miljö sträng numerisk ordning."
    return:
      type: System.String
      description: "Returnerar strängen som är kopplad till en miljövariabel med operativsystemet."
  overload: Microsoft.VisualBasic.Interaction.Environ*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>Expression</code>saknas."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Interaction.Environ(System.String)
  id: Environ(System.String)
  parent: Microsoft.VisualBasic.Interaction
  langs:
  - csharp
  name: Environ(String)
  nameWithType: Interaction.Environ(String)
  fullName: Microsoft.VisualBasic.Interaction.Environ(String)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Returnerar strängen som är kopplad till en miljövariabel med operativsystemet."
  remarks: "Om `Expression` innehåller en sträng, Environ funktionen returnerar text som tilldelats till den angivna miljö strängen – det vill säga texten efter likhetstecken (=) i tabellen miljö-sträng för att miljövariabeln. Om strängen i `Expression` kan inte hittas i tabellen miljö-sträng, en tom sträng (&quot;&quot;) returneras.       Om `Expression` innehåller ett heltal, sträng använder numeriska position i tabellen miljö sträng returneras. I det här fallet returnerar Environ all text, inklusive namnet på miljövariabeln. Om det inte finns i den angivna positionen, returnerar Environ en sträng med längden noll.      > [!IMPORTANT] > I miljön funktionen kräver miljö behörighet, vilket kan påverka körningen i partiellt förtroende situationer. Mer information finns i <xref:System.Security.Permissions.SecurityPermission>och [kod åtkomstbehörigheter](http://msdn.microsoft.com/en-us/e5ae402f-6dda-4732-bbe8-77296630f675).</xref:System.Security.Permissions.SecurityPermission>"
  example:
  - "This example uses the Environ function to supply the entry number and length of the `PATH` statement from the environment-string table.  \n  \n [!code-vb[VbVbalrCatRef#28](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._35_1.vb)]"
  syntax:
    content: public static string Environ (string Expression);
    parameters:
    - id: Expression
      type: System.String
      description: "Obligatoriskt. Uttryck som utvärderas antingen en sträng som innehåller namnet på en miljövariabel eller ett heltal som motsvarar en miljö sträng i tabellen miljö sträng numerisk ordning."
    return:
      type: System.String
      description: "Returnerar strängen som är kopplad till en miljövariabel med operativsystemet."
  overload: Microsoft.VisualBasic.Interaction.Environ*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>Expression</code>saknas."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Interaction.GetAllSettings(System.String,System.String)
  id: GetAllSettings(System.String,System.String)
  parent: Microsoft.VisualBasic.Interaction
  langs:
  - csharp
  name: GetAllSettings(String,String)
  nameWithType: Interaction.GetAllSettings(String,String)
  fullName: Microsoft.VisualBasic.Interaction.GetAllSettings(String,String)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Returnerar en lista över inställningar och deras respektive värden (ursprungligen skapades med <xref uid=&quot;langword_csharp_SaveSetting&quot; name=&quot;SaveSetting&quot; href=&quot;&quot;> </xref>) från ett program som anges i Windows-registret. Med hjälp av den <xref uid=&quot;langword_csharp_My&quot; name=&quot;My&quot; href=&quot;&quot;> </xref> funktionen ger dig större produktivitet och prestanda i registret åtgärder än <xref uid=&quot;langword_csharp_GetAllSettings&quot; name=&quot;GetAllSettings&quot; href=&quot;&quot;> </xref>. Mer information finns i <xref:Microsoft.VisualBasic.Devices.ServerComputer.Registry*>.</xref:Microsoft.VisualBasic.Devices.ServerComputer.Registry*>"
  remarks: "`GetAllSettings` returns an uninitialized `Object` if either `AppName` or `Section` does not exist.  \n  \n Because it operates under the `HKEY_LOCAL_USER` registry key, which is not active until a user logs on interactively, `GetAllSettings` requires that a user be logged on.  \n  \n Registry settings that are to be accessed from a non-interactive process (such as Mtx.exe) should be stored under either the `HKEY_LOCAL_MACHINE\\Software\\` or the `HKEY_USER\\DEFAULT\\Software` registry keys."
  example:
  - "This example first uses the `SaveSetting` function to make entries in the Windows registry for the application specified as `AppName`, then uses the `GetAllSettings` function to display the settings. Note that application names and `Section` names cannot be retrieved with `GetAllSettings`. Finally, the `DeleteSetting` function removes the application's entries.  \n  \n [!code-vb[VbVbalrCatRef#68](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._40_1.vb)]"
  syntax:
    content: public static string[,] GetAllSettings (string AppName, string Section);
    parameters:
    - id: AppName
      type: System.String
      description: "Obligatoriskt. <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>uttryck som innehåller namnet på det program eller projekt vars inställningar ska hämtas."
    - id: Section
      type: System.String
      description: "Obligatoriskt. <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>uttryck som innehåller namnet på avsnittet vars inställningar ska hämtas. <xref uid=&quot;langword_csharp_GetAllSettings&quot; name=&quot;GetAllSettings&quot; href=&quot;&quot;></xref>Returnerar ett objekt som innehåller en tvådimensionell matris med strängar. Strängarna som innehåller inställningarna som är viktiga för i det angivna avsnittet plus motsvarande värden."
    return:
      type: System.String[,]
      description: "Returnerar en lista över inställningar och deras respektive värden (ursprungligen skapades med <xref uid=&quot;langword_csharp_SaveSetting&quot; name=&quot;SaveSetting&quot; href=&quot;&quot;> </xref>) från ett program som anges i Windows-registret.       Med hjälp av den <xref uid=&quot;langword_csharp_My&quot; name=&quot;My&quot; href=&quot;&quot;> </xref> funktionen ger dig större produktivitet och prestanda i registret åtgärder än <xref uid=&quot;langword_csharp_GetAllSettings&quot; name=&quot;GetAllSettings&quot; href=&quot;&quot;> </xref>. Mer information finns i <xref:Microsoft.VisualBasic.Devices.ServerComputer.Registry*>.</xref:Microsoft.VisualBasic.Devices.ServerComputer.Registry*>"
  overload: Microsoft.VisualBasic.Interaction.GetAllSettings*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Användaren är inte inloggad."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Interaction.GetObject(System.String,System.String)
  id: GetObject(System.String,System.String)
  parent: Microsoft.VisualBasic.Interaction
  langs:
  - csharp
  name: GetObject(String,String)
  nameWithType: Interaction.GetObject(String,String)
  fullName: Microsoft.VisualBasic.Interaction.GetObject(String,String)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Returnerar en referens till ett objekt som tillhandahålls av en COM-komponent."
  remarks: "Use the `GetObject` function to load an instance of a COM component from a file. The following example illustrates this.  \n  \n```vb#  \nDim CADObject As Object  \nCADObject = GetObject(\"C:\\CAD\\schema.cad\")  \n```  \n  \n When this code runs, the application associated with the specified `PathName` is started and the object in the specified file is activated.  \n  \n## Default Cases  \n If `PathName` is a zero-length string (`\"\"`), `GetObject` returns a new object instance of the specified class type. If the `PathName` argument is omitted, `GetObject` returns a currently active object of the class type specified in `Class`. If no object of the specified type exists, an error occurs.  \n  \n## Accessing a Subobject  \n Some applications allow you to activate a subobject associated with a file. To do this, add an exclamation point (`!`) to the end of the file name and follow it with a string that identifies the part of the file you want to activate. For information on how to create this string, see the documentation for the application that created the object.  \n  \n For example, in a drawing application you might have multiple layers to a drawing stored in a file. You could use the following code to activate a layer within a drawing called `schema.cad`.  \n  \n```vb#  \nlayerObject = GetObject(\"C:\\CAD\\schema.cad!Layer3\")  \n```  \n  \n## Specifying a Class  \n If you do not specify the object's `Class`, Automation determines the application to start and the object to activate, based on the file name you provide. Some files, however, can support more than one class of object. For example, a drawing might support three different types of objects: an `Application` object, a `Drawing` object, and a `Toolbar` object, all of which are part of the same file. To specify which object in a file you want to activate, use the optional `Class` argument. The following example illustrates this.  \n  \n```vb#  \nDim drawObj As Object  \ndrawObj = GetObject(\"C:\\Drawings\\sample.drw\", \"Figment.Drawing\")  \n```  \n  \n In the preceding example, `Figment` is the name of a drawing application and `Drawing` is one of the object types it supports.  \n  \n## Using the Object  \n Once an object is activated, you refer to it in code using the object variable you declared. In the preceding example, you access properties and methods of the new object using the object variable `drawObj`. The following example illustrates this.  \n  \n```vb#  \ndrawObj.Line(9, 90)  \ndrawObj.InsertText(9, 100, \"Hello, world.\")  \ndrawObj.SaveAs(\"C:\\Drawings\\sample.drw\")  \n```  \n  \n> [!NOTE]\n>  Use the `GetObject` function when there is a current instance of the object or if you want to create the object with a file loaded. If there is no current instance, and you do not want the object started with a file loaded, use the <xref:Microsoft.VisualBasic.Interaction.CreateObject%2A> function.  \n>   \n>  If an object has registered itself as an ActiveX single-instance object, only one instance of the object is created, no matter how many times `CreateObject` is called. With a single-instance object, `GetObject` always returns the same instance when called with the zero-length string (`\"\"`) syntax, and it causes an error if the `PathName` argument is omitted. You cannot use `GetObject` to obtain a reference to a class created with Visual Basic.  \n  \n> [!IMPORTANT]\n>  The `GetObject` function requires unmanaged code permission, which might affect its execution in partial-trust situations. For more information, see <xref:System.Security.Permissions.SecurityPermission> and [Code Access Permissions](http://msdn.microsoft.com/en-us/e5ae402f-6dda-4732-bbe8-77296630f675)."
  example:
  - "The following example uses the `GetObject` function to obtain a reference to a specific Microsoft Excel worksheet (`excelObj`). It uses the worksheet's `Application` property to make Excel visible, to close it, and to perform other actions. Using two API calls, the `detectExcel` procedure looks for Excel, and if it is running, enters it in the Running Object table. The first call to `GetObject` causes an error if Excel is not already running, which in this example causes the `excelWasNotRunning` flag to be set to `True`. The second call to `GetObject` specifies a file to open. If Excel is not already running, the second call starts it and returns a reference to the worksheet represented by the specified file, `test.xls`. The file must exist in the specified location; otherwise, Visual Basic throws a <xref:System.IO.FileNotFoundException>. Next, the example code makes both Excel and the window containing the specified worksheet visible.  \n  \n This example requires `Option Strict Off` because it uses late binding, where objects are assigned to variables of type `Object`. You can specify `Option Strict On` and declare objects of specific object types if you add a reference to the Excel type library from the **COM** tab of the **Add Reference** dialog box of the **Project** menu in Visual Studio.  \n  \n [!code-vb[VbVbalrExcelObject#2](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._196_1.vb)]  \n  \n [!code-vb[VbVbalrExcelObject#4](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._196_2.vb)]  \n  \n [!code-vb[VbVbalrExcelObject#5](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._196_3.vb)]  \n  \n When you call the `getExcel` function, a check is made to see if Excel is already running. If it is not, then an instance is created.  \n  \n> [!IMPORTANT]\n>  For simplicity, the preceding example assumes that any window called `XLMAIN` belongs to an instance of Microsoft Excel. If another object, possibly launched by illicit tampering, created a window with that name, it would receive all the messages you intended for Excel. In an application to be used for production, you should include some more rigorous testing to verify that `XLMAIN` really belongs to Excel."
  syntax:
    content: public static object GetObject (string PathName = null, string Class = null);
    parameters:
    - id: PathName
      type: System.String
      description: "Valfritt. <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>. Den fullständiga sökvägen och namnet på den fil som innehåller objektet som ska hämtas. Om `PathName` utelämnas `Class` krävs."
    - id: Class
      type: System.String
      description: "Krävs om `PathName` har inte angetts. <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>. En sträng som representerar klassen för objektet. Den `Class` argumentet har följande syntax och delar: `appname` `.` `objecttype` [1 |&1;] parametern [1 |&2;] beskrivning [2 |&1;] `appname` [2 |&2;] krävs. <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>. Namnet på programmet att tillhandahålla objektet.       [3 |&1;] `objecttype` [3 |&2;] krävs. <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>. Den typ eller klass med objekt som du skapar."
    return:
      type: System.Object
      description: "Returnerar en referens till ett objekt som tillhandahålls av en COM-komponent."
  overload: Microsoft.VisualBasic.Interaction.GetObject*
  exceptions:
  - type: System.Exception
    commentId: T:System.Exception
    description: "Det finns inga objekt av typen för den angivna klassen."
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "Det finns inget objekt med den angivna sökväg och filnamnet."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Interaction.GetSetting(System.String,System.String,System.String,System.String)
  id: GetSetting(System.String,System.String,System.String,System.String)
  parent: Microsoft.VisualBasic.Interaction
  langs:
  - csharp
  name: GetSetting(String,String,String,String)
  nameWithType: Interaction.GetSetting(String,String,String,String)
  fullName: Microsoft.VisualBasic.Interaction.GetSetting(String,String,String,String)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Returnerar en inställning från ett program som anges i Windows-registret. Den <xref uid=&quot;langword_csharp_My&quot; name=&quot;My&quot; href=&quot;&quot;> </xref> funktionen ger dig större produktivitet och prestanda i registret åtgärder än <xref uid=&quot;langword_csharp_GetAllSettings&quot; name=&quot;GetAllSettings&quot; href=&quot;&quot;> </xref>. Mer information finns i <xref:Microsoft.VisualBasic.Devices.ServerComputer.Registry*>.</xref:Microsoft.VisualBasic.Devices.ServerComputer.Registry*>"
  remarks: "If any of the items named in the `GetSetting` arguments do not exist, `GetSetting` returns a value of `Default`.  \n  \n Because it operates under the `HKEY_LOCAL_USER` registry key, which is not active until a user logs on interactively, `GetSetting` requires that a user be logged on.  \n  \n Registry settings that are to be accessed from a non-interactive process (such as Mtx.exe) should be stored under either the `HKEY_LOCAL_MACHINE\\Software\\` or the `HKEY_USER\\DEFAULT\\Software` registry keys.  \n  \n `GetSetting` requires `Read`<xref:System.Security.Permissions.RegistryPermission> ."
  example:
  - "This example first uses the `SaveSetting` function to make entries in the Windows registry for the application specified as `AppName`, and then uses the `GetSetting` function to display one of the settings. Because the `Default` argument is specified, some value is guaranteed to be returned. Notice that `Section` names cannot be retrieved with `GetSetting`. Finally, the `DeleteSetting` function removes all the application's entries.  \n  \n [!code-vb[VbVbalrCatRef#61](~/add/codesnippet/visualbasic/1601a1b5-4317-44fc-9f01-_1.vb)]"
  syntax:
    content: public static string GetSetting (string AppName, string Section, string Key, string Default = "");
    parameters:
    - id: AppName
      type: System.String
      description: "Obligatoriskt. <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>uttryck som innehåller namnet på det program eller projekt vars inställningar ska hämtas."
    - id: Section
      type: System.String
      description: "Obligatoriskt. <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>uttryck som innehåller namnet på avsnittet där inställningen hittas."
    - id: Key
      type: System.String
      description: "Obligatoriskt. <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>uttryck som innehåller namnet på inställningen som ska hämtas."
    - id: Default
      type: System.String
      description: "Valfritt. Uttryck som innehåller värden som ska returneras om inget värde har angetts den `Key` inställningen. Om det utelämnas används `Default` antas vara en tom sträng (&quot;&quot;)."
    return:
      type: System.String
      description: "Returnerar en inställning från ett program som anges i Windows-registret.       Den <xref uid=&quot;langword_csharp_My&quot; name=&quot;My&quot; href=&quot;&quot;> </xref> funktionen ger dig större produktivitet och prestanda i registret åtgärder än <xref uid=&quot;langword_csharp_GetAllSettings&quot; name=&quot;GetAllSettings&quot; href=&quot;&quot;> </xref>."
  overload: Microsoft.VisualBasic.Interaction.GetSetting*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "En eller flera argument är inte <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> uttryck eller användaren inte har loggat in."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Interaction.IIf(System.Boolean,System.Object,System.Object)
  id: IIf(System.Boolean,System.Object,System.Object)
  parent: Microsoft.VisualBasic.Interaction
  langs:
  - csharp
  name: IIf(Boolean,Object,Object)
  nameWithType: Interaction.IIf(Boolean,Object,Object)
  fullName: Microsoft.VisualBasic.Interaction.IIf(Boolean,Object,Object)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Returnerar ett av två objekt, beroende på utvärderingen av ett uttryck."
  remarks: 'Den `IIf` funktionen innehåller en motsvarighet för Ternär [villkorsstyrd operatör:?:](~/add/includes/ajax-current-ext-md.md) i Visual C++.'
  example:
  - "This example uses the `IIf` function to evaluate the `testMe` parameter of the `checkIt` procedure and returns the word \"Large\" if the amount is greater than 1000; otherwise, it returns the word \"Small\".  \n  \n [!code-vb[VbVbalrFunctions#33](~/add/codesnippet/visualbasic/296aac5d-5997-4225-8ac0-_1.vb)]  \n  \n Note that if `Option Strict` is `On`, you must use the `CStr` keyword to explicitly convert the return from `Object` to `String`."
  syntax:
    content: public static object IIf (bool Expression, object TruePart, object FalsePart);
    parameters:
    - id: Expression
      type: System.Boolean
      description: "Obligatoriskt. <xref uid=&quot;langword_csharp_Boolean&quot; name=&quot;Boolean&quot; href=&quot;&quot;></xref>. Det uttryck som du vill utvärdera."
    - id: TruePart
      type: System.Object
      description: "Obligatoriskt. <xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;></xref>. Returneras om `Expression` utvärderas till <xref uid=&quot;langword_csharp_True&quot; name=&quot;True&quot; href=&quot;&quot;> </xref>."
    - id: FalsePart
      type: System.Object
      description: "Obligatoriskt. <xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;></xref>. Returneras om `Expression` utvärderas till <xref uid=&quot;langword_csharp_False&quot; name=&quot;False&quot; href=&quot;&quot;> </xref>."
    return:
      type: System.Object
      description: "Returnerar ett av två objekt, beroende på utvärderingen av ett uttryck."
  overload: Microsoft.VisualBasic.Interaction.IIf*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Interaction.InputBox(System.String,System.String,System.String,System.Int32,System.Int32)
  id: InputBox(System.String,System.String,System.String,System.Int32,System.Int32)
  parent: Microsoft.VisualBasic.Interaction
  langs:
  - csharp
  name: InputBox(String,String,String,Int32,Int32)
  nameWithType: Interaction.InputBox(String,String,String,Int32,Int32)
  fullName: Microsoft.VisualBasic.Interaction.InputBox(String,String,String,Int32,Int32)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Visar ett meddelande i en dialogruta där användaren att skriva in text eller klicka på knappen och returnerar en sträng som innehåller innehållet i textrutan."
  remarks: "Om användaren klickar på **Avbryt**, returneras en tom sträng.       Om du vill ange fler än det första argumentet, måste du använda den `InputBox` funktion i ett uttryck. Om du utelämnar namngivna argument, måste du behålla motsvarande kommaavgränsare.      > [!NOTE] > Den `InputBox` funktionen kräver `UIPermission` på den <xref:System.Security.Permissions.UIPermissionWindow>nivå, vilket kan påverka körningen i partiellt förtroende situationer.</xref:System.Security.Permissions.UIPermissionWindow> Mer information, se och <xref:System.Security.Permissions.UIPermission>.</xref:System.Security.Permissions.UIPermission>"
  example:
  - "This example shows various ways to use the `InputBox` function to prompt the user to enter a value. If the x and y positions are omitted, the dialog box is automatically centered for the respective axes. The variable `MyValue` contains the value entered by the user if the user clicks OK or presses the ENTER key.  \n  \n [!code-vb[VbVbalrCatRef#67](~/add/codesnippet/visualbasic/e8c4ff4e-3901-4354-99c7-_1.vb)]"
  syntax:
    content: public static string InputBox (string Prompt, string Title = "", string DefaultResponse = "", int XPos = -1, int YPos = -1);
    parameters:
    - id: Prompt
      type: System.String
      description: "Krävs <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> uttryck som visas som meddelandet i dialogrutan. Den maximala längden på `Prompt` är cirka 1 024 tecken, beroende på bredden på de tecken som används. Om `Prompt` består av fler än en rad kan du avgränsa raderna med en vagnretur (<xref uid=&quot;langword_csharp_Chr(&quot; name=&quot;Chr(&quot; href=&quot;&quot;></xref>13<xref uid=&quot;langword_csharp_)&quot; name=&quot;)&quot; href=&quot;&quot;></xref>), ett tecken för radmatning (<xref uid=&quot;langword_csharp_Chr(&quot; name=&quot;Chr(&quot; href=&quot;&quot;></xref>10<xref uid=&quot;langword_csharp_)&quot; name=&quot;)&quot; href=&quot;&quot;></xref>), eller en transport radmatningstecken kombination (<xref uid=&quot;langword_csharp_Chr(&quot; name=&quot;Chr(&quot; href=&quot;&quot;></xref>13<xref uid=&quot;langword_csharp_)&quot; name=&quot;)&quot; href=&quot;&quot;> </xref> &amp; <xref uid=&quot;langword_csharp_Chr(&quot; name=&quot;Chr(&quot; href=&quot;&quot;> </xref>10<xref uid=&quot;langword_csharp_)&quot; name=&quot;)&quot; href=&quot;&quot;></xref>) mellan varje rad."
    - id: Title
      type: System.String
      description: "Valfritt. <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>uttryck som visas i namnlisten i dialogrutan. Om du utelämnar `Title`, programnamnet är placerad i namnlisten."
    - id: DefaultResponse
      type: System.String
      description: "Valfritt. <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>uttryck som visas i textrutan som standard svaret om inte annat anges. Om du utelämnar `DefaultResponse`, visas rutan är tom."
    - id: XPos
      type: System.Int32
      description: "Valfritt. Numeriskt uttryck som anger i twip avståndet i den vänstra kanten på dialogrutan från den vänstra kanten av skärmen. Om du utelämnar `XPos`, dialogrutan centreras vågrätt."
    - id: YPos
      type: System.Int32
      description: "Valfritt. Numeriskt uttryck som anger i twip avståndet mellan upp på skärmen övre kant. Om du utelämnar `YPos`, dialogrutan placeras lodrätt ungefär en tredjedel av sättet på skärmen."
    return:
      type: System.String
      description: "Visar ett meddelande i en dialogruta där användaren att skriva in text eller klicka på knappen och returnerar en sträng som innehåller innehållet i textrutan."
  overload: Microsoft.VisualBasic.Interaction.InputBox*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Interaction.MsgBox(System.Object,Microsoft.VisualBasic.MsgBoxStyle,System.Object)
  id: MsgBox(System.Object,Microsoft.VisualBasic.MsgBoxStyle,System.Object)
  parent: Microsoft.VisualBasic.Interaction
  langs:
  - csharp
  name: MsgBox(Object,MsgBoxStyle,Object)
  nameWithType: Interaction.MsgBox(Object,MsgBoxStyle,Object)
  fullName: Microsoft.VisualBasic.Interaction.MsgBox(Object,MsgBoxStyle,Object)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Visar ett meddelande i en dialogruta, väntar på att användaren klickar på en knapp och returnerar ett heltal som anger vilken knapp som användaren klickat på."
  remarks: "Om du utelämnar namngivna argument, måste du behålla motsvarande kommaavgränsare.       Om dialogrutan visar en **Avbryt** knappen, trycka på ESC har samma effekt som att klicka på **Avbryt** om dialogrutan innehåller en **hjälp** knappen tillhandahålls sammanhangsberoende hjälp för dialogrutan. Inget värde returneras tills ett av de andra knapparna väljs. I formuläret för Windows-program, väljer den **hjälp** knappen Kör den <xref:System.Windows.Forms.Control.HelpRequested>händelse för formuläret.</xref:System.Windows.Forms.Control.HelpRequested>      > [!NOTE] > Den `MsgBox` funktionen kräver `UIPermission` på den <xref:System.Security.Permissions.UIPermissionWindow>nivå, vilket kan påverka körningen i partiellt förtroende situationer.</xref:System.Security.Permissions.UIPermissionWindow> Mer information finns i <xref:System.Security.Permissions.UIPermission>.</xref:System.Security.Permissions.UIPermission>       Den `MsgBoxStyle` uppräkningsvärden visas i följande tabell.      ||||   |-|-|-|   | Medlemmen | Värdet | Beskrivning |   | `OKOnly`|0| Visar OK-knappen. |   | `OKCancel`|1| Visar OK och Avbryt knappar. |   | `AbortRetryIgnore`|2| Visar Avbryt, försök igen och ignorera knappar. |   | `YesNoCancel`|3| Visar Ja, Nej och avbryta knappar. |   | `YesNo`|4| Visar knapparna Ja och Nej. |   | `RetryCancel`|5| Visar återförsök och Avbryt knappar. |   | `Critical`|16| Visar kritiska ikon. |   | `Question`|32| Visar varning frågeikon. |   | `Exclamation`|48| Visar varningsmeddelandet ikon. |   | `Information`|64| Visar Information ikon. |   | `DefaultButton1`|0| Första knappen är standard. |   | `DefaultButton2`|256| Andra knappen är standard. |   | `DefaultButton3`|512| Tredje knappen är standard. |   | `ApplicationModal`|0| Programmet är spärrad. Användaren måste svara på meddelandet innan du fortsätter arbete i det aktuella programmet. |   | `SystemModal`|4096| Systemet är spärrad. Alla program pausas tills användaren svarar meddelanderutan. |   | `MsgBoxSetForeground`|&65536; | Anger meddelanderutan är fönstret i förgrunden.. |   | `MsgBoxRight`|&52428;8 | Texten är högerjusterad. |   | `MsgBoxRtlReading`|&10485;76 | Anger texten som ska visas som höger till vänster på hebreiska och arabiska system. |       Den första gruppen av värden (0 –&5;) anger vilka knappar som visas i dialogrutan. Den andra gruppen (16, 32, 48, 64) beskriver den ikon som ska användas. Den tredje gruppen (0, 256, 512) anger vilken knapp som är standard. Grupp (0, 4096) Buttons meddelanderutan och gruppen femte anger huruvida meddelanderutan är fönstret är i förgrunden tillsammans med justering och riktning text. När du lägger till när du ska skapa ett sista värde för den `Buttons` argument, Använd bara en siffra mellan varje grupp."
  example:
  - "This example uses the `MsgBox` function to display a critical-error message in a dialog box with Yes and No buttons. The No button is specified as the default response. This is done by combining the `MsgBox` constant values into one numeric expression. In this case, adding 4 (the Yes/No button combination) and 16 (the **Critical Message** window) and 256 (the second button as default button) gives a total of 276. The value returned by the `MsgBox` function depends on the button chosen by the user: Yes returns a value of 6; No returns a value of 7.  \n  \n [!code-vb[VbVbalrCatRef#20](~/add/codesnippet/visualbasic/b9e37542-f81a-4692-86e1-_1.vb)]"
  syntax:
    content: public static Microsoft.VisualBasic.MsgBoxResult MsgBox (object Prompt, Microsoft.VisualBasic.MsgBoxStyle Buttons = Microsoft.VisualBasic.MsgBoxStyle.ApplicationModal, object Title = null);
    parameters:
    - id: Prompt
      type: System.Object
      description: "Obligatoriskt. <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>uttryck som visas som meddelandet i dialogrutan. Den maximala längden på `Prompt` är cirka 1 024 tecken, beroende på bredden på de tecken som används. Om `Prompt` består av fler än en rad kan du avgränsa raderna med en vagnretur (<xref uid=&quot;langword_csharp_Chr(&quot; name=&quot;Chr(&quot; href=&quot;&quot;></xref>13<xref uid=&quot;langword_csharp_)&quot; name=&quot;)&quot; href=&quot;&quot;></xref>), ett tecken för radmatning (<xref uid=&quot;langword_csharp_Chr(&quot; name=&quot;Chr(&quot; href=&quot;&quot;></xref>10<xref uid=&quot;langword_csharp_)&quot; name=&quot;)&quot; href=&quot;&quot;></xref>), eller en transport returnera/radmatningstecken kombination (<xref uid=&quot;langword_csharp_Chr(&quot; name=&quot;Chr(&quot; href=&quot;&quot;></xref>13<xref uid=&quot;langword_csharp_)&quot; name=&quot;)&quot; href=&quot;&quot;> </xref> &amp; <xref uid=&quot;langword_csharp_Chr(&quot; name=&quot;Chr(&quot; href=&quot;&quot;> </xref>10<xref uid=&quot;langword_csharp_)&quot; name=&quot;)&quot; href=&quot;&quot;></xref>) mellan varje rad."
    - id: Buttons
      type: Microsoft.VisualBasic.MsgBoxStyle
      description: "Valfritt. Numeriskt uttryck som är summan av värden som anger vilka knappar som ska visas, formatmallen ikon för att använda standardknapp identitet och form i meddelanderutan. Om du utelämnar `Buttons`, standardvärdet är noll."
    - id: Title
      type: System.Object
      description: "Valfritt. <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>uttryck som visas i namnlisten i dialogrutan. Om du utelämnar `Title`, programnamnet är placerad i namnlisten."
    return:
      type: Microsoft.VisualBasic.MsgBoxResult
      description: "<table><tbody><tr><td> Konstant       </td><td> Värde       </td></tr><tr><td>           <xref uid=&quot;langword_csharp_OK&quot; name=&quot;OK&quot; href=&quot;&quot;></xref>         </td><td> 1       </td></tr><tr><td>           <xref uid=&quot;langword_csharp_Cancel&quot; name=&quot;Cancel&quot; href=&quot;&quot;></xref>         </td><td> 2       </td></tr><tr><td>           <xref uid=&quot;langword_csharp_Abort&quot; name=&quot;Abort&quot; href=&quot;&quot;></xref>         </td><td> 3       </td></tr><tr><td>           <xref uid=&quot;langword_csharp_Retry&quot; name=&quot;Retry&quot; href=&quot;&quot;></xref>         </td><td> 4       </td></tr><tr><td>           <xref uid=&quot;langword_csharp_Ignore&quot; name=&quot;Ignore&quot; href=&quot;&quot;></xref>         </td><td> 5       </td></tr><tr><td>           <xref uid=&quot;langword_csharp_Yes&quot; name=&quot;Yes&quot; href=&quot;&quot;></xref>         </td><td> 6       </td></tr><tr><td>           <xref uid=&quot;langword_csharp_No&quot; name=&quot;No&quot; href=&quot;&quot;></xref>         </td><td> 7       </td></tr></tbody></table>"
  overload: Microsoft.VisualBasic.Interaction.MsgBox*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>Prompt</code>är inte en <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> uttryck eller <code>Title</code> är ogiltig."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Processen körs inte i användaren interaktivt läge."
  - type: System.ComponentModel.InvalidEnumArgumentException
    commentId: T:System.ComponentModel.InvalidEnumArgumentException
    description: "En eller flera parametrar inte en medlem av <xref uid=&quot;langword_csharp_MsgBoxResult&quot; name=&quot;MsgBoxResult&quot; href=&quot;&quot;> </xref> eller <xref uid=&quot;langword_csharp_MsgBoxStyle&quot; name=&quot;MsgBoxStyle&quot; href=&quot;&quot;> </xref> uppräkning."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Interaction.Partition(System.Int64,System.Int64,System.Int64,System.Int64)
  id: Partition(System.Int64,System.Int64,System.Int64,System.Int64)
  parent: Microsoft.VisualBasic.Interaction
  langs:
  - csharp
  name: Partition(Int64,Int64,Int64,Int64)
  nameWithType: Interaction.Partition(Int64,Int64,Int64,Int64)
  fullName: Microsoft.VisualBasic.Interaction.Partition(Int64,Int64,Int64,Int64)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Returnerar en sträng som representerar intervallet som innehåller ett tal."
  remarks: "Den `Partition` funktionen beräknar en uppsättning med numeriska intervall som innehåller antalet värden som anges av `Interval`. Första intervallet som börjar vid `Start`, och det sista intervallet slutar vid `Stop`. Den `Partition` funktionen sedan identifierar vilka adressintervallet innehåller `Number` och returnerar en sträng som beskriver. Intervallet anges i strängen som &quot;*nedre*:*övre*&quot;, där låg intervallslut (*nedre*) är skild från den övre delen (*övre*) av ett kolon (:).       Om det behövs det `Partition` infogas inledande blanksteg före *nedre* och *övre* så att de båda ha samma antal tecken som strängrepresentation av värdet (`Stop` + 1). Detta säkerställer att om du använder utdata från den `Partition` funktion med flera värden för `Number`, den resulterande texten ska hanteras korrekt vid eventuell sortering.       I följande tabell visas några exempel strängar för områden som beräknas med hjälp av tre olika `Start`, `Stop`, och `Interval`. &quot;Först intervallet&quot; och &quot;Senaste intervallet&quot; kolumner visar lägsta och högsta intervall möjliga med värdena för `Start` och `Stop`. Den &quot;före första intervallet&quot; och &quot;efter senaste intervallet&quot; kolumner visar strängar som returnerades för värden i `Number` mindre än `Start` och större än `Stop`respektive.      ||||||||   |-|-|-|-|-|-|-|   | `Start`|`Stop`|`Interval`| Innan du första intervallet | Första intervallet | Intervallet för senaste | Efter senaste intervallet |   | 0 | 99 | 5 | &quot;: -1&quot; | &quot;  0: 4&quot;|&quot; 95: 99 &quot;|&quot; 100: &quot;|   | 20 | 199 | 10 | &quot;: 19-tums |&quot; 20:29 &quot;|&quot; 190:199 &quot;|&quot; 200: &quot;|   | 100 | 1010 | 20 | &quot;: 99&quot; | &quot; 100: 119 &quot;|&quot; 1000:1010 &quot;|&quot; 1011: &quot;|       I föregående tabell är den tredje raden visar resultatet när `Start` och `Stop` anger ett tal som inte är jämnt delbart med `Interval`. Det sista intervallet slutar vid `Stop`, vilket gör det endast 11 siffror, även om `Interval` är 20.       Om `Interval` är 1, intervallet är &quot;`Number`:`Number`&quot;, oavsett den `Start` och `Stop` argument. Till exempel om `Number` är 267, `Stop` är 1000, och `Interval` är 1, `Partition` returnerar &quot;267: 267&quot;.       `Partition`kan vara användbart när man skapar databasfrågor. Du kan skapa en SELECT-frågan som visar hur många order sker inom olika värdet områden, till exempel med fakturavärden från 1 till 1000, 1001 till 2000, och så vidare."
  example:
  - "The following example sets up a series of ranges for decades from 1950 through 2049. It locates the value of `year` within the appropriate range and returns a `String` value showing the range. If `year` has a value of 1984, for example, `Partition` returns \"1980:1989\".  \n  \n [!code-vb[VbVbalrFunctions#45](~/add/codesnippet/visualbasic/2056d306-036e-4f9b-954c-_1.vb)]"
  syntax:
    content: public static string Partition (long Number, long Start, long Stop, long Interval);
    parameters:
    - id: Number
      type: System.Int64
      description: "Obligatoriskt. <xref uid=&quot;langword_csharp_Long&quot; name=&quot;Long&quot; href=&quot;&quot;></xref>. Heltal som du vill hitta i ett beräknat intervall."
    - id: Start
      type: System.Int64
      description: "Obligatoriskt. <xref uid=&quot;langword_csharp_Long&quot; name=&quot;Long&quot; href=&quot;&quot;></xref>. Heltal som anger början av uppsättning beräknade intervall. `Start`kan inte vara mindre än 0."
    - id: Stop
      type: System.Int64
      description: "Obligatoriskt. <xref uid=&quot;langword_csharp_Long&quot; name=&quot;Long&quot; href=&quot;&quot;></xref>. Heltal som anger slutet av uppsättning beräknade intervall. `Stop`kan inte vara mindre än eller lika med `Start`."
    - id: Interval
      type: System.Int64
      description: "Obligatoriskt. <xref uid=&quot;langword_csharp_Long&quot; name=&quot;Long&quot; href=&quot;&quot;></xref>. Heltal som anger storleken på varje område beräknas mellan `Start` och `Stop`. `Interval`får inte vara mindre än 1."
    return:
      type: System.String
      description: "Returnerar en sträng som representerar intervallet som innehåller ett tal."
  overload: Microsoft.VisualBasic.Interaction.Partition*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>Start</code>&lt; 0, <code>Stop</code> &lt;= <code>Start</code>, or <code>Interval</code> &lt; 1."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Interaction.SaveSetting(System.String,System.String,System.String,System.String)
  id: SaveSetting(System.String,System.String,System.String,System.String)
  parent: Microsoft.VisualBasic.Interaction
  langs:
  - csharp
  name: SaveSetting(String,String,String,String)
  nameWithType: Interaction.SaveSetting(String,String,String,String)
  fullName: Microsoft.VisualBasic.Interaction.SaveSetting(String,String,String,String)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Sparar eller skapar en post i Windows-registret. Den <xref uid=&quot;langword_csharp_My&quot; name=&quot;My&quot; href=&quot;&quot;> </xref> funktionen ger dig större produktivitet och prestanda i registret åtgärder än <xref uid=&quot;langword_csharp_SaveSetting&quot; name=&quot;SaveSetting&quot; href=&quot;&quot;> </xref>. Mer information finns i <xref:Microsoft.VisualBasic.Devices.ServerComputer.Registry*>.</xref:Microsoft.VisualBasic.Devices.ServerComputer.Registry*>"
  remarks: "The `SaveSetting` function adds the key to `HKEY_CURRENT_USER\\Software\\VB and VBA Program Settings`.  \n  \n If the key setting cannot be saved for any reason, an error occurs.  \n  \n `SaveSetting` requires that a user be logged on since it operates under the `HKEY_LOCAL_USER` registry key, which is not active until a user logs on interactively.  \n  \n Registry settings that are to be accessed from a non-interactive process (such as Mtx.exe) should be stored under either the `HKEY_LOCAL_MACHINE\\Software\\` or the `HKEY_USER\\DEFAULT\\Software` registry keys.  \n  \n `SaveSetting` requires `Write` and `Create`<xref:System.Security.Permissions.RegistryPermission> ."
  example:
  - "The following example first uses the `SaveSetting` function to make entries in the Windows registry for the `MyApp` application, and then uses the `DeleteSetting` function to remove them.  \n  \n [!code-vb[VbVbalrCatRef#56](~/add/codesnippet/visualbasic/771356b4-108a-4f31-9d7a-_1.vb)]"
  syntax:
    content: public static void SaveSetting (string AppName, string Section, string Key, string Setting);
    parameters:
    - id: AppName
      type: System.String
      description: "Obligatoriskt. <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>uttryck som innehåller namnet på det program eller projekt som inställningen gäller."
    - id: Section
      type: System.String
      description: "Obligatoriskt. <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>uttryck som innehåller namnet på avsnittet där inställningen sparas."
    - id: Key
      type: System.String
      description: "Obligatoriskt. <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>uttryck som innehåller namnet på inställningen sparas."
    - id: Setting
      type: System.String
      description: "Obligatoriskt. Uttryck som innehåller värdet som `Key` anges."
  overload: Microsoft.VisualBasic.Interaction.SaveSetting*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Viktiga registret kunde inte skapas eller användaren inte är inloggad."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Interaction.Shell(System.String,Microsoft.VisualBasic.AppWinStyle,System.Boolean,System.Int32)
  id: Shell(System.String,Microsoft.VisualBasic.AppWinStyle,System.Boolean,System.Int32)
  parent: Microsoft.VisualBasic.Interaction
  langs:
  - csharp
  name: Shell(String,AppWinStyle,Boolean,Int32)
  nameWithType: Interaction.Shell(String,AppWinStyle,Boolean,Int32)
  fullName: Microsoft.VisualBasic.Interaction.Shell(String,AppWinStyle,Boolean,Int32)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Kör ett körbart program och returnerar ett heltal som innehåller programmets process-ID om det fortfarande körs."
  remarks: "The return value of the `Shell` function depends on whether the program named in `PathName` is still executing when `Shell` returns. If you set `Wait` to `True` and the program finishes before the timeout expires, `Shell` returns zero. If the timeout expires, or if you omit `Wait` or set it to `False`, `Shell` returns the process ID of the program. The process ID is a unique number that identifies the running program.  \n  \n## Failure to Start  \n If the `Shell` function cannot start the named program, a <xref:System.IO.FileNotFoundException> error occurs. This can happen, for example, when you attempt to run a 16-bit program, such as `command.com`, from an application using <xref:System.Windows.Forms?displayProperty=fullName>. For a workaround, you can run a 32-bit program that calls the desired 16-bit program. In the case of `command.com`, you can run `cmd.exe` as an alternative.  \n  \n## Waiting for Completion  \n By default, the `Shell` function runs the program asynchronously. This means that a program started with the `Shell` function might not finish executing before the statements following the `Shell` function are executed. If you want to wait for the program to finish before you continue, set `Wait` to `True`.  \n  \n## Determining the Exit Code  \n A process can return an *exit code* when it terminates. However, you cannot use `Shell` to retrieve this exit code, because `Shell` returns zero if it waits for termination, and also because the process runs in a different object from `Shell`.  \n  \n To retrieve the exit code from a process, you must write your own code to initiate the process and wait for termination. The following example shows how to initiate a process, wait for it to terminate, and retrieve its exit code.  \n  \n```vb#  \nDim procID As Integer  \nDim newProc As Diagnostics.Process  \nnewProc = Diagnostics.Process.Start(\"C:\\WINDOWS\\NOTEPAD.EXE\")  \nprocID = newProc.Id  \nnewProc.WaitForExit()  \nDim procEC As Integer = -1  \nIf newProc.HasExited Then  \n    procEC = newProc.ExitCode  \nEnd If  \nMsgBox(\"Process with ID \" & CStr(ProcID) & _  \n    \" terminated with exit code \" & CStr(procEC))  \n```  \n  \n## Protecting the File Specification  \n You should always enclose the entire path and file specification in quotation marks, as the following example shows.  \n  \n```vb#  \nID = Shell(\"\"\"C:\\Program Files\\display.exe\"\" -a -q\", , True, 100000)  \n```  \n  \n Each pair of adjacent double quotation marks (`\" \"`) within the string literal is interpreted as one double quotation character in the string. Therefore, the preceding example presents the following string to the `Shell` function:  \n  \n```  \n\"C:\\Program Files\\display.exe\" -a -q  \n```  \n  \n If you did not have the path enclosed in quotation marks, Windows would look for a file called `Program.exe` in the C:\\ directory, instead of `display.exe` in the C:\\Program Files directory.  \n  \n> [!IMPORTANT]\n>  If you do not enclose the path and file specification in quotation marks, there is a security risk if the file name or a path node contains spaces. In the preceding example, the path node `\\Program Files` includes a space. If the specification were not inside quotation marks and a program named `Program.exe` had been installed in C:\\\\, for example by illicit tampering, Windows would execute it instead of `display.exe`.  \n  \n> [!IMPORTANT]\n>  The `Shell` function requires unmanaged code permission, which might affect its execution in partial-trust situations. For more information, see <xref:System.Security.Permissions.SecurityPermission> and [Code Access Permissions](http://msdn.microsoft.com/en-us/e5ae402f-6dda-4732-bbe8-77296630f675)."
  example:
  - "The following example uses the `Shell` function to run an application specified by the user. Specifying <xref:Microsoft.VisualBasic.AppWinStyle?displayProperty=fullName> as the second argument opens the application in normal size and gives it the focus.  \n  \n [!code-vb[VbVbalrFunctions#47](~/add/codesnippet/visualbasic/a0f7fa2d-96c5-4a1d-b721-_1.vb)]"
  syntax:
    content: public static int Shell (string PathName, Microsoft.VisualBasic.AppWinStyle Style = Microsoft.VisualBasic.AppWinStyle.MinimizedFocus, bool Wait = false, int Timeout = -1);
    parameters:
    - id: PathName
      type: System.String
      description: "Required. <xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref>. Name of the program to execute, together with any required arguments and command-line switches. `PathName` can also include the drive and the directory path or folder.  \n  \n If you do not know the path to the program, you can use the <xref:Microsoft.VisualBasic.FileIO.FileSystem.GetFiles*> to locate it. For example, you can call `My.Computer.FileSystem.GetFiles(\"C:\\\", True, \"testFile.txt\")`, which returns the full path of every file named `testFile.txt` anywhere on drive C:\\\\."
    - id: Style
      type: Microsoft.VisualBasic.AppWinStyle
      description: "Valfritt. <xref uid=&quot;langword_csharp_AppWinStyle&quot; name=&quot;AppWinStyle&quot; href=&quot;&quot;></xref>. Ett värde som väljs från den <xref href=&quot;Microsoft.VisualBasic.AppWinStyle&quot;> </xref> anger formatet för fönstret där programmet är att köra. Om `Style` utelämnas <xref uid=&quot;langword_csharp_Shell&quot; name=&quot;Shell&quot; href=&quot;&quot;> </xref> använder <xref uid=&quot;langword_csharp_AppWinStyle.MinimizedFocus&quot; name=&quot;AppWinStyle.MinimizedFocus&quot; href=&quot;&quot;> </xref>, vilket startar programmet minimerat och fokus."
    - id: Wait
      type: System.Boolean
      description: "Valfritt. <xref uid=&quot;langword_csharp_Boolean&quot; name=&quot;Boolean&quot; href=&quot;&quot;></xref>. Ett värde som anger om den <xref uid=&quot;langword_csharp_Shell&quot; name=&quot;Shell&quot; href=&quot;&quot;> </xref> funktionen ska vänta på slutförande av programmet. If `Wait` is omitted, <xref uid=&quot;langword_csharp_Shell&quot; name=&quot;Shell&quot; href=&quot;&quot;></xref> uses <xref uid=&quot;langword_csharp_False&quot; name=&quot;False&quot; href=&quot;&quot;></xref>."
    - id: Timeout
      type: System.Int32
      description: "Valfritt. <xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;></xref>. Antalet millisekunder att vänta på slutförande om `Wait` är <xref uid=&quot;langword_csharp_True&quot; name=&quot;True&quot; href=&quot;&quot;> </xref>. Om `Timeout` utelämnas <xref uid=&quot;langword_csharp_Shell&quot; name=&quot;Shell&quot; href=&quot;&quot;> </xref> använder&1;, vilket innebär att ingen tidsgräns och <xref uid=&quot;langword_csharp_Shell&quot; name=&quot;Shell&quot; href=&quot;&quot;> </xref> returnerar inte förrän programmet har avslutats. Därför, om du utelämnar `Timeout` eller anger det att it-1, går som <xref uid=&quot;langword_csharp_Shell&quot; name=&quot;Shell&quot; href=&quot;&quot;> </xref> kan aldrig komma tillbaka till ditt program."
    return:
      type: System.Int32
      description: "Kör ett körbart program och returnerar ett heltal som innehåller programmets process-ID om det fortfarande körs."
  overload: Microsoft.VisualBasic.Interaction.Shell*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>Style</code>ligger inte inom intervallet 0 till 9, inklusive."
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "<xref uid=&quot;langword_csharp_Shell&quot; name=&quot;Shell&quot; href=&quot;&quot;></xref>Det går inte att hitta den <code> PathName </code> fil."
  - type: System.NullReferenceException
    commentId: T:System.NullReferenceException
    description: "<code>PathName</code>is <xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Interaction.Switch(System.Object[])
  id: Switch(System.Object[])
  parent: Microsoft.VisualBasic.Interaction
  langs:
  - csharp
  name: Switch(Object[])
  nameWithType: Interaction.Switch(Object[])
  fullName: Microsoft.VisualBasic.Interaction.Switch(Object[])
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Utvärderar en lista med uttryck och returnerar ett <xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;> </xref> värdet som motsvarar det första uttrycket i listan som är <xref uid=&quot;langword_csharp_True&quot; name=&quot;True&quot; href=&quot;&quot;> </xref>."
  remarks: "Argumentet som skickades till `VarExpr` består av parad uttryck och värden. Den `Switch` evaluerar udda uttrycken från lägsta till högsta index i `VarExpr`, och returnerar värdet för jämna som är associerade med den första uttryck som utvärderas till `True`. Till exempel om `VarExpr(0)` är `True`, `Switch` returnerar `VarExpr(1)`, och om `VarExpr(0)` är `False` men `VarExpr(2)` är `True`, `Switch` returnerar `VarExpr(3)`och så vidare.       Om du inte anger den `VarExpr` argument, `Switch` returnerar `Nothing`.      > [!NOTE] > Uttrycken i argumentlistan med kan innehålla funktionsanrop. Som en del av förberedelserna argumentlistan för anrop till `Switch`, Visual Basic-kompileraren anropar alla funktioner i varje uttryck. Det innebär att du inte förlita dig på en viss funktion inte anropas om ett uttryck tidigare i argumentlistan är `True`."
  example:
  - "The following example uses the `Switch` function to return the name of a language that matches the name of a city. It requires that `Option Strict` be `Off`.  \n  \n [!code-vb[VbVbalrFunctions#48](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._108_1.vb)]  \n  \n Because the <xref:System.Diagnostics> namespace also contains a class called <xref:System.Diagnostics.Switch>, a call to the `Switch` function must be qualified with the <xref:Microsoft.VisualBasic> namespace."
  syntax:
    content: public static object Switch (object[] VarExpr);
    parameters:
    - id: VarExpr
      type: System.Object[]
      description: "Obligatoriskt. <xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;></xref>parametermatris. Måste ha ett jämnt antal element. Du kan ange en lista över <xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;> </xref> variabler eller uttryck avgränsade med kommatecken eller en endimensionell matris av <xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;> </xref> element."
    return:
      type: System.Object
      description: "Utvärderar en lista med uttryck och returnerar ett <xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;> </xref> värdet som motsvarar det första uttrycket i listan som är <xref uid=&quot;langword_csharp_True&quot; name=&quot;True&quot; href=&quot;&quot;> </xref>."
  overload: Microsoft.VisualBasic.Interaction.Switch*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Antalet argument är udda."
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.Exception
  isExternal: true
  name: System.Exception
- uid: System.IO.FileNotFoundException
  isExternal: true
  name: System.IO.FileNotFoundException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.ComponentModel.InvalidEnumArgumentException
  parent: System.ComponentModel
  isExternal: false
  name: InvalidEnumArgumentException
  nameWithType: InvalidEnumArgumentException
  fullName: System.ComponentModel.InvalidEnumArgumentException
- uid: System.NullReferenceException
  isExternal: true
  name: System.NullReferenceException
- uid: Microsoft.VisualBasic.Interaction.AppActivate(System.Int32)
  parent: Microsoft.VisualBasic.Interaction
  isExternal: false
  name: AppActivate(Int32)
  nameWithType: Interaction.AppActivate(Int32)
  fullName: Microsoft.VisualBasic.Interaction.AppActivate(Int32)
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Microsoft.VisualBasic.Interaction.AppActivate(System.String)
  parent: Microsoft.VisualBasic.Interaction
  isExternal: false
  name: AppActivate(String)
  nameWithType: Interaction.AppActivate(String)
  fullName: Microsoft.VisualBasic.Interaction.AppActivate(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Microsoft.VisualBasic.Interaction.Beep
  parent: Microsoft.VisualBasic.Interaction
  isExternal: false
  name: Beep()
  nameWithType: Interaction.Beep()
  fullName: Microsoft.VisualBasic.Interaction.Beep()
- uid: Microsoft.VisualBasic.Interaction.CallByName(System.Object,System.String,Microsoft.VisualBasic.CallType,System.Object[])
  parent: Microsoft.VisualBasic.Interaction
  isExternal: false
  name: CallByName(Object,String,CallType,Object[])
  nameWithType: Interaction.CallByName(Object,String,CallType,Object[])
  fullName: Microsoft.VisualBasic.Interaction.CallByName(Object,String,CallType,Object[])
- uid: Microsoft.VisualBasic.CallType
  parent: Microsoft.VisualBasic
  isExternal: false
  name: CallType
  nameWithType: CallType
  fullName: Microsoft.VisualBasic.CallType
- uid: System.Object[]
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object[]
  spec.csharp:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: Object[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: Microsoft.VisualBasic.Interaction.Choose(System.Double,System.Object[])
  parent: Microsoft.VisualBasic.Interaction
  isExternal: false
  name: Choose(Double,Object[])
  nameWithType: Interaction.Choose(Double,Object[])
  fullName: Microsoft.VisualBasic.Interaction.Choose(Double,Object[])
- uid: System.Double
  parent: System
  isExternal: true
  name: Double
  nameWithType: Double
  fullName: System.Double
- uid: Microsoft.VisualBasic.Interaction.Command
  parent: Microsoft.VisualBasic.Interaction
  isExternal: false
  name: Command()
  nameWithType: Interaction.Command()
  fullName: Microsoft.VisualBasic.Interaction.Command()
- uid: Microsoft.VisualBasic.Interaction.CreateObject(System.String,System.String)
  parent: Microsoft.VisualBasic.Interaction
  isExternal: false
  name: CreateObject(String,String)
  nameWithType: Interaction.CreateObject(String,String)
  fullName: Microsoft.VisualBasic.Interaction.CreateObject(String,String)
- uid: Microsoft.VisualBasic.Interaction.DeleteSetting(System.String,System.String,System.String)
  parent: Microsoft.VisualBasic.Interaction
  isExternal: false
  name: DeleteSetting(String,String,String)
  nameWithType: Interaction.DeleteSetting(String,String,String)
  fullName: Microsoft.VisualBasic.Interaction.DeleteSetting(String,String,String)
- uid: Microsoft.VisualBasic.Interaction.Environ(System.Int32)
  parent: Microsoft.VisualBasic.Interaction
  isExternal: false
  name: Environ(Int32)
  nameWithType: Interaction.Environ(Int32)
  fullName: Microsoft.VisualBasic.Interaction.Environ(Int32)
- uid: Microsoft.VisualBasic.Interaction.Environ(System.String)
  parent: Microsoft.VisualBasic.Interaction
  isExternal: false
  name: Environ(String)
  nameWithType: Interaction.Environ(String)
  fullName: Microsoft.VisualBasic.Interaction.Environ(String)
- uid: Microsoft.VisualBasic.Interaction.GetAllSettings(System.String,System.String)
  parent: Microsoft.VisualBasic.Interaction
  isExternal: false
  name: GetAllSettings(String,String)
  nameWithType: Interaction.GetAllSettings(String,String)
  fullName: Microsoft.VisualBasic.Interaction.GetAllSettings(String,String)
- uid: System.String[]
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String[,]
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String[,]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: Microsoft.VisualBasic.Interaction.GetObject(System.String,System.String)
  parent: Microsoft.VisualBasic.Interaction
  isExternal: false
  name: GetObject(String,String)
  nameWithType: Interaction.GetObject(String,String)
  fullName: Microsoft.VisualBasic.Interaction.GetObject(String,String)
- uid: Microsoft.VisualBasic.Interaction.GetSetting(System.String,System.String,System.String,System.String)
  parent: Microsoft.VisualBasic.Interaction
  isExternal: false
  name: GetSetting(String,String,String,String)
  nameWithType: Interaction.GetSetting(String,String,String,String)
  fullName: Microsoft.VisualBasic.Interaction.GetSetting(String,String,String,String)
- uid: Microsoft.VisualBasic.Interaction.IIf(System.Boolean,System.Object,System.Object)
  parent: Microsoft.VisualBasic.Interaction
  isExternal: false
  name: IIf(Boolean,Object,Object)
  nameWithType: Interaction.IIf(Boolean,Object,Object)
  fullName: Microsoft.VisualBasic.Interaction.IIf(Boolean,Object,Object)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Microsoft.VisualBasic.Interaction.InputBox(System.String,System.String,System.String,System.Int32,System.Int32)
  parent: Microsoft.VisualBasic.Interaction
  isExternal: false
  name: InputBox(String,String,String,Int32,Int32)
  nameWithType: Interaction.InputBox(String,String,String,Int32,Int32)
  fullName: Microsoft.VisualBasic.Interaction.InputBox(String,String,String,Int32,Int32)
- uid: Microsoft.VisualBasic.Interaction.MsgBox(System.Object,Microsoft.VisualBasic.MsgBoxStyle,System.Object)
  parent: Microsoft.VisualBasic.Interaction
  isExternal: false
  name: MsgBox(Object,MsgBoxStyle,Object)
  nameWithType: Interaction.MsgBox(Object,MsgBoxStyle,Object)
  fullName: Microsoft.VisualBasic.Interaction.MsgBox(Object,MsgBoxStyle,Object)
- uid: Microsoft.VisualBasic.MsgBoxResult
  parent: Microsoft.VisualBasic
  isExternal: false
  name: MsgBoxResult
  nameWithType: MsgBoxResult
  fullName: Microsoft.VisualBasic.MsgBoxResult
- uid: Microsoft.VisualBasic.MsgBoxStyle
  parent: Microsoft.VisualBasic
  isExternal: false
  name: MsgBoxStyle
  nameWithType: MsgBoxStyle
  fullName: Microsoft.VisualBasic.MsgBoxStyle
- uid: Microsoft.VisualBasic.Interaction.Partition(System.Int64,System.Int64,System.Int64,System.Int64)
  parent: Microsoft.VisualBasic.Interaction
  isExternal: false
  name: Partition(Int64,Int64,Int64,Int64)
  nameWithType: Interaction.Partition(Int64,Int64,Int64,Int64)
  fullName: Microsoft.VisualBasic.Interaction.Partition(Int64,Int64,Int64,Int64)
- uid: System.Int64
  parent: System
  isExternal: true
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: Microsoft.VisualBasic.Interaction.SaveSetting(System.String,System.String,System.String,System.String)
  parent: Microsoft.VisualBasic.Interaction
  isExternal: false
  name: SaveSetting(String,String,String,String)
  nameWithType: Interaction.SaveSetting(String,String,String,String)
  fullName: Microsoft.VisualBasic.Interaction.SaveSetting(String,String,String,String)
- uid: Microsoft.VisualBasic.Interaction.Shell(System.String,Microsoft.VisualBasic.AppWinStyle,System.Boolean,System.Int32)
  parent: Microsoft.VisualBasic.Interaction
  isExternal: false
  name: Shell(String,AppWinStyle,Boolean,Int32)
  nameWithType: Interaction.Shell(String,AppWinStyle,Boolean,Int32)
  fullName: Microsoft.VisualBasic.Interaction.Shell(String,AppWinStyle,Boolean,Int32)
- uid: Microsoft.VisualBasic.AppWinStyle
  parent: Microsoft.VisualBasic
  isExternal: false
  name: AppWinStyle
  nameWithType: AppWinStyle
  fullName: Microsoft.VisualBasic.AppWinStyle
- uid: Microsoft.VisualBasic.Interaction.Switch(System.Object[])
  parent: Microsoft.VisualBasic.Interaction
  isExternal: false
  name: Switch(Object[])
  nameWithType: Interaction.Switch(Object[])
  fullName: Microsoft.VisualBasic.Interaction.Switch(Object[])
- uid: Microsoft.VisualBasic.Interaction.AppActivate*
  parent: Microsoft.VisualBasic.Interaction
  isExternal: false
  name: AppActivate
  nameWithType: Interaction.AppActivate
- uid: Microsoft.VisualBasic.Interaction.Beep*
  parent: Microsoft.VisualBasic.Interaction
  isExternal: false
  name: Beep
  nameWithType: Interaction.Beep
- uid: Microsoft.VisualBasic.Interaction.CallByName*
  parent: Microsoft.VisualBasic.Interaction
  isExternal: false
  name: CallByName
  nameWithType: Interaction.CallByName
- uid: Microsoft.VisualBasic.Interaction.Choose*
  parent: Microsoft.VisualBasic.Interaction
  isExternal: false
  name: Choose
  nameWithType: Interaction.Choose
- uid: Microsoft.VisualBasic.Interaction.Command*
  parent: Microsoft.VisualBasic.Interaction
  isExternal: false
  name: Command
  nameWithType: Interaction.Command
- uid: Microsoft.VisualBasic.Interaction.CreateObject*
  parent: Microsoft.VisualBasic.Interaction
  isExternal: false
  name: CreateObject
  nameWithType: Interaction.CreateObject
- uid: Microsoft.VisualBasic.Interaction.DeleteSetting*
  parent: Microsoft.VisualBasic.Interaction
  isExternal: false
  name: DeleteSetting
  nameWithType: Interaction.DeleteSetting
- uid: Microsoft.VisualBasic.Interaction.Environ*
  parent: Microsoft.VisualBasic.Interaction
  isExternal: false
  name: Environ
  nameWithType: Interaction.Environ
- uid: Microsoft.VisualBasic.Interaction.GetAllSettings*
  parent: Microsoft.VisualBasic.Interaction
  isExternal: false
  name: GetAllSettings
  nameWithType: Interaction.GetAllSettings
- uid: Microsoft.VisualBasic.Interaction.GetObject*
  parent: Microsoft.VisualBasic.Interaction
  isExternal: false
  name: GetObject
  nameWithType: Interaction.GetObject
- uid: Microsoft.VisualBasic.Interaction.GetSetting*
  parent: Microsoft.VisualBasic.Interaction
  isExternal: false
  name: GetSetting
  nameWithType: Interaction.GetSetting
- uid: Microsoft.VisualBasic.Interaction.IIf*
  parent: Microsoft.VisualBasic.Interaction
  isExternal: false
  name: IIf
  nameWithType: Interaction.IIf
- uid: Microsoft.VisualBasic.Interaction.InputBox*
  parent: Microsoft.VisualBasic.Interaction
  isExternal: false
  name: InputBox
  nameWithType: Interaction.InputBox
- uid: Microsoft.VisualBasic.Interaction.MsgBox*
  parent: Microsoft.VisualBasic.Interaction
  isExternal: false
  name: MsgBox
  nameWithType: Interaction.MsgBox
- uid: Microsoft.VisualBasic.Interaction.Partition*
  parent: Microsoft.VisualBasic.Interaction
  isExternal: false
  name: Partition
  nameWithType: Interaction.Partition
- uid: Microsoft.VisualBasic.Interaction.SaveSetting*
  parent: Microsoft.VisualBasic.Interaction
  isExternal: false
  name: SaveSetting
  nameWithType: Interaction.SaveSetting
- uid: Microsoft.VisualBasic.Interaction.Shell*
  parent: Microsoft.VisualBasic.Interaction
  isExternal: false
  name: Shell
  nameWithType: Interaction.Shell
- uid: Microsoft.VisualBasic.Interaction.Switch*
  parent: Microsoft.VisualBasic.Interaction
  isExternal: false
  name: Switch
  nameWithType: Interaction.Switch
