### YamlMime:ManagedReference
items:
- uid: System.Speech.Recognition.LoadGrammarCompletedEventArgs
  id: LoadGrammarCompletedEventArgs
  children:
  - System.Speech.Recognition.LoadGrammarCompletedEventArgs.Grammar
  langs:
  - csharp
  name: LoadGrammarCompletedEventArgs
  nameWithType: LoadGrammarCompletedEventArgs
  fullName: System.Speech.Recognition.LoadGrammarCompletedEventArgs
  type: Class
  summary: "Tillhandahåller data för den <xref uid=&quot;langword_csharp_LoadGrammarCompleted&quot; name=&quot;LoadGrammarCompleted&quot; href=&quot;&quot;> </xref> händelsen för en <xref href=&quot;System.Speech.Recognition.SpeechRecognizer&quot;> </xref> eller <xref href=&quot;System.Speech.Recognition.SpeechRecognitionEngine&quot;> </xref> objekt."
  remarks: "En instans av `LoadGrammarCompletedEventArgs` skapas när den <xref:System.Speech.Recognition.SpeechRecognitionEngine>objekt aktiverar dess <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarCompleted?displayProperty=fullName>eller <xref:System.Speech.Recognition.SpeechRecognizer>objekt aktiverar dess <xref:System.Speech.Recognition.SpeechRecognizer.LoadGrammarCompleted>händelse.</xref:System.Speech.Recognition.SpeechRecognizer.LoadGrammarCompleted> </xref:System.Speech.Recognition.SpeechRecognizer> </xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarCompleted?displayProperty=fullName> </xref:System.Speech.Recognition.SpeechRecognitionEngine> Händelserna som aktiveras när anrop till den `LoadGrammarAsync` metoder slutföra.       Att hämta information om den <xref:System.Speech.Recognition.Grammar>objekt som har lästs in, åtkomst till den <xref:System.Speech.Recognition.LoadGrammarCompletedEventArgs.Grammar%2A>egenskap i hanteraren för händelsen.</xref:System.Speech.Recognition.LoadGrammarCompletedEventArgs.Grammar%2A> </xref:System.Speech.Recognition.Grammar>       Om tolken påträffar ett undantag under åtgärden, den <xref:System.ComponentModel.AsyncCompletedEventArgs.Error%2A>egenskap är inställd på undantaget och <xref:System.Speech.Recognition.Grammar.Loaded%2A>-egenskapen för den associerade <xref:System.Speech.Recognition.Grammar>kanske `false`.</xref:System.Speech.Recognition.Grammar> </xref:System.Speech.Recognition.Grammar.Loaded%2A> </xref:System.ComponentModel.AsyncCompletedEventArgs.Error%2A>"
  example:
  - "The following example creates a shared speech recognizer, and then creates two types of grammars for recognizing specific words and for accepting free dictation. The example asynchronously loads all the created grammars to the recognizer.  Handlers for the recognizer's <xref:System.Speech.Recognition.SpeechRecognizer.LoadGrammarCompleted> and <xref:System.Speech.Recognition.SpeechRecognizer.SpeechRecognized> events report the results of recognition and which grammar was used to perform the recognition.  \n  \n```c#  \nusing System;  \nusing System.Speech.Recognition;  \n  \nnamespace SampleRecognition  \n{  \n  class Program  \n  {  \n    private static SpeechRecognizer recognizer;  \n    public static void Main(string[] args)  \n    {  \n  \n      // Initialize a shared speech recognition engine.  \n      recognizer = new SpeechRecognizer();  \n  \n        // Add a handler for the LoadGrammarCompleted event.  \n        recognizer.LoadGrammarCompleted +=  \n          new EventHandler<LoadGrammarCompletedEventArgs>(recognizer_LoadGrammarCompleted);  \n  \n        // Add a handler for the SpeechRecognized event.  \n        recognizer.SpeechRecognized +=  \n          new EventHandler<SpeechRecognizedEventArgs>(recognizer_SpeechRecognized);  \n  \n        // Add a handler for the StateChanged event.  \n        recognizer.StateChanged +=  \n          new EventHandler<StateChangedEventArgs>(recognizer_StateChanged);  \n  \n        // Create the \"yesno\" grammar and build it into a Grammar object.  \n        Choices yesChoices = new Choices(new string[] { \"yes\", \"yup\", \"yah}\" });  \n        SemanticResultValue yesValue =  \n            new SemanticResultValue(yesChoices, (bool)true);  \n        Choices noChoices = new Choices(new string[] { \"no\", \"nope\", \"nah\" });  \n        SemanticResultValue noValue =  \n            new SemanticResultValue(noChoices, (bool)false);  \n        SemanticResultKey yesNoKey =  \n            new SemanticResultKey(\"yesno\", new Choices(new GrammarBuilder[] { yesValue, noValue }));  \n        Grammar yesnoGrammar = new Grammar(yesNoKey);  \n        yesnoGrammar.Name = \"yesNo\";  \n  \n        // Create the \"done\" grammar within the constructor of a Grammar object.  \n        Grammar doneGrammar =  \n        new Grammar(new GrammarBuilder(new Choices(new string[] { \"done\", \"exit\", \"quit\", \"stop\" })));  \n        doneGrammar.Name = \"Done\";  \n  \n        // Create a dictation grammar.  \n        Grammar dictation = new DictationGrammar();  \n        dictation.Name = \"Dictation\";  \n  \n        // Load grammars to the recognizer.  \n        recognizer.LoadGrammarAsync(yesnoGrammar);  \n        recognizer.LoadGrammarAsync(doneGrammar);  \n        recognizer.LoadGrammarAsync(dictation);  \n  \n        // Keep the console window open.  \n        Console.ReadLine();  \n      }  \n  \n    // Handle the SpeechRecognized event.  \n    static void recognizer_SpeechRecognized(object sender, SpeechRecognizedEventArgs e)  \n    {  \n      Console.WriteLine(\"Grammar({0}): {1}\", e.Result.Grammar.Name, e.Result.Text);  \n  \n      // Add event handler code here.  \n    }  \n  \n    // Handle the LoadGrammarCompleted event.   \n    static void recognizer_LoadGrammarCompleted(object sender, LoadGrammarCompletedEventArgs e)  \n    {  \n      string grammarName = e.Grammar.Name;  \n      bool grammarLoaded = e.Grammar.Loaded;  \n  \n      if (e.Error != null)  \n      {  \n  \n        Console.WriteLine(\"LoadGrammar for {0} failed with a {1}.\",  \n        grammarName, e.Error.GetType().Name);  \n  \n        // Add exception handling code here.  \n      }  \n  \n      Console.WriteLine(\"Grammar {0} {1} loaded.\",  \n      grammarName, (grammarLoaded) ? \"is\" : \"is not\");  \n    }  \n  \n    // Put the shared speech recognizer into \"listening\" mode.   \n    static void recognizer_StateChanged(object sender, StateChangedEventArgs e)  \n    {  \n      if (e.RecognizerState != RecognizerState.Stopped)  \n      {  \n        recognizer.EmulateRecognizeAsync(\"Start listening\");  \n      }  \n    }  \n  }  \n}  \n  \n```"
  syntax:
    content: 'public class LoadGrammarCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs'
  inheritance:
  - System.ComponentModel.AsyncCompletedEventArgs
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Speech.Recognition.LoadGrammarCompletedEventArgs.Grammar
  id: Grammar
  parent: System.Speech.Recognition.LoadGrammarCompletedEventArgs
  langs:
  - csharp
  name: Grammar
  nameWithType: LoadGrammarCompletedEventArgs.Grammar
  fullName: System.Speech.Recognition.LoadGrammarCompletedEventArgs.Grammar
  type: Property
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "Den <xref href=&quot;System.Speech.Recognition.Grammar&quot;> </xref> objekt som har lästs."
  remarks: "Om tolken påträffar ett undantag under åtgärden, den <xref:System.ComponentModel.AsyncCompletedEventArgs.Error%2A>egenskap är inställd på undantaget och <xref:System.Speech.Recognition.Grammar.Loaded%2A>-egenskapen för den associerade <xref:System.Speech.Recognition.Grammar>kanske `false`.</xref:System.Speech.Recognition.Grammar> </xref:System.Speech.Recognition.Grammar.Loaded%2A> </xref:System.ComponentModel.AsyncCompletedEventArgs.Error%2A>"
  syntax:
    content: public System.Speech.Recognition.Grammar Grammar { get; }
    return:
      type: System.Speech.Recognition.Grammar
      description: "Den <xref href=&quot;System.Speech.Recognition.Grammar&quot;> </xref> som har lästs in av tolken."
  overload: System.Speech.Recognition.LoadGrammarCompletedEventArgs.Grammar*
  exceptions: []
  platform:
  - net462
references:
- uid: System.ComponentModel.AsyncCompletedEventArgs
  isExternal: false
  name: System.ComponentModel.AsyncCompletedEventArgs
- uid: System.Speech.Recognition.LoadGrammarCompletedEventArgs.Grammar
  parent: System.Speech.Recognition.LoadGrammarCompletedEventArgs
  isExternal: false
  name: Grammar
  nameWithType: LoadGrammarCompletedEventArgs.Grammar
  fullName: System.Speech.Recognition.LoadGrammarCompletedEventArgs.Grammar
- uid: System.Speech.Recognition.Grammar
  parent: System.Speech.Recognition
  isExternal: false
  name: Grammar
  nameWithType: Grammar
  fullName: System.Speech.Recognition.Grammar
- uid: System.Speech.Recognition.LoadGrammarCompletedEventArgs.Grammar*
  parent: System.Speech.Recognition.LoadGrammarCompletedEventArgs
  isExternal: false
  name: Grammar
  nameWithType: LoadGrammarCompletedEventArgs.Grammar
