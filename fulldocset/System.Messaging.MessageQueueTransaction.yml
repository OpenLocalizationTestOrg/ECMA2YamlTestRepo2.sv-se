### YamlMime:ManagedReference
items:
- uid: System.Messaging.MessageQueueTransaction
  id: MessageQueueTransaction
  children:
  - System.Messaging.MessageQueueTransaction.#ctor
  - System.Messaging.MessageQueueTransaction.Abort
  - System.Messaging.MessageQueueTransaction.Begin
  - System.Messaging.MessageQueueTransaction.Commit
  - System.Messaging.MessageQueueTransaction.Dispose
  - System.Messaging.MessageQueueTransaction.Dispose(System.Boolean)
  - System.Messaging.MessageQueueTransaction.Finalize
  - System.Messaging.MessageQueueTransaction.Status
  langs:
  - csharp
  name: MessageQueueTransaction
  nameWithType: MessageQueueTransaction
  fullName: System.Messaging.MessageQueueTransaction
  type: Class
  summary: "Ger en meddelandeköns interna transaktion."
  remarks: "För att skicka eller ta emot ett meddelande som en del av en transaktion, kan du använda klassen MessageQueueTransaction att skapa en transaktion och skicka den till en överlagring för den <xref:System.Messaging.MessageQueue.Send%2A?displayProperty=fullName>metoden eller <xref:System.Messaging.MessageQueue.Receive%2A?displayProperty=fullName>metod som tar en `transaction` parameter.</xref:System.Messaging.MessageQueue.Receive%2A?displayProperty=fullName> </xref:System.Messaging.MessageQueue.Send%2A?displayProperty=fullName> Meddelanden som skickas som en del av en transaktion måste skickas till transaktionella köer. Meddelanden som tagits emot från transaktionella köer måste tas emot med en angiven transaktion.       Förutom den <xref:System.Messaging.MessageQueue.Receive%2A>metoden, du kan ta emot meddelanden med en angiven eller angivna sambandsidentifieraren.</xref:System.Messaging.MessageQueue.Receive%2A> Finns det <xref:System.Messaging.MessageQueue.ReceiveById%2A>och <xref:System.Messaging.MessageQueue.ReceiveByCorrelationId%2A>metoder för mer information om selektivt ta emot meddelanden från ske med transaktionella köer.</xref:System.Messaging.MessageQueue.ReceiveByCorrelationId%2A> </xref:System.Messaging.MessageQueue.ReceiveById%2A>       Meddelanden som skickas till ske med transaktionella köer tas bort om genomförs transaktionen. På samma sätt returneras som tagits emot från transaktionella köer till kön om transaktionen återställs.       Om du vill skapa en instans av en MessageQueueTransaction och skickar den till en tillämplig överlagring för <xref:System.Messaging.MessageQueue.Send%2A>metoden eller <xref:System.Messaging.MessageQueue.Receive%2A>metod för att skicka ett meddelande till en icke-transaktionell kö eller ett meddelande från en icke-transaktionell kö metoden genererar ett undantag som anger &quot;Felaktig användning av transaktion.&quot;</xref:System.Messaging.MessageQueue.Receive%2A> </xref:System.Messaging.MessageQueue.Send%2A>       [Visual Basic]       MessageQueueTransaction trådmodell apartment-medveten, så om din inneslutningstillstånd är `STA`, du kan inte använda transaktionen i flera trådar. Visual Basic anger tillståndet för huvudtråden till `STA`, så du måste tillämpa de <xref:System.MTAThreadAttribute>i den `Main` subrutin.</xref:System.MTAThreadAttribute> I annat fall skickar transaktionsmeddelanden definieras med hjälp av en annan tråd utlöser en <xref:System.Messaging.MessageQueueException>undantag.</xref:System.Messaging.MessageQueueException> Du använder den <xref:System.MTAThreadAttribute>med hjälp av följande fragment.</xref:System.MTAThreadAttribute>      ```   <System.MTAThreadAttribute>    public sub Main()   ```      ```vb#      ```"
  syntax:
    content: 'public class MessageQueueTransaction : IDisposable'
  inheritance:
  - System.Object
  implements:
  - System.IDisposable
  inheritedMembers: []
  platform:
  - net462
- uid: System.Messaging.MessageQueueTransaction.#ctor
  id: '#ctor'
  parent: System.Messaging.MessageQueueTransaction
  langs:
  - csharp
  name: MessageQueueTransaction()
  nameWithType: MessageQueueTransaction.MessageQueueTransaction()
  fullName: System.Messaging.MessageQueueTransaction.MessageQueueTransaction()
  type: Constructor
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Initierar en ny instans av den <xref href=&quot;System.Messaging.MessageQueueTransaction&quot;> </xref> klass."
  remarks: "Den här konstruktorn anger den <xref:System.Messaging.MessageQueueTransaction.Status%2A>egenskapen `Initialized`.</xref:System.Messaging.MessageQueueTransaction.Status%2A>"
  syntax:
    content: public MessageQueueTransaction ();
    parameters: []
  overload: System.Messaging.MessageQueueTransaction.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Messaging.MessageQueueTransaction.Abort
  id: Abort
  parent: System.Messaging.MessageQueueTransaction
  langs:
  - csharp
  name: Abort()
  nameWithType: MessageQueueTransaction.Abort()
  fullName: System.Messaging.MessageQueueTransaction.Abort()
  type: Method
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Återställer den väntande interna transaktionen."
  remarks: "Avbryt markerar misslyckade slutförandet av en process som börjat vid ett anrop till <xref:System.Messaging.MessageQueueTransaction.Begin%2A>.</xref:System.Messaging.MessageQueueTransaction.Begin%2A>       Normalt en gör ett anrop till <xref:System.Messaging.MessageQueueTransaction.Begin%2A>inom en `Try...Catch` undantagshantering block, ger ett anrop till <xref:System.Messaging.MessageQueueTransaction.Commit%2A>i den `Try` -sats och ett anrop till avbrott i den `Catch` satsen.</xref:System.Messaging.MessageQueueTransaction.Commit%2A> </xref:System.Messaging.MessageQueueTransaction.Begin%2A>       Avbryt återställer hela transaktionen. Detta omfattar alla meddelanden som skickas eller tas emot efter anropet till <xref:System.Messaging.MessageQueueTransaction.Begin%2A>.</xref:System.Messaging.MessageQueueTransaction.Begin%2A>"
  syntax:
    content: public void Abort ();
    parameters: []
  overload: System.Messaging.MessageQueueTransaction.Abort*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Den interna transaktionen som du försöker återställa har inte startats."
  - type: System.Messaging.MessageQueueException
    commentId: T:System.Messaging.MessageQueueException
    description: "Ett internt MSMQ-fel inträffar."
  platform:
  - net462
- uid: System.Messaging.MessageQueueTransaction.Begin
  id: Begin
  parent: System.Messaging.MessageQueueTransaction
  langs:
  - csharp
  name: Begin()
  nameWithType: MessageQueueTransaction.Begin()
  fullName: System.Messaging.MessageQueueTransaction.Begin()
  type: Method
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Startar en ny meddelandeköns interna transaktion."
  remarks: "Börja markerar starten av bearbetning som ska bekräftats eller återställts, beroende på genomförandet av transaktionen. Om det uppstår ett undantag under bearbetning, återställs hela transaktionen. Detta inkluderar alla meddelanden som skickas eller tas emot efter anropet till Begin.       Normalt en gör ett anrop till Begin inom en `Try...Catch` undantagshantering block, ger ett anrop till <xref:System.Messaging.MessageQueueTransaction.Commit%2A>i den `Try` -sats och ett anrop till <xref:System.Messaging.MessageQueueTransaction.Abort%2A>i den `Catch` satsen.</xref:System.Messaging.MessageQueueTransaction.Abort%2A> </xref:System.Messaging.MessageQueueTransaction.Commit%2A>"
  syntax:
    content: public void Begin ();
    parameters: []
  overload: System.Messaging.MessageQueueTransaction.Begin*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Transaktionen har redan startats."
  - type: System.Messaging.MessageQueueException
    commentId: T:System.Messaging.MessageQueueException
    description: "Ett internt MSMQ-fel inträffar."
  platform:
  - net462
- uid: System.Messaging.MessageQueueTransaction.Commit
  id: Commit
  parent: System.Messaging.MessageQueueTransaction
  langs:
  - csharp
  name: Commit()
  nameWithType: MessageQueueTransaction.Commit()
  fullName: System.Messaging.MessageQueueTransaction.Commit()
  type: Method
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Genomför en intern transaktion."
  remarks: "Commit markerar slutförande av bearbetningen startat vid ett anrop till <xref:System.Messaging.MessageQueueTransaction.Begin%2A>.</xref:System.Messaging.MessageQueueTransaction.Begin%2A> Om ett undantag inträffar mellan anropet den <xref:System.Messaging.MessageQueueTransaction.Begin%2A>och anrop till Commit hela transaktionen återställs.</xref:System.Messaging.MessageQueueTransaction.Begin%2A> Detta omfattar alla meddelanden som skickas eller tas emot efter anropet till <xref:System.Messaging.MessageQueueTransaction.Begin%2A>.</xref:System.Messaging.MessageQueueTransaction.Begin%2A>       Normalt en gör ett anrop till <xref:System.Messaging.MessageQueueTransaction.Begin%2A>inom en `Try...Catch` undantagshantering block, ger ett anrop till Commit den `Try` -sats och ett anrop till <xref:System.Messaging.MessageQueueTransaction.Abort%2A>i den `Catch` satsen.</xref:System.Messaging.MessageQueueTransaction.Abort%2A> </xref:System.Messaging.MessageQueueTransaction.Begin%2A>"
  syntax:
    content: public void Commit ();
    parameters: []
  overload: System.Messaging.MessageQueueTransaction.Commit*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Du försöker att genomföra transaktionen har inte startats."
  - type: System.Messaging.MessageQueueException
    commentId: T:System.Messaging.MessageQueueException
    description: "Ett internt MSMQ-fel inträffar."
  platform:
  - net462
- uid: System.Messaging.MessageQueueTransaction.Dispose
  id: Dispose
  parent: System.Messaging.MessageQueueTransaction
  langs:
  - csharp
  name: Dispose()
  nameWithType: MessageQueueTransaction.Dispose()
  fullName: System.Messaging.MessageQueueTransaction.Dispose()
  type: Method
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Frigör alla resurser som används av den <xref href=&quot;System.Messaging.MessageQueueTransaction&quot;> </xref>."
  remarks: "Anropar Dispose tillåter resurserna som används av den <xref:System.Messaging.MessageQueueTransaction>att fördelas för andra ändamål.</xref:System.Messaging.MessageQueueTransaction> Mer information om `Dispose`, se [Rensa ohanterade resurser](~/add/includes/ajax-current-ext-md.md).       Väntande interna transaktioner återställs av Dispose."
  syntax:
    content: public void Dispose ();
    parameters: []
  overload: System.Messaging.MessageQueueTransaction.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Messaging.MessageQueueTransaction.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.Messaging.MessageQueueTransaction
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: MessageQueueTransaction.Dispose(Boolean)
  fullName: System.Messaging.MessageQueueTransaction.Dispose(Boolean)
  type: Method
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Släpper de ohanterade resurser som används av den <xref href=&quot;System.Messaging.MessageQueueTransaction&quot;> </xref> och släpper du de hantera resurserna."
  remarks: "Den här metoden anropas av allmänheten <xref:System.Messaging.MessageQueueTransaction.Dispose%2A>metoden och <xref:System.Object.Finalize%2A>metod.</xref:System.Object.Finalize%2A> </xref:System.Messaging.MessageQueueTransaction.Dispose%2A> `Dispose`anropar den skyddade `Dispose(Boolean)` metod med den `disposing` parametern `true`. <xref:System.Object.Finalize%2A>anropar `Dispose` med `disposing` inställd på `false`.</xref:System.Object.Finalize%2A>       När den `disposing` parametern är `true`, den här metoden Frigör alla resurser som innehas av alla hanterade objekt som den här <xref:System.Messaging.MessageQueueTransaction>referenser.</xref:System.Messaging.MessageQueueTransaction> Den här metoden startar den `Dispose` metod för varje refererade till objekt."
  syntax:
    content: protected virtual void Dispose (bool disposing);
    parameters:
    - id: disposing
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Frisläpp både hanterade och ohanterade resurser. <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> att släppa endast resurser som inte hanteras."
  overload: System.Messaging.MessageQueueTransaction.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Messaging.MessageQueueTransaction.Finalize
  id: Finalize
  parent: System.Messaging.MessageQueueTransaction
  langs:
  - csharp
  name: Finalize()
  nameWithType: MessageQueueTransaction.Finalize()
  fullName: System.Messaging.MessageQueueTransaction.Finalize()
  type: Method
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Släpper de resurser som innehas av den aktuella instansen."
  remarks: "Den här metoden åsidosätter <xref:System.Object.Finalize%2A?displayProperty=fullName>.</xref:System.Object.Finalize%2A?displayProperty=fullName> Programkod bör inte anropa den här metoden. ett objekt Finalize-metoden anropas automatiskt under skräpinsamling, såvida inte slutförande av skräpinsamlingen har inaktiverats av ett anrop till den <xref:System.GC.SuppressFinalize%2A?displayProperty=fullName>metoden.</xref:System.GC.SuppressFinalize%2A?displayProperty=fullName>       Mer information finns i [Finalize-metoderna och destruktorer](http://msdn.microsoft.com/en-us/fd376774-1643-499b-869e-9546a3aeea70), [rengöras ohanterade resurser](~/add/includes/ajax-current-ext-md.md), och [åsidosätter metoden Slutför](http://msdn.microsoft.com/en-us/8026cb68-fe93-43fc-96c1-c09ad7d64cd3)."
  syntax:
    content: ~MessageQueueTransaction ();
    parameters: []
  overload: System.Messaging.MessageQueueTransaction.Finalize*
  exceptions: []
  platform:
  - net462
- uid: System.Messaging.MessageQueueTransaction.Status
  id: Status
  parent: System.Messaging.MessageQueueTransaction
  langs:
  - csharp
  name: Status
  nameWithType: MessageQueueTransaction.Status
  fullName: System.Messaging.MessageQueueTransaction.Status
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Hämtar status för transaktionen."
  remarks: "När en instans av den <xref:System.Messaging.MessageQueueTransaction>klass har skapats, statusen ställs in av konstruktorn `Initialized`.</xref:System.Messaging.MessageQueueTransaction> Efter ett anrop till <xref:System.Messaging.MessageQueueTransaction.Begin%2A>innan ett anrop till <xref:System.Messaging.MessageQueueTransaction.Commit%2A>eller <xref:System.Messaging.MessageQueueTransaction.Abort%2A>, Status är `Pending`.</xref:System.Messaging.MessageQueueTransaction.Abort%2A> </xref:System.Messaging.MessageQueueTransaction.Commit%2A> </xref:System.Messaging.MessageQueueTransaction.Begin%2A>"
  syntax:
    content: public System.Messaging.MessageQueueTransactionStatus Status { get; }
    return:
      type: System.Messaging.MessageQueueTransactionStatus
      description: "En av de <xref href=&quot;System.Messaging.MessageQueueTransactionStatus&quot;> </xref> värden som anger om transaktionen genomförts, avbröts, initiera eller väntar."
  overload: System.Messaging.MessageQueueTransaction.Status*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.Messaging.MessageQueueException
  parent: System.Messaging
  isExternal: false
  name: MessageQueueException
  nameWithType: MessageQueueException
  fullName: System.Messaging.MessageQueueException
- uid: System.Messaging.MessageQueueTransaction.#ctor
  parent: System.Messaging.MessageQueueTransaction
  isExternal: false
  name: MessageQueueTransaction()
  nameWithType: MessageQueueTransaction.MessageQueueTransaction()
  fullName: System.Messaging.MessageQueueTransaction.MessageQueueTransaction()
- uid: System.Messaging.MessageQueueTransaction.Abort
  parent: System.Messaging.MessageQueueTransaction
  isExternal: false
  name: Abort()
  nameWithType: MessageQueueTransaction.Abort()
  fullName: System.Messaging.MessageQueueTransaction.Abort()
- uid: System.Messaging.MessageQueueTransaction.Begin
  parent: System.Messaging.MessageQueueTransaction
  isExternal: false
  name: Begin()
  nameWithType: MessageQueueTransaction.Begin()
  fullName: System.Messaging.MessageQueueTransaction.Begin()
- uid: System.Messaging.MessageQueueTransaction.Commit
  parent: System.Messaging.MessageQueueTransaction
  isExternal: false
  name: Commit()
  nameWithType: MessageQueueTransaction.Commit()
  fullName: System.Messaging.MessageQueueTransaction.Commit()
- uid: System.Messaging.MessageQueueTransaction.Dispose
  parent: System.Messaging.MessageQueueTransaction
  isExternal: false
  name: Dispose()
  nameWithType: MessageQueueTransaction.Dispose()
  fullName: System.Messaging.MessageQueueTransaction.Dispose()
- uid: System.Messaging.MessageQueueTransaction.Dispose(System.Boolean)
  parent: System.Messaging.MessageQueueTransaction
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: MessageQueueTransaction.Dispose(Boolean)
  fullName: System.Messaging.MessageQueueTransaction.Dispose(Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Messaging.MessageQueueTransaction.Finalize
  parent: System.Messaging.MessageQueueTransaction
  isExternal: false
  name: Finalize()
  nameWithType: MessageQueueTransaction.Finalize()
  fullName: System.Messaging.MessageQueueTransaction.Finalize()
- uid: System.Messaging.MessageQueueTransaction.Status
  parent: System.Messaging.MessageQueueTransaction
  isExternal: false
  name: Status
  nameWithType: MessageQueueTransaction.Status
  fullName: System.Messaging.MessageQueueTransaction.Status
- uid: System.Messaging.MessageQueueTransactionStatus
  parent: System.Messaging
  isExternal: false
  name: MessageQueueTransactionStatus
  nameWithType: MessageQueueTransactionStatus
  fullName: System.Messaging.MessageQueueTransactionStatus
- uid: System.Messaging.MessageQueueTransaction.#ctor*
  parent: System.Messaging.MessageQueueTransaction
  isExternal: false
  name: MessageQueueTransaction
  nameWithType: MessageQueueTransaction.MessageQueueTransaction
- uid: System.Messaging.MessageQueueTransaction.Abort*
  parent: System.Messaging.MessageQueueTransaction
  isExternal: false
  name: Abort
  nameWithType: MessageQueueTransaction.Abort
- uid: System.Messaging.MessageQueueTransaction.Begin*
  parent: System.Messaging.MessageQueueTransaction
  isExternal: false
  name: Begin
  nameWithType: MessageQueueTransaction.Begin
- uid: System.Messaging.MessageQueueTransaction.Commit*
  parent: System.Messaging.MessageQueueTransaction
  isExternal: false
  name: Commit
  nameWithType: MessageQueueTransaction.Commit
- uid: System.Messaging.MessageQueueTransaction.Dispose*
  parent: System.Messaging.MessageQueueTransaction
  isExternal: false
  name: Dispose
  nameWithType: MessageQueueTransaction.Dispose
- uid: System.Messaging.MessageQueueTransaction.Finalize*
  parent: System.Messaging.MessageQueueTransaction
  isExternal: false
  name: Finalize
  nameWithType: MessageQueueTransaction.Finalize
- uid: System.Messaging.MessageQueueTransaction.Status*
  parent: System.Messaging.MessageQueueTransaction
  isExternal: false
  name: Status
  nameWithType: MessageQueueTransaction.Status
