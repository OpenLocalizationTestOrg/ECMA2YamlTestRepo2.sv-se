### YamlMime:ManagedReference
items:
- uid: System.Data.Linq.ChangeConflictCollection
  id: ChangeConflictCollection
  children:
  - System.Data.Linq.ChangeConflictCollection.Clear
  - System.Data.Linq.ChangeConflictCollection.Contains(System.Data.Linq.ObjectChangeConflict)
  - System.Data.Linq.ChangeConflictCollection.CopyTo(System.Data.Linq.ObjectChangeConflict[],System.Int32)
  - System.Data.Linq.ChangeConflictCollection.Count
  - System.Data.Linq.ChangeConflictCollection.GetEnumerator
  - System.Data.Linq.ChangeConflictCollection.Item(System.Int32)
  - System.Data.Linq.ChangeConflictCollection.Remove(System.Data.Linq.ObjectChangeConflict)
  - System.Data.Linq.ChangeConflictCollection.ResolveAll(System.Data.Linq.RefreshMode)
  - System.Data.Linq.ChangeConflictCollection.ResolveAll(System.Data.Linq.RefreshMode,System.Boolean)
  - System.Data.Linq.ChangeConflictCollection.System#Collections#Generic#ICollection{System#Data#Linq#ObjectChangeConflict}#Add(System.Data.Linq.ObjectChangeConflict)
  - System.Data.Linq.ChangeConflictCollection.System#Collections#Generic#ICollection{System#Data#Linq#ObjectChangeConflict}#IsReadOnly
  - System.Data.Linq.ChangeConflictCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  - System.Data.Linq.ChangeConflictCollection.System#Collections#ICollection#IsSynchronized
  - System.Data.Linq.ChangeConflictCollection.System#Collections#ICollection#SyncRoot
  - System.Data.Linq.ChangeConflictCollection.System#Collections#IEnumerable#GetEnumerator
  langs:
  - csharp
  name: ChangeConflictCollection
  nameWithType: ChangeConflictCollection
  fullName: System.Data.Linq.ChangeConflictCollection
  type: Class
  summary: "Returnerar en uppsättning objekt ingår i samtidighetskonflikter."
  remarks: ''
  example:
  - "In the following example that retrieves information about objects in conflict, `db.ChangeConflicts` represents the collection of those objects.  \n  \n [!code-cs[System.Data.Linq.ObjectChangeConflict#1](~/add/codesnippet/csharp/objconflict/program.cs#1)]\n [!code-vb[System.Data.Linq.ObjectChangeConflict#1](~/add/codesnippet/visualbasic/objconflict/module1.vb#1)]"
  syntax:
    content: 'public sealed class ChangeConflictCollection : System.Collections.Generic.ICollection<System.Data.Linq.ObjectChangeConflict>, System.Collections.Generic.IEnumerable<System.Data.Linq.ObjectChangeConflict>, System.Collections.ICollection'
  inheritance:
  - System.Object
  implements:
  - System.Collections.Generic.ICollection<System.Data.Linq.ObjectChangeConflict>
  - System.Collections.Generic.IEnumerable<System.Data.Linq.ObjectChangeConflict>
  - System.Collections.ICollection
  inheritedMembers: []
  platform:
  - net462
- uid: System.Data.Linq.ChangeConflictCollection.Clear
  id: Clear
  parent: System.Data.Linq.ChangeConflictCollection
  langs:
  - csharp
  name: Clear()
  nameWithType: ChangeConflictCollection.Clear()
  fullName: System.Data.Linq.ChangeConflictCollection.Clear()
  type: Method
  assemblies:
  - System.Data.Linq
  namespace: System.Data.Linq
  summary: "Tar bort alla konflikter från samlingen."
  syntax:
    content: public void Clear ();
    parameters: []
  overload: System.Data.Linq.ChangeConflictCollection.Clear*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Linq.ChangeConflictCollection.Contains(System.Data.Linq.ObjectChangeConflict)
  id: Contains(System.Data.Linq.ObjectChangeConflict)
  parent: System.Data.Linq.ChangeConflictCollection
  langs:
  - csharp
  name: Contains(ObjectChangeConflict)
  nameWithType: ChangeConflictCollection.Contains(ObjectChangeConflict)
  fullName: System.Data.Linq.ChangeConflictCollection.Contains(ObjectChangeConflict)
  type: Method
  assemblies:
  - System.Data.Linq
  namespace: System.Data.Linq
  summary: "Anger om en viss konflikt är medlem i samlingen."
  syntax:
    content: public bool Contains (System.Data.Linq.ObjectChangeConflict item);
    parameters:
    - id: item
      type: System.Data.Linq.ObjectChangeConflict
      description: "Den angivna konflikten."
    return:
      type: System.Boolean
      description: "Returnerar true om den angivna konflikten är medlem i samlingen."
  overload: System.Data.Linq.ChangeConflictCollection.Contains*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Linq.ChangeConflictCollection.CopyTo(System.Data.Linq.ObjectChangeConflict[],System.Int32)
  id: CopyTo(System.Data.Linq.ObjectChangeConflict[],System.Int32)
  parent: System.Data.Linq.ChangeConflictCollection
  langs:
  - csharp
  name: CopyTo(ObjectChangeConflict[],Int32)
  nameWithType: ChangeConflictCollection.CopyTo(ObjectChangeConflict[],Int32)
  fullName: System.Data.Linq.ChangeConflictCollection.CopyTo(ObjectChangeConflict[],Int32)
  type: Method
  assemblies:
  - System.Data.Linq
  namespace: System.Data.Linq
  summary: "En beskrivning av den här medlemmen finns <xref:System.Collections.ICollection.CopyTo*>.</xref:System.Collections.ICollection.CopyTo*>"
  remarks: "Kopierar element i samlingen till en matris.       Den här medlemmen är en implementering för medlem av explicit gränssnitt. Det kan användas endast när den <xref:System.Data.Linq.ChangeConflictCollection>instans omvandlas till ett <xref:System.Collections.ICollection>gränssnitt.</xref:System.Collections.ICollection> </xref:System.Data.Linq.ChangeConflictCollection>"
  syntax:
    content: public void CopyTo (System.Data.Linq.ObjectChangeConflict[] array, int arrayIndex);
    parameters:
    - id: array
      type: System.Data.Linq.ObjectChangeConflict[]
      description: "Kopiera till matrisen."
    - id: arrayIndex
      type: System.Int32
      description: "Index för egenskapsmatris där kopian är att starta."
  overload: System.Data.Linq.ChangeConflictCollection.CopyTo*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Linq.ChangeConflictCollection.Count
  id: Count
  parent: System.Data.Linq.ChangeConflictCollection
  langs:
  - csharp
  name: Count
  nameWithType: ChangeConflictCollection.Count
  fullName: System.Data.Linq.ChangeConflictCollection.Count
  type: Property
  assemblies:
  - System.Data.Linq
  namespace: System.Data.Linq
  summary: "Returnerar antalet konflikter i samlingen"
  syntax:
    content: public int Count { get; }
    return:
      type: System.Int32
      description: "heltal"
  overload: System.Data.Linq.ChangeConflictCollection.Count*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Linq.ChangeConflictCollection.GetEnumerator
  id: GetEnumerator
  parent: System.Data.Linq.ChangeConflictCollection
  langs:
  - csharp
  name: GetEnumerator()
  nameWithType: ChangeConflictCollection.GetEnumerator()
  fullName: System.Data.Linq.ChangeConflictCollection.GetEnumerator()
  type: Method
  assemblies:
  - System.Data.Linq
  namespace: System.Data.Linq
  summary: "Returnerar uppräknaren för samlingen."
  syntax:
    content: public System.Collections.Generic.IEnumerator<System.Data.Linq.ObjectChangeConflict> GetEnumerator ();
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerator{System.Data.Linq.ObjectChangeConflict}
      description: "En uppräknare för samlingen."
  overload: System.Data.Linq.ChangeConflictCollection.GetEnumerator*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Linq.ChangeConflictCollection.Item(System.Int32)
  id: Item(System.Int32)
  parent: System.Data.Linq.ChangeConflictCollection
  langs:
  - csharp
  name: Item(Int32)
  nameWithType: ChangeConflictCollection.Item(Int32)
  fullName: System.Data.Linq.ChangeConflictCollection.Item(Int32)
  type: Property
  assemblies:
  - System.Data.Linq
  namespace: System.Data.Linq
  summary: "Returnerar ett objekt i konflikt."
  syntax:
    content: public System.Data.Linq.ObjectChangeConflict this[int index] { get; }
    parameters:
    - id: index
      type: System.Int32
      description: "Index i samlingen för objekt i konflikt."
    return:
      type: System.Data.Linq.ObjectChangeConflict
      description: "En <xref href=&quot;System.Data.Linq.ObjectChangeConflict&quot;> </xref> som representerar objekt i konflikt."
  overload: System.Data.Linq.ChangeConflictCollection.Item*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Linq.ChangeConflictCollection.Remove(System.Data.Linq.ObjectChangeConflict)
  id: Remove(System.Data.Linq.ObjectChangeConflict)
  parent: System.Data.Linq.ChangeConflictCollection
  langs:
  - csharp
  name: Remove(ObjectChangeConflict)
  nameWithType: ChangeConflictCollection.Remove(ObjectChangeConflict)
  fullName: System.Data.Linq.ChangeConflictCollection.Remove(ObjectChangeConflict)
  type: Method
  assemblies:
  - System.Data.Linq
  namespace: System.Data.Linq
  summary: "Anger om den angivna konflikten tas bort från samlingen."
  syntax:
    content: public bool Remove (System.Data.Linq.ObjectChangeConflict item);
    parameters:
    - id: item
      type: System.Data.Linq.ObjectChangeConflict
      description: "Konflikt ska tas bort."
    return:
      type: System.Boolean
      description: "Returnerar true om den <xref href=&quot;System.Data.Linq.ObjectChangeConflict&quot;> </xref> tas bort från samlingen."
  overload: System.Data.Linq.ChangeConflictCollection.Remove*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Linq.ChangeConflictCollection.ResolveAll(System.Data.Linq.RefreshMode)
  id: ResolveAll(System.Data.Linq.RefreshMode)
  parent: System.Data.Linq.ChangeConflictCollection
  langs:
  - csharp
  name: ResolveAll(RefreshMode)
  nameWithType: ChangeConflictCollection.ResolveAll(RefreshMode)
  fullName: System.Data.Linq.ChangeConflictCollection.ResolveAll(RefreshMode)
  type: Method
  assemblies:
  - System.Data.Linq
  namespace: System.Data.Linq
  summary: "Löser alla konflikter i samlingen med hjälp av angivna strategin."
  syntax:
    content: public void ResolveAll (System.Data.Linq.RefreshMode mode);
    parameters:
    - id: mode
      type: System.Data.Linq.RefreshMode
      description: "Ett av alternativen i <xref href=&quot;System.Data.Linq.RefreshMode&quot;> </xref>."
  overload: System.Data.Linq.ChangeConflictCollection.ResolveAll*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Linq.ChangeConflictCollection.ResolveAll(System.Data.Linq.RefreshMode,System.Boolean)
  id: ResolveAll(System.Data.Linq.RefreshMode,System.Boolean)
  parent: System.Data.Linq.ChangeConflictCollection
  langs:
  - csharp
  name: ResolveAll(RefreshMode,Boolean)
  nameWithType: ChangeConflictCollection.ResolveAll(RefreshMode,Boolean)
  fullName: System.Data.Linq.ChangeConflictCollection.ResolveAll(RefreshMode,Boolean)
  type: Method
  assemblies:
  - System.Data.Linq
  namespace: System.Data.Linq
  summary: "Löser alla konflikter i samlingen med hjälp av angivna strategin."
  syntax:
    content: public void ResolveAll (System.Data.Linq.RefreshMode mode, bool autoResolveDeletes);
    parameters:
    - id: mode
      type: System.Data.Linq.RefreshMode
      description: "Strategin för att använda för att lösa konflikten."
    - id: autoResolveDeletes
      type: System.Boolean
      description: "Om värdet är true löser automatiskt konflikter som uppstår vid en ändrade objektet är inte längre i databasen."
  overload: System.Data.Linq.ChangeConflictCollection.ResolveAll*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Linq.ChangeConflictCollection.System#Collections#Generic#ICollection{System#Data#Linq#ObjectChangeConflict}#Add(System.Data.Linq.ObjectChangeConflict)
  id: System#Collections#Generic#ICollection{System#Data#Linq#ObjectChangeConflict}#Add(System.Data.Linq.ObjectChangeConflict)
  isEii: true
  parent: System.Data.Linq.ChangeConflictCollection
  langs:
  - csharp
  name: System.Collections.Generic.ICollection(ObjectChangeConflict)
  nameWithType: ChangeConflictCollection.System.Collections.Generic.ICollection(ObjectChangeConflict)
  fullName: System.Data.Linq.ChangeConflictCollection.System.Collections.Generic.ICollection(ObjectChangeConflict)
  type: Method
  assemblies:
  - System.Data.Linq
  namespace: System.Data.Linq
  syntax:
    content: void ICollection<ObjectChangeConflict>.Add (System.Data.Linq.ObjectChangeConflict item);
    parameters:
    - id: item
      type: System.Data.Linq.ObjectChangeConflict
      description: "Som ska läggas till."
  overload: System.Data.Linq.ChangeConflictCollection.System#Collections#Generic#ICollection<System#Data#Linq#ObjectChangeConflict>#Add*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Linq.ChangeConflictCollection.System#Collections#Generic#ICollection{System#Data#Linq#ObjectChangeConflict}#IsReadOnly
  id: System#Collections#Generic#ICollection{System#Data#Linq#ObjectChangeConflict}#IsReadOnly
  isEii: true
  parent: System.Data.Linq.ChangeConflictCollection
  langs:
  - csharp
  name: System.Collections.Generic.ICollection
  nameWithType: ChangeConflictCollection.System.Collections.Generic.ICollection
  fullName: System.Data.Linq.ChangeConflictCollection.System.Collections.Generic.ICollection
  type: Property
  assemblies:
  - System.Data.Linq
  namespace: System.Data.Linq
  syntax:
    content: bool System.Collections.Generic.ICollection<System.Data.Linq.ObjectChangeConflict>.IsReadOnly { get; }
    return:
      type: System.Boolean
      description: "Som ska läggas till."
  overload: System.Data.Linq.ChangeConflictCollection.System#Collections#Generic#ICollection<System#Data#Linq#ObjectChangeConflict>#IsReadOnly*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Linq.ChangeConflictCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  id: System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  isEii: true
  parent: System.Data.Linq.ChangeConflictCollection
  langs:
  - csharp
  name: System.Collections.ICollection.CopyTo(Array,Int32)
  nameWithType: ChangeConflictCollection.System.Collections.ICollection.CopyTo(Array,Int32)
  fullName: System.Data.Linq.ChangeConflictCollection.System.Collections.ICollection.CopyTo(Array,Int32)
  type: Method
  assemblies:
  - System.Data.Linq
  namespace: System.Data.Linq
  summary: "Kopierar samlingen till en matris."
  syntax:
    content: void ICollection.CopyTo (Array array, int index);
    parameters:
    - id: array
      type: System.Array
      description: "Namnet på matrisen."
    - id: index
      type: System.Int32
      description: "Index för matrisen."
  overload: System.Data.Linq.ChangeConflictCollection.System#Collections#ICollection#CopyTo*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Linq.ChangeConflictCollection.System#Collections#ICollection#IsSynchronized
  id: System#Collections#ICollection#IsSynchronized
  isEii: true
  parent: System.Data.Linq.ChangeConflictCollection
  langs:
  - csharp
  name: System.Collections.ICollection.IsSynchronized
  nameWithType: ChangeConflictCollection.System.Collections.ICollection.IsSynchronized
  fullName: System.Data.Linq.ChangeConflictCollection.System.Collections.ICollection.IsSynchronized
  type: Property
  assemblies:
  - System.Data.Linq
  namespace: System.Data.Linq
  summary: "En beskrivning av den här medlemmen finns <xref:System.Collections.ICollection.IsSynchronized*>.</xref:System.Collections.ICollection.IsSynchronized*>"
  remarks: "Den här medlemmen är en implementering för medlem av explicit gränssnitt. Det kan användas endast när den <xref:System.Data.Linq.ChangeConflictCollection>instans omvandlas till ett <xref:System.Collections.ICollection>gränssnitt.</xref:System.Collections.ICollection> </xref:System.Data.Linq.ChangeConflictCollection>"
  syntax:
    content: bool System.Collections.ICollection.IsSynchronized { get; }
    return:
      type: System.Boolean
      description: "Returnerar <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref> om åtkomst till samlingen synkroniseras (trådsäkra)."
  overload: System.Data.Linq.ChangeConflictCollection.System#Collections#ICollection#IsSynchronized*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Linq.ChangeConflictCollection.System#Collections#ICollection#SyncRoot
  id: System#Collections#ICollection#SyncRoot
  isEii: true
  parent: System.Data.Linq.ChangeConflictCollection
  langs:
  - csharp
  name: System.Collections.ICollection.SyncRoot
  nameWithType: ChangeConflictCollection.System.Collections.ICollection.SyncRoot
  fullName: System.Data.Linq.ChangeConflictCollection.System.Collections.ICollection.SyncRoot
  type: Property
  assemblies:
  - System.Data.Linq
  namespace: System.Data.Linq
  summary: "En beskrivning av den här medlemmen finns <xref:System.Collections.ICollection.IsSynchronized*>.</xref:System.Collections.ICollection.IsSynchronized*>"
  remarks: "Den här medlemmen är en implementering för medlem av explicit gränssnitt. Det kan användas endast när den <xref:System.Data.Linq.ChangeConflictCollection>instans omvandlas till ett <xref:System.Collections.ICollection>gränssnitt.</xref:System.Collections.ICollection> </xref:System.Data.Linq.ChangeConflictCollection>"
  syntax:
    content: object System.Collections.ICollection.SyncRoot { get; }
    return:
      type: System.Object
      description: "Returnerar ett objekt som kan användas för att synkronisera åtkomst till samlingen."
  overload: System.Data.Linq.ChangeConflictCollection.System#Collections#ICollection#SyncRoot*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Linq.ChangeConflictCollection.System#Collections#IEnumerable#GetEnumerator
  id: System#Collections#IEnumerable#GetEnumerator
  isEii: true
  parent: System.Data.Linq.ChangeConflictCollection
  langs:
  - csharp
  name: System.Collections.IEnumerable.GetEnumerator()
  nameWithType: ChangeConflictCollection.System.Collections.IEnumerable.GetEnumerator()
  fullName: System.Data.Linq.ChangeConflictCollection.System.Collections.IEnumerable.GetEnumerator()
  type: Method
  assemblies:
  - System.Data.Linq
  namespace: System.Data.Linq
  summary: "En beskrivning av den här medlemmen finns <xref:System.Collections.IEnumerable.GetEnumerator*>.</xref:System.Collections.IEnumerable.GetEnumerator*>"
  remarks: "Den här medlemmen är en implementering för medlem av explicit gränssnitt. Det kan användas endast när den <xref:System.Data.Linq.ChangeConflictCollection>instans omvandlas till ett <xref:System.Collections.IEnumerable>gränssnitt.</xref:System.Collections.IEnumerable> </xref:System.Data.Linq.ChangeConflictCollection>"
  syntax:
    content: System.Collections.IEnumerator IEnumerable.GetEnumerator ();
    parameters: []
    return:
      type: System.Collections.IEnumerator
      description: "En uppräknare som upprepas i en samling."
  overload: System.Data.Linq.ChangeConflictCollection.System#Collections#IEnumerable#GetEnumerator*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Data.Linq.ChangeConflictCollection.Clear
  parent: System.Data.Linq.ChangeConflictCollection
  isExternal: false
  name: Clear()
  nameWithType: ChangeConflictCollection.Clear()
  fullName: System.Data.Linq.ChangeConflictCollection.Clear()
- uid: System.Data.Linq.ChangeConflictCollection.Contains(System.Data.Linq.ObjectChangeConflict)
  parent: System.Data.Linq.ChangeConflictCollection
  isExternal: false
  name: Contains(ObjectChangeConflict)
  nameWithType: ChangeConflictCollection.Contains(ObjectChangeConflict)
  fullName: System.Data.Linq.ChangeConflictCollection.Contains(ObjectChangeConflict)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Data.Linq.ObjectChangeConflict
  parent: System.Data.Linq
  isExternal: false
  name: ObjectChangeConflict
  nameWithType: ObjectChangeConflict
  fullName: System.Data.Linq.ObjectChangeConflict
- uid: System.Data.Linq.ChangeConflictCollection.CopyTo(System.Data.Linq.ObjectChangeConflict[],System.Int32)
  parent: System.Data.Linq.ChangeConflictCollection
  isExternal: false
  name: CopyTo(ObjectChangeConflict[],Int32)
  nameWithType: ChangeConflictCollection.CopyTo(ObjectChangeConflict[],Int32)
  fullName: System.Data.Linq.ChangeConflictCollection.CopyTo(ObjectChangeConflict[],Int32)
- uid: System.Data.Linq.ObjectChangeConflict[]
  parent: System.Data.Linq
  isExternal: false
  name: ObjectChangeConflict
  nameWithType: ObjectChangeConflict
  fullName: System.Data.Linq.ObjectChangeConflict[]
  spec.csharp:
  - uid: System.Data.Linq.ObjectChangeConflict
    name: ObjectChangeConflict
    nameWithType: ObjectChangeConflict
    fullName: ObjectChangeConflict[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Data.Linq.ChangeConflictCollection.Count
  parent: System.Data.Linq.ChangeConflictCollection
  isExternal: false
  name: Count
  nameWithType: ChangeConflictCollection.Count
  fullName: System.Data.Linq.ChangeConflictCollection.Count
- uid: System.Data.Linq.ChangeConflictCollection.GetEnumerator
  parent: System.Data.Linq.ChangeConflictCollection
  isExternal: false
  name: GetEnumerator()
  nameWithType: ChangeConflictCollection.GetEnumerator()
  fullName: System.Data.Linq.ChangeConflictCollection.GetEnumerator()
- uid: System.Collections.Generic.IEnumerator{System.Data.Linq.ObjectChangeConflict}
  parent: System.Collections.Generic
  isExternal: true
  name: IEnumerator<ObjectChangeConflict>
  nameWithType: IEnumerator<ObjectChangeConflict>
  fullName: System.Collections.Generic.IEnumerator<System.Data.Linq.ObjectChangeConflict>
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: IEnumerator<System.Data.Linq.ObjectChangeConflict>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Data.Linq.ObjectChangeConflict
    name: ObjectChangeConflict
    nameWithType: ObjectChangeConflict
    fullName: ObjectChangeConflict
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Data.Linq.ChangeConflictCollection.Item(System.Int32)
  parent: System.Data.Linq.ChangeConflictCollection
  isExternal: false
  name: Item(Int32)
  nameWithType: ChangeConflictCollection.Item(Int32)
  fullName: System.Data.Linq.ChangeConflictCollection.Item(Int32)
- uid: System.Data.Linq.ChangeConflictCollection.Remove(System.Data.Linq.ObjectChangeConflict)
  parent: System.Data.Linq.ChangeConflictCollection
  isExternal: false
  name: Remove(ObjectChangeConflict)
  nameWithType: ChangeConflictCollection.Remove(ObjectChangeConflict)
  fullName: System.Data.Linq.ChangeConflictCollection.Remove(ObjectChangeConflict)
- uid: System.Data.Linq.ChangeConflictCollection.ResolveAll(System.Data.Linq.RefreshMode)
  parent: System.Data.Linq.ChangeConflictCollection
  isExternal: false
  name: ResolveAll(RefreshMode)
  nameWithType: ChangeConflictCollection.ResolveAll(RefreshMode)
  fullName: System.Data.Linq.ChangeConflictCollection.ResolveAll(RefreshMode)
- uid: System.Data.Linq.RefreshMode
  parent: System.Data.Linq
  isExternal: false
  name: RefreshMode
  nameWithType: RefreshMode
  fullName: System.Data.Linq.RefreshMode
- uid: System.Data.Linq.ChangeConflictCollection.ResolveAll(System.Data.Linq.RefreshMode,System.Boolean)
  parent: System.Data.Linq.ChangeConflictCollection
  isExternal: false
  name: ResolveAll(RefreshMode,Boolean)
  nameWithType: ChangeConflictCollection.ResolveAll(RefreshMode,Boolean)
  fullName: System.Data.Linq.ChangeConflictCollection.ResolveAll(RefreshMode,Boolean)
- uid: System.Data.Linq.ChangeConflictCollection.System#Collections#Generic#ICollection{System#Data#Linq#ObjectChangeConflict}#Add(System.Data.Linq.ObjectChangeConflict)
  parent: System.Data.Linq.ChangeConflictCollection
  isExternal: false
  name: System.Collections.Generic.ICollection(ObjectChangeConflict)
  nameWithType: ChangeConflictCollection.System.Collections.Generic.ICollection(ObjectChangeConflict)
  fullName: System.Data.Linq.ChangeConflictCollection.System.Collections.Generic.ICollection(ObjectChangeConflict)
- uid: System.Data.Linq.ChangeConflictCollection.System#Collections#Generic#ICollection{System#Data#Linq#ObjectChangeConflict}#IsReadOnly
  parent: System.Data.Linq.ChangeConflictCollection
  isExternal: false
  name: System.Collections.Generic.ICollection
  nameWithType: ChangeConflictCollection.System.Collections.Generic.ICollection
  fullName: System.Data.Linq.ChangeConflictCollection.System.Collections.Generic.ICollection
- uid: System.Data.Linq.ChangeConflictCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  parent: System.Data.Linq.ChangeConflictCollection
  isExternal: false
  name: System.Collections.ICollection.CopyTo(Array,Int32)
  nameWithType: ChangeConflictCollection.System.Collections.ICollection.CopyTo(Array,Int32)
  fullName: System.Data.Linq.ChangeConflictCollection.System.Collections.ICollection.CopyTo(Array,Int32)
- uid: System.Array
  parent: System
  isExternal: true
  name: Array
  nameWithType: Array
  fullName: System.Array
- uid: System.Data.Linq.ChangeConflictCollection.System#Collections#ICollection#IsSynchronized
  parent: System.Data.Linq.ChangeConflictCollection
  isExternal: false
  name: System.Collections.ICollection.IsSynchronized
  nameWithType: ChangeConflictCollection.System.Collections.ICollection.IsSynchronized
  fullName: System.Data.Linq.ChangeConflictCollection.System.Collections.ICollection.IsSynchronized
- uid: System.Data.Linq.ChangeConflictCollection.System#Collections#ICollection#SyncRoot
  parent: System.Data.Linq.ChangeConflictCollection
  isExternal: false
  name: System.Collections.ICollection.SyncRoot
  nameWithType: ChangeConflictCollection.System.Collections.ICollection.SyncRoot
  fullName: System.Data.Linq.ChangeConflictCollection.System.Collections.ICollection.SyncRoot
- uid: System.Data.Linq.ChangeConflictCollection.System#Collections#IEnumerable#GetEnumerator
  parent: System.Data.Linq.ChangeConflictCollection
  isExternal: false
  name: System.Collections.IEnumerable.GetEnumerator()
  nameWithType: ChangeConflictCollection.System.Collections.IEnumerable.GetEnumerator()
  fullName: System.Data.Linq.ChangeConflictCollection.System.Collections.IEnumerable.GetEnumerator()
- uid: System.Collections.IEnumerator
  parent: System.Collections
  isExternal: true
  name: IEnumerator
  nameWithType: IEnumerator
  fullName: System.Collections.IEnumerator
- uid: System.Data.Linq.ChangeConflictCollection.Clear*
  parent: System.Data.Linq.ChangeConflictCollection
  isExternal: false
  name: Clear
  nameWithType: ChangeConflictCollection.Clear
- uid: System.Data.Linq.ChangeConflictCollection.Contains*
  parent: System.Data.Linq.ChangeConflictCollection
  isExternal: false
  name: Contains
  nameWithType: ChangeConflictCollection.Contains
- uid: System.Data.Linq.ChangeConflictCollection.CopyTo*
  parent: System.Data.Linq.ChangeConflictCollection
  isExternal: false
  name: CopyTo
  nameWithType: ChangeConflictCollection.CopyTo
- uid: System.Data.Linq.ChangeConflictCollection.Count*
  parent: System.Data.Linq.ChangeConflictCollection
  isExternal: false
  name: Count
  nameWithType: ChangeConflictCollection.Count
- uid: System.Data.Linq.ChangeConflictCollection.GetEnumerator*
  parent: System.Data.Linq.ChangeConflictCollection
  isExternal: false
  name: GetEnumerator
  nameWithType: ChangeConflictCollection.GetEnumerator
- uid: System.Data.Linq.ChangeConflictCollection.Item*
  parent: System.Data.Linq.ChangeConflictCollection
  isExternal: false
  name: Item
  nameWithType: ChangeConflictCollection.Item
- uid: System.Data.Linq.ChangeConflictCollection.Remove*
  parent: System.Data.Linq.ChangeConflictCollection
  isExternal: false
  name: Remove
  nameWithType: ChangeConflictCollection.Remove
- uid: System.Data.Linq.ChangeConflictCollection.ResolveAll*
  parent: System.Data.Linq.ChangeConflictCollection
  isExternal: false
  name: ResolveAll
  nameWithType: ChangeConflictCollection.ResolveAll
- uid: System.Data.Linq.ChangeConflictCollection.System#Collections#Generic#ICollection<System#Data#Linq#ObjectChangeConflict>#Add*
  parent: System.Data.Linq.ChangeConflictCollection
  isExternal: false
  name: System.Collections.Generic.ICollection<System.Data.Linq.ObjectChangeConflict>.Add
  nameWithType: ChangeConflictCollection.System.Collections.Generic.ICollection<System.Data.Linq.ObjectChangeConflict>.Add
- uid: System.Data.Linq.ChangeConflictCollection.System#Collections#Generic#ICollection<System#Data#Linq#ObjectChangeConflict>#IsReadOnly*
  parent: System.Data.Linq.ChangeConflictCollection
  isExternal: false
  name: System.Collections.Generic.ICollection<System.Data.Linq.ObjectChangeConflict>.IsReadOnly
  nameWithType: ChangeConflictCollection.System.Collections.Generic.ICollection<System.Data.Linq.ObjectChangeConflict>.IsReadOnly
- uid: System.Data.Linq.ChangeConflictCollection.System#Collections#ICollection#CopyTo*
  parent: System.Data.Linq.ChangeConflictCollection
  isExternal: false
  name: System.Collections.ICollection.CopyTo
  nameWithType: ChangeConflictCollection.System.Collections.ICollection.CopyTo
- uid: System.Data.Linq.ChangeConflictCollection.System#Collections#ICollection#IsSynchronized*
  parent: System.Data.Linq.ChangeConflictCollection
  isExternal: false
  name: System.Collections.ICollection.IsSynchronized
  nameWithType: ChangeConflictCollection.System.Collections.ICollection.IsSynchronized
- uid: System.Data.Linq.ChangeConflictCollection.System#Collections#ICollection#SyncRoot*
  parent: System.Data.Linq.ChangeConflictCollection
  isExternal: false
  name: System.Collections.ICollection.SyncRoot
  nameWithType: ChangeConflictCollection.System.Collections.ICollection.SyncRoot
- uid: System.Data.Linq.ChangeConflictCollection.System#Collections#IEnumerable#GetEnumerator*
  parent: System.Data.Linq.ChangeConflictCollection
  isExternal: false
  name: System.Collections.IEnumerable.GetEnumerator
  nameWithType: ChangeConflictCollection.System.Collections.IEnumerable.GetEnumerator
