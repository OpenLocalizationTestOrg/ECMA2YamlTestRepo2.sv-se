### YamlMime:ManagedReference
items:
- uid: System.Reflection.Binder
  id: Binder
  children:
  - System.Reflection.Binder.#ctor
  - System.Reflection.Binder.BindToField(System.Reflection.BindingFlags,System.Reflection.FieldInfo[],System.Object,System.Globalization.CultureInfo)
  - System.Reflection.Binder.BindToMethod(System.Reflection.BindingFlags,System.Reflection.MethodBase[],System.Object[]@,System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[],System.Object@)
  - System.Reflection.Binder.ChangeType(System.Object,System.Type,System.Globalization.CultureInfo)
  - System.Reflection.Binder.ReorderArgumentArray(System.Object[]@,System.Object)
  - System.Reflection.Binder.SelectMethod(System.Reflection.BindingFlags,System.Reflection.MethodBase[],System.Type[],System.Reflection.ParameterModifier[])
  - System.Reflection.Binder.SelectProperty(System.Reflection.BindingFlags,System.Reflection.PropertyInfo[],System.Type,System.Type[],System.Reflection.ParameterModifier[])
  langs:
  - csharp
  name: Binder
  nameWithType: Binder
  fullName: System.Reflection.Binder
  type: Class
  summary: "Väljer en medlem från en lista över kandidater och utför typen konvertering från faktiska Argumenttypen till formella Argumenttypen."
  remarks: "Implementeringar av klassen Binder används av metoder som <xref:System.Type.InvokeMember%2A?displayProperty=fullName>, som väljer från en mängd med medlemmar som möjligt att köra, baserat på en uppsättning parametertyper och argumentvärden. <xref:System.Type.GetMethod%2A?displayProperty=fullName>, där väljer metod baserat på parametertyper, och så vidare.</xref:System.Type.GetMethod%2A?displayProperty=fullName> </xref:System.Type.InvokeMember%2A?displayProperty=fullName>       En standardimplementering av klassen Binder tillhandahålls av den <xref:System.Type.DefaultBinder%2A?displayProperty=fullName>egenskapen.</xref:System.Type.DefaultBinder%2A?displayProperty=fullName>"
  example:
  - "The following example implements and demonstrates all members of the `Binder` class. The private method `CanConvertFrom` finds compatible types for a given type.  \n  \n [!code-cpp[Binder_1#1](~/add/codesnippet/cpp/t-system.reflection.binder_1.cpp)]\n [!code-vb[Binder_1#1](~/add/codesnippet/visualbasic/t-system.reflection.binder_1.vb)]\n [!code-cs[Binder_1#1](~/add/codesnippet/csharp/t-system.reflection.binder_1.cs)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ClassInterface(System.Runtime.InteropServices.ClassInterfaceType.AutoDual)]

      [System.Runtime.InteropServices.ComVisible(true)]

      public abstract class Binder
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Reflection.Binder.#ctor
  id: '#ctor'
  parent: System.Reflection.Binder
  langs:
  - csharp
  name: Binder()
  nameWithType: Binder.Binder()
  fullName: System.Reflection.Binder.Binder()
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: "Initierar en ny instans av den <xref href=&quot;System.Reflection.Binder&quot;> </xref> klass."
  remarks: "Den här konstruktorn anropas av konstruktorerna i härledda klasser för att initiera tillstånd i den här typen."
  syntax:
    content: protected Binder ();
    parameters: []
  overload: System.Reflection.Binder.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Reflection.Binder.BindToField(System.Reflection.BindingFlags,System.Reflection.FieldInfo[],System.Object,System.Globalization.CultureInfo)
  id: BindToField(System.Reflection.BindingFlags,System.Reflection.FieldInfo[],System.Object,System.Globalization.CultureInfo)
  parent: System.Reflection.Binder
  langs:
  - csharp
  name: BindToField(BindingFlags,FieldInfo[],Object,CultureInfo)
  nameWithType: Binder.BindToField(BindingFlags,FieldInfo[],Object,CultureInfo)
  fullName: System.Reflection.Binder.BindToField(BindingFlags,FieldInfo[],Object,CultureInfo)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: "Markerar ett fält i den angivna uppsättningen fält, baserat på de angivna kriterierna."
  remarks: "Om `bindingAttr` inte innehåller <xref:System.Reflection.BindingFlags?displayProperty=fullName>, binder standardimplementering tillhandahålls av <xref:System.Type.DefaultBinder%2A?displayProperty=fullName>bara returnerar det första elementet i `match`.</xref:System.Type.DefaultBinder%2A?displayProperty=fullName> </xref:System.Reflection.BindingFlags?displayProperty=fullName> Ingen markering görs.       Den här metoden styr bindning som tillhandahålls av <xref:System.Type.InvokeMember%2A?displayProperty=fullName>.</xref:System.Type.InvokeMember%2A?displayProperty=fullName>"
  syntax:
    content: public abstract System.Reflection.FieldInfo BindToField (System.Reflection.BindingFlags bindingAttr, System.Reflection.FieldInfo[] match, object value, System.Globalization.CultureInfo culture);
    parameters:
    - id: bindingAttr
      type: System.Reflection.BindingFlags
      description: "En binär kombination av <xref href=&quot;System.Reflection.BindingFlags&quot;> </xref> värden."
    - id: match
      type: System.Reflection.FieldInfo[]
      description: "En uppsättning fält som lämpar sig för matchning. Till exempel när en <xref href=&quot;System.Reflection.Binder&quot;> </xref> objektet används av &lt;xref:System.Type.InvokeMember%2A?displayProperty=fullName&gt;, den här parametern anger en uppsättning fält som reflektion har fastställt att vara möjligt matchar normalt eftersom de har rätt Medlemsnamnet. Standardimplementering som tillhandahålls av &lt;xref:System.Type.DefaultBinder%2A?displayProperty=fullName&gt; ändras ordning i denna matris."
    - id: value
      type: System.Object
      description: "Fältvärdet som används för att hitta ett matchande fält."
    - id: culture
      type: System.Globalization.CultureInfo
      description: "En instans av <xref:System.Globalization.CultureInfo>som används för att styra tvång av datatyper i binder implementeringar som tvinga typer.</xref:System.Globalization.CultureInfo> Om `culture` är <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>, <xref:System.Globalization.CultureInfo>för den aktuella tråden används.</xref:System.Globalization.CultureInfo>       Observera till exempel om en binder implementering tillåter tvång av strängvärden till numeriska typer den här parametern krävs för att konvertera en <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> som representerar 1000 till en <xref uid=&quot;langword_csharp_Double&quot; name=&quot;Double&quot; href=&quot;&quot;> </xref> värde eftersom 1000 representeras på olika sätt av olika kulturer. Standard binder gör inte denna sträng coercions."
    return:
      type: System.Reflection.FieldInfo
      description: "Fältet matchande."
  overload: System.Reflection.Binder.BindToField*
  exceptions:
  - type: System.Reflection.AmbiguousMatchException
    commentId: T:System.Reflection.AmbiguousMatchException
    description: "För standard-binder <code> bindingAttr </code> innehåller <xref href=&quot;System.Reflection.BindingFlags&quot;> </xref>, och <code> match </code> innehåller flera fält som är lika bra matchningar för <code> value </code>. Till exempel <code> value </code> innehåller en `MyClass` objekt som implementerar det `IMyClass` -gränssnittet och <code> match </code> innehåller ett fält av typen `MyClass` och ett fält av typen `IMyClass`."
  - type: System.MissingFieldException
    commentId: T:System.MissingFieldException
    description: "För standard-binder <code> bindingAttr </code> innehåller <xref href=&quot;System.Reflection.BindingFlags&quot;> </xref>, och <code> match </code> innehåller inga fält som kan acceptera <code> value </code>."
  - type: System.NullReferenceException
    commentId: T:System.NullReferenceException
    description: "För standard-binder <code> bindingAttr </code> innehåller <xref href=&quot;System.Reflection.BindingFlags&quot;> </xref>, och <code> match </code> är <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> eller en tom matris.       -or-       <code>bindingAttr</code> includes <xref href=&quot;System.Reflection.BindingFlags&quot;></xref>, and <code>value</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Reflection.Binder.BindToMethod(System.Reflection.BindingFlags,System.Reflection.MethodBase[],System.Object[]@,System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[],System.Object@)
  id: BindToMethod(System.Reflection.BindingFlags,System.Reflection.MethodBase[],System.Object[]@,System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[],System.Object@)
  parent: System.Reflection.Binder
  langs:
  - csharp
  name: BindToMethod(BindingFlags,MethodBase[],Object[],ParameterModifier[],CultureInfo,String[],Object)
  nameWithType: Binder.BindToMethod(BindingFlags,MethodBase[],Object[],ParameterModifier[],CultureInfo,String[],Object)
  fullName: System.Reflection.Binder.BindToMethod(BindingFlags,MethodBase[],Object[],ParameterModifier[],CultureInfo,String[],Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: "Väljer en metod för att anropa från den angivna uppsättningen av metoder, beroende på de angivna argumenten."
  remarks: "Standard-binder tar hänsyn till båda parametrarna som har värden och `params` matriser (`ParamArray` matriser i Visual Basic). Därför är det möjligt att hitta en matchande i fall där `args` och `match` innehåller inte samma antal element.       Binder kan en klient för att mappa array argument tillbaka till dess ursprungliga formuläret om argumentmatrisen har tagits manipuleras av BindToMethod. Använd funktionen mappa om för att få tillbaka argument som referens när det finns sådana argument. När du överför argument med namnet sorterar binder om argumentmatrisen. Den `state` parametern håller reda på argumentet ordna om, vilket gör att bindaren <xref:System.Reflection.Binder.ReorderArgumentArray%2A>metod för att ordna om argumentmatrisen till originalversionen.</xref:System.Reflection.Binder.ReorderArgumentArray%2A>       Metoden BindToMethod används av den <xref:System.Type.InvokeMember%2A?displayProperty=fullName>metoden.</xref:System.Type.InvokeMember%2A?displayProperty=fullName>"
  syntax:
    content: public abstract System.Reflection.MethodBase BindToMethod (System.Reflection.BindingFlags bindingAttr, System.Reflection.MethodBase[] match, ref object[] args, System.Reflection.ParameterModifier[] modifiers, System.Globalization.CultureInfo culture, string[] names, out object state);
    parameters:
    - id: bindingAttr
      type: System.Reflection.BindingFlags
      description: "En binär kombination av <xref href=&quot;System.Reflection.BindingFlags&quot;> </xref> värden."
    - id: match
      type: System.Reflection.MethodBase[]
      description: "Uppsättning metoder som lämpar sig för matchning. Till exempel när en <xref href=&quot;System.Reflection.Binder&quot;> </xref> objektet används av &lt;xref:System.Type.InvokeMember%2A?displayProperty=fullName&gt;, den här parametern anger uppsättningen metoder som reflektion har fastställt att vara möjligt matchar normalt eftersom de har rätt Medlemsnamnet. Standardimplementering som tillhandahålls av &lt;xref:System.Type.DefaultBinder%2A?displayProperty=fullName&gt; ändras ordning i denna matris."
    - id: args
      type: System.Object[]
      description: "Argument som skickas i. Binder kan ändra ordning på argument i matrisen; till exempel standard binder ändrar argumentens ordning om den `names` används för att ange en ordning än ordning. Om en binder implementering tvingar Argumenttyperna, kan typer och värden för argumenten ändras också."
    - id: modifiers
      type: System.Reflection.ParameterModifier[]
      description: "En matris med parametern-modifierare som gör att bindningen ska fungera med parametern signaturer som de har ändrats. Binder standardimplementering använder inte den här parametern."
    - id: culture
      type: System.Globalization.CultureInfo
      description: "En instans av <xref:System.Globalization.CultureInfo>som används för att styra tvång av datatyper i binder implementeringar som tvinga typer.</xref:System.Globalization.CultureInfo> Om `culture` är <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>, <xref:System.Globalization.CultureInfo>för den aktuella tråden används.</xref:System.Globalization.CultureInfo>       Observera till exempel om en binder implementering tillåter tvång av strängvärden till numeriska typer den här parametern krävs för att konvertera en <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> som representerar 1000 till en <xref uid=&quot;langword_csharp_Double&quot; name=&quot;Double&quot; href=&quot;&quot;> </xref> värde eftersom 1000 representeras på olika sätt av olika kulturer. Standard binder gör inte denna sträng coercions."
    - id: names
      type: System.String[]
      description: "Parameternamn om parameternamn ska beaktas när matchning, eller <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> om argument är behandlas som enbart positionsparametrarna. Parameternamn måste till exempel användas om argument inte har angetts i ordning."
    - id: state
      type: System.Object
      description: "När metoden returnerar `state` innehåller ett angivna binder objekt som övervakas av ändra ordning på argumentet. Binder skapar det här objektet och binder är den enda konsumenten i det här objektet. Om `state` är inte <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> när <xref uid=&quot;langword_csharp_BindToMethod&quot; name=&quot;BindToMethod&quot; href=&quot;&quot;> </xref> returnerar måste du skicka `state` till den <xref:System.Reflection.Binder.ReorderArgumentArray*>metoden om du vill återställa `args` till dess ursprungliga exempelvis ordna så att du kan hämta värdena för <xref uid=&quot;langword_csharp_ref&quot; name=&quot;ref&quot; href=&quot;&quot;> </xref> parametrar (<xref uid=&quot;langword_csharp_ByRef&quot; name=&quot;ByRef&quot; href=&quot;&quot;> </xref> parametrar i Visual Basic).</xref:System.Reflection.Binder.ReorderArgumentArray*>"
    return:
      type: System.Reflection.MethodBase
      description: "Den matchande metoden."
  overload: System.Reflection.Binder.BindToMethod*
  exceptions:
  - type: System.Reflection.AmbiguousMatchException
    commentId: T:System.Reflection.AmbiguousMatchException
    description: "För standard-binder <code> match </code> innehåller flera metoder som är lika bra matchningar för <code> args </code>. Till exempel <code> args </code> innehåller en `MyClass` objekt som implementerar det `IMyClass` -gränssnittet och <code> match </code> innehåller en metod som tar `MyClass` och en metod som tar `IMyClass`."
  - type: System.MissingMethodException
    commentId: T:System.MissingMethodException
    description: "För standard-binder <code> match </code> innehåller inga metoder som kan ta emot argument som angavs i <code> args </code>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "För standard-binder <code> match </code> är <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> eller en tom matris."
  platform:
  - net462
- uid: System.Reflection.Binder.ChangeType(System.Object,System.Type,System.Globalization.CultureInfo)
  id: ChangeType(System.Object,System.Type,System.Globalization.CultureInfo)
  parent: System.Reflection.Binder
  langs:
  - csharp
  name: ChangeType(Object,Type,CultureInfo)
  nameWithType: Binder.ChangeType(Object,Type,CultureInfo)
  fullName: System.Reflection.Binder.ChangeType(Object,Type,CultureInfo)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: "Ändrar typ av den angivna <xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;> </xref> till den angivna <xref uid=&quot;langword_csharp_Type&quot; name=&quot;Type&quot; href=&quot;&quot;> </xref>."
  remarks: "Reflektion modeller hjälpmedel reglerna för vanliga typsystemet. Till exempel om anroparen i samma sammansättning behöver anroparen inte särskilda behörigheter för inre medlemmar. Annars måste anroparen <xref:System.Security.Permissions.ReflectionPermission>.</xref:System.Security.Permissions.ReflectionPermission> Detta är konsekventa med sökning med medlemmar som är skyddade, privata och så vidare.       Allmän princip är att `ChangeType` utför endast breddning coercions som aldrig förlora data. Ett exempel på en utvidgad tvång coercing ett värde som är en 32-bitars heltal med ett värde som är ett 64-bitars heltal. Detta skiljer sig från en begränsad tvång som data kan gå förlorade. Ett exempel på en begränsad tvång coercing ett 64-bitars heltal till en 32-bitars heltal.       I följande tabell visas coercions som utförs av standard `ChangeType`.      | Typ av datakälla | Måltyp |   |-----------------|-----------------|   | Alla typer | Dess bastyp. |   | Alla typer | Den implementerar gränssnittet. |   | Char | UInt16, UInt32, Int32, UInt64, Int64, enkel dubbla |   | Byte | Char UInt16, Int16, UInt32, Int32, UInt64, Int64, enkel dubbla |   | SByte | Int16, Int32, Int64, enkel dubbla |   | UInt16 | UInt32, Int32, UInt64, Int64, enkel dubbla |   | Int16 | Int32, Int64, enkel dubbla |   | UInt32 | UInt64, Int64, enkel dubbla |   | Int32 | Int64, enskild dubbla |   | UInt64 | Single, Double |   | Int64 | Single, Double |   | Enskild | Dubbla |   | Icke-referens | Som referens. |"
  syntax:
    content: public abstract object ChangeType (object value, Type type, System.Globalization.CultureInfo culture);
    parameters:
    - id: value
      type: System.Object
      description: "Objektet för att ändra till ett nytt <xref uid=&quot;langword_csharp_Type&quot; name=&quot;Type&quot; href=&quot;&quot;> </xref>."
    - id: type
      type: System.Type
      description: "Den nya <xref uid=&quot;langword_csharp_Type&quot; name=&quot;Type&quot; href=&quot;&quot;> </xref> som `value` blir."
    - id: culture
      type: System.Globalization.CultureInfo
      description: "En instans av <xref:System.Globalization.CultureInfo>som används för att styra tvång av datatyper.</xref:System.Globalization.CultureInfo> Om `culture` är <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>, <xref:System.Globalization.CultureInfo>för den aktuella tråden används.</xref:System.Globalization.CultureInfo>       Obs exempelvis den här parametern krävs för att konvertera en <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> som representerar 1000 till en <xref uid=&quot;langword_csharp_Double&quot; name=&quot;Double&quot; href=&quot;&quot;> </xref> värde eftersom 1000 representeras på olika sätt av olika kulturer."
    return:
      type: System.Object
      description: "Ett objekt som innehåller det angivna värdet som den nya typen."
  overload: System.Reflection.Binder.ChangeType*
  exceptions: []
  platform:
  - net462
- uid: System.Reflection.Binder.ReorderArgumentArray(System.Object[]@,System.Object)
  id: ReorderArgumentArray(System.Object[]@,System.Object)
  parent: System.Reflection.Binder
  langs:
  - csharp
  name: ReorderArgumentArray(Object[],Object)
  nameWithType: Binder.ReorderArgumentArray(Object[],Object)
  fullName: System.Reflection.Binder.ReorderArgumentArray(Object[],Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: "Vid returneras från <xref:System.Reflection.Binder.BindToMethod*>, återställs den <code> args </code> argumentet till den ursprungliga när den kom från <xref uid=&quot;langword_csharp_BindToMethod&quot; name=&quot;BindToMethod&quot; href=&quot;&quot;> </xref>.</xref:System.Reflection.Binder.BindToMethod*>"
  remarks: "Common language runtime anropar den här metoden om `state` är inte `null` efter en retur från `BindToMethod`."
  syntax:
    content: public abstract void ReorderArgumentArray (ref object[] args, object state);
    parameters:
    - id: args
      type: System.Object[]
      description: "De faktiska argument som skickas i. Både typer och värden för argumenten kan ändras."
    - id: state
      type: System.Object
      description: "En förutsättning binder objekt som håller reda på argumentet omordning."
  overload: System.Reflection.Binder.ReorderArgumentArray*
  exceptions: []
  platform:
  - net462
- uid: System.Reflection.Binder.SelectMethod(System.Reflection.BindingFlags,System.Reflection.MethodBase[],System.Type[],System.Reflection.ParameterModifier[])
  id: SelectMethod(System.Reflection.BindingFlags,System.Reflection.MethodBase[],System.Type[],System.Reflection.ParameterModifier[])
  parent: System.Reflection.Binder
  langs:
  - csharp
  name: SelectMethod(BindingFlags,MethodBase[],Type[],ParameterModifier[])
  nameWithType: Binder.SelectMethod(BindingFlags,MethodBase[],Type[],ParameterModifier[])
  fullName: System.Reflection.Binder.SelectMethod(BindingFlags,MethodBase[],Type[],ParameterModifier[])
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: "Markerar en metod från den angivna uppsättningen av metoder, beroende på vilken argumenttyp."
  remarks: "Den här metoden ska returnera `null` om ingen metod matchar villkoret. Den här metoden styr markeringen från den `GetConstructor` och `GetMethod` metoder i `Type`."
  syntax:
    content: public abstract System.Reflection.MethodBase SelectMethod (System.Reflection.BindingFlags bindingAttr, System.Reflection.MethodBase[] match, Type[] types, System.Reflection.ParameterModifier[] modifiers);
    parameters:
    - id: bindingAttr
      type: System.Reflection.BindingFlags
      description: "En binär kombination av <xref href=&quot;System.Reflection.BindingFlags&quot;> </xref> värden."
    - id: match
      type: System.Reflection.MethodBase[]
      description: "Uppsättning metoder som lämpar sig för matchning. Till exempel när en <xref href=&quot;System.Reflection.Binder&quot;> </xref> objektet används av &lt;xref:System.Type.InvokeMember%2A?displayProperty=fullName&gt;, den här parametern anger uppsättningen metoder som reflektion har fastställt att vara möjligt matchar normalt eftersom de har rätt Medlemsnamnet. Standardimplementering som tillhandahålls av &lt;xref:System.Type.DefaultBinder%2A?displayProperty=fullName&gt; ändras ordning i denna matris."
    - id: types
      type: System.Type[]
      description: "Parametertyper som används för att hitta en matchande metod."
    - id: modifiers
      type: System.Reflection.ParameterModifier[]
      description: "En matris med parametern-modifierare som gör att bindningen ska fungera med parametern signaturer som de har ändrats."
    return:
      type: System.Reflection.MethodBase
      description: "Den matchande metod, om hittas. Annars <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  overload: System.Reflection.Binder.SelectMethod*
  exceptions:
  - type: System.Reflection.AmbiguousMatchException
    commentId: T:System.Reflection.AmbiguousMatchException
    description: "För standard-binder <code> match </code> innehåller flera metoder som är lika bra matchningar för parametertyper som beskrivs av <code> types </code>. Till exempel matris i <code> types </code> innehåller en <xref:System.Type>för `MyClass` och matrisen i <code> match </code> innehåller en metod som tar en basklass för `MyClass` och en metod som tar ett gränssnitt som `MyClass` implementerar.</xref:System.Type>"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "För standard-binder <code> match </code> är <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> eller en tom matris.       - eller - element i <code> types </code> härleds från <xref:System.Type>, men är inte av typen <xref uid=&quot;langword_csharp_RuntimeType&quot; name=&quot;RuntimeType&quot; href=&quot;&quot;> </xref>.</xref:System.Type>"
  platform:
  - net462
- uid: System.Reflection.Binder.SelectProperty(System.Reflection.BindingFlags,System.Reflection.PropertyInfo[],System.Type,System.Type[],System.Reflection.ParameterModifier[])
  id: SelectProperty(System.Reflection.BindingFlags,System.Reflection.PropertyInfo[],System.Type,System.Type[],System.Reflection.ParameterModifier[])
  parent: System.Reflection.Binder
  langs:
  - csharp
  name: SelectProperty(BindingFlags,PropertyInfo[],Type,Type[],ParameterModifier[])
  nameWithType: Binder.SelectProperty(BindingFlags,PropertyInfo[],Type,Type[],ParameterModifier[])
  fullName: System.Reflection.Binder.SelectProperty(BindingFlags,PropertyInfo[],Type,Type[],ParameterModifier[])
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: "Markerar en egenskap från den angivna uppsättningen med egenskaper, baserat på de angivna kriterierna."
  remarks: "Den här metoden styr markeringen från den `GetProperty` metod på `Type`."
  syntax:
    content: public abstract System.Reflection.PropertyInfo SelectProperty (System.Reflection.BindingFlags bindingAttr, System.Reflection.PropertyInfo[] match, Type returnType, Type[] indexes, System.Reflection.ParameterModifier[] modifiers);
    parameters:
    - id: bindingAttr
      type: System.Reflection.BindingFlags
      description: "En binär kombination av <xref href=&quot;System.Reflection.BindingFlags&quot;> </xref> värden."
    - id: match
      type: System.Reflection.PropertyInfo[]
      description: "Uppsättningen egenskaper som lämpar sig för matchning. Till exempel när en <xref href=&quot;System.Reflection.Binder&quot;> </xref> objektet används av &lt;xref:System.Type.InvokeMember%2A?displayProperty=fullName&gt;, den här parametern anger uppsättningen egenskaper som reflektion har fastställt att vara möjligt matchar normalt eftersom de har rätt Medlemsnamnet. Standardimplementering som tillhandahålls av &lt;xref:System.Type.DefaultBinder%2A?displayProperty=fullName&gt; ändras ordning i denna matris."
    - id: returnType
      type: System.Type
      description: "Det returnera värdet matchning av egenskap måste ha."
    - id: indexes
      type: System.Type[]
      description: "Index typer av den som eftersöks. Används för Indexegenskaper, till exempel indexeraren för en klass."
    - id: modifiers
      type: System.Reflection.ParameterModifier[]
      description: "En matris med parametern-modifierare som gör att bindningen ska fungera med parametern signaturer som de har ändrats."
    return:
      type: System.Reflection.PropertyInfo
      description: "Matchning av egenskap."
  overload: System.Reflection.Binder.SelectProperty*
  exceptions:
  - type: System.Reflection.AmbiguousMatchException
    commentId: T:System.Reflection.AmbiguousMatchException
    description: "För standard-binder <code> match </code> innehåller flera egenskaper som är lika bra matchningar för <code> returnType </code> och <code> indexes </code>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "För standard-binder <code> match </code> är <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> eller en tom matris."
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Reflection.AmbiguousMatchException
  isExternal: true
  name: System.Reflection.AmbiguousMatchException
- uid: System.MissingFieldException
  isExternal: true
  name: System.MissingFieldException
- uid: System.NullReferenceException
  isExternal: true
  name: System.NullReferenceException
- uid: System.MissingMethodException
  isExternal: true
  name: System.MissingMethodException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.Reflection.Binder.#ctor
  parent: System.Reflection.Binder
  isExternal: false
  name: Binder()
  nameWithType: Binder.Binder()
  fullName: System.Reflection.Binder.Binder()
- uid: System.Reflection.Binder.BindToField(System.Reflection.BindingFlags,System.Reflection.FieldInfo[],System.Object,System.Globalization.CultureInfo)
  parent: System.Reflection.Binder
  isExternal: false
  name: BindToField(BindingFlags,FieldInfo[],Object,CultureInfo)
  nameWithType: Binder.BindToField(BindingFlags,FieldInfo[],Object,CultureInfo)
  fullName: System.Reflection.Binder.BindToField(BindingFlags,FieldInfo[],Object,CultureInfo)
- uid: System.Reflection.FieldInfo
  parent: System.Reflection
  isExternal: true
  name: FieldInfo
  nameWithType: FieldInfo
  fullName: System.Reflection.FieldInfo
- uid: System.Reflection.BindingFlags
  parent: System.Reflection
  isExternal: false
  name: BindingFlags
  nameWithType: BindingFlags
  fullName: System.Reflection.BindingFlags
- uid: System.Reflection.FieldInfo[]
  parent: System.Reflection
  isExternal: true
  name: FieldInfo
  nameWithType: FieldInfo
  fullName: System.Reflection.FieldInfo[]
  spec.csharp:
  - uid: System.Reflection.FieldInfo
    name: FieldInfo
    nameWithType: FieldInfo
    fullName: FieldInfo[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Globalization.CultureInfo
  parent: System.Globalization
  isExternal: true
  name: CultureInfo
  nameWithType: CultureInfo
  fullName: System.Globalization.CultureInfo
- uid: System.Reflection.Binder.BindToMethod(System.Reflection.BindingFlags,System.Reflection.MethodBase[],System.Object[]@,System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[],System.Object@)
  parent: System.Reflection.Binder
  isExternal: false
  name: BindToMethod(BindingFlags,MethodBase[],Object[],ParameterModifier[],CultureInfo,String[],Object)
  nameWithType: Binder.BindToMethod(BindingFlags,MethodBase[],Object[],ParameterModifier[],CultureInfo,String[],Object)
  fullName: System.Reflection.Binder.BindToMethod(BindingFlags,MethodBase[],Object[],ParameterModifier[],CultureInfo,String[],Object)
- uid: System.Reflection.MethodBase
  parent: System.Reflection
  isExternal: true
  name: MethodBase
  nameWithType: MethodBase
  fullName: System.Reflection.MethodBase
- uid: System.Reflection.MethodBase[]
  parent: System.Reflection
  isExternal: true
  name: MethodBase
  nameWithType: MethodBase
  fullName: System.Reflection.MethodBase[]
  spec.csharp:
  - uid: System.Reflection.MethodBase
    name: MethodBase
    nameWithType: MethodBase
    fullName: MethodBase[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Object[]
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object[]
  spec.csharp:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: Object[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Reflection.ParameterModifier[]
  parent: System.Reflection
  isExternal: false
  name: ParameterModifier
  nameWithType: ParameterModifier
  fullName: System.Reflection.ParameterModifier[]
  spec.csharp:
  - uid: System.Reflection.ParameterModifier
    name: ParameterModifier
    nameWithType: ParameterModifier
    fullName: ParameterModifier[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.String[]
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String[]
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Reflection.Binder.ChangeType(System.Object,System.Type,System.Globalization.CultureInfo)
  parent: System.Reflection.Binder
  isExternal: false
  name: ChangeType(Object,Type,CultureInfo)
  nameWithType: Binder.ChangeType(Object,Type,CultureInfo)
  fullName: System.Reflection.Binder.ChangeType(Object,Type,CultureInfo)
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Reflection.Binder.ReorderArgumentArray(System.Object[]@,System.Object)
  parent: System.Reflection.Binder
  isExternal: false
  name: ReorderArgumentArray(Object[],Object)
  nameWithType: Binder.ReorderArgumentArray(Object[],Object)
  fullName: System.Reflection.Binder.ReorderArgumentArray(Object[],Object)
- uid: System.Reflection.Binder.SelectMethod(System.Reflection.BindingFlags,System.Reflection.MethodBase[],System.Type[],System.Reflection.ParameterModifier[])
  parent: System.Reflection.Binder
  isExternal: false
  name: SelectMethod(BindingFlags,MethodBase[],Type[],ParameterModifier[])
  nameWithType: Binder.SelectMethod(BindingFlags,MethodBase[],Type[],ParameterModifier[])
  fullName: System.Reflection.Binder.SelectMethod(BindingFlags,MethodBase[],Type[],ParameterModifier[])
- uid: System.Type[]
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type[]
  spec.csharp:
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: Type[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Reflection.Binder.SelectProperty(System.Reflection.BindingFlags,System.Reflection.PropertyInfo[],System.Type,System.Type[],System.Reflection.ParameterModifier[])
  parent: System.Reflection.Binder
  isExternal: false
  name: SelectProperty(BindingFlags,PropertyInfo[],Type,Type[],ParameterModifier[])
  nameWithType: Binder.SelectProperty(BindingFlags,PropertyInfo[],Type,Type[],ParameterModifier[])
  fullName: System.Reflection.Binder.SelectProperty(BindingFlags,PropertyInfo[],Type,Type[],ParameterModifier[])
- uid: System.Reflection.PropertyInfo
  parent: System.Reflection
  isExternal: true
  name: PropertyInfo
  nameWithType: PropertyInfo
  fullName: System.Reflection.PropertyInfo
- uid: System.Reflection.PropertyInfo[]
  parent: System.Reflection
  isExternal: true
  name: PropertyInfo
  nameWithType: PropertyInfo
  fullName: System.Reflection.PropertyInfo[]
  spec.csharp:
  - uid: System.Reflection.PropertyInfo
    name: PropertyInfo
    nameWithType: PropertyInfo
    fullName: PropertyInfo[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Reflection.Binder.#ctor*
  parent: System.Reflection.Binder
  isExternal: false
  name: Binder
  nameWithType: Binder.Binder
- uid: System.Reflection.Binder.BindToField*
  parent: System.Reflection.Binder
  isExternal: false
  name: BindToField
  nameWithType: Binder.BindToField
- uid: System.Reflection.Binder.BindToMethod*
  parent: System.Reflection.Binder
  isExternal: false
  name: BindToMethod
  nameWithType: Binder.BindToMethod
- uid: System.Reflection.Binder.ChangeType*
  parent: System.Reflection.Binder
  isExternal: false
  name: ChangeType
  nameWithType: Binder.ChangeType
- uid: System.Reflection.Binder.ReorderArgumentArray*
  parent: System.Reflection.Binder
  isExternal: false
  name: ReorderArgumentArray
  nameWithType: Binder.ReorderArgumentArray
- uid: System.Reflection.Binder.SelectMethod*
  parent: System.Reflection.Binder
  isExternal: false
  name: SelectMethod
  nameWithType: Binder.SelectMethod
- uid: System.Reflection.Binder.SelectProperty*
  parent: System.Reflection.Binder
  isExternal: false
  name: SelectProperty
  nameWithType: Binder.SelectProperty
