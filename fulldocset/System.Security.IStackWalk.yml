### YamlMime:ManagedReference
items:
- uid: System.Security.IStackWalk
  id: IStackWalk
  children:
  - System.Security.IStackWalk.Assert
  - System.Security.IStackWalk.Demand
  - System.Security.IStackWalk.Deny
  - System.Security.IStackWalk.PermitOnly
  langs:
  - csharp
  name: IStackWalk
  nameWithType: IStackWalk
  fullName: System.Security.IStackWalk
  type: Interface
  summary: "Hanterar stackstegningen som avgör om anropare i anropsstacken har behörigheterna som krävs för att få åtkomst till en skyddad resurs."
  remarks: "Delvis betrodd kod utgör alltid en säkerhetsrisk. Det kan ibland hanteras för att utföra åtgärder för skadlig kod som inte har behörighet att komma åt en resurs. På så sätt kan kan skadlig kod uppnå högre säkerhetsåtkomst än ska tillåtas.       Common language runtime skyddar förvaltad kod från dessa attacker genom att köra en stackstegningen på alla anrop. Stackstegningen kräver att all kod i anropsstacken har behörighet att komma åt en skyddad resurs. Eftersom koden försöker angreppet kommer alltid att vara någonstans i anropsstacken, kan den inte överskrider sin egen säkerhetsbehörigheter."
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public interface IStackWalk
  implements: []
  platform:
  - net462
- uid: System.Security.IStackWalk.Assert
  id: Assert
  parent: System.Security.IStackWalk
  langs:
  - csharp
  name: Assert()
  nameWithType: IStackWalk.Assert()
  fullName: System.Security.IStackWalk.Assert()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "Kontroller att den anropande koden har åtkomst till den resurs som identifieras av det aktuella objektet behörighet, även om anropare högre upp i stacken inte har beviljats behörighet att komma åt resursen."
  remarks: "Anropa Assert stoppar behörighet Kontrollera anropare högre upp i anropsstacken. Därför även om dessa anropare inte har behörigheterna som krävs, de kan fortfarande komma åt resurser. Ett intyg fungerar bara om den kod som anropar Assert skickar säkerhetskontrollen för den behörighet som den garanterar.       Ett anrop till Assert börjar gälla förrän den anropande koden returnerar till den ursprungliga anroparen eller ett anrop till Assert återgivningar tidigare kontroll ineffektiv. Dessutom <xref:System.Security.CodeAccessPermission.RevertAssert%2A>eller <xref:System.Security.CodeAccessPermission.RevertAll%2A>tar bort en väntande Assert.</xref:System.Security.CodeAccessPermission.RevertAll%2A> </xref:System.Security.CodeAccessPermission.RevertAssert%2A>       Assert ignoreras för en behörighet inte eftersom en begäran om att behörighet kommer att misslyckas. Men om lägre i anropsstacken koden anropar <xref:System.Security.IStackWalk.Demand%2A>för den behörigheten, en <xref:System.Security.SecurityException>när stackstegningen når den kod som försökte anropa Assert.</xref:System.Security.SecurityException> </xref:System.Security.IStackWalk.Demand%2A> Detta beror på att den kod som kallas Assert inte har beviljats behörigheten, även om den försökte Assert den.      > [!CAUTION] > Eftersom anropa Assert undanröjer behovet att all kod i kedjan anrop måste ha behörighet att komma åt den angivna resursen, som kan öppnas av säkerhetsproblem om används på fel sätt felaktigt. Det bör därför användas med mycket försiktig."
  syntax:
    content: public void Assert ();
    parameters: []
  overload: System.Security.IStackWalk.Assert*
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "Den anropande koden inte har <xref href=&quot;System.Security.Permissions.SecurityPermissionFlag&quot;> </xref>."
  platform:
  - net462
- uid: System.Security.IStackWalk.Demand
  id: Demand
  parent: System.Security.IStackWalk
  langs:
  - csharp
  name: Demand()
  nameWithType: IStackWalk.Demand()
  fullName: System.Security.IStackWalk.Demand()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "Anger under körning om anropare i anropsstacken har beviljats behörigheten som anges av det aktuella objektet behörighet."
  remarks: "Den här metoden används vanligtvis av säker bibliotek för att säkerställa att anropare har behörighet att komma åt en resurs. Till exempel en fil klass i en säker klassbiblioteket anropar behovet av nödvändiga <xref:System.Security.Permissions.FileIOPermission>innan du utför en åtgärd för filen som angavs av anroparen.</xref:System.Security.Permissions.FileIOPermission>       Behörigheterna för den kod som anropar den här metoden är inte undersökas. kontrollen börjar från den omedelbara anroparen av koden och fortsätter uppåt i stapeln. Begäran fungerar endast om ingen <xref:System.Security.SecurityException>utlöses.</xref:System.Security.SecurityException>"
  syntax:
    content: public void Demand ();
    parameters: []
  overload: System.Security.IStackWalk.Demand*
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "En högre upp i anropsstacken anroparen har inte behörigheten som anges av det aktuella objektet behörighet.       - eller - kallas för en anropare i anropsstacken <xref:System.Security.IStackWalk.Deny*>i det aktuella objektet behörighet.</xref:System.Security.IStackWalk.Deny*>"
  platform:
  - net462
- uid: System.Security.IStackWalk.Deny
  id: Deny
  parent: System.Security.IStackWalk
  langs:
  - csharp
  name: Deny()
  nameWithType: IStackWalk.Deny()
  fullName: System.Security.IStackWalk.Deny()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "Gör att varje <xref:System.Security.IStackWalk.Demand*>för det aktuella objekt som passerar den anropande koden misslyckas.</xref:System.Security.IStackWalk.Demand*>"
  remarks: "Den här metoden förhindrar anropare högre upp i anropsstacken från att komma åt den skyddade resursen via den kod som anropar den här metoden, även om de som har fått behörighet att komma åt den. Anropsstacken representeras vanligtvis växande ned, så att metoder högre upp i anropsstacken anropa metoder lägre i anropsstacken.       Neka kan begränsa programmeraren ansvar eller förhindra oavsiktliga säkerhetsrisker eftersom den förhindrar den metod som anropar neka används för åtkomst till resursen som skyddas av nekade behörigheten. Om ett metodanrop neka på en behörighet, och om en <xref:System.Security.IStackWalk.Demand%2A>för behörigheten anropas av en lägre i anropsstacken anropare som säkerhetskontrollen misslyckas när den når neka.</xref:System.Security.IStackWalk.Demand%2A>       Neka ignoreras för en behörighet inte eftersom en begäran om att behörighet kommer att misslyckas."
  syntax:
    content: public void Deny ();
    parameters: []
  overload: System.Security.IStackWalk.Deny*
  exceptions: []
  platform:
  - net462
- uid: System.Security.IStackWalk.PermitOnly
  id: PermitOnly
  parent: System.Security.IStackWalk
  langs:
  - csharp
  name: PermitOnly()
  nameWithType: IStackWalk.PermitOnly()
  fullName: System.Security.IStackWalk.PermitOnly()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "Gör att varje <xref:System.Security.IStackWalk.Demand*>för alla objekt, men det aktuella som passerar den anropande koden misslyckas, även om koden högre upp i anropsstacken har beviljats behörighet att komma åt andra resurser.</xref:System.Security.IStackWalk.Demand*>"
  remarks: "PermitOnly liknar <xref:System.Security.IStackWalk.Deny%2A>, att både orsaka stacken får inte fungerar när de annars skulle lyckas.</xref:System.Security.IStackWalk.Deny%2A> Skillnaden är att <xref:System.Security.IStackWalk.Deny%2A>anger behörigheter som gör att stacken beskriver misslyckas, men PermitOnly anger endast behörigheter som inte orsakar stackstegningen misslyckas.</xref:System.Security.IStackWalk.Deny%2A> Anropa den här metoden för att säkerställa att din kod kan användas för åtkomst till endast de angivna resurserna.       PermitOnly ignoreras för en behörighet inte eftersom en begäran om att behörighet kommer att misslyckas. Men om koden lägre på anropet stacken senare anrop <xref:System.Security.IStackWalk.Demand%2A>för den behörigheten, en <xref:System.Security.SecurityException>när stackstegningen når den kod som försökte anropa PermitOnly.</xref:System.Security.SecurityException> </xref:System.Security.IStackWalk.Demand%2A> Detta beror på att den kod som kallas PermitOnly inte har beviljats behörigheten, även om den anropas PermitOnly för den behörigheten. Anropsstacken representeras vanligtvis växande ned, så att metoder högre upp i anropsstacken anropa metoder lägre i anropsstacken."
  syntax:
    content: public void PermitOnly ();
    parameters: []
  overload: System.Security.IStackWalk.PermitOnly*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Security.SecurityException
  isExternal: true
  name: System.Security.SecurityException
- uid: System.Security.IStackWalk.Assert
  parent: System.Security.IStackWalk
  isExternal: false
  name: Assert()
  nameWithType: IStackWalk.Assert()
  fullName: System.Security.IStackWalk.Assert()
- uid: System.Security.IStackWalk.Demand
  parent: System.Security.IStackWalk
  isExternal: false
  name: Demand()
  nameWithType: IStackWalk.Demand()
  fullName: System.Security.IStackWalk.Demand()
- uid: System.Security.IStackWalk.Deny
  parent: System.Security.IStackWalk
  isExternal: false
  name: Deny()
  nameWithType: IStackWalk.Deny()
  fullName: System.Security.IStackWalk.Deny()
- uid: System.Security.IStackWalk.PermitOnly
  parent: System.Security.IStackWalk
  isExternal: false
  name: PermitOnly()
  nameWithType: IStackWalk.PermitOnly()
  fullName: System.Security.IStackWalk.PermitOnly()
- uid: System.Security.IStackWalk.Assert*
  parent: System.Security.IStackWalk
  isExternal: false
  name: Assert
  nameWithType: IStackWalk.Assert
- uid: System.Security.IStackWalk.Demand*
  parent: System.Security.IStackWalk
  isExternal: false
  name: Demand
  nameWithType: IStackWalk.Demand
- uid: System.Security.IStackWalk.Deny*
  parent: System.Security.IStackWalk
  isExternal: false
  name: Deny
  nameWithType: IStackWalk.Deny
- uid: System.Security.IStackWalk.PermitOnly*
  parent: System.Security.IStackWalk
  isExternal: false
  name: PermitOnly
  nameWithType: IStackWalk.PermitOnly
