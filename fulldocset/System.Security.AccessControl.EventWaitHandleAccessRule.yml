### YamlMime:ManagedReference
items:
- uid: System.Security.AccessControl.EventWaitHandleAccessRule
  id: EventWaitHandleAccessRule
  children:
  - System.Security.AccessControl.EventWaitHandleAccessRule.#ctor(System.Security.Principal.IdentityReference,System.Security.AccessControl.EventWaitHandleRights,System.Security.AccessControl.AccessControlType)
  - System.Security.AccessControl.EventWaitHandleAccessRule.#ctor(System.String,System.Security.AccessControl.EventWaitHandleRights,System.Security.AccessControl.AccessControlType)
  - System.Security.AccessControl.EventWaitHandleAccessRule.EventWaitHandleRights
  langs:
  - csharp
  name: EventWaitHandleAccessRule
  nameWithType: EventWaitHandleAccessRule
  fullName: System.Security.AccessControl.EventWaitHandleAccessRule
  type: Class
  summary: "Representerar en uppsättning behörigheter beviljas eller nekas för en användare eller grupp. Den här klassen kan inte ärvas."
  remarks: "Klassen EventWaitHandleAccessRule är en av de klasser som .NET Framework tillhandahåller för hantering av windowssäkerhet för åtkomstkontroll på namngiven systemhändelser. En översikt över dessa klasser och deras förhållande till de underliggande Windows åtkomstkontroll strukturerna, finns i <xref:System.Security.AccessControl.EventWaitHandleSecurity>.</xref:System.Security.AccessControl.EventWaitHandleSecurity>      > [!NOTE] > Säkerhet för åtkomstkontroll är användbar bara för Windows med namnet systemhändelser. Om en <xref:System.Threading.EventWaitHandle>-objektet representerar en lokal händelse, åtkomstkontroll är irrelevanta.</xref:System.Threading.EventWaitHandle>       För att få en lista över regler som för närvarande används för en namngiven händelse kan använda den <xref:System.Threading.EventWaitHandle.GetAccessControl%2A?displayProperty=fullName>metod för att hämta en <xref:System.Security.AccessControl.EventWaitHandleSecurity>objektet och sedan använda dess <xref:System.Security.AccessControl.CommonObjectSecurity.GetAccessRules%2A>metod för att hämta en samling objekt EventWaitHandleAccessRule.</xref:System.Security.AccessControl.CommonObjectSecurity.GetAccessRules%2A> </xref:System.Security.AccessControl.EventWaitHandleSecurity> </xref:System.Threading.EventWaitHandle.GetAccessControl%2A?displayProperty=fullName>       EventWaitHandleAccessRule objekt mappar inte&1; med åtkomstkontrollposter i underliggande discretionary access control list (DACL). När du får en uppsättning regler för alla åtkomst för en händelse innehåller uppsättningen det minsta antalet regler som för närvarande krävs att uttrycka alla åtkomstkontrollposter.      > [!NOTE] > Underliggande åtkomstkontrollposterna ändras när du använder och ta bort regler. Informationen i regler kopplas om möjligt om du vill behålla det lägsta antalet poster för åtkomstkontroll. Därför när du hämtar den aktuella listan över regler det kanske inte precis likadant ut som listan över alla regler som du har lagt till.       Använda EventWaitHandleAccessRule objekt för att ange behörigheter för att tillåta eller neka till en användare eller grupp. En EventWaitHandleAccessRule-objektet representerar alltid åtkomst eller nekas åtkomst, inte båda.       Om du vill tillämpa en regel för en namngiven systemhändelse, använda den <xref:System.Threading.EventWaitHandle.GetAccessControl%2A?displayProperty=fullName>metod för att hämta den <xref:System.Security.AccessControl.EventWaitHandleSecurity>objekt.</xref:System.Security.AccessControl.EventWaitHandleSecurity> </xref:System.Threading.EventWaitHandle.GetAccessControl%2A?displayProperty=fullName> Ändra den <xref:System.Security.AccessControl.EventWaitHandleSecurity>objektet med hjälp av dess metoder att lägga till regeln och sedan använda den <xref:System.Threading.EventWaitHandle.SetAccessControl%2A?displayProperty=fullName>metod för att återansluta säkerhetsobjektet.</xref:System.Threading.EventWaitHandle.SetAccessControl%2A?displayProperty=fullName> </xref:System.Security.AccessControl.EventWaitHandleSecurity>      > [!IMPORTANT] > Ändringar du gör en <xref:System.Security.AccessControl.EventWaitHandleSecurity>objektet påverkar inte behörighet för en namngiven händelsen förrän du anropar den <xref:System.Threading.EventWaitHandle.SetAccessControl%2A?displayProperty=fullName>metod för att tilldela säkerhetsobjektet ändras på händelsen namngiven.</xref:System.Threading.EventWaitHandle.SetAccessControl%2A?displayProperty=fullName> </xref:System.Security.AccessControl.EventWaitHandleSecurity>       EventWaitHandleAccessRule objekt kan inte ändras. Säkerhet för en händelse ändras med hjälp av den <xref:System.Security.AccessControl.EventWaitHandleSecurity>klassen för att lägga till eller ta bort regler; när du gör detta underliggande åtkomstkontrollposterna ändras.</xref:System.Security.AccessControl.EventWaitHandleSecurity>      > [!NOTE] > Säkerhet för synkroniseringsobjekt stöds inte för Windows 98 eller Windows ME."
  example:
  - "The following code example demonstrates the creation and use of EventWaitHandleAccessRule objects. The example creates an <xref:System.Security.AccessControl.EventWaitHandleSecurity> object, adds rules that allow and deny various rights for the current user, and displays the resulting pair of rules. The example then allows new rights for the current user and displays the result, showing that the new rights are merged with the existing <xref:System.Security.AccessControl.AccessControlType>rule.  \n  \n> [!NOTE]\n>  This example does not attach the security object to a <xref:System.Threading.EventWaitHandle> object. Examples that attach security objects can be found in <xref:System.Threading.EventWaitHandle.GetAccessControl%2A?displayProperty=fullName> and <xref:System.Threading.EventWaitHandle.SetAccessControl%2A?displayProperty=fullName>.  \n  \n [!code-cs[System.Security.AccessControl.EventWaitHandleSecurity.AddAccessRule#1](~/add/codesnippet/csharp/t-system.security.access_0_1.cs)]\n [!code-vb[System.Security.AccessControl.EventWaitHandleSecurity.AddAccessRule#1](~/add/codesnippet/visualbasic/t-system.security.access_0_1.vb)]"
  syntax:
    content: 'public sealed class EventWaitHandleAccessRule : System.Security.AccessControl.AccessRule'
  inheritance:
  - System.Object
  - System.Security.AccessControl.AuthorizationRule
  - System.Security.AccessControl.AccessRule
  implements: []
  inheritedMembers:
  - System.Security.AccessControl.AccessRule.AccessControlType
  - System.Security.AccessControl.AuthorizationRule.AccessMask
  - System.Security.AccessControl.AuthorizationRule.IdentityReference
  - System.Security.AccessControl.AuthorizationRule.InheritanceFlags
  - System.Security.AccessControl.AuthorizationRule.IsInherited
  - System.Security.AccessControl.AuthorizationRule.PropagationFlags
  platform:
  - net462
- uid: System.Security.AccessControl.EventWaitHandleAccessRule.#ctor(System.Security.Principal.IdentityReference,System.Security.AccessControl.EventWaitHandleRights,System.Security.AccessControl.AccessControlType)
  id: '#ctor(System.Security.Principal.IdentityReference,System.Security.AccessControl.EventWaitHandleRights,System.Security.AccessControl.AccessControlType)'
  parent: System.Security.AccessControl.EventWaitHandleAccessRule
  langs:
  - csharp
  name: EventWaitHandleAccessRule(IdentityReference,EventWaitHandleRights,AccessControlType)
  nameWithType: EventWaitHandleAccessRule.EventWaitHandleAccessRule(IdentityReference,EventWaitHandleRights,AccessControlType)
  fullName: System.Security.AccessControl.EventWaitHandleAccessRule.EventWaitHandleAccessRule(IdentityReference,EventWaitHandleRights,AccessControlType)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "Initierar en ny instans av den <xref href=&quot;System.Security.AccessControl.EventWaitHandleAccessRule&quot;> </xref> klassen som anger den användare eller grupp som regeln gäller för de behörighet som krävs, och om de angivna åtkomsträttigheterna tillåts eller nekas."
  remarks: "Vänta en <xref:System.Threading.EventWaitHandle>(genom att anropa den <xref:System.Threading.WaitHandle.WaitOne%2A>, <xref:System.Threading.WaitHandle.WaitAny%2A>eller <xref:System.Threading.WaitHandle.WaitAll%2A>metod), måste användaren ha <xref:System.Security.AccessControl.EventWaitHandleRights?displayProperty=fullName>åtkomst.</xref:System.Security.AccessControl.EventWaitHandleRights?displayProperty=fullName> </xref:System.Threading.WaitHandle.WaitAll%2A> </xref:System.Threading.WaitHandle.WaitAny%2A> </xref:System.Threading.WaitHandle.WaitOne%2A> </xref:System.Threading.EventWaitHandle> Att signalera en händelse genom att anropa den <xref:System.Threading.EventWaitHandle.Set%2A>metoden, eller för att återställa den till tillståndet unsignaled genom att anropa den <xref:System.Threading.EventWaitHandle.Reset%2A>metoden, måste användaren ha <xref:System.Security.AccessControl.EventWaitHandleRights?displayProperty=fullName>åtkomst.</xref:System.Security.AccessControl.EventWaitHandleRights?displayProperty=fullName> </xref:System.Threading.EventWaitHandle.Reset%2A> </xref:System.Threading.EventWaitHandle.Set%2A> Att signalera en <xref:System.Threading.EventWaitHandle>objekt och vänta på den genom att anropa den <xref:System.Threading.WaitHandle.SignalAndWait%2A>metoden, måste användaren ha <xref:System.Security.AccessControl.EventWaitHandleRights>och <xref:System.Security.AccessControl.EventWaitHandleRights>åtkomst.</xref:System.Security.AccessControl.EventWaitHandleRights> </xref:System.Security.AccessControl.EventWaitHandleRights> </xref:System.Threading.WaitHandle.SignalAndWait%2A> </xref:System.Threading.EventWaitHandle>"
  syntax:
    content: public EventWaitHandleAccessRule (System.Security.Principal.IdentityReference identity, System.Security.AccessControl.EventWaitHandleRights eventRights, System.Security.AccessControl.AccessControlType type);
    parameters:
    - id: identity
      type: System.Security.Principal.IdentityReference
      description: "Användaren eller gruppen som regeln gäller för. Måste vara av typen <xref href=&quot;System.Security.Principal.SecurityIdentifier&quot;> </xref> eller en typ som <xref href=&quot;System.Security.Principal.NTAccount&quot;> </xref> som kan konverteras till typen <xref href=&quot;System.Security.Principal.SecurityIdentifier&quot;> </xref>."
    - id: eventRights
      type: System.Security.AccessControl.EventWaitHandleRights
      description: "En binär kombination av <xref href=&quot;System.Security.AccessControl.EventWaitHandleRights&quot;> </xref> värden som anger rättigheterna som tillåts eller nekas."
    - id: type
      type: System.Security.AccessControl.AccessControlType
      description: "En av de <xref href=&quot;System.Security.AccessControl.AccessControlType&quot;> </xref> värden som anger om rättigheterna som tillåts eller nekas."
  overload: System.Security.AccessControl.EventWaitHandleAccessRule.#ctor*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>eventRights</code>Anger ett ogiltigt värde.       - eller - <code>type</code> anger ett ogiltigt värde."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>identity</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>.       - eller - <code>eventRights</code> är noll."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>identity</code>är inget av typen <xref href=&quot;System.Security.Principal.SecurityIdentifier&quot;> </xref> eller av en typ som <xref href=&quot;System.Security.Principal.NTAccount&quot;> </xref> som kan konverteras till typen <xref href=&quot;System.Security.Principal.SecurityIdentifier&quot;> </xref>."
  platform:
  - net462
- uid: System.Security.AccessControl.EventWaitHandleAccessRule.#ctor(System.String,System.Security.AccessControl.EventWaitHandleRights,System.Security.AccessControl.AccessControlType)
  id: '#ctor(System.String,System.Security.AccessControl.EventWaitHandleRights,System.Security.AccessControl.AccessControlType)'
  parent: System.Security.AccessControl.EventWaitHandleAccessRule
  langs:
  - csharp
  name: EventWaitHandleAccessRule(String,EventWaitHandleRights,AccessControlType)
  nameWithType: EventWaitHandleAccessRule.EventWaitHandleAccessRule(String,EventWaitHandleRights,AccessControlType)
  fullName: System.Security.AccessControl.EventWaitHandleAccessRule.EventWaitHandleAccessRule(String,EventWaitHandleRights,AccessControlType)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "Initierar en ny instans av den <xref href=&quot;System.Security.AccessControl.EventWaitHandleAccessRule&quot;> </xref> klassen, som anger namnet på användaren eller gruppen som regeln gäller för de behörighet som krävs, och om de angivna åtkomstbehörigheterna tillåts eller nekas."
  remarks: "Vänta en <xref:System.Threading.EventWaitHandle>(genom att anropa den <xref:System.Threading.WaitHandle.WaitOne%2A>, <xref:System.Threading.WaitHandle.WaitAny%2A>eller <xref:System.Threading.WaitHandle.WaitAll%2A>metod), måste användaren ha <xref:System.Security.AccessControl.EventWaitHandleRights?displayProperty=fullName>åtkomst.</xref:System.Security.AccessControl.EventWaitHandleRights?displayProperty=fullName> </xref:System.Threading.WaitHandle.WaitAll%2A> </xref:System.Threading.WaitHandle.WaitAny%2A> </xref:System.Threading.WaitHandle.WaitOne%2A> </xref:System.Threading.EventWaitHandle> Att signalera en händelse genom att anropa den <xref:System.Threading.EventWaitHandle.Set%2A>metoden, eller för att återställa den till tillståndet unsignaled genom att anropa den <xref:System.Threading.EventWaitHandle.Reset%2A>metoden, måste användaren ha <xref:System.Security.AccessControl.EventWaitHandleRights?displayProperty=fullName>åtkomst.</xref:System.Security.AccessControl.EventWaitHandleRights?displayProperty=fullName> </xref:System.Threading.EventWaitHandle.Reset%2A> </xref:System.Threading.EventWaitHandle.Set%2A> Att signalera en <xref:System.Threading.EventWaitHandle>objekt och vänta på den genom att anropa den <xref:System.Threading.WaitHandle.SignalAndWait%2A>metoden, måste användaren ha <xref:System.Security.AccessControl.EventWaitHandleRights>och <xref:System.Security.AccessControl.EventWaitHandleRights>åtkomst.</xref:System.Security.AccessControl.EventWaitHandleRights> </xref:System.Security.AccessControl.EventWaitHandleRights> </xref:System.Threading.WaitHandle.SignalAndWait%2A> </xref:System.Threading.EventWaitHandle>       Den här konstruktorn är likvärdiga med att skapa en <xref:System.Security.Principal.NTAccount>objekt genom att skicka `identity` till den <xref:System.Security.Principal.NTAccount.%23ctor%28System.String%29?displayProperty=fullName>konstruktorn och skicka den nyligen skapade <xref:System.Security.Principal.NTAccount>objekt i <xref:System.Security.AccessControl.EventWaitHandleAccessRule.%23ctor%28System.Security.Principal.IdentityReference%2CSystem.Security.AccessControl.EventWaitHandleRights%2CSystem.Security.AccessControl.AccessControlType%29>konstruktor.</xref:System.Security.AccessControl.EventWaitHandleAccessRule.%23ctor%28System.Security.Principal.IdentityReference%2CSystem.Security.AccessControl.EventWaitHandleRights%2CSystem.Security.AccessControl.AccessControlType%29> </xref:System.Security.Principal.NTAccount> </xref:System.Security.Principal.NTAccount.%23ctor%28System.String%29?displayProperty=fullName> </xref:System.Security.Principal.NTAccount>"
  example:
  - "The following code example demonstrates the use of this constructor to create <xref:System.Security.AccessControl.EventWaitHandleAccessRule> objects. The example creates an <xref:System.Security.AccessControl.EventWaitHandleSecurity> object, adds rules that allow and deny various rights for the current user, and displays the resulting pair of rules. The example then allows new rights for the current user and displays the result, showing that the new rights are merged with the existing <xref:System.Security.AccessControl.AccessControlType>rule.  \n  \n> [!NOTE]\n>  This example does not attach the security object to a <xref:System.Threading.EventWaitHandle> object. Examples that attach security objects can be found in <xref:System.Threading.EventWaitHandle.GetAccessControl%2A?displayProperty=fullName> and <xref:System.Threading.EventWaitHandle.SetAccessControl%2A?displayProperty=fullName>.  \n  \n [!code-cs[System.Security.AccessControl.EventWaitHandleSecurity.AddAccessRule#1](~/add/codesnippet/csharp/ffb3828f-bc0d-4880-b857-_1.cs)]\n [!code-vb[System.Security.AccessControl.EventWaitHandleSecurity.AddAccessRule#1](~/add/codesnippet/visualbasic/ffb3828f-bc0d-4880-b857-_1.vb)]"
  syntax:
    content: public EventWaitHandleAccessRule (string identity, System.Security.AccessControl.EventWaitHandleRights eventRights, System.Security.AccessControl.AccessControlType type);
    parameters:
    - id: identity
      type: System.String
      description: "Namnet på användaren eller gruppen som regeln gäller."
    - id: eventRights
      type: System.Security.AccessControl.EventWaitHandleRights
      description: "En binär kombination av <xref href=&quot;System.Security.AccessControl.EventWaitHandleRights&quot;> </xref> värden som anger rättigheterna som tillåts eller nekas."
    - id: type
      type: System.Security.AccessControl.AccessControlType
      description: "En av de <xref href=&quot;System.Security.AccessControl.AccessControlType&quot;> </xref> värden som anger om rättigheterna som tillåts eller nekas."
  overload: System.Security.AccessControl.EventWaitHandleAccessRule.#ctor*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>eventRights</code>Anger ett ogiltigt värde.       - eller - <code>type</code> anger ett ogiltigt värde."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>eventRights</code>är noll."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>identity</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>.       - eller - <code>identity</code> är en sträng med längden noll.       - eller - <code>identity</code> är längre än 512 tecken."
  platform:
  - net462
- uid: System.Security.AccessControl.EventWaitHandleAccessRule.EventWaitHandleRights
  id: EventWaitHandleRights
  parent: System.Security.AccessControl.EventWaitHandleAccessRule
  langs:
  - csharp
  name: EventWaitHandleRights
  nameWithType: EventWaitHandleAccessRule.EventWaitHandleRights
  fullName: System.Security.AccessControl.EventWaitHandleAccessRule.EventWaitHandleRights
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "Hämtar de rättigheter som tillåts eller nekas av regeln."
  remarks: "<xref:System.Security.AccessControl.EventWaitHandleAccessRule>objekt är inte ändras.</xref:System.Security.AccessControl.EventWaitHandleAccessRule> Du kan skapa en ny åtkomstregel som representerar en annan användare, andra rättigheter eller en annan <xref:System.Security.AccessControl.AccessControlType>, men du kan inte ändra en befintlig åtkomstregel.</xref:System.Security.AccessControl.AccessControlType>"
  example:
  - "The following code example demonstrates the use of the EventWaitHandleRights property to display the rights in the set of rules contained in an <xref:System.Security.AccessControl.EventWaitHandleSecurity> object. The example creates an <xref:System.Security.AccessControl.EventWaitHandleSecurity> object, adds rules that allow and deny various rights for the current user, and displays the resulting pair of rules. The example then allows new rights for the current user and displays the result, showing that the new rights are merged with the existing <xref:System.Security.AccessControl.AccessControlType>rule.  \n  \n> [!NOTE]\n>  This example does not attach the security object to a <xref:System.Threading.EventWaitHandle> object. Examples that attach security objects can be found in <xref:System.Threading.EventWaitHandle.GetAccessControl%2A?displayProperty=fullName> and <xref:System.Threading.EventWaitHandle.SetAccessControl%2A?displayProperty=fullName>.  \n  \n [!code-cs[System.Security.AccessControl.EventWaitHandleSecurity.AddAccessRule#1](~/add/codesnippet/csharp/p-system.security.access_2_1.cs)]\n [!code-vb[System.Security.AccessControl.EventWaitHandleSecurity.AddAccessRule#1](~/add/codesnippet/visualbasic/p-system.security.access_2_1.vb)]"
  syntax:
    content: public System.Security.AccessControl.EventWaitHandleRights EventWaitHandleRights { get; }
    return:
      type: System.Security.AccessControl.EventWaitHandleRights
      description: "En binär kombination av <xref href=&quot;System.Security.AccessControl.EventWaitHandleRights&quot;> </xref> värden som anger rättigheterna som tillåts eller nekas av regeln."
  overload: System.Security.AccessControl.EventWaitHandleAccessRule.EventWaitHandleRights*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Security.AccessControl.AccessRule
  isExternal: false
  name: System.Security.AccessControl.AccessRule
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.Security.AccessControl.EventWaitHandleAccessRule.#ctor(System.Security.Principal.IdentityReference,System.Security.AccessControl.EventWaitHandleRights,System.Security.AccessControl.AccessControlType)
  parent: System.Security.AccessControl.EventWaitHandleAccessRule
  isExternal: false
  name: EventWaitHandleAccessRule(IdentityReference,EventWaitHandleRights,AccessControlType)
  nameWithType: EventWaitHandleAccessRule.EventWaitHandleAccessRule(IdentityReference,EventWaitHandleRights,AccessControlType)
  fullName: System.Security.AccessControl.EventWaitHandleAccessRule.EventWaitHandleAccessRule(IdentityReference,EventWaitHandleRights,AccessControlType)
- uid: System.Security.Principal.IdentityReference
  parent: System.Security.Principal
  isExternal: false
  name: IdentityReference
  nameWithType: IdentityReference
  fullName: System.Security.Principal.IdentityReference
- uid: System.Security.AccessControl.EventWaitHandleRights
  parent: System.Security.AccessControl
  isExternal: false
  name: EventWaitHandleRights
  nameWithType: EventWaitHandleRights
  fullName: System.Security.AccessControl.EventWaitHandleRights
- uid: System.Security.AccessControl.AccessControlType
  parent: System.Security.AccessControl
  isExternal: false
  name: AccessControlType
  nameWithType: AccessControlType
  fullName: System.Security.AccessControl.AccessControlType
- uid: System.Security.AccessControl.EventWaitHandleAccessRule.#ctor(System.String,System.Security.AccessControl.EventWaitHandleRights,System.Security.AccessControl.AccessControlType)
  parent: System.Security.AccessControl.EventWaitHandleAccessRule
  isExternal: false
  name: EventWaitHandleAccessRule(String,EventWaitHandleRights,AccessControlType)
  nameWithType: EventWaitHandleAccessRule.EventWaitHandleAccessRule(String,EventWaitHandleRights,AccessControlType)
  fullName: System.Security.AccessControl.EventWaitHandleAccessRule.EventWaitHandleAccessRule(String,EventWaitHandleRights,AccessControlType)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Security.AccessControl.EventWaitHandleAccessRule.EventWaitHandleRights
  parent: System.Security.AccessControl.EventWaitHandleAccessRule
  isExternal: false
  name: EventWaitHandleRights
  nameWithType: EventWaitHandleAccessRule.EventWaitHandleRights
  fullName: System.Security.AccessControl.EventWaitHandleAccessRule.EventWaitHandleRights
- uid: System.Security.AccessControl.EventWaitHandleAccessRule.#ctor*
  parent: System.Security.AccessControl.EventWaitHandleAccessRule
  isExternal: false
  name: EventWaitHandleAccessRule
  nameWithType: EventWaitHandleAccessRule.EventWaitHandleAccessRule
- uid: System.Security.AccessControl.EventWaitHandleAccessRule.EventWaitHandleRights*
  parent: System.Security.AccessControl.EventWaitHandleAccessRule
  isExternal: false
  name: EventWaitHandleRights
  nameWithType: EventWaitHandleAccessRule.EventWaitHandleRights
