### YamlMime:ManagedReference
items:
- uid: System.Windows.PropertyMetadata
  id: PropertyMetadata
  children:
  - System.Windows.PropertyMetadata.#ctor
  - System.Windows.PropertyMetadata.#ctor(System.Object)
  - System.Windows.PropertyMetadata.#ctor(System.Windows.PropertyChangedCallback)
  - System.Windows.PropertyMetadata.#ctor(System.Object,System.Windows.PropertyChangedCallback)
  - System.Windows.PropertyMetadata.#ctor(System.Object,System.Windows.PropertyChangedCallback,System.Windows.CoerceValueCallback)
  - System.Windows.PropertyMetadata.CoerceValueCallback
  - System.Windows.PropertyMetadata.DefaultValue
  - System.Windows.PropertyMetadata.IsSealed
  - System.Windows.PropertyMetadata.Merge(System.Windows.PropertyMetadata,System.Windows.DependencyProperty)
  - System.Windows.PropertyMetadata.OnApply(System.Windows.DependencyProperty,System.Type)
  - System.Windows.PropertyMetadata.PropertyChangedCallback
  langs:
  - csharp
  name: PropertyMetadata
  nameWithType: PropertyMetadata
  fullName: System.Windows.PropertyMetadata
  type: Class
  summary: "Definierar vissa beteende aspekter av en beroendeegenskap eftersom den används för en viss typ, inklusive villkor för programmet registrerades med."
  remarks: "Egenskapens metadata kan definieras och används under registreringen av cacheberoenden egenskapen när du anropar den <xref:System.Windows.DependencyProperty.Register%2A>metod (eller variationer för bifogade egenskaper eller skrivskyddad beroendeegenskaper) eller efter den ursprungliga ägaren registreringen när du anropar den <xref:System.Windows.DependencyPropertyKey.OverrideMetadata%2A>metoden.</xref:System.Windows.DependencyPropertyKey.OverrideMetadata%2A> </xref:System.Windows.DependencyProperty.Register%2A> <xref:System.Windows.DependencyProperty.AddOwner%2A>tar också egenskapmetadata.</xref:System.Windows.DependencyProperty.AddOwner%2A>       Den här klassen är en konkret basklass som kan användas i var och en av dessa anrop. Dock är det mycket vanligt att ange metadata med hjälp av en av de härledda klasserna, till exempel <xref:System.Windows.FrameworkPropertyMetadata>.</xref:System.Windows.FrameworkPropertyMetadata> Dessa härledda klasser stöder mer detaljerad metadata som booleskt egenskapsvärden som är användbara för identifiering av eller för att aktivera vissa egenskapen system och layout beteenden som tillämpas endast på den [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)] framework nivå.       Flera egenskaper för den här klassen är skrivskyddad till objektmodellen, men kan bara skrivas innan den instans som används i en egenskap systemåtgärd, till exempel <xref:System.Windows.DependencyProperty.Register%2A>eller <xref:System.Windows.DependencyPropertyKey.OverrideMetadata%2A>.</xref:System.Windows.DependencyPropertyKey.OverrideMetadata%2A> </xref:System.Windows.DependencyProperty.Register%2A> Var och en av de här egenskaperna kan också har ställts in av konstruktorn men är tillgängliga så att <xref:System.Windows.PropertyMetadata.Merge%2A>metoden implementeringar kan ange dem.</xref:System.Windows.PropertyMetadata.Merge%2A>      <a name=&quot;xamlTextUsage_PropertyMetadata&quot;></a>## XAML Text användning den här typen och medlemmar i den här typen inte vanligtvis används i [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]."
  syntax:
    content: public class PropertyMetadata
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Windows.PropertyMetadata.#ctor
  id: '#ctor'
  parent: System.Windows.PropertyMetadata
  langs:
  - csharp
  name: PropertyMetadata()
  nameWithType: PropertyMetadata.PropertyMetadata()
  fullName: System.Windows.PropertyMetadata.PropertyMetadata()
  type: Constructor
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Initierar en ny instans av den <xref href=&quot;System.Windows.PropertyMetadata&quot;> </xref> klass."
  syntax:
    content: public PropertyMetadata ();
    parameters: []
  overload: System.Windows.PropertyMetadata.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.PropertyMetadata.#ctor(System.Object)
  id: '#ctor(System.Object)'
  parent: System.Windows.PropertyMetadata
  langs:
  - csharp
  name: PropertyMetadata(Object)
  nameWithType: PropertyMetadata.PropertyMetadata(Object)
  fullName: System.Windows.PropertyMetadata.PropertyMetadata(Object)
  type: Constructor
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Initierar en ny instans av den <xref href=&quot;System.Windows.PropertyMetadata&quot;> </xref> klass med ett angivet standardvärde för beroendegenskapen som denna metadata kan tillämpas på."
  remarks: "Typ av värdet för `defaultValue` måste vara matcha eller vara relaterad till typen i den ursprungliga registreringen av beroendeegenskap som kommer att tillämpas dessa metadata. Matchningsfel mellan metadatatyp för standardvärde och typ av beroendeegenskap som används för kan vara svårt att felsöka, eftersom fel inte kan upptäckas under kompilering (för det höjer ett undantag).       Även om det är standardvärdet per parameterlös konstruktor en `defaultValue` av <xref:System.Windows.DependencyProperty.UnsetValue>kan inte anges.</xref:System.Windows.DependencyProperty.UnsetValue> Försök att göra det höjer ett undantag."
  example:
  - "[!code-cs[PropertyMetadataAPIs#Initpm](~/add/codesnippet/csharp/PropertyMetadataAPIs/Class1.cs#initpm)]  \n[!code-cs[PropertyMetadataAPIs#PMCtor1param](~/add/codesnippet/csharp/PropertyMetadataAPIs/Class1.cs#pmctor1param)]"
  syntax:
    content: public PropertyMetadata (object defaultValue);
    parameters:
    - id: defaultValue
      type: System.Object
      description: "Standardvärdet som du anger för en beroendeegenskap vanligtvis anges som ett värde av vissa specifika typen."
  overload: System.Windows.PropertyMetadata.#ctor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>defaultValue</code>kan inte anges till värdet <xref href=&quot;System.Windows.DependencyProperty.UnsetValue&quot;> </xref>; finns kommentarer."
  platform:
  - net462
- uid: System.Windows.PropertyMetadata.#ctor(System.Windows.PropertyChangedCallback)
  id: '#ctor(System.Windows.PropertyChangedCallback)'
  parent: System.Windows.PropertyMetadata
  langs:
  - csharp
  name: PropertyMetadata(PropertyChangedCallback)
  nameWithType: PropertyMetadata.PropertyMetadata(PropertyChangedCallback)
  fullName: System.Windows.PropertyMetadata.PropertyMetadata(PropertyChangedCallback)
  type: Constructor
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Initierar en ny instans av den <xref href=&quot;System.Windows.PropertyMetadata&quot;> </xref> klass med det angivna <xref href=&quot;System.Windows.PropertyChangedCallback&quot;> </xref> implementering referens."
  remarks: ''
  example:
  - "[!code-cs[PropertyMetadataAPIs#Initpm](~/add/codesnippet/csharp/PropertyMetadataAPIs/Class1.cs#initpm)]  \n[!code-cs[PropertyMetadataAPIs#PMCtor1paramcallback](~/add/codesnippet/csharp/PropertyMetadataAPIs/Class1.cs#pmctor1paramcallback)]"
  syntax:
    content: public PropertyMetadata (System.Windows.PropertyChangedCallback propertyChangedCallback);
    parameters:
    - id: propertyChangedCallback
      type: System.Windows.PropertyChangedCallback
      description: "Referens till en hanterare-implementering som ska anropas av egenskapen systemet när det giltiga värdet för egenskapen ändras."
  overload: System.Windows.PropertyMetadata.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.PropertyMetadata.#ctor(System.Object,System.Windows.PropertyChangedCallback)
  id: '#ctor(System.Object,System.Windows.PropertyChangedCallback)'
  parent: System.Windows.PropertyMetadata
  langs:
  - csharp
  name: PropertyMetadata(Object,PropertyChangedCallback)
  nameWithType: PropertyMetadata.PropertyMetadata(Object,PropertyChangedCallback)
  fullName: System.Windows.PropertyMetadata.PropertyMetadata(Object,PropertyChangedCallback)
  type: Constructor
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Initierar en ny instans av den <xref href=&quot;System.Windows.PropertyMetadata&quot;> </xref> klass med angivet standardvärde och <xref href=&quot;System.Windows.PropertyChangedCallback&quot;> </xref> implementering referens."
  remarks: "Typ av det tillhandahållna värdet `defaultValue` måste vara matcha eller vara relaterad till typen i den ursprungliga registreringen av beroendeegenskap som kommer att tillämpas dessa metadata. Matchningsfel mellan metadatatyp för standardvärde och typ av beroendeegenskap som används för kan vara svårt att felsöka, eftersom fel inte kan upptäckas under kompilering (för det höjer ett undantag).       Även om det är standardvärdet per parameterlös konstruktor en `defaultValue` av <xref:System.Windows.DependencyProperty.UnsetValue>kan inte anges.</xref:System.Windows.DependencyProperty.UnsetValue> Försök att göra det höjer ett undantag."
  example:
  - "[!code-cs[PropertyMetadataAPIs#Initpm](~/add/codesnippet/csharp/PropertyMetadataAPIs/Class1.cs#initpm)]  \n[!code-cs[PropertyMetadataAPIs#PMCtor2param](~/add/codesnippet/csharp/PropertyMetadataAPIs/Class1.cs#pmctor2param)]"
  syntax:
    content: public PropertyMetadata (object defaultValue, System.Windows.PropertyChangedCallback propertyChangedCallback);
    parameters:
    - id: defaultValue
      type: System.Object
      description: "Standardvärdet för beroendegenskapen, vanligtvis anges som ett värde av vissa specifika typen."
    - id: propertyChangedCallback
      type: System.Windows.PropertyChangedCallback
      description: "Referens till en hanterare-implementering som ska anropas av egenskapen systemet när det giltiga värdet för egenskapen ändras."
  overload: System.Windows.PropertyMetadata.#ctor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>defaultValue</code>kan inte anges till värdet <xref href=&quot;System.Windows.DependencyProperty.UnsetValue&quot;> </xref>; finns kommentarer."
  platform:
  - net462
- uid: System.Windows.PropertyMetadata.#ctor(System.Object,System.Windows.PropertyChangedCallback,System.Windows.CoerceValueCallback)
  id: '#ctor(System.Object,System.Windows.PropertyChangedCallback,System.Windows.CoerceValueCallback)'
  parent: System.Windows.PropertyMetadata
  langs:
  - csharp
  name: PropertyMetadata(Object,PropertyChangedCallback,CoerceValueCallback)
  nameWithType: PropertyMetadata.PropertyMetadata(Object,PropertyChangedCallback,CoerceValueCallback)
  fullName: System.Windows.PropertyMetadata.PropertyMetadata(Object,PropertyChangedCallback,CoerceValueCallback)
  type: Constructor
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Initierar en ny instans av den <xref href=&quot;System.Windows.PropertyMetadata&quot;> </xref> klass med angivet standardvärde och återanrop."
  remarks: "Om du vill ange en <xref:System.Windows.CoerceValueCallback>men inte en <xref:System.Windows.PropertyChangedCallback>, du kan skicka `null` för den `propertyChangedCallback` parameter.</xref:System.Windows.PropertyChangedCallback> </xref:System.Windows.CoerceValueCallback>       Typ av värdet för `defaultValue` måste vara matcha eller vara relaterad till typen i den ursprungliga registreringen av beroendeegenskap som kommer att tillämpas dessa metadata. Matchningsfel mellan metadatatyp för standardvärde och typ av beroendeegenskap som används för kan vara svårt att felsöka, eftersom fel inte kan upptäckas under kompilering (för det höjer ett undantag).       Även om det är standardvärdet per parameterlös konstruktor en `defaultValue` av <xref:System.Windows.DependencyProperty.UnsetValue>kan inte anges.</xref:System.Windows.DependencyProperty.UnsetValue> Försök att göra det höjer ett undantag."
  example:
  - "[!code-cs[PropertyMetadataAPIs#Initpm](~/add/codesnippet/csharp/PropertyMetadataAPIs/Class1.cs#initpm)]  \n[!code-cs[PropertyMetadataAPIs#PMCtor3param](~/add/codesnippet/csharp/PropertyMetadataAPIs/Class1.cs#pmctor3param)]"
  syntax:
    content: public PropertyMetadata (object defaultValue, System.Windows.PropertyChangedCallback propertyChangedCallback, System.Windows.CoerceValueCallback coerceValueCallback);
    parameters:
    - id: defaultValue
      type: System.Object
      description: "Standardvärdet för beroendegenskapen, vanligtvis anges som ett värde av vissa specifika typen."
    - id: propertyChangedCallback
      type: System.Windows.PropertyChangedCallback
      description: "Referens till en hanterare-implementering som ska anropas av egenskapen systemet när det giltiga värdet för egenskapen ändras."
    - id: coerceValueCallback
      type: System.Windows.CoerceValueCallback
      description: "Referens till en hanterare-implementering som ska anropas när egenskapen systemet anropar <xref:System.Windows.DependencyObject.CoerceValue*>mot den här egenskapen.</xref:System.Windows.DependencyObject.CoerceValue*>"
  overload: System.Windows.PropertyMetadata.#ctor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>defaultValue</code>kan inte anges till värdet <xref href=&quot;System.Windows.DependencyProperty.UnsetValue&quot;> </xref>; finns kommentarer."
  platform:
  - net462
- uid: System.Windows.PropertyMetadata.CoerceValueCallback
  id: CoerceValueCallback
  parent: System.Windows.PropertyMetadata
  langs:
  - csharp
  name: CoerceValueCallback
  nameWithType: PropertyMetadata.CoerceValueCallback
  fullName: System.Windows.PropertyMetadata.CoerceValueCallback
  type: Property
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Hämtar eller anger en referens till en <xref href=&quot;System.Windows.CoerceValueCallback&quot;> </xref> implementering som angetts i metadata."
  remarks: "Återanrop i egenskapens metadata är inte vanligtvis offentliga medlemmar på den innehållande typen värdet för den här egenskapen inte är viktigt för de flesta scenarier som bara använder en befintlig beroendeegenskap metadata. En orsak visas den här egenskapen är så att underklasser för metadata kan utföra sina önskade merge logik om både basens metadata och åsidosätta/lägga till metadata anger <xref:System.Windows.CoerceValueCallback>.</xref:System.Windows.CoerceValueCallback> Standard merge logik för en CoerceValueCallback är dock att ersätta det tidigare.       CoerceValueCallback definieras i objektmodellen som skrivskyddad. Det här är så CoerceValueCallback kan justeras efter initieringen av den <xref:System.Windows.PropertyMetadata>själva objektet.</xref:System.Windows.PropertyMetadata> Men när metadata som används som en del av ett anrop till <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, eller <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, systemets egenskapen kommer försegla metadata instansen och egenskaperna är nu vara ändras.</xref:System.Windows.DependencyProperty.OverrideMetadata%2A> </xref:System.Windows.DependencyProperty.AddOwner%2A> </xref:System.Windows.DependencyProperty.Register%2A> Försöker ange CoerceValueCallback när <xref:System.Windows.PropertyMetadata.IsSealed%2A>är `true` på dessa metadata instans ska generera ett undantag.</xref:System.Windows.PropertyMetadata.IsSealed%2A>"
  syntax:
    content: public System.Windows.CoerceValueCallback CoerceValueCallback { get; set; }
    return:
      type: System.Windows.CoerceValueCallback
      description: "En <xref href=&quot;System.Windows.CoerceValueCallback&quot;> </xref> implementering referens."
  overload: System.Windows.PropertyMetadata.CoerceValueCallback*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Det går inte att ange en metadataegenskap när det används i en beroende egenskap åtgärd."
  platform:
  - net462
- uid: System.Windows.PropertyMetadata.DefaultValue
  id: DefaultValue
  parent: System.Windows.PropertyMetadata
  langs:
  - csharp
  name: DefaultValue
  nameWithType: PropertyMetadata.DefaultValue
  fullName: System.Windows.PropertyMetadata.DefaultValue
  type: Property
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Hämtar eller anger standardvärdet för beroendegenskapen."
  remarks: "DefaultValue definieras i objektmodellen som skrivskyddad. Det här är så DefaultValue kan justeras efter initieringen av den <xref:System.Windows.PropertyMetadata>själva objektet.</xref:System.Windows.PropertyMetadata> Men när metadata som används som en del av ett anrop till <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, eller <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, systemets egenskapen kommer försegla metadata instansen och egenskaperna är nu vara ändras.</xref:System.Windows.DependencyProperty.OverrideMetadata%2A> </xref:System.Windows.DependencyProperty.AddOwner%2A> </xref:System.Windows.DependencyProperty.Register%2A> Försöker ange DefaultValue när <xref:System.Windows.PropertyMetadata.IsSealed%2A>är `true` på dessa metadata instans ska generera ett undantag.</xref:System.Windows.PropertyMetadata.IsSealed%2A>       Även om det är standardvärdet per parameterlös konstruktor en `defaultValue` av <xref:System.Windows.DependencyProperty.UnsetValue>kan inte anges med DefaultValue eller konstruktorn.</xref:System.Windows.DependencyProperty.UnsetValue> Försök att göra det höjer ett undantag.      <a name=&quot;xamlTextUsage_PropertyChangedCallback&quot;></a>## XAML Text användning medlemmar av den här typen inte används vanligtvis i [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]."
  syntax:
    content: public object DefaultValue { get; set; }
    return:
      type: System.Object
      description: "Standardvärdet för egenskapen. Standardvärdet för en <xref href=&quot;System.Windows.PropertyMetadata&quot;> </xref> instans som har skapats med en parameterlös konstruktor blir <xref href=&quot;System.Windows.DependencyProperty.UnsetValue&quot;> </xref>; finns kommentarer."
  overload: System.Windows.PropertyMetadata.DefaultValue*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Kan inte anges till värdet <xref href=&quot;System.Windows.DependencyProperty.UnsetValue&quot;> </xref> när skapats; se anmärkning."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Det går inte att ange en metadataegenskap när det används i en beroende egenskap åtgärd."
  platform:
  - net462
- uid: System.Windows.PropertyMetadata.IsSealed
  id: IsSealed
  parent: System.Windows.PropertyMetadata
  langs:
  - csharp
  name: IsSealed
  nameWithType: PropertyMetadata.IsSealed
  fullName: System.Windows.PropertyMetadata.IsSealed
  type: Property
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Hämtar ett värde som avgör om metadata har kopplats till en egenskap på något sätt, vilket resulterar i ändras tillståndet för den metadata-instansen."
  remarks: "Olika egenskaper för <xref:System.Windows.PropertyMetadata>, som <xref:System.Windows.PropertyMetadata.DefaultValue%2A>, definieras i objektmodellen som skrivskyddad.</xref:System.Windows.PropertyMetadata.DefaultValue%2A> </xref:System.Windows.PropertyMetadata> Detta är så att dessa egenskaper kan justeras efter initieringen av den <xref:System.Windows.PropertyMetadata>själva objektet.</xref:System.Windows.PropertyMetadata> Men när metadata har använts på en beroendeegenskap som en del av ett anrop till <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, eller <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, systemets egenskapen kommer försegla metadata instansen och egenskaperna är nu vara ändras.</xref:System.Windows.DependencyProperty.OverrideMetadata%2A> </xref:System.Windows.DependencyProperty.AddOwner%2A> </xref:System.Windows.DependencyProperty.Register%2A> Vid tiden för en av dessa anrop <xref:System.Windows.PropertyMetadata.OnApply%2A>anropas, och värdet för den här egenskapen anges till `true`.</xref:System.Windows.PropertyMetadata.OnApply%2A>"
  example:
  - "The following example  checks IsSealed prior to a set operation of a custom metadata property.  \n  \n [!code-cs[PropertyMetadataAPIs#MergeImpl](~/add/codesnippet/csharp/PropertyMetadataAPIs/Class1.cs#mergeimpl)]"
  syntax:
    content: protected bool IsSealed { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Om metadata-instansen är oföränderliga. Annars <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.PropertyMetadata.IsSealed*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.PropertyMetadata.Merge(System.Windows.PropertyMetadata,System.Windows.DependencyProperty)
  id: Merge(System.Windows.PropertyMetadata,System.Windows.DependencyProperty)
  parent: System.Windows.PropertyMetadata
  langs:
  - csharp
  name: Merge(PropertyMetadata,DependencyProperty)
  nameWithType: PropertyMetadata.Merge(PropertyMetadata,DependencyProperty)
  fullName: System.Windows.PropertyMetadata.Merge(PropertyMetadata,DependencyProperty)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Slår ihop dessa metadata med grundläggande metadata."
  remarks: "Den här metoden används internt när metadata har åsidosatts (<xref:System.Windows.DependencyProperty.OverrideMetadata%2A> metod).</xref:System.Windows.DependencyProperty.OverrideMetadata%2A>"
  example:
  - "The following example implements a merge for a custom metadata type that adds an additional property to the property metadata.  \n  \n [!code-cs[PropertyMetadataAPIs#MergeImpl](~/add/codesnippet/csharp/PropertyMetadataAPIs/Class1.cs#mergeimpl)]"
  syntax:
    content: protected virtual void Merge (System.Windows.PropertyMetadata baseMetadata, System.Windows.DependencyProperty dp);
    parameters:
    - id: baseMetadata
      type: System.Windows.PropertyMetadata
      description: "Grundläggande metadata att slå samman med värden för den här instansen."
    - id: dp
      type: System.Windows.DependencyProperty
      description: "Beroendegenskapen som denna metadata som används."
  overload: System.Windows.PropertyMetadata.Merge*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.PropertyMetadata.OnApply(System.Windows.DependencyProperty,System.Type)
  id: OnApply(System.Windows.DependencyProperty,System.Type)
  parent: System.Windows.PropertyMetadata
  langs:
  - csharp
  name: OnApply(DependencyProperty,Type)
  nameWithType: PropertyMetadata.OnApply(DependencyProperty,Type)
  fullName: System.Windows.PropertyMetadata.OnApply(DependencyProperty,Type)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Anropas när denna metadata har kopplats till en egenskap, vilket innebär att metadata är är förseglat."
  remarks: "Underklasser ska vara säker på att alla mutability av datastruktur för en <xref:System.Windows.PropertyMetadata>underklass bör markeras som inte ändras när OnApply anropas.</xref:System.Windows.PropertyMetadata> Detta kommer att anropas när metadata har använts på en egenskap systemåtgärd (registrera, lägga till ägare, åsidosätter metadata)."
  syntax:
    content: protected virtual void OnApply (System.Windows.DependencyProperty dp, Type targetType);
    parameters:
    - id: dp
      type: System.Windows.DependencyProperty
      description: "Beroendegenskapen som metadata har tillämpats."
    - id: targetType
      type: System.Type
      description: "Den typ som är kopplade till dessa metadata om det här är typspecifika metadata. Om det här är standard metadata i det här värdet är en null-referens."
  overload: System.Windows.PropertyMetadata.OnApply*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.PropertyMetadata.PropertyChangedCallback
  id: PropertyChangedCallback
  parent: System.Windows.PropertyMetadata
  langs:
  - csharp
  name: PropertyChangedCallback
  nameWithType: PropertyMetadata.PropertyChangedCallback
  fullName: System.Windows.PropertyMetadata.PropertyChangedCallback
  type: Property
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Hämtar eller anger en referens till en <xref href=&quot;System.Windows.PropertyChangedCallback&quot;> </xref> implementering som angetts i metadata."
  remarks: "Återanrop i egenskapmetadata är inte vanligtvis offentliga medlemmar på Definiera typ, så värdet för den här egenskapen inte är viktigt för de flesta scenarier som bara använder en befintlig beroendeegenskap metadata. En orsak till den här egenskapen är exponerad är att metadata klasser kan utföra sina önskade merge logik om både basens metadata och åsidosätta/lägga till metadata anger <xref:System.Windows.PropertyChangedCallback>.</xref:System.Windows.PropertyChangedCallback> Standard merge logik för är att hantera alla PropertyChangedCallback implementeringar i en tabell och anropa dem, med återanrop som upprättas av klassen djupaste i hierarkin kör första.       PropertyChangedCallback definieras i objektmodellen som skrivskyddad. Det här är så PropertyChangedCallback kan justeras efter initieringen av den <xref:System.Windows.PropertyMetadata>själva objektet.</xref:System.Windows.PropertyMetadata> Men när metadata som används som en del av ett anrop till <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, eller <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, systemets egenskapen kommer försegla metadata instansen och egenskaperna är nu vara ändras.</xref:System.Windows.DependencyProperty.OverrideMetadata%2A> </xref:System.Windows.DependencyProperty.AddOwner%2A> </xref:System.Windows.DependencyProperty.Register%2A> Försöker ange PropertyChangedCallback när <xref:System.Windows.PropertyMetadata.IsSealed%2A>är `true` på dessa metadata instans ska generera ett undantag.</xref:System.Windows.PropertyMetadata.IsSealed%2A>"
  syntax:
    content: public System.Windows.PropertyChangedCallback PropertyChangedCallback { get; set; }
    return:
      type: System.Windows.PropertyChangedCallback
      description: "En <xref href=&quot;System.Windows.PropertyChangedCallback&quot;> </xref> implementering referens."
  overload: System.Windows.PropertyMetadata.PropertyChangedCallback*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Det går inte att ange en metadataegenskap när det används i en beroende egenskap åtgärd."
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.Windows.PropertyMetadata.#ctor
  parent: System.Windows.PropertyMetadata
  isExternal: false
  name: PropertyMetadata()
  nameWithType: PropertyMetadata.PropertyMetadata()
  fullName: System.Windows.PropertyMetadata.PropertyMetadata()
- uid: System.Windows.PropertyMetadata.#ctor(System.Object)
  parent: System.Windows.PropertyMetadata
  isExternal: false
  name: PropertyMetadata(Object)
  nameWithType: PropertyMetadata.PropertyMetadata(Object)
  fullName: System.Windows.PropertyMetadata.PropertyMetadata(Object)
- uid: System.Windows.PropertyMetadata.#ctor(System.Windows.PropertyChangedCallback)
  parent: System.Windows.PropertyMetadata
  isExternal: false
  name: PropertyMetadata(PropertyChangedCallback)
  nameWithType: PropertyMetadata.PropertyMetadata(PropertyChangedCallback)
  fullName: System.Windows.PropertyMetadata.PropertyMetadata(PropertyChangedCallback)
- uid: System.Windows.PropertyChangedCallback
  parent: System.Windows
  isExternal: false
  name: PropertyChangedCallback
  nameWithType: PropertyChangedCallback
  fullName: System.Windows.PropertyChangedCallback
- uid: System.Windows.PropertyMetadata.#ctor(System.Object,System.Windows.PropertyChangedCallback)
  parent: System.Windows.PropertyMetadata
  isExternal: false
  name: PropertyMetadata(Object,PropertyChangedCallback)
  nameWithType: PropertyMetadata.PropertyMetadata(Object,PropertyChangedCallback)
  fullName: System.Windows.PropertyMetadata.PropertyMetadata(Object,PropertyChangedCallback)
- uid: System.Windows.PropertyMetadata.#ctor(System.Object,System.Windows.PropertyChangedCallback,System.Windows.CoerceValueCallback)
  parent: System.Windows.PropertyMetadata
  isExternal: false
  name: PropertyMetadata(Object,PropertyChangedCallback,CoerceValueCallback)
  nameWithType: PropertyMetadata.PropertyMetadata(Object,PropertyChangedCallback,CoerceValueCallback)
  fullName: System.Windows.PropertyMetadata.PropertyMetadata(Object,PropertyChangedCallback,CoerceValueCallback)
- uid: System.Windows.CoerceValueCallback
  parent: System.Windows
  isExternal: false
  name: CoerceValueCallback
  nameWithType: CoerceValueCallback
  fullName: System.Windows.CoerceValueCallback
- uid: System.Windows.PropertyMetadata.CoerceValueCallback
  parent: System.Windows.PropertyMetadata
  isExternal: false
  name: CoerceValueCallback
  nameWithType: PropertyMetadata.CoerceValueCallback
  fullName: System.Windows.PropertyMetadata.CoerceValueCallback
- uid: System.Windows.PropertyMetadata.DefaultValue
  parent: System.Windows.PropertyMetadata
  isExternal: false
  name: DefaultValue
  nameWithType: PropertyMetadata.DefaultValue
  fullName: System.Windows.PropertyMetadata.DefaultValue
- uid: System.Windows.PropertyMetadata.IsSealed
  parent: System.Windows.PropertyMetadata
  isExternal: false
  name: IsSealed
  nameWithType: PropertyMetadata.IsSealed
  fullName: System.Windows.PropertyMetadata.IsSealed
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Windows.PropertyMetadata.Merge(System.Windows.PropertyMetadata,System.Windows.DependencyProperty)
  parent: System.Windows.PropertyMetadata
  isExternal: false
  name: Merge(PropertyMetadata,DependencyProperty)
  nameWithType: PropertyMetadata.Merge(PropertyMetadata,DependencyProperty)
  fullName: System.Windows.PropertyMetadata.Merge(PropertyMetadata,DependencyProperty)
- uid: System.Windows.PropertyMetadata
  parent: System.Windows
  isExternal: false
  name: PropertyMetadata
  nameWithType: PropertyMetadata
  fullName: System.Windows.PropertyMetadata
- uid: System.Windows.DependencyProperty
  parent: System.Windows
  isExternal: false
  name: DependencyProperty
  nameWithType: DependencyProperty
  fullName: System.Windows.DependencyProperty
- uid: System.Windows.PropertyMetadata.OnApply(System.Windows.DependencyProperty,System.Type)
  parent: System.Windows.PropertyMetadata
  isExternal: false
  name: OnApply(DependencyProperty,Type)
  nameWithType: PropertyMetadata.OnApply(DependencyProperty,Type)
  fullName: System.Windows.PropertyMetadata.OnApply(DependencyProperty,Type)
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Windows.PropertyMetadata.PropertyChangedCallback
  parent: System.Windows.PropertyMetadata
  isExternal: false
  name: PropertyChangedCallback
  nameWithType: PropertyMetadata.PropertyChangedCallback
  fullName: System.Windows.PropertyMetadata.PropertyChangedCallback
- uid: System.Windows.PropertyMetadata.#ctor*
  parent: System.Windows.PropertyMetadata
  isExternal: false
  name: PropertyMetadata
  nameWithType: PropertyMetadata.PropertyMetadata
- uid: System.Windows.PropertyMetadata.CoerceValueCallback*
  parent: System.Windows.PropertyMetadata
  isExternal: false
  name: CoerceValueCallback
  nameWithType: PropertyMetadata.CoerceValueCallback
- uid: System.Windows.PropertyMetadata.DefaultValue*
  parent: System.Windows.PropertyMetadata
  isExternal: false
  name: DefaultValue
  nameWithType: PropertyMetadata.DefaultValue
- uid: System.Windows.PropertyMetadata.IsSealed*
  parent: System.Windows.PropertyMetadata
  isExternal: false
  name: IsSealed
  nameWithType: PropertyMetadata.IsSealed
- uid: System.Windows.PropertyMetadata.Merge*
  parent: System.Windows.PropertyMetadata
  isExternal: false
  name: Merge
  nameWithType: PropertyMetadata.Merge
- uid: System.Windows.PropertyMetadata.OnApply*
  parent: System.Windows.PropertyMetadata
  isExternal: false
  name: OnApply
  nameWithType: PropertyMetadata.OnApply
- uid: System.Windows.PropertyMetadata.PropertyChangedCallback*
  parent: System.Windows.PropertyMetadata
  isExternal: false
  name: PropertyChangedCallback
  nameWithType: PropertyMetadata.PropertyChangedCallback
