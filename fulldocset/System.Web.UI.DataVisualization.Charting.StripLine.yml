### YamlMime:ManagedReference
items:
- uid: System.Web.UI.DataVisualization.Charting.StripLine
  id: StripLine
  children:
  - System.Web.UI.DataVisualization.Charting.StripLine.#ctor
  - System.Web.UI.DataVisualization.Charting.StripLine.BackColor
  - System.Web.UI.DataVisualization.Charting.StripLine.BackGradientStyle
  - System.Web.UI.DataVisualization.Charting.StripLine.BackHatchStyle
  - System.Web.UI.DataVisualization.Charting.StripLine.BackImage
  - System.Web.UI.DataVisualization.Charting.StripLine.BackImageAlignment
  - System.Web.UI.DataVisualization.Charting.StripLine.BackImageTransparentColor
  - System.Web.UI.DataVisualization.Charting.StripLine.BackImageWrapMode
  - System.Web.UI.DataVisualization.Charting.StripLine.BackSecondaryColor
  - System.Web.UI.DataVisualization.Charting.StripLine.BorderColor
  - System.Web.UI.DataVisualization.Charting.StripLine.BorderDashStyle
  - System.Web.UI.DataVisualization.Charting.StripLine.BorderWidth
  - System.Web.UI.DataVisualization.Charting.StripLine.Dispose(System.Boolean)
  - System.Web.UI.DataVisualization.Charting.StripLine.Font
  - System.Web.UI.DataVisualization.Charting.StripLine.ForeColor
  - System.Web.UI.DataVisualization.Charting.StripLine.Interval
  - System.Web.UI.DataVisualization.Charting.StripLine.IntervalOffset
  - System.Web.UI.DataVisualization.Charting.StripLine.IntervalOffsetType
  - System.Web.UI.DataVisualization.Charting.StripLine.IntervalType
  - System.Web.UI.DataVisualization.Charting.StripLine.MapAreaAttributes
  - System.Web.UI.DataVisualization.Charting.StripLine.Name
  - System.Web.UI.DataVisualization.Charting.StripLine.PostBackValue
  - System.Web.UI.DataVisualization.Charting.StripLine.StripWidth
  - System.Web.UI.DataVisualization.Charting.StripLine.StripWidthType
  - System.Web.UI.DataVisualization.Charting.StripLine.Text
  - System.Web.UI.DataVisualization.Charting.StripLine.TextAlignment
  - System.Web.UI.DataVisualization.Charting.StripLine.TextLineAlignment
  - System.Web.UI.DataVisualization.Charting.StripLine.TextOrientation
  - System.Web.UI.DataVisualization.Charting.StripLine.ToolTip
  - System.Web.UI.DataVisualization.Charting.StripLine.Url
  langs:
  - csharp
  name: StripLine
  nameWithType: StripLine
  fullName: System.Web.UI.DataVisualization.Charting.StripLine
  type: Class
  summary: "Representerar remsor i ett diagram."
  remarks: "Remsor eller remsor är vågrät eller lodrät intervall som skuggar bakgrunden för ett diagram med vanlig eller anpassat intervall. Du kan använda remsor till:-förbättra läsbarhet för att söka efter enskilda värdena i diagrammet.      -Separat datapunkter vid läsning av diagrammet.      -Markera datum som inträffar regelbundet, till exempel identifiera helgens data pekar.      -Markera en nyckel uppsättning data.      -Lägg till en rad med tröskelvärdet på ett konstant värde.       Ett StripLine-objekt kan antingen väljas en gång eller upprepas, för ett givet intervall. Den här åtgärden styrs av den <xref:System.Web.UI.DataVisualization.Charting.StripLine.Interval%2A>egenskapen.</xref:System.Web.UI.DataVisualization.Charting.StripLine.Interval%2A> När värdet -1 tilldelas den <xref:System.Web.UI.DataVisualization.Charting.StripLine.Interval%2A>egenskapen, en remsans linje ska ritas.</xref:System.Web.UI.DataVisualization.Charting.StripLine.Interval%2A> När ett noll-värde tilldelas den <xref:System.Web.UI.DataVisualization.Charting.StripLine.Interval%2A>egenskapen en remsans linje ska ritas flera gånger vid varje given intervall.</xref:System.Web.UI.DataVisualization.Charting.StripLine.Interval%2A> Den plats där en rad för remsa ritas påverkas även den <xref:System.Web.UI.DataVisualization.Charting.StripLine.IntervalOffset%2A>och <xref:System.Web.UI.DataVisualization.Charting.StripLine.IntervalOffsetType%2A>Egenskaper för remsans linjens.</xref:System.Web.UI.DataVisualization.Charting.StripLine.IntervalOffsetType%2A> </xref:System.Web.UI.DataVisualization.Charting.StripLine.IntervalOffset%2A>       Remsor alltid är associerade med en <xref:System.Web.UI.DataVisualization.Charting.Axis>objektet.</xref:System.Web.UI.DataVisualization.Charting.Axis> De kan läggas på både designtillfället och vid körning.       Lägg till en lodrät eller vågrät linje för att visa ett tröskelvärde, ange den <xref:System.Web.UI.DataVisualization.Charting.StripLine.StripWidth%2A>egenskapen till värdet 0,0.</xref:System.Web.UI.DataVisualization.Charting.StripLine.StripWidth%2A> Detta resulterar i en linjes. Du kan använda den <xref:System.Web.UI.DataVisualization.Charting.StripLine.BorderColor%2A>, <xref:System.Web.UI.DataVisualization.Charting.StripLine.BorderDashStyle%2A>och <xref:System.Web.UI.DataVisualization.Charting.StripLine.BorderWidth%2A>Egenskaper för färg, bredd och radens format.</xref:System.Web.UI.DataVisualization.Charting.StripLine.BorderWidth%2A> </xref:System.Web.UI.DataVisualization.Charting.StripLine.BorderDashStyle%2A> </xref:System.Web.UI.DataVisualization.Charting.StripLine.BorderColor%2A> Inga egenskaper för diagrammets bakgrund (`Back*`) används när den <xref:System.Web.UI.DataVisualization.Charting.StripLine.StripWidth%2A>egenskapen har värdet 0,0.</xref:System.Web.UI.DataVisualization.Charting.StripLine.StripWidth%2A>       Använd den <xref:System.Web.UI.DataVisualization.Charting.StripLine.Text%2A>egenskapen remsans linjens associera text med en rad för remsans.</xref:System.Web.UI.DataVisualization.Charting.StripLine.Text%2A> Placering och orientering av den här texten kan styras av den <xref:System.Web.UI.DataVisualization.Charting.StripLine.TextAlignment%2A>egenskapen.</xref:System.Web.UI.DataVisualization.Charting.StripLine.TextAlignment%2A>       När flera remsor har definierats för samma axel, är det möjligt att remsor överlappar varandra. Z-ordningen för StripLine-objekt bestäms av deras ordning för förekomsten i den <xref:System.Web.UI.DataVisualization.Charting.StripLinesCollection>objekt.</xref:System.Web.UI.DataVisualization.Charting.StripLinesCollection> Det innebär att den första förekomsten ritas först. den andra förekomsten ritas andra, och så vidare.       Remsor stöds inte för följande diagramtyper: cirkeldiagram, ringdiagram, Trattens, Pyramid, Kagi, ThreeLineBreak, XO, polärt och polärdiagram."
  example:
  - "The following code example demonstrates three applications of strip lines. First, horizontal strip lines are added at recurring intervals. Second, vertical strip lines are added to highlight weekend data points. Lastly, a non-recurring strip line is added to denote the mean of the data points in the first series of the chart.  \n  \n```vb#  \nImports System.Web.UI.DataVisualization.Charting  \n  \nPublic Partial Class StripLines   \n    Inherits System.Web.UI.Page   \n    Protected Sub Page_Load(ByVal sender As Object, ByVal e As EventArgs)  \n  \n        ' Add chart data before adding strip lines.   \n        AddChartData()   \n  \n        ' Adds repeating horizontal strip lines.   \n        AddHorizRepeatingStripLines()   \n  \n        ' Highlights weekend points using strip lines.   \n        HighlightWeekendsWithStripLines()   \n  \n        ' Adds a threshold line using strip lines.   \n        AddThresholdStripLine()   \n    End Sub   \n  \n    ' Adds a week of data with values between 20 and 35.   \n    Private Sub AddChartData()   \n        ' Declare new random variable   \n        Dim rand As New Random()   \n        For i As Integer = 0 To 6   \n  \n            ' Add a week of data   \n            chart1.Series(0).Points.AddXY(DateTime.Now.AddDays(i), rand.[Next](~/add/includes/ajax-current-ext-md.md 35))   \n        Next   \n    End Sub   \n  \n    ' Adds repeating horizontal strip lines at intervals of 5.   \n    Private Sub AddHorizRepeatingStripLines()   \n        ' Instantiate new strip line   \n        Dim stripLine1 As New StripLine()  \n        stripLine1.StripWidth = 2.5   \n        stripLine1.Interval = 5   \n  \n        ' Consider adding transparency so that the strip lines are lighter   \n        stripLine1.BackColor = Color.FromArgb(120, Color.Red)   \n  \n        ' Add the strip line to the chart   \n        chart1.ChartAreas(0).AxisY.StripLines.Add(stripLine1)   \n    End Sub   \n  \n    ' Adds strip lines to highlight weekend values.   \n    Private Sub HighlightWeekendsWithStripLines()   \n        ' Set strip line to highlight weekends   \n        Dim stripLine2 As New StripLine()   \n        stripLine2.BackColor = Color.FromArgb(120, Color.Gold)   \n        stripLine2.IntervalOffset = -1.5   \n        stripLine2.IntervalOffsetType = DateTimeIntervalType.Days   \n        stripLine2.Interval = 1   \n        stripLine2.IntervalType = DateTimeIntervalType.Weeks   \n        stripLine2.StripWidth = 2   \n        stripLine2.StripWidthType = DateTimeIntervalType.Days   \n  \n        ' Add strip line to the chart   \n        chart1.ChartAreas(0).AxisX.StripLines.Add(stripLine2)   \n  \n        ' Set the axis label to show the name of the day   \n        ' This is done in order to demonstrate that weekends are highlighted   \n        chart1.ChartAreas(0).AxisX.LabelStyle.Format = \"ddd\"   \n    End Sub   \n  \n    ' Adds a horizontal threshold strip line at the mean value of the first series.  \n    Private Sub AddThresholdStripLine()   \n        Dim stripLine3 As New StripLine()   \n  \n        ' Set threshold line so that it is only shown once   \n        stripLine3.Interval = 0   \n  \n        ' Set the threshold line to be drawn at the calculated mean of the first series   \n        stripLine3.IntervalOffset = chart1.DataManipulator.Statistics.Mean(chart1.Series(0).Name)   \n  \n        stripLine3.BackColor = Color.DarkGreen   \n        stripLine3.StripWidth = 0.25   \n  \n        ' Set text properties for the threshold line   \n        stripLine3.Text = \"Mean\"   \n        stripLine3.ForeColor = Color.Black   \n  \n        ' Add strip line to the chart   \n        chart1.ChartAreas(0).AxisY.StripLines.Add(stripLine3)   \n    End Sub   \nEnd Class  \n```  \n  \n```c#  \npublic partial class StripLines : System.Web.UI.Page   \n    {  \n        protected void Page_Load(object sender, EventArgs e)  \n        {              \n            // Add chart data  \n            AddChartData();  \n  \n            // Adds repeating horizontal strip lines.  \n            AddHorizRepeatingStripLines();  \n  \n            // Highlights weekend points using strip lines.  \n            HighlightWeekendsWithStripLines();  \n  \n            // Adds a threshold line using strip lines.  \n            AddThresholdStripLine();  \n        }  \n  \n        /// <summary>  \n        /// Adds a week of data with values between 20 and 35.  \n        /// </summary>  \n        private void AddChartData()  \n        {  \n            // Declare new random variable  \n            Random rand = new Random();  \n  \n            // Add a week of data  \n            for (int i = 0; i < 7; i++)   \n            {  \n                chart1.Series[0].Points.AddXY(DateTime.Now.AddDays(i), rand.Next(20,35));  \n            }  \n        }  \n  \n        /// <summary>  \n        /// Adds repeating horizontal strip lines at intervals of 5.  \n        /// </summary>  \n        private void AddHorizRepeatingStripLines()  \n        {  \n            // Instantiate new strip line  \n            StripLine stripLine1 = new StripLine();  \n            stripLine1.StripWidth = 0;  \n            stripLine1.BorderColor = Color.Black;  \n            stripLine1.BorderWidth = 3;  \n            stripLine1.Interval = 5;  \n  \n            // Consider adding transparency so that the strip lines are lighter  \n            stripLine1.BackColor = Color.FromArgb(120, Color.Red);  \n  \n            stripLine1.BackSecondaryColor = Color.Black;  \n            stripLine1.BackGradientStyle = GradientStyle.LeftRight;  \n  \n            // Add the strip line to the chart  \n            chart1.ChartAreas[0].AxisY.StripLines.Add(stripLine1);  \n        }  \n  \n        /// <summary>  \n        /// Adds strip lines to highlight weekend values.  \n        /// </summary>  \n        private void HighlightWeekendsWithStripLines()  \n        {  \n            // Set strip line to highlight weekends  \n            StripLine stripLine2 = new StripLine();  \n            stripLine2.BackColor = Color.FromArgb(120, Color.Gold);              \n            stripLine2.IntervalOffset = -1.5;  \n            stripLine2.IntervalOffsetType = DateTimeIntervalType.Days;  \n            stripLine2.Interval = 1;  \n            stripLine2.IntervalType = DateTimeIntervalType.Weeks;  \n            stripLine2.StripWidth = 2;  \n            stripLine2.StripWidthType = DateTimeIntervalType.Days;  \n  \n            // Add strip line to the chart  \n            chart1.ChartAreas[0].AxisX.StripLines.Add(stripLine2);  \n  \n            // Set the axis label to show the name of the day  \n            // This is done in order to demonstrate that weekends are highlighted  \n            chart1.ChartAreas[0].AxisX.LabelStyle.Format = \"ddd\";  \n        }  \n  \n        /// <summary>  \n        /// Adds a horizontal threshold strip line at the calculated mean   \n        /// value of all data points in the first series of the chart.  \n        /// </summary>  \n        private void AddThresholdStripLine()  \n        {  \n            StripLine stripLine3 = new StripLine();  \n  \n            // Set threshold line so that it is only shown once  \n            stripLine3.Interval = 0;  \n  \n            // Set the threshold line to be drawn at the calculated mean of the first series  \n            stripLine3.IntervalOffset = chart1.DataManipulator.Statistics.Mean(chart1.Series[0].Name);  \n  \n            stripLine3.BackColor = Color.DarkGreen;  \n            stripLine3.StripWidth = 0.25;  \n  \n            // Set text properties for the threshold line  \n            stripLine3.Text = \"Mean\";  \n            stripLine3.ForeColor = Color.Black;  \n  \n            // Add strip line to the chart  \n            chart1.ChartAreas[0].AxisY.StripLines.Add(stripLine3);  \n        }  \n    }  \n```"
  syntax:
    content: >-
      [System.ComponentModel.DefaultProperty("IntervalOffset")]

      public class StripLine : System.Web.UI.DataVisualization.Charting.ChartElement, System.Web.UI.DataVisualization.Charting.IChartMapArea
  inheritance:
  - System.Object
  - System.Web.UI.DataVisualization.Charting.ChartElement
  implements:
  - System.Web.UI.DataVisualization.Charting.IChartMapArea
  inheritedMembers:
  - System.Web.UI.DataVisualization.Charting.ChartElement.Dispose
  - System.Web.UI.DataVisualization.Charting.ChartElement.Equals(System.Object)
  - System.Web.UI.DataVisualization.Charting.ChartElement.GetHashCode
  - System.Web.UI.DataVisualization.Charting.ChartElement.Tag
  - System.Web.UI.DataVisualization.Charting.ChartElement.ToString
  platform:
  - net462
- uid: System.Web.UI.DataVisualization.Charting.StripLine.#ctor
  id: '#ctor'
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  langs:
  - csharp
  name: StripLine()
  nameWithType: StripLine.StripLine()
  fullName: System.Web.UI.DataVisualization.Charting.StripLine.StripLine()
  type: Constructor
  assemblies:
  - System.Web.DataVisualization
  namespace: System.Web.UI.DataVisualization.Charting
  summary: "Initierar en ny instans av den <xref href=&quot;System.Web.UI.DataVisualization.Charting.StripLine&quot;> </xref> klass."
  syntax:
    content: public StripLine ();
    parameters: []
  overload: System.Web.UI.DataVisualization.Charting.StripLine.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.DataVisualization.Charting.StripLine.BackColor
  id: BackColor
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  langs:
  - csharp
  name: BackColor
  nameWithType: StripLine.BackColor
  fullName: System.Web.UI.DataVisualization.Charting.StripLine.BackColor
  type: Property
  assemblies:
  - System.Web.DataVisualization
  namespace: System.Web.UI.DataVisualization.Charting
  summary: "Hämtar eller anger bakgrundsfärgen för remsans raden."
  remarks: "Du kan ange egenskapen till ett giltigt värde ARGB (alfa, röd, grön, blå).       Om du vill ange toningar för remsans linjens, ange BackColor och <xref:System.Web.UI.DataVisualization.Charting.StripLine.BackSecondaryColor%2A>Egenskaper.</xref:System.Web.UI.DataVisualization.Charting.StripLine.BackSecondaryColor%2A>       Om du anger den här färgen &quot;transparent&quot; – med andra ord anger alfanumeriska värdet till 0 – ingen färg som ska tilldelas till elementet bakgrund. Därför blir bakgrunden transparent.       Om den <xref:System.Web.UI.DataVisualization.Charting.StripLine.StripWidth%2A>egenskapen har värdet 0,0, en linje ska ritas och <xref:System.Web.UI.DataVisualization.Charting.StripLine.BorderColor%2A>egenskapen bestämmer färgen på raden inte den här egenskapen.</xref:System.Web.UI.DataVisualization.Charting.StripLine.BorderColor%2A> </xref:System.Web.UI.DataVisualization.Charting.StripLine.StripWidth%2A>"
  example:
  - "The following code example demonstrates three applications of strip lines. First, horizontal strip lines are added at recurring intervals. Second, vertical strip lines are added to highlight weekend data points. Lastly, a non-recurring strip line is added to denote the mean of the data points in the first series of the chart.  \n  \n```vb#  \nImports System.Web.UI.DataVisualization.Charting  \n  \nPublic Partial Class StripLines   \n    Inherits System.Web.UI.Page   \n    Protected Sub Page_Load(ByVal sender As Object, ByVal e As EventArgs)  \n  \n        ' Add chart data before adding strip lines.   \n        AddChartData()   \n  \n        ' Adds repeating horizontal strip lines.   \n        AddHorizRepeatingStripLines()   \n  \n        ' Highlights weekend points using strip lines.   \n        HighlightWeekendsWithStripLines()   \n  \n        ' Adds a threshold line using strip lines.   \n        AddThresholdStripLine()   \n    End Sub   \n  \n    ''' <summary>   \n    ''' Adds a week of data with values between 20 and 35.   \n    ''' </summary>   \n    Private Sub AddChartData()   \n        ' Declare new random variable   \n        Dim rand As New Random()   \n        For i As Integer = 0 To 6   \n  \n            ' Add a week of data   \n            chart1.Series(0).Points.AddXY(DateTime.Now.AddDays(i), rand.[Next](~/add/includes/ajax-current-ext-md.md 35))   \n        Next   \n    End Sub   \n  \n    ''' <summary>   \n    ''' Adds repeating horizontal strip lines at intervals of 5.   \n    ''' </summary>   \n    Private Sub AddHorizRepeatingStripLines()   \n        ' Instantiate new strip line   \n        Dim stripLine1 As New StripLine()   \n        stripLine1.StripWidth = 2.5   \n        stripLine1.Interval = 5   \n  \n        ' Consider adding transparency so that the strip lines are lighter   \n        stripLine1.BackColor = Color.FromArgb(120, Color.Red)   \n  \n        ' Add the strip line to the chart   \n        chart1.ChartAreas(0).AxisY.StripLines.Add(stripLine1)   \n    End Sub   \n  \n    ''' <summary>   \n    ''' Adds strip lines to highlight weekend values.   \n    ''' </summary>   \n    Private Sub HighlightWeekendsWithStripLines()   \n        ' Set strip line to highlight weekends   \n        Dim stripLine2 As New StripLine()   \n        stripLine2.BackColor = Color.FromArgb(120, Color.Gold)   \n        stripLine2.IntervalOffset = -1.5   \n        stripLine2.IntervalOffsetType = DateTimeIntervalType.Days   \n        stripLine2.Interval = 1   \n        stripLine2.IntervalType = DateTimeIntervalType.Weeks   \n        stripLine2.StripWidth = 2   \n        stripLine2.StripWidthType = DateTimeIntervalType.Days   \n  \n        ' Add strip line to the chart   \n        chart1.ChartAreas(0).AxisX.StripLines.Add(stripLine2)   \n  \n        ' Set the axis label to show the name of the day   \n        ' This is done in order to demonstrate that weekends are highlighted   \n        chart1.ChartAreas(0).AxisX.LabelStyle.Format = \"ddd\"   \n    End Sub   \n  \n    ''' <summary>   \n    ''' Adds a horizontal threshold strip line at the calculated mean   \n    ''' value of all data points in the first series of the chart.   \n    ''' </summary>   \n    Private Sub AddThresholdStripLine()   \n        Dim stripLine3 As New StripLine()   \n  \n        ' Set threshold line so that it is only shown once   \n        stripLine3.Interval = 0   \n  \n        ' Set the threshold line to be drawn at the calculated mean of the first series   \n        stripLine3.IntervalOffset = chart1.DataManipulator.Statistics.Mean(chart1.Series(0).Name)   \n  \n        stripLine3.BackColor = Color.DarkGreen   \n        stripLine3.StripWidth = 0.25   \n  \n        ' Set text properties for the threshold line   \n        stripLine3.Text = \"Mean\"   \n        stripLine3.ForeColor = Color.Black   \n  \n        ' Add strip line to the chart   \n        chart1.ChartAreas(0).AxisY.StripLines.Add(stripLine3)   \n    End Sub   \nEnd Class  \n```  \n  \n```c#  \npublic partial class StripLines : System.Web.UI.Page   \n    {  \n        protected void Page_Load(object sender, EventArgs e)  \n        {              \n            // Add chart data  \n            AddChartData();  \n  \n            // Adds repeating horizontal strip lines.  \n            AddHorizRepeatingStripLines();  \n  \n            // Highlights weekend points using strip lines.  \n            HighlightWeekendsWithStripLines();  \n  \n            // Adds a threshold line using strip lines.  \n            AddThresholdStripLine();  \n        }  \n  \n        /// <summary>  \n        /// Adds a week of data with values between 20 and 35.  \n        /// </summary>  \n        private void AddChartData()  \n        {  \n            // Declare new random variable  \n            Random rand = new Random();  \n  \n            // Add a week of data  \n            for (int i = 0; i < 7; i++)   \n            {  \n                chart1.Series[0].Points.AddXY(DateTime.Now.AddDays(i), rand.Next(20,35));  \n            }  \n        }  \n  \n        /// <summary>  \n        /// Adds repeating horizontal strip lines at intervals of 5.  \n        /// </summary>  \n        private void AddHorizRepeatingStripLines()  \n        {  \n            // Instantiate new strip line  \n            StripLine stripLine1 = new StripLine();  \n            stripLine1.StripWidth = 0;  \n            stripLine1.BorderColor = Color.Black;  \n            stripLine1.BorderWidth = 3;  \n            stripLine1.Interval = 5;  \n  \n            // Consider adding transparency so that the strip lines are lighter  \n            stripLine1.BackColor = Color.FromArgb(120, Color.Red);  \n  \n            stripLine1.BackSecondaryColor = Color.Black;  \n            stripLine1.BackGradientStyle = GradientStyle.LeftRight;  \n  \n            // Add the strip line to the chart  \n            chart1.ChartAreas[0].AxisY.StripLines.Add(stripLine1);  \n        }  \n  \n        /// <summary>  \n        /// Adds strip lines to highlight weekend values.  \n        /// </summary>  \n        private void HighlightWeekendsWithStripLines()  \n        {  \n            // Set strip line to highlight weekends  \n            StripLine stripLine2 = new StripLine();  \n            stripLine2.BackColor = Color.FromArgb(120, Color.Gold);              \n            stripLine2.IntervalOffset = -1.5;  \n            stripLine2.IntervalOffsetType = DateTimeIntervalType.Days;  \n            stripLine2.Interval = 1;  \n            stripLine2.IntervalType = DateTimeIntervalType.Weeks;  \n            stripLine2.StripWidth = 2;  \n            stripLine2.StripWidthType = DateTimeIntervalType.Days;  \n  \n            // Add strip line to the chart  \n            chart1.ChartAreas[0].AxisX.StripLines.Add(stripLine2);  \n  \n            // Set the axis label to show the name of the day  \n            // This is done in order to demonstrate that weekends are highlighted  \n            chart1.ChartAreas[0].AxisX.LabelStyle.Format = \"ddd\";  \n        }  \n  \n        /// <summary>  \n        /// Adds a horizontal threshold strip line at the calculated mean   \n        /// value of all data points in the first series of the chart.  \n        /// </summary>  \n        private void AddThresholdStripLine()  \n        {  \n            StripLine stripLine3 = new StripLine();  \n  \n            // Set threshold line so that it is only shown once  \n            stripLine3.Interval = 0;  \n  \n            // Set the threshold line to be drawn at the calculated mean of the first series  \n            stripLine3.IntervalOffset = chart1.DataManipulator.Statistics.Mean(chart1.Series[0].Name);  \n  \n            stripLine3.BackColor = Color.DarkGreen;  \n            stripLine3.StripWidth = 0.25;  \n  \n            // Set text properties for the threshold line  \n            stripLine3.Text = \"Mean\";  \n            stripLine3.ForeColor = Color.Black;  \n  \n            // Add strip line to the chart  \n            chart1.ChartAreas[0].AxisY.StripLines.Add(stripLine3);  \n        }  \n    }  \n```"
  syntax:
    content: public System.Drawing.Color BackColor { get; set; }
    return:
      type: System.Drawing.Color
      description: "En <xref href=&quot;System.Drawing.Color&quot;> </xref> struktur. Standardfärgen är <xref:System.Drawing.Color.White*>.</xref:System.Drawing.Color.White*>"
  overload: System.Web.UI.DataVisualization.Charting.StripLine.BackColor*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.DataVisualization.Charting.StripLine.BackGradientStyle
  id: BackGradientStyle
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  langs:
  - csharp
  name: BackGradientStyle
  nameWithType: StripLine.BackGradientStyle
  fullName: System.Web.UI.DataVisualization.Charting.StripLine.BackGradientStyle
  type: Property
  assemblies:
  - System.Web.DataVisualization
  namespace: System.Web.UI.DataVisualization.Charting
  summary: "Hämtar eller anger Toningsformat remsans linjens."
  remarks: "Egenskapen BackGradientStyle bestämmer om ett diagramelement visas toningar, samt orienteringen på toningen om används.       Att använda toningar: – Använd den <xref:System.Web.UI.DataVisualization.Charting.StripLine.BackColor%2A>egenskapen anges den primära färgen.</xref:System.Web.UI.DataVisualization.Charting.StripLine.BackColor%2A>      – Använd den <xref:System.Web.UI.DataVisualization.Charting.StripLine.BackSecondaryColor%2A>egenskapen anges sekundära färg.</xref:System.Web.UI.DataVisualization.Charting.StripLine.BackSecondaryColor%2A>      -Ange egenskapen BackGradientStyle av diagramelementet till önskad Toningsformat.       Den här egenskapen gäller inte om den <xref:System.Web.UI.DataVisualization.Charting.StripLine.StripWidth%2A>egenskap är inställd på värdet 0,0.</xref:System.Web.UI.DataVisualization.Charting.StripLine.StripWidth%2A>"
  syntax:
    content: public System.Web.UI.DataVisualization.Charting.GradientStyle BackGradientStyle { get; set; }
    return:
      type: System.Web.UI.DataVisualization.Charting.GradientStyle
      description: "En <xref href=&quot;System.Web.UI.DataVisualization.Charting.GradientStyle&quot;> </xref> uppräkning. Standardvärdet är <xref href=&quot;System.Web.UI.DataVisualization.Charting.GradientStyle&quot;> </xref>."
  overload: System.Web.UI.DataVisualization.Charting.StripLine.BackGradientStyle*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.DataVisualization.Charting.StripLine.BackHatchStyle
  id: BackHatchStyle
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  langs:
  - csharp
  name: BackHatchStyle
  nameWithType: StripLine.BackHatchStyle
  fullName: System.Web.UI.DataVisualization.Charting.StripLine.BackHatchStyle
  type: Property
  assemblies:
  - System.Web.DataVisualization
  namespace: System.Web.UI.DataVisualization.Charting
  summary: "Hämtar eller anger formatet för remsans linjens skrafferingar."
  remarks: "Skrafferingsfärg mönster består av en bakgrundsfärg och rader ritas över bakgrunden. Två färger som används i skrafferingsformat ställs in med den <xref:System.Web.UI.DataVisualization.Charting.StripLine.BackColor%2A>och <xref:System.Web.UI.DataVisualization.Charting.StripLine.BackSecondaryColor%2A>Egenskaper.</xref:System.Web.UI.DataVisualization.Charting.StripLine.BackSecondaryColor%2A> </xref:System.Web.UI.DataVisualization.Charting.StripLine.BackColor%2A> Den här egenskapen gäller inte om den <xref:System.Web.UI.DataVisualization.Charting.StripLine.StripWidth%2A>egenskap är inställd på värdet 0,0.</xref:System.Web.UI.DataVisualization.Charting.StripLine.StripWidth%2A>"
  syntax:
    content: public System.Web.UI.DataVisualization.Charting.ChartHatchStyle BackHatchStyle { get; set; }
    return:
      type: System.Web.UI.DataVisualization.Charting.ChartHatchStyle
      description: "En <xref href=&quot;System.Web.UI.DataVisualization.Charting.ChartHatchStyle&quot;> </xref> uppräkning. Standardvärdet är <xref href=&quot;System.Web.UI.DataVisualization.Charting.ChartHatchStyle&quot;> </xref>."
  overload: System.Web.UI.DataVisualization.Charting.StripLine.BackHatchStyle*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.DataVisualization.Charting.StripLine.BackImage
  id: BackImage
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  langs:
  - csharp
  name: BackImage
  nameWithType: StripLine.BackImage
  fullName: System.Web.UI.DataVisualization.Charting.StripLine.BackImage
  type: Property
  assemblies:
  - System.Web.DataVisualization
  namespace: System.Web.UI.DataVisualization.Charting
  summary: "Hämtar eller anger raden remsans bakgrundsbild."
  remarks: "Egenskapen BackImage anger en sökväg till en bakgrundsbild för många element i organisationsschemat och är en absolut eller relativ URL.       Placera den här avbildningen genom att använda den <xref:System.Web.UI.DataVisualization.Charting.StripLine.BackImageAlignment%2A>och <xref:System.Web.UI.DataVisualization.Charting.StripLine.BackImageWrapMode%2A>Egenskaper.</xref:System.Web.UI.DataVisualization.Charting.StripLine.BackImageWrapMode%2A> </xref:System.Web.UI.DataVisualization.Charting.StripLine.BackImageAlignment%2A>       Du kan också ange att en färg visas i bilden som &quot;transparent&quot; genom att ange den <xref:System.Web.UI.DataVisualization.Charting.StripLine.BackImageTransparentColor%2A>egenskapen.</xref:System.Web.UI.DataVisualization.Charting.StripLine.BackImageTransparentColor%2A>       En avbildning kan vara en giltig bildfil stöds av .NET Framework, inklusive ikoner.       Den här egenskapen gäller inte om den <xref:System.Web.UI.DataVisualization.Charting.StripLine.StripWidth%2A>egenskap är inställd på värdet 0,0.</xref:System.Web.UI.DataVisualization.Charting.StripLine.StripWidth%2A>       Bakgrundsbilder företräde framför andra bakgrundsegenskaper, till exempel toningar."
  syntax:
    content: public string BackImage { get; set; }
    return:
      type: System.String
      description: "En <xref uid=&quot;langword_csharp_string&quot; name=&quot;string&quot; href=&quot;&quot;> </xref> värde som representerar en bild-URL i filen. Standardvärdet är en tom sträng."
  overload: System.Web.UI.DataVisualization.Charting.StripLine.BackImage*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.DataVisualization.Charting.StripLine.BackImageAlignment
  id: BackImageAlignment
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  langs:
  - csharp
  name: BackImageAlignment
  nameWithType: StripLine.BackImageAlignment
  fullName: System.Web.UI.DataVisualization.Charting.StripLine.BackImageAlignment
  type: Property
  assemblies:
  - System.Web.DataVisualization
  namespace: System.Web.UI.DataVisualization.Charting
  summary: "Hämtar eller anger justering av bakgrundsbild."
  remarks: "Den här egenskapen anger justering av bakgrundsbild för remsor; Det är bara används när <xref:System.Web.UI.DataVisualization.Charting.StripLine.BackImageWrapMode%2A>egenskapen <xref:System.Web.UI.DataVisualization.Charting.ChartImageWrapMode>.</xref:System.Web.UI.DataVisualization.Charting.ChartImageWrapMode> </xref:System.Web.UI.DataVisualization.Charting.StripLine.BackImageWrapMode%2A>       Mer information om tillgängliga justeringsalternativ finns den <xref:System.Web.UI.DataVisualization.Charting.ChartImageAlignmentStyle>uppräkningen avsnittet.</xref:System.Web.UI.DataVisualization.Charting.ChartImageAlignmentStyle>"
  syntax:
    content: public System.Web.UI.DataVisualization.Charting.ChartImageAlignmentStyle BackImageAlignment { get; set; }
    return:
      type: System.Web.UI.DataVisualization.Charting.ChartImageAlignmentStyle
      description: "En <xref href=&quot;System.Web.UI.DataVisualization.Charting.ChartImageAlignmentStyle&quot;> </xref> uppräkningsvärde. Standardvärdet är <xref href=&quot;System.Web.UI.DataVisualization.Charting.ChartImageAlignmentStyle&quot;> </xref>."
  overload: System.Web.UI.DataVisualization.Charting.StripLine.BackImageAlignment*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.DataVisualization.Charting.StripLine.BackImageTransparentColor
  id: BackImageTransparentColor
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  langs:
  - csharp
  name: BackImageTransparentColor
  nameWithType: StripLine.BackImageTransparentColor
  fullName: System.Web.UI.DataVisualization.Charting.StripLine.BackImageTransparentColor
  type: Property
  assemblies:
  - System.Web.DataVisualization
  namespace: System.Web.UI.DataVisualization.Charting
  summary: "Hämtar eller anger färgen för en remsans bakgrundsbild som implementeras som transparent."
  remarks: "Den här egenskapen gäller inte om den <xref:System.Web.UI.DataVisualization.Charting.StripLine.StripWidth%2A>egenskap är inställd på värdet 0,0.</xref:System.Web.UI.DataVisualization.Charting.StripLine.StripWidth%2A>"
  syntax:
    content: public System.Drawing.Color BackImageTransparentColor { get; set; }
    return:
      type: System.Drawing.Color
      description: "En <xref href=&quot;System.Drawing.Color&quot;> </xref> värde som ska visas som transparent."
  overload: System.Web.UI.DataVisualization.Charting.StripLine.BackImageTransparentColor*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.DataVisualization.Charting.StripLine.BackImageWrapMode
  id: BackImageWrapMode
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  langs:
  - csharp
  name: BackImageWrapMode
  nameWithType: StripLine.BackImageWrapMode
  fullName: System.Web.UI.DataVisualization.Charting.StripLine.BackImageWrapMode
  type: Property
  assemblies:
  - System.Web.DataVisualization
  namespace: System.Web.UI.DataVisualization.Charting
  summary: "Hämtar eller anger ritningsläget på raden remsans bakgrundsbild."
  remarks: "Den här egenskapen anger hur bilden visas; det vill säga sida vid sida, skalbara och så vidare.       Om en avbildning skalas ska den anpassas för att passa i omgivande remsans eller linjens. Om bilden visas sida vid sida, görs den upprepade gånger från det övre vänstra hörnet.       Mer information om tillgängliga radbrytning lägen, finns det <xref:System.Web.UI.DataVisualization.Charting.ChartImageWrapMode>uppräkning avsnittet.</xref:System.Web.UI.DataVisualization.Charting.ChartImageWrapMode>       Om egenskapen BackImageWrapMode anges till <xref:System.Web.UI.DataVisualization.Charting.ChartImageWrapMode>, den plats där bilden ritas bestäms av den <xref:System.Web.UI.DataVisualization.Charting.StripLine.BackImageAlignment%2A>egenskapsinställning.</xref:System.Web.UI.DataVisualization.Charting.StripLine.BackImageAlignment%2A> </xref:System.Web.UI.DataVisualization.Charting.ChartImageWrapMode>       Den här egenskapen gäller inte om <xref:System.Web.UI.DataVisualization.Charting.StripLine.StripWidth%2A>anges till värdet 0,0.</xref:System.Web.UI.DataVisualization.Charting.StripLine.StripWidth%2A>"
  syntax:
    content: public System.Web.UI.DataVisualization.Charting.ChartImageWrapMode BackImageWrapMode { get; set; }
    return:
      type: System.Web.UI.DataVisualization.Charting.ChartImageWrapMode
      description: "En <xref href=&quot;System.Web.UI.DataVisualization.Charting.ChartImageWrapMode&quot;> </xref> heltal uppräkningen. Standardvärdet är <xref href=&quot;System.Web.UI.DataVisualization.Charting.ChartImageWrapMode&quot;> </xref>."
  overload: System.Web.UI.DataVisualization.Charting.StripLine.BackImageWrapMode*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.DataVisualization.Charting.StripLine.BackSecondaryColor
  id: BackSecondaryColor
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  langs:
  - csharp
  name: BackSecondaryColor
  nameWithType: StripLine.BackSecondaryColor
  fullName: System.Web.UI.DataVisualization.Charting.StripLine.BackSecondaryColor
  type: Property
  assemblies:
  - System.Web.DataVisualization
  namespace: System.Web.UI.DataVisualization.Charting
  summary: "Hämtar eller anger sekundärfärgen för remsans rad bakgrund."
  remarks: "Den här egenskapen anger Sekundär bakgrundsfärg för många objekt i diagrammet och används när toningar används.       Du kan ange Sekundär bakgrundsfärg till något giltigt ARGB (alfa, röd, grön, blå)-värde.       Om skrafferingar används anger backsecondarycolor får egenskapen färgen på linjerna i skrafferingar.       Att använda toningar för ett diagramelement bakgrund:-använder den <xref:System.Web.UI.DataVisualization.Charting.StripLine.BackColor%2A>egenskapen anges den primära färgen.</xref:System.Web.UI.DataVisualization.Charting.StripLine.BackColor%2A>      -Använd backsecondarycolor får egenskapen för att ange sekundära färg.      – Ange den <xref:System.Web.UI.DataVisualization.Charting.StripLine.BackGradientStyle%2A>egenskapen till önskad Toningsformat.</xref:System.Web.UI.DataVisualization.Charting.StripLine.BackGradientStyle%2A>       Den här egenskapen gäller inte om den <xref:System.Web.UI.DataVisualization.Charting.StripLine.StripWidth%2A>egenskap är inställd på värdet 0,0.</xref:System.Web.UI.DataVisualization.Charting.StripLine.StripWidth%2A>"
  syntax:
    content: public System.Drawing.Color BackSecondaryColor { get; set; }
    return:
      type: System.Drawing.Color
      description: "En <xref href=&quot;System.Drawing.Color&quot;> </xref> värde som används för den sekundära färgen för en bakgrund med skrafferingar eller toning. Standardfärgen är <xref href=&quot;System.Drawing.Color&quot;> </xref>."
  overload: System.Web.UI.DataVisualization.Charting.StripLine.BackSecondaryColor*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.DataVisualization.Charting.StripLine.BorderColor
  id: BorderColor
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  langs:
  - csharp
  name: BorderColor
  nameWithType: StripLine.BorderColor
  fullName: System.Web.UI.DataVisualization.Charting.StripLine.BorderColor
  type: Property
  assemblies:
  - System.Web.DataVisualization
  namespace: System.Web.UI.DataVisualization.Charting
  summary: "Hämtar eller anger kantlinjefärgen för en rad för remsans."
  remarks: "Du kan ange egenskapen till ett giltigt värde ARGB (alfa, röd, grön, blå).       Om den <xref:System.Web.UI.DataVisualization.Charting.StripLine.StripWidth%2A>egenskapen för en <xref:System.Web.UI.DataVisualization.Charting.StripLine>objektet har värdet 0,0, en linje ska ritas och det är den här egenskapen och inte den <xref:System.Web.UI.DataVisualization.Charting.StripLine.BackColor%2A>egenskapen inställningen som bestämmer färgen på raden.</xref:System.Web.UI.DataVisualization.Charting.StripLine.BackColor%2A> </xref:System.Web.UI.DataVisualization.Charting.StripLine> </xref:System.Web.UI.DataVisualization.Charting.StripLine.StripWidth%2A>"
  syntax:
    content: public System.Drawing.Color BorderColor { get; set; }
    return:
      type: System.Drawing.Color
      description: "A <xref href=&quot;System.Drawing.Color&quot;></xref> value. Standardfärgen är <xref href=&quot;System.Drawing.Color&quot;> </xref>."
  overload: System.Web.UI.DataVisualization.Charting.StripLine.BorderColor*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.DataVisualization.Charting.StripLine.BorderDashStyle
  id: BorderDashStyle
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  langs:
  - csharp
  name: BorderDashStyle
  nameWithType: StripLine.BorderDashStyle
  fullName: System.Web.UI.DataVisualization.Charting.StripLine.BorderDashStyle
  type: Property
  assemblies:
  - System.Web.DataVisualization
  namespace: System.Web.UI.DataVisualization.Charting
  summary: "Hämtar eller anger Kantlinjeformatet för remsans raden."
  remarks: "Den här egenskapen anger linjeformatet för en kantlinje. Raden kan vara av fast, prickad eller en variant av fasta och prickad."
  syntax:
    content: public System.Web.UI.DataVisualization.Charting.ChartDashStyle BorderDashStyle { get; set; }
    return:
      type: System.Web.UI.DataVisualization.Charting.ChartDashStyle
      description: "En <xref href=&quot;System.Web.UI.DataVisualization.Charting.ChartDashStyle&quot;> </xref> uppräkningsvärde som anger Kantlinjeformatet för remsans raden."
  overload: System.Web.UI.DataVisualization.Charting.StripLine.BorderDashStyle*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.DataVisualization.Charting.StripLine.BorderWidth
  id: BorderWidth
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  langs:
  - csharp
  name: BorderWidth
  nameWithType: StripLine.BorderWidth
  fullName: System.Web.UI.DataVisualization.Charting.StripLine.BorderWidth
  type: Property
  assemblies:
  - System.Web.DataVisualization
  namespace: System.Web.UI.DataVisualization.Charting
  summary: "Hämtar eller anger kantlinjebredden för remsans raden."
  remarks: "Den här egenskapen mätt i bildpunkter."
  syntax:
    content: public int BorderWidth { get; set; }
    return:
      type: System.Int32
      description: "En <xref uid=&quot;langword_csharp_integer&quot; name=&quot;integer&quot; href=&quot;&quot;> </xref> värde som anger bredden för remsans linjens kantlinje i bildpunkter."
  overload: System.Web.UI.DataVisualization.Charting.StripLine.BorderWidth*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.DataVisualization.Charting.StripLine.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: StripLine.Dispose(Boolean)
  fullName: System.Web.UI.DataVisualization.Charting.StripLine.Dispose(Boolean)
  type: Method
  assemblies:
  - System.Web.DataVisualization
  namespace: System.Web.UI.DataVisualization.Charting
  summary: "Släpper de ohanterade resurser som används av den <xref href=&quot;System.Web.UI.DataVisualization.Charting.StripLine&quot;> </xref> och släpper du de hantera resurserna."
  syntax:
    content: protected override void Dispose (bool disposing);
    parameters:
    - id: disposing
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_True&quot; name=&quot;True&quot; href=&quot;&quot;></xref>Frisläpp både hanterade och ohanterade resurser. <xref uid=&quot;langword_csharp_False&quot; name=&quot;False&quot; href=&quot;&quot;> </xref> att släppa endast resurser som inte hanteras."
  overload: System.Web.UI.DataVisualization.Charting.StripLine.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.DataVisualization.Charting.StripLine.Font
  id: Font
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  langs:
  - csharp
  name: Font
  nameWithType: StripLine.Font
  fullName: System.Web.UI.DataVisualization.Charting.StripLine.Font
  type: Property
  assemblies:
  - System.Web.DataVisualization
  namespace: System.Web.UI.DataVisualization.Charting
  summary: "Hämtar eller anger teckensnittet för remsans Radtext."
  syntax:
    content: public System.Drawing.Font Font { get; set; }
    return:
      type: System.Drawing.Font
      description: "En <xref href=&quot;System.Drawing.Font&quot;> </xref> värde som representerar teckensnittet för remsans Radtext."
  overload: System.Web.UI.DataVisualization.Charting.StripLine.Font*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.DataVisualization.Charting.StripLine.ForeColor
  id: ForeColor
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  langs:
  - csharp
  name: ForeColor
  nameWithType: StripLine.ForeColor
  fullName: System.Web.UI.DataVisualization.Charting.StripLine.ForeColor
  type: Property
  assemblies:
  - System.Web.DataVisualization
  namespace: System.Web.UI.DataVisualization.Charting
  summary: "Hämtar eller anger färgen för remsans Radtext."
  remarks: "Du kan ange en giltig ARGB färg för den här egenskapen. Den här egenskapen gäller endast när värden har angetts för remsans raden."
  syntax:
    content: public System.Drawing.Color ForeColor { get; set; }
    return:
      type: System.Drawing.Color
      description: "En <xref href=&quot;System.Drawing.Color&quot;> </xref> värde som representerar textfärgen för en rad för remsans. Standardvärdet är <xref:System.Drawing.Color.Black*>.</xref:System.Drawing.Color.Black*>"
  overload: System.Web.UI.DataVisualization.Charting.StripLine.ForeColor*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.DataVisualization.Charting.StripLine.Interval
  id: Interval
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  langs:
  - csharp
  name: Interval
  nameWithType: StripLine.Interval
  fullName: System.Web.UI.DataVisualization.Charting.StripLine.Interval
  type: Property
  assemblies:
  - System.Web.DataVisualization
  namespace: System.Web.UI.DataVisualization.Charting
  summary: "Hämtar eller anger intervallet för en rad för remsans och bestämmer om raden remsa ritas en eller flera gånger."
  remarks: "När du ställer in egenskapen intervall till värdet noll (0,0) en remsans linje visas med en bredd som anges av den <xref:System.Web.UI.DataVisualization.Charting.StripLine.StripWidth%2A>egenskapen.</xref:System.Web.UI.DataVisualization.Charting.StripLine.StripWidth%2A> Flera remsor visas när du ställer in intervallet till ett värde av än noll. Den enhet som används för egenskapen intervall som definieras av den <xref:System.Web.UI.DataVisualization.Charting.StripLine.IntervalType%2A>egenskapen.</xref:System.Web.UI.DataVisualization.Charting.StripLine.IntervalType%2A>"
  example:
  - "The following code example demonstrates three applications of strip lines. First, horizontal strip lines are added at recurring intervals. Second, vertical strip lines are added to highlight weekend data points. Lastly, a non-recurring strip line is added to denote the mean of the data points in the first series of the chart.  \n  \n```vb#  \nImports System.Web.UI.DataVisualization.Charting  \n  \nPublic Partial Class StripLines   \n    Inherits System.Web.UI.Page   \n    Protected Sub Page_Load(ByVal sender As Object, ByVal e As EventArgs)  \n  \n        ' Add chart data before adding strip lines.   \n        AddChartData()   \n  \n        ' Adds repeating horizontal strip lines.   \n        AddHorizRepeatingStripLines()   \n  \n        ' Highlights weekend points using strip lines.   \n        HighlightWeekendsWithStripLines()   \n  \n        ' Adds a threshold line using strip lines.   \n        AddThresholdStripLine()   \n    End Sub   \n  \n    ''' <summary>   \n    ''' Adds a week of data with values between 20 and 35.   \n    ''' </summary>   \n    Private Sub AddChartData()   \n        ' Declare new random variable   \n        Dim rand As New Random()   \n        For i As Integer = 0 To 6   \n  \n            ' Add a week of data   \n            chart1.Series(0).Points.AddXY(DateTime.Now.AddDays(i), rand.[Next](~/add/includes/ajax-current-ext-md.md 35))   \n        Next   \n    End Sub   \n  \n    ''' <summary>   \n    ''' Adds repeating horizontal strip lines at intervals of 5.   \n    ''' </summary>   \n    Private Sub AddHorizRepeatingStripLines()   \n        ' Instantiate new strip line   \n        Dim stripLine1 As New StripLine()   \n        stripLine1.StripWidth = 2.5   \n        stripLine1.Interval = 5   \n  \n        ' Consider adding transparency so that the strip lines are lighter   \n        stripLine1.BackColor = Color.FromArgb(120, Color.Red)   \n  \n        ' Add the strip line to the chart   \n        chart1.ChartAreas(0).AxisY.StripLines.Add(stripLine1)   \n    End Sub   \n  \n    ''' <summary>   \n    ''' Adds strip lines to highlight weekend values.   \n    ''' </summary>   \n    Private Sub HighlightWeekendsWithStripLines()   \n        ' Set strip line to highlight weekends   \n        Dim stripLine2 As New StripLine()   \n        stripLine2.BackColor = Color.FromArgb(120, Color.Gold)   \n        stripLine2.IntervalOffset = -1.5   \n        stripLine2.IntervalOffsetType = DateTimeIntervalType.Days   \n        stripLine2.Interval = 1   \n        stripLine2.IntervalType = DateTimeIntervalType.Weeks   \n        stripLine2.StripWidth = 2   \n        stripLine2.StripWidthType = DateTimeIntervalType.Days   \n  \n        ' Add strip line to the chart   \n        chart1.ChartAreas(0).AxisX.StripLines.Add(stripLine2)   \n  \n        ' Set the axis label to show the name of the day   \n        ' This is done in order to demonstrate that weekends are highlighted   \n        chart1.ChartAreas(0).AxisX.LabelStyle.Format = \"ddd\"   \n    End Sub   \n  \n    ''' <summary>   \n    ''' Adds a horizontal threshold strip line at the calculated mean   \n    ''' value of all data points in the first series of the chart.   \n    ''' </summary>   \n    Private Sub AddThresholdStripLine()   \n        Dim stripLine3 As New StripLine()   \n  \n        ' Set threshold line so that it is only shown once   \n        stripLine3.Interval = 0   \n  \n        ' Set the threshold line to be drawn at the calculated mean of the first series   \n        stripLine3.IntervalOffset = chart1.DataManipulator.Statistics.Mean(chart1.Series(0).Name)   \n  \n        stripLine3.BackColor = Color.DarkGreen   \n        stripLine3.StripWidth = 0.25   \n  \n        ' Set text properties for the threshold line   \n        stripLine3.Text = \"Mean\"   \n        stripLine3.ForeColor = Color.Black   \n  \n        ' Add strip line to the chart   \n        chart1.ChartAreas(0).AxisY.StripLines.Add(stripLine3)   \n    End Sub   \nEnd Class  \n```  \n  \n```c#  \npublic partial class StripLines : System.Web.UI.Page   \n    {  \n        protected void Page_Load(object sender, EventArgs e)  \n        {              \n            // Add chart data  \n            AddChartData();  \n  \n            // Adds repeating horizontal strip lines.  \n            AddHorizRepeatingStripLines();  \n  \n            // Highlights weekend points using strip lines.  \n            HighlightWeekendsWithStripLines();  \n  \n            // Adds a threshold line using strip lines.  \n            AddThresholdStripLine();  \n        }  \n  \n        /// <summary>  \n        /// Adds a week of data with values between 20 and 35.  \n        /// </summary>  \n        private void AddChartData()  \n        {  \n            // Declare new random variable  \n            Random rand = new Random();  \n  \n            // Add a week of data  \n            for (int i = 0; i < 7; i++)   \n            {  \n                chart1.Series[0].Points.AddXY(DateTime.Now.AddDays(i), rand.Next(20,35));  \n            }  \n        }  \n  \n        /// <summary>  \n        /// Adds repeating horizontal strip lines at intervals of 5.  \n        /// </summary>  \n        private void AddHorizRepeatingStripLines()  \n        {  \n            // Instantiate new strip line  \n            StripLine stripLine1 = new StripLine();  \n            stripLine1.StripWidth = 0;  \n            stripLine1.BorderColor = Color.Black;  \n            stripLine1.BorderWidth = 3;  \n            stripLine1.Interval = 5;  \n  \n            // Consider adding transparency so that the strip lines are lighter  \n            stripLine1.BackColor = Color.FromArgb(120, Color.Red);  \n  \n            stripLine1.BackSecondaryColor = Color.Black;  \n            stripLine1.BackGradientStyle = GradientStyle.LeftRight;  \n  \n            // Add the strip line to the chart  \n            chart1.ChartAreas[0].AxisY.StripLines.Add(stripLine1);  \n        }  \n  \n        /// <summary>  \n        /// Adds strip lines to highlight weekend values.  \n        /// </summary>  \n        private void HighlightWeekendsWithStripLines()  \n        {  \n            // Set strip line to highlight weekends  \n            StripLine stripLine2 = new StripLine();  \n            stripLine2.BackColor = Color.FromArgb(120, Color.Gold);              \n            stripLine2.IntervalOffset = -1.5;  \n            stripLine2.IntervalOffsetType = DateTimeIntervalType.Days;  \n            stripLine2.Interval = 1;  \n            stripLine2.IntervalType = DateTimeIntervalType.Weeks;  \n            stripLine2.StripWidth = 2;  \n            stripLine2.StripWidthType = DateTimeIntervalType.Days;  \n  \n            // Add strip line to the chart  \n            chart1.ChartAreas[0].AxisX.StripLines.Add(stripLine2);  \n  \n            // Set the axis label to show the name of the day  \n            // This is done in order to demonstrate that weekends are highlighted  \n            chart1.ChartAreas[0].AxisX.LabelStyle.Format = \"ddd\";  \n        }  \n  \n        /// <summary>  \n        /// Adds a horizontal threshold strip line at the calculated mean   \n        /// value of all data points in the first series of the chart.  \n        /// </summary>  \n        private void AddThresholdStripLine()  \n        {  \n            StripLine stripLine3 = new StripLine();  \n  \n            // Set threshold line so that it is only shown once  \n            stripLine3.Interval = 0;  \n  \n            // Set the threshold line to be drawn at the calculated mean of the first series  \n            stripLine3.IntervalOffset = chart1.DataManipulator.Statistics.Mean(chart1.Series[0].Name);  \n  \n            stripLine3.BackColor = Color.DarkGreen;  \n            stripLine3.StripWidth = 0.25;  \n  \n            // Set text properties for the threshold line  \n            stripLine3.Text = \"Mean\";  \n            stripLine3.ForeColor = Color.Black;  \n  \n            // Add strip line to the chart  \n            chart1.ChartAreas[0].AxisY.StripLines.Add(stripLine3);  \n        }  \n    }  \n```"
  syntax:
    content: public double Interval { get; set; }
    return:
      type: System.Double
      description: "En <xref uid=&quot;langword_csharp_double&quot; name=&quot;double&quot; href=&quot;&quot;> </xref> värde som representerar intervallet mellan remsor. Standardvärdet är 0,0."
  overload: System.Web.UI.DataVisualization.Charting.StripLine.Interval*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.DataVisualization.Charting.StripLine.IntervalOffset
  id: IntervalOffset
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  langs:
  - csharp
  name: IntervalOffset
  nameWithType: StripLine.IntervalOffset
  fullName: System.Web.UI.DataVisualization.Charting.StripLine.IntervalOffset
  type: Property
  assemblies:
  - System.Web.DataVisualization
  namespace: System.Web.UI.DataVisualization.Charting
  summary: "Hämtar eller anger förskjutningen för rutnätets linjer, skalstreck, remsor och axeletiketter."
  remarks: "Intervallförskjutning för mindre skalstreck och rutnätslinjer aldrig påverkas av värdet för den <xref:System.Web.UI.DataVisualization.Charting.Axis.IntervalOffset%2A>egenskapen för den <xref:System.Web.UI.DataVisualization.Charting.Axis>objekt.</xref:System.Web.UI.DataVisualization.Charting.Axis> </xref:System.Web.UI.DataVisualization.Charting.Axis.IntervalOffset%2A>       Inställningen för egenskapen intervaloffset får definierar måttenheter för förskjutning.       Den <xref:System.Web.UI.DataVisualization.Charting.StripLine.Interval%2A>kan vara ett negativt värde.</xref:System.Web.UI.DataVisualization.Charting.StripLine.Interval%2A>       Standardvärdet är `Auto` (`0`)."
  example:
  - "The following code example demonstrates three applications of strip lines. First, horizontal strip lines are added at recurring intervals. Second, vertical strip lines are added to highlight weekend data points. Lastly, a non-recurring strip line is added to denote the mean of the data points in the first series of the chart.  \n  \n```vb#  \nImports System.Web.UI.DataVisualization.Charting  \n  \nPublic Partial Class StripLines   \n    Inherits System.Web.UI.Page   \n    Protected Sub Page_Load(ByVal sender As Object, ByVal e As EventArgs)  \n  \n        ' Add chart data before adding strip lines.   \n        AddChartData()   \n  \n        ' Adds repeating horizontal strip lines.   \n        AddHorizRepeatingStripLines()   \n  \n        ' Highlights weekend points using strip lines.   \n        HighlightWeekendsWithStripLines()   \n  \n        ' Adds a threshold line using strip lines.   \n        AddThresholdStripLine()   \n    End Sub   \n  \n    ''' <summary>   \n    ''' Adds a week of data with values between 20 and 35.   \n    ''' </summary>   \n    Private Sub AddChartData()   \n        ' Declare new random variable   \n        Dim rand As New Random()   \n        For i As Integer = 0 To 6   \n  \n            ' Add a week of data   \n            chart1.Series(0).Points.AddXY(DateTime.Now.AddDays(i), rand.[Next](~/add/includes/ajax-current-ext-md.md 35))   \n        Next   \n    End Sub   \n  \n    ''' <summary>   \n    ''' Adds repeating horizontal strip lines at intervals of 5.   \n    ''' </summary>   \n    Private Sub AddHorizRepeatingStripLines()   \n        ' Instantiate new strip line   \n        Dim stripLine1 As New StripLine()   \n        stripLine1.StripWidth = 2.5   \n        stripLine1.Interval = 5   \n  \n        ' Consider adding transparency so that the strip lines are lighter   \n        stripLine1.BackColor = Color.FromArgb(120, Color.Red)   \n  \n        ' Add the strip line to the chart   \n        chart1.ChartAreas(0).AxisY.StripLines.Add(stripLine1)   \n    End Sub   \n  \n    ''' <summary>   \n    ''' Adds strip lines to highlight weekend values.   \n    ''' </summary>   \n    Private Sub HighlightWeekendsWithStripLines()   \n        ' Set strip line to highlight weekends   \n        Dim stripLine2 As New StripLine()   \n        stripLine2.BackColor = Color.FromArgb(120, Color.Gold)   \n        stripLine2.IntervalOffset = -1.5   \n        stripLine2.IntervalOffsetType = DateTimeIntervalType.Days   \n        stripLine2.Interval = 1   \n        stripLine2.IntervalType = DateTimeIntervalType.Weeks   \n        stripLine2.StripWidth = 2   \n        stripLine2.StripWidthType = DateTimeIntervalType.Days   \n  \n        ' Add strip line to the chart   \n        chart1.ChartAreas(0).AxisX.StripLines.Add(stripLine2)   \n  \n        ' Set the axis label to show the name of the day   \n        ' This is done in order to demonstrate that weekends are highlighted   \n        chart1.ChartAreas(0).AxisX.LabelStyle.Format = \"ddd\"   \n    End Sub   \n  \n    ''' <summary>   \n    ''' Adds a horizontal threshold strip line at the calculated mean   \n    ''' value of all data points in the first series of the chart.   \n    ''' </summary>   \n    Private Sub AddThresholdStripLine()   \n        Dim stripLine3 As New StripLine()   \n  \n        ' Set threshold line so that it is only shown once   \n        stripLine3.Interval = 0   \n  \n        ' Set the threshold line to be drawn at the calculated mean of the first series   \n        stripLine3.IntervalOffset = chart1.DataManipulator.Statistics.Mean(chart1.Series(0).Name)   \n  \n        stripLine3.BackColor = Color.DarkGreen   \n        stripLine3.StripWidth = 0.25   \n  \n        ' Set text properties for the threshold line   \n        stripLine3.Text = \"Mean\"   \n        stripLine3.ForeColor = Color.Black   \n  \n        ' Add strip line to the chart   \n        chart1.ChartAreas(0).AxisY.StripLines.Add(stripLine3)   \n    End Sub   \nEnd Class  \n```  \n  \n```c#  \npublic partial class StripLines : System.Web.UI.Page   \n    {  \n        protected void Page_Load(object sender, EventArgs e)  \n        {              \n            // Add chart data  \n            AddChartData();  \n  \n            // Adds repeating horizontal strip lines.  \n            AddHorizRepeatingStripLines();  \n  \n            // Highlights weekend points using strip lines.  \n            HighlightWeekendsWithStripLines();  \n  \n            // Adds a threshold line using strip lines.  \n            AddThresholdStripLine();  \n        }  \n  \n        /// <summary>  \n        /// Adds a week of data with values between 20 and 35.  \n        /// </summary>  \n        private void AddChartData()  \n        {  \n            // Declare new random variable  \n            Random rand = new Random();  \n  \n            // Add a week of data  \n            for (int i = 0; i < 7; i++)   \n            {  \n                chart1.Series[0].Points.AddXY(DateTime.Now.AddDays(i), rand.Next(20,35));  \n            }  \n        }  \n  \n        /// <summary>  \n        /// Adds repeating horizontal strip lines at intervals of 5.  \n        /// </summary>  \n        private void AddHorizRepeatingStripLines()  \n        {  \n            // Instantiate new strip line  \n            StripLine stripLine1 = new StripLine();  \n            stripLine1.StripWidth = 0;  \n            stripLine1.BorderColor = Color.Black;  \n            stripLine1.BorderWidth = 3;  \n            stripLine1.Interval = 5;  \n  \n            // Consider adding transparency so that the strip lines are lighter  \n            stripLine1.BackColor = Color.FromArgb(120, Color.Red);  \n  \n            stripLine1.BackSecondaryColor = Color.Black;  \n            stripLine1.BackGradientStyle = GradientStyle.LeftRight;  \n  \n            // Add the strip line to the chart  \n            chart1.ChartAreas[0].AxisY.StripLines.Add(stripLine1);  \n        }  \n  \n        /// <summary>  \n        /// Adds strip lines to highlight weekend values.  \n        /// </summary>  \n        private void HighlightWeekendsWithStripLines()  \n        {  \n            // Set strip line to highlight weekends  \n            StripLine stripLine2 = new StripLine();  \n            stripLine2.BackColor = Color.FromArgb(120, Color.Gold);              \n            stripLine2.IntervalOffset = -1.5;  \n            stripLine2.IntervalOffsetType = DateTimeIntervalType.Days;  \n            stripLine2.Interval = 1;  \n            stripLine2.IntervalType = DateTimeIntervalType.Weeks;  \n            stripLine2.StripWidth = 2;  \n            stripLine2.StripWidthType = DateTimeIntervalType.Days;  \n  \n            // Add strip line to the chart  \n            chart1.ChartAreas[0].AxisX.StripLines.Add(stripLine2);  \n  \n            // Set the axis label to show the name of the day  \n            // This is done in order to demonstrate that weekends are highlighted  \n            chart1.ChartAreas[0].AxisX.LabelStyle.Format = \"ddd\";  \n        }  \n  \n        /// <summary>  \n        /// Adds a horizontal threshold strip line at the calculated mean   \n        /// value of all data points in the first series of the chart.  \n        /// </summary>  \n        private void AddThresholdStripLine()  \n        {  \n            StripLine stripLine3 = new StripLine();  \n  \n            // Set threshold line so that it is only shown once  \n            stripLine3.Interval = 0;  \n  \n            // Set the threshold line to be drawn at the calculated mean of the first series  \n            stripLine3.IntervalOffset = chart1.DataManipulator.Statistics.Mean(chart1.Series[0].Name);  \n  \n            stripLine3.BackColor = Color.DarkGreen;  \n            stripLine3.StripWidth = 0.25;  \n  \n            // Set text properties for the threshold line  \n            stripLine3.Text = \"Mean\";  \n            stripLine3.ForeColor = Color.Black;  \n  \n            // Add strip line to the chart  \n            chart1.ChartAreas[0].AxisY.StripLines.Add(stripLine3);  \n        }  \n    }  \n```"
  syntax:
    content: public double IntervalOffset { get; set; }
    return:
      type: System.Double
      description: "En <xref uid=&quot;langword_csharp_double&quot; name=&quot;double&quot; href=&quot;&quot;> </xref> värde som representerar intervallförskjutning."
  overload: System.Web.UI.DataVisualization.Charting.StripLine.IntervalOffset*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.DataVisualization.Charting.StripLine.IntervalOffsetType
  id: IntervalOffsetType
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  langs:
  - csharp
  name: IntervalOffsetType
  nameWithType: StripLine.IntervalOffsetType
  fullName: System.Web.UI.DataVisualization.Charting.StripLine.IntervalOffsetType
  type: Property
  assemblies:
  - System.Web.DataVisualization
  namespace: System.Web.UI.DataVisualization.Charting
  summary: "Hämtar eller anger förskjutningen intervalltyp remsans linjens."
  remarks: "Den här egenskapen är som standard <xref:System.Web.UI.DataVisualization.Charting.DateTimeIntervalType>; det faktiska värdet för den här egenskapen bestäms av den <xref:System.Web.UI.DataVisualization.Charting.StripLine.IntervalType%2A>egenskapen.</xref:System.Web.UI.DataVisualization.Charting.StripLine.IntervalType%2A> </xref:System.Web.UI.DataVisualization.Charting.DateTimeIntervalType>"
  example:
  - "The following code example demonstrates three applications of strip lines. First, horizontal strip lines are added at recurring intervals. Second, vertical strip lines are added to highlight weekend data points. Lastly, a non-recurring strip line is added to denote the mean of the data points in the first series of the chart.  \n  \n```vb#  \nImports System.Web.UI.DataVisualization.Charting  \n  \nPublic Partial Class StripLines   \n    Inherits System.Web.UI.Page   \n    Protected Sub Page_Load(ByVal sender As Object, ByVal e As EventArgs)  \n  \n        ' Add chart data before adding strip lines.   \n        AddChartData()   \n  \n        ' Adds repeating horizontal strip lines.   \n        AddHorizRepeatingStripLines()   \n  \n        ' Highlights weekend points using strip lines.   \n        HighlightWeekendsWithStripLines()   \n  \n        ' Adds a threshold line using strip lines.   \n        AddThresholdStripLine()   \n    End Sub   \n  \n    ''' <summary>   \n    ''' Adds a week of data with values between 20 and 35.   \n    ''' </summary>   \n    Private Sub AddChartData()   \n        ' Declare new random variable   \n        Dim rand As New Random()   \n        For i As Integer = 0 To 6   \n  \n            ' Add a week of data   \n            chart1.Series(0).Points.AddXY(DateTime.Now.AddDays(i), rand.[Next](~/add/includes/ajax-current-ext-md.md 35))   \n        Next   \n    End Sub   \n  \n    ''' <summary>   \n    ''' Adds repeating horizontal strip lines at intervals of 5.   \n    ''' </summary>   \n    Private Sub AddHorizRepeatingStripLines()   \n        ' Instantiate new strip line   \n        Dim stripLine1 As New StripLine()   \n        stripLine1.StripWidth = 2.5   \n        stripLine1.Interval = 5   \n  \n        ' Consider adding transparency so that the strip lines are lighter   \n        stripLine1.BackColor = Color.FromArgb(120, Color.Red)   \n  \n        ' Add the strip line to the chart   \n        chart1.ChartAreas(0).AxisY.StripLines.Add(stripLine1)   \n    End Sub   \n  \n    ''' <summary>   \n    ''' Adds strip lines to highlight weekend values.   \n    ''' </summary>   \n    Private Sub HighlightWeekendsWithStripLines()   \n        ' Set strip line to highlight weekends   \n        Dim stripLine2 As New StripLine()   \n        stripLine2.BackColor = Color.FromArgb(120, Color.Gold)   \n        stripLine2.IntervalOffset = -1.5   \n        stripLine2.IntervalOffsetType = DateTimeIntervalType.Days   \n        stripLine2.Interval = 1   \n        stripLine2.IntervalType = DateTimeIntervalType.Weeks   \n        stripLine2.StripWidth = 2   \n        stripLine2.StripWidthType = DateTimeIntervalType.Days   \n  \n        ' Add strip line to the chart   \n        chart1.ChartAreas(0).AxisX.StripLines.Add(stripLine2)   \n  \n        ' Set the axis label to show the name of the day   \n        ' This is done in order to demonstrate that weekends are highlighted   \n        chart1.ChartAreas(0).AxisX.LabelStyle.Format = \"ddd\"   \n    End Sub   \n  \n    ''' <summary>   \n    ''' Adds a horizontal threshold strip line at the calculated mean   \n    ''' value of all data points in the first series of the chart.   \n    ''' </summary>   \n    Private Sub AddThresholdStripLine()   \n        Dim stripLine3 As New StripLine()   \n  \n        ' Set threshold line so that it is only shown once   \n        stripLine3.Interval = 0   \n  \n        ' Set the threshold line to be drawn at the calculated mean of the first series   \n        stripLine3.IntervalOffset = chart1.DataManipulator.Statistics.Mean(chart1.Series(0).Name)   \n  \n        stripLine3.BackColor = Color.DarkGreen   \n        stripLine3.StripWidth = 0.25   \n  \n        ' Set text properties for the threshold line   \n        stripLine3.Text = \"Mean\"   \n        stripLine3.ForeColor = Color.Black   \n  \n        ' Add strip line to the chart   \n        chart1.ChartAreas(0).AxisY.StripLines.Add(stripLine3)   \n    End Sub   \nEnd Class  \n```  \n  \n```c#  \npublic partial class StripLines : System.Web.UI.Page   \n    {  \n        protected void Page_Load(object sender, EventArgs e)  \n        {              \n            // Add chart data  \n            AddChartData();  \n  \n            // Adds repeating horizontal strip lines.  \n            AddHorizRepeatingStripLines();  \n  \n            // Highlights weekend points using strip lines.  \n            HighlightWeekendsWithStripLines();  \n  \n            // Adds a threshold line using strip lines.  \n            AddThresholdStripLine();  \n        }  \n  \n        /// <summary>  \n        /// Adds a week of data with values between 20 and 35.  \n        /// </summary>  \n        private void AddChartData()  \n        {  \n            // Declare new random variable  \n            Random rand = new Random();  \n  \n            // Add a week of data  \n            for (int i = 0; i < 7; i++)   \n            {  \n                chart1.Series[0].Points.AddXY(DateTime.Now.AddDays(i), rand.Next(20,35));  \n            }  \n        }  \n  \n        /// <summary>  \n        /// Adds repeating horizontal strip lines at intervals of 5.  \n        /// </summary>  \n        private void AddHorizRepeatingStripLines()  \n        {  \n            // Instantiate new strip line  \n            StripLine stripLine1 = new StripLine();  \n            stripLine1.StripWidth = 0;  \n            stripLine1.BorderColor = Color.Black;  \n            stripLine1.BorderWidth = 3;  \n            stripLine1.Interval = 5;  \n  \n            // Consider adding transparency so that the strip lines are lighter  \n            stripLine1.BackColor = Color.FromArgb(120, Color.Red);  \n  \n            stripLine1.BackSecondaryColor = Color.Black;  \n            stripLine1.BackGradientStyle = GradientStyle.LeftRight;  \n  \n            // Add the strip line to the chart  \n            chart1.ChartAreas[0].AxisY.StripLines.Add(stripLine1);  \n        }  \n  \n        /// <summary>  \n        /// Adds strip lines to highlight weekend values.  \n        /// </summary>  \n        private void HighlightWeekendsWithStripLines()  \n        {  \n            // Set strip line to highlight weekends  \n            StripLine stripLine2 = new StripLine();  \n            stripLine2.BackColor = Color.FromArgb(120, Color.Gold);              \n            stripLine2.IntervalOffset = -1.5;  \n            stripLine2.IntervalOffsetType = DateTimeIntervalType.Days;  \n            stripLine2.Interval = 1;  \n            stripLine2.IntervalType = DateTimeIntervalType.Weeks;  \n            stripLine2.StripWidth = 2;  \n            stripLine2.StripWidthType = DateTimeIntervalType.Days;  \n  \n            // Add strip line to the chart  \n            chart1.ChartAreas[0].AxisX.StripLines.Add(stripLine2);  \n  \n            // Set the axis label to show the name of the day  \n            // This is done in order to demonstrate that weekends are highlighted  \n            chart1.ChartAreas[0].AxisX.LabelStyle.Format = \"ddd\";  \n        }  \n  \n        /// <summary>  \n        /// Adds a horizontal threshold strip line at the calculated mean   \n        /// value of all data points in the first series of the chart.  \n        /// </summary>  \n        private void AddThresholdStripLine()  \n        {  \n            StripLine stripLine3 = new StripLine();  \n  \n            // Set threshold line so that it is only shown once  \n            stripLine3.Interval = 0;  \n  \n            // Set the threshold line to be drawn at the calculated mean of the first series  \n            stripLine3.IntervalOffset = chart1.DataManipulator.Statistics.Mean(chart1.Series[0].Name);  \n  \n            stripLine3.BackColor = Color.DarkGreen;  \n            stripLine3.StripWidth = 0.25;  \n  \n            // Set text properties for the threshold line  \n            stripLine3.Text = \"Mean\";  \n            stripLine3.ForeColor = Color.Black;  \n  \n            // Add strip line to the chart  \n            chart1.ChartAreas[0].AxisY.StripLines.Add(stripLine3);  \n        }  \n    }  \n```"
  syntax:
    content: public System.Web.UI.DataVisualization.Charting.DateTimeIntervalType IntervalOffsetType { get; set; }
    return:
      type: System.Web.UI.DataVisualization.Charting.DateTimeIntervalType
      description: "En <xref href=&quot;System.Web.UI.DataVisualization.Charting.DateTimeIntervalType&quot;> </xref> uppräkningsvärde som anger vilken intervalltyp. Standardvärdet är <xref href=&quot;System.Web.UI.DataVisualization.Charting.DateTimeIntervalType&quot;> </xref>."
  overload: System.Web.UI.DataVisualization.Charting.StripLine.IntervalOffsetType*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.DataVisualization.Charting.StripLine.IntervalType
  id: IntervalType
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  langs:
  - csharp
  name: IntervalType
  nameWithType: StripLine.IntervalType
  fullName: System.Web.UI.DataVisualization.Charting.StripLine.IntervalType
  type: Property
  assemblies:
  - System.Web.DataVisualization
  namespace: System.Web.UI.DataVisualization.Charting
  summary: "Hämtar eller anger intervalltyp av en <xref href=&quot;System.Web.UI.DataVisualization.Charting.StripLine&quot;> </xref> objekt."
  remarks: "Intervall typer kan anges till <xref:System.Web.UI.DataVisualization.Charting.DateTimeIntervalType>, i vilket fall typen beror på: typer för X-värde eller Y-värdet för den ritade <xref:System.Web.UI.DataVisualization.Charting.DataPoint>objekt, beroende på vilken axel den <xref:System.Web.UI.DataVisualization.Charting.StripLine>objekt som hör till – och axelskala.</xref:System.Web.UI.DataVisualization.Charting.StripLine> </xref:System.Web.UI.DataVisualization.Charting.DataPoint> </xref:System.Web.UI.DataVisualization.Charting.DateTimeIntervalType>       Den <xref:System.Web.UI.DataVisualization.Charting.StripLine.Interval%2A>egenskapen bestämmer hur ofta en remsa eller linje ritas.</xref:System.Web.UI.DataVisualization.Charting.StripLine.Interval%2A>"
  example:
  - "The following code example demonstrates three applications of strip lines. First, horizontal strip lines are added at recurring intervals. Second, vertical strip lines are added to highlight weekend data points. Lastly, a non-recurring strip line is added to denote the mean of the data points in the first series of the chart.  \n  \n```vb#  \nImports System.Web.UI.DataVisualization.Charting  \n  \nPublic Partial Class StripLines   \n    Inherits System.Web.UI.Page   \n    Protected Sub Page_Load(ByVal sender As Object, ByVal e As EventArgs)  \n  \n        ' Add chart data before adding strip lines.   \n        AddChartData()   \n  \n        ' Adds repeating horizontal strip lines.   \n        AddHorizRepeatingStripLines()   \n  \n        ' Highlights weekend points using strip lines.   \n        HighlightWeekendsWithStripLines()   \n  \n        ' Adds a threshold line using strip lines.   \n        AddThresholdStripLine()   \n    End Sub   \n  \n    ''' <summary>   \n    ''' Adds a week of data with values between 20 and 35.   \n    ''' </summary>   \n    Private Sub AddChartData()   \n        ' Declare new random variable   \n        Dim rand As New Random()   \n        For i As Integer = 0 To 6   \n  \n            ' Add a week of data   \n            chart1.Series(0).Points.AddXY(DateTime.Now.AddDays(i), rand.[Next](~/add/includes/ajax-current-ext-md.md 35))   \n        Next   \n    End Sub   \n  \n    ''' <summary>   \n    ''' Adds repeating horizontal strip lines at intervals of 5.   \n    ''' </summary>   \n    Private Sub AddHorizRepeatingStripLines()   \n        ' Instantiate new strip line   \n        Dim stripLine1 As New StripLine()   \n        stripLine1.StripWidth = 2.5   \n        stripLine1.Interval = 5   \n  \n        ' Consider adding transparency so that the strip lines are lighter   \n        stripLine1.BackColor = Color.FromArgb(120, Color.Red)   \n  \n        ' Add the strip line to the chart   \n        chart1.ChartAreas(0).AxisY.StripLines.Add(stripLine1)   \n    End Sub   \n  \n    ''' <summary>   \n    ''' Adds strip lines to highlight weekend values.   \n    ''' </summary>   \n    Private Sub HighlightWeekendsWithStripLines()   \n        ' Set strip line to highlight weekends   \n        Dim stripLine2 As New StripLine()   \n        stripLine2.BackColor = Color.FromArgb(120, Color.Gold)   \n        stripLine2.IntervalOffset = -1.5   \n        stripLine2.IntervalOffsetType = DateTimeIntervalType.Days   \n        stripLine2.Interval = 1   \n        stripLine2.IntervalType = DateTimeIntervalType.Weeks   \n        stripLine2.StripWidth = 2   \n        stripLine2.StripWidthType = DateTimeIntervalType.Days   \n  \n        ' Add strip line to the chart   \n        chart1.ChartAreas(0).AxisX.StripLines.Add(stripLine2)   \n  \n        ' Set the axis label to show the name of the day   \n        ' This is done in order to demonstrate that weekends are highlighted   \n        chart1.ChartAreas(0).AxisX.LabelStyle.Format = \"ddd\"   \n    End Sub   \n  \n    ''' <summary>   \n    ''' Adds a horizontal threshold strip line at the calculated mean   \n    ''' value of all data points in the first series of the chart.   \n    ''' </summary>   \n    Private Sub AddThresholdStripLine()   \n        Dim stripLine3 As New StripLine()   \n  \n        ' Set threshold line so that it is only shown once   \n        stripLine3.Interval = 0   \n  \n        ' Set the threshold line to be drawn at the calculated mean of the first series   \n        stripLine3.IntervalOffset = chart1.DataManipulator.Statistics.Mean(chart1.Series(0).Name)   \n  \n        stripLine3.BackColor = Color.DarkGreen   \n        stripLine3.StripWidth = 0.25   \n  \n        ' Set text properties for the threshold line   \n        stripLine3.Text = \"Mean\"   \n        stripLine3.ForeColor = Color.Black   \n  \n        ' Add strip line to the chart   \n        chart1.ChartAreas(0).AxisY.StripLines.Add(stripLine3)   \n    End Sub   \nEnd Class  \n```  \n  \n```c#  \npublic partial class StripLines : System.Web.UI.Page   \n    {  \n        protected void Page_Load(object sender, EventArgs e)  \n        {              \n            // Add chart data  \n            AddChartData();  \n  \n            // Adds repeating horizontal strip lines.  \n            AddHorizRepeatingStripLines();  \n  \n            // Highlights weekend points using strip lines.  \n            HighlightWeekendsWithStripLines();  \n  \n            // Adds a threshold line using strip lines.  \n            AddThresholdStripLine();  \n        }  \n  \n        /// <summary>  \n        /// Adds a week of data with values between 20 and 35.  \n        /// </summary>  \n        private void AddChartData()  \n        {  \n            // Declare new random variable  \n            Random rand = new Random();  \n  \n            // Add a week of data  \n            for (int i = 0; i < 7; i++)   \n            {  \n                chart1.Series[0].Points.AddXY(DateTime.Now.AddDays(i), rand.Next(20,35));  \n            }  \n        }  \n  \n        /// <summary>  \n        /// Adds repeating horizontal strip lines at intervals of 5.  \n        /// </summary>  \n        private void AddHorizRepeatingStripLines()  \n        {  \n            // Instantiate new strip line  \n            StripLine stripLine1 = new StripLine();  \n            stripLine1.StripWidth = 0;  \n            stripLine1.BorderColor = Color.Black;  \n            stripLine1.BorderWidth = 3;  \n            stripLine1.Interval = 5;  \n  \n            // Consider adding transparency so that the strip lines are lighter  \n            stripLine1.BackColor = Color.FromArgb(120, Color.Red);  \n  \n            stripLine1.BackSecondaryColor = Color.Black;  \n            stripLine1.BackGradientStyle = GradientStyle.LeftRight;  \n  \n            // Add the strip line to the chart  \n            chart1.ChartAreas[0].AxisY.StripLines.Add(stripLine1);  \n        }  \n  \n        /// <summary>  \n        /// Adds strip lines to highlight weekend values.  \n        /// </summary>  \n        private void HighlightWeekendsWithStripLines()  \n        {  \n            // Set strip line to highlight weekends  \n            StripLine stripLine2 = new StripLine();  \n            stripLine2.BackColor = Color.FromArgb(120, Color.Gold);              \n            stripLine2.IntervalOffset = -1.5;  \n            stripLine2.IntervalOffsetType = DateTimeIntervalType.Days;  \n            stripLine2.Interval = 1;  \n            stripLine2.IntervalType = DateTimeIntervalType.Weeks;  \n            stripLine2.StripWidth = 2;  \n            stripLine2.StripWidthType = DateTimeIntervalType.Days;  \n  \n            // Add strip line to the chart  \n            chart1.ChartAreas[0].AxisX.StripLines.Add(stripLine2);  \n  \n            // Set the axis label to show the name of the day  \n            // This is done in order to demonstrate that weekends are highlighted  \n            chart1.ChartAreas[0].AxisX.LabelStyle.Format = \"ddd\";  \n        }  \n  \n        /// <summary>  \n        /// Adds a horizontal threshold strip line at the calculated mean   \n        /// value of all data points in the first series of the chart.  \n        /// </summary>  \n        private void AddThresholdStripLine()  \n        {  \n            StripLine stripLine3 = new StripLine();  \n  \n            // Set threshold line so that it is only shown once  \n            stripLine3.Interval = 0;  \n  \n            // Set the threshold line to be drawn at the calculated mean of the first series  \n            stripLine3.IntervalOffset = chart1.DataManipulator.Statistics.Mean(chart1.Series[0].Name);  \n  \n            stripLine3.BackColor = Color.DarkGreen;  \n            stripLine3.StripWidth = 0.25;  \n  \n            // Set text properties for the threshold line  \n            stripLine3.Text = \"Mean\";  \n            stripLine3.ForeColor = Color.Black;  \n  \n            // Add strip line to the chart  \n            chart1.ChartAreas[0].AxisY.StripLines.Add(stripLine3);  \n        }  \n    }  \n```"
  syntax:
    content: public System.Web.UI.DataVisualization.Charting.DateTimeIntervalType IntervalType { get; set; }
    return:
      type: System.Web.UI.DataVisualization.Charting.DateTimeIntervalType
      description: "En <xref href=&quot;System.Web.UI.DataVisualization.Charting.DateTimeIntervalType&quot;> </xref> uppräkningsvärde som anger vilken intervalltyp. Standardvärdet är <xref href=&quot;System.Web.UI.DataVisualization.Charting.DateTimeIntervalType&quot;> </xref>."
  overload: System.Web.UI.DataVisualization.Charting.StripLine.IntervalType*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.DataVisualization.Charting.StripLine.MapAreaAttributes
  id: MapAreaAttributes
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  langs:
  - csharp
  name: MapAreaAttributes
  nameWithType: StripLine.MapAreaAttributes
  fullName: System.Web.UI.DataVisualization.Charting.StripLine.MapAreaAttributes
  type: Property
  assemblies:
  - System.Web.DataVisualization
  namespace: System.Web.UI.DataVisualization.Charting
  summary: "Hämtar eller anger attribut för remsans linjens för kartan."
  syntax:
    content: public string MapAreaAttributes { get; set; }
    return:
      type: System.String
      description: "En <xref uid=&quot;langword_csharp_string&quot; name=&quot;string&quot; href=&quot;&quot;> </xref> värde som representerar attribut för diagramelementet motsvarande mappningsområdet."
  overload: System.Web.UI.DataVisualization.Charting.StripLine.MapAreaAttributes*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.DataVisualization.Charting.StripLine.Name
  id: Name
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  langs:
  - csharp
  name: Name
  nameWithType: StripLine.Name
  fullName: System.Web.UI.DataVisualization.Charting.StripLine.Name
  type: Property
  assemblies:
  - System.Web.DataVisualization
  namespace: System.Web.UI.DataVisualization.Charting
  summary: "Hämtar namnet på raden remsor."
  syntax:
    content: public string Name { get; }
    return:
      type: System.String
      description: "En <xref uid=&quot;langword_csharp_string&quot; name=&quot;string&quot; href=&quot;&quot;> </xref> värde som representerar namnet på raden remsor."
  overload: System.Web.UI.DataVisualization.Charting.StripLine.Name*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.DataVisualization.Charting.StripLine.PostBackValue
  id: PostBackValue
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  langs:
  - csharp
  name: PostBackValue
  nameWithType: StripLine.PostBackValue
  fullName: System.Web.UI.DataVisualization.Charting.StripLine.PostBackValue
  type: Property
  assemblies:
  - System.Web.DataVisualization
  namespace: System.Web.UI.DataVisualization.Charting
  summary: "Hämtar eller anger återanslående värdet som kan bearbetas på en <xref href=&quot;System.Web.UI.DataVisualization.Charting.Chart.Click&quot;> </xref> händelse."
  syntax:
    content: public string PostBackValue { get; set; }
    return:
      type: System.String
      description: "Ett strängvärde som representerar återanslående värdet som skickas till en <xref href=&quot;System.Web.UI.DataVisualization.Charting.Chart.Click&quot;> </xref> händelse."
  overload: System.Web.UI.DataVisualization.Charting.StripLine.PostBackValue*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.DataVisualization.Charting.StripLine.StripWidth
  id: StripWidth
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  langs:
  - csharp
  name: StripWidth
  nameWithType: StripLine.StripWidth
  fullName: System.Web.UI.DataVisualization.Charting.StripLine.StripWidth
  type: Property
  assemblies:
  - System.Web.DataVisualization
  namespace: System.Web.UI.DataVisualization.Charting
  summary: "Hämtar eller anger bredden på en rad för remsans."
  remarks: "Den här egenskapen kan inte anges till ett värde som är mindre än 0,0, annars ett undantag aktiveras.       En inställning för 0,0 innebär en linjes; den här raden ska använda den <xref:System.Web.UI.DataVisualization.Charting.StripLine.BorderColor%2A>, <xref:System.Web.UI.DataVisualization.Charting.StripLine.BorderDashStyle%2A>och <xref:System.Web.UI.DataVisualization.Charting.StripLine.BorderWidth%2A>egenskapsinställningar för färg, bredd och format.</xref:System.Web.UI.DataVisualization.Charting.StripLine.BorderWidth%2A> </xref:System.Web.UI.DataVisualization.Charting.StripLine.BorderDashStyle%2A> </xref:System.Web.UI.DataVisualization.Charting.StripLine.BorderColor%2A> Ingen av de `Back*` egenskaper i den här klassen används när värdet för StripWidth är 0,0.       Om du anger egenskapen StripWidth till ett värde större än 0,0 skapas ett band. Den <xref:System.Web.UI.DataVisualization.Charting.StripLine.BorderColor%2A>, <xref:System.Web.UI.DataVisualization.Charting.StripLine.BorderDashStyle%2A>och <xref:System.Web.UI.DataVisualization.Charting.StripLine.BorderWidth%2A>egenskaper gäller endast för kantlinjen för remsans; alla de `Back*` egenskaper används sedan för egenskaper för bakgrunden i remsan.</xref:System.Web.UI.DataVisualization.Charting.StripLine.BorderWidth%2A> </xref:System.Web.UI.DataVisualization.Charting.StripLine.BorderDashStyle%2A> </xref:System.Web.UI.DataVisualization.Charting.StripLine.BorderColor%2A>       Om värdet på egenskapen StripWidth är större än 0,0 bestäms enheterna av den relevanta axelskalan."
  syntax:
    content: public double StripWidth { get; set; }
    return:
      type: System.Double
      description: "En <xref uid=&quot;langword_csharp_double&quot; name=&quot;double&quot; href=&quot;&quot;> </xref> värde som avgör om en remsa eller linje ritas. Standardvärdet är 0,0."
  overload: System.Web.UI.DataVisualization.Charting.StripLine.StripWidth*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.DataVisualization.Charting.StripLine.StripWidthType
  id: StripWidthType
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  langs:
  - csharp
  name: StripWidthType
  nameWithType: StripLine.StripWidthType
  fullName: System.Web.UI.DataVisualization.Charting.StripLine.StripWidthType
  type: Property
  assemblies:
  - System.Web.DataVisualization
  namespace: System.Web.UI.DataVisualization.Charting
  summary: "Hämtar eller anger måttenheten för den <xref:System.Web.UI.DataVisualization.Charting.StripLine.StripWidth*>egenskapen.</xref:System.Web.UI.DataVisualization.Charting.StripLine.StripWidth*>"
  remarks: "Den här egenskapen anger enheterna för den <xref:System.Web.UI.DataVisualization.Charting.StripLine.StripWidth%2A>egenskapen.</xref:System.Web.UI.DataVisualization.Charting.StripLine.StripWidth%2A> Till exempel om du vill ange en remsans raden som representerar &quot;en vecka&quot; du kan ange den här egenskapen <xref:System.Web.UI.DataVisualization.Charting.DateTimeIntervalType>och ange den <xref:System.Web.UI.DataVisualization.Charting.StripLine.StripWidth%2A>egenskapen till ett (1,0).</xref:System.Web.UI.DataVisualization.Charting.StripLine.StripWidth%2A> </xref:System.Web.UI.DataVisualization.Charting.DateTimeIntervalType>       Du kan ändra värdet för den här egenskapen från <xref:System.Web.UI.DataVisualization.Charting.DateTimeIntervalType>till en <xref:System.DateTime>värde när de relevanta axelskalan använder en <xref:System.DateTime>värde.</xref:System.DateTime> </xref:System.DateTime> </xref:System.Web.UI.DataVisualization.Charting.DateTimeIntervalType>"
  syntax:
    content: public System.Web.UI.DataVisualization.Charting.DateTimeIntervalType StripWidthType { get; set; }
    return:
      type: System.Web.UI.DataVisualization.Charting.DateTimeIntervalType
      description: "En <xref href=&quot;System.Web.UI.DataVisualization.Charting.DateTimeIntervalType&quot;> </xref> uppräkningsvärde som anger vilken bredd. Standardvärdet är <xref href=&quot;System.Web.UI.DataVisualization.Charting.DateTimeIntervalType&quot;> </xref>."
  overload: System.Web.UI.DataVisualization.Charting.StripLine.StripWidthType*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.DataVisualization.Charting.StripLine.Text
  id: Text
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  langs:
  - csharp
  name: Text
  nameWithType: StripLine.Text
  fullName: System.Web.UI.DataVisualization.Charting.StripLine.Text
  type: Property
  assemblies:
  - System.Web.DataVisualization
  namespace: System.Web.UI.DataVisualization.Charting
  summary: "Hämtar eller anger texten för remsans raden."
  remarks: "Använd den här egenskapen för att lägga till text i en rad för remsans."
  example:
  - "The following code example demonstrates how to add a threshold line after the chart control has been added to the design surface. The chart uses a non-recurring strip line to show a calculation of the mean of all data points in a series.  \n  \n```vb#  \nImports System.Web.UI.DataVisualization.Charting  \n  \nPublic Partial Class StripLines   \n    Inherits System.Web.UI.Page   \n    Protected Sub Page_Load(ByVal sender As Object, ByVal e As EventArgs)  \n  \n        ' Add chart data before adding strip lines.   \n        AddChartData()   \n  \n        ' Adds a threshold line using strip lines.   \n        AddThresholdStripLine()   \n    End Sub   \n  \n    ''' <summary>   \n    ''' Adds a week of data with values between 20 and 35.   \n    ''' </summary>   \n    Private Sub AddChartData()   \n        ' Declare new random variable   \n        Dim rand As New Random()   \n        For i As Integer = 0 To 6   \n  \n            ' Add a week of data   \n            chart1.Series(0).Points.AddXY(DateTime.Now.AddDays(i), rand.[Next](~/add/includes/ajax-current-ext-md.md 35))   \n        Next   \n    End Sub   \n  \n    ''' <summary>   \n    ''' Adds a horizontal threshold strip line at the calculated mean   \n    ''' value of all data points in the first series of the chart.   \n    ''' </summary>   \n    Private Sub AddThresholdStripLine()   \n        Dim stripLine3 As New StripLine()   \n  \n        ' Set threshold line so that it is only shown once   \n        stripLine3.Interval = 0   \n  \n        ' Set the threshold line to be drawn at the calculated mean of the first series   \n        stripLine3.IntervalOffset = chart1.DataManipulator.Statistics.Mean(chart1.Series(0).Name)   \n  \n        stripLine3.BackColor = Color.DarkGreen   \n        stripLine3.StripWidth = 0.25   \n  \n        ' Set text properties for the threshold line   \n        stripLine3.Text = \"Mean\"   \n        stripLine3.ForeColor = Color.Black   \n  \n        ' Add strip line to the chart   \n        chart1.ChartAreas(0).AxisY.StripLines.Add(stripLine3)   \n    End Sub   \nEnd Class  \n```  \n  \n```c#  \npublic partial class StripLines : System.Web.UI.Page   \n    {  \n        protected void Page_Load(object sender, EventArgs e)  \n        {              \n            // Add chart data  \n            AddChartData();  \n  \n            // Adds a threshold line using strip lines.  \n            AddThresholdStripLine();  \n        }  \n  \n        /// <summary>  \n        /// Adds a week of data with values between 20 and 35.  \n        /// </summary>  \n        private void AddChartData()  \n        {  \n            // Declare new random variable  \n            Random rand = new Random();  \n  \n            // Add a week of data  \n            for (int i = 0; i < 7; i++)   \n            {  \n                chart1.Series[0].Points.AddXY(DateTime.Now.AddDays(i), rand.Next(20,35));  \n            }  \n        }  \n  \n        /// <summary>  \n        /// Adds a horizontal threshold strip line at the calculated mean   \n        /// value of all data points in the first series of the chart.  \n        /// </summary>  \n        private void AddThresholdStripLine()  \n        {  \n            StripLine stripLine3 = new StripLine();  \n  \n            // Set threshold line so that it is only shown once  \n            stripLine3.Interval = 0;  \n  \n            // Set the threshold line to be drawn at the calculated mean of the first series  \n            stripLine3.IntervalOffset = chart1.DataManipulator.Statistics.Mean(chart1.Series[0].Name);  \n  \n            stripLine3.BackColor = Color.DarkGreen;  \n            stripLine3.StripWidth = 0.25;  \n  \n            // Set text properties for the threshold line  \n            stripLine3.Text = \"Mean\";  \n            stripLine3.ForeColor = Color.Black;  \n  \n            // Add strip line to the chart  \n            chart1.ChartAreas[0].AxisY.StripLines.Add(stripLine3);  \n        }  \n    }  \n```"
  syntax:
    content: public string Text { get; set; }
    return:
      type: System.String
      description: "En <xref uid=&quot;langword_csharp_string&quot; name=&quot;string&quot; href=&quot;&quot;> </xref> värde som motsvarar texten i en rad för remsans."
  overload: System.Web.UI.DataVisualization.Charting.StripLine.Text*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.DataVisualization.Charting.StripLine.TextAlignment
  id: TextAlignment
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  langs:
  - csharp
  name: TextAlignment
  nameWithType: StripLine.TextAlignment
  fullName: System.Web.UI.DataVisualization.Charting.StripLine.TextAlignment
  type: Property
  assemblies:
  - System.Web.DataVisualization
  namespace: System.Web.UI.DataVisualization.Charting
  summary: "Hämtar eller anger justering av remsans linjens."
  remarks: ''
  example:
  - "The following code example demonstrates how to add a threshold line after the chart control has been added to the design surface. The chart uses a non-recurring strip line to show a calculation of the mean of all data points in a series.  \n  \n```vb#  \nImports System.Web.UI.DataVisualization.Charting  \n  \nPublic Partial Class StripLines   \n    Inherits System.Web.UI.Page   \n    Protected Sub Page_Load(ByVal sender As Object, ByVal e As EventArgs)  \n  \n        ' Add chart data before adding strip lines.   \n        AddChartData()   \n  \n        ' Adds a threshold line using strip lines.   \n        AddThresholdStripLine()   \n    End Sub   \n  \n    ''' <summary>   \n    ''' Adds a week of data with values between 20 and 35.   \n    ''' </summary>   \n    Private Sub AddChartData()   \n        ' Declare new random variable   \n        Dim rand As New Random()   \n        For i As Integer = 0 To 6   \n  \n            ' Add a week of data   \n            chart1.Series(0).Points.AddXY(DateTime.Now.AddDays(i), rand.[Next](~/add/includes/ajax-current-ext-md.md 35))   \n        Next   \n    End Sub   \n  \n    ''' <summary>   \n    ''' Adds a horizontal threshold strip line at the calculated mean   \n    ''' value of all data points in the first series of the chart.   \n    ''' </summary>   \n    Private Sub AddThresholdStripLine()   \n        Dim stripLine3 As New StripLine()   \n  \n        ' Set threshold line so that it is only shown once   \n        stripLine3.Interval = 0   \n  \n        ' Set the threshold line to be drawn at the calculated mean of the first series   \n        stripLine3.IntervalOffset = chart1.DataManipulator.Statistics.Mean(chart1.Series(0).Name)   \n  \n        stripLine3.BackColor = Color.DarkGreen   \n        stripLine3.StripWidth = 0.25   \n  \n        ' Set text properties for the threshold line   \n        stripLine3.Text = \"Mean\"   \n        stripLine3.ForeColor = Color.Black   \n        stripLine3.TextAlignment = StringAlignment.Near   \n        stripLine3.TextLineAlignment = StringAlignment.Near   \n        stripLine3.TextOrientation = TextOrientation.Auto   \n  \n        ' Add strip line to the chart   \n        chart1.ChartAreas(0).AxisY.StripLines.Add(stripLine3)   \n    End Sub   \nEnd Class  \n```  \n  \n```c#  \npublic partial class StripLines : System.Web.UI.Page   \n    {  \n        protected void Page_Load(object sender, EventArgs e)  \n        {              \n            // Add chart data  \n            AddChartData();  \n  \n            // Adds a threshold line using strip lines.  \n            AddThresholdStripLine();  \n        }  \n  \n        /// <summary>  \n        /// Adds a week of data with values between 20 and 35.  \n        /// </summary>  \n        private void AddChartData()  \n        {  \n            // Declare new random variable  \n            Random rand = new Random();  \n  \n            // Add a week of data  \n            for (int i = 0; i < 7; i++)   \n            {  \n                chart1.Series[0].Points.AddXY(DateTime.Now.AddDays(i), rand.Next(20,35));  \n            }  \n        }  \n  \n        /// <summary>  \n        /// Adds a horizontal threshold strip line at the calculated mean   \n        /// value of all data points in the first series of the chart.  \n        /// </summary>  \n        private void AddThresholdStripLine()  \n        {  \n            StripLine stripLine3 = new StripLine();  \n  \n            // Set threshold line so that it is only shown once  \n            stripLine3.Interval = 0;  \n  \n            // Set the threshold line to be drawn at the calculated mean of the first series  \n            stripLine3.IntervalOffset = chart1.DataManipulator.Statistics.Mean(chart1.Series[0].Name);  \n  \n            stripLine3.BackColor = Color.DarkGreen;  \n            stripLine3.StripWidth = 0.25;  \n  \n            // Set text properties for the threshold line  \n            stripLine3.Text = \"Mean\";  \n            stripLine3.ForeColor = Color.Black;  \n            stripLine3.TextAlignment = StringAlignment.Near;  \n            stripLine3.TextLineAlignment = StringAlignment.Near;  \n            stripLine3.TextOrientation = TextOrientation.Auto;  \n  \n            // Add strip line to the chart  \n            chart1.ChartAreas[0].AxisY.StripLines.Add(stripLine3);  \n        }  \n    }  \n```"
  syntax:
    content: public System.Drawing.StringAlignment TextAlignment { get; set; }
    return:
      type: System.Drawing.StringAlignment
      description: "En <xref href=&quot;System.Drawing.StringAlignment&quot;> </xref> värde som representerar justering av remsans Radtext."
  overload: System.Web.UI.DataVisualization.Charting.StripLine.TextAlignment*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.DataVisualization.Charting.StripLine.TextLineAlignment
  id: TextLineAlignment
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  langs:
  - csharp
  name: TextLineAlignment
  nameWithType: StripLine.TextLineAlignment
  fullName: System.Web.UI.DataVisualization.Charting.StripLine.TextLineAlignment
  type: Property
  assemblies:
  - System.Web.DataVisualization
  namespace: System.Web.UI.DataVisualization.Charting
  summary: "Hämtar eller anger texten rad justering av remsans Radtext."
  remarks: ''
  example:
  - "The following code example demonstrates how to add a threshold line after the chart control has been added to the design surface. The chart uses a non-recurring strip line to show a calculation of the mean of all data points in a series.  \n  \n```vb#  \nImports System.Web.UI.DataVisualization.Charting  \n  \nPublic Partial Class StripLines   \n    Inherits System.Web.UI.Page   \n    Protected Sub Page_Load(ByVal sender As Object, ByVal e As EventArgs)  \n  \n        ' Add chart data before adding strip lines.   \n        AddChartData()   \n  \n        ' Adds a threshold line using strip lines.   \n        AddThresholdStripLine()   \n    End Sub   \n  \n    ''' <summary>   \n    ''' Adds a week of data with values between 20 and 35.   \n    ''' </summary>   \n    Private Sub AddChartData()   \n        ' Declare new random variable   \n        Dim rand As New Random()   \n        For i As Integer = 0 To 6   \n  \n            ' Add a week of data   \n            chart1.Series(0).Points.AddXY(DateTime.Now.AddDays(i), rand.[Next](~/add/includes/ajax-current-ext-md.md 35))   \n        Next   \n    End Sub   \n  \n    ''' <summary>   \n    ''' Adds a horizontal threshold strip line at the calculated mean   \n    ''' value of all data points in the first series of the chart.   \n    ''' </summary>   \n    Private Sub AddThresholdStripLine()   \n        Dim stripLine3 As New StripLine()   \n  \n        ' Set threshold line so that it is only shown once   \n        stripLine3.Interval = 0   \n  \n        ' Set the threshold line to be drawn at the calculated mean of the first series   \n        stripLine3.IntervalOffset = chart1.DataManipulator.Statistics.Mean(chart1.Series(0).Name)   \n  \n        stripLine3.BackColor = Color.DarkGreen   \n        stripLine3.StripWidth = 0.25   \n  \n        ' Set text properties for the threshold line   \n        stripLine3.Text = \"Mean\"   \n        stripLine3.ForeColor = Color.Black   \n        stripLine3.TextAlignment = StringAlignment.Near   \n        stripLine3.TextLineAlignment = StringAlignment.Near   \n        stripLine3.TextOrientation = TextOrientation.Auto   \n  \n        ' Add strip line to the chart   \n        chart1.ChartAreas(0).AxisY.StripLines.Add(stripLine3)   \n    End Sub   \nEnd Class  \n```  \n  \n```c#  \npublic partial class StripLines : System.Web.UI.Page   \n    {  \n        protected void Page_Load(object sender, EventArgs e)  \n        {              \n            // Add chart data  \n            AddChartData();  \n  \n            // Adds a threshold line using strip lines.  \n            AddThresholdStripLine();  \n        }  \n  \n        /// <summary>  \n        /// Adds a week of data with values between 20 and 35.  \n        /// </summary>  \n        private void AddChartData()  \n        {  \n            // Declare new random variable  \n            Random rand = new Random();  \n  \n            // Add a week of data  \n            for (int i = 0; i < 7; i++)   \n            {  \n                chart1.Series[0].Points.AddXY(DateTime.Now.AddDays(i), rand.Next(20,35));  \n            }  \n        }  \n  \n        /// <summary>  \n        /// Adds a horizontal threshold strip line at the calculated mean   \n        /// value of all data points in the first series of the chart.  \n        /// </summary>  \n        private void AddThresholdStripLine()  \n        {  \n            StripLine stripLine3 = new StripLine();  \n  \n            // Set threshold line so that it is only shown once  \n            stripLine3.Interval = 0;  \n  \n            // Set the threshold line to be drawn at the calculated mean of the first series  \n            stripLine3.IntervalOffset = chart1.DataManipulator.Statistics.Mean(chart1.Series[0].Name);  \n  \n            stripLine3.BackColor = Color.DarkGreen;  \n            stripLine3.StripWidth = 0.25;  \n  \n            // Set text properties for the threshold line  \n            stripLine3.Text = \"Mean\";  \n            stripLine3.ForeColor = Color.Black;  \n            stripLine3.TextAlignment = StringAlignment.Near;  \n            stripLine3.TextLineAlignment = StringAlignment.Near;  \n            stripLine3.TextOrientation = TextOrientation.Auto;  \n  \n            // Add strip line to the chart  \n            chart1.ChartAreas[0].AxisY.StripLines.Add(stripLine3);  \n        }  \n    }  \n```"
  syntax:
    content: public System.Drawing.StringAlignment TextLineAlignment { get; set; }
    return:
      type: System.Drawing.StringAlignment
      description: "En <xref href=&quot;System.Drawing.StringAlignment&quot;> </xref> värde som representerar justering av textrad."
  overload: System.Web.UI.DataVisualization.Charting.StripLine.TextLineAlignment*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.DataVisualization.Charting.StripLine.TextOrientation
  id: TextOrientation
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  langs:
  - csharp
  name: TextOrientation
  nameWithType: StripLine.TextOrientation
  fullName: System.Web.UI.DataVisualization.Charting.StripLine.TextOrientation
  type: Property
  assemblies:
  - System.Web.DataVisualization
  namespace: System.Web.UI.DataVisualization.Charting
  summary: "Hämtar eller anger textorientering."
  remarks: "När den här egenskapen har angetts till ett värde av <xref:System.Web.UI.DataVisualization.Charting.TextOrientation>, texten är placerad baserat på diagramtypen.</xref:System.Web.UI.DataVisualization.Charting.TextOrientation> Texten är objektorienterad vågrätt från vänster till höger längst ned på remsans raden för alla X-Y diagramtyper andra än liggande x-axelns remsa rad. X-axelns remsa Radtext är orienterad lodrätt uppifrån och ned till höger om raden remsans för liggande diagram."
  example:
  - "The following code example demonstrates how to add a threshold line after the chart control has been added to the design surface. The chart uses a non-recurring strip line to show a calculation of the mean of all data points in a series.  \n  \n```vb#  \nImports System.Web.UI.DataVisualization.Charting  \n  \nPublic Partial Class StripLines   \n    Inherits System.Web.UI.Page   \n    Protected Sub Page_Load(ByVal sender As Object, ByVal e As EventArgs)  \n        ' Add chart data before adding strip lines.   \n        AddChartData()   \n  \n        ' Adds a threshold line using strip lines.   \n        AddThresholdStripLine()   \n    End Sub   \n  \n    ''' <summary>   \n    ''' Adds a week of data with values between 20 and 35.   \n    ''' </summary>   \n    Private Sub AddChartData()   \n        ' Declare new random variable   \n        Dim rand As New Random()   \n        For i As Integer = 0 To 6   \n  \n            ' Add a week of data   \n            chart1.Series(0).Points.AddXY(DateTime.Now.AddDays(i), rand.[Next](~/add/includes/ajax-current-ext-md.md 35))   \n        Next   \n    End Sub   \n  \n    ''' <summary>   \n    ''' Adds a horizontal threshold strip line at the calculated mean   \n    ''' value of all data points in the first series of the chart.   \n    ''' </summary>   \n    Private Sub AddThresholdStripLine()   \n        Dim stripLine3 As New StripLine()   \n  \n        ' Set threshold line so that it is only shown once   \n        stripLine3.Interval = 0   \n  \n        ' Set the threshold line to be drawn at the calculated mean of the first series   \n        stripLine3.IntervalOffset = chart1.DataManipulator.Statistics.Mean(chart1.Series(0).Name)   \n  \n        stripLine3.BackColor = Color.DarkGreen   \n        stripLine3.StripWidth = 0.25   \n  \n        ' Set text properties for the threshold line   \n        stripLine3.Text = \"Mean\"   \n        stripLine3.ForeColor = Color.Black   \n        stripLine3.TextAlignment = StringAlignment.Near   \n        stripLine3.TextLineAlignment = StringAlignment.Near   \n        stripLine3.TextOrientation = TextOrientation.Auto   \n  \n        ' Add strip line to the chart   \n        chart1.ChartAreas(0).AxisY.StripLines.Add(stripLine3)   \n    End Sub   \nEnd Class  \n```  \n  \n```c#  \npublic partial class StripLines : System.Web.UI.Page   \n    {  \n        protected void Page_Load(object sender, EventArgs e)  \n        {              \n            // Add chart data  \n            AddChartData();  \n  \n            // Adds a threshold line using strip lines.  \n            AddThresholdStripLine();  \n        }  \n  \n        /// <summary>  \n        /// Adds a week of data with values between 20 and 35.  \n        /// </summary>  \n        private void AddChartData()  \n        {  \n            // Declare new random variable  \n            Random rand = new Random();  \n  \n            // Add a week of data  \n            for (int i = 0; i < 7; i++)   \n            {  \n                chart1.Series[0].Points.AddXY(DateTime.Now.AddDays(i), rand.Next(20,35));  \n            }  \n        }  \n  \n        /// <summary>  \n        /// Adds a horizontal threshold strip line at the calculated mean   \n        /// value of all data points in the first series of the chart.  \n        /// </summary>  \n        private void AddThresholdStripLine()  \n        {  \n            StripLine stripLine3 = new StripLine();  \n  \n            // Set threshold line so that it is only shown once  \n            stripLine3.Interval = 0;  \n  \n            // Set the threshold line to be drawn at the calculated mean of the first series  \n            stripLine3.IntervalOffset = chart1.DataManipulator.Statistics.Mean(chart1.Series[0].Name);  \n  \n            stripLine3.BackColor = Color.DarkGreen;  \n            stripLine3.StripWidth = 0.25;  \n  \n            // Set text properties for the threshold line  \n            stripLine3.Text = \"Mean\";  \n            stripLine3.ForeColor = Color.Black;  \n            stripLine3.TextAlignment = StringAlignment.Near;  \n            stripLine3.TextLineAlignment = StringAlignment.Near;  \n            stripLine3.TextOrientation = TextOrientation.Auto;  \n  \n            // Add strip line to the chart  \n            chart1.ChartAreas[0].AxisY.StripLines.Add(stripLine3);  \n        }  \n    }  \n```"
  syntax:
    content: public System.Web.UI.DataVisualization.Charting.TextOrientation TextOrientation { get; set; }
    return:
      type: System.Web.UI.DataVisualization.Charting.TextOrientation
      description: "Ett TextOrientation-värde som representerar justering av textorientering."
  overload: System.Web.UI.DataVisualization.Charting.StripLine.TextOrientation*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.DataVisualization.Charting.StripLine.ToolTip
  id: ToolTip
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  langs:
  - csharp
  name: ToolTip
  nameWithType: StripLine.ToolTip
  fullName: System.Web.UI.DataVisualization.Charting.StripLine.ToolTip
  type: Property
  assemblies:
  - System.Web.DataVisualization
  namespace: System.Web.UI.DataVisualization.Charting
  summary: "Hämtar eller anger knappbeskrivningen för en linje för remsans."
  remarks: "Om du anger egenskapen en klickbar bild på klientsidan skapas automatiskt och en mappningsområdet kommer att skapas med attributet rubrik angivna tooltip-sträng. Mappningsområdet använder dimensioner som motsvarar remsans raden.       Den här egenskapen har ingen effekt om den <xref:System.Web.UI.DataVisualization.Charting.Chart.IsMapEnabled%2A>egenskap är inställd på `false`.</xref:System.Web.UI.DataVisualization.Charting.Chart.IsMapEnabled%2A> Standardvärdet är true."
  syntax:
    content: public string ToolTip { get; set; }
    return:
      type: System.String
      description: "En <xref uid=&quot;langword_csharp_string&quot; name=&quot;string&quot; href=&quot;&quot;> </xref> värde som representerar knappbeskrivning för remsans raden."
  overload: System.Web.UI.DataVisualization.Charting.StripLine.ToolTip*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.DataVisualization.Charting.StripLine.Url
  id: Url
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  langs:
  - csharp
  name: Url
  nameWithType: StripLine.Url
  fullName: System.Web.UI.DataVisualization.Charting.StripLine.Url
  type: Property
  assemblies:
  - System.Web.DataVisualization
  namespace: System.Web.UI.DataVisualization.Charting
  summary: "Hämtar eller anger den URL eller fästpunkt målplats remsans linjens."
  remarks: "Starta stränguttryck med &quot;http://&quot; eller &quot;www&quot;. Om du vill använda en absolut URL. Om strängen inte börjar med något av dessa prefix, behandlas den som en relativ URL."
  syntax:
    content: public string Url { get; set; }
    return:
      type: System.String
      description: "En <xref uid=&quot;langword_csharp_string&quot; name=&quot;string&quot; href=&quot;&quot;> </xref> värde som representerar den mål-URL eller fästpunkt remsans linjens."
  overload: System.Web.UI.DataVisualization.Charting.StripLine.Url*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Web.UI.DataVisualization.Charting.ChartElement
  isExternal: false
  name: System.Web.UI.DataVisualization.Charting.ChartElement
- uid: System.Web.UI.DataVisualization.Charting.StripLine.#ctor
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  isExternal: false
  name: StripLine()
  nameWithType: StripLine.StripLine()
  fullName: System.Web.UI.DataVisualization.Charting.StripLine.StripLine()
- uid: System.Web.UI.DataVisualization.Charting.StripLine.BackColor
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  isExternal: false
  name: BackColor
  nameWithType: StripLine.BackColor
  fullName: System.Web.UI.DataVisualization.Charting.StripLine.BackColor
- uid: System.Drawing.Color
  parent: System.Drawing
  isExternal: false
  name: Color
  nameWithType: Color
  fullName: System.Drawing.Color
- uid: System.Web.UI.DataVisualization.Charting.StripLine.BackGradientStyle
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  isExternal: false
  name: BackGradientStyle
  nameWithType: StripLine.BackGradientStyle
  fullName: System.Web.UI.DataVisualization.Charting.StripLine.BackGradientStyle
- uid: System.Web.UI.DataVisualization.Charting.GradientStyle
  parent: System.Web.UI.DataVisualization.Charting
  isExternal: false
  name: GradientStyle
  nameWithType: GradientStyle
  fullName: System.Web.UI.DataVisualization.Charting.GradientStyle
- uid: System.Web.UI.DataVisualization.Charting.StripLine.BackHatchStyle
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  isExternal: false
  name: BackHatchStyle
  nameWithType: StripLine.BackHatchStyle
  fullName: System.Web.UI.DataVisualization.Charting.StripLine.BackHatchStyle
- uid: System.Web.UI.DataVisualization.Charting.ChartHatchStyle
  parent: System.Web.UI.DataVisualization.Charting
  isExternal: false
  name: ChartHatchStyle
  nameWithType: ChartHatchStyle
  fullName: System.Web.UI.DataVisualization.Charting.ChartHatchStyle
- uid: System.Web.UI.DataVisualization.Charting.StripLine.BackImage
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  isExternal: false
  name: BackImage
  nameWithType: StripLine.BackImage
  fullName: System.Web.UI.DataVisualization.Charting.StripLine.BackImage
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Web.UI.DataVisualization.Charting.StripLine.BackImageAlignment
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  isExternal: false
  name: BackImageAlignment
  nameWithType: StripLine.BackImageAlignment
  fullName: System.Web.UI.DataVisualization.Charting.StripLine.BackImageAlignment
- uid: System.Web.UI.DataVisualization.Charting.ChartImageAlignmentStyle
  parent: System.Web.UI.DataVisualization.Charting
  isExternal: false
  name: ChartImageAlignmentStyle
  nameWithType: ChartImageAlignmentStyle
  fullName: System.Web.UI.DataVisualization.Charting.ChartImageAlignmentStyle
- uid: System.Web.UI.DataVisualization.Charting.StripLine.BackImageTransparentColor
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  isExternal: false
  name: BackImageTransparentColor
  nameWithType: StripLine.BackImageTransparentColor
  fullName: System.Web.UI.DataVisualization.Charting.StripLine.BackImageTransparentColor
- uid: System.Web.UI.DataVisualization.Charting.StripLine.BackImageWrapMode
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  isExternal: false
  name: BackImageWrapMode
  nameWithType: StripLine.BackImageWrapMode
  fullName: System.Web.UI.DataVisualization.Charting.StripLine.BackImageWrapMode
- uid: System.Web.UI.DataVisualization.Charting.ChartImageWrapMode
  parent: System.Web.UI.DataVisualization.Charting
  isExternal: false
  name: ChartImageWrapMode
  nameWithType: ChartImageWrapMode
  fullName: System.Web.UI.DataVisualization.Charting.ChartImageWrapMode
- uid: System.Web.UI.DataVisualization.Charting.StripLine.BackSecondaryColor
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  isExternal: false
  name: BackSecondaryColor
  nameWithType: StripLine.BackSecondaryColor
  fullName: System.Web.UI.DataVisualization.Charting.StripLine.BackSecondaryColor
- uid: System.Web.UI.DataVisualization.Charting.StripLine.BorderColor
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  isExternal: false
  name: BorderColor
  nameWithType: StripLine.BorderColor
  fullName: System.Web.UI.DataVisualization.Charting.StripLine.BorderColor
- uid: System.Web.UI.DataVisualization.Charting.StripLine.BorderDashStyle
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  isExternal: false
  name: BorderDashStyle
  nameWithType: StripLine.BorderDashStyle
  fullName: System.Web.UI.DataVisualization.Charting.StripLine.BorderDashStyle
- uid: System.Web.UI.DataVisualization.Charting.ChartDashStyle
  parent: System.Web.UI.DataVisualization.Charting
  isExternal: false
  name: ChartDashStyle
  nameWithType: ChartDashStyle
  fullName: System.Web.UI.DataVisualization.Charting.ChartDashStyle
- uid: System.Web.UI.DataVisualization.Charting.StripLine.BorderWidth
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  isExternal: false
  name: BorderWidth
  nameWithType: StripLine.BorderWidth
  fullName: System.Web.UI.DataVisualization.Charting.StripLine.BorderWidth
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Web.UI.DataVisualization.Charting.StripLine.Dispose(System.Boolean)
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: StripLine.Dispose(Boolean)
  fullName: System.Web.UI.DataVisualization.Charting.StripLine.Dispose(Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Web.UI.DataVisualization.Charting.StripLine.Font
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  isExternal: false
  name: Font
  nameWithType: StripLine.Font
  fullName: System.Web.UI.DataVisualization.Charting.StripLine.Font
- uid: System.Drawing.Font
  parent: System.Drawing
  isExternal: false
  name: Font
  nameWithType: Font
  fullName: System.Drawing.Font
- uid: System.Web.UI.DataVisualization.Charting.StripLine.ForeColor
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  isExternal: false
  name: ForeColor
  nameWithType: StripLine.ForeColor
  fullName: System.Web.UI.DataVisualization.Charting.StripLine.ForeColor
- uid: System.Web.UI.DataVisualization.Charting.StripLine.Interval
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  isExternal: false
  name: Interval
  nameWithType: StripLine.Interval
  fullName: System.Web.UI.DataVisualization.Charting.StripLine.Interval
- uid: System.Double
  parent: System
  isExternal: true
  name: Double
  nameWithType: Double
  fullName: System.Double
- uid: System.Web.UI.DataVisualization.Charting.StripLine.IntervalOffset
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  isExternal: false
  name: IntervalOffset
  nameWithType: StripLine.IntervalOffset
  fullName: System.Web.UI.DataVisualization.Charting.StripLine.IntervalOffset
- uid: System.Web.UI.DataVisualization.Charting.StripLine.IntervalOffsetType
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  isExternal: false
  name: IntervalOffsetType
  nameWithType: StripLine.IntervalOffsetType
  fullName: System.Web.UI.DataVisualization.Charting.StripLine.IntervalOffsetType
- uid: System.Web.UI.DataVisualization.Charting.DateTimeIntervalType
  parent: System.Web.UI.DataVisualization.Charting
  isExternal: false
  name: DateTimeIntervalType
  nameWithType: DateTimeIntervalType
  fullName: System.Web.UI.DataVisualization.Charting.DateTimeIntervalType
- uid: System.Web.UI.DataVisualization.Charting.StripLine.IntervalType
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  isExternal: false
  name: IntervalType
  nameWithType: StripLine.IntervalType
  fullName: System.Web.UI.DataVisualization.Charting.StripLine.IntervalType
- uid: System.Web.UI.DataVisualization.Charting.StripLine.MapAreaAttributes
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  isExternal: false
  name: MapAreaAttributes
  nameWithType: StripLine.MapAreaAttributes
  fullName: System.Web.UI.DataVisualization.Charting.StripLine.MapAreaAttributes
- uid: System.Web.UI.DataVisualization.Charting.StripLine.Name
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  isExternal: false
  name: Name
  nameWithType: StripLine.Name
  fullName: System.Web.UI.DataVisualization.Charting.StripLine.Name
- uid: System.Web.UI.DataVisualization.Charting.StripLine.PostBackValue
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  isExternal: false
  name: PostBackValue
  nameWithType: StripLine.PostBackValue
  fullName: System.Web.UI.DataVisualization.Charting.StripLine.PostBackValue
- uid: System.Web.UI.DataVisualization.Charting.StripLine.StripWidth
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  isExternal: false
  name: StripWidth
  nameWithType: StripLine.StripWidth
  fullName: System.Web.UI.DataVisualization.Charting.StripLine.StripWidth
- uid: System.Web.UI.DataVisualization.Charting.StripLine.StripWidthType
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  isExternal: false
  name: StripWidthType
  nameWithType: StripLine.StripWidthType
  fullName: System.Web.UI.DataVisualization.Charting.StripLine.StripWidthType
- uid: System.Web.UI.DataVisualization.Charting.StripLine.Text
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  isExternal: false
  name: Text
  nameWithType: StripLine.Text
  fullName: System.Web.UI.DataVisualization.Charting.StripLine.Text
- uid: System.Web.UI.DataVisualization.Charting.StripLine.TextAlignment
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  isExternal: false
  name: TextAlignment
  nameWithType: StripLine.TextAlignment
  fullName: System.Web.UI.DataVisualization.Charting.StripLine.TextAlignment
- uid: System.Drawing.StringAlignment
  parent: System.Drawing
  isExternal: false
  name: StringAlignment
  nameWithType: StringAlignment
  fullName: System.Drawing.StringAlignment
- uid: System.Web.UI.DataVisualization.Charting.StripLine.TextLineAlignment
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  isExternal: false
  name: TextLineAlignment
  nameWithType: StripLine.TextLineAlignment
  fullName: System.Web.UI.DataVisualization.Charting.StripLine.TextLineAlignment
- uid: System.Web.UI.DataVisualization.Charting.StripLine.TextOrientation
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  isExternal: false
  name: TextOrientation
  nameWithType: StripLine.TextOrientation
  fullName: System.Web.UI.DataVisualization.Charting.StripLine.TextOrientation
- uid: System.Web.UI.DataVisualization.Charting.TextOrientation
  parent: System.Web.UI.DataVisualization.Charting
  isExternal: false
  name: TextOrientation
  nameWithType: TextOrientation
  fullName: System.Web.UI.DataVisualization.Charting.TextOrientation
- uid: System.Web.UI.DataVisualization.Charting.StripLine.ToolTip
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  isExternal: false
  name: ToolTip
  nameWithType: StripLine.ToolTip
  fullName: System.Web.UI.DataVisualization.Charting.StripLine.ToolTip
- uid: System.Web.UI.DataVisualization.Charting.StripLine.Url
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  isExternal: false
  name: Url
  nameWithType: StripLine.Url
  fullName: System.Web.UI.DataVisualization.Charting.StripLine.Url
- uid: System.Web.UI.DataVisualization.Charting.StripLine.#ctor*
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  isExternal: false
  name: StripLine
  nameWithType: StripLine.StripLine
- uid: System.Web.UI.DataVisualization.Charting.StripLine.BackColor*
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  isExternal: false
  name: BackColor
  nameWithType: StripLine.BackColor
- uid: System.Web.UI.DataVisualization.Charting.StripLine.BackGradientStyle*
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  isExternal: false
  name: BackGradientStyle
  nameWithType: StripLine.BackGradientStyle
- uid: System.Web.UI.DataVisualization.Charting.StripLine.BackHatchStyle*
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  isExternal: false
  name: BackHatchStyle
  nameWithType: StripLine.BackHatchStyle
- uid: System.Web.UI.DataVisualization.Charting.StripLine.BackImage*
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  isExternal: false
  name: BackImage
  nameWithType: StripLine.BackImage
- uid: System.Web.UI.DataVisualization.Charting.StripLine.BackImageAlignment*
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  isExternal: false
  name: BackImageAlignment
  nameWithType: StripLine.BackImageAlignment
- uid: System.Web.UI.DataVisualization.Charting.StripLine.BackImageTransparentColor*
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  isExternal: false
  name: BackImageTransparentColor
  nameWithType: StripLine.BackImageTransparentColor
- uid: System.Web.UI.DataVisualization.Charting.StripLine.BackImageWrapMode*
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  isExternal: false
  name: BackImageWrapMode
  nameWithType: StripLine.BackImageWrapMode
- uid: System.Web.UI.DataVisualization.Charting.StripLine.BackSecondaryColor*
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  isExternal: false
  name: BackSecondaryColor
  nameWithType: StripLine.BackSecondaryColor
- uid: System.Web.UI.DataVisualization.Charting.StripLine.BorderColor*
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  isExternal: false
  name: BorderColor
  nameWithType: StripLine.BorderColor
- uid: System.Web.UI.DataVisualization.Charting.StripLine.BorderDashStyle*
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  isExternal: false
  name: BorderDashStyle
  nameWithType: StripLine.BorderDashStyle
- uid: System.Web.UI.DataVisualization.Charting.StripLine.BorderWidth*
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  isExternal: false
  name: BorderWidth
  nameWithType: StripLine.BorderWidth
- uid: System.Web.UI.DataVisualization.Charting.StripLine.Dispose*
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  isExternal: false
  name: Dispose
  nameWithType: StripLine.Dispose
- uid: System.Web.UI.DataVisualization.Charting.StripLine.Font*
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  isExternal: false
  name: Font
  nameWithType: StripLine.Font
- uid: System.Web.UI.DataVisualization.Charting.StripLine.ForeColor*
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  isExternal: false
  name: ForeColor
  nameWithType: StripLine.ForeColor
- uid: System.Web.UI.DataVisualization.Charting.StripLine.Interval*
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  isExternal: false
  name: Interval
  nameWithType: StripLine.Interval
- uid: System.Web.UI.DataVisualization.Charting.StripLine.IntervalOffset*
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  isExternal: false
  name: IntervalOffset
  nameWithType: StripLine.IntervalOffset
- uid: System.Web.UI.DataVisualization.Charting.StripLine.IntervalOffsetType*
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  isExternal: false
  name: IntervalOffsetType
  nameWithType: StripLine.IntervalOffsetType
- uid: System.Web.UI.DataVisualization.Charting.StripLine.IntervalType*
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  isExternal: false
  name: IntervalType
  nameWithType: StripLine.IntervalType
- uid: System.Web.UI.DataVisualization.Charting.StripLine.MapAreaAttributes*
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  isExternal: false
  name: MapAreaAttributes
  nameWithType: StripLine.MapAreaAttributes
- uid: System.Web.UI.DataVisualization.Charting.StripLine.Name*
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  isExternal: false
  name: Name
  nameWithType: StripLine.Name
- uid: System.Web.UI.DataVisualization.Charting.StripLine.PostBackValue*
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  isExternal: false
  name: PostBackValue
  nameWithType: StripLine.PostBackValue
- uid: System.Web.UI.DataVisualization.Charting.StripLine.StripWidth*
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  isExternal: false
  name: StripWidth
  nameWithType: StripLine.StripWidth
- uid: System.Web.UI.DataVisualization.Charting.StripLine.StripWidthType*
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  isExternal: false
  name: StripWidthType
  nameWithType: StripLine.StripWidthType
- uid: System.Web.UI.DataVisualization.Charting.StripLine.Text*
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  isExternal: false
  name: Text
  nameWithType: StripLine.Text
- uid: System.Web.UI.DataVisualization.Charting.StripLine.TextAlignment*
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  isExternal: false
  name: TextAlignment
  nameWithType: StripLine.TextAlignment
- uid: System.Web.UI.DataVisualization.Charting.StripLine.TextLineAlignment*
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  isExternal: false
  name: TextLineAlignment
  nameWithType: StripLine.TextLineAlignment
- uid: System.Web.UI.DataVisualization.Charting.StripLine.TextOrientation*
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  isExternal: false
  name: TextOrientation
  nameWithType: StripLine.TextOrientation
- uid: System.Web.UI.DataVisualization.Charting.StripLine.ToolTip*
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  isExternal: false
  name: ToolTip
  nameWithType: StripLine.ToolTip
- uid: System.Web.UI.DataVisualization.Charting.StripLine.Url*
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  isExternal: false
  name: Url
  nameWithType: StripLine.Url
