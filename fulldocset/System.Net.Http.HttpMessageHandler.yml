### YamlMime:ManagedReference
items:
- uid: System.Net.Http.HttpMessageHandler
  id: HttpMessageHandler
  children:
  - System.Net.Http.HttpMessageHandler.#ctor
  - System.Net.Http.HttpMessageHandler.Dispose
  - System.Net.Http.HttpMessageHandler.Dispose(System.Boolean)
  - System.Net.Http.HttpMessageHandler.SendAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)
  langs:
  - csharp
  name: HttpMessageHandler
  nameWithType: HttpMessageHandler
  fullName: System.Net.Http.HttpMessageHandler
  type: Class
  summary: "En bastyp för HTTP-meddelandehanterare."
  remarks: "Det finns olika HTTP-meddelande referenser som kan användas. Dessa inkluderar följande.      1.  <xref:System.Net.Http.DelegatingHandler>-En klass som används för att ansluta en hanterare till en hanterare kedja.</xref:System.Net.Http.DelegatingHandler>      2.  HttpMessageHandler - en enkel att klass som härleds från som stöder de vanligaste kraven för de flesta program.      3.  <xref:System.Net.Http.HttpClientHandler>-En klass som fungerar längst ned i kedjan hanterare som faktiskt hanterar HTTP-transport åtgärder.</xref:System.Net.Http.HttpClientHandler>      4.  <xref:System.Net.Http.WebRequestHandler>-En special-klass som fungerar längst ned i kedjan hanterare-klassen som hanterar http-transporter med alternativ som är specifika för den <xref:System.Net.HttpWebRequest?displayProperty=fullName>objekt.</xref:System.Net.HttpWebRequest?displayProperty=fullName></xref:System.Net.Http.WebRequestHandler>       Om utvecklare härledda klasser från HttpMessageHandler och Åsidosätt den <xref:System.Net.Http.HttpMessageHandler.SendAsync%2A>metoden, måste de se till att <xref:System.Net.Http.HttpMessageHandler.SendAsync%2A>kan hämta anropas samtidigt av olika trådar.</xref:System.Net.Http.HttpMessageHandler.SendAsync%2A> </xref:System.Net.Http.HttpMessageHandler.SendAsync%2A>       Detta är nödvändigt eftersom metoder i <xref:System.Net.Http.HttpClient>kan anropas samtidigt och kräver en garanti för tråden säkerhet.</xref:System.Net.Http.HttpClient> Om en hanterare är tilldelad till en <xref:System.Net.Http.HttpClient>instansen av <xref:System.Net.Http.HttpMessageHandler.SendAsync%2A>kan hämta anropa metoden för hanteraren samtidigt av den <xref:System.Net.Http.HttpClient>instansen och måste vara trådsäkra.</xref:System.Net.Http.HttpClient> </xref:System.Net.Http.HttpMessageHandler.SendAsync%2A> </xref:System.Net.Http.HttpClient>"
  syntax:
    content: 'public abstract class HttpMessageHandler : IDisposable'
  inheritance:
  - System.Object
  implements:
  - System.IDisposable
  inheritedMembers: []
  platform:
  - net462
- uid: System.Net.Http.HttpMessageHandler.#ctor
  id: '#ctor'
  parent: System.Net.Http.HttpMessageHandler
  langs:
  - csharp
  name: HttpMessageHandler()
  nameWithType: HttpMessageHandler.HttpMessageHandler()
  fullName: System.Net.Http.HttpMessageHandler.HttpMessageHandler()
  type: Constructor
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "Initierar en ny instans av den <xref href=&quot;System.Net.Http.HttpMessageHandler&quot;> </xref> klass."
  syntax:
    content: protected HttpMessageHandler ();
    parameters: []
  overload: System.Net.Http.HttpMessageHandler.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Http.HttpMessageHandler.Dispose
  id: Dispose
  parent: System.Net.Http.HttpMessageHandler
  langs:
  - csharp
  name: Dispose()
  nameWithType: HttpMessageHandler.Dispose()
  fullName: System.Net.Http.HttpMessageHandler.Dispose()
  type: Method
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "Versioner ohanterade resurser och omhändertar hanterade resurser som används av den <xref href=&quot;System.Net.Http.HttpMessageHandler&quot;> </xref>."
  syntax:
    content: public void Dispose ();
    parameters: []
  overload: System.Net.Http.HttpMessageHandler.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Http.HttpMessageHandler.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.Net.Http.HttpMessageHandler
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: HttpMessageHandler.Dispose(Boolean)
  fullName: System.Net.Http.HttpMessageHandler.Dispose(Boolean)
  type: Method
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "Släpper de ohanterade resurser som används av den <xref href=&quot;System.Net.Http.HttpMessageHandler&quot;> </xref> och eventuellt omhändertar hanterade resurser."
  remarks: "Den här metoden anropas av allmänheten `Dispose()` metod och <xref:System.Object.Finalize%2A>metod.</xref:System.Object.Finalize%2A> `Dispose()`anropar den skyddade `Dispose(Boolean)` metod med den `disposing` parametern `true`. <xref:System.Object.Finalize%2A>anropar `Dispose` med `disposing` inställd på `false`. När den `disposing` parametern är `true`, den här metoden Frigör alla resurser som innehas av alla hanterade objekt som den här <xref:System.Net.Http.HttpMessageHandler>referenser.</xref:System.Net.Http.HttpMessageHandler></xref:System.Object.Finalize%2A> Den här metoden startar den `Dispose()` metod för varje refererade till objekt."
  syntax:
    content: protected virtual void Dispose (bool disposing);
    parameters:
    - id: disposing
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Frisläpp både hanterade och ohanterade resurser. <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> till versioner endast ohanterade resurser."
  overload: System.Net.Http.HttpMessageHandler.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Http.HttpMessageHandler.SendAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)
  id: SendAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)
  parent: System.Net.Http.HttpMessageHandler
  langs:
  - csharp
  name: SendAsync(HttpRequestMessage,CancellationToken)
  nameWithType: HttpMessageHandler.SendAsync(HttpRequestMessage,CancellationToken)
  fullName: System.Net.Http.HttpMessageHandler.SendAsync(HttpRequestMessage,CancellationToken)
  type: Method
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "Skicka en HTTP-begäran som en asynkron åtgärd."
  remarks: "Åtgärden blockeras inte. Den returnerade <xref:System.Threading.Tasks.Task%601>objekt slutförs när hela svaret inklusive innehåll läses.</xref:System.Threading.Tasks.Task%601>       Metoden SendAsync används främst av systemet. Den här metoden anropas av ett system med den <xref:System.Net.Http.HttpClient.SendAsync%2A?displayProperty=fullName>metoder anropas.</xref:System.Net.Http.HttpClient.SendAsync%2A?displayProperty=fullName> De flesta appar kommer aldrig att anropa den här metoden."
  syntax:
    content: protected abstract System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage> SendAsync (System.Net.Http.HttpRequestMessage request, System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: request
      type: System.Net.Http.HttpRequestMessage
      description: "HTTP-begärandemeddelandet som ska skickas."
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "Annullering token att avbryta åtgärden."
    return:
      type: System.Threading.Tasks.Task{System.Net.Http.HttpResponseMessage}
      description: "Task-objekt som representerar den asynkrona åtgärden."
  overload: System.Net.Http.HttpMessageHandler.SendAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>request</code> was <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.Net.Http.HttpMessageHandler.#ctor
  parent: System.Net.Http.HttpMessageHandler
  isExternal: false
  name: HttpMessageHandler()
  nameWithType: HttpMessageHandler.HttpMessageHandler()
  fullName: System.Net.Http.HttpMessageHandler.HttpMessageHandler()
- uid: System.Net.Http.HttpMessageHandler.Dispose
  parent: System.Net.Http.HttpMessageHandler
  isExternal: false
  name: Dispose()
  nameWithType: HttpMessageHandler.Dispose()
  fullName: System.Net.Http.HttpMessageHandler.Dispose()
- uid: System.Net.Http.HttpMessageHandler.Dispose(System.Boolean)
  parent: System.Net.Http.HttpMessageHandler
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: HttpMessageHandler.Dispose(Boolean)
  fullName: System.Net.Http.HttpMessageHandler.Dispose(Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Net.Http.HttpMessageHandler.SendAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)
  parent: System.Net.Http.HttpMessageHandler
  isExternal: false
  name: SendAsync(HttpRequestMessage,CancellationToken)
  nameWithType: HttpMessageHandler.SendAsync(HttpRequestMessage,CancellationToken)
  fullName: System.Net.Http.HttpMessageHandler.SendAsync(HttpRequestMessage,CancellationToken)
- uid: System.Threading.Tasks.Task{System.Net.Http.HttpResponseMessage}
  parent: System.Threading.Tasks
  isExternal: true
  name: Task<HttpResponseMessage>
  nameWithType: Task<HttpResponseMessage>
  fullName: System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage>
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: Task<System.Net.Http.HttpResponseMessage>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Net.Http.HttpResponseMessage
    name: HttpResponseMessage
    nameWithType: HttpResponseMessage
    fullName: HttpResponseMessage
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Net.Http.HttpRequestMessage
  parent: System.Net.Http
  isExternal: false
  name: HttpRequestMessage
  nameWithType: HttpRequestMessage
  fullName: System.Net.Http.HttpRequestMessage
- uid: System.Threading.CancellationToken
  parent: System.Threading
  isExternal: true
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Net.Http.HttpMessageHandler.#ctor*
  parent: System.Net.Http.HttpMessageHandler
  isExternal: false
  name: HttpMessageHandler
  nameWithType: HttpMessageHandler.HttpMessageHandler
- uid: System.Net.Http.HttpMessageHandler.Dispose*
  parent: System.Net.Http.HttpMessageHandler
  isExternal: false
  name: Dispose
  nameWithType: HttpMessageHandler.Dispose
- uid: System.Net.Http.HttpMessageHandler.SendAsync*
  parent: System.Net.Http.HttpMessageHandler
  isExternal: false
  name: SendAsync
  nameWithType: HttpMessageHandler.SendAsync
