### YamlMime:ManagedReference
items:
- uid: System.Xml.XmlDocument
  id: XmlDocument
  children:
  - System.Xml.XmlDocument.#ctor
  - System.Xml.XmlDocument.#ctor(System.Xml.XmlImplementation)
  - System.Xml.XmlDocument.#ctor(System.Xml.XmlNameTable)
  - System.Xml.XmlDocument.BaseURI
  - System.Xml.XmlDocument.CloneNode(System.Boolean)
  - System.Xml.XmlDocument.CreateAttribute(System.String)
  - System.Xml.XmlDocument.CreateAttribute(System.String,System.String)
  - System.Xml.XmlDocument.CreateAttribute(System.String,System.String,System.String)
  - System.Xml.XmlDocument.CreateCDataSection(System.String)
  - System.Xml.XmlDocument.CreateComment(System.String)
  - System.Xml.XmlDocument.CreateDefaultAttribute(System.String,System.String,System.String)
  - System.Xml.XmlDocument.CreateDocumentFragment
  - System.Xml.XmlDocument.CreateDocumentType(System.String,System.String,System.String,System.String)
  - System.Xml.XmlDocument.CreateElement(System.String)
  - System.Xml.XmlDocument.CreateElement(System.String,System.String)
  - System.Xml.XmlDocument.CreateElement(System.String,System.String,System.String)
  - System.Xml.XmlDocument.CreateEntityReference(System.String)
  - System.Xml.XmlDocument.CreateNavigator
  - System.Xml.XmlDocument.CreateNavigator(System.Xml.XmlNode)
  - System.Xml.XmlDocument.CreateNode(System.String,System.String,System.String)
  - System.Xml.XmlDocument.CreateNode(System.Xml.XmlNodeType,System.String,System.String)
  - System.Xml.XmlDocument.CreateNode(System.Xml.XmlNodeType,System.String,System.String,System.String)
  - System.Xml.XmlDocument.CreateProcessingInstruction(System.String,System.String)
  - System.Xml.XmlDocument.CreateSignificantWhitespace(System.String)
  - System.Xml.XmlDocument.CreateTextNode(System.String)
  - System.Xml.XmlDocument.CreateWhitespace(System.String)
  - System.Xml.XmlDocument.CreateXmlDeclaration(System.String,System.String,System.String)
  - System.Xml.XmlDocument.DocumentElement
  - System.Xml.XmlDocument.DocumentType
  - System.Xml.XmlDocument.GetElementById(System.String)
  - System.Xml.XmlDocument.GetElementsByTagName(System.String)
  - System.Xml.XmlDocument.GetElementsByTagName(System.String,System.String)
  - System.Xml.XmlDocument.Implementation
  - System.Xml.XmlDocument.ImportNode(System.Xml.XmlNode,System.Boolean)
  - System.Xml.XmlDocument.InnerText
  - System.Xml.XmlDocument.InnerXml
  - System.Xml.XmlDocument.IsReadOnly
  - System.Xml.XmlDocument.Load(System.IO.Stream)
  - System.Xml.XmlDocument.Load(System.IO.TextReader)
  - System.Xml.XmlDocument.Load(System.String)
  - System.Xml.XmlDocument.Load(System.Xml.XmlReader)
  - System.Xml.XmlDocument.LoadXml(System.String)
  - System.Xml.XmlDocument.LocalName
  - System.Xml.XmlDocument.Name
  - System.Xml.XmlDocument.NameTable
  - System.Xml.XmlDocument.NodeChanged
  - System.Xml.XmlDocument.NodeChanging
  - System.Xml.XmlDocument.NodeInserted
  - System.Xml.XmlDocument.NodeInserting
  - System.Xml.XmlDocument.NodeRemoved
  - System.Xml.XmlDocument.NodeRemoving
  - System.Xml.XmlDocument.NodeType
  - System.Xml.XmlDocument.OwnerDocument
  - System.Xml.XmlDocument.ParentNode
  - System.Xml.XmlDocument.PreserveWhitespace
  - System.Xml.XmlDocument.ReadNode(System.Xml.XmlReader)
  - System.Xml.XmlDocument.Save(System.IO.Stream)
  - System.Xml.XmlDocument.Save(System.IO.TextWriter)
  - System.Xml.XmlDocument.Save(System.String)
  - System.Xml.XmlDocument.Save(System.Xml.XmlWriter)
  - System.Xml.XmlDocument.SchemaInfo
  - System.Xml.XmlDocument.Schemas
  - System.Xml.XmlDocument.Validate(System.Xml.Schema.ValidationEventHandler)
  - System.Xml.XmlDocument.Validate(System.Xml.Schema.ValidationEventHandler,System.Xml.XmlNode)
  - System.Xml.XmlDocument.WriteContentTo(System.Xml.XmlWriter)
  - System.Xml.XmlDocument.WriteTo(System.Xml.XmlWriter)
  - System.Xml.XmlDocument.XmlResolver
  langs:
  - csharp
  name: XmlDocument
  nameWithType: XmlDocument
  fullName: System.Xml.XmlDocument
  type: Class
  summary: "Representerar ett XML-dokument. Du kan använda den här klassen för att läsa, verifiera, redigera, lägga till och placera XML i ett dokument."
  remarks: "<a name=\"Remarks\"></a> The XmlDocument class is an in-memory representation of an XML document. It implements the W3C [XML Document Object Model (DOM)](~/add/includes/ajax-current-ext-md.md) Level 1 Core and the Core DOM Level 2.  \n  \n *DOM* stands for *document object model*. To read more about it, see [XML Document Object Model (DOM)](../Topic/XML%20Document%20Object%20Model%20\\(DOM\\).md).  \n  \n You can load XML into the DOM by using the XmlDocument class, and then programmatically read, modify, and remove XML in the document.  \n  \n If you want to pry open the XmlDocument class and see how it’s implemented, see the [Reference Source](http://referencesource.microsoft.com/#System.Xml/Xml/System/Xml/Dom/XmlDocument.cs#f82a4c1bd1f0ee12).  \n  \n<a name=\"Common\"></a>   \n## Tasks  \n  \n-   [Load XML into the document object model](#Load)  \n  \n-   [Validate it against a schema](#Validation)  \n  \n-   [Navigate the document tree](#Navigate)  \n  \n-   [Find nodes](#Find)  \n  \n-   [Edit nodes](#Edit)  \n  \n-   [Add nodes](#Add)  \n  \n-   [Remove nodes](#Remove)  \n  \n-   [Position nodes](#Position)  \n  \n<a name=\"Load\"></a>   \n## Load XML into the document object model  \n Start with an XML document like this one. It’s just a few books in a collection. But it does contain the basic things that you’d find in any XML document; a namespace, elements that represent data and attributes that describe the data.  \n  \n```xml  \n<?xml version=\"1.0\" encoding=\"utf-8\"?>  \n<books xmlns=\"http://www.contoso.com/books\">  \n  <book genre=\"novel\" ISBN=\"1-861001-57-8\" publicationdate=\"1823-01-28\">  \n    <title>Pride And Prejudice</title>  \n    <price>24.95</price>  \n  </book>  \n  <book genre=\"novel\" ISBN=\"1-861002-30-1\" publicationdate=\"1985-01-01\">  \n    <title>The Handmaid's Tale</title>  \n    <price>29.95</price>  \n  </book>  \n  <book genre=\"novel\" ISBN=\"1-861001-45-3\" publicationdate=\"1811-01-01\">  \n    <title>Sense and Sensibility</title>  \n    <price>19.95</price>  \n  </book>  \n</books>  \n```  \n  \n Next, load this data into the DOM so that you can work with it in memory. The most popular way to do this is refer to a file on your local computer or on a network.  \n  \n This example loads XML from a file. If the file doesn’t exist, it just generates some XML and loads that.  \n  \n [!code-cpp[XMLProcessingApp#1](~/add/codesnippet/cpp/xmldomprocessing/xmldomprocessing.cpp#1)]\n [!code-cs[XMLProcessingApp#1](~/add/codesnippet/csharp/xmlprocessingapp/xmlhelpermethods.cs#1)]\n [!code-vb[XMLProcessingApp#1](~/add/codesnippet/visualbasic/xmlprocessingappvb/xmlhelpermethods.vb#1)]  \n  \n **Complete sample:** [Manipulate XML in-Memory by using the XmlDocument class and other related types](https://code.msdn.microsoft.com/windowsdesktop/Manipulate-XML-in-memory-4b612d6b/view/SourceCode)  \n  \n **Learn more:** [Reading an XML Document into the DOM](~/add/includes/ajax-current-ext-md.md)  \n  \n<a name=\"Validation\"></a>   \n## Validate it against a schema  \n Start with an XML schema like this one. This schema defines the data types in the XML and which attributes are required.  \n  \n```xml  \n<?xml version=\"1.0\" encoding=\"utf-8\"?>  \n<xs:schema xmlns:xs=\"http://www.w3.org/2001/XMLSchema\"  \n  attributeFormDefault=\"unqualified\"   \n  elementFormDefault=\"qualified\"  \n  targetNamespace=\"http://www.contoso.com/books\">   \n  <xs:element name=\"books\">  \n    <xs:complexType>  \n      <xs:sequence>  \n        <xs:element maxOccurs=\"unbounded\" name=\"book\">  \n          <xs:complexType>  \n            <xs:sequence>  \n              <xs:element name=\"title\" type=\"xs:string\" />  \n              <xs:element name=\"price\" type=\"xs:decimal\" />  \n            </xs:sequence>  \n            <xs:attribute name=\"genre\" type=\"xs:string\" use=\"required\" />  \n            <xs:attribute name=\"ISBN\" type=\"xs:string\" use=\"required\" />  \n            <xs:attribute name=\"publicationdate\" type=\"xs:date\" use=\"required\" />  \n          </xs:complexType>  \n        </xs:element>  \n      </xs:sequence>  \n    </xs:complexType>  \n  </xs:element>  \n</xs:schema>  \n```  \n  \n Create an <xref:System.Xml.XmlReader> object by using your schema, and then load that object into the DOM. Create an event handler that executes when code attempts to modify your XML file in ways that violate the rules of the schema.  \n  \n These blocks of code show helper methods that do all of this.  \n  \n [!code-cpp[XMLProcessingApp#2](~/add/codesnippet/cpp/xmldomprocessing/xmldomprocessing.cpp#2)]\n [!code-cs[XMLProcessingApp#2](~/add/codesnippet/csharp/xmlprocessingapp/xmlhelpermethods.cs#2)]\n [!code-vb[XMLProcessingApp#2](~/add/codesnippet/visualbasic/xmlprocessingappvb/xmlhelpermethods.vb#2)]  \n  \n **Complete sample:** [Manipulate XML in-Memory by using the XmlDocument class and other related types](https://code.msdn.microsoft.com/windowsdesktop/Manipulate-XML-in-memory-4b612d6b/view/SourceCode)  \n  \n **Learn more:** [Validating an XML Document in the DOM](~/add/includes/ajax-current-ext-md.md)  \n  \n<a name=\"Navigate\"></a>   \n## Navigate the document tree  \n You can use properties to navigate around an XML document. But before you use any of them, let’s quickly review a few terms. Your document is composed of nodes. Each node has as single *parent* node directly above it. The only node that does not have a parent node is the document root, as it is the top-level node. Most nodes can have *child* nodes, which are nodes directly below them. Nodes that are at the same level are *siblings*.  \n  \n The following examples, show you how to obtain the root node, jump to the first child node of the root node, access any of its child nodes, get back out to the parent node, and then navigate across sibling nodes.  \n  \n **Start with the root node**  \n  \n This example gets the root node and then uses that node to output the contents of the document to the console.  \n  \n [!code-cs[Classic WebData XmlDocument.DocumentElement Example#1](~/add/codesnippet/csharp/t-system.xml.xmldocument_3.cs)]\n [!code-cpp[Classic WebData XmlDocument.DocumentElement Example#1](~/add/codesnippet/cpp/t-system.xml.xmldocument_3.cpp)]\n [!code-vb[Classic WebData XmlDocument.DocumentElement Example#1](~/add/codesnippet/visualbasic/t-system.xml.xmldocument_3.vb)]  \n  \n **Get child nodes**  \n  \n This example jumps to the first child node of the root node and then iterates through the child nodes of that node if any exist.  \n  \n [!code-cs[Classic WebData XmlNode.HasChildNodes Example#1](~/add/codesnippet/csharp/t-system.xml.xmldocument_4.cs)]\n [!code-cpp[Classic WebData XmlNode.HasChildNodes Example#1](~/add/codesnippet/cpp/t-system.xml.xmldocument_4.cpp)]\n [!code-vb[Classic WebData XmlNode.HasChildNodes Example#1](~/add/codesnippet/visualbasic/t-system.xml.xmldocument_4.vb)]  \n  \n **Get back to the parent node**  \n  \n Use the <xref:System.Xml.XmlDocument.ParentNode%2A> property.  \n  \n **Refer to the last child node**  \n  \n This example writes the price of a book to the console (which is the last child node of a book node).  \n  \n [!code-cpp[Classic WebData XmlNode.LastChild Example#1](~/add/codesnippet/cpp/t-system.xml.xmldocument_5.cpp)]\n [!code-cs[Classic WebData XmlNode.LastChild Example#1](~/add/codesnippet/csharp/t-system.xml.xmldocument_5.cs)]\n [!code-vb[Classic WebData XmlNode.LastChild Example#1](~/add/codesnippet/visualbasic/t-system.xml.xmldocument_5.vb)]  \n  \n **Navigate forward across siblings**  \n  \n This example moves forward from book to book. Book nodes are siblings to one another.  \n  \n [!code-vb[Classic WebData XmlNode.NextSibling Example#1](~/add/codesnippet/visualbasic/t-system.xml.xmldocument_6.vb)]\n [!code-cpp[Classic WebData XmlNode.NextSibling Example#1](~/add/codesnippet/cpp/t-system.xml.xmldocument_6.cpp)]\n [!code-cs[Classic WebData XmlNode.NextSibling Example#1](~/add/codesnippet/csharp/t-system.xml.xmldocument_6.cs)]  \n  \n **Navigate backwards across siblings**  \n  \n This example moves backwards from book to book.  \n  \n [!code-cs[Classic WebData XmlNode.PreviousSibling Example#1](~/add/codesnippet/csharp/t-system.xml.xmldocument_7.cs)]\n [!code-cpp[Classic WebData XmlNode.PreviousSibling Example#1](~/add/codesnippet/cpp/t-system.xml.xmldocument_7.cpp)]\n [!code-vb[Classic WebData XmlNode.PreviousSibling Example#1](~/add/codesnippet/visualbasic/t-system.xml.xmldocument_7.vb)]  \n  \n<a name=\"Find\"></a>   \n## Find nodes  \n The most popular way to find one or more nodes of data is to use an XPath query string, but there are also methods that don’t require one.  \n  \n **Get a single node**  \n  \n This example locates a book by using the ISBN number.  \n  \n [!code-cpp[XMLProcessingApp#3](~/add/codesnippet/cpp/xmldomprocessing/xmldomprocessing.cpp#3)]\n [!code-cs[XMLProcessingApp#3](~/add/codesnippet/csharp/xmlprocessingapp/xmlhelpermethods.cs#3)]\n [!code-vb[XMLProcessingApp#3](~/add/codesnippet/visualbasic/xmlprocessingappvb/xmlhelpermethods.vb#3)]  \n  \n The string used in this example is an Xpath query. You can find more examples of them here:   [XPath examples](https://msdn.microsoft.com/en-us/library/ms256086.aspx).  \n  \n You can also use the <xref:System.Xml.XmlDocument.GetElementById%2A> to retrieve nodes. To use this approach, you’ll have to define ID’s in the document type definition declarations of your XML file.  \n  \n After you get a node, you get the value of attributes or child nodes. This example does that with a book node.  \n  \n [!code-cpp[XMLProcessingApp#4](~/add/codesnippet/cpp/xmldomprocessing/xmldomprocessing.cpp#4)]\n [!code-cs[XMLProcessingApp#4](~/add/codesnippet/csharp/xmlprocessingapp/xmlhelpermethods.cs#4)]\n [!code-vb[XMLProcessingApp#4](~/add/codesnippet/visualbasic/xmlprocessingappvb/xmlhelpermethods.vb#4)]  \n  \n **Get a collection of nodes**  \n  \n This example selects all books where the author's last name is **Austen**, and then changes the price of those books.  \n  \n [!code-cpp[Classic WebData XmlNode.SelectNodes Example#1](~/add/codesnippet/cpp/t-system.xml.xmldocument_10.cpp)]\n [!code-cs[Classic WebData XmlNode.SelectNodes Example#1](~/add/codesnippet/csharp/t-system.xml.xmldocument_10.cs)]\n [!code-vb[Classic WebData XmlNode.SelectNodes Example#1](~/add/codesnippet/visualbasic/t-system.xml.xmldocument_10.vb)]  \n  \n You can also get a collection of nodes by using the name of the node. For example, this example gets a collection of all book titles.  \n  \n [!code-cs[Classic WebData XmlDocument.GetElementsByTagName Example#1](~/add/codesnippet/csharp/t-system.xml.xmldocument_11.cs)]\n [!code-cpp[Classic WebData XmlDocument.GetElementsByTagName Example#1](~/add/codesnippet/cpp/t-system.xml.xmldocument_11.cpp)]\n [!code-vb[Classic WebData XmlDocument.GetElementsByTagName Example#1](~/add/codesnippet/visualbasic/t-system.xml.xmldocument_11.vb)]  \n  \n **Complete sample:** [Manipulate XML in-Memory by using the XmlDocument class and other related types](https://code.msdn.microsoft.com/windowsdesktop/Manipulate-XML-in-memory-4b612d6b/view/SourceCode)  \n  \n **Learn more:** [Select Nodes Using XPath Navigation](~/add/includes/ajax-current-ext-md.md)  \n  \n<a name=\"Edit\"></a>   \n## Edit nodes  \n This example edits a book node and its attributes.  \n  \n [!code-cpp[XMLProcessingApp#7](~/add/codesnippet/cpp/xmldomprocessing/xmldomprocessing.cpp#7)]\n [!code-cs[XMLProcessingApp#7](~/add/codesnippet/csharp/xmlprocessingapp/xmlhelpermethods.cs#7)]\n [!code-vb[XMLProcessingApp#7](~/add/codesnippet/visualbasic/xmlprocessingappvb/xmlhelpermethods.vb#7)]  \n  \n **Learn more:** [Modifying Nodes, Content, and Values in an XML Document](~/add/includes/ajax-current-ext-md.md)  \n  \n **Complete sample:** [Manipulate XML in-Memory by using the XmlDocument class and other related types](https://code.msdn.microsoft.com/windowsdesktop/Manipulate-XML-in-memory-4b612d6b/view/SourceCode)  \n  \n<a name=\"Add\"></a>   \n## Add nodes  \n To add a node, use the <xref:System.Xml.XmlDocument.CreateElement%2A> method or the <xref:System.Xml.XmlDocument.CreateNode%2A> method.  \n  \n To add a data node such as a book, use the <xref:System.Xml.XmlDocument.CreateElement%2A> method.  \n  \n For any other type of node such as a comment, whitespace node, or CDATA node, use the <xref:System.Xml.XmlDocument.CreateNode%2A> method.  \n  \n This example creates a book node, adds attrubutes to that node, and then adds that node to the document.  \n  \n [!code-cpp[XMLProcessingApp#5](~/add/codesnippet/cpp/xmldomprocessing/xmldomprocessing.cpp#5)]\n [!code-cs[XMLProcessingApp#5](~/add/codesnippet/csharp/xmlprocessingapp/xmlhelpermethods.cs#5)]\n [!code-vb[XMLProcessingApp#5](~/add/codesnippet/visualbasic/xmlprocessingappvb/xmlhelpermethods.vb#5)]  \n  \n **Complete sample:** [Manipulate XML in-Memory by using the XmlDocument class and other related types](https://code.msdn.microsoft.com/windowsdesktop/Manipulate-XML-in-memory-4b612d6b/view/SourceCode)  \n  \n **Learn more:** [Inserting Nodes into an XML Document](~/add/includes/ajax-current-ext-md.md)  \n  \n<a name=\"Remove\"></a>   \n## Remove nodes  \n To remove a node, use the <xref:System.Xml.XmlNode.RemoveChild%2A> method.  \n  \n This example removes a book from the document and any whitespace that appears just before the book node.  \n  \n [!code-cpp[XMLProcessingApp#6](~/add/codesnippet/cpp/xmldomprocessing/xmldomprocessing.cpp#6)]\n [!code-cs[XMLProcessingApp#6](~/add/codesnippet/csharp/xmlprocessingapp/xmlhelpermethods.cs#6)]\n [!code-vb[XMLProcessingApp#6](~/add/codesnippet/visualbasic/xmlprocessingappvb/xmlhelpermethods.vb#6)]  \n  \n **Complete sample:** [Manipulate XML in-Memory by using the XmlDocument class and other related types](https://code.msdn.microsoft.com/windowsdesktop/Manipulate-XML-in-memory-4b612d6b/view/SourceCode)  \n  \n **Learn more:** [Removing Nodes, Content, and Values from an XML Document](~/add/includes/ajax-current-ext-md.md)  \n  \n<a name=\"Position\"></a>   \n## Position nodes  \n You can choose where you want a node to appear in your document by using the <xref:System.Xml.XmlNode.InsertBefore%2A> and <xref:System.Xml.XmlNode.InsertAfter%2A> methods.  \n  \n This example shows two helper methods. One of them moves a node higher in a list. The other one moves a node lower.  \n  \n These methods could be used in an application that enables users to move books up and down in a list of books. When a user chooses a book and presses an up or down button, your code could call methods like these to position the corresponding book node before or after other book nodes.  \n  \n [!code-cpp[XMLProcessingApp#8](~/add/codesnippet/cpp/xmldomprocessing/xmldomprocessing.cpp#8)]\n [!code-cs[XMLProcessingApp#8](~/add/codesnippet/csharp/xmlprocessingapp/xmlhelpermethods.cs#8)]\n [!code-vb[XMLProcessingApp#8](~/add/codesnippet/visualbasic/xmlprocessingappvb/xmlhelpermethods.vb#8)]  \n  \n **Complete sample:** [Manipulate XML in-Memory by using the XmlDocument class and other related types](https://code.msdn.microsoft.com/windowsdesktop/Manipulate-XML-in-memory-4b612d6b/view/SourceCode)"
  syntax:
    content: 'public class XmlDocument : System.Xml.XmlNode'
  inheritance:
  - System.Object
  - System.Xml.XmlNode
  implements: []
  inheritedMembers:
  - System.Xml.XmlNode.AppendChild(System.Xml.XmlNode)
  - System.Xml.XmlNode.Attributes
  - System.Xml.XmlNode.ChildNodes
  - System.Xml.XmlNode.Clone
  - System.Xml.XmlNode.FirstChild
  - System.Xml.XmlNode.GetEnumerator
  - System.Xml.XmlNode.GetNamespaceOfPrefix(System.String)
  - System.Xml.XmlNode.GetPrefixOfNamespace(System.String)
  - System.Xml.XmlNode.HasChildNodes
  - System.Xml.XmlNode.InsertAfter(System.Xml.XmlNode,System.Xml.XmlNode)
  - System.Xml.XmlNode.InsertBefore(System.Xml.XmlNode,System.Xml.XmlNode)
  - System.Xml.XmlNode.Item(System.String)
  - System.Xml.XmlNode.Item(System.String,System.String)
  - System.Xml.XmlNode.LastChild
  - System.Xml.XmlNode.NamespaceURI
  - System.Xml.XmlNode.NextSibling
  - System.Xml.XmlNode.Normalize
  - System.Xml.XmlNode.OuterXml
  - System.Xml.XmlNode.Prefix
  - System.Xml.XmlNode.PrependChild(System.Xml.XmlNode)
  - System.Xml.XmlNode.PreviousSibling
  - System.Xml.XmlNode.PreviousText
  - System.Xml.XmlNode.RemoveAll
  - System.Xml.XmlNode.RemoveChild(System.Xml.XmlNode)
  - System.Xml.XmlNode.ReplaceChild(System.Xml.XmlNode,System.Xml.XmlNode)
  - System.Xml.XmlNode.SelectNodes(System.String)
  - System.Xml.XmlNode.SelectNodes(System.String,System.Xml.XmlNamespaceManager)
  - System.Xml.XmlNode.SelectSingleNode(System.String)
  - System.Xml.XmlNode.SelectSingleNode(System.String,System.Xml.XmlNamespaceManager)
  - System.Xml.XmlNode.Supports(System.String,System.String)
  - System.Xml.XmlNode.System#Collections#IEnumerable#GetEnumerator
  - System.Xml.XmlNode.System#ICloneable#Clone
  - System.Xml.XmlNode.Value
  platform:
  - net462
- uid: System.Xml.XmlDocument.#ctor
  id: '#ctor'
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: XmlDocument()
  nameWithType: XmlDocument.XmlDocument()
  fullName: System.Xml.XmlDocument.XmlDocument()
  type: Constructor
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Initierar en ny instans av den <xref href=&quot;System.Xml.XmlDocument&quot;> </xref> klass."
  remarks: ''
  example:
  - "The following is an example of load-time validation. A document type definition (DTD) validating <xref:System.Xml.XmlReader> is passed to the <xref:System.Xml.XmlDocument.Load%2A> method and a <xref:System.Xml.Schema.ValidationEventHandler> is provided to notify users of any validation errors. In this example a validation error is found, but the document is still loaded. Alternatively, you can define a validating <xref:System.Xml.XmlReader> to throw an exception and stop the load process when a validation error is found by not specifying the <xref:System.Xml.Schema.ValidationEventHandler>. For more information about validating XML data, see the Remarks section of the <xref:System.Xml.XmlReader> reference page.  \n  \n [!code-vb[XmlDocument.cctor#1](~/add/codesnippet/visualbasic/m-system.xml.xmldocument_11_1.vb)]\n [!code-cs[XmlDocument.cctor#1](~/add/codesnippet/csharp/m-system.xml.xmldocument_11_1.cs)]\n [!code-cpp[XmlDocument.cctor#1](~/add/codesnippet/cpp/m-system.xml.xmldocument_11_1.cpp)]  \n  \n The example uses the `bookDTD.xml` file as input.  \n  \n [!code-xml[XmlDocument.cctor#2](~/add/codesnippet/xml/m-system.xml.xmldocument_11_2.xml)]"
  syntax:
    content: public XmlDocument ();
    parameters: []
  overload: System.Xml.XmlDocument.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlDocument.#ctor(System.Xml.XmlImplementation)
  id: '#ctor(System.Xml.XmlImplementation)'
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: XmlDocument(XmlImplementation)
  nameWithType: XmlDocument.XmlDocument(XmlImplementation)
  fullName: System.Xml.XmlDocument.XmlDocument(XmlImplementation)
  type: Constructor
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Initierar en ny instans av den <xref uid=&quot;langword_csharp_XmlDocument&quot; name=&quot;XmlDocument&quot; href=&quot;&quot;> </xref> klass med det angivna <xref href=&quot;System.Xml.XmlImplementation&quot;> </xref>."
  syntax:
    content: protected XmlDocument (System.Xml.XmlImplementation imp);
    parameters:
    - id: imp
      type: System.Xml.XmlImplementation
      description: "The <xref uid=&quot;langword_csharp_XmlImplementation&quot; name=&quot;XmlImplementation&quot; href=&quot;&quot;></xref> to use."
  overload: System.Xml.XmlDocument.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlDocument.#ctor(System.Xml.XmlNameTable)
  id: '#ctor(System.Xml.XmlNameTable)'
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: XmlDocument(XmlNameTable)
  nameWithType: XmlDocument.XmlDocument(XmlNameTable)
  fullName: System.Xml.XmlDocument.XmlDocument(XmlNameTable)
  type: Constructor
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Initierar en ny instans av den <xref uid=&quot;langword_csharp_XmlDocument&quot; name=&quot;XmlDocument&quot; href=&quot;&quot;> </xref> klass med angivna <xref:System.Xml.XmlNameTable>.</xref:System.Xml.XmlNameTable>"
  syntax:
    content: public XmlDocument (System.Xml.XmlNameTable nt);
    parameters:
    - id: nt
      type: System.Xml.XmlNameTable
      description: "The <xref uid=&quot;langword_csharp_XmlNameTable&quot; name=&quot;XmlNameTable&quot; href=&quot;&quot;></xref> to use."
  overload: System.Xml.XmlDocument.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlDocument.BaseURI
  id: BaseURI
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: BaseURI
  nameWithType: XmlDocument.BaseURI
  fullName: System.Xml.XmlDocument.BaseURI
  type: Property
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Hämtar den aktuella noden bas-URI."
  remarks: "En nätverksansluten XML-dokumentet består av segment av sammanställs med olika W3C standard inkludering mekanismer och innehåller därför noder som kommer från olika platser. Den `BaseURI` talar om var dessa noder kom från.       För dokumentet noder `BaseURI` Returnerar placeringen av XML-dokumentet. Till exempel om den `XmlDocument` lästes in med följande anrop dokumentet. Läs in (&quot;http://server/mydata.xml&quot;), den `BaseURI` nod är http://server/mydata.xml för dokumentet. Men om den <xref:System.Xml.XmlDocument.Load%2A>metoden omdirigeras av servern till en annan URI `BaseURI` returnerar den ursprungliga URI som skickades till den `Load` metoden.</xref:System.Xml.XmlDocument.Load%2A>       Den här egenskapen är ett Microsoft-tillägg för den modell DOM (Document Object). Mer information om `BaseURI` och hur den fungerar med andra nodtyper finns <xref:System.Xml.XmlNode.BaseURI%2A?displayProperty=fullName>.</xref:System.Xml.XmlNode.BaseURI%2A?displayProperty=fullName>"
  syntax:
    content: public override string BaseURI { get; }
    return:
      type: System.String
      description: "Den plats där noden lästes in."
  overload: System.Xml.XmlDocument.BaseURI*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlDocument.CloneNode(System.Boolean)
  id: CloneNode(System.Boolean)
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: CloneNode(Boolean)
  nameWithType: XmlDocument.CloneNode(Boolean)
  fullName: System.Xml.XmlDocument.CloneNode(Boolean)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Skapar en dubblett av den här noden."
  remarks: "Den här metoden fungerar som en kopia konstruktor för noder. Den klonade noden har ingen överordnad (<xref:System.Xml.XmlNode.ParentNode%2A> returnerar `null`).</xref:System.Xml.XmlNode.ParentNode%2A>       Om `deep` är `true`, den klonade noden alla underordnade noder, annars endast tar den `XmlDocument` nod klonas. Finns det <xref:System.Xml.XmlNode.CloneNode%2A?displayProperty=fullName>metod för att se hur den här metoden fungerar på andra nodtyper.</xref:System.Xml.XmlNode.CloneNode%2A?displayProperty=fullName>"
  example:
  - "The following example shows the difference between a deep and shallow clone.  \n  \n [!code-cpp[Classic WebData XmlDocument.CloneNode Example#1](~/add/codesnippet/cpp/m-system.xml.xmldocument_13_1.cpp)]\n [!code-cs[Classic WebData XmlDocument.CloneNode Example#1](~/add/codesnippet/csharp/m-system.xml.xmldocument_13_1.cs)]\n [!code-vb[Classic WebData XmlDocument.CloneNode Example#1](~/add/codesnippet/visualbasic/m-system.xml.xmldocument_13_1.vb)]"
  syntax:
    content: public override System.Xml.XmlNode CloneNode (bool deep);
    parameters:
    - id: deep
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Klona till rekursivt underträdet under den angivna noden; <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> att klona noden sig själv."
    return:
      type: System.Xml.XmlNode
      description: "Den klonade <xref uid=&quot;langword_csharp_XmlDocument&quot; name=&quot;XmlDocument&quot; href=&quot;&quot;> </xref> nod."
  overload: System.Xml.XmlDocument.CloneNode*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlDocument.CreateAttribute(System.String)
  id: CreateAttribute(System.String)
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: CreateAttribute(String)
  nameWithType: XmlDocument.CreateAttribute(String)
  fullName: System.Xml.XmlDocument.CreateAttribute(String)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Skapar en <xref href=&quot;System.Xml.XmlAttribute&quot;> </xref> med angivna <xref:System.Xml.XmlDocument.Name*>.</xref:System.Xml.XmlDocument.Name*>"
  remarks: "Den `XmlAttribute` kan läggas till en <xref:System.Xml.XmlElement>med hjälp av den <xref:System.Xml.XmlElement.SetAttributeNode%2A>metoden.</xref:System.Xml.XmlElement.SetAttributeNode%2A> </xref:System.Xml.XmlElement>"
  example:
  - "The following creates an attribute and adds it to an XML document.  \n  \n [!code-cs[Classic WebData XmlDocument.CreateAttribute Example#1](~/add/codesnippet/csharp/m-system.xml.xmldocument_1_1.cs)]\n [!code-cpp[Classic WebData XmlDocument.CreateAttribute Example#1](~/add/codesnippet/cpp/m-system.xml.xmldocument_1_1.cpp)]\n [!code-vb[Classic WebData XmlDocument.CreateAttribute Example#1](~/add/codesnippet/visualbasic/m-system.xml.xmldocument_1_1.vb)]"
  syntax:
    content: public System.Xml.XmlAttribute CreateAttribute (string name);
    parameters:
    - id: name
      type: System.String
      description: "Det kvalificerade namnet på attributet. Om namnet innehåller ett kolon i <> </> *> egenskapen visar del av namnet före det första kolonet och <> </> *> egenskapen visar del av namn efter första kolon. Den <xref:System.Xml.XmlNode.NamespaceURI*>förblir tomt om prefixet som är ett känt inbyggda prefix, till exempel xmlns.</xref:System.Xml.XmlNode.NamespaceURI*> I det här fallet <xref uid=&quot;langword_csharp_NamespaceURI&quot; name=&quot;NamespaceURI&quot; href=&quot;&quot;> </xref> har värdet http://www.w3.org/2000/xmlns/."
    return:
      type: System.Xml.XmlAttribute
      description: "The new <xref uid=&quot;langword_csharp_XmlAttribute&quot; name=&quot;XmlAttribute&quot; href=&quot;&quot;></xref>."
  overload: System.Xml.XmlDocument.CreateAttribute*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlDocument.CreateAttribute(System.String,System.String)
  id: CreateAttribute(System.String,System.String)
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: CreateAttribute(String,String)
  nameWithType: XmlDocument.CreateAttribute(String,String)
  fullName: System.Xml.XmlDocument.CreateAttribute(String,String)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Skapar en <xref href=&quot;System.Xml.XmlAttribute&quot;> </xref> med det angivna kvalificerade namn och <xref:System.Xml.XmlNode.NamespaceURI*>.</xref:System.Xml.XmlNode.NamespaceURI*>"
  remarks: "Den `XmlAttribute` kan läggas till en <xref:System.Xml.XmlElement>med hjälp av den <xref:System.Xml.XmlElement.SetAttributeNode%2A>metoden.</xref:System.Xml.XmlElement.SetAttributeNode%2A> </xref:System.Xml.XmlElement>"
  syntax:
    content: public System.Xml.XmlAttribute CreateAttribute (string qualifiedName, string namespaceURI);
    parameters:
    - id: qualifiedName
      type: System.String
      description: "Det kvalificerade namnet på attributet. Om namnet innehåller ett kolon och sedan den <> </> *> egenskapen kommer att användas i en del av namnet före kolon och <> </> *> egenskapen motsvarar del av namnet efter kolon."
    - id: namespaceURI
      type: System.String
      description: "NamespaceURI för attributet. Om det kvalificerade namnet innehåller ett xmlns-prefix kan måste den här parametern vara http://www.w3.org/2000/xmlns/."
    return:
      type: System.Xml.XmlAttribute
      description: "The new <xref uid=&quot;langword_csharp_XmlAttribute&quot; name=&quot;XmlAttribute&quot; href=&quot;&quot;></xref>."
  overload: System.Xml.XmlDocument.CreateAttribute*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlDocument.CreateAttribute(System.String,System.String,System.String)
  id: CreateAttribute(System.String,System.String,System.String)
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: CreateAttribute(String,String,String)
  nameWithType: XmlDocument.CreateAttribute(String,String,String)
  fullName: System.Xml.XmlDocument.CreateAttribute(String,String,String)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Skapar en <xref href=&quot;System.Xml.XmlAttribute&quot;> </xref> med det angivna <> </> *>, <> </> *>, och <xref:System.Xml.XmlNode.NamespaceURI*>.</xref:System.Xml.XmlNode.NamespaceURI*>"
  remarks: "Den `XmlAttribute` kan läggas till en <xref:System.Xml.XmlElement>med hjälp av den <xref:System.Xml.XmlElement.SetAttributeNode%2A>metoden.</xref:System.Xml.XmlElement.SetAttributeNode%2A> </xref:System.Xml.XmlElement>       Den här metoden är ett Microsoft-tillägg för den modell DOM (Document Object)."
  syntax:
    content: public virtual System.Xml.XmlAttribute CreateAttribute (string prefix, string localName, string namespaceURI);
    parameters:
    - id: prefix
      type: System.String
      description: "Prefix för attributet (om sådan finns). String.Empty och <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> är likvärdiga."
    - id: localName
      type: System.String
      description: "Det lokala namnet på attributet."
    - id: namespaceURI
      type: System.String
      description: "Namnområdes-URI för attributet (om sådan finns). String.Empty och <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> är likvärdiga. Om `prefix` är xmlns, den här parametern måste vara http://www.w3.org/2000/xmlns/; annars genereras ett undantag."
    return:
      type: System.Xml.XmlAttribute
      description: "The new <xref uid=&quot;langword_csharp_XmlAttribute&quot; name=&quot;XmlAttribute&quot; href=&quot;&quot;></xref>."
  overload: System.Xml.XmlDocument.CreateAttribute*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlDocument.CreateCDataSection(System.String)
  id: CreateCDataSection(System.String)
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: CreateCDataSection(String)
  nameWithType: XmlDocument.CreateCDataSection(String)
  fullName: System.Xml.XmlDocument.CreateCDataSection(String)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Skapar en <xref href=&quot;System.Xml.XmlCDataSection&quot;> </xref> som innehåller de angivna data."
  remarks: "Även om den här metoden skapar det nya objektet i kontexten för dokumentet, läggs det inte automatiskt det nya objektet till dokumentträdet. Om du vill lägga till nya objekt, måste du uttryckligen anropa en av noden insert-metoder.       Enligt rekommendation W3C Extensible Markup Language (XML) 1.0 (www.w3.org/TR/1998/REC-xml-19980210) tillåts CDataSection noder i elementnoder och EntityReference noder när noden EntityReference inte är underordnad en attributnod."
  example:
  - "The following example creates a CDATA node and adds it to the document.  \n  \n [!code-vb[Classic WebData XmlDocument.CreateCDataSection Example#1](~/add/codesnippet/visualbasic/m-system.xml.xmldocument_9_1.vb)]\n [!code-cpp[Classic WebData XmlDocument.CreateCDataSection Example#1](~/add/codesnippet/cpp/m-system.xml.xmldocument_9_1.cpp)]\n [!code-cs[Classic WebData XmlDocument.CreateCDataSection Example#1](~/add/codesnippet/csharp/m-system.xml.xmldocument_9_1.cs)]"
  syntax:
    content: public virtual System.Xml.XmlCDataSection CreateCDataSection (string data);
    parameters:
    - id: data
      type: System.String
      description: "Innehållet i den nya <xref uid=&quot;langword_csharp_XmlCDataSection&quot; name=&quot;XmlCDataSection&quot; href=&quot;&quot;> </xref>."
    return:
      type: System.Xml.XmlCDataSection
      description: "The new <xref uid=&quot;langword_csharp_XmlCDataSection&quot; name=&quot;XmlCDataSection&quot; href=&quot;&quot;></xref>."
  overload: System.Xml.XmlDocument.CreateCDataSection*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlDocument.CreateComment(System.String)
  id: CreateComment(System.String)
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: CreateComment(String)
  nameWithType: XmlDocument.CreateComment(String)
  fullName: System.Xml.XmlDocument.CreateComment(String)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Skapar en <xref href=&quot;System.Xml.XmlComment&quot;> </xref> som innehåller de angivna data."
  remarks: "Även om den här metoden skapar det nya objektet i kontexten för dokumentet, läggs det inte automatiskt det nya objektet till dokumentträdet. Om du vill lägga till nya objekt, måste du uttryckligen anropa en av noden insert-metoder.       Enligt rekommendation W3C Extensible Markup Language (XML) 1.0 (www.w3.org/TR/1998/REC-xml-19980210) tillåts endast Kommentarsnoder i dokumentet, Element och EntityReference noder när noden EntityReference inte är en underordnad till en attributnod."
  example:
  - "The following example creates a comment and adds it to an XML document.  \n  \n [!code-cs[Classic WebData XmlDocument.CreateComment Example#1](~/add/codesnippet/csharp/m-system.xml.xmldocument_12_1.cs)]\n [!code-vb[Classic WebData XmlDocument.CreateComment Example#1](~/add/codesnippet/visualbasic/m-system.xml.xmldocument_12_1.vb)]\n [!code-cpp[Classic WebData XmlDocument.CreateComment Example#1](~/add/codesnippet/cpp/m-system.xml.xmldocument_12_1.cpp)]"
  syntax:
    content: public virtual System.Xml.XmlComment CreateComment (string data);
    parameters:
    - id: data
      type: System.String
      description: "Innehållet i den nya <xref uid=&quot;langword_csharp_XmlComment&quot; name=&quot;XmlComment&quot; href=&quot;&quot;> </xref>."
    return:
      type: System.Xml.XmlComment
      description: "The new <xref uid=&quot;langword_csharp_XmlComment&quot; name=&quot;XmlComment&quot; href=&quot;&quot;></xref>."
  overload: System.Xml.XmlDocument.CreateComment*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlDocument.CreateDefaultAttribute(System.String,System.String,System.String)
  id: CreateDefaultAttribute(System.String,System.String,System.String)
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: CreateDefaultAttribute(String,String,String)
  nameWithType: XmlDocument.CreateDefaultAttribute(String,String,String)
  fullName: System.Xml.XmlDocument.CreateDefaultAttribute(String,String,String)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Skapar en standardattribut med det angivna prefixet, lokala namnet och namnområdes-URI."
  remarks: "Den här metoden är ett Microsoft-tillägg för den modell DOM (Document Object)."
  syntax:
    content: protected virtual System.Xml.XmlAttribute CreateDefaultAttribute (string prefix, string localName, string namespaceURI);
    parameters:
    - id: prefix
      type: System.String
      description: "Prefix för attributet (om sådan finns)."
    - id: localName
      type: System.String
      description: "Det lokala namnet på attributet."
    - id: namespaceURI
      type: System.String
      description: "Namnområdes-URI för attributet (om sådan finns)."
    return:
      type: System.Xml.XmlAttribute
      description: "The new <xref href=&quot;System.Xml.XmlAttribute&quot;></xref>."
  overload: System.Xml.XmlDocument.CreateDefaultAttribute*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlDocument.CreateDocumentFragment
  id: CreateDocumentFragment
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: CreateDocumentFragment()
  nameWithType: XmlDocument.CreateDocumentFragment()
  fullName: System.Xml.XmlDocument.CreateDocumentFragment()
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Skapar en <xref href=&quot;System.Xml.XmlDocumentFragment&quot;> </xref>."
  remarks: "DocumentFragment noder kan inte infogas i ett dokument. Du kan dock Infoga underordnade för noden DocumentFragment i ett dokument."
  example:
  - "The following example adds new nodes to an XML document.  \n  \n [!code-cpp[Classic WebData XmlDocument.CreateDocumentFragment Example#1](~/add/codesnippet/cpp/m-system.xml.xmldocument_14_1.cpp)]\n [!code-vb[Classic WebData XmlDocument.CreateDocumentFragment Example#1](~/add/codesnippet/visualbasic/m-system.xml.xmldocument_14_1.vb)]\n [!code-cs[Classic WebData XmlDocument.CreateDocumentFragment Example#1](~/add/codesnippet/csharp/m-system.xml.xmldocument_14_1.cs)]"
  syntax:
    content: public virtual System.Xml.XmlDocumentFragment CreateDocumentFragment ();
    parameters: []
    return:
      type: System.Xml.XmlDocumentFragment
      description: "The new <xref uid=&quot;langword_csharp_XmlDocumentFragment&quot; name=&quot;XmlDocumentFragment&quot; href=&quot;&quot;></xref>."
  overload: System.Xml.XmlDocument.CreateDocumentFragment*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlDocument.CreateDocumentType(System.String,System.String,System.String,System.String)
  id: CreateDocumentType(System.String,System.String,System.String,System.String)
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: CreateDocumentType(String,String,String,String)
  nameWithType: XmlDocument.CreateDocumentType(String,String,String,String)
  fullName: System.Xml.XmlDocument.CreateDocumentType(String,String,String,String)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Returnerar en ny <xref href=&quot;System.Xml.XmlDocumentType&quot;> </xref> objekt."
  remarks: "Noden returnerade ska ha parsas <xref:System.Xml.XmlDocumentType.Entities%2A>och <xref:System.Xml.XmlDocumentType.Notations%2A>samlingar.</xref:System.Xml.XmlDocumentType.Notations%2A> </xref:System.Xml.XmlDocumentType.Entities%2A>       Även om den här metoden skapar det nya objektet i kontexten för dokumentet, läggs det inte automatiskt det nya objektet till dokumentträdet. Om du vill lägga till nya objekt, måste du uttryckligen anropa en av noden insert-metoder.       Enligt rekommendation W3C Extensible Markup Language (XML) 1.0 (www.w3.org/TR/1998/REC-xml-19980210) tillåts DocumentType noder endast i dokumentet noder. Varje <xref:System.Xml.XmlDocument>kan ha endast en nod i DocumentType.</xref:System.Xml.XmlDocument> Noden DocumentType måste också läggas till före rotelementet för den `XmlDocument` (om dokumentet har redan ett rotelement, du kan inte lägga till en DocumentType nod).       Om inte du att kombinera skickade parametrar för att skapa en giltig `XmlDocumentType`, genereras ett undantag."
  example:
  - "The following example creates a DocumentType node and adds it to an XML document.  \n  \n [!code-cpp[Classic WebData XmlDocument.CreateDocumentType Example#1](~/add/codesnippet/cpp/8d2758e1-ca32-4a6b-b7e7-_1.cpp)]\n [!code-cs[Classic WebData XmlDocument.CreateDocumentType Example#1](~/add/codesnippet/csharp/8d2758e1-ca32-4a6b-b7e7-_1.cs)]\n [!code-vb[Classic WebData XmlDocument.CreateDocumentType Example#1](~/add/codesnippet/visualbasic/8d2758e1-ca32-4a6b-b7e7-_1.vb)]"
  syntax:
    content: public virtual System.Xml.XmlDocumentType CreateDocumentType (string name, string publicId, string systemId, string internalSubset);
    parameters:
    - id: name
      type: System.String
      description: "Namnet på dokumenttypen."
    - id: publicId
      type: System.String
      description: "Dokumenttypen offentlig identifierare eller <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>. Du kan ange en offentlig URI och även en system-ID för att identifiera platsen för den externa DTD-delmängden."
    - id: systemId
      type: System.String
      description: "Dokumenttypen systemidentifierare eller <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>. Anger Webbadressen till filplatsen för den externa DTD-delmängden."
    - id: internalSubset
      type: System.String
      description: "Den interna DTD-delmängden av dokumenttypen eller <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
    return:
      type: System.Xml.XmlDocumentType
      description: "The new <xref uid=&quot;langword_csharp_XmlDocumentType&quot; name=&quot;XmlDocumentType&quot; href=&quot;&quot;></xref>."
  overload: System.Xml.XmlDocument.CreateDocumentType*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlDocument.CreateElement(System.String)
  id: CreateElement(System.String)
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: CreateElement(String)
  nameWithType: XmlDocument.CreateElement(String)
  fullName: System.Xml.XmlDocument.CreateElement(String)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Skapar ett element med det angivna namnet."
  remarks: "Observera att instansen returnerade implementerar den `XmlElement` gränssnitt, så standardattribut skapas direkt på det returnerade objektet.       Även om den här metoden skapar det nya objektet i kontexten för dokumentet, läggs det inte automatiskt det nya objektet till dokumentträdet. Om du vill lägga till nya objekt, måste du uttryckligen anropa en av noden insert-metoder.       Enligt rekommendation W3C Extensible Markup Language (XML) 1.0 (www.w3.org/TR/1998/REC-xml-19980210) är elementnoder tillåtna i dokumentet och Element-noder och EntityReference noder när noden EntityReference inte är en underordnad till en attributnod."
  example:
  - "The following example creates a new element and adds it to the document.  \n  \n [!code-cpp[Classic WebData XmlDocument.CreateElement Example#1](~/add/codesnippet/cpp/m-system.xml.xmldocument_17_1.cpp)]\n [!code-cs[Classic WebData XmlDocument.CreateElement Example#1](~/add/codesnippet/csharp/m-system.xml.xmldocument_17_1.cs)]\n [!code-vb[Classic WebData XmlDocument.CreateElement Example#1](~/add/codesnippet/visualbasic/m-system.xml.xmldocument_17_1.vb)]"
  syntax:
    content: public System.Xml.XmlElement CreateElement (string name);
    parameters:
    - id: name
      type: System.String
      description: "Det kvalificerade namnet för elementet. Om namnet innehåller ett kolon och sedan den <> </> *> egenskapen visar del av namnet före kolon och <> </> *> egenskapen visar del av namnet efter kolon. Det kvalificerade namnet får inte innehålla ett prefix of&quot;xmlns."
    return:
      type: System.Xml.XmlElement
      description: "The new <xref uid=&quot;langword_csharp_XmlElement&quot; name=&quot;XmlElement&quot; href=&quot;&quot;></xref>."
  overload: System.Xml.XmlDocument.CreateElement*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlDocument.CreateElement(System.String,System.String)
  id: CreateElement(System.String,System.String)
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: CreateElement(String,String)
  nameWithType: XmlDocument.CreateElement(String,String)
  fullName: System.Xml.XmlDocument.CreateElement(String,String)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Skapar en <xref href=&quot;System.Xml.XmlElement&quot;> </xref> med det kvalificerade namnet och <xref:System.Xml.XmlNode.NamespaceURI*>.</xref:System.Xml.XmlNode.NamespaceURI*>"
  remarks: "Följande C#-kod ```   XmlElement elem;   elem=doc.CreateElement(&quot;xy:item&quot;, &quot;urn:abc&quot;);   ``` resulterar i ett element som motsvarar följande XML-texten.      ```   <xy:item          xmlns:xy=&quot;urn:abc&quot;/>   ```Även om den här metoden skapar det nya objektet i kontexten för dokumentet, den lägger inte automatiskt till det nya objektet till dokumentträdet. Om du vill lägga till nya objekt, måste du uttryckligen anropa en av noden insert-metoder.       Enligt rekommendation W3C Extensible Markup Language (XML) 1.0 (www.w3.org/TR/1998/REC-xml-19980210) är elementnoder tillåtna i dokumentet och Element-noder och EntityReference noder när noden EntityReference inte är en underordnad till en attributnod."
  syntax:
    content: public System.Xml.XmlElement CreateElement (string qualifiedName, string namespaceURI);
    parameters:
    - id: qualifiedName
      type: System.String
      description: "Det kvalificerade namnet för elementet. Om namnet innehåller ett kolon och sedan den <> </> *> egenskapen kommer att användas i en del av namnet före kolon och <> </> *> egenskapen motsvarar del av namnet efter kolon. Det kvalificerade namnet får inte innehålla ett prefix of&quot;xmlns."
    - id: namespaceURI
      type: System.String
      description: "Namnområdes-URI för elementet."
    return:
      type: System.Xml.XmlElement
      description: "The new <xref uid=&quot;langword_csharp_XmlElement&quot; name=&quot;XmlElement&quot; href=&quot;&quot;></xref>."
  overload: System.Xml.XmlDocument.CreateElement*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlDocument.CreateElement(System.String,System.String,System.String)
  id: CreateElement(System.String,System.String,System.String)
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: CreateElement(String,String,String)
  nameWithType: XmlDocument.CreateElement(String,String,String)
  fullName: System.Xml.XmlDocument.CreateElement(String,String,String)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Skapar ett element med det angivna <> </> *>, <> </> *>, och <xref:System.Xml.XmlNode.NamespaceURI*>.</xref:System.Xml.XmlNode.NamespaceURI*>"
  remarks: "Följande C#-kod ```   XmlElement elem;   elem=doc.CreateElement(&quot;xy&quot;, &quot;item&quot;, &quot;urn:abc&quot;);   ``` skapar ett element som motsvarar följande XML-texten: ```   <xy:item xmlns:xy=&quot;urn:abc&quot;/>   ``` även om den här metoden skapar det nya objektet i kontexten för dokumentet, lägger inte automatiskt till det nya objektet till dokumentträdet. Om du vill lägga till nya objekt, måste du uttryckligen anropa en av noden insert-metoder.       Enligt rekommendation W3C Extensible Markup Language (XML) 1.0 (www.w3.org/TR/1998/REC-xml-19980210) är elementnoder tillåtna i dokumentet och Element-noder och EntityReference noder när EntityReference är utanför en attributnod.       Den här metoden är ett Microsoft-tillägg för den modell DOM (Document Object)."
  example:
  - "The following example adds a new element to the existing XML document.  \n  \n [!code-cs[Classic WebData XmlDocument.CreateElement2 Example#1](~/add/codesnippet/csharp/9cc675fc-f986-4de5-bce9-_1.cs)]\n [!code-vb[Classic WebData XmlDocument.CreateElement2 Example#1](~/add/codesnippet/visualbasic/9cc675fc-f986-4de5-bce9-_1.vb)]\n [!code-cpp[Classic WebData XmlDocument.CreateElement2 Example#1](~/add/codesnippet/cpp/9cc675fc-f986-4de5-bce9-_1.cpp)]"
  syntax:
    content: public virtual System.Xml.XmlElement CreateElement (string prefix, string localName, string namespaceURI);
    parameters:
    - id: prefix
      type: System.String
      description: "Prefix för det nya elementet (eventuella). String.Empty och <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> är likvärdiga."
    - id: localName
      type: System.String
      description: "Det lokala namnet på det nya elementet."
    - id: namespaceURI
      type: System.String
      description: "Namnområdes-URI för det nya elementet (eventuella). String.Empty och <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> är likvärdiga."
    return:
      type: System.Xml.XmlElement
      description: "The new <xref href=&quot;System.Xml.XmlElement&quot;></xref>."
  overload: System.Xml.XmlDocument.CreateElement*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlDocument.CreateEntityReference(System.String)
  id: CreateEntityReference(System.String)
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: CreateEntityReference(String)
  nameWithType: XmlDocument.CreateEntityReference(String)
  fullName: System.Xml.XmlDocument.CreateEntityReference(String)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Skapar en <xref href=&quot;System.Xml.XmlEntityReference&quot;> </xref> med det angivna namnet."
  remarks: "Om den refererade entiteten är känt underordnad lista över de `XmlEntityReference` nod görs samma som för motsvarande <xref:System.Xml.XmlEntity>nod.</xref:System.Xml.XmlEntity>       De namnområden som används i ersättningstexten för entitetsreferensen bunden vid den tidpunkt som överordnat entiteten Referensnoden först ställa in (till exempel när entiteten Referensnoden infogas i dokumentet). Till exempel få följande enhet: ```   <!ENTITY a &quot;<b>test</b>&quot;>   ``` om du anropar `CreateEntityReference(&quot;a&quot;)` du vill få tillbaka en nod av typen EntityReference som saknar underordnade. Om du lägger till den här noden som underordnad till följande nod ```   <item xmlns=&quot;urn:1&quot;/>   ``` sedan, när du anropar <xref:System.Xml.XmlNode.AppendChild%2A>, överordnad Referensnoden nyligen skapade entiteten har angetts och underordnade expanderas i den här kontexten för namnområdet.</xref:System.Xml.XmlNode.AppendChild%2A> Den underordnade element noden `b` har NamespaceURI som är lika med `urn:1`. Underordnade noder för entitetsreferensen ändras inte även om du flyttar Entitetsreferens till en plats i dokumentet som har en annan standard namnområde kontext. Detta sker inte för befintliga entiteten referens noderna när du tar bort och infoga dem eller entitetsreferenser du klona med <xref:System.Xml.XmlDocument.CloneNode%2A>.</xref:System.Xml.XmlDocument.CloneNode%2A> Det sker endast för nyskapade entitetsreferenser.       Om motsvarande entitet inte har definierats i DocumentType när entiteten Referensnoden läggs eftersom entitetsreferensen inte har definierats, att dess endast underordnad nod vara en tom textnod.       Inbyggda enheter amp, lt, gt, apos och quot kan också och de har en underordnad nod för text med utökade tecken-värde.       Även om den här metoden skapar det nya objektet i kontexten för dokumentet, läggs det inte automatiskt det nya objektet till dokumentträdet. Om du vill lägga till nya objekt, måste du uttryckligen anropa en av noden insert-metoder.       Enligt rekommendation W3C Extensible Markup Language (XML) 1.0 (www.w3.org/TR/1998/REC-xml-19980210) tillåts endast EntityReference noder i Element, attribut och EntityReference noder."
  example:
  - "The following example creates two entity reference nodes and inserts them into an XML document.  \n  \n [!code-cpp[Classic WebData XmlDocument.CreateEntityReference Example#1](~/add/codesnippet/cpp/m-system.xml.xmldocument_7_1.cpp)]\n [!code-cs[Classic WebData XmlDocument.CreateEntityReference Example#1](~/add/codesnippet/csharp/m-system.xml.xmldocument_7_1.cs)]\n [!code-vb[Classic WebData XmlDocument.CreateEntityReference Example#1](~/add/codesnippet/visualbasic/m-system.xml.xmldocument_7_1.vb)]"
  syntax:
    content: public virtual System.Xml.XmlEntityReference CreateEntityReference (string name);
    parameters:
    - id: name
      type: System.String
      description: "Namnet på entitetsreferensen."
    return:
      type: System.Xml.XmlEntityReference
      description: "The new <xref uid=&quot;langword_csharp_XmlEntityReference&quot; name=&quot;XmlEntityReference&quot; href=&quot;&quot;></xref>."
  overload: System.Xml.XmlDocument.CreateEntityReference*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Namnet är ogiltigt (till exempel namn som börjar med &quot;#&quot; är ogiltig.)"
  platform:
  - net462
- uid: System.Xml.XmlDocument.CreateNavigator
  id: CreateNavigator
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: CreateNavigator()
  nameWithType: XmlDocument.CreateNavigator()
  fullName: System.Xml.XmlDocument.CreateNavigator()
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Skapar en ny <xref href=&quot;System.Xml.XPath.XPathNavigator&quot;> </xref> objekt för att navigera på det här dokumentet."
  remarks: "Den här metoden är ett Microsoft-tillägg för den modell DOM (Document Object)."
  example:
  - See <xref:System.Xml.XmlNode.CreateNavigator%2A?displayProperty=fullName> for an example using this method.
  syntax:
    content: public override System.Xml.XPath.XPathNavigator CreateNavigator ();
    parameters: []
    return:
      type: System.Xml.XPath.XPathNavigator
      description: "En <xref href=&quot;System.Xml.XPath.XPathNavigator&quot;> </xref> objekt."
  overload: System.Xml.XmlDocument.CreateNavigator*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlDocument.CreateNavigator(System.Xml.XmlNode)
  id: CreateNavigator(System.Xml.XmlNode)
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: CreateNavigator(XmlNode)
  nameWithType: XmlDocument.CreateNavigator(XmlNode)
  fullName: System.Xml.XmlDocument.CreateNavigator(XmlNode)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Skapar en <xref href=&quot;System.Xml.XPath.XPathNavigator&quot;> </xref> objekt för att navigera på det här dokumentet placerad i den <xref href=&quot;System.Xml.XmlNode&quot;> </xref> angivna."
  remarks: "Den här metoden är ett Microsoft-tillägg för den modell DOM (Document Object)."
  example:
  - See <xref:System.Xml.XmlNode.CreateNavigator%2A?displayProperty=fullName> for an example using this method.
  syntax:
    content: protected virtual System.Xml.XPath.XPathNavigator CreateNavigator (System.Xml.XmlNode node);
    parameters:
    - id: node
      type: System.Xml.XmlNode
      description: "Den <xref href=&quot;System.Xml.XmlNode&quot;> </xref> du vill Navigatören resultatuppsättningsmarkör placeras på."
    return:
      type: System.Xml.XPath.XPathNavigator
      description: "En <xref href=&quot;System.Xml.XPath.XPathNavigator&quot;> </xref> objekt."
  overload: System.Xml.XmlDocument.CreateNavigator*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlDocument.CreateNode(System.String,System.String,System.String)
  id: CreateNode(System.String,System.String,System.String)
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: CreateNode(String,String,String)
  nameWithType: XmlDocument.CreateNode(String,String,String)
  fullName: System.Xml.XmlDocument.CreateNode(String,String,String)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Skapar en <xref href=&quot;System.Xml.XmlNode&quot;> </xref> med den angivna nodtypen <> </> *>, och <> </> *>."
  remarks: "The `nodeTypeString` parameter is case sensitive and must be one of the values in the following table.  \n  \n|nodeTypeString|XmlNodeType|  \n|--------------------|-----------------|  \n|attribute|Attribute|  \n|cdatasection|CDATA|  \n|comment|Comment|  \n|document|Document|  \n|documentfragment|DocumentFragment|  \n|documenttype|DocumentType|  \n|element|Element|  \n|entityreference|EntityReference|  \n|processinginstruction|ProcessingInstruction|  \n|significantwhitespace|SignificantWhitespace|  \n|text|Text|  \n|whitespace|Whitespace|  \n  \n Although this method creates the new object in the context of the document, it does not automatically add the new object to the document tree. To add the new object, you must explicitly call one of the node insert methods.  \n  \n The following table shows you what NodeType[row] is allowed inside another NodeType[column] according to the W3C Extensible Markup Language (XML) 1.0 recommendation (www.w3.org/TR/1998/REC-xml-19980210).  \n  \n||Document|DocumentType|XmlDeclaration|Element|Attribute|Text|CDATA|Markup|EntityReference|  \n|------|--------------|------------------|--------------------|-------------|---------------|----------|-----------|------------|---------------------|  \n|`Document`|no|no|no|no|no|no|no|no|no|  \n|`DocumentType`|yes|no|no|no|no|no|no|no|no|  \n|`XmlDeclaration`|yes*|no|no|no|no|no|no|no|no|  \n|`Element`|yes|no|no|yes|no|no|no|no|yes***|  \n|`Attribute`|no|no|no|yes****|no|no|no|no|no|  \n|`Text`|no|no|no|yes|yes|no|no|no|yes|  \n|`CDATA`|no|no|no|yes|no|no|no|no|yes***|  \n|`Markup**`|yes|no|no|yes|no|no|no|no|no|  \n|`EntityReference`|no|no|no|yes|yes|no|no|no|yes|  \n  \n \\* The XmlDeclaration node must be the first child of the Document node.  \n  \n ** Markup includes ProcessingInstruction and Comment nodes.  \n  \n *** Element and CDATA nodes are only allowed in EntityReference nodes when the EntityReference node is not a child of an Attribute node.  \n  \n **** Attributes are not children of an Element node. Attributes are contained inside an attribute collection that belongs to an Element node.  \n  \n This method is a Microsoft extension to the Document Object Model (DOM)."
  example:
  - "The following example creates a new element and inserts it into the document.  \n  \n [!code-cpp[Classic WebData XmlDocument.CreateNode1 Example#1](~/add/codesnippet/cpp/m-system.xml.xmldocument_15_1.cpp)]\n [!code-vb[Classic WebData XmlDocument.CreateNode1 Example#1](~/add/codesnippet/visualbasic/m-system.xml.xmldocument_15_1.vb)]\n [!code-cs[Classic WebData XmlDocument.CreateNode1 Example#1](~/add/codesnippet/csharp/m-system.xml.xmldocument_15_1.cs)]"
  syntax:
    content: public virtual System.Xml.XmlNode CreateNode (string nodeTypeString, string name, string namespaceURI);
    parameters:
    - id: nodeTypeString
      type: System.String
      description: "Strängversionen av den <xref:System.Xml.XmlNodeType>för den nya noden.</xref:System.Xml.XmlNodeType> Den här parametern måste vara något av de värden som anges i tabellen nedan."
    - id: name
      type: System.String
      description: "Det kvalificerade namnet på den nya noden. Om namnet innehåller ett kolon kan tolkas i <> </> *> och <> </> *> komponenter."
    - id: namespaceURI
      type: System.String
      description: "Namnområdes-URI för den nya noden."
    return:
      type: System.Xml.XmlNode
      description: "The new <xref uid=&quot;langword_csharp_XmlNode&quot; name=&quot;XmlNode&quot; href=&quot;&quot;></xref>."
  overload: System.Xml.XmlDocument.CreateNode*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Namnet har inte angetts och <xref uid=&quot;langword_csharp_XmlNodeType&quot; name=&quot;XmlNodeType&quot; href=&quot;&quot;> </xref> måste ange ett namn, eller <code> nodeTypeString </code> är inte en av de strängar som anges nedan."
  platform:
  - net462
- uid: System.Xml.XmlDocument.CreateNode(System.Xml.XmlNodeType,System.String,System.String)
  id: CreateNode(System.Xml.XmlNodeType,System.String,System.String)
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: CreateNode(XmlNodeType,String,String)
  nameWithType: XmlDocument.CreateNode(XmlNodeType,String,String)
  fullName: System.Xml.XmlDocument.CreateNode(XmlNodeType,String,String)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Skapar en <xref href=&quot;System.Xml.XmlNode&quot;> </xref> med det angivna <xref:System.Xml.XmlNodeType>, <> </> *>, och <> </> *>.</xref:System.Xml.XmlNodeType>"
  remarks: "Although this method creates the new object in the context of the document, it does not automatically add the new object to the document tree. To add the new object, you must explicitly call one of the node insert methods.  \n  \n The following table shows you what NodeType[row] is allowed inside another NodeType[column] according to the W3C Extensible Markup Language (XML) 1.0 recommendation (www.w3.org/TR/1998/REC-xml-19980210).  \n  \n||Document|DocumentType|XmlDeclaration|Element|Attribute|Text|CDATA|Markup|EntityReference|  \n|------|--------------|------------------|--------------------|-------------|---------------|----------|-----------|------------|---------------------|  \n|`Document`|no|no|no|no|no|no|no|no|no|  \n|`DocumentType`|yes|no|no|no|no|no|no|no|no|  \n|`XmlDeclaration`|yes*|no|no|no|no|no|no|no|no|  \n|`Element`|yes|no|no|yes|no|no|no|no|yes***|  \n|`Attribute`|no|no|no|yes****|no|no|no|no|no|  \n|`Text`|no|no|no|yes|yes|no|no|no|yes|  \n|`CDATA`|no|no|no|yes|no|no|no|no|yes***|  \n|`Markup**`|yes|no|no|yes|no|no|no|no|no|  \n|`EntityReference`|no|no|no|yes|yes|no|no|no|yes|  \n  \n \\* The XmlDeclaration node must be the first child of the Document node.  \n  \n ** Markup includes ProcessingInstruction and Comment nodes.  \n  \n *** Element and CDATA nodes are only allowed in EntityReference nodes when the EntityReference node is not a child of an Attribute node.  \n  \n **** Attributes are not children of an Element node. Attributes are contained inside an attribute collection that belongs to an Element node.  \n  \n This method is a Microsoft extension to the Document Object Model (DOM)."
  example:
  - "The following example creates a new element and inserts it into an XML document.  \n  \n [!code-cs[Classic WebData XmlDocument.CreateNode Example#1](~/add/codesnippet/csharp/5e223793-7104-464b-b797-_1.cs)]\n [!code-cpp[Classic WebData XmlDocument.CreateNode Example#1](~/add/codesnippet/cpp/5e223793-7104-464b-b797-_1.cpp)]\n [!code-vb[Classic WebData XmlDocument.CreateNode Example#1](~/add/codesnippet/visualbasic/5e223793-7104-464b-b797-_1.vb)]"
  syntax:
    content: public virtual System.Xml.XmlNode CreateNode (System.Xml.XmlNodeType type, string name, string namespaceURI);
    parameters:
    - id: type
      type: System.Xml.XmlNodeType
      description: "Den <xref uid=&quot;langword_csharp_XmlNodeType&quot; name=&quot;XmlNodeType&quot; href=&quot;&quot;> </xref> av den nya noden."
    - id: name
      type: System.String
      description: "Det kvalificerade namnet på den nya noden. Om namnet innehåller ett kolon och sedan tolkas i <> </> *> och <> </> *> komponenter."
    - id: namespaceURI
      type: System.String
      description: "Namnområdes-URI för den nya noden."
    return:
      type: System.Xml.XmlNode
      description: "The new <xref uid=&quot;langword_csharp_XmlNode&quot; name=&quot;XmlNode&quot; href=&quot;&quot;></xref>."
  overload: System.Xml.XmlDocument.CreateNode*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Namnet har inte angetts och <xref uid=&quot;langword_csharp_XmlNodeType&quot; name=&quot;XmlNodeType&quot; href=&quot;&quot;> </xref> måste ange ett namn."
  platform:
  - net462
- uid: System.Xml.XmlDocument.CreateNode(System.Xml.XmlNodeType,System.String,System.String,System.String)
  id: CreateNode(System.Xml.XmlNodeType,System.String,System.String,System.String)
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: CreateNode(XmlNodeType,String,String,String)
  nameWithType: XmlDocument.CreateNode(XmlNodeType,String,String,String)
  fullName: System.Xml.XmlDocument.CreateNode(XmlNodeType,String,String,String)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Creates a <xref href=&quot;System.Xml.XmlNode&quot;></xref> with the specified <xref:System.Xml.XmlNodeType>, <>*>, <>*>, and <xref:System.Xml.XmlNode.NamespaceURI*>.</xref:System.Xml.XmlNode.NamespaceURI*></xref:System.Xml.XmlNodeType>"
  remarks: "Although this method creates the new object in the context of the document, it does not automatically add the new object to the document tree. To add the new object, you must explicitly call one of the node insert methods.  \n  \n The following table shows you what NodeType[row] is allowed inside another NodeType[column] according to the W3C Extensible Markup Language (XML) 1.0 recommendation (www.w3.org/TR/1998/REC-xml-19980210).  \n  \n||Document|DocumentType|XmlDeclaration|Element|Attribute|Text|CDATA|Markup|EntityReference|  \n|------|--------------|------------------|--------------------|-------------|---------------|----------|-----------|------------|---------------------|  \n|`Document`|no|no|no|no|no|no|no|no|no|  \n|`DocumentType`|yes|no|no|no|no|no|no|no|no|  \n|`XmlDeclaration`|yes*|no|no|no|no|no|no|no|no|  \n|`Element`|yes|no|no|yes|no|no|no|no|yes***|  \n|`Attribute`|no|no|no|yes****|no|no|no|no|no|  \n|`Text`|no|no|no|yes|yes|no|no|no|yes|  \n|`CDATA`|no|no|no|yes|no|no|no|no|yes***|  \n|`Markup**`|yes|no|no|yes|no|no|no|no|no|  \n|`EntityReference`|no|no|no|yes|yes|no|no|no|yes|  \n  \n \\* The XmlDeclaration node must be the first child of the Document node.  \n  \n ** Markup includes ProcessingInstruction and Comment nodes.  \n  \n *** Element and CDATA nodes are only allowed in EntityReference nodes when the EntityReference node is not a child of an Attribute node.  \n  \n **** Attributes are not children of an Element node. Attributes are contained inside an attribute collection that belongs to the Element node.  \n  \n This method is a Microsoft extension to the Document Object Model (DOM)."
  example:
  - "The following example adds a new element to the document.  \n  \n [!code-vb[Classic WebData XmlDocument.CreateNode2 Example#1](~/add/codesnippet/visualbasic/9b485b37-d267-4da7-a8ac-_1.vb)]\n [!code-cpp[Classic WebData XmlDocument.CreateNode2 Example#1](~/add/codesnippet/cpp/9b485b37-d267-4da7-a8ac-_1.cpp)]\n [!code-cs[Classic WebData XmlDocument.CreateNode2 Example#1](~/add/codesnippet/csharp/9b485b37-d267-4da7-a8ac-_1.cs)]"
  syntax:
    content: public virtual System.Xml.XmlNode CreateNode (System.Xml.XmlNodeType type, string prefix, string name, string namespaceURI);
    parameters:
    - id: type
      type: System.Xml.XmlNodeType
      description: "Den <xref uid=&quot;langword_csharp_XmlNodeType&quot; name=&quot;XmlNodeType&quot; href=&quot;&quot;> </xref> av den nya noden."
    - id: prefix
      type: System.String
      description: "Prefix för den nya noden."
    - id: name
      type: System.String
      description: "Det lokala namnet på den nya noden."
    - id: namespaceURI
      type: System.String
      description: "Namnområdes-URI för den nya noden."
    return:
      type: System.Xml.XmlNode
      description: "The new <xref uid=&quot;langword_csharp_XmlNode&quot; name=&quot;XmlNode&quot; href=&quot;&quot;></xref>."
  overload: System.Xml.XmlDocument.CreateNode*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Namnet har inte angetts och <xref uid=&quot;langword_csharp_XmlNodeType&quot; name=&quot;XmlNodeType&quot; href=&quot;&quot;> </xref> måste ange ett namn."
  platform:
  - net462
- uid: System.Xml.XmlDocument.CreateProcessingInstruction(System.String,System.String)
  id: CreateProcessingInstruction(System.String,System.String)
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: CreateProcessingInstruction(String,String)
  nameWithType: XmlDocument.CreateProcessingInstruction(String,String)
  fullName: System.Xml.XmlDocument.CreateProcessingInstruction(String,String)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Skapar en <xref href=&quot;System.Xml.XmlProcessingInstruction&quot;> </xref> med det angivna namnet och data."
  remarks: "Även om den här metoden skapar det nya objektet i kontexten för dokumentet, läggs det inte automatiskt det nya objektet till dokumentträdet. Om du vill lägga till nya objekt, måste du uttryckligen anropa en av noden insert-metoder.       Enligt rekommendation W3C Extensible Markup Language (XML) 1.0 (www.w3.org/TR/1998/REC-xml-19980210) tillåts endast ProcessingInstruction noder i dokumentet och elementet EntityReference noder när noden EntityReference inte är en underordnad till en attributnod."
  example:
  - "The following example creates a ProcessingInstruction node and adds it to the document.  \n  \n [!code-cpp[Classic WebData XmlDocument.CreateProcessingInstruction Example#1](~/add/codesnippet/cpp/b628e59c-914d-4083-89f5-_1.cpp)]\n [!code-vb[Classic WebData XmlDocument.CreateProcessingInstruction Example#1](~/add/codesnippet/visualbasic/b628e59c-914d-4083-89f5-_1.vb)]\n [!code-cs[Classic WebData XmlDocument.CreateProcessingInstruction Example#1](~/add/codesnippet/csharp/b628e59c-914d-4083-89f5-_1.cs)]"
  syntax:
    content: public virtual System.Xml.XmlProcessingInstruction CreateProcessingInstruction (string target, string data);
    parameters:
    - id: target
      type: System.String
      description: "Namnet på bearbetningsinstruktionen."
    - id: data
      type: System.String
      description: "Data för bearbetningsinstruktionen."
    return:
      type: System.Xml.XmlProcessingInstruction
      description: "The new <xref uid=&quot;langword_csharp_XmlProcessingInstruction&quot; name=&quot;XmlProcessingInstruction&quot; href=&quot;&quot;></xref>."
  overload: System.Xml.XmlDocument.CreateProcessingInstruction*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlDocument.CreateSignificantWhitespace(System.String)
  id: CreateSignificantWhitespace(System.String)
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: CreateSignificantWhitespace(String)
  nameWithType: XmlDocument.CreateSignificantWhitespace(String)
  fullName: System.Xml.XmlDocument.CreateSignificantWhitespace(String)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Skapar en <xref href=&quot;System.Xml.XmlSignificantWhitespace&quot;> </xref> nod."
  remarks: "Den här metoden är ett Microsoft-tillägg för den modell DOM (Document Object). Den används när du vill formatera dokument manuellt.       Även om den här metoden skapar det nya objektet i kontexten för dokumentet, läggs det inte automatiskt det nya objektet till dokumentträdet. Om du vill lägga till nya objekt, måste du uttryckligen anropa en av noden insert-metoder."
  example:
  - "The following example adds significant white space to the document.  \n  \n [!code-cpp[Classic WebData XmlDocument.CreateSignificantWhitespace Example#1](~/add/codesnippet/cpp/m-system.xml.xmldocument_24_1.cpp)]\n [!code-cs[Classic WebData XmlDocument.CreateSignificantWhitespace Example#1](~/add/codesnippet/csharp/m-system.xml.xmldocument_24_1.cs)]\n [!code-vb[Classic WebData XmlDocument.CreateSignificantWhitespace Example#1](~/add/codesnippet/visualbasic/m-system.xml.xmldocument_24_1.vb)]"
  syntax:
    content: public virtual System.Xml.XmlSignificantWhitespace CreateSignificantWhitespace (string text);
    parameters:
    - id: text
      type: System.String
      description: "Strängen måste innehålla följande tecken &amp;#20. &amp;#10; &amp;#13; and &amp;#9;"
    return:
      type: System.Xml.XmlSignificantWhitespace
      description: "A new <xref uid=&quot;langword_csharp_XmlSignificantWhitespace&quot; name=&quot;XmlSignificantWhitespace&quot; href=&quot;&quot;></xref> node."
  overload: System.Xml.XmlDocument.CreateSignificantWhitespace*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlDocument.CreateTextNode(System.String)
  id: CreateTextNode(System.String)
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: CreateTextNode(String)
  nameWithType: XmlDocument.CreateTextNode(String)
  fullName: System.Xml.XmlDocument.CreateTextNode(String)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Skapar en <xref href=&quot;System.Xml.XmlText&quot;> </xref> med den angivna texten."
  remarks: "Även om den här metoden skapar det nya objektet i kontexten för dokumentet, läggs det inte automatiskt det nya objektet till dokumentträdet. Om du vill lägga till nya objekt, måste du uttryckligen anropa en av noden insert-metoder.       Enligt rekommendation W3C Extensible Markup Language (XML) 1.0 (www.w3.org/TR/1998/REC-xml-19980210) tillåts endast noder i Element, attribut och EntityReference noder."
  example:
  - "The following example creates a new element and adds it to the document.  \n  \n [!code-cpp[Classic WebData XmlDocument.CreateElement Example#1](~/add/codesnippet/cpp/m-system.xml.xmldocument_3_1.cpp)]\n [!code-cs[Classic WebData XmlDocument.CreateElement Example#1](~/add/codesnippet/csharp/m-system.xml.xmldocument_3_1.cs)]\n [!code-vb[Classic WebData XmlDocument.CreateElement Example#1](~/add/codesnippet/visualbasic/m-system.xml.xmldocument_3_1.vb)]"
  syntax:
    content: public virtual System.Xml.XmlText CreateTextNode (string text);
    parameters:
    - id: text
      type: System.String
      description: "Texten för textnoden."
    return:
      type: System.Xml.XmlText
      description: "Den nya <xref uid=&quot;langword_csharp_XmlText&quot; name=&quot;XmlText&quot; href=&quot;&quot;> </xref> nod."
  overload: System.Xml.XmlDocument.CreateTextNode*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlDocument.CreateWhitespace(System.String)
  id: CreateWhitespace(System.String)
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: CreateWhitespace(String)
  nameWithType: XmlDocument.CreateWhitespace(String)
  fullName: System.Xml.XmlDocument.CreateWhitespace(String)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Skapar en <xref href=&quot;System.Xml.XmlWhitespace&quot;> </xref> nod."
  remarks: "Den här metoden är ett Microsoft-tillägg för den modell DOM (Document Object). Den används när du vill formatera dokument manuellt.       Även om den här metoden skapar det nya objektet i kontexten för dokumentet, läggs det inte automatiskt det nya objektet till dokumentträdet. Om du vill lägga till nya objekt, måste du uttryckligen anropa en av noden insert-metoder."
  example:
  - "The following example adds white space to the document.  \n  \n [!code-cpp[Classic WebData XmlDocument.CreateWhitespace Example#1](~/add/codesnippet/cpp/m-system.xml.xmldocument_4_1.cpp)]\n [!code-vb[Classic WebData XmlDocument.CreateWhitespace Example#1](~/add/codesnippet/visualbasic/m-system.xml.xmldocument_4_1.vb)]\n [!code-cs[Classic WebData XmlDocument.CreateWhitespace Example#1](~/add/codesnippet/csharp/m-system.xml.xmldocument_4_1.cs)]"
  syntax:
    content: public virtual System.Xml.XmlWhitespace CreateWhitespace (string text);
    parameters:
    - id: text
      type: System.String
      description: "Strängen måste innehålla följande tecken &amp;#20. &amp;#10; &amp;#13; and &amp;#9;"
    return:
      type: System.Xml.XmlWhitespace
      description: "A new <xref uid=&quot;langword_csharp_XmlWhitespace&quot; name=&quot;XmlWhitespace&quot; href=&quot;&quot;></xref> node."
  overload: System.Xml.XmlDocument.CreateWhitespace*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlDocument.CreateXmlDeclaration(System.String,System.String,System.String)
  id: CreateXmlDeclaration(System.String,System.String,System.String)
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: CreateXmlDeclaration(String,String,String)
  nameWithType: XmlDocument.CreateXmlDeclaration(String,String,String)
  fullName: System.Xml.XmlDocument.CreateXmlDeclaration(String,String,String)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Skapar en <xref href=&quot;System.Xml.XmlDeclaration&quot;> </xref> nod med de angivna värdena."
  remarks: "Attribut som är tillgängliga som särskilda egenskaper på den `XmlDeclaration` nod, och inte som <xref:System.Xml.XmlAttribute>noder.</xref:System.Xml.XmlAttribute>       Även om den här metoden skapar det nya objektet i kontexten för dokumentet, läggs det inte automatiskt det nya objektet till dokumentträdet. Om du vill lägga till nya objekt, måste du uttryckligen anropa en av noden insert-metoder.       Enligt rekommendation för W3C Extensible Markup Language (XML) 1.0 (www.w3.org/TR/1998/REC-xml-19980210), den `XmlDeclaration` noden måste vara den första noden i dokumentet.       Den här metoden är ett Microsoft-tillägg för den modell DOM (Document Object)."
  example:
  - "The following example creates an XML declaration and adds it to the document.  \n  \n [!code-cs[Classic WebData XmlDocument.CreateXmlDeclaration Example#1](~/add/codesnippet/csharp/89cf6f87-55c5-4c7d-9c11-_1.cs)]\n [!code-cpp[Classic WebData XmlDocument.CreateXmlDeclaration Example#1](~/add/codesnippet/cpp/89cf6f87-55c5-4c7d-9c11-_1.cpp)]\n [!code-vb[Classic WebData XmlDocument.CreateXmlDeclaration Example#1](~/add/codesnippet/visualbasic/89cf6f87-55c5-4c7d-9c11-_1.vb)]"
  syntax:
    content: public virtual System.Xml.XmlDeclaration CreateXmlDeclaration (string version, string encoding, string standalone);
    parameters:
    - id: version
      type: System.String
      description: "Versionen måste vara &quot;1.0&quot;."
    - id: encoding
      type: System.String
      description: "Värdet för attributet kodning. Det här är den standardkodning som används när du sparar den <xref href=&quot;System.Xml.XmlDocument&quot;> </xref> till en fil eller en dataström; därför den måste anges till en sträng som stöds av den <xref:System.Text.Encoding>klass, annars <xref:System.Xml.XmlDocument.Save*>misslyckas.</xref:System.Xml.XmlDocument.Save*> </xref:System.Text.Encoding> Om det här är <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> eller String.Empty, den <xref uid=&quot;langword_csharp_Save&quot; name=&quot;Save&quot; href=&quot;&quot;> </xref> metod kan inte skriva ett kodning attribut i XML-deklarationen och därför används standard-kodning, UTF-8.       Obs: Om den <xref uid=&quot;langword_csharp_XmlDocument&quot; name=&quot;XmlDocument&quot; href=&quot;&quot;> </xref> sparas antingen en <xref:System.IO.TextWriter>eller en <xref:System.Xml.XmlTextWriter>, kodning värdet ignoreras.</xref:System.Xml.XmlTextWriter> </xref:System.IO.TextWriter> I stället kodning av den <xref uid=&quot;langword_csharp_TextWriter&quot; name=&quot;TextWriter&quot; href=&quot;&quot;> </xref> eller <xref uid=&quot;langword_csharp_XmlTextWriter&quot; name=&quot;XmlTextWriter&quot; href=&quot;&quot;> </xref> används. Detta säkerställer att XML-filen skrevs ut kan läsa tillbaka med rätt kodning."
    - id: standalone
      type: System.String
      description: "Värdet måste vara &quot;antingen yes&quot; eller &quot;Nej&quot;. Om det här är <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> eller String.Empty, den <xref uid=&quot;langword_csharp_Save&quot; name=&quot;Save&quot; href=&quot;&quot;> </xref> metod kan inte skriva en fristående attributet i XML-deklarationen."
    return:
      type: System.Xml.XmlDeclaration
      description: "Den nya <xref uid=&quot;langword_csharp_XmlDeclaration&quot; name=&quot;XmlDeclaration&quot; href=&quot;&quot;> </xref> nod."
  overload: System.Xml.XmlDocument.CreateXmlDeclaration*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Värdena för <code> version </code> eller <code> standalone </code> är något annat än de som anges ovan."
  platform:
  - net462
- uid: System.Xml.XmlDocument.DocumentElement
  id: DocumentElement
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: DocumentElement
  nameWithType: XmlDocument.DocumentElement
  fullName: System.Xml.XmlDocument.DocumentElement
  type: Property
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Hämtar roten <xref href=&quot;System.Xml.XmlElement&quot;> </xref> för dokumentet."
  remarks: ''
  example:
  - "The following example displays the root element of the XML document.  \n  \n [!code-cs[Classic WebData XmlDocument.DocumentElement Example#1](~/add/codesnippet/csharp/p-system.xml.xmldocument_8_1.cs)]\n [!code-cpp[Classic WebData XmlDocument.DocumentElement Example#1](~/add/codesnippet/cpp/p-system.xml.xmldocument_8_1.cpp)]\n [!code-vb[Classic WebData XmlDocument.DocumentElement Example#1](~/add/codesnippet/visualbasic/p-system.xml.xmldocument_8_1.vb)]  \n  \n **Output:**  \n  \n```  \n<book genre=\"novel\" ISBN=\"1-861001-57-5\"><title>Pride And Prejudice</title></book>   \n```"
  syntax:
    content: public System.Xml.XmlElement DocumentElement { get; }
    return:
      type: System.Xml.XmlElement
      description: "Den <xref uid=&quot;langword_csharp_XmlElement&quot; name=&quot;XmlElement&quot; href=&quot;&quot;> </xref> som representerar roten för XML-dokumentets träd. Om det inte finns någon <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> returneras."
  overload: System.Xml.XmlDocument.DocumentElement*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlDocument.DocumentType
  id: DocumentType
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: DocumentType
  nameWithType: XmlDocument.DocumentType
  fullName: System.Xml.XmlDocument.DocumentType
  type: Property
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Hämtar den nod som innehåller DOCTYPE-deklarationen."
  remarks: "En `XmlDocument` kan ha ett och endast ett underordnat objekt med <xref:System.Xml.XmlNodeType>lika med DocumentType.</xref:System.Xml.XmlNodeType>      > [!NOTE] > Den här egenskapen är skrivskyddad. Om du vill ändra noden DocumentType, ta bort den befintliga noden, skapa en ny en med hjälp av <xref:System.Xml.XmlDocument.CreateDocumentType%2A>-metoden och lägga till den nya noden i dokumentet.</xref:System.Xml.XmlDocument.CreateDocumentType%2A>"
  example:
  - "The following example gets and displays the DOCTYPE declaration for the document.  \n  \n [!code-cpp[Classic WebData XmlDocument.DocumentType Example#1](~/add/codesnippet/cpp/p-system.xml.xmldocument_4_1.cpp)]\n [!code-cs[Classic WebData XmlDocument.DocumentType Example#1](~/add/codesnippet/csharp/p-system.xml.xmldocument_4_1.cs)]\n [!code-vb[Classic WebData XmlDocument.DocumentType Example#1](~/add/codesnippet/visualbasic/p-system.xml.xmldocument_4_1.vb)]"
  syntax:
    content: public virtual System.Xml.XmlDocumentType DocumentType { get; }
    return:
      type: System.Xml.XmlDocumentType
      description: "Den <xref href=&quot;System.Xml.XmlNode&quot;> </xref> som innehåller DocumentType (DOCTYPE-deklarationen)."
  overload: System.Xml.XmlDocument.DocumentType*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlDocument.GetElementById(System.String)
  id: GetElementById(System.String)
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: GetElementById(String)
  nameWithType: XmlDocument.GetElementById(String)
  fullName: System.Xml.XmlDocument.GetElementById(String)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Hämtar den <xref href=&quot;System.Xml.XmlElement&quot;> </xref> med angivet ID."
  remarks: "Om dokumentet har flera element med matchande ID, returnerar den här metoden det första matchande elementet i dokumentet.      > [!NOTE] > I DOM-implementering måste ha information som definierar vilka attribut som är av typen-ID. Även om attribut av typen ID kan definieras i XSD-scheman eller DTD: er, stöder den här versionen av produkten endast de som definieras i DTD: er. Attribut med namnet &quot;ID&quot; inte är av Skriv-ID om inte så definierats i DTD: N. Implementeringar där det är okänt om attribut som är av typen ID förväntades returnera `null`."
  example:
  - "The following example uses the `GetElementById` method.  \n  \n [!code-cs[Classic WebData XmlDocument.GetElementById Example#1](~/add/codesnippet/csharp/m-system.xml.xmldocument_20_1.cs)]\n [!code-cpp[Classic WebData XmlDocument.GetElementById Example#1](~/add/codesnippet/cpp/m-system.xml.xmldocument_20_1.cpp)]\n [!code-vb[Classic WebData XmlDocument.GetElementById Example#1](~/add/codesnippet/visualbasic/m-system.xml.xmldocument_20_1.vb)]  \n  \n The example uses the file, `ids.xml`, as input.  \n  \n```xml  \n<!DOCTYPE root [  \n  <!ELEMENT root ANY>   \n  <!ELEMENT Person ANY>   \n  <!ELEMENT Customer EMPTY>  \n  <!ELEMENT Team EMPTY>  \n  <!ATTLIST Person SSN ID #REQUIRED>  \n  <!ATTLIST Customer id IDREF #REQUIRED >  \n  <!ATTLIST Team members IDREFS #REQUIRED>]>  \n<root>  \n  <Person SSN='A111' Name='Fred'/>  \n  <Person SSN='A222' Name='Tom'/>  \n  <Customer id='A222334444'/>  \n  <Team members='A222334444 A333445555'/>  \n</root>  \n```"
  syntax:
    content: public virtual System.Xml.XmlElement GetElementById (string elementId);
    parameters:
    - id: elementId
      type: System.String
      description: "Detta attribut-ID för att matcha."
    return:
      type: System.Xml.XmlElement
      description: "Den <xref uid=&quot;langword_csharp_XmlElement&quot; name=&quot;XmlElement&quot; href=&quot;&quot;> </xref> med matchande ID eller <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> om inga matchande element."
  overload: System.Xml.XmlDocument.GetElementById*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlDocument.GetElementsByTagName(System.String)
  id: GetElementsByTagName(System.String)
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: GetElementsByTagName(String)
  nameWithType: XmlDocument.GetElementsByTagName(String)
  fullName: System.Xml.XmlDocument.GetElementsByTagName(String)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Returnerar en <xref href=&quot;System.Xml.XmlNodeList&quot;> </xref> som innehåller en lista över alla underordnade element som matchar den angivna <xref:System.Xml.XmlDocument.Name*>.</xref:System.Xml.XmlDocument.Name*>"
  remarks: "Noderna placeras i den ordning som de skulle vara påträffades i dokumentet.      > [!NOTE] > Rekommenderas att du använder den <xref:System.Xml.XmlNode.SelectNodes%2A?displayProperty=fullName>eller <xref:System.Xml.XmlNode.SelectSingleNode%2A?displayProperty=fullName>metoden i stället för metoden GetElementsByTagName.</xref:System.Xml.XmlNode.SelectSingleNode%2A?displayProperty=fullName> </xref:System.Xml.XmlNode.SelectNodes%2A?displayProperty=fullName>"
  example:
  - "The following example creates a `XmlDocument` object and uses the `GetElementsByTagName` method and the resulting <xref:System.Xml.XmlNodeList> object to display all the book titles.  \n  \n [!code-cs[Classic WebData XmlDocument.GetElementsByTagName Example#1](~/add/codesnippet/csharp/m-system.xml.xmldocument_10_1.cs)]\n [!code-cpp[Classic WebData XmlDocument.GetElementsByTagName Example#1](~/add/codesnippet/cpp/m-system.xml.xmldocument_10_1.cpp)]\n [!code-vb[Classic WebData XmlDocument.GetElementsByTagName Example#1](~/add/codesnippet/visualbasic/m-system.xml.xmldocument_10_1.vb)]  \n  \n The example uses the `books.xml` file as input.  \n  \n [!code-xml[Classic WebData XslTransform.Transform7 Example#2](~/add/codesnippet/xml/m-system.xml.xmldocument_10_2.xml)]"
  syntax:
    content: public virtual System.Xml.XmlNodeList GetElementsByTagName (string name);
    parameters:
    - id: name
      type: System.String
      description: "Det kvalificerade namnet att matcha. Den matchas mot den <xref uid=&quot;langword_csharp_Name&quot; name=&quot;Name&quot; href=&quot;&quot;> </xref> -egenskapen för den matchande noden. Särskilda värdet &quot;*&quot; matchar alla taggar."
    return:
      type: System.Xml.XmlNodeList
      description: "En <xref href=&quot;System.Xml.XmlNodeList&quot;> </xref> som innehåller en lista med alla matchande noder. Om inga noder matchar <code> name </code>, returnerade samlingen är tom."
  overload: System.Xml.XmlDocument.GetElementsByTagName*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlDocument.GetElementsByTagName(System.String,System.String)
  id: GetElementsByTagName(System.String,System.String)
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: GetElementsByTagName(String,String)
  nameWithType: XmlDocument.GetElementsByTagName(String,String)
  fullName: System.Xml.XmlDocument.GetElementsByTagName(String,String)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Returnerar en <xref href=&quot;System.Xml.XmlNodeList&quot;> </xref> som innehåller en lista över alla underordnade element som matchar det angivna <> </> *> och <> </> *>."
  remarks: "Noderna placeras i den ordning som de skulle vara påträffades i dokumentträdet.      > [!NOTE] > Rekommenderas att du använder den <xref:System.Xml.XmlNode.SelectNodes%2A?displayProperty=fullName>eller <xref:System.Xml.XmlNode.SelectSingleNode%2A?displayProperty=fullName>metoden i stället för metoden GetElementsByTagName.</xref:System.Xml.XmlNode.SelectSingleNode%2A?displayProperty=fullName> </xref:System.Xml.XmlNode.SelectNodes%2A?displayProperty=fullName>"
  syntax:
    content: public virtual System.Xml.XmlNodeList GetElementsByTagName (string localName, string namespaceURI);
    parameters:
    - id: localName
      type: System.String
      description: "LocalName ska matchas. Särskilda värdet &quot;*&quot; matchar alla taggar."
    - id: namespaceURI
      type: System.String
      description: "NamespaceURI ska matchas."
    return:
      type: System.Xml.XmlNodeList
      description: "En <xref href=&quot;System.Xml.XmlNodeList&quot;> </xref> som innehåller en lista med alla matchande noder. Om inga noder matchar det angivna <code> localName </code> och <code> namespaceURI </code>, returnerade samlingen är tom."
  overload: System.Xml.XmlDocument.GetElementsByTagName*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlDocument.Implementation
  id: Implementation
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: Implementation
  nameWithType: XmlDocument.Implementation
  fullName: System.Xml.XmlDocument.Implementation
  type: Property
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Hämtar den <xref href=&quot;System.Xml.XmlImplementation&quot;> </xref> objekt för det aktuella dokumentet."
  remarks: "`XmlDocument`objekt som skapas från samma `XmlImplementation` delar samma <xref:System.Xml.XmlNameTable>.</xref:System.Xml.XmlNameTable> Detta ger användarna att jämföra attribut och element som objekt i stället för strängar.       Även om den `XmlDocument` objekt som delar samma implementering, flytta noder från ett dokument till en annan måste du använda den <xref:System.Xml.XmlDocument.ImportNode%2A>metoden.</xref:System.Xml.XmlDocument.ImportNode%2A>"
  example:
  - "The following example creates a new `XmlDocument` using another document's implementation.  \n  \n [!code-cs[Classic WebData XmlDocument.Implementation Example#1](~/add/codesnippet/csharp/p-system.xml.xmldocument_11_1.cs)]\n [!code-cpp[Classic WebData XmlDocument.Implementation Example#1](~/add/codesnippet/cpp/p-system.xml.xmldocument_11_1.cpp)]\n [!code-vb[Classic WebData XmlDocument.Implementation Example#1](~/add/codesnippet/visualbasic/p-system.xml.xmldocument_11_1.vb)]"
  syntax:
    content: public System.Xml.XmlImplementation Implementation { get; }
    return:
      type: System.Xml.XmlImplementation
      description: "Den <xref uid=&quot;langword_csharp_XmlImplementation&quot; name=&quot;XmlImplementation&quot; href=&quot;&quot;> </xref> objekt för det aktuella dokumentet."
  overload: System.Xml.XmlDocument.Implementation*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlDocument.ImportNode(System.Xml.XmlNode,System.Boolean)
  id: ImportNode(System.Xml.XmlNode,System.Boolean)
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: ImportNode(XmlNode,Boolean)
  nameWithType: XmlDocument.ImportNode(XmlNode,Boolean)
  fullName: System.Xml.XmlDocument.ImportNode(XmlNode,Boolean)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Importerar en nod från ett annat dokument till det aktuella dokumentet."
  remarks: "Returnerade nod har ingen överordnad. Källnoden är inte ändras eller tas bort från det ursprungliga dokumentet. `ImportNode` skapar en kopia av Källnoden.       När du importerar en nod skapas en `XmlNode` objekt som ägs av importera dokumentet med <xref:System.Xml.XmlNode.Name%2A>och <xref:System.Xml.XmlNode.NodeType%2A>identisk Källnoden.</xref:System.Xml.XmlNode.NodeType%2A> </xref:System.Xml.XmlNode.Name%2A> Nytt objekt har attribut som är relaterade till namnområden även (<xref:System.Xml.XmlNode.Prefix%2A>, <xref:System.Xml.XmlNode.LocalName%2A>, och <xref:System.Xml.XmlNode.NamespaceURI%2A>).</xref:System.Xml.XmlNode.NamespaceURI%2A> </xref:System.Xml.XmlNode.LocalName%2A> </xref:System.Xml.XmlNode.Prefix%2A>       Beroende på vilken nod noden importerade och värdet för den `deep` parameter, ytterligare information kopieras efter behov. Den här metoden försöker spegling beteendet förväntades ett XML-eller HTML-fragment kopieras från ett dokument till en annan (identifiera att de två dokumenten i XML-fall kan ha olika DTD: er).       I följande tabell beskrivs vad som sker för varje <xref:System.Xml.XmlNodeType>.</xref:System.Xml.XmlNodeType>      | XmlNodeType | ImportNode(true) | ImportNode(false) |   |-----------------|------------------------|-------------------------|   | Attributet | Den <xref:System.Xml.XmlAttribute.Specified%2A>egenskapen `true` genererade <xref:System.Xml.XmlAttribute>.</xref:System.Xml.XmlAttribute> </xref:System.Xml.XmlAttribute.Specified%2A> De underordnade medlemmarna till källan `XmlAttribute` rekursivt importeras och de resulterande noderna ihop så att motsvarande underträd. | Den `deep` parametern gäller inte för `XmlAttribute` noder; de alltid utföra deras underordnade med dem när de importeras. |   | CData | Kopierar den noden, inklusive dess data. | Kopierar den noden, inklusive dess data. |   | Kommentar | Kopierar den noden, inklusive dess data. | Kopierar den noden, inklusive dess data. |   | DocumentFragment | De underordnade medlemmarna till Källnoden är rekursivt importeras och resulterande noderna ihop så att motsvarande underträd. | En tom <xref:System.Xml.XmlDocumentFragment>genereras. |   | DocumentType | Kopierar den noden, inklusive dess data. *| Kopierar den noden, inklusive dess data. *|   | Elementet | Underordnade till elementet källa och angivet attribut noder är rekursivt importeras och resulterande noderna ihop så att motsvarande underträd.</xref:System.Xml.XmlDocumentFragment><br /><br /> Obs: Standardattribut kopieras inte. Om det dokument som importeras till definierar standardattribut för det här elementnamnet, de är tilldelade. | Angivet attribut noder av källelementet importeras och den genererade `XmlAttribute` noder som är kopplade till den genererade <xref:System.Xml.XmlElement>.</xref:System.Xml.XmlElement><br /><br /> Obs: Standardattribut kopieras inte. Om det dokument som importeras till definierar standardattribut för det här elementnamnet, de är tilldelade. |   | EntityReference | Eftersom käll-och mål kan ha de enheter som definierats på olika sätt, kopierar den här metoden bara den <xref:System.Xml.XmlEntityReference>nod.</xref:System.Xml.XmlEntityReference> Ersättningstexten ingår inte. Om entiteten som definierats finns i måldokumentet dess värde är tilldelad. | Eftersom käll-och mål kan ha de enheter som definierats på olika sätt, kopierar den här metoden bara den <xref:System.Xml.XmlEntityReference>nod.</xref:System.Xml.XmlEntityReference> Ersättningstexten ingår inte. Om entiteten som definierats finns i måldokumentet dess värde är tilldelad. |   | ProcessingInstruction | Kopiera värdet mål och data från noden importerade. | Kopiera värdet mål och data från noden importerade. |   | Text | Kopierar den noden, inklusive dess data. | Kopierar den noden, inklusive dess data. |   | SignificantWhitespace | Kopierar den noden, inklusive dess data. | Kopierar den noden, inklusive dess data. |   | Blanksteg | Kopierar den noden, inklusive dess data. | Kopierar den noden, inklusive dess data. |   | XmlDeclaration | Kopiera värdet mål och data från noden importerade. | Kopiera värdet mål och data från noden importerade. |   | Alla andra nodtyper. | Dessa nodtyper kan inte importeras. | Dessa nodtyper kan inte importeras. |       * Även om DocumentType noder kan importeras, kan ett dokument bara ha en DocumentType. Om dokumentet har för närvarande en DocumenType-nod, måste tas bort innan du lägger till en ny."
  example:
  - "The following example imports a book node from a second XML document into the original XML document.  \n  \n [!code-vb[Classic WebData XmlDocument.ImportNode Example#1](~/add/codesnippet/visualbasic/m-system.xml.xmldocument_22_1.vb)]\n [!code-cpp[Classic WebData XmlDocument.ImportNode Example#1](~/add/codesnippet/cpp/m-system.xml.xmldocument_22_1.cpp)]\n [!code-cs[Classic WebData XmlDocument.ImportNode Example#1](~/add/codesnippet/csharp/m-system.xml.xmldocument_22_1.cs)]  \n  \n The example uses the file, `books.xml`, as input.  \n  \n [!code-xml[Classic WebData XslTransform.Transform7 Example#2](~/add/codesnippet/xml/m-system.xml.xmldocument_22_2.xml)]"
  syntax:
    content: public virtual System.Xml.XmlNode ImportNode (System.Xml.XmlNode node, bool deep);
    parameters:
    - id: node
      type: System.Xml.XmlNode
      description: "Noden som importeras."
    - id: deep
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>utföra en djup klon; Annars <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
    return:
      type: System.Xml.XmlNode
      description: "Den importerade <xref href=&quot;System.Xml.XmlNode&quot;> </xref>."
  overload: System.Xml.XmlDocument.ImportNode*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Den här metoden anropas på en nodtyp som inte kan importeras."
  platform:
  - net462
- uid: System.Xml.XmlDocument.InnerText
  id: InnerText
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: InnerText
  nameWithType: XmlDocument.InnerText
  fullName: System.Xml.XmlDocument.InnerText
  type: Property
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Genererar en <xref:System.InvalidOperationException>i samtliga fall.</xref:System.InvalidOperationException>"
  remarks: "Den här egenskapen har inte implementerats."
  syntax:
    content: public override string InnerText { set; }
    return:
      type: System.String
      description: "Värden för noden och alla dess underordnade noder."
  overload: System.Xml.XmlDocument.InnerText*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "I samtliga fall."
  platform:
  - net462
- uid: System.Xml.XmlDocument.InnerXml
  id: InnerXml
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: InnerXml
  nameWithType: XmlDocument.InnerXml
  fullName: System.Xml.XmlDocument.InnerXml
  type: Property
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Hämtar eller anger koden som representerar underordnade till den aktuella noden."
  remarks: "Den här egenskapen ersätter underordnade noden med parsade innehållet i den angivna strängen. Parsningen görs i den aktuella kontexten i namnområdet.       `InnerXml`tar bort överflödiga namnrymdsdeklarationer. Som ett resultat, flera klipp ut och klistra in ökar operations inte storleken på dokumentet med redundant namnrymdsdeklarationer. Överväg följande XSL-dokument: ```   <xsl:stylesheet version=&quot;1.0&quot;          xmlns:xsl=&quot;http://www.w3.org/1999/XSL/Transform&quot;>        <xsl:template match=&quot;stock&quot;>            ...        </xsl:template>       </xsl:stylesheet>   ``` den `InnerXml` på noden stylesheet-egenskap returnerar följande sträng: ```   <xsl:template match=&quot;stock&quot;          xmlns:xsl=&quot;http://www.w3.org/1999/XSL/Transform&quot;>        ...       </xsl:template>   ``` Observera ytterligare xmlns: XSL-namnområdesdeklarationen som används för att bevara nod-identitet. Om du infogar nytt inre XML-strängen, får du tillbaka det ursprungliga dokumentet. Med andra ord `InnerXml` identifierar att namnområdesdeklarationen xmlns: XSL är redundant hänsyn till att det överordnade elementet för xsl: stylesheet redan har xmlns: XSL namnområde delcaration och därför tas bort.       Om du flyttar `InnerXml` från ett dokument med inget standardnamnområde till ett dokument med ett standardnamnområde beteendet skiljer sig något. Överväg följande XML-strängen: ```   <test>         <item>123</item>       </test>   ``` `InnerXml` returnerar en vanlig XML-sträng med ingen namnrymdsdeklarationer: ```   <item>123</item>   ``` om du sedan infoga strängen i ett dokument som har ett standardnamnområde, till exempel följande: ```   <test2 xmlns=&quot;urn:1&quot;>       </test>   ``` `InnerXml` Parsar strängen i kontexten och nya noder hämta namnområdet urn:&1;.               Resultatet ser ut så här: ```   <test2 xmlns=&quot;urn:1&quot;>         <item>123</item>       </test>   ``` nu när du ombeds de `InnerXml` åter följande: ```   <item xmlns=&quot;urn:1&quot;>123</item>   ``` om du uttryckligen vill infogade objektet om du vill behålla det faktum att det kommer från ett dokument som har inget namnområde måste du manuellt lägga till en xmlns = &quot;&quot; försäkran och infoga den resulterande strängen: ```   <item xmlns=&quot;&quot;>123</item>   ``` net effekten av alla detta är följande: 1.  Kopiera och klistra in `InnerXml` mellan dokument som inte använder namnområden är enkelt och skapar inte &quot;xmlns&quot; redundans i din strängar.      2.  `InnerXml`kan också användas för att klippa och klistra in mellan dokument som har mer än ett namnområde (d.v.s. XSL-formatmallar).      3.  xmlns: XSL-deklarationer visas i din strängar automatiskt och försvinner i nod-hierarkier.      4.  I de fall där du befordras `InnerXml` från ett dokument som har inget standardnamnområde till ett dokument som har ett standardnamnområde nya noder ska hämta nya standardnamnområde.       Om `InnerXml` anges med text som innehåller entitetsreferenser som för närvarande inte har definierats i dokumentet, resulterande trädet innehåller tomt EntityReference noder.       Den här egenskapen är ett Microsoft-tillägg för den modell DOM (Document Object)."
  syntax:
    content: public override string InnerXml { get; set; }
    return:
      type: System.String
      description: "Koden för den aktuella noden underordnade."
  overload: System.Xml.XmlDocument.InnerXml*
  exceptions:
  - type: System.Xml.XmlException
    commentId: T:System.Xml.XmlException
    description: "XML-filen anges när den här egenskapen är inte giltig."
  platform:
  - net462
- uid: System.Xml.XmlDocument.IsReadOnly
  id: IsReadOnly
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: IsReadOnly
  nameWithType: XmlDocument.IsReadOnly
  fullName: System.Xml.XmlDocument.IsReadOnly
  type: Property
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Hämtar ett värde som anger om den aktuella noden är skrivskyddad."
  remarks: "En skrivskyddad nod är en vars egenskaper, attribut eller underordnade inte kan ändras. Du kan ta bort en nod som skrivskyddad i trädet och infoga den någon annanstans.       Den här egenskapen är ett Microsoft-tillägg för den modell DOM (Document Object)."
  example:
  - "The following example shows how to use the `IsReadOnly` property.  \n  \n [!code-cs[Classic WebData XmlDocument.IsReadOnly Example#1](~/add/codesnippet/csharp/p-system.xml.xmldocument_7_1.cs)]\n [!code-cpp[Classic WebData XmlDocument.IsReadOnly Example#1](~/add/codesnippet/cpp/p-system.xml.xmldocument_7_1.cpp)]\n [!code-vb[Classic WebData XmlDocument.IsReadOnly Example#1](~/add/codesnippet/visualbasic/p-system.xml.xmldocument_7_1.vb)]"
  syntax:
    content: public override bool IsReadOnly { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Om den aktuella noden är skrivskyddade. Annars <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. <xref uid=&quot;langword_csharp_XmlDocument&quot; name=&quot;XmlDocument&quot; href=&quot;&quot;></xref>returnerar alltid noder <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Xml.XmlDocument.IsReadOnly*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlDocument.Load(System.IO.Stream)
  id: Load(System.IO.Stream)
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: Load(Stream)
  nameWithType: XmlDocument.Load(Stream)
  fullName: System.Xml.XmlDocument.Load(Stream)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Läser in XML-dokumentet från den angivna dataströmmen."
  remarks: "> [!NOTE]> Den `Load` metoden alltid bevarar betydande tomma utrymmen. Den <xref:System.Xml.XmlDocument.PreserveWhitespace%2A>egenskapen avgör huruvida obetydlig tomt utrymme som är tomt utrymme i elementinnehåll bevaras.</xref:System.Xml.XmlDocument.PreserveWhitespace%2A> Standardvärdet är `false`; blanksteg i elementinnehåll bevaras inte.       Om du vill att validering ska ske, kan du skapa en verifierar <xref:System.Xml.XmlReader>instans med hjälp av den <xref:System.Xml.XmlReaderSettings>klass och <xref:System.Xml.XmlReader.Create%2A>metod.</xref:System.Xml.XmlReader.Create%2A> </xref:System.Xml.XmlReaderSettings> </xref:System.Xml.XmlReader> Mer information finns i avsnittet Anmärkningar i den <xref:System.Xml.XmlReader>referenssida.</xref:System.Xml.XmlReader>       Den här metoden är ett Microsoft-tillägg för den modell DOM (Document Object).       Den här metoden identifierar automatiskt strängformat av indata-XML (till exempel UTF-8, ANSI och så vidare). Om ditt program måste veta vilka kodning används för att läsa strömmen, bör du använda ett <xref:System.Xml.XmlTextReader>objekt om du vill läsa strömmen och sedan använda den <xref:System.Xml.XmlTextReader.Encoding%2A?displayProperty=fullName>egenskapen fastställa kodning.</xref:System.Xml.XmlTextReader.Encoding%2A?displayProperty=fullName> </xref:System.Xml.XmlTextReader> Om du behöver använda ett <xref:System.Xml.XmlDocument>objekt att arbeta med XML, du kan använda den <xref:System.Xml.XmlTextReader>objekt för att skapa en.</xref:System.Xml.XmlTextReader> </xref:System.Xml.XmlDocument> Mer information finns i [läsning av XML-Data med hjälp av XPathDocument och XmlDocument](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public virtual void Load (System.IO.Stream inStream);
    parameters:
    - id: inStream
      type: System.IO.Stream
      description: "Dataströmmen som innehåller XML-dokumentet för att läsa in."
  overload: System.Xml.XmlDocument.Load*
  exceptions:
  - type: System.Xml.XmlException
    commentId: T:System.Xml.XmlException
    description: "Det finns en load- eller parsa fel i XML. I det här fallet en <xref:System.IO.FileNotFoundException>utlöses.</xref:System.IO.FileNotFoundException>"
  platform:
  - net462
- uid: System.Xml.XmlDocument.Load(System.IO.TextReader)
  id: Load(System.IO.TextReader)
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: Load(TextReader)
  nameWithType: XmlDocument.Load(TextReader)
  fullName: System.Xml.XmlDocument.Load(TextReader)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Läser in XML-dokumentet från den angivna <xref:System.IO.TextReader>.</xref:System.IO.TextReader>"
  remarks: "> [!NOTE]> Den `Load` metoden alltid bevarar betydande tomma utrymmen. Den <xref:System.Xml.XmlDocument.PreserveWhitespace%2A>egenskapen avgör huruvida obetydlig tomt utrymme som är tomt utrymme i elementinnehåll bevaras.</xref:System.Xml.XmlDocument.PreserveWhitespace%2A> Standardvärdet är `false`; blanksteg i elementinnehåll bevaras inte.       Om du vill att validering ska ske, kan du skapa en verifierar <xref:System.Xml.XmlReader>instans med hjälp av den <xref:System.Xml.XmlReaderSettings>klass och <xref:System.Xml.XmlReader.Create%2A>metod.</xref:System.Xml.XmlReader.Create%2A> </xref:System.Xml.XmlReaderSettings> </xref:System.Xml.XmlReader> Mer information finns i avsnittet Anmärkningar i den <xref:System.Xml.XmlReader>referenssida.</xref:System.Xml.XmlReader>       Den här metoden är ett Microsoft-tillägg för den modell DOM (Document Object)."
  example:
  - "The following example uses the <xref:System.IO.StringReader> class to load a string of XML data into the `XmlDocument` object.  \n  \n [!code-cs[Classic WebData XmlDocument.CreateElement2 Example#1](~/add/codesnippet/csharp/m-system.xml.xmldocument_8_1.cs)]\n [!code-vb[Classic WebData XmlDocument.CreateElement2 Example#1](~/add/codesnippet/visualbasic/m-system.xml.xmldocument_8_1.vb)]\n [!code-cpp[Classic WebData XmlDocument.CreateElement2 Example#1](~/add/codesnippet/cpp/m-system.xml.xmldocument_8_1.cpp)]"
  syntax:
    content: public virtual void Load (System.IO.TextReader txtReader);
    parameters:
    - id: txtReader
      type: System.IO.TextReader
      description: "Den <xref uid=&quot;langword_csharp_TextReader&quot; name=&quot;TextReader&quot; href=&quot;&quot;> </xref> används för att mata in XML-data i dokumentet."
  overload: System.Xml.XmlDocument.Load*
  exceptions:
  - type: System.Xml.XmlException
    commentId: T:System.Xml.XmlException
    description: "Det finns en load- eller parsa fel i XML. I det här fallet är dokumentet tomt."
  platform:
  - net462
- uid: System.Xml.XmlDocument.Load(System.String)
  id: Load(System.String)
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: Load(String)
  nameWithType: XmlDocument.Load(String)
  fullName: System.Xml.XmlDocument.Load(String)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Läser in XML-dokumentet från den angivna URL: en."
  remarks: "> [!NOTE]> Den `Load` metoden alltid bevarar betydande tomma utrymmen. Den <xref:System.Xml.XmlDocument.PreserveWhitespace%2A>egenskapen avgör huruvida obetydlig tomt utrymme som är tomt utrymme i elementinnehåll bevaras.</xref:System.Xml.XmlDocument.PreserveWhitespace%2A> Standardvärdet är `false`; blanksteg i elementinnehåll bevaras inte.       Om du vill att validering ska ske, kan du skapa en verifierar <xref:System.Xml.XmlReader>instans med hjälp av den <xref:System.Xml.XmlReaderSettings>klass och <xref:System.Xml.XmlReader.Create%2A>metod.</xref:System.Xml.XmlReader.Create%2A> </xref:System.Xml.XmlReaderSettings> </xref:System.Xml.XmlReader> Mer information finns i avsnittet Anmärkningar i den <xref:System.Xml.XmlReader>referenssida.</xref:System.Xml.XmlReader>       Den här metoden är ett Microsoft-tillägg för den modell DOM (Document Object)."
  syntax:
    content: public virtual void Load (string filename);
    parameters:
    - id: filename
      type: System.String
      description: "URL till den fil som innehåller XML-dokumentet att läsa in. Webbadressen kan vara antingen en lokal fil eller en HTTP-URL (webbadress)."
  overload: System.Xml.XmlDocument.Load*
  exceptions:
  - type: System.Xml.XmlException
    commentId: T:System.Xml.XmlException
    description: "Det finns en load- eller parsa fel i XML. I det här fallet en <xref:System.IO.FileNotFoundException>utlöses.</xref:System.IO.FileNotFoundException>"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>filename</code>är en sträng med längden noll, innehåller bara blanksteg eller innehåller en eller flera ogiltiga tecken som definieras av <xref:System.IO.Path.InvalidPathChars>."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>filename</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "Den angivna sökvägen, filnamnet eller båda vara längre än den systemdefinierade maximala längden. Till exempel på Windows-baserade plattformar sökvägar måste vara färre än 248 tecken och filnamn måste vara färre än 260 tecken."
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "Den angivna sökvägen är ogiltig (t.ex, det är på en omappade enhet)."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "Ett i/o-fel uppstod när filen öppnades."
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "<code>filename</code>Ange en fil som är skrivskyddad.       - eller - åtgärden stöds inte på den aktuella plattformen.       - eller - <code>filename</code> anges en katalog.       - eller - anroparen har inte behörigheten som krävs."
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "Filen som anges i <code> filename </code> hittades inte."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<code>filename</code>är ett ogiltigt format."
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "Anroparen har inte behörigheten som krävs."
  platform:
  - net462
- uid: System.Xml.XmlDocument.Load(System.Xml.XmlReader)
  id: Load(System.Xml.XmlReader)
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: Load(XmlReader)
  nameWithType: XmlDocument.Load(XmlReader)
  fullName: System.Xml.XmlDocument.Load(XmlReader)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Läser in XML-dokumentet från den angivna <xref:System.Xml.XmlReader>.</xref:System.Xml.XmlReader>"
  remarks: "> [!NOTE]> Den `Load` metoden alltid bevarar betydande tomma utrymmen. Den <xref:System.Xml.XmlDocument.PreserveWhitespace%2A>egenskapen avgör huruvida obetydlig tomt utrymme som är tomt utrymme i elementinnehåll bevaras.</xref:System.Xml.XmlDocument.PreserveWhitespace%2A> Standardvärdet är `false`; blanksteg i elementinnehåll bevaras inte.       Om läsaren finns inledningsvis (<xref:System.Xml.XmlReader.ReadState%2A> = ReadState.Initial), `Load` använder hela innehållet i läsaren och skapar DOM från den hittar.</xref:System.Xml.XmlReader.ReadState%2A>       Om läsaren redan är placerade på en nod på djupet &quot;n&quot;, laddas den här metoden noden och alla efterföljande nivå upp till sluttaggen som stänger djup &quot;n&quot;. Detta har följande resultat.       Om den aktuella noden och samma nivå som ser ut som följande: ```   <!--comment--><element1>one</element1><element2>two</element2>   ``` `Load` genererar ett undantag eftersom ett dokument inte kan ha två nivåer rotelement.        Om den aktuella noden och samma nivå ser ut som följande: ```   <!--comment--><?process instruction?><!--comment--></endtag>   ``` `Load` lyckas, men du har ett ofullständigt DOM-träd eftersom det inte finns på rotelement.        Innan du sparar dokumentet, måste du lägga till en nivå rotelementet, annars <xref:System.Xml.XmlDocument.Save%2A>genereras ett undantagsfel.</xref:System.Xml.XmlDocument.Save%2A>       Om läsaren är placerad på en lövnod är ogiltig för ett dokument, till exempel ett blanksteg eller attributnod rotnivå, läsaren fortsätter att läsa tills den är placerad på en nod som kan användas för roten. Dokumentet läses nu.       Om du vill att validering ska ske, kan du skapa en verifierar <xref:System.Xml.XmlReader>instans med hjälp av den <xref:System.Xml.XmlReaderSettings>klass och <xref:System.Xml.XmlReader.Create%2A>metod.</xref:System.Xml.XmlReader.Create%2A> </xref:System.Xml.XmlReaderSettings> </xref:System.Xml.XmlReader> Mer information finns i avsnittet Anmärkningar i den <xref:System.Xml.XmlReader>referenssida.</xref:System.Xml.XmlReader>       Den här metoden är ett Microsoft-tillägg för den modell DOM (Document Object)."
  example:
  - "The following example loads the last book node of the `books.xml` file into the XML document.  \n  \n [!code-cs[Classic WebData XmlDocument.Load2 Example#1](~/add/codesnippet/csharp/m-system.xml.xmldocument_23_1.cs)]\n [!code-vb[Classic WebData XmlDocument.Load2 Example#1](~/add/codesnippet/visualbasic/m-system.xml.xmldocument_23_1.vb)]\n [!code-cpp[Classic WebData XmlDocument.Load2 Example#1](~/add/codesnippet/cpp/m-system.xml.xmldocument_23_1.cpp)]  \n  \n The example uses the file, `books.xml`, as input.  \n  \n [!code-xml[Classic WebData XslTransform.Transform7 Example#2](~/add/codesnippet/xml/m-system.xml.xmldocument_23_2.xml)]"
  syntax:
    content: public virtual void Load (System.Xml.XmlReader reader);
    parameters:
    - id: reader
      type: System.Xml.XmlReader
      description: "Den <xref uid=&quot;langword_csharp_XmlReader&quot; name=&quot;XmlReader&quot; href=&quot;&quot;> </xref> används för att mata in XML-data i dokumentet."
  overload: System.Xml.XmlDocument.Load*
  exceptions:
  - type: System.Xml.XmlException
    commentId: T:System.Xml.XmlException
    description: "Det finns en load- eller parsa fel i XML. I det här fallet är dokumentet tomt."
  platform:
  - net462
- uid: System.Xml.XmlDocument.LoadXml(System.String)
  id: LoadXml(System.String)
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: LoadXml(String)
  nameWithType: XmlDocument.LoadXml(String)
  fullName: System.Xml.XmlDocument.LoadXml(String)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Läser in XML-dokumentet från den angivna strängen."
  remarks: "Som standard den `LoadXml` metoden bevaras inte blanksteg eller betydande tomt utrymme.       Den här metoden Parsar DTD: er, men göra inte DTD- eller Schema-verifiering. Om du vill att validering ska ske, kan du skapa en verifierar <xref:System.Xml.XmlReader>instans med hjälp av den <xref:System.Xml.XmlReaderSettings>klass och <xref:System.Xml.XmlReader.Create%2A>metod.</xref:System.Xml.XmlReader.Create%2A> </xref:System.Xml.XmlReaderSettings> </xref:System.Xml.XmlReader> Mer information finns i avsnittet Anmärkningar i den <xref:System.Xml.XmlReader>referenssida.</xref:System.Xml.XmlReader>       Om du vill läsa in från en <xref:System.IO.Stream>, <xref:System.String>, <xref:System.IO.TextReader>, eller <xref:System.Xml.XmlReader>, använda metoden Load i stället för den här metoden.</xref:System.Xml.XmlReader> </xref:System.IO.TextReader> </xref:System.String> </xref:System.IO.Stream>       Den här metoden är ett Microsoft-tillägg för den modell DOM (Document Object)."
  example:
  - "The following example loads XML into an `XmlDocument` object and saves it out to a file.  \n  \n [!code-cpp[Classic WebData XmlDocument.LoadXml Example#1](~/add/codesnippet/cpp/m-system.xml.xmldocument_2_1.cpp)]\n [!code-cs[Classic WebData XmlDocument.LoadXml Example#1](~/add/codesnippet/csharp/m-system.xml.xmldocument_2_1.cs)]\n [!code-vb[Classic WebData XmlDocument.LoadXml Example#1](~/add/codesnippet/visualbasic/m-system.xml.xmldocument_2_1.vb)]"
  syntax:
    content: public virtual void LoadXml (string xml);
    parameters:
    - id: xml
      type: System.String
      description: "Sträng som innehåller XML-dokumentet för att läsa in."
  overload: System.Xml.XmlDocument.LoadXml*
  exceptions:
  - type: System.Xml.XmlException
    commentId: T:System.Xml.XmlException
    description: "Det finns en load- eller parsa fel i XML. I det här fallet är dokumentet tomt."
  platform:
  - net462
- uid: System.Xml.XmlDocument.LocalName
  id: LocalName
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: LocalName
  nameWithType: XmlDocument.LocalName
  fullName: System.Xml.XmlDocument.LocalName
  type: Property
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Hämtar det lokala namnet på noden."
  remarks: "Det lokala namnet som returneras beror på den <xref:System.Xml.XmlDocument.NodeType%2A>för noden.</xref:System.Xml.XmlDocument.NodeType%2A> En tabell som beskriver det lokala namnet returneras för varje nod finns <xref:System.Xml.XmlNode.LocalName%2A>egenskap i <xref:System.Xml.XmlNode>klassen.</xref:System.Xml.XmlNode> </xref:System.Xml.XmlNode.LocalName%2A>"
  syntax:
    content: public override string LocalName { get; }
    return:
      type: System.String
      description: 'För <xref uid=&quot;langword_csharp_XmlDocument&quot; name=&quot;XmlDocument&quot; href=&quot;&quot;> </xref> noder, det lokala namnet är #document.'
  overload: System.Xml.XmlDocument.LocalName*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlDocument.Name
  id: Name
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: Name
  nameWithType: XmlDocument.Name
  fullName: System.Xml.XmlDocument.Name
  type: Property
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Hämtar det kvalificerade namnet på noden."
  remarks: "Namnet som returneras beror på den <xref:System.Xml.XmlDocument.NodeType%2A>för noden.</xref:System.Xml.XmlDocument.NodeType%2A> En tabell som beskriver namnet returneras för varje nod finns <xref:System.Xml.XmlNode.Name%2A>egenskap i <xref:System.Xml.XmlNode>klassen.</xref:System.Xml.XmlNode> </xref:System.Xml.XmlNode.Name%2A>"
  syntax:
    content: public override string Name { get; }
    return:
      type: System.String
      description: 'För <xref uid=&quot;langword_csharp_XmlDocument&quot; name=&quot;XmlDocument&quot; href=&quot;&quot;> </xref> noder, vilket är #document.'
  overload: System.Xml.XmlDocument.Name*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlDocument.NameTable
  id: NameTable
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: NameTable
  nameWithType: XmlDocument.NameTable
  fullName: System.Xml.XmlDocument.NameTable
  type: Property
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Hämtar den <xref:System.Xml.XmlNameTable>som är associerade med den här implementeringen.</xref:System.Xml.XmlNameTable>"
  remarks: "Varje `XmlDocument` objekt har en <xref:System.Xml.NameTable>objektet.</xref:System.Xml.NameTable> Element och attributnamn lagras i den `NameTable` som atomiserad strängar. Det innebär att även om ett namn som refereras i dokumentet flera gånger lagras en gång i den `NameTable`. Om dokumentet innehåller flera element med namnet &quot;Kund&quot;, till exempel `NameTable` returnerar samma objekt när den tar emot en begäran för det här namnet. Användare kan därför skriva kod med hjälp av objektet jämförelser på dessa strängar i stället för dyrare strängjämförelser.       Mer information om atomiserad strängar finns <xref:System.Xml.XmlNameTable>.</xref:System.Xml.XmlNameTable>       Den här metoden är ett Microsoft-tillägg för den modell DOM (Document Object)."
  syntax:
    content: public System.Xml.XmlNameTable NameTable { get; }
    return:
      type: System.Xml.XmlNameTable
      description: "En <xref uid=&quot;langword_csharp_XmlNameTable&quot; name=&quot;XmlNameTable&quot; href=&quot;&quot;> </xref> så att du kan hämta den atomized versionen av en sträng i dokumentet."
  overload: System.Xml.XmlDocument.NameTable*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlDocument.NodeChanged
  id: NodeChanged
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: NodeChanged
  nameWithType: XmlDocument.NodeChanged
  fullName: System.Xml.XmlDocument.NodeChanged
  type: Event
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Inträffar när den <xref:System.Xml.XmlNode.Value*>för en nod som tillhör det här dokumentet har ändrats.</xref:System.Xml.XmlNode.Value*>"
  remarks: "Den här händelsen gäller bara för noder som har ett värde.       Alla noder som skapats i det här dokumentet, oavsett om de har infogats i dokumentet ingår i den här händelsen."
  syntax:
    content: public event System.Xml.XmlNodeChangedEventHandler NodeChanged;
    return:
      type: System.Xml.XmlNodeChangedEventHandler
      description: "Som ska läggas till."
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlDocument.NodeChanging
  id: NodeChanging
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: NodeChanging
  nameWithType: XmlDocument.NodeChanging
  fullName: System.Xml.XmlDocument.NodeChanging
  type: Event
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Inträffar när den <xref:System.Xml.XmlNode.Value*>för en nod som tillhör det här dokumentet är på väg att ändras.</xref:System.Xml.XmlNode.Value*>"
  remarks: "Den här händelsen kan användaren gör extra kontroll och, om det behövs kan utlösa ett undantag om du vill avbryta åtgärden. Om ett undantag i `XmlDocument` återgår till sitt ursprungliga tillstånd. Den här händelsen gäller bara för noder som har ett värde.       Alla noder som skapats i det här dokumentet, oavsett om de har infogats i dokumentet ingår i den här händelsen."
  syntax:
    content: public event System.Xml.XmlNodeChangedEventHandler NodeChanging;
    return:
      type: System.Xml.XmlNodeChangedEventHandler
      description: "Som ska läggas till."
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlDocument.NodeInserted
  id: NodeInserted
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: NodeInserted
  nameWithType: XmlDocument.NodeInserted
  fullName: System.Xml.XmlDocument.NodeInserted
  type: Event
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Inträffar när en nod som hör till det här dokumentet har infogats i en annan nod."
  remarks: "Alla noder som skapats i det här dokumentet, oavsett om de har infogats i dokumentet ingår i den här händelsen."
  syntax:
    content: public event System.Xml.XmlNodeChangedEventHandler NodeInserted;
    return:
      type: System.Xml.XmlNodeChangedEventHandler
      description: "Som ska läggas till."
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlDocument.NodeInserting
  id: NodeInserting
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: NodeInserting
  nameWithType: XmlDocument.NodeInserting
  fullName: System.Xml.XmlDocument.NodeInserting
  type: Event
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Inträffar när en nod som hör till det här dokumentet kommer att infogas i en annan nod."
  remarks: "Den här händelsen kan användaren gör extra kontroll och, om det behövs kan utlösa ett undantag om du vill avbryta åtgärden. Om ett undantag i `XmlDocument` återgår till sitt ursprungliga tillstånd.       Alla noder som skapats i det här dokumentet, oavsett om de har infogats i dokumentet ingår i den här händelsen."
  syntax:
    content: public event System.Xml.XmlNodeChangedEventHandler NodeInserting;
    return:
      type: System.Xml.XmlNodeChangedEventHandler
      description: "Som ska läggas till."
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlDocument.NodeRemoved
  id: NodeRemoved
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: NodeRemoved
  nameWithType: XmlDocument.NodeRemoved
  fullName: System.Xml.XmlDocument.NodeRemoved
  type: Event
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Inträffar när en nod som hör till det här dokumentet har tagits bort från den överordnade nivån."
  remarks: "Alla noder som skapats i det här dokumentet, oavsett om de har infogats i dokumentet ingår i den här händelsen."
  syntax:
    content: public event System.Xml.XmlNodeChangedEventHandler NodeRemoved;
    return:
      type: System.Xml.XmlNodeChangedEventHandler
      description: "Som ska läggas till."
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlDocument.NodeRemoving
  id: NodeRemoving
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: NodeRemoving
  nameWithType: XmlDocument.NodeRemoving
  fullName: System.Xml.XmlDocument.NodeRemoving
  type: Event
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Inträffar när en nod som hör till det här dokumentet kommer att tas bort från dokumentet."
  remarks: "Den här händelsen kan användaren gör extra kontroll och, om det behövs kan utlösa ett undantag om du vill avbryta åtgärden. Om ett undantag i `XmlDocument` återgår till sitt ursprungliga tillstånd.       Alla noder som skapats i det här dokumentet, oavsett om de har infogats i dokumentet ingår i den här händelsen."
  syntax:
    content: public event System.Xml.XmlNodeChangedEventHandler NodeRemoving;
    return:
      type: System.Xml.XmlNodeChangedEventHandler
      description: "Som ska läggas till."
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlDocument.NodeType
  id: NodeType
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: NodeType
  nameWithType: XmlDocument.NodeType
  fullName: System.Xml.XmlDocument.NodeType
  type: Property
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Hämtar typ av den aktuella noden."
  syntax:
    content: public override System.Xml.XmlNodeType NodeType { get; }
    return:
      type: System.Xml.XmlNodeType
      description: "Nodtypen. För <xref uid=&quot;langword_csharp_XmlDocument&quot; name=&quot;XmlDocument&quot; href=&quot;&quot;> </xref> noder, det här värdet är XmlNodeType.Document."
  overload: System.Xml.XmlDocument.NodeType*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlDocument.OwnerDocument
  id: OwnerDocument
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: OwnerDocument
  nameWithType: XmlDocument.OwnerDocument
  fullName: System.Xml.XmlDocument.OwnerDocument
  type: Property
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Hämtar den <xref href=&quot;System.Xml.XmlDocument&quot;> </xref> som den aktuella noden tillhör."
  syntax:
    content: public override System.Xml.XmlDocument OwnerDocument { get; }
    return:
      type: System.Xml.XmlDocument
      description: "För <xref uid=&quot;langword_csharp_XmlDocument&quot; name=&quot;XmlDocument&quot; href=&quot;&quot;> </xref> noder (<xref:System.Xml.XmlDocument.NodeType*> är lika med XmlNodeType.Document), den här egenskapen returnerar alltid <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>.</xref:System.Xml.XmlDocument.NodeType*>"
  overload: System.Xml.XmlDocument.OwnerDocument*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlDocument.ParentNode
  id: ParentNode
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: ParentNode
  nameWithType: XmlDocument.ParentNode
  fullName: System.Xml.XmlDocument.ParentNode
  type: Property
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Hämtar den överordnade noden till den här noden (för noder som kan ha överordnade)."
  syntax:
    content: public override System.Xml.XmlNode ParentNode { get; }
    return:
      type: System.Xml.XmlNode
      description: "Returnerar alltid <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  overload: System.Xml.XmlDocument.ParentNode*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlDocument.PreserveWhitespace
  id: PreserveWhitespace
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: PreserveWhitespace
  nameWithType: XmlDocument.PreserveWhitespace
  fullName: System.Xml.XmlDocument.PreserveWhitespace
  type: Property
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Hämtar eller anger ett värde som anger om du vill behålla blanksteg i elementinnehåll."
  remarks: "Den här egenskapen anger hur blanksteg hanteras under inläsningen och spara processen.       Om `PreserveWhitespace` är `true` innan <xref:System.Xml.XmlDocument.Load%2A>eller <xref:System.Xml.XmlDocument.LoadXml%2A>är anropas blanksteg noder är bevarad, annars, om den här egenskapen är `false`betydande tomma utrymmen bevaras, inte är blanksteg.</xref:System.Xml.XmlDocument.LoadXml%2A> </xref:System.Xml.XmlDocument.Load%2A>       Om `PreserveWhitespace` är `true` innan <xref:System.Xml.XmlDocument.Save%2A>är anropas är tomt utrymme i dokumentet bevarad i utdata, annars, om den här egenskapen är `false`, `XmlDocument` automatiskt indrag utdata.</xref:System.Xml.XmlDocument.Save%2A>       Den här metoden är ett Microsoft-tillägg för den modell DOM (Document Object)."
  example:
  - "The following example shows how to strip white space from a file.  \n  \n [!code-cs[Classic WebData XmlDocument.PreserveWhitespace Example#1](~/add/codesnippet/csharp/p-system.xml.xmldocument_6_1.cs)]\n [!code-vb[Classic WebData XmlDocument.PreserveWhitespace Example#1](~/add/codesnippet/visualbasic/p-system.xml.xmldocument_6_1.vb)]\n [!code-cpp[Classic WebData XmlDocument.PreserveWhitespace Example#1](~/add/codesnippet/cpp/p-system.xml.xmldocument_6_1.cpp)]  \n  \n The example uses the file `book.xml` as input.  \n  \n [!code-xml[Classic WebData XmlDocument.PreserveWhitespace Example#2](~/add/codesnippet/xml/p-system.xml.xmldocument_6_2.xml)]"
  syntax:
    content: public bool PreserveWhitespace { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>att bevara blanksteg; Annars <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. Standardvärdet är <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Xml.XmlDocument.PreserveWhitespace*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlDocument.ReadNode(System.Xml.XmlReader)
  id: ReadNode(System.Xml.XmlReader)
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: ReadNode(XmlReader)
  nameWithType: XmlDocument.ReadNode(XmlReader)
  fullName: System.Xml.XmlDocument.ReadNode(XmlReader)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Skapar en <xref href=&quot;System.Xml.XmlNode&quot;> </xref> objekt baserat på informationen i <xref:System.Xml.XmlReader>.</xref:System.Xml.XmlReader> Läsaren måste placeras på en nod eller ett attribut."
  remarks: "Läser en `XmlNode` från det angivna reader och placerar läsaren på nästa nod. Den här metoden skapar typ av `XmlNode` matchar den <xref:System.Xml.XmlNode.NodeType%2A>på som läsaren är för närvarande är placerad.</xref:System.Xml.XmlNode.NodeType%2A> (Om läsaren är i tillståndet inledande `ReadNode` avancerar läsaren till den första noden och sedan fungerar på noden.)       Om läsaren är placerad i början av ett element `ReadNode` läser alla attribut och alla underordnade noder, upp till och inklusive sluttaggen för den aktuella noden. Den `XmlNode` returnerade innehåller underträd som representerar allt läsa. Läsaren är placerad direkt efter sluttaggen.       `ReadNode`kan också läsa attribut, men den i det här fallet automatiskt inte läsaren till nästa attributet. Detta kan du skriva följande C#-kod: ```   XmlDocument doc = new XmlDocument();   while (reader.MoveToNextAttribute())   {     XmlNode a = doc.ReadNode(reader);     // Do some more processing.   }   ``` `ReadNode` använda attributvärdet, vilket innebär att när du anropar `ReadNode` på ett attribut <xref:System.Xml.XmlReader.ReadAttributeValue%2A?displayProperty=fullName>returnerar `false`.</xref:System.Xml.XmlReader.ReadAttributeValue%2A?displayProperty=fullName>       "
  example:
  - "The following example uses `ReadNode` to create a new node and then inserts the new node into the document.  \n  \n [!code-cs[Classic WebData XmlDocument.ReadNode Example#1](~/add/codesnippet/csharp/m-system.xml.xmldocument_21_1.cs)]\n [!code-cpp[Classic WebData XmlDocument.ReadNode Example#1](~/add/codesnippet/cpp/m-system.xml.xmldocument_21_1.cpp)]\n [!code-vb[Classic WebData XmlDocument.ReadNode Example#1](~/add/codesnippet/visualbasic/m-system.xml.xmldocument_21_1.vb)]  \n  \n The example uses the file, `cd.xml`, as input.  \n  \n [!code-xml[Classic WebData XmlDocument.ReadNode Example#2](~/add/codesnippet/xml/m-system.xml.xmldocument_21_2.xml)]"
  syntax:
    content: public virtual System.Xml.XmlNode ReadNode (System.Xml.XmlReader reader);
    parameters:
    - id: reader
      type: System.Xml.XmlReader
      description: "XML-källa"
    return:
      type: System.Xml.XmlNode
      description: "Den nya <xref uid=&quot;langword_csharp_XmlNode&quot; name=&quot;XmlNode&quot; href=&quot;&quot;> </xref> eller <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> om det finns inga fler noder."
  overload: System.Xml.XmlDocument.ReadNode*
  exceptions:
  - type: System.NullReferenceException
    commentId: T:System.NullReferenceException
    description: "Läsaren är placerad på en nodtyp inte översätter till en giltig DOM-nod (till exempel EndElement eller EndEntity)."
  platform:
  - net462
- uid: System.Xml.XmlDocument.Save(System.IO.Stream)
  id: Save(System.IO.Stream)
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: Save(Stream)
  nameWithType: XmlDocument.Save(Stream)
  fullName: System.Xml.XmlDocument.Save(Stream)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Sparar XML-dokument i den angivna dataströmmen."
  remarks: "Blanksteg bevaras om <xref:System.Xml.XmlDocument.PreserveWhitespace%2A>är inställd på `true`.</xref:System.Xml.XmlDocument.PreserveWhitespace%2A>       XmlDeclaration i aktuellt `XmlDocument` objektet anger attributet kodning i sparat dokument. Värdet för attributet kodning hämtas från den <xref:System.Xml.XmlDeclaration.Encoding%2A?displayProperty=fullName>egenskapen.</xref:System.Xml.XmlDeclaration.Encoding%2A?displayProperty=fullName> Om den `XmlDocument` har inte har en XmlDeclaration, eller om XmlDeclaration inte har attributet kodning sparat dokument har inte något antingen.       När dokumentet sparas genereras xmlns-attribut för att bevara nod-identitet (lokalt namn + namnområdes-URI) på rätt sätt. Till exempel följande C#-koden ```   XmlDocument doc = new XmlDocument();   doc.AppendChild(doc.CreateElement(&quot;item&quot;,&quot;urn:1&quot;));   doc.Save(Console.Out);   ``` genererar XML-filerna attributet `<item xmls=&quot;urn:1&quot;/>`.       Den här metoden är ett Microsoft-tillägg för den modell DOM (Document Object).       Observera att det bara den <xref:System.Xml.XmlDocument.Save%2A>metoden tillämpar ett giltigt XML-dokument.</xref:System.Xml.XmlDocument.Save%2A> Alla andra `Save` överlagringar endast garantera ett giltigt fragment."
  syntax:
    content: public virtual void Save (System.IO.Stream outStream);
    parameters:
    - id: outStream
      type: System.IO.Stream
      description: "Dataströmmen som du vill spara."
  overload: System.Xml.XmlDocument.Save*
  exceptions:
  - type: System.Xml.XmlException
    commentId: T:System.Xml.XmlException
    description: "Åtgärden resulterar inte i ett giltigt XML-dokument (t.ex, inga dokument element eller dubblett XML-deklarationer)."
  platform:
  - net462
- uid: System.Xml.XmlDocument.Save(System.IO.TextWriter)
  id: Save(System.IO.TextWriter)
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: Save(TextWriter)
  nameWithType: XmlDocument.Save(TextWriter)
  fullName: System.Xml.XmlDocument.Save(TextWriter)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Sparar XML-dokumentet till den angivna <xref:System.IO.TextWriter>.</xref:System.IO.TextWriter>"
  remarks: "Kodning i den `TextWriter` anger kodning som skrivs ut (kodning av noden XmlDeclaration ersättas med kodning av den `TextWriter`). Om det fanns ingen kodning som anges på den `TextWriter`, `XmlDocument` sparas utan attributet kodning.       Den här metoden är ett Microsoft-tillägg för den modell DOM (Document Object).       Observera att det bara den <xref:System.Xml.XmlDocument.Save%2A>metoden tillämpar ett giltigt XML-dokument.</xref:System.Xml.XmlDocument.Save%2A> Alla andra `Save` överlagringar endast garantera ett giltigt fragment."
  syntax:
    content: public virtual void Save (System.IO.TextWriter writer);
    parameters:
    - id: writer
      type: System.IO.TextWriter
      description: "Den <xref uid=&quot;langword_csharp_TextWriter&quot; name=&quot;TextWriter&quot; href=&quot;&quot;> </xref> som du vill spara."
  overload: System.Xml.XmlDocument.Save*
  exceptions:
  - type: System.Xml.XmlException
    commentId: T:System.Xml.XmlException
    description: "Åtgärden resulterar inte i ett giltigt XML-dokument (t.ex, inga dokument element eller dubblett XML-deklarationer)."
  platform:
  - net462
- uid: System.Xml.XmlDocument.Save(System.String)
  id: Save(System.String)
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: Save(String)
  nameWithType: XmlDocument.Save(String)
  fullName: System.Xml.XmlDocument.Save(String)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Sparar XML-dokumentet för den angivna filen. Om den angivna filen finns den här metoden skriver över den."
  remarks: "Blanksteg bevaras i utdata filen endast om <xref:System.Xml.XmlDocument.PreserveWhitespace%2A>är inställd på `true`.</xref:System.Xml.XmlDocument.PreserveWhitespace%2A>       XmlDeclaration i aktuellt `XmlDocument` objektet anger attributet kodning i sparat dokument. Värdet för attributet kodning hämtas från den <xref:System.Xml.XmlDeclaration.Encoding%2A?displayProperty=fullName>egenskapen.</xref:System.Xml.XmlDeclaration.Encoding%2A?displayProperty=fullName> Om den `XmlDocument` har inte har en XmlDeclaration, eller om XmlDeclaration inte har attributet kodning sparat dokument har inte något antingen.       När dokumentet sparas genereras xmlns-attribut för att bevara nod-identitet (lokalt namn + namnområdes-URI) på rätt sätt. Till exempel följande C#-koden ```   XmlDocument doc = new XmlDocument();   doc.AppendChild(doc.CreateElement(&quot;item&quot;,&quot;urn:1&quot;));   doc.Save(Console.Out);   ``` genererar XML-filerna attributet `<item xmls=&quot;urn:1&quot;/>`.       Den här metoden är ett Microsoft-tillägg för den modell DOM (Document Object).       Observera att endast spara metoden tillämpar ett giltigt XML-dokument. Alla andra `Save` överlagringar endast garantera ett giltigt fragment."
  example:
  - "The following example loads XML into an XmlDocument object, modifies it, and then saves it to a file named data.xml.  \n  \n [!code-cs[Classic WebData XmlDocument.Save Example#1](~/add/codesnippet/csharp/m-system.xml.xmldocument_18_1.cs)]\n [!code-vb[Classic WebData XmlDocument.Save Example#1](~/add/codesnippet/visualbasic/m-system.xml.xmldocument_18_1.vb)]\n [!code-cpp[Classic WebData XmlDocument.Save Example#1](~/add/codesnippet/cpp/m-system.xml.xmldocument_18_1.cpp)]  \n  \n The data.xml file will contain the following XML: `<item><name>wrench</name><price>10.95</price></item>`."
  syntax:
    content: public virtual void Save (string filename);
    parameters:
    - id: filename
      type: System.String
      description: "Platsen för filen där du vill spara dokumentet."
  overload: System.Xml.XmlDocument.Save*
  exceptions:
  - type: System.Xml.XmlException
    commentId: T:System.Xml.XmlException
    description: "Åtgärden resulterar inte i ett giltigt XML-dokument (t.ex, inga dokument element eller dubblett XML-deklarationer)."
  platform:
  - net462
- uid: System.Xml.XmlDocument.Save(System.Xml.XmlWriter)
  id: Save(System.Xml.XmlWriter)
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: Save(XmlWriter)
  nameWithType: XmlDocument.Save(XmlWriter)
  fullName: System.Xml.XmlDocument.Save(XmlWriter)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Sparar XML-dokumentet till den angivna <xref:System.Xml.XmlWriter>.</xref:System.Xml.XmlWriter>"
  remarks: "Blanksteg bevaras om <xref:System.Xml.XmlDocument.PreserveWhitespace%2A>är inställd på `true`.</xref:System.Xml.XmlDocument.PreserveWhitespace%2A>       Kodning i den `XmlWriter` anger kodning som skrivs ut (kodning av noden XmlDeclaration ersättas med kodning av den `XmlWriter`). Om det fanns ingen kodning som anges på den `XmlWriter`, `XmlDocument` sparas utan attributet kodning.       När dokumentet sparas genereras xmlns-attribut för att bevara nod-identitet (LocalName + NamespaceURI) korrekt. Till exempel följande C#-koden ```   XmlDocument doc = new XmlDocument();   doc.AppendChild(doc.CreateElement(&quot;item&quot;,&quot;urn:1&quot;));   doc.Save(Console.Out);   ``` genererar det här attributet i XML-filerna: ```   <item       xmls=&quot;urn:1&quot;/>   ``` den här metoden är ett Microsoft-tillägg för den modell DOM (Document Object).       Observera att det bara den <xref:System.Xml.XmlDocument.Save%2A>metoden tillämpar ett giltigt XML-dokument.</xref:System.Xml.XmlDocument.Save%2A> Alla andra `Save` överlagringar endast garantera ett giltigt fragment."
  example:
  - "The following example loads XML into an `XmlDocument` object and saves it out to a file.  \n  \n [!code-cpp[Classic WebData XmlDocument.LoadXml Example#1](~/add/codesnippet/cpp/m-system.xml.xmldocument_5_1.cpp)]\n [!code-cs[Classic WebData XmlDocument.LoadXml Example#1](~/add/codesnippet/csharp/m-system.xml.xmldocument_5_1.cs)]\n [!code-vb[Classic WebData XmlDocument.LoadXml Example#1](~/add/codesnippet/visualbasic/m-system.xml.xmldocument_5_1.vb)]"
  syntax:
    content: public virtual void Save (System.Xml.XmlWriter w);
    parameters:
    - id: w
      type: System.Xml.XmlWriter
      description: "Den <xref uid=&quot;langword_csharp_XmlWriter&quot; name=&quot;XmlWriter&quot; href=&quot;&quot;> </xref> som du vill spara."
  overload: System.Xml.XmlDocument.Save*
  exceptions:
  - type: System.Xml.XmlException
    commentId: T:System.Xml.XmlException
    description: "Åtgärden resulterar inte i ett giltigt XML-dokument (t.ex, inga dokument element eller dubblett XML-deklarationer)."
  platform:
  - net462
- uid: System.Xml.XmlDocument.SchemaInfo
  id: SchemaInfo
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: SchemaInfo
  nameWithType: XmlDocument.SchemaInfo
  fullName: System.Xml.XmlDocument.SchemaInfo
  type: Property
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Returnerar efter-Schema-validering-infouppsättning (PSVI) för noden."
  remarks: "PSVI innehållet i den här egenskapen anges efter att noden har verifierats.       Den här egenskapen är ett Microsoft-tillägg för den modell DOM (Document Object)."
  syntax:
    content: public override System.Xml.Schema.IXmlSchemaInfo SchemaInfo { get; }
    return:
      type: System.Xml.Schema.IXmlSchemaInfo
      description: "Den <xref href=&quot;System.Xml.Schema.IXmlSchemaInfo&quot;> </xref> objekt som representerar PSVI för noden."
  overload: System.Xml.XmlDocument.SchemaInfo*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlDocument.Schemas
  id: Schemas
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: Schemas
  nameWithType: XmlDocument.Schemas
  fullName: System.Xml.XmlDocument.Schemas
  type: Property
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Hämtar eller anger den <xref href=&quot;System.Xml.Schema.XmlSchemaSet&quot;> </xref> objektet som är associerat med den här <xref href=&quot;System.Xml.XmlDocument&quot;> </xref>."
  remarks: "Scheman som finns i en <xref:System.Xml.Schema.XmlSchemaSet>som är associerat med en <xref:System.Xml.XmlDocument>objektet används för verifiering när den <xref:System.Xml.XmlDocument.Validate%2A>metoden för en <xref:System.Xml.XmlDocument>körs.</xref:System.Xml.XmlDocument> </xref:System.Xml.XmlDocument.Validate%2A> </xref:System.Xml.XmlDocument> </xref:System.Xml.Schema.XmlSchemaSet>       När en <xref:System.Xml.XmlDocument>objektet har initierats med XML-data från en <xref:System.Xml.XmlReader>objekt, den <xref:System.Xml.Schema.XmlSchemaSet>objekt läses från den <xref:System.Xml.XmlReaderSettings.Schemas%2A>egenskapen för den <xref:System.Xml.XmlReader>objekt.</xref:System.Xml.XmlReader> </xref:System.Xml.XmlReaderSettings.Schemas%2A> </xref:System.Xml.Schema.XmlSchemaSet> </xref:System.Xml.XmlReader> </xref:System.Xml.XmlDocument>"
  syntax:
    content: public System.Xml.Schema.XmlSchemaSet Schemas { get; set; }
    return:
      type: System.Xml.Schema.XmlSchemaSet
      description: "En <xref href=&quot;System.Xml.Schema.XmlSchemaSet&quot;> </xref> objekt som innehåller XML Schema Definition Language (XSD)-scheman som är associerade med den här <xref href=&quot;System.Xml.XmlDocument&quot;> </xref>, annars en tom <xref href=&quot;System.Xml.Schema.XmlSchemaSet&quot;> </xref> objekt."
  overload: System.Xml.XmlDocument.Schemas*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlDocument.Validate(System.Xml.Schema.ValidationEventHandler)
  id: Validate(System.Xml.Schema.ValidationEventHandler)
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: Validate(ValidationEventHandler)
  nameWithType: XmlDocument.Validate(ValidationEventHandler)
  fullName: System.Xml.XmlDocument.Validate(ValidationEventHandler)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Verifierar den <xref href=&quot;System.Xml.XmlDocument&quot;> </xref> mot XML Schema Definition Language (XSD) scheman som finns i den <xref:System.Xml.XmlDocument.Schemas*>egenskapen.</xref:System.Xml.XmlDocument.Schemas*>"
  remarks: "Validate-metoden verifierar XML-data i den <xref:System.Xml.XmlDocument>mot scheman som finns i den <xref:System.Xml.XmlDocument.Schemas%2A>egenskapen.</xref:System.Xml.XmlDocument.Schemas%2A> </xref:System.Xml.XmlDocument> Validate-metoden utför infouppsättning förstärkning. Mer specifikt när valideringen är slutförd schemat standarder tillämpas textvärden konverteras till atomiska värden efter behov och typinformation är associerad med validerade information som. Resultatet är ett tidigare otypat XML-underträd i den <xref:System.Xml.XmlDocument>ersätts med ett skrivna underträd.</xref:System.Xml.XmlDocument>       Följande är viktigt att tänka på när du använder Validate-metoden.      -Platsen schematips som `xsi:schemaLocation` eller `xsi:noNamespaceSchemaLocation` ignoreras.      -Infogade scheman ignoreras.      -Om schemavalideringsfel uppstår vid verifiering av <xref:System.Xml.XmlDocument>blir delvis verifieras med vissa noder med rätt typinformation och vissa utan.</xref:System.Xml.XmlDocument>      -Valideringen inkluderar kontroll för referens unikhet och begränsningar (`xs:ID`, `xs:IDREF`, `xs:key`, `xs:keyref`, och `xs:unique`)."
  example:
  - "The following example illustrates use of the Validate method. The example creates an <xref:System.Xml.XmlDocument> that contains an associated XSD schema using the <xref:System.Xml.XmlReaderSettings> and <xref:System.Xml.XmlReader> objects. The example then uses the <xref:System.Xml.XPath.XPathNavigator> class to incorrectly modify the typed value of an element in the XML document generating a schema validation error.  \n  \n [!code-cs[XPathValidation#1](~/add/codesnippet/csharp/m-system.xml.xmldocument_19_1.cs)]\n [!code-cpp[XPathValidation#1](~/add/codesnippet/cpp/m-system.xml.xmldocument_19_1.cpp)]\n [!code-vb[XPathValidation#1](~/add/codesnippet/visualbasic/m-system.xml.xmldocument_19_1.vb)]  \n  \n The example takes the `contosoBooks.xml` and `contosoBooks.xsd` files as input.  \n  \n [!code-xml[XPathXMLExamples#2](~/add/codesnippet/xml/m-system.xml.xmldocument_19_2.xml)]  \n  \n [!code-xml[XPathXMLExamples#3](~/add/codesnippet/xml/m-system.xml.xmldocument_19_3.xsd)]"
  syntax:
    content: public void Validate (System.Xml.Schema.ValidationEventHandler validationEventHandler);
    parameters:
    - id: validationEventHandler
      type: System.Xml.Schema.ValidationEventHandler
      description: "Den <xref href=&quot;System.Xml.Schema.ValidationEventHandler&quot;> </xref> objekt som tar emot information om schemat valideringsvarningar och fel."
  overload: System.Xml.XmlDocument.Validate*
  exceptions:
  - type: System.Xml.Schema.XmlSchemaValidationException
    commentId: T:System.Xml.Schema.XmlSchemaValidationException
    description: "En händelse för validering av schemat inträffat och inga <xref href=&quot;System.Xml.Schema.ValidationEventHandler&quot;> </xref> objekt har angetts."
  platform:
  - net462
- uid: System.Xml.XmlDocument.Validate(System.Xml.Schema.ValidationEventHandler,System.Xml.XmlNode)
  id: Validate(System.Xml.Schema.ValidationEventHandler,System.Xml.XmlNode)
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: Validate(ValidationEventHandler,XmlNode)
  nameWithType: XmlDocument.Validate(ValidationEventHandler,XmlNode)
  fullName: System.Xml.XmlDocument.Validate(ValidationEventHandler,XmlNode)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Verifierar den <xref href=&quot;System.Xml.XmlNode&quot;> </xref> mot XML Schema Definition Language (XSD)-scheman i det angivna objektet i <xref:System.Xml.XmlDocument.Schemas*>egenskap.</xref:System.Xml.XmlDocument.Schemas*>"
  remarks: "Validate-metoden verifierar XML-data i den <xref:System.Xml.XmlNode>objektet mot scheman som finns i den <xref:System.Xml.XmlDocument.Schemas%2A>egenskapen.</xref:System.Xml.XmlDocument.Schemas%2A> </xref:System.Xml.XmlNode> Validate-metoden utför infouppsättning förstärkning. Mer specifikt när valideringen är slutförd schemat standarder tillämpas textvärden konverteras till atomiska värden efter behov och typinformation är associerad med validerade information som. Resultatet är ett tidigare otypat XML-underträd i den <xref:System.Xml.XmlDocument>ersätts med ett skrivna underträd.</xref:System.Xml.XmlDocument>       Följande är viktigt att tänka på när du använder Validate-metoden.      -Platsen schematips som `xsi:schemaLocation` eller `xsi:noNamespaceSchemaLocation` ignoreras.      -Infogade scheman ignoreras.      -Om schemavalideringsfel uppstår vid verifiering av <xref:System.Xml.XmlDocument>blir delvis verifieras med vissa noder med rätt typinformation och vissa utan.</xref:System.Xml.XmlDocument>       Om noden för att validera rotnoden valideringsprocessen omfattar söker efter referens unikhet och begränsningar (`xs:ID`, `xs:IDREF`, `xs:key`, `xs:keyref`, och `xs:unique`), annars referens unikhet och begränsningar har uteslutits."
  example:
  - For an example of the Validate method, see the <xref:System.Xml.XmlDocument.Validate%2A> method.
  syntax:
    content: public void Validate (System.Xml.Schema.ValidationEventHandler validationEventHandler, System.Xml.XmlNode nodeToValidate);
    parameters:
    - id: validationEventHandler
      type: System.Xml.Schema.ValidationEventHandler
      description: "Den <xref href=&quot;System.Xml.Schema.ValidationEventHandler&quot;> </xref> objekt som tar emot information om schemat valideringsvarningar och fel."
    - id: nodeToValidate
      type: System.Xml.XmlNode
      description: "Den <xref href=&quot;System.Xml.XmlNode&quot;> </xref> objekt som skapas från en <xref href=&quot;System.Xml.XmlDocument&quot;> </xref> att validera."
  overload: System.Xml.XmlDocument.Validate*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Den <xref href=&quot;System.Xml.XmlNode&quot;> </xref> objektparameter skapades inte från en <xref href=&quot;System.Xml.XmlDocument&quot;> </xref>."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Den <xref href=&quot;System.Xml.XmlNode&quot;> </xref> objekt som parameter är inte ett element, attribut, Dokumentfragment eller rotnoden."
  - type: System.Xml.Schema.XmlSchemaValidationException
    commentId: T:System.Xml.Schema.XmlSchemaValidationException
    description: "En händelse för validering av schemat inträffat och inga <xref href=&quot;System.Xml.Schema.ValidationEventHandler&quot;> </xref> objekt har angetts."
  platform:
  - net462
- uid: System.Xml.XmlDocument.WriteContentTo(System.Xml.XmlWriter)
  id: WriteContentTo(System.Xml.XmlWriter)
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: WriteContentTo(XmlWriter)
  nameWithType: XmlDocument.WriteContentTo(XmlWriter)
  fullName: System.Xml.XmlDocument.WriteContentTo(XmlWriter)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Sparar alla underordnade till den <xref uid=&quot;langword_csharp_XmlDocument&quot; name=&quot;XmlDocument&quot; href=&quot;&quot;> </xref> noden till den angivna <xref:System.Xml.XmlWriter>.</xref:System.Xml.XmlWriter>"
  remarks: "Den här metoden är ett Microsoft-tillägg för den modell DOM (Document Object). Den motsvarar funktionellt det <xref:System.Xml.XmlDocument.InnerXml%2A>egenskap.</xref:System.Xml.XmlDocument.InnerXml%2A>       Den <xref:System.Xml.XmlDeclaration.Encoding%2A?displayProperty=fullName>egenskapen anger kodning som skrivs ut.</xref:System.Xml.XmlDeclaration.Encoding%2A?displayProperty=fullName> Om den `Encoding` egenskapen inte har ett värde i `XmlDocument` skrivs utan attributet kodning."
  example:
  - "The following example displays the document onscreen.  \n  \n [!code-cs[Classic WebData XmlDocument.WriteContentTo Example#1](~/add/codesnippet/csharp/m-system.xml.xmldocument_0_1.cs)]\n [!code-vb[Classic WebData XmlDocument.WriteContentTo Example#1](~/add/codesnippet/visualbasic/m-system.xml.xmldocument_0_1.vb)]\n [!code-cpp[Classic WebData XmlDocument.WriteContentTo Example#1](~/add/codesnippet/cpp/m-system.xml.xmldocument_0_1.cpp)]"
  syntax:
    content: public override void WriteContentTo (System.Xml.XmlWriter xw);
    parameters:
    - id: xw
      type: System.Xml.XmlWriter
      description: "Den <xref uid=&quot;langword_csharp_XmlWriter&quot; name=&quot;XmlWriter&quot; href=&quot;&quot;> </xref> som du vill spara."
  overload: System.Xml.XmlDocument.WriteContentTo*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlDocument.WriteTo(System.Xml.XmlWriter)
  id: WriteTo(System.Xml.XmlWriter)
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: WriteTo(XmlWriter)
  nameWithType: XmlDocument.WriteTo(XmlWriter)
  fullName: System.Xml.XmlDocument.WriteTo(XmlWriter)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Sparar den <xref uid=&quot;langword_csharp_XmlDocument&quot; name=&quot;XmlDocument&quot; href=&quot;&quot;> </xref> noden till den angivna <xref:System.Xml.XmlWriter>.</xref:System.Xml.XmlWriter>"
  remarks: "Den här metoden är ett Microsoft-tillägg för den modell DOM (Document Object). Den motsvarar funktionellt det <xref:System.Xml.XmlNode.OuterXml%2A>egenskap.</xref:System.Xml.XmlNode.OuterXml%2A>       Den <xref:System.Xml.XmlDeclaration.Encoding%2A?displayProperty=fullName>egenskapen anger kodning som skrivs ut.</xref:System.Xml.XmlDeclaration.Encoding%2A?displayProperty=fullName> Om den `Encoding` egenskapen inte har ett värde i `XmlDocument` skrivs utan attributet kodning."
  example:
  - "The following example displays the document onscreen.  \n  \n [!code-cpp[Classic WebData XmlDocument.WriteTo Example#1](~/add/codesnippet/cpp/m-system.xml.xmldocument_6_1.cpp)]\n [!code-vb[Classic WebData XmlDocument.WriteTo Example#1](~/add/codesnippet/visualbasic/m-system.xml.xmldocument_6_1.vb)]\n [!code-cs[Classic WebData XmlDocument.WriteTo Example#1](~/add/codesnippet/csharp/m-system.xml.xmldocument_6_1.cs)]"
  syntax:
    content: public override void WriteTo (System.Xml.XmlWriter w);
    parameters:
    - id: w
      type: System.Xml.XmlWriter
      description: "Den <xref uid=&quot;langword_csharp_XmlWriter&quot; name=&quot;XmlWriter&quot; href=&quot;&quot;> </xref> som du vill spara."
  overload: System.Xml.XmlDocument.WriteTo*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlDocument.XmlResolver
  id: XmlResolver
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: XmlResolver
  nameWithType: XmlDocument.XmlResolver
  fullName: System.Xml.XmlDocument.XmlResolver
  type: Property
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Anger den <xref href=&quot;System.Xml.XmlResolver&quot;> </xref> ska användas för att lösa externa resurser."
  remarks: "Den `XmlResolver` kan användas för att läsa in DTD: er eller expandera entitetsreferenser. Med den <xref:System.Xml.XmlResolver.Credentials%2A?displayProperty=fullName>egenskap, kan du ange autentiseringsuppgifter på den `XmlResolver` att komma åt resurser som lagras på en skyddad nätverksresurs.</xref:System.Xml.XmlResolver.Credentials%2A?displayProperty=fullName>      – Om dokumentet inte har lästs in med ett <xref:System.Xml.XmlReader>(det vill säga om den har lästs in med en dataström, fil och så vidare) i `XmlResolver` på den `XmlDocument` används alltid.</xref:System.Xml.XmlReader>      – Om dokumentet har lästs in med ett <xref:System.Xml.XmlTextReader>, matchning på den `XmlTextReader` används för att lösa eventuella DTD-referenser i noden DocumentType.</xref:System.Xml.XmlTextReader> Matcharen på den `XmlDocument` används för att expandera alla entitetsreferenser.      – Om dokumentet har lästs in med ett <xref:System.Xml.XmlValidatingReader>, matchning på den `XmlDocument` aldrig används.</xref:System.Xml.XmlValidatingReader>      – Om dokumentet har lästs in med en klass som utökar `XmlReader` och `XmlReader` inte kan lösa entiteter (<xref:System.Xml.XmlReader.CanResolveEntity%2A> returnerar `false`), `XmlResolver` på den `XmlDocument` används för att matcha alla referenser i noden DocumentType och expandera alla entitetsreferenser.</xref:System.Xml.XmlReader.CanResolveEntity%2A>      > [!NOTE] > Om den `XmlDocument` har lästs in med ett <xref:System.Xml.XmlReader>som hade en `XmlResolver` ange, den `XmlResolver` på den `XmlReader` cachelagras inte av den `XmlDocument` när <xref:System.Xml.XmlDocument.Load%2A>har slutförts.</xref:System.Xml.XmlDocument.Load%2A> </xref:System.Xml.XmlReader>       I version 1.1 av.NET Framework avgör förtroendenivå för programmet standardbeteendet om den här egenskapen inte har angetts.       `Fully trusted code:`Dokumentet använder en standard <xref:System.Xml.XmlUrlResolver>med autentiseringsuppgifterna för användaren.</xref:System.Xml.XmlUrlResolver> Om autentisering krävs för att få åtkomst till en nätverksresurs, använder du den `XmlResolver` att ange en `XmlResolver` med autentiseringsuppgifterna som krävs.       `Semi-trusted code:`Den `XmlResolver` egenskap är inställd på `null`. Externa resurser är inte lösta.       Mer information om säkerhet och `XmlResolver` egenskap, se [lösa externa resurser](~/add/includes/ajax-current-ext-md.md).       Den här egenskapen är ett Microsoft-tillägg för den modell DOM (Document Object)."
  example:
  - "The following example loads an XML document which includes a reference to a DTD file. The `XmlResolver` property is used to set the credentials necessary to access the network resource.  \n  \n [!code-cpp[XmlDocument.XmlResolver#1](~/add/codesnippet/cpp/p-system.xml.xmldocument_9_1.cpp)]\n [!code-cs[XmlDocument.XmlResolver#1](~/add/codesnippet/csharp/p-system.xml.xmldocument_9_1.cs)]\n [!code-vb[XmlDocument.XmlResolver#1](~/add/codesnippet/visualbasic/p-system.xml.xmldocument_9_1.vb)]  \n  \n The example uses the following data files as input.  \n  \n `book5.xml`  \n  \n [!code-xml[XmlDocument.XmlResolver#2](~/add/codesnippet/xml/p-system.xml.xmldocument_9_2.xml)]  \n  \n `books.dtd`  \n  \n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]"
  syntax:
    content: public virtual System.Xml.XmlResolver XmlResolver { set; }
    return:
      type: System.Xml.XmlResolver
      description: "The <xref uid=&quot;langword_csharp_XmlResolver&quot; name=&quot;XmlResolver&quot; href=&quot;&quot;></xref> to use.       I version 1.1 av.NET Framework anroparen måste vara fullständigt betrodd för att ange en <xref uid=&quot;langword_csharp_XmlResolver&quot; name=&quot;XmlResolver&quot; href=&quot;&quot;> </xref>."
  overload: System.Xml.XmlDocument.XmlResolver*
  exceptions:
  - type: System.Xml.XmlException
    commentId: T:System.Xml.XmlException
    description: "Den här egenskapen anges till <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> och ett externt DTD eller entiteten har påträffats."
  platform:
  - net462
references:
- uid: System.Xml.XmlNode
  isExternal: false
  name: System.Xml.XmlNode
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.Xml.XmlException
  isExternal: true
  name: System.Xml.XmlException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.IO.PathTooLongException
  isExternal: true
  name: System.IO.PathTooLongException
- uid: System.IO.DirectoryNotFoundException
  isExternal: true
  name: System.IO.DirectoryNotFoundException
- uid: System.IO.IOException
  isExternal: true
  name: System.IO.IOException
- uid: System.UnauthorizedAccessException
  isExternal: true
  name: System.UnauthorizedAccessException
- uid: System.IO.FileNotFoundException
  isExternal: true
  name: System.IO.FileNotFoundException
- uid: System.NotSupportedException
  isExternal: true
  name: System.NotSupportedException
- uid: System.Security.SecurityException
  isExternal: true
  name: System.Security.SecurityException
- uid: System.NullReferenceException
  isExternal: true
  name: System.NullReferenceException
- uid: System.Xml.Schema.XmlSchemaValidationException
  parent: System.Xml.Schema
  isExternal: false
  name: XmlSchemaValidationException
  nameWithType: XmlSchemaValidationException
  fullName: System.Xml.Schema.XmlSchemaValidationException
- uid: System.Xml.XmlDocument.#ctor
  parent: System.Xml.XmlDocument
  isExternal: false
  name: XmlDocument()
  nameWithType: XmlDocument.XmlDocument()
  fullName: System.Xml.XmlDocument.XmlDocument()
- uid: System.Xml.XmlDocument.#ctor(System.Xml.XmlImplementation)
  parent: System.Xml.XmlDocument
  isExternal: false
  name: XmlDocument(XmlImplementation)
  nameWithType: XmlDocument.XmlDocument(XmlImplementation)
  fullName: System.Xml.XmlDocument.XmlDocument(XmlImplementation)
- uid: System.Xml.XmlImplementation
  parent: System.Xml
  isExternal: false
  name: XmlImplementation
  nameWithType: XmlImplementation
  fullName: System.Xml.XmlImplementation
- uid: System.Xml.XmlDocument.#ctor(System.Xml.XmlNameTable)
  parent: System.Xml.XmlDocument
  isExternal: false
  name: XmlDocument(XmlNameTable)
  nameWithType: XmlDocument.XmlDocument(XmlNameTable)
  fullName: System.Xml.XmlDocument.XmlDocument(XmlNameTable)
- uid: System.Xml.XmlNameTable
  parent: System.Xml
  isExternal: true
  name: XmlNameTable
  nameWithType: XmlNameTable
  fullName: System.Xml.XmlNameTable
- uid: System.Xml.XmlDocument.BaseURI
  parent: System.Xml.XmlDocument
  isExternal: false
  name: BaseURI
  nameWithType: XmlDocument.BaseURI
  fullName: System.Xml.XmlDocument.BaseURI
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Xml.XmlDocument.CloneNode(System.Boolean)
  parent: System.Xml.XmlDocument
  isExternal: false
  name: CloneNode(Boolean)
  nameWithType: XmlDocument.CloneNode(Boolean)
  fullName: System.Xml.XmlDocument.CloneNode(Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Xml.XmlDocument.CreateAttribute(System.String)
  parent: System.Xml.XmlDocument
  isExternal: false
  name: CreateAttribute(String)
  nameWithType: XmlDocument.CreateAttribute(String)
  fullName: System.Xml.XmlDocument.CreateAttribute(String)
- uid: System.Xml.XmlAttribute
  parent: System.Xml
  isExternal: false
  name: XmlAttribute
  nameWithType: XmlAttribute
  fullName: System.Xml.XmlAttribute
- uid: System.Xml.XmlDocument.CreateAttribute(System.String,System.String)
  parent: System.Xml.XmlDocument
  isExternal: false
  name: CreateAttribute(String,String)
  nameWithType: XmlDocument.CreateAttribute(String,String)
  fullName: System.Xml.XmlDocument.CreateAttribute(String,String)
- uid: System.Xml.XmlDocument.CreateAttribute(System.String,System.String,System.String)
  parent: System.Xml.XmlDocument
  isExternal: false
  name: CreateAttribute(String,String,String)
  nameWithType: XmlDocument.CreateAttribute(String,String,String)
  fullName: System.Xml.XmlDocument.CreateAttribute(String,String,String)
- uid: System.Xml.XmlDocument.CreateCDataSection(System.String)
  parent: System.Xml.XmlDocument
  isExternal: false
  name: CreateCDataSection(String)
  nameWithType: XmlDocument.CreateCDataSection(String)
  fullName: System.Xml.XmlDocument.CreateCDataSection(String)
- uid: System.Xml.XmlCDataSection
  parent: System.Xml
  isExternal: false
  name: XmlCDataSection
  nameWithType: XmlCDataSection
  fullName: System.Xml.XmlCDataSection
- uid: System.Xml.XmlDocument.CreateComment(System.String)
  parent: System.Xml.XmlDocument
  isExternal: false
  name: CreateComment(String)
  nameWithType: XmlDocument.CreateComment(String)
  fullName: System.Xml.XmlDocument.CreateComment(String)
- uid: System.Xml.XmlComment
  parent: System.Xml
  isExternal: false
  name: XmlComment
  nameWithType: XmlComment
  fullName: System.Xml.XmlComment
- uid: System.Xml.XmlDocument.CreateDefaultAttribute(System.String,System.String,System.String)
  parent: System.Xml.XmlDocument
  isExternal: false
  name: CreateDefaultAttribute(String,String,String)
  nameWithType: XmlDocument.CreateDefaultAttribute(String,String,String)
  fullName: System.Xml.XmlDocument.CreateDefaultAttribute(String,String,String)
- uid: System.Xml.XmlDocument.CreateDocumentFragment
  parent: System.Xml.XmlDocument
  isExternal: false
  name: CreateDocumentFragment()
  nameWithType: XmlDocument.CreateDocumentFragment()
  fullName: System.Xml.XmlDocument.CreateDocumentFragment()
- uid: System.Xml.XmlDocumentFragment
  parent: System.Xml
  isExternal: false
  name: XmlDocumentFragment
  nameWithType: XmlDocumentFragment
  fullName: System.Xml.XmlDocumentFragment
- uid: System.Xml.XmlDocument.CreateDocumentType(System.String,System.String,System.String,System.String)
  parent: System.Xml.XmlDocument
  isExternal: false
  name: CreateDocumentType(String,String,String,String)
  nameWithType: XmlDocument.CreateDocumentType(String,String,String,String)
  fullName: System.Xml.XmlDocument.CreateDocumentType(String,String,String,String)
- uid: System.Xml.XmlDocumentType
  parent: System.Xml
  isExternal: false
  name: XmlDocumentType
  nameWithType: XmlDocumentType
  fullName: System.Xml.XmlDocumentType
- uid: System.Xml.XmlDocument.CreateElement(System.String)
  parent: System.Xml.XmlDocument
  isExternal: false
  name: CreateElement(String)
  nameWithType: XmlDocument.CreateElement(String)
  fullName: System.Xml.XmlDocument.CreateElement(String)
- uid: System.Xml.XmlElement
  parent: System.Xml
  isExternal: false
  name: XmlElement
  nameWithType: XmlElement
  fullName: System.Xml.XmlElement
- uid: System.Xml.XmlDocument.CreateElement(System.String,System.String)
  parent: System.Xml.XmlDocument
  isExternal: false
  name: CreateElement(String,String)
  nameWithType: XmlDocument.CreateElement(String,String)
  fullName: System.Xml.XmlDocument.CreateElement(String,String)
- uid: System.Xml.XmlDocument.CreateElement(System.String,System.String,System.String)
  parent: System.Xml.XmlDocument
  isExternal: false
  name: CreateElement(String,String,String)
  nameWithType: XmlDocument.CreateElement(String,String,String)
  fullName: System.Xml.XmlDocument.CreateElement(String,String,String)
- uid: System.Xml.XmlDocument.CreateEntityReference(System.String)
  parent: System.Xml.XmlDocument
  isExternal: false
  name: CreateEntityReference(String)
  nameWithType: XmlDocument.CreateEntityReference(String)
  fullName: System.Xml.XmlDocument.CreateEntityReference(String)
- uid: System.Xml.XmlEntityReference
  parent: System.Xml
  isExternal: false
  name: XmlEntityReference
  nameWithType: XmlEntityReference
  fullName: System.Xml.XmlEntityReference
- uid: System.Xml.XmlDocument.CreateNavigator
  parent: System.Xml.XmlDocument
  isExternal: false
  name: CreateNavigator()
  nameWithType: XmlDocument.CreateNavigator()
  fullName: System.Xml.XmlDocument.CreateNavigator()
- uid: System.Xml.XPath.XPathNavigator
  parent: System.Xml.XPath
  isExternal: false
  name: XPathNavigator
  nameWithType: XPathNavigator
  fullName: System.Xml.XPath.XPathNavigator
- uid: System.Xml.XmlDocument.CreateNavigator(System.Xml.XmlNode)
  parent: System.Xml.XmlDocument
  isExternal: false
  name: CreateNavigator(XmlNode)
  nameWithType: XmlDocument.CreateNavigator(XmlNode)
  fullName: System.Xml.XmlDocument.CreateNavigator(XmlNode)
- uid: System.Xml.XmlDocument.CreateNode(System.String,System.String,System.String)
  parent: System.Xml.XmlDocument
  isExternal: false
  name: CreateNode(String,String,String)
  nameWithType: XmlDocument.CreateNode(String,String,String)
  fullName: System.Xml.XmlDocument.CreateNode(String,String,String)
- uid: System.Xml.XmlDocument.CreateNode(System.Xml.XmlNodeType,System.String,System.String)
  parent: System.Xml.XmlDocument
  isExternal: false
  name: CreateNode(XmlNodeType,String,String)
  nameWithType: XmlDocument.CreateNode(XmlNodeType,String,String)
  fullName: System.Xml.XmlDocument.CreateNode(XmlNodeType,String,String)
- uid: System.Xml.XmlNodeType
  parent: System.Xml
  isExternal: true
  name: XmlNodeType
  nameWithType: XmlNodeType
  fullName: System.Xml.XmlNodeType
- uid: System.Xml.XmlDocument.CreateNode(System.Xml.XmlNodeType,System.String,System.String,System.String)
  parent: System.Xml.XmlDocument
  isExternal: false
  name: CreateNode(XmlNodeType,String,String,String)
  nameWithType: XmlDocument.CreateNode(XmlNodeType,String,String,String)
  fullName: System.Xml.XmlDocument.CreateNode(XmlNodeType,String,String,String)
- uid: System.Xml.XmlDocument.CreateProcessingInstruction(System.String,System.String)
  parent: System.Xml.XmlDocument
  isExternal: false
  name: CreateProcessingInstruction(String,String)
  nameWithType: XmlDocument.CreateProcessingInstruction(String,String)
  fullName: System.Xml.XmlDocument.CreateProcessingInstruction(String,String)
- uid: System.Xml.XmlProcessingInstruction
  parent: System.Xml
  isExternal: false
  name: XmlProcessingInstruction
  nameWithType: XmlProcessingInstruction
  fullName: System.Xml.XmlProcessingInstruction
- uid: System.Xml.XmlDocument.CreateSignificantWhitespace(System.String)
  parent: System.Xml.XmlDocument
  isExternal: false
  name: CreateSignificantWhitespace(String)
  nameWithType: XmlDocument.CreateSignificantWhitespace(String)
  fullName: System.Xml.XmlDocument.CreateSignificantWhitespace(String)
- uid: System.Xml.XmlSignificantWhitespace
  parent: System.Xml
  isExternal: false
  name: XmlSignificantWhitespace
  nameWithType: XmlSignificantWhitespace
  fullName: System.Xml.XmlSignificantWhitespace
- uid: System.Xml.XmlDocument.CreateTextNode(System.String)
  parent: System.Xml.XmlDocument
  isExternal: false
  name: CreateTextNode(String)
  nameWithType: XmlDocument.CreateTextNode(String)
  fullName: System.Xml.XmlDocument.CreateTextNode(String)
- uid: System.Xml.XmlText
  parent: System.Xml
  isExternal: false
  name: XmlText
  nameWithType: XmlText
  fullName: System.Xml.XmlText
- uid: System.Xml.XmlDocument.CreateWhitespace(System.String)
  parent: System.Xml.XmlDocument
  isExternal: false
  name: CreateWhitespace(String)
  nameWithType: XmlDocument.CreateWhitespace(String)
  fullName: System.Xml.XmlDocument.CreateWhitespace(String)
- uid: System.Xml.XmlWhitespace
  parent: System.Xml
  isExternal: false
  name: XmlWhitespace
  nameWithType: XmlWhitespace
  fullName: System.Xml.XmlWhitespace
- uid: System.Xml.XmlDocument.CreateXmlDeclaration(System.String,System.String,System.String)
  parent: System.Xml.XmlDocument
  isExternal: false
  name: CreateXmlDeclaration(String,String,String)
  nameWithType: XmlDocument.CreateXmlDeclaration(String,String,String)
  fullName: System.Xml.XmlDocument.CreateXmlDeclaration(String,String,String)
- uid: System.Xml.XmlDeclaration
  parent: System.Xml
  isExternal: false
  name: XmlDeclaration
  nameWithType: XmlDeclaration
  fullName: System.Xml.XmlDeclaration
- uid: System.Xml.XmlDocument.DocumentElement
  parent: System.Xml.XmlDocument
  isExternal: false
  name: DocumentElement
  nameWithType: XmlDocument.DocumentElement
  fullName: System.Xml.XmlDocument.DocumentElement
- uid: System.Xml.XmlDocument.DocumentType
  parent: System.Xml.XmlDocument
  isExternal: false
  name: DocumentType
  nameWithType: XmlDocument.DocumentType
  fullName: System.Xml.XmlDocument.DocumentType
- uid: System.Xml.XmlDocument.GetElementById(System.String)
  parent: System.Xml.XmlDocument
  isExternal: false
  name: GetElementById(String)
  nameWithType: XmlDocument.GetElementById(String)
  fullName: System.Xml.XmlDocument.GetElementById(String)
- uid: System.Xml.XmlDocument.GetElementsByTagName(System.String)
  parent: System.Xml.XmlDocument
  isExternal: false
  name: GetElementsByTagName(String)
  nameWithType: XmlDocument.GetElementsByTagName(String)
  fullName: System.Xml.XmlDocument.GetElementsByTagName(String)
- uid: System.Xml.XmlNodeList
  parent: System.Xml
  isExternal: false
  name: XmlNodeList
  nameWithType: XmlNodeList
  fullName: System.Xml.XmlNodeList
- uid: System.Xml.XmlDocument.GetElementsByTagName(System.String,System.String)
  parent: System.Xml.XmlDocument
  isExternal: false
  name: GetElementsByTagName(String,String)
  nameWithType: XmlDocument.GetElementsByTagName(String,String)
  fullName: System.Xml.XmlDocument.GetElementsByTagName(String,String)
- uid: System.Xml.XmlDocument.Implementation
  parent: System.Xml.XmlDocument
  isExternal: false
  name: Implementation
  nameWithType: XmlDocument.Implementation
  fullName: System.Xml.XmlDocument.Implementation
- uid: System.Xml.XmlDocument.ImportNode(System.Xml.XmlNode,System.Boolean)
  parent: System.Xml.XmlDocument
  isExternal: false
  name: ImportNode(XmlNode,Boolean)
  nameWithType: XmlDocument.ImportNode(XmlNode,Boolean)
  fullName: System.Xml.XmlDocument.ImportNode(XmlNode,Boolean)
- uid: System.Xml.XmlDocument.InnerText
  parent: System.Xml.XmlDocument
  isExternal: false
  name: InnerText
  nameWithType: XmlDocument.InnerText
  fullName: System.Xml.XmlDocument.InnerText
- uid: System.Xml.XmlDocument.InnerXml
  parent: System.Xml.XmlDocument
  isExternal: false
  name: InnerXml
  nameWithType: XmlDocument.InnerXml
  fullName: System.Xml.XmlDocument.InnerXml
- uid: System.Xml.XmlDocument.IsReadOnly
  parent: System.Xml.XmlDocument
  isExternal: false
  name: IsReadOnly
  nameWithType: XmlDocument.IsReadOnly
  fullName: System.Xml.XmlDocument.IsReadOnly
- uid: System.Xml.XmlDocument.Load(System.IO.Stream)
  parent: System.Xml.XmlDocument
  isExternal: false
  name: Load(Stream)
  nameWithType: XmlDocument.Load(Stream)
  fullName: System.Xml.XmlDocument.Load(Stream)
- uid: System.IO.Stream
  parent: System.IO
  isExternal: true
  name: Stream
  nameWithType: Stream
  fullName: System.IO.Stream
- uid: System.Xml.XmlDocument.Load(System.IO.TextReader)
  parent: System.Xml.XmlDocument
  isExternal: false
  name: Load(TextReader)
  nameWithType: XmlDocument.Load(TextReader)
  fullName: System.Xml.XmlDocument.Load(TextReader)
- uid: System.IO.TextReader
  parent: System.IO
  isExternal: true
  name: TextReader
  nameWithType: TextReader
  fullName: System.IO.TextReader
- uid: System.Xml.XmlDocument.Load(System.String)
  parent: System.Xml.XmlDocument
  isExternal: false
  name: Load(String)
  nameWithType: XmlDocument.Load(String)
  fullName: System.Xml.XmlDocument.Load(String)
- uid: System.Xml.XmlDocument.Load(System.Xml.XmlReader)
  parent: System.Xml.XmlDocument
  isExternal: false
  name: Load(XmlReader)
  nameWithType: XmlDocument.Load(XmlReader)
  fullName: System.Xml.XmlDocument.Load(XmlReader)
- uid: System.Xml.XmlReader
  parent: System.Xml
  isExternal: true
  name: XmlReader
  nameWithType: XmlReader
  fullName: System.Xml.XmlReader
- uid: System.Xml.XmlDocument.LoadXml(System.String)
  parent: System.Xml.XmlDocument
  isExternal: false
  name: LoadXml(String)
  nameWithType: XmlDocument.LoadXml(String)
  fullName: System.Xml.XmlDocument.LoadXml(String)
- uid: System.Xml.XmlDocument.LocalName
  parent: System.Xml.XmlDocument
  isExternal: false
  name: LocalName
  nameWithType: XmlDocument.LocalName
  fullName: System.Xml.XmlDocument.LocalName
- uid: System.Xml.XmlDocument.Name
  parent: System.Xml.XmlDocument
  isExternal: false
  name: Name
  nameWithType: XmlDocument.Name
  fullName: System.Xml.XmlDocument.Name
- uid: System.Xml.XmlDocument.NameTable
  parent: System.Xml.XmlDocument
  isExternal: false
  name: NameTable
  nameWithType: XmlDocument.NameTable
  fullName: System.Xml.XmlDocument.NameTable
- uid: System.Xml.XmlDocument.NodeChanged
  parent: System.Xml.XmlDocument
  isExternal: false
  name: NodeChanged
  nameWithType: XmlDocument.NodeChanged
  fullName: System.Xml.XmlDocument.NodeChanged
- uid: System.Xml.XmlNodeChangedEventHandler
  parent: System.Xml
  isExternal: false
  name: XmlNodeChangedEventHandler
  nameWithType: XmlNodeChangedEventHandler
  fullName: System.Xml.XmlNodeChangedEventHandler
- uid: System.Xml.XmlDocument.NodeChanging
  parent: System.Xml.XmlDocument
  isExternal: false
  name: NodeChanging
  nameWithType: XmlDocument.NodeChanging
  fullName: System.Xml.XmlDocument.NodeChanging
- uid: System.Xml.XmlDocument.NodeInserted
  parent: System.Xml.XmlDocument
  isExternal: false
  name: NodeInserted
  nameWithType: XmlDocument.NodeInserted
  fullName: System.Xml.XmlDocument.NodeInserted
- uid: System.Xml.XmlDocument.NodeInserting
  parent: System.Xml.XmlDocument
  isExternal: false
  name: NodeInserting
  nameWithType: XmlDocument.NodeInserting
  fullName: System.Xml.XmlDocument.NodeInserting
- uid: System.Xml.XmlDocument.NodeRemoved
  parent: System.Xml.XmlDocument
  isExternal: false
  name: NodeRemoved
  nameWithType: XmlDocument.NodeRemoved
  fullName: System.Xml.XmlDocument.NodeRemoved
- uid: System.Xml.XmlDocument.NodeRemoving
  parent: System.Xml.XmlDocument
  isExternal: false
  name: NodeRemoving
  nameWithType: XmlDocument.NodeRemoving
  fullName: System.Xml.XmlDocument.NodeRemoving
- uid: System.Xml.XmlDocument.NodeType
  parent: System.Xml.XmlDocument
  isExternal: false
  name: NodeType
  nameWithType: XmlDocument.NodeType
  fullName: System.Xml.XmlDocument.NodeType
- uid: System.Xml.XmlDocument.OwnerDocument
  parent: System.Xml.XmlDocument
  isExternal: false
  name: OwnerDocument
  nameWithType: XmlDocument.OwnerDocument
  fullName: System.Xml.XmlDocument.OwnerDocument
- uid: System.Xml.XmlDocument
  parent: System.Xml
  isExternal: false
  name: XmlDocument
  nameWithType: XmlDocument
  fullName: System.Xml.XmlDocument
- uid: System.Xml.XmlDocument.ParentNode
  parent: System.Xml.XmlDocument
  isExternal: false
  name: ParentNode
  nameWithType: XmlDocument.ParentNode
  fullName: System.Xml.XmlDocument.ParentNode
- uid: System.Xml.XmlDocument.PreserveWhitespace
  parent: System.Xml.XmlDocument
  isExternal: false
  name: PreserveWhitespace
  nameWithType: XmlDocument.PreserveWhitespace
  fullName: System.Xml.XmlDocument.PreserveWhitespace
- uid: System.Xml.XmlDocument.ReadNode(System.Xml.XmlReader)
  parent: System.Xml.XmlDocument
  isExternal: false
  name: ReadNode(XmlReader)
  nameWithType: XmlDocument.ReadNode(XmlReader)
  fullName: System.Xml.XmlDocument.ReadNode(XmlReader)
- uid: System.Xml.XmlDocument.Save(System.IO.Stream)
  parent: System.Xml.XmlDocument
  isExternal: false
  name: Save(Stream)
  nameWithType: XmlDocument.Save(Stream)
  fullName: System.Xml.XmlDocument.Save(Stream)
- uid: System.Xml.XmlDocument.Save(System.IO.TextWriter)
  parent: System.Xml.XmlDocument
  isExternal: false
  name: Save(TextWriter)
  nameWithType: XmlDocument.Save(TextWriter)
  fullName: System.Xml.XmlDocument.Save(TextWriter)
- uid: System.IO.TextWriter
  parent: System.IO
  isExternal: true
  name: TextWriter
  nameWithType: TextWriter
  fullName: System.IO.TextWriter
- uid: System.Xml.XmlDocument.Save(System.String)
  parent: System.Xml.XmlDocument
  isExternal: false
  name: Save(String)
  nameWithType: XmlDocument.Save(String)
  fullName: System.Xml.XmlDocument.Save(String)
- uid: System.Xml.XmlDocument.Save(System.Xml.XmlWriter)
  parent: System.Xml.XmlDocument
  isExternal: false
  name: Save(XmlWriter)
  nameWithType: XmlDocument.Save(XmlWriter)
  fullName: System.Xml.XmlDocument.Save(XmlWriter)
- uid: System.Xml.XmlWriter
  parent: System.Xml
  isExternal: true
  name: XmlWriter
  nameWithType: XmlWriter
  fullName: System.Xml.XmlWriter
- uid: System.Xml.XmlDocument.SchemaInfo
  parent: System.Xml.XmlDocument
  isExternal: false
  name: SchemaInfo
  nameWithType: XmlDocument.SchemaInfo
  fullName: System.Xml.XmlDocument.SchemaInfo
- uid: System.Xml.Schema.IXmlSchemaInfo
  parent: System.Xml.Schema
  isExternal: false
  name: IXmlSchemaInfo
  nameWithType: IXmlSchemaInfo
  fullName: System.Xml.Schema.IXmlSchemaInfo
- uid: System.Xml.XmlDocument.Schemas
  parent: System.Xml.XmlDocument
  isExternal: false
  name: Schemas
  nameWithType: XmlDocument.Schemas
  fullName: System.Xml.XmlDocument.Schemas
- uid: System.Xml.Schema.XmlSchemaSet
  parent: System.Xml.Schema
  isExternal: false
  name: XmlSchemaSet
  nameWithType: XmlSchemaSet
  fullName: System.Xml.Schema.XmlSchemaSet
- uid: System.Xml.XmlDocument.Validate(System.Xml.Schema.ValidationEventHandler)
  parent: System.Xml.XmlDocument
  isExternal: false
  name: Validate(ValidationEventHandler)
  nameWithType: XmlDocument.Validate(ValidationEventHandler)
  fullName: System.Xml.XmlDocument.Validate(ValidationEventHandler)
- uid: System.Xml.Schema.ValidationEventHandler
  parent: System.Xml.Schema
  isExternal: false
  name: ValidationEventHandler
  nameWithType: ValidationEventHandler
  fullName: System.Xml.Schema.ValidationEventHandler
- uid: System.Xml.XmlDocument.Validate(System.Xml.Schema.ValidationEventHandler,System.Xml.XmlNode)
  parent: System.Xml.XmlDocument
  isExternal: false
  name: Validate(ValidationEventHandler,XmlNode)
  nameWithType: XmlDocument.Validate(ValidationEventHandler,XmlNode)
  fullName: System.Xml.XmlDocument.Validate(ValidationEventHandler,XmlNode)
- uid: System.Xml.XmlDocument.WriteContentTo(System.Xml.XmlWriter)
  parent: System.Xml.XmlDocument
  isExternal: false
  name: WriteContentTo(XmlWriter)
  nameWithType: XmlDocument.WriteContentTo(XmlWriter)
  fullName: System.Xml.XmlDocument.WriteContentTo(XmlWriter)
- uid: System.Xml.XmlDocument.WriteTo(System.Xml.XmlWriter)
  parent: System.Xml.XmlDocument
  isExternal: false
  name: WriteTo(XmlWriter)
  nameWithType: XmlDocument.WriteTo(XmlWriter)
  fullName: System.Xml.XmlDocument.WriteTo(XmlWriter)
- uid: System.Xml.XmlDocument.XmlResolver
  parent: System.Xml.XmlDocument
  isExternal: false
  name: XmlResolver
  nameWithType: XmlDocument.XmlResolver
  fullName: System.Xml.XmlDocument.XmlResolver
- uid: System.Xml.XmlResolver
  parent: System.Xml
  isExternal: false
  name: XmlResolver
  nameWithType: XmlResolver
  fullName: System.Xml.XmlResolver
- uid: System.Xml.XmlDocument.#ctor*
  parent: System.Xml.XmlDocument
  isExternal: false
  name: XmlDocument
  nameWithType: XmlDocument.XmlDocument
- uid: System.Xml.XmlDocument.BaseURI*
  parent: System.Xml.XmlDocument
  isExternal: false
  name: BaseURI
  nameWithType: XmlDocument.BaseURI
- uid: System.Xml.XmlDocument.CloneNode*
  parent: System.Xml.XmlDocument
  isExternal: false
  name: CloneNode
  nameWithType: XmlDocument.CloneNode
- uid: System.Xml.XmlDocument.CreateAttribute*
  parent: System.Xml.XmlDocument
  isExternal: false
  name: CreateAttribute
  nameWithType: XmlDocument.CreateAttribute
- uid: System.Xml.XmlDocument.CreateCDataSection*
  parent: System.Xml.XmlDocument
  isExternal: false
  name: CreateCDataSection
  nameWithType: XmlDocument.CreateCDataSection
- uid: System.Xml.XmlDocument.CreateComment*
  parent: System.Xml.XmlDocument
  isExternal: false
  name: CreateComment
  nameWithType: XmlDocument.CreateComment
- uid: System.Xml.XmlDocument.CreateDefaultAttribute*
  parent: System.Xml.XmlDocument
  isExternal: false
  name: CreateDefaultAttribute
  nameWithType: XmlDocument.CreateDefaultAttribute
- uid: System.Xml.XmlDocument.CreateDocumentFragment*
  parent: System.Xml.XmlDocument
  isExternal: false
  name: CreateDocumentFragment
  nameWithType: XmlDocument.CreateDocumentFragment
- uid: System.Xml.XmlDocument.CreateDocumentType*
  parent: System.Xml.XmlDocument
  isExternal: false
  name: CreateDocumentType
  nameWithType: XmlDocument.CreateDocumentType
- uid: System.Xml.XmlDocument.CreateElement*
  parent: System.Xml.XmlDocument
  isExternal: false
  name: CreateElement
  nameWithType: XmlDocument.CreateElement
- uid: System.Xml.XmlDocument.CreateEntityReference*
  parent: System.Xml.XmlDocument
  isExternal: false
  name: CreateEntityReference
  nameWithType: XmlDocument.CreateEntityReference
- uid: System.Xml.XmlDocument.CreateNavigator*
  parent: System.Xml.XmlDocument
  isExternal: false
  name: CreateNavigator
  nameWithType: XmlDocument.CreateNavigator
- uid: System.Xml.XmlDocument.CreateNode*
  parent: System.Xml.XmlDocument
  isExternal: false
  name: CreateNode
  nameWithType: XmlDocument.CreateNode
- uid: System.Xml.XmlDocument.CreateProcessingInstruction*
  parent: System.Xml.XmlDocument
  isExternal: false
  name: CreateProcessingInstruction
  nameWithType: XmlDocument.CreateProcessingInstruction
- uid: System.Xml.XmlDocument.CreateSignificantWhitespace*
  parent: System.Xml.XmlDocument
  isExternal: false
  name: CreateSignificantWhitespace
  nameWithType: XmlDocument.CreateSignificantWhitespace
- uid: System.Xml.XmlDocument.CreateTextNode*
  parent: System.Xml.XmlDocument
  isExternal: false
  name: CreateTextNode
  nameWithType: XmlDocument.CreateTextNode
- uid: System.Xml.XmlDocument.CreateWhitespace*
  parent: System.Xml.XmlDocument
  isExternal: false
  name: CreateWhitespace
  nameWithType: XmlDocument.CreateWhitespace
- uid: System.Xml.XmlDocument.CreateXmlDeclaration*
  parent: System.Xml.XmlDocument
  isExternal: false
  name: CreateXmlDeclaration
  nameWithType: XmlDocument.CreateXmlDeclaration
- uid: System.Xml.XmlDocument.DocumentElement*
  parent: System.Xml.XmlDocument
  isExternal: false
  name: DocumentElement
  nameWithType: XmlDocument.DocumentElement
- uid: System.Xml.XmlDocument.DocumentType*
  parent: System.Xml.XmlDocument
  isExternal: false
  name: DocumentType
  nameWithType: XmlDocument.DocumentType
- uid: System.Xml.XmlDocument.GetElementById*
  parent: System.Xml.XmlDocument
  isExternal: false
  name: GetElementById
  nameWithType: XmlDocument.GetElementById
- uid: System.Xml.XmlDocument.GetElementsByTagName*
  parent: System.Xml.XmlDocument
  isExternal: false
  name: GetElementsByTagName
  nameWithType: XmlDocument.GetElementsByTagName
- uid: System.Xml.XmlDocument.Implementation*
  parent: System.Xml.XmlDocument
  isExternal: false
  name: Implementation
  nameWithType: XmlDocument.Implementation
- uid: System.Xml.XmlDocument.ImportNode*
  parent: System.Xml.XmlDocument
  isExternal: false
  name: ImportNode
  nameWithType: XmlDocument.ImportNode
- uid: System.Xml.XmlDocument.InnerText*
  parent: System.Xml.XmlDocument
  isExternal: false
  name: InnerText
  nameWithType: XmlDocument.InnerText
- uid: System.Xml.XmlDocument.InnerXml*
  parent: System.Xml.XmlDocument
  isExternal: false
  name: InnerXml
  nameWithType: XmlDocument.InnerXml
- uid: System.Xml.XmlDocument.IsReadOnly*
  parent: System.Xml.XmlDocument
  isExternal: false
  name: IsReadOnly
  nameWithType: XmlDocument.IsReadOnly
- uid: System.Xml.XmlDocument.Load*
  parent: System.Xml.XmlDocument
  isExternal: false
  name: Load
  nameWithType: XmlDocument.Load
- uid: System.Xml.XmlDocument.LoadXml*
  parent: System.Xml.XmlDocument
  isExternal: false
  name: LoadXml
  nameWithType: XmlDocument.LoadXml
- uid: System.Xml.XmlDocument.LocalName*
  parent: System.Xml.XmlDocument
  isExternal: false
  name: LocalName
  nameWithType: XmlDocument.LocalName
- uid: System.Xml.XmlDocument.Name*
  parent: System.Xml.XmlDocument
  isExternal: false
  name: Name
  nameWithType: XmlDocument.Name
- uid: System.Xml.XmlDocument.NameTable*
  parent: System.Xml.XmlDocument
  isExternal: false
  name: NameTable
  nameWithType: XmlDocument.NameTable
- uid: System.Xml.XmlDocument.NodeType*
  parent: System.Xml.XmlDocument
  isExternal: false
  name: NodeType
  nameWithType: XmlDocument.NodeType
- uid: System.Xml.XmlDocument.OwnerDocument*
  parent: System.Xml.XmlDocument
  isExternal: false
  name: OwnerDocument
  nameWithType: XmlDocument.OwnerDocument
- uid: System.Xml.XmlDocument.ParentNode*
  parent: System.Xml.XmlDocument
  isExternal: false
  name: ParentNode
  nameWithType: XmlDocument.ParentNode
- uid: System.Xml.XmlDocument.PreserveWhitespace*
  parent: System.Xml.XmlDocument
  isExternal: false
  name: PreserveWhitespace
  nameWithType: XmlDocument.PreserveWhitespace
- uid: System.Xml.XmlDocument.ReadNode*
  parent: System.Xml.XmlDocument
  isExternal: false
  name: ReadNode
  nameWithType: XmlDocument.ReadNode
- uid: System.Xml.XmlDocument.Save*
  parent: System.Xml.XmlDocument
  isExternal: false
  name: Save
  nameWithType: XmlDocument.Save
- uid: System.Xml.XmlDocument.SchemaInfo*
  parent: System.Xml.XmlDocument
  isExternal: false
  name: SchemaInfo
  nameWithType: XmlDocument.SchemaInfo
- uid: System.Xml.XmlDocument.Schemas*
  parent: System.Xml.XmlDocument
  isExternal: false
  name: Schemas
  nameWithType: XmlDocument.Schemas
- uid: System.Xml.XmlDocument.Validate*
  parent: System.Xml.XmlDocument
  isExternal: false
  name: Validate
  nameWithType: XmlDocument.Validate
- uid: System.Xml.XmlDocument.WriteContentTo*
  parent: System.Xml.XmlDocument
  isExternal: false
  name: WriteContentTo
  nameWithType: XmlDocument.WriteContentTo
- uid: System.Xml.XmlDocument.WriteTo*
  parent: System.Xml.XmlDocument
  isExternal: false
  name: WriteTo
  nameWithType: XmlDocument.WriteTo
- uid: System.Xml.XmlDocument.XmlResolver*
  parent: System.Xml.XmlDocument
  isExternal: false
  name: XmlResolver
  nameWithType: XmlDocument.XmlResolver
