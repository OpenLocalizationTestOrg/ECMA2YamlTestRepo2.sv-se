### YamlMime:ManagedReference
items:
- uid: System.Data.DataSet
  id: DataSet
  children:
  - System.Data.DataSet.#ctor
  - System.Data.DataSet.#ctor(System.String)
  - System.Data.DataSet.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  - System.Data.DataSet.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext,System.Boolean)
  - System.Data.DataSet.AcceptChanges
  - System.Data.DataSet.BeginInit
  - System.Data.DataSet.CaseSensitive
  - System.Data.DataSet.Clear
  - System.Data.DataSet.Clone
  - System.Data.DataSet.Copy
  - System.Data.DataSet.CreateDataReader
  - System.Data.DataSet.CreateDataReader(System.Data.DataTable[])
  - System.Data.DataSet.DataSetName
  - System.Data.DataSet.DefaultViewManager
  - System.Data.DataSet.DetermineSchemaSerializationMode(System.Xml.XmlReader)
  - System.Data.DataSet.DetermineSchemaSerializationMode(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  - System.Data.DataSet.EndInit
  - System.Data.DataSet.EnforceConstraints
  - System.Data.DataSet.ExtendedProperties
  - System.Data.DataSet.GetChanges
  - System.Data.DataSet.GetChanges(System.Data.DataRowState)
  - System.Data.DataSet.GetDataSetSchema(System.Xml.Schema.XmlSchemaSet)
  - System.Data.DataSet.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  - System.Data.DataSet.GetSchemaSerializable
  - System.Data.DataSet.GetSerializationData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  - System.Data.DataSet.GetXml
  - System.Data.DataSet.GetXmlSchema
  - System.Data.DataSet.HasChanges
  - System.Data.DataSet.HasChanges(System.Data.DataRowState)
  - System.Data.DataSet.HasErrors
  - System.Data.DataSet.InferXmlSchema(System.IO.Stream,System.String[])
  - System.Data.DataSet.InferXmlSchema(System.IO.TextReader,System.String[])
  - System.Data.DataSet.InferXmlSchema(System.String,System.String[])
  - System.Data.DataSet.InferXmlSchema(System.Xml.XmlReader,System.String[])
  - System.Data.DataSet.Initialized
  - System.Data.DataSet.InitializeDerivedDataSet
  - System.Data.DataSet.IsBinarySerialized(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  - System.Data.DataSet.IsInitialized
  - System.Data.DataSet.Load(System.Data.IDataReader,System.Data.LoadOption,System.Data.DataTable[])
  - System.Data.DataSet.Load(System.Data.IDataReader,System.Data.LoadOption,System.String[])
  - System.Data.DataSet.Load(System.Data.IDataReader,System.Data.LoadOption,System.Data.FillErrorEventHandler,System.Data.DataTable[])
  - System.Data.DataSet.Locale
  - System.Data.DataSet.Merge(System.Data.DataRow[])
  - System.Data.DataSet.Merge(System.Data.DataSet)
  - System.Data.DataSet.Merge(System.Data.DataTable)
  - System.Data.DataSet.Merge(System.Data.DataSet,System.Boolean)
  - System.Data.DataSet.Merge(System.Data.DataRow[],System.Boolean,System.Data.MissingSchemaAction)
  - System.Data.DataSet.Merge(System.Data.DataSet,System.Boolean,System.Data.MissingSchemaAction)
  - System.Data.DataSet.Merge(System.Data.DataTable,System.Boolean,System.Data.MissingSchemaAction)
  - System.Data.DataSet.MergeFailed
  - System.Data.DataSet.Namespace
  - System.Data.DataSet.OnPropertyChanging(System.ComponentModel.PropertyChangedEventArgs)
  - System.Data.DataSet.OnRemoveRelation(System.Data.DataRelation)
  - System.Data.DataSet.OnRemoveTable(System.Data.DataTable)
  - System.Data.DataSet.Prefix
  - System.Data.DataSet.RaisePropertyChanging(System.String)
  - System.Data.DataSet.ReadXml(System.IO.Stream)
  - System.Data.DataSet.ReadXml(System.IO.TextReader)
  - System.Data.DataSet.ReadXml(System.String)
  - System.Data.DataSet.ReadXml(System.Xml.XmlReader)
  - System.Data.DataSet.ReadXml(System.IO.Stream,System.Data.XmlReadMode)
  - System.Data.DataSet.ReadXml(System.IO.TextReader,System.Data.XmlReadMode)
  - System.Data.DataSet.ReadXml(System.String,System.Data.XmlReadMode)
  - System.Data.DataSet.ReadXml(System.Xml.XmlReader,System.Data.XmlReadMode)
  - System.Data.DataSet.ReadXmlSchema(System.IO.Stream)
  - System.Data.DataSet.ReadXmlSchema(System.IO.TextReader)
  - System.Data.DataSet.ReadXmlSchema(System.String)
  - System.Data.DataSet.ReadXmlSchema(System.Xml.XmlReader)
  - System.Data.DataSet.ReadXmlSerializable(System.Xml.XmlReader)
  - System.Data.DataSet.RejectChanges
  - System.Data.DataSet.Relations
  - System.Data.DataSet.RemotingFormat
  - System.Data.DataSet.Reset
  - System.Data.DataSet.SchemaSerializationMode
  - System.Data.DataSet.ShouldSerializeRelations
  - System.Data.DataSet.ShouldSerializeTables
  - System.Data.DataSet.Site
  - System.Data.DataSet.System#ComponentModel#IListSource#ContainsListCollection
  - System.Data.DataSet.System#ComponentModel#IListSource#GetList
  - System.Data.DataSet.System#Xml#Serialization#IXmlSerializable#GetSchema
  - System.Data.DataSet.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)
  - System.Data.DataSet.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)
  - System.Data.DataSet.Tables
  - System.Data.DataSet.WriteXml(System.IO.Stream)
  - System.Data.DataSet.WriteXml(System.IO.TextWriter)
  - System.Data.DataSet.WriteXml(System.String)
  - System.Data.DataSet.WriteXml(System.Xml.XmlWriter)
  - System.Data.DataSet.WriteXml(System.IO.Stream,System.Data.XmlWriteMode)
  - System.Data.DataSet.WriteXml(System.IO.TextWriter,System.Data.XmlWriteMode)
  - System.Data.DataSet.WriteXml(System.String,System.Data.XmlWriteMode)
  - System.Data.DataSet.WriteXml(System.Xml.XmlWriter,System.Data.XmlWriteMode)
  - System.Data.DataSet.WriteXmlSchema(System.IO.Stream)
  - System.Data.DataSet.WriteXmlSchema(System.IO.TextWriter)
  - System.Data.DataSet.WriteXmlSchema(System.String)
  - System.Data.DataSet.WriteXmlSchema(System.Xml.XmlWriter)
  - System.Data.DataSet.WriteXmlSchema(System.IO.Stream,System.Converter{System.Type,System.String})
  - System.Data.DataSet.WriteXmlSchema(System.IO.TextWriter,System.Converter{System.Type,System.String})
  - System.Data.DataSet.WriteXmlSchema(System.String,System.Converter{System.Type,System.String})
  - System.Data.DataSet.WriteXmlSchema(System.Xml.XmlWriter,System.Converter{System.Type,System.String})
  langs:
  - csharp
  name: DataSet
  nameWithType: DataSet
  fullName: System.Data.DataSet
  type: Class
  summary: "Representerar en minnescache av data."
  remarks: "DataSet som är en minnescache för data som hämtats från en datakälla, är en viktig del i ADO.NET-arkitektur. DataSet består av en samling <xref:System.Data.DataTable>objekt som du kan relatera till varandra med <xref:System.Data.DataRelation>objekt.</xref:System.Data.DataRelation> </xref:System.Data.DataTable> Du kan även tillämpa dataintegriteten i datauppsättningen med den <xref:System.Data.UniqueConstraint>och <xref:System.Data.ForeignKeyConstraint>objekt.</xref:System.Data.ForeignKeyConstraint> </xref:System.Data.UniqueConstraint> Mer information om hur du arbetar med DataSet-objekt finns i [datauppsättningar och DataTables DataViews](~/add/includes/ajax-current-ext-md.md).       Medan <xref:System.Data.DataTable>objekt som innehåller data den <xref:System.Data.DataRelationCollection>gör att du kan navigera på tabell-hierarkin.</xref:System.Data.DataRelationCollection> </xref:System.Data.DataTable> Tabellerna finns i en <xref:System.Data.DataTableCollection>nås via de <xref:System.Data.DataSet.Tables%2A>egenskap.</xref:System.Data.DataSet.Tables%2A> </xref:System.Data.DataTableCollection> Vid åtkomst till <xref:System.Data.DataTable>objekt, Observera att de är villkorligt skiftlägeskänsliga.</xref:System.Data.DataTable> Om exempelvis en <xref:System.Data.DataTable>heter &quot;mydatatable&quot; och en annan heter &quot;Mydatatable&quot;, en sträng som används för att söka efter en av tabellerna betraktas som skiftlägeskänsligt.</xref:System.Data.DataTable> Men om finns i &quot;mydatatable&quot; och &quot;Mydatatable&quot; inte, betraktas söksträngen som skiftlägesokänsligt. Mer information om hur du arbetar med <xref:System.Data.DataTable>objekt, se [skapar en DataTable](~/add/includes/ajax-current-ext-md.md).</xref:System.Data.DataTable>       En DataSet kan läsa och skriva data och schema som XML-dokument. Data och schema kan sedan transporteras över HTTP och används av alla program på alla plattformar som är XML-aktiverad. Du kan spara schemat som ett XML-schema med den <xref:System.Data.DataSet.WriteXmlSchema%2A>metoden och både schema- och data kan sparas med hjälp av den <xref:System.Data.DataSet.WriteXml%2A>metoden.</xref:System.Data.DataSet.WriteXml%2A> </xref:System.Data.DataSet.WriteXmlSchema%2A> Läs ett XML-dokument som innehåller både schema- och data genom att använda den <xref:System.Data.DataSet.ReadXml%2A>metoden.</xref:System.Data.DataSet.ReadXml%2A>       I en typisk flera nivåer implementering stegen för att skapa och uppdatera en datauppsättning och sedan uppdatera den ursprungliga data är att: 1.  Skapa och fylla varje <xref:System.Data.DataTable>i en datamängd med data från en datakälla med hjälp av en <xref:System.Data.Common.DataAdapter>.</xref:System.Data.Common.DataAdapter> </xref:System.Data.DataTable>      2.  Ändra data i enskilda <xref:System.Data.DataTable>objekt genom att lägga till, uppdatera eller ta bort <xref:System.Data.DataRow>objekt.</xref:System.Data.DataRow> </xref:System.Data.DataTable>      3.  Anropa den <xref:System.Data.DataSet.GetChanges%2A>metoden för att skapa en andra datamängd som innehåller endast ändringar av data.</xref:System.Data.DataSet.GetChanges%2A>      4.  Anropa den <xref:System.Data.Common.DataAdapter.Update%2A>metod för den <xref:System.Data.Common.DataAdapter>, skickar andra datamängden som ett argument.</xref:System.Data.Common.DataAdapter> </xref:System.Data.Common.DataAdapter.Update%2A>      5.  Anropa den <xref:System.Data.DataSet.Merge%2A>metod för att slå samman ändringar från andra datamängd i först.</xref:System.Data.DataSet.Merge%2A>      6.  Anropa den <xref:System.Data.DataSet.AcceptChanges%2A>för datamängden.</xref:System.Data.DataSet.AcceptChanges%2A> Du kan också anropa <xref:System.Data.DataSet.RejectChanges%2A>att avbryta ändringarna.</xref:System.Data.DataSet.RejectChanges%2A>      > [!NOTE] > I datauppsättningen och <xref:System.Data.DataTable>objekt ärver från <xref:System.ComponentModel.MarshalByValueComponent>, och stöd för den <xref:System.Runtime.Serialization.ISerializable>gränssnitt för fjärrkommunikation.</xref:System.Runtime.Serialization.ISerializable> </xref:System.ComponentModel.MarshalByValueComponent> </xref:System.Data.DataTable> Dessa är de enda ADO.NET-objekt som kan fjärrstyras.      > [!NOTE] > Klasser som ärvts från DataSet slutförs inte av skräpinsamlingen, eftersom slutföraren har inaktiverats i DataSet. Den härledda klassen kan anropa den <xref:System.GC.ReRegisterForFinalize%2A>metoden i sin konstruktor så att klassen som ska slutföras av skräpinsamlingen.</xref:System.GC.ReRegisterForFinalize%2A>"
  example:
  - "The following example consists of several methods that, combined, create and fill a DataSet from the **Northwind** database.  \n  \n [!code-cs[Classic WebData DataSet Example#1](~/add/codesnippet/csharp/t-system.data.dataset_1.cs)]\n [!code-vb[Classic WebData DataSet Example#1](~/add/codesnippet/visualbasic/t-system.data.dataset_1.vb)]"
  syntax:
    content: >-
      [System.ComponentModel.DefaultProperty("DataSetName")]

      [System.ComponentModel.Designer("Microsoft.VSDesigner.Data.VS.DataSetDesigner, Microsoft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]

      [System.ComponentModel.ToolboxItem("Microsoft.VSDesigner.Data.VS.DataSetToolboxItem, Microsoft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]

      [System.Xml.Serialization.XmlRoot("DataSet")]

      [System.Xml.Serialization.XmlSchemaProvider("GetDataSetSchema")]

      public class DataSet : System.ComponentModel.MarshalByValueComponent, System.ComponentModel.IListSource, System.ComponentModel.ISupportInitializeNotification, System.Runtime.Serialization.ISerializable, System.Xml.Serialization.IXmlSerializable
  inheritance:
  - System.Object
  - System.ComponentModel.MarshalByValueComponent
  implements:
  - System.ComponentModel.IListSource
  - System.ComponentModel.ISupportInitializeNotification
  - System.Runtime.Serialization.ISerializable
  - System.Xml.Serialization.IXmlSerializable
  inheritedMembers:
  - System.ComponentModel.MarshalByValueComponent.Container
  - System.ComponentModel.MarshalByValueComponent.DesignMode
  - System.ComponentModel.MarshalByValueComponent.Dispose
  - System.ComponentModel.MarshalByValueComponent.Dispose(System.Boolean)
  - System.ComponentModel.MarshalByValueComponent.Disposed
  - System.ComponentModel.MarshalByValueComponent.Events
  - System.ComponentModel.MarshalByValueComponent.GetService(System.Type)
  - System.ComponentModel.MarshalByValueComponent.ToString
  platform:
  - net462
- uid: System.Data.DataSet.#ctor
  id: '#ctor'
  parent: System.Data.DataSet
  langs:
  - csharp
  name: DataSet()
  nameWithType: DataSet.DataSet()
  fullName: System.Data.DataSet.DataSet()
  type: Constructor
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Initierar en ny instans av den <xref href=&quot;System.Data.DataSet&quot;> </xref> klass."
  remarks: "Den här implementeringen av den <xref:System.Data.DataSet>konstruktorn tar inga parametrar och skapar ett standardnamn, &quot;NewDataSet&quot; för den nya instansen.</xref:System.Data.DataSet>       Ett namn för den <xref:System.Data.DataSet>krävs för att kontrollera att XML-representation av den <xref:System.Data.DataSet>alltid har ett namn för dokumentelementet, vilket är det högsta nivån elementet i schemadefinition.</xref:System.Data.DataSet> </xref:System.Data.DataSet>"
  example:
  - "The following example creates a new <xref:System.Data.DataSet>, and adds two <xref:System.Data.DataTable> objects to it.  \n  \n [!code-vb[Classic WebData DataSet.DataSet Example#1](~/add/codesnippet/visualbasic/m-system.data.dataset.sh_1_1.vb)]"
  syntax:
    content: public DataSet ();
    parameters: []
  overload: System.Data.DataSet.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: System.Data.DataSet
  langs:
  - csharp
  name: DataSet(String)
  nameWithType: DataSet.DataSet(String)
  fullName: System.Data.DataSet.DataSet(String)
  type: Constructor
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Initierar en ny instans av en <xref href=&quot;System.Data.DataSet&quot;> </xref> klass med det angivna namnet."
  remarks: "Ett namn för den <xref:System.Data.DataSet>krävs för att kontrollera att XML-representation av den <xref:System.Data.DataSet>alltid har ett namn för dokumentelementet, vilket är det högsta nivån elementet i schemadefinition.</xref:System.Data.DataSet> </xref:System.Data.DataSet>"
  example:
  - "The following example creates a new <xref:System.Data.DataSet>, to which two <xref:System.Data.DataTable> objects are added.  \n  \n [!code-vb[Classic WebData DataSet.DataSet1 Example#1](~/add/codesnippet/visualbasic/m-system.data.dataset.sh_0_1.vb)]"
  syntax:
    content: public DataSet (string dataSetName);
    parameters:
    - id: dataSetName
      type: System.String
      description: "Namnet på den <xref href=&quot;System.Data.DataSet&quot;> </xref>."
  overload: System.Data.DataSet.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  id: '#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)'
  parent: System.Data.DataSet
  langs:
  - csharp
  name: DataSet(SerializationInfo,StreamingContext)
  nameWithType: DataSet.DataSet(SerializationInfo,StreamingContext)
  fullName: System.Data.DataSet.DataSet(SerializationInfo,StreamingContext)
  type: Constructor
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Initierar en ny instans av en <xref href=&quot;System.Data.DataSet&quot;> </xref> klass som har den angivna serialiseringsinformation och på snabbmenyn."
  syntax:
    content: protected DataSet (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    parameters:
    - id: info
      type: System.Runtime.Serialization.SerializationInfo
      description: "De data som behövs för att serialisera eller deserialisering av objekt."
    - id: context
      type: System.Runtime.Serialization.StreamingContext
      description: "Källa och mål för en given serialiserad dataström."
  overload: System.Data.DataSet.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext,System.Boolean)
  id: '#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext,System.Boolean)'
  parent: System.Data.DataSet
  langs:
  - csharp
  name: DataSet(SerializationInfo,StreamingContext,Boolean)
  nameWithType: DataSet.DataSet(SerializationInfo,StreamingContext,Boolean)
  fullName: System.Data.DataSet.DataSet(SerializationInfo,StreamingContext,Boolean)
  type: Constructor
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Initierar en ny instans av den <xref href=&quot;System.Data.DataSet&quot;> </xref> klass."
  syntax:
    content: protected DataSet (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context, bool ConstructSchema);
    parameters:
    - id: info
      type: System.Runtime.Serialization.SerializationInfo
      description: "Den <xref href=&quot;System.Runtime.Serialization.SerializationInfo&quot;> </xref> objekt."
    - id: context
      type: System.Runtime.Serialization.StreamingContext
      description: "Den <xref:System.Runtime.Serialization.StreamingContext>objekt.</xref:System.Runtime.Serialization.StreamingContext>"
    - id: ConstructSchema
      type: System.Boolean
      description: "Booleskt värde."
  overload: System.Data.DataSet.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.AcceptChanges
  id: AcceptChanges
  parent: System.Data.DataSet
  langs:
  - csharp
  name: AcceptChanges()
  nameWithType: DataSet.AcceptChanges()
  fullName: System.Data.DataSet.AcceptChanges()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Genomför alla ändringar som gjorts till den här <xref href=&quot;System.Data.DataSet&quot;> </xref> sedan den lästes in eller sedan du senast AcceptChanges anropades."
  remarks: "Både den <xref:System.Data.DataRow>och <xref:System.Data.DataTable>klasser har AcceptChanges metoder.</xref:System.Data.DataTable> </xref:System.Data.DataRow> Anropar <xref:System.Data.DataTable.AcceptChanges%2A>på den <xref:System.Data.DataTable>nivå orsaker i <xref:System.Data.DataRow.AcceptChanges%2A>metod för varje <xref:System.Data.DataRow>anropas.</xref:System.Data.DataRow> </xref:System.Data.DataRow.AcceptChanges%2A> </xref:System.Data.DataTable> </xref:System.Data.DataTable.AcceptChanges%2A> På liknande sätt, anropar AcceptChanges på <xref:System.Data.DataSet>förlorar <xref:System.Data.DataTable.AcceptChanges%2A>anropas för varje tabell i <xref:System.Data.DataSet>.</xref:System.Data.DataSet> </xref:System.Data.DataTable.AcceptChanges%2A> </xref:System.Data.DataSet> På så sätt kan ha du flera nivåer som metoden anropas. Anropar AcceptChanges av den <xref:System.Data.DataSet>kan du anropa metoden på alla underordnade objekt (till exempel tabeller och rader) med ett anrop.</xref:System.Data.DataSet>       När du anropar `AcceptChanges` på den `DataSet`, eventuella <xref:System.Data.DataRow>objekt i redigeringsläge avsluta sina ändringar har.</xref:System.Data.DataRow> Egenskapen <xref:System.Data.DataRow.RowState%2A>i varje <xref:System.Data.DataRow>ändras även; `Added` och `Modified` rader blir `Unchanged`, och `Deleted` rader tas bort.</xref:System.Data.DataRow> </xref:System.Data.DataRow.RowState%2A>       Om den `DataSet` innehåller <xref:System.Data.ForeignKeyConstraint>objekt, anropar den `AcceptChanges` metoden även gör den <xref:System.Data.ForeignKeyConstraint.AcceptRejectRule%2A>som ska framtvingas.</xref:System.Data.ForeignKeyConstraint.AcceptRejectRule%2A> </xref:System.Data.ForeignKeyConstraint>      > [!NOTE]  >   `AcceptChanges` och `RejectChanges` gäller endast för `DataRow` relaterade ändringar (dvs, Lägg till, ta bort, ta bort och ändra). De gäller inte schemat eller strukturella förändringar.   >> Anropar AcceptChanges replikeras inte ändringarna tillbaka till datakällan om datauppsättningen fylldes med hjälp av en DataAdapter. I så fall kan anropa <xref:System.Data.Common.DataAdapter.Update%2A>i stället.</xref:System.Data.Common.DataAdapter.Update%2A> Se [uppdatering datakällor med DataAdapters](http://msdn.microsoft.com/library/33y2221y.aspx) för mer information."
  example:
  - "The following example adds a <xref:System.Data.DataRow> to a <xref:System.Data.DataTable> in a <xref:System.Data.DataSet>. The AcceptChanges method is then called on the <xref:System.Data.DataSet>, which cascades to all <xref:System.Data.DataTable> objects that it contains.  \n  \n [!code-vb[Classic WebData DataSet.AcceptChanges#1](~/add/codesnippet/visualbasic/m-system.data.dataset.ac_1.vb)]\n [!code-cs[Classic WebData DataSet.AcceptChanges#1](~/add/codesnippet/csharp/m-system.data.dataset.ac_1.cs)]"
  syntax:
    content: public void AcceptChanges ();
    parameters: []
  overload: System.Data.DataSet.AcceptChanges*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.BeginInit
  id: BeginInit
  parent: System.Data.DataSet
  langs:
  - csharp
  name: BeginInit()
  nameWithType: DataSet.BeginInit()
  fullName: System.Data.DataSet.BeginInit()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Börjar initieringen av en <xref href=&quot;System.Data.DataSet&quot;> </xref> som används i ett formulär eller används av en annan komponent. Initieringen av inträffar vid körning."
  remarks: "Visual Studio .NET-miljön för arbetsflödesdesign använder den här metoden för att starta initieringen av en komponent som används i ett formulär eller används av en annan komponent. Den <xref:System.Data.DataSet.EndInit%2A>metoden slutar initieringen.</xref:System.Data.DataSet.EndInit%2A> Med BeginInit och <xref:System.Data.DataSet.EndInit%2A>metoder som förhindrar att kontrollen används innan den har initierats.</xref:System.Data.DataSet.EndInit%2A>"
  syntax:
    content: public void BeginInit ();
    parameters: []
  overload: System.Data.DataSet.BeginInit*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.CaseSensitive
  id: CaseSensitive
  parent: System.Data.DataSet
  langs:
  - csharp
  name: CaseSensitive
  nameWithType: DataSet.CaseSensitive
  fullName: System.Data.DataSet.CaseSensitive
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Hämtar eller anger ett värde som anger om string jämförelser inom <xref href=&quot;System.Data.DataTable&quot;> </xref> objekt är skiftlägeskänsliga."
  remarks: "Egenskapen CaseSensitive påverkar hur sortering, sökning och filtrering åtgärder utförs på varje <xref:System.Data.DataTable>objekt som finns i en <xref:System.Data.DataSet>när du använder den <xref:System.Data.DataTable.Select%2A>metoden.</xref:System.Data.DataTable.Select%2A> </xref:System.Data.DataSet> </xref:System.Data.DataTable>       Som standard ange egenskapen CaseSensitive för en <xref:System.Data.DataSet>anger också de <xref:System.Data.DataTable.CaseSensitive%2A>-egenskapen för var och en associerad <xref:System.Data.DataTable>till samma värde.</xref:System.Data.DataTable> </xref:System.Data.DataTable.CaseSensitive%2A> </xref:System.Data.DataSet>"
  example:
  - "The following example toggles the CaseSensitive property.  \n  \n [!code-vb[Classic WebData DataSet.CaseSensitive Example#1](~/add/codesnippet/visualbasic/p-system.data.dataset.ca_1.vb)]"
  syntax:
    content: public bool CaseSensitive { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Om strängjämförelser är skiftlägeskänsliga; Annars <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. Standardvärdet är <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Data.DataSet.CaseSensitive*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.Clear
  id: Clear
  parent: System.Data.DataSet
  langs:
  - csharp
  name: Clear()
  nameWithType: DataSet.Clear()
  fullName: System.Data.DataSet.Clear()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Tar bort den <xref href=&quot;System.Data.DataSet&quot;> </xref> data genom att ta bort alla rader i alla tabeller."
  remarks: "Om den <xref:System.Data.DataSet>är bunden till ett <xref:System.Xml.XmlDataDocument>anropar rensa eller <xref:System.Data.DataTable.Clear%2A?displayProperty=fullName>genererar <xref:System.NotSupportedException>.</xref:System.NotSupportedException> </xref:System.Data.DataTable.Clear%2A?displayProperty=fullName> </xref:System.Xml.XmlDataDocument> </xref:System.Data.DataSet> Om du vill undvika detta kan bläddra i varje tabell, ta bort varje rad en i taget."
  example:
  - "The following example clears the <xref:System.Data.DataSet> of all rows in all tables.  \n  \n [!code-vb[Classic WebData DataSet.Clear Example#1](~/add/codesnippet/visualbasic/m-system.data.dataset.cl_1_1.vb)]\n [!code-cs[Classic WebData DataSet.Clear Example#1](~/add/codesnippet/csharp/m-system.data.dataset.cl_1_1.cs)]"
  syntax:
    content: public void Clear ();
    parameters: []
  overload: System.Data.DataSet.Clear*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.Clone
  id: Clone
  parent: System.Data.DataSet
  langs:
  - csharp
  name: Clone()
  nameWithType: DataSet.Clone()
  fullName: System.Data.DataSet.Clone()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Kopierar strukturen för de <xref href=&quot;System.Data.DataSet&quot;> </xref>, inklusive alla <xref href=&quot;System.Data.DataTable&quot;> </xref> scheman, relationer och begränsningar. Kopierar inte några data."
  remarks: >-
    > [!NOTE]

    >  If these classes have been subclassed, the clone will also be of the same subclasses.
  example:
  - "The following example creates a clone of a <xref:System.Data.DataSet> object's schema.  \n  \n [!code-cs[Classic WebData DataSet.Clone Example#1](~/add/codesnippet/csharp/m-system.data.dataset.cl_0_1.cs)]\n [!code-vb[Classic WebData DataSet.Clone Example#1](~/add/codesnippet/visualbasic/m-system.data.dataset.cl_0_1.vb)]"
  syntax:
    content: public virtual System.Data.DataSet Clone ();
    parameters: []
    return:
      type: System.Data.DataSet
      description: "En ny <xref href=&quot;System.Data.DataSet&quot;> </xref> med samma schemat som aktuellt <xref href=&quot;System.Data.DataSet&quot;> </xref>, men inga data."
  overload: System.Data.DataSet.Clone*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.Copy
  id: Copy
  parent: System.Data.DataSet
  langs:
  - csharp
  name: Copy()
  nameWithType: DataSet.Copy()
  fullName: System.Data.DataSet.Copy()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Kopierar både struktur och data för den här <xref href=&quot;System.Data.DataSet&quot;> </xref>."
  remarks: ''
  example:
  - "The following example uses the Copy method to create a copy of the original <xref:System.Data.DataSet>.  \n  \n [!code-cs[Classic WebData DataSet.Copy Example#1](~/add/codesnippet/csharp/m-system.data.dataset.copy_1.cs)]\n [!code-vb[Classic WebData DataSet.Copy Example#1](~/add/codesnippet/visualbasic/m-system.data.dataset.copy_1.vb)]"
  syntax:
    content: public System.Data.DataSet Copy ();
    parameters: []
    return:
      type: System.Data.DataSet
      description: "En ny <xref href=&quot;System.Data.DataSet&quot;> </xref> med samma struktur (tabellscheman, relationer och begränsningar) och data som detta <xref href=&quot;System.Data.DataSet&quot;> </xref>.       <div class=&quot;alert NOTE&quot;>    Om du har fått en underklass till dessa klasser, vara kopian också av samma underklasser.      </div>"
  overload: System.Data.DataSet.Copy*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.CreateDataReader
  id: CreateDataReader
  parent: System.Data.DataSet
  langs:
  - csharp
  name: CreateDataReader()
  nameWithType: DataSet.CreateDataReader()
  fullName: System.Data.DataSet.CreateDataReader()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Returnerar en <xref href=&quot;System.Data.DataTableReader&quot;> </xref> med en resultatmängd <xref href=&quot;System.Data.DataTable&quot;> </xref>i samma sekvens som tabellerna visas i den <xref:System.Data.DataSet.Tables*>samling.</xref:System.Data.DataSet.Tables*>"
  remarks: "För att säkerställa att ordningen för resultatuppsättningar i den returnerade <xref:System.Data.DataTableReader>, om en <xref:System.Data.DataTable>inom den <xref:System.Data.DataSet>är tomt, representeras av en tom resultatuppsättning i den returnerade `DataTableReader`.</xref:System.Data.DataSet> </xref:System.Data.DataTable> </xref:System.Data.DataTableReader>"
  example:
  - "The following example creates three <xref:System.Data.DataTable> instances, and adds each to a <xref:System.Data.DataSet>. The example then passes the filled `DataSet` to a procedure that calls the CreateDataReader method, and proceeds to iterate through all the result sets contained within the <xref:System.Data.DataTableReader>. The example displays the results in the Console window.  \n  \n [!code-vb[DataWorks DataSet.DataTableReader#1](~/add/codesnippet/visualbasic/m-system.data.dataset.cr_0_1.vb)]\n [!code-cs[DataWorks DataSet.DataTableReader#1](~/add/codesnippet/csharp/m-system.data.dataset.cr_0_1.cs)]"
  syntax:
    content: public System.Data.DataTableReader CreateDataReader ();
    parameters: []
    return:
      type: System.Data.DataTableReader
      description: "En <xref href=&quot;System.Data.DataTableReader&quot;> </xref> som innehåller en eller flera resultatmängder, motsvarar den <xref href=&quot;System.Data.DataTable&quot;> </xref> instanser som ingår i källan <xref href=&quot;System.Data.DataSet&quot;> </xref>."
  overload: System.Data.DataSet.CreateDataReader*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.CreateDataReader(System.Data.DataTable[])
  id: CreateDataReader(System.Data.DataTable[])
  parent: System.Data.DataSet
  langs:
  - csharp
  name: CreateDataReader(DataTable[])
  nameWithType: DataSet.CreateDataReader(DataTable[])
  fullName: System.Data.DataSet.CreateDataReader(DataTable[])
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Returnerar en <xref href=&quot;System.Data.DataTableReader&quot;> </xref> med en resultatmängd <xref href=&quot;System.Data.DataTable&quot;> </xref>."
  remarks: "För att säkerställa att ordningen för resultatet anger i den returnerade <xref:System.Data.DataTableReader>, om en <xref:System.Data.DataTable>inom den <xref:System.Data.DataSet>är tomt, representeras av en tom resultatuppsättning i den returnerade `DataTableReader`.</xref:System.Data.DataSet> </xref:System.Data.DataTable> </xref:System.Data.DataTableReader> Eftersom den här överbelastad versionen kan du ange en lista över `DataTable` instanser som parametrar som du kan ange i vilken ordning som resultatuppsättningar visas i den returnerade `DataTableReader`."
  example:
  - "This example, a Console application, creates three <xref:System.Data.DataTable> instances and adds each to a <xref:System.Data.DataSet>. The example calls the CreateDataReader method and displays the contents of the returned <xref:System.Data.DataTableReader>. Note that the order of the result sets in the `DataTableReader` is controlled by the order of the `DataTable` instances passed as parameters. The example displays the results in the Console window.  \n  \n [!code-vb[DataWorks DataSet.DataTableReaderTables#1](~/add/codesnippet/visualbasic/m-system.data.dataset.cr_1_1.vb)]\n [!code-cs[DataWorks DataSet.DataTableReaderTables#1](~/add/codesnippet/csharp/m-system.data.dataset.cr_1_1.cs)]"
  syntax:
    content: public System.Data.DataTableReader CreateDataReader (System.Data.DataTable[] dataTables);
    parameters:
    - id: dataTables
      type: System.Data.DataTable[]
      description: "En matris med DataTables tillhandahåller ordningen för resultatet anger för att returneras i den <xref href=&quot;System.Data.DataTableReader&quot;> </xref>."
    return:
      type: System.Data.DataTableReader
      description: "En <xref href=&quot;System.Data.DataTableReader&quot;> </xref> som innehåller en eller flera resultatmängder, motsvarar den <xref href=&quot;System.Data.DataTable&quot;> </xref> instanser som ingår i källan <xref href=&quot;System.Data.DataSet&quot;> </xref>. Returnerade resultatmängder finns i den ordning som anges av den <code> dataTables </code> parameter."
  overload: System.Data.DataSet.CreateDataReader*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.DataSetName
  id: DataSetName
  parent: System.Data.DataSet
  langs:
  - csharp
  name: DataSetName
  nameWithType: DataSet.DataSetName
  fullName: System.Data.DataSet.DataSetName
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Hämtar eller anger namnet på aktuellt <xref href=&quot;System.Data.DataSet&quot;> </xref>."
  remarks: ''
  example:
  - "The following example creates a new <xref:System.Data.DataSet> with the given DataSetName.  \n  \n [!code-vb[Classic WebData DataSet.DataSetName Example#1](~/add/codesnippet/visualbasic/p-system.data.dataset.da_1.vb)]\n [!code-cs[Classic WebData DataSet.DataSetName Example#1](~/add/codesnippet/csharp/p-system.data.dataset.da_1.cs)]"
  syntax:
    content: public string DataSetName { get; set; }
    return:
      type: System.String
      description: "Namnet på den <xref href=&quot;System.Data.DataSet&quot;> </xref>."
  overload: System.Data.DataSet.DataSetName*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.DefaultViewManager
  id: DefaultViewManager
  parent: System.Data.DataSet
  langs:
  - csharp
  name: DefaultViewManager
  nameWithType: DataSet.DefaultViewManager
  fullName: System.Data.DataSet.DefaultViewManager
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Hämtar en anpassad vy av data i den <xref href=&quot;System.Data.DataSet&quot;> </xref> att filtrera, söka och navigera med hjälp av en anpassad <xref href=&quot;System.Data.DataViewManager&quot;> </xref>."
  remarks: "<xref:System.Data.DataViewManager>Returnerades av DefaultViewManager egenskap kan du skapa anpassade inställningar för varje <xref:System.Data.DataTable>i <xref:System.Data.DataSet>.</xref:System.Data.DataSet> </xref:System.Data.DataTable> </xref:System.Data.DataViewManager>       När du har fått en <xref:System.Data.DataView>från en <xref:System.Data.DataTable>, sorteringsordning, filtrering, och <xref:System.Data.DataViewRowState>är konfigurerade enligt inställningarna i egenskapen DefaultViewManager.</xref:System.Data.DataViewRowState> </xref:System.Data.DataTable> </xref:System.Data.DataView>"
  example:
  - "The following example gets the default <xref:System.Data.DataViewManager> for a <xref:System.Data.DataSet>, and adds a <xref:System.Data.DataTable> to the <xref:System.Data.DataTableCollection>.  \n  \n [!code-vb[Classic WebData DataSet.DefaultViewManager Example#1](~/add/codesnippet/visualbasic/p-system.data.dataset.de_1.vb)]"
  syntax:
    content: public System.Data.DataViewManager DefaultViewManager { get; }
    return:
      type: System.Data.DataViewManager
      description: "A <xref href=&quot;System.Data.DataViewManager&quot;></xref> object."
  overload: System.Data.DataSet.DefaultViewManager*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.DetermineSchemaSerializationMode(System.Xml.XmlReader)
  id: DetermineSchemaSerializationMode(System.Xml.XmlReader)
  parent: System.Data.DataSet
  langs:
  - csharp
  name: DetermineSchemaSerializationMode(XmlReader)
  nameWithType: DataSet.DetermineSchemaSerializationMode(XmlReader)
  fullName: System.Data.DataSet.DetermineSchemaSerializationMode(XmlReader)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Anger den <xref:System.Data.DataSet.SchemaSerializationMode*>för en <xref href=&quot;System.Data.DataSet&quot;> </xref>.</xref:System.Data.DataSet.SchemaSerializationMode*>"
  remarks: "Den här metoden kan anropas vid deserialisering av ett skrivna <xref:System.Data.DataSet>att fastställa dess <xref:System.Data.DataSet.SchemaSerializationMode%2A>.</xref:System.Data.DataSet.SchemaSerializationMode%2A> </xref:System.Data.DataSet>"
  syntax:
    content: protected System.Data.SchemaSerializationMode DetermineSchemaSerializationMode (System.Xml.XmlReader reader);
    parameters:
    - id: reader
      type: System.Xml.XmlReader
      description: "Den <xref:System.Xml.XmlReader>-instans som har överförts under deserialisering av den <xref href=&quot;System.Data.DataSet&quot;> </xref>.</xref:System.Xml.XmlReader>"
    return:
      type: System.Data.SchemaSerializationMode
      description: "En <xref href=&quot;System.Data.SchemaSerializationMode&quot;> </xref> uppräkning som anger om schemainformation har utelämnats från nyttolasten."
  overload: System.Data.DataSet.DetermineSchemaSerializationMode*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.DetermineSchemaSerializationMode(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  id: DetermineSchemaSerializationMode(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  parent: System.Data.DataSet
  langs:
  - csharp
  name: DetermineSchemaSerializationMode(SerializationInfo,StreamingContext)
  nameWithType: DataSet.DetermineSchemaSerializationMode(SerializationInfo,StreamingContext)
  fullName: System.Data.DataSet.DetermineSchemaSerializationMode(SerializationInfo,StreamingContext)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Anger den <xref:System.Data.DataSet.SchemaSerializationMode*>för en <xref href=&quot;System.Data.DataSet&quot;> </xref>.</xref:System.Data.DataSet.SchemaSerializationMode*>"
  remarks: "Den här metoden kan anropas vid deserialisering av ett skrivna <xref:System.Data.DataSet>att fastställa dess <xref:System.Data.DataSet.SchemaSerializationMode%2A>.</xref:System.Data.DataSet.SchemaSerializationMode%2A> </xref:System.Data.DataSet>"
  syntax:
    content: protected System.Data.SchemaSerializationMode DetermineSchemaSerializationMode (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    parameters:
    - id: info
      type: System.Runtime.Serialization.SerializationInfo
      description: "Den <xref href=&quot;System.Runtime.Serialization.SerializationInfo&quot;> </xref> som en <xref uid=&quot;langword_csharp_DataSet&quot; name=&quot;DataSet&quot; href=&quot;&quot;> </xref>är skyddad konstruktor &lt;xref:System.Data.DataSet.%23ctor%2A&gt; anropas med under deserialisering i fjärrkommunikation scenarier."
    - id: context
      type: System.Runtime.Serialization.StreamingContext
      description: "Den <xref:System.Runtime.Serialization.StreamingContext>som en <xref uid=&quot;langword_csharp_DataSet&quot; name=&quot;DataSet&quot; href=&quot;&quot;> </xref>är skyddad konstruktor &lt;xref:System.Data.DataSet.%23ctor%2A&gt; anropas med under deserialisering i scenarier för fjärrkommunikation.</xref:System.Runtime.Serialization.StreamingContext>"
    return:
      type: System.Data.SchemaSerializationMode
      description: "En <xref href=&quot;System.Data.SchemaSerializationMode&quot;> </xref> uppräkning som anger om schemainformation har utelämnats från nyttolasten."
  overload: System.Data.DataSet.DetermineSchemaSerializationMode*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.EndInit
  id: EndInit
  parent: System.Data.DataSet
  langs:
  - csharp
  name: EndInit()
  nameWithType: DataSet.EndInit()
  fullName: System.Data.DataSet.EndInit()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Slutar initieringen av en <xref href=&quot;System.Data.DataSet&quot;> </xref> som används i ett formulär eller används av en annan komponent. Initieringen av inträffar vid körning."
  remarks: "Visual Studio .NET-miljön för arbetsflödesdesign använder den här metoden för att avsluta initieringen av en komponent som används i ett formulär eller används av en annan komponent. Den <xref:System.Data.DataSet.BeginInit%2A>metoden startar initieringen.</xref:System.Data.DataSet.BeginInit%2A> Med hjälp av den <xref:System.Data.DataSet.BeginInit%2A>och EndInit metoder som förhindrar att kontrollen används innan den har initierats.</xref:System.Data.DataSet.BeginInit%2A>"
  syntax:
    content: public void EndInit ();
    parameters: []
  overload: System.Data.DataSet.EndInit*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.EnforceConstraints
  id: EnforceConstraints
  parent: System.Data.DataSet
  langs:
  - csharp
  name: EnforceConstraints
  nameWithType: DataSet.EnforceConstraints
  fullName: System.Data.DataSet.EnforceConstraints
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Hämtar eller anger ett värde som anger om begränsningsregler följs vid försök update-åtgärden."
  remarks: "Begränsningar är inställda på den <xref:System.Data.DataTable>nivå (<xref:System.Data.DataTable.Constraints%2A> egenskap).</xref:System.Data.DataTable.Constraints%2A> </xref:System.Data.DataTable> Mer information om hur du skapar begränsningar finns [DataTable begränsningar](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following example creates a <xref:System.Data.DataSet> with one table, one column, five rows, and one <xref:System.Data.UniqueConstraint>. The EnforceConstraints property is set to `false` and the values of each row are set to the same value. When the EnforceConstraints property is reset to `true`, a <xref:System.Data.ConstraintException> is generated.  \n  \n [!code-cs[Classic WebData DataSet.EnforceConstraints Example#1](~/add/codesnippet/csharp/p-system.data.dataset.en_1.cs)]\n [!code-vb[Classic WebData DataSet.EnforceConstraints Example#1](~/add/codesnippet/visualbasic/p-system.data.dataset.en_1.vb)]"
  syntax:
    content: public bool EnforceConstraints { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Om-regler tillämpas; Annars <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. Standardvärdet är <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>."
  overload: System.Data.DataSet.EnforceConstraints*
  exceptions:
  - type: System.Data.ConstraintException
    commentId: T:System.Data.ConstraintException
    description: "Ett eller flera villkor kan tillämpas."
  platform:
  - net462
- uid: System.Data.DataSet.ExtendedProperties
  id: ExtendedProperties
  parent: System.Data.DataSet
  langs:
  - csharp
  name: ExtendedProperties
  nameWithType: DataSet.ExtendedProperties
  fullName: System.Data.DataSet.ExtendedProperties
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Hämtar mängden anpassad information som associeras med den <xref uid=&quot;langword_csharp_DataSet&quot; name=&quot;DataSet&quot; href=&quot;&quot;> </xref>."
  remarks: "Egenskapen ExtendedProperties kan du lagra anpassad information med den `DataSet`. Du kan till exempel lagra en tid när data ska uppdateras.       Utökade egenskaper måste vara av typen <xref:System.String>Om du vill att de beständiga när den <xref:System.Data.DataSet>skrivs som XML.</xref:System.Data.DataSet> </xref:System.String>"
  example:
  - "The following example adds a custom property to the <xref:System.Data.PropertyCollection> returned by the <xref:System.Data.DataColumn.ExtendedProperties%2A> property. The second example retrieves the custom property.  \n  \n [!code-cs[Classic WebData DataColumn.ExtendedProperties Example#1](~/add/codesnippet/csharp/p-system.data.dataset.ex_1.cs)]\n [!code-vb[Classic WebData DataColumn.ExtendedProperties Example#1](~/add/codesnippet/visualbasic/p-system.data.dataset.ex_1.vb)]"
  syntax:
    content: public System.Data.PropertyCollection ExtendedProperties { get; }
    return:
      type: System.Data.PropertyCollection
      description: "En <xref href=&quot;System.Data.PropertyCollection&quot;> </xref> med alla anpassade användarinformation."
  overload: System.Data.DataSet.ExtendedProperties*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.GetChanges
  id: GetChanges
  parent: System.Data.DataSet
  langs:
  - csharp
  name: GetChanges()
  nameWithType: DataSet.GetChanges()
  fullName: System.Data.DataSet.GetChanges()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Hämtar en kopia av den <xref href=&quot;System.Data.DataSet&quot;> </xref> som innehåller alla ändringar som gjorts sedan den lästes in eller sedan <xref:System.Data.DataSet.AcceptChanges*>senast anropades.</xref:System.Data.DataSet.AcceptChanges*>"
  remarks: "Skapar en ny <xref:System.Data.DataSet>som innehåller en kopia av alla rader i ursprungligt <xref:System.Data.DataSet>som har väntande ändringar.</xref:System.Data.DataSet> </xref:System.Data.DataSet> Relationen begränsningar kan orsaka ytterligare oförändrat rader som ska läggas till den nya <xref:System.Data.DataSet>om oförändrade rader innehåller primära nycklar som motsvarande sekundärnycklar i ändrade rader.</xref:System.Data.DataSet> Metoden returnerar `null` om det inte finns några rader i ursprungligt <xref:System.Data.DataSet>som har väntande ändringar.</xref:System.Data.DataSet>"
  example:
  - "The following example creates a simple <xref:System.Data.DataSet> with one table, two columns, and ten rows. Two values are changed, and one row is added. A subset of the changed data is created using the GetChanges method. After reconciling errors, a new column is added to the subset, changing the schema. When the <xref:System.Data.DataSet.Merge%2A> method is called with the `missingSchemaAction` set to `MissingSchemaAction.Add`, the new column is added to the original <xref:System.Data.DataSet> object's schema.  \n  \n [!code-cs[Classic WebData DataSet.GetChanges Example#1](~/add/codesnippet/csharp/m-system.data.dataset.ge_0_1.cs)]\n [!code-vb[Classic WebData DataSet.GetChanges Example#1](~/add/codesnippet/visualbasic/m-system.data.dataset.ge_0_1.vb)]"
  syntax:
    content: public System.Data.DataSet GetChanges ();
    parameters: []
    return:
      type: System.Data.DataSet
      description: "En kopia av ändringarna från den här <xref href=&quot;System.Data.DataSet&quot;> </xref> som kan ha åtgärder som utförs på den och senare sammanfogas igen med hjälp av <xref:System.Data.DataSet.Merge*>.</xref:System.Data.DataSet.Merge*> Om några ändrade rader hittas, metoden returnerar <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  overload: System.Data.DataSet.GetChanges*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.GetChanges(System.Data.DataRowState)
  id: GetChanges(System.Data.DataRowState)
  parent: System.Data.DataSet
  langs:
  - csharp
  name: GetChanges(DataRowState)
  nameWithType: DataSet.GetChanges(DataRowState)
  fullName: System.Data.DataSet.GetChanges(DataRowState)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Hämtar en kopia av den <xref href=&quot;System.Data.DataSet&quot;> </xref> som innehåller alla ändringar som gjorts sedan den lästes senast eller sedan <xref:System.Data.DataSet.AcceptChanges*>var kallas, filtreras efter <xref href=&quot;System.Data.DataRowState&quot;> </xref>.</xref:System.Data.DataSet.AcceptChanges*>"
  remarks: "Den <xref:System.Data.DataSet.GetChanges%2A>metoden används för att skapa en andra <xref:System.Data.DataSet>objekt som innehåller endast ändringarna som introduceras i ursprungligt.</xref:System.Data.DataSet> </xref:System.Data.DataSet.GetChanges%2A> Använd den `rowStates` argumentet att ange vilken typ av ändringar som ska innehålla det nya objektet.       Det returnerade kopia är utformat för att slås samman i tillbaka till den här ursprungliga <xref:System.Data.DataSet>.</xref:System.Data.DataSet> Relationen begränsningar kan orsaka överordnade raderna markeras `Unchanged` som ska inkluderas. Om någon rad med den önskade <xref:System.Data.DataRowState>hittas, den <xref:System.Data.DataSet.GetChanges%2A>metoden returnerar `null`.</xref:System.Data.DataSet.GetChanges%2A> </xref:System.Data.DataRowState>"
  example:
  - "The following example uses the <xref:System.Data.DataSet.GetChanges%2A> method to create a second <xref:System.Data.DataSet> object, which is then used to update a data source.  \n  \n [!code-vb[Classic WebData DataSet.GetChanges1 Example#1](~/add/codesnippet/visualbasic/m-system.data.dataset.ge_2_1.vb)]\n [!code-cs[Classic WebData DataSet.GetChanges1 Example#1](~/add/codesnippet/csharp/m-system.data.dataset.ge_2_1.cs)]"
  syntax:
    content: public System.Data.DataSet GetChanges (System.Data.DataRowState rowStates);
    parameters:
    - id: rowStates
      type: System.Data.DataRowState
      description: "En av de <xref href=&quot;System.Data.DataRowState&quot;> </xref> värden."
    return:
      type: System.Data.DataSet
      description: "En filtrerad kopia av den <xref href=&quot;System.Data.DataSet&quot;> </xref> som kan ha åtgärder som utförs på den och därefter sammanfogas igen med hjälp av <xref:System.Data.DataSet.Merge*>.</xref:System.Data.DataSet.Merge*> Om någon rad med den önskade <xref href=&quot;System.Data.DataRowState&quot;> </xref> hittas metoden returnerar <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  overload: System.Data.DataSet.GetChanges*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.GetDataSetSchema(System.Xml.Schema.XmlSchemaSet)
  id: GetDataSetSchema(System.Xml.Schema.XmlSchemaSet)
  parent: System.Data.DataSet
  langs:
  - csharp
  name: GetDataSetSchema(XmlSchemaSet)
  nameWithType: DataSet.GetDataSetSchema(XmlSchemaSet)
  fullName: System.Data.DataSet.GetDataSetSchema(XmlSchemaSet)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Hämtar en kopia av <xref href=&quot;System.Xml.Schema.XmlSchemaSet&quot;> </xref> för datauppsättningen."
  syntax:
    content: public static System.Xml.Schema.XmlSchemaComplexType GetDataSetSchema (System.Xml.Schema.XmlSchemaSet schemaSet);
    parameters:
    - id: schemaSet
      type: System.Xml.Schema.XmlSchemaSet
      description: "Ange det angivna schemat."
    return:
      type: System.Xml.Schema.XmlSchemaComplexType
      description: "A copy of <xref href=&quot;System.Xml.Schema.XmlSchemaSet&quot;></xref>."
  overload: System.Data.DataSet.GetDataSetSchema*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  id: GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  parent: System.Data.DataSet
  langs:
  - csharp
  name: GetObjectData(SerializationInfo,StreamingContext)
  nameWithType: DataSet.GetObjectData(SerializationInfo,StreamingContext)
  fullName: System.Data.DataSet.GetObjectData(SerializationInfo,StreamingContext)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Fylls informationsobjekt för serialisering med de data som behövs för att serialisera den <xref href=&quot;System.Data.DataSet&quot;> </xref>."
  syntax:
    content: public virtual void GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    parameters:
    - id: info
      type: System.Runtime.Serialization.SerializationInfo
      description: "En <xref href=&quot;System.Runtime.Serialization.SerializationInfo&quot;> </xref> som innehåller serialiserade data som är associerade med den <xref href=&quot;System.Data.DataSet&quot;> </xref>."
    - id: context
      type: System.Runtime.Serialization.StreamingContext
      description: "En <xref:System.Runtime.Serialization.StreamingContext>som innehåller källan och målet för den serialiserade dataströmmen som är associerade med den <xref href=&quot;System.Data.DataSet&quot;> </xref>.</xref:System.Runtime.Serialization.StreamingContext>"
  overload: System.Data.DataSet.GetObjectData*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>info</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Data.DataSet.GetSchemaSerializable
  id: GetSchemaSerializable
  parent: System.Data.DataSet
  langs:
  - csharp
  name: GetSchemaSerializable()
  nameWithType: DataSet.GetSchemaSerializable()
  fullName: System.Data.DataSet.GetSchemaSerializable()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Returnerar en serialiserbar <xref:System.Xml.Schema.XMLSchema>instans.</xref:System.Xml.Schema.XMLSchema>"
  syntax:
    content: protected virtual System.Xml.Schema.XmlSchema GetSchemaSerializable ();
    parameters: []
    return:
      type: System.Xml.Schema.XmlSchema
      description: "Den <xref:System.Xml.Schema.XMLSchema>instans.</xref:System.Xml.Schema.XMLSchema>"
  overload: System.Data.DataSet.GetSchemaSerializable*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.GetSerializationData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  id: GetSerializationData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  parent: System.Data.DataSet
  langs:
  - csharp
  name: GetSerializationData(SerializationInfo,StreamingContext)
  nameWithType: DataSet.GetSerializationData(SerializationInfo,StreamingContext)
  fullName: System.Data.DataSet.GetSerializationData(SerializationInfo,StreamingContext)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Deserializes tabelldata från binary eller XML-dataström."
  syntax:
    content: protected void GetSerializationData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    parameters:
    - id: info
      type: System.Runtime.Serialization.SerializationInfo
      description: "Den <xref href=&quot;System.Runtime.Serialization.SerializationInfo&quot;> </xref> instans."
    - id: context
      type: System.Runtime.Serialization.StreamingContext
      description: "Direktuppspelningskontexten."
  overload: System.Data.DataSet.GetSerializationData*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.GetXml
  id: GetXml
  parent: System.Data.DataSet
  langs:
  - csharp
  name: GetXml()
  nameWithType: DataSet.GetXml()
  fullName: System.Data.DataSet.GetXml()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Returnerar XML-representation av data som lagras i den <xref href=&quot;System.Data.DataSet&quot;> </xref>."
  remarks: "Den här metoden anropas är identisk med att anropa <xref:System.Data.DataSet.WriteXml%2A>med <xref:System.Data.XmlWriteMode>värdet <xref:System.Data.XmlWriteMode>.</xref:System.Data.XmlWriteMode> </xref:System.Data.XmlWriteMode> </xref:System.Data.DataSet.WriteXml%2A>       GetXml returnerar XML som en sträng och därför kräver mer arbete än <xref:System.Data.DataSet.WriteXml%2A>att skriva XML till en fil.</xref:System.Data.DataSet.WriteXml%2A>       Om du skapar en <xref:System.Data.DataSet>med schemahärledning och serialisera den med hjälp av XML-eller webbtjänster, kolumnordning ändras.</xref:System.Data.DataSet>"
  example:
  - "The following example creates a <xref:System.Data.DataSet> and <xref:System.Data.DataTable>, adds sample data, and then displays the data in XML format.  \n  \n [!code-cs[Classic WebData DataSet.GetXml Example#1](~/add/codesnippet/csharp/m-system.data.dataset.ge_1_1.cs)]\n [!code-vb[Classic WebData DataSet.GetXml Example#1](~/add/codesnippet/visualbasic/m-system.data.dataset.ge_1_1.vb)]  \n  \n This sample demonstrates how to write data into an XML file from a DataSet and read data into DataSet from XML. This sample will create one dataset with two tables, use two ways to export a dataset into the XML files (WriteXml and GetXml), and use two ways (ReadXml and InferXmlSchema) to import a dataset from the XML files.  \n  \n Before you compile and run the sample, you need to create four XML files in the sample directory. First, create ElementsWithAttributes.xml:  \n  \n```  \n<MySchool>  \n  <Course CourseID=\"C1045\" Year=\"2012\"  Title=\"Calculus\" Credits=\"4\" DepartmentID=\"7\">New</Course>  \n  <Course CourseID=\"C1061\" Year=\"2012\"  Title=\"Physics\" Credits=\"4\" DepartmentID=\"1\" />  \n  <Department DepartmentID=\"1\" Name=\"Engineering\" Budget=\"350000\" StartDate=\"2007-09-01T00:00:00+08:00\" Administrator=\"2\" />  \n  <Department DepartmentID=\"7\" Name=\"Mathematics\" Budget=\"250024\" StartDate=\"2007-09-01T00:00:00+08:00\" Administrator=\"3\">Cancelled</Department>  \n</MySchool>  \n```  \n  \n Next, create ElementsWithChildElementsxml.xml:  \n  \n```  \n<MySchool>  \n  <Course>  \n    <CourseID>C1045</CourseID>  \n    <Year>2012</Year>  \n    <Title>Calculus</Title>  \n    <Credits>4</Credits>  \n    <DepartmentID>7</DepartmentID>  \n  </Course>  \n  <Course>  \n    <CourseID>C1061</CourseID>  \n    <Year>2012</Year>  \n    <Title>Physics</Title>  \n    <Credits>4</Credits>  \n    <DepartmentID>1</DepartmentID>  \n  </Course>  \n  <Course>  \n    <CourseID>C2021</CourseID>  \n    <Year>2012</Year>  \n    <Title>Composition</Title>  \n    <Credits>3</Credits>  \n    <DepartmentID>2</DepartmentID>  \n  </Course>  \n  <Course>  \n    <CourseID>C2042</CourseID>  \n    <Year>2012</Year>  \n    <Title>Literature</Title>  \n    <Credits>4</Credits>  \n    <DepartmentID>2</DepartmentID>  \n  </Course>  \n  <Department>  \n    <DepartmentID>1</DepartmentID>  \n    <Name>Engineering</Name>  \n    <Budget>350000</Budget>  \n    <StartDate>2007-09-01T00:00:00+08:00</StartDate>  \n    <Administrator>2</Administrator>  \n  </Department>  \n  <Department>  \n    <DepartmentID>2</DepartmentID>  \n    <Name>English</Name>  \n    <Budget>120000</Budget>  \n    <StartDate>2007-09-01T00:00:00+08:00</StartDate>  \n    <Administrator>6</Administrator>  \n  </Department>  \n  <Department>  \n    <DepartmentID>4</DepartmentID>  \n    <Name>Economics</Name>  \n    <Budget>200000</Budget>  \n    <StartDate>2007-09-01T00:00:00+08:00</StartDate>  \n    <Administrator>4</Administrator>  \n  </Department>  \n  <Department>  \n    <DepartmentID>7</DepartmentID>  \n    <Name>Mathematics</Name>  \n    <Budget>250024</Budget>  \n    <StartDate>2007-09-01T00:00:00+08:00</StartDate>  \n    <Administrator>3</Administrator>  \n  </Department>  \n</MySchool>  \n```  \n  \n Now create ElementsWithOnlyAttributes.xml:  \n  \n```  \n<MySchool>  \n  <Course CourseID=\"C1045\" Year=\"2012\"  Title=\"Calculus\" Credits=\"4\" DepartmentID=\"7\" />  \n  <Course CourseID=\"C1061\" Year=\"2012\"  Title=\"Physics\" Credits=\"4\" DepartmentID=\"1\" />  \n  <Department DepartmentID=\"1\" Name=\"Engineering\" Budget=\"350000\" StartDate=\"2007-09-01T00:00:00+08:00\" Administrator=\"2\" />  \n  <Department DepartmentID=\"7\" Name=\"Mathematics\" Budget=\"250024\" StartDate=\"2007-09-01T00:00:00+08:00\" Administrator=\"3\" />  \n</MySchool>  \n```  \n  \n And finally, create RepeatingElements.xml:  \n  \n```  \n<MySchool>  \n  <Course>C1045</Course>  \n  <Course>C1061</Course>  \n  <Department>Engineering</Department>   \n  <Department>Mathematics</Department>  \n</MySchool>  \n```  \n  \n Now you can compile and run the following source code.  [How to Store Data of DataSet into XML File](http://code.msdn.microsoft.com/How-to-Store-Data-of-7b9710f3) has Visual Basic and C# projects for this sample.  \n  \n```  \nusing System;  \nusing System.Data;  \nusing System.IO;  \nusing System.Text;  \nusing System.Xml;  \n  \n// Use WriteXml method to export the dataset.  \nstatic class DataTableHelper {  \n   public static void WriteDataSetToXML(DataSet dataset, String xmlFileName) {  \n      using (FileStream fsWriterStream = new FileStream(xmlFileName, FileMode.Create)) {  \n         using (XmlTextWriter xmlWriter = new XmlTextWriter(fsWriterStream, Encoding.Unicode)) {  \n            dataset.WriteXml(xmlWriter, XmlWriteMode.WriteSchema);  \n            Console.WriteLine(\"Write {0} to the File {1}.\", dataset.DataSetName, xmlFileName);  \n            Console.WriteLine();  \n         }  \n      }  \n   }  \n  \n   // Use GetXml method to get the XML data of the dataset and then export to the file.  \n   public static void GetXMLFromDataSet(DataSet dataset, String xmlFileName) {  \n      using (StreamWriter writer = new StreamWriter(xmlFileName)) {  \n         writer.WriteLine(dataset.GetXml());  \n         Console.WriteLine(\"Get Xml data from {0} and write to the File {1}.\", dataset.DataSetName, xmlFileName);  \n         Console.WriteLine();  \n      }  \n   }  \n  \n   // Use ReadXml method to import the dataset from the dataset.  \n   public static void ReadXmlIntoDataSet(DataSet newDataSet, String xmlFileName) {  \n      using (FileStream fsReaderStream = new FileStream(xmlFileName, FileMode.Open)) {  \n         using (XmlTextReader xmlReader = new XmlTextReader(fsReaderStream)) {  \n            newDataSet.ReadXml(xmlReader, XmlReadMode.ReadSchema);  \n         }  \n      }  \n   }  \n  \n   // Display the columns and value of DataSet.  \n   public static void ShowDataSet(DataSet dataset) {  \n      foreach (DataTable table in dataset.Tables) {  \n         Console.WriteLine(\"Table {0}:\", table.TableName);  \n         ShowDataTable(table);  \n      }  \n   }  \n  \n   // Display the columns and value of DataTable.  \n   private static void ShowDataTable(DataTable table) {  \n      foreach (DataColumn col in table.Columns) {  \n         Console.Write(\"{0,-14}\", col.ColumnName);  \n      }  \n      Console.WriteLine(\"{0,-14}\", \"\");  \n  \n      foreach (DataRow row in table.Rows) {  \n         if (row.RowState == DataRowState.Deleted) {  \n            foreach (DataColumn col in table.Columns) {  \n               if (col.DataType.Equals(typeof(DateTime))) {  \n                  Console.Write(\"{0,-14:d}\", row[col, DataRowVersion.Original]);  \n               }  \n               else if (col.DataType.Equals(typeof(Decimal))) {  \n                  Console.Write(\"{0,-14:C}\", row[col, DataRowVersion.Original]);  \n               }  \n               else {  \n                  Console.Write(\"{0,-14}\", row[col, DataRowVersion.Original]);  \n               }  \n            }  \n         }  \n         else {  \n            foreach (DataColumn col in table.Columns) {  \n               if (col.DataType.Equals(typeof(DateTime))) {  \n                  Console.Write(\"{0,-14:d}\", row[col]);  \n               }  \n               else if (col.DataType.Equals(typeof(Decimal))) {  \n                  Console.Write(\"{0,-14:C}\", row[col]);  \n               }  \n               else {  \n                  Console.Write(\"{0,-14}\", row[col]);  \n               }  \n            }  \n         }  \n         Console.WriteLine(\"{0,-14}\", \"\");  \n      }  \n   }  \n  \n   // Display the columns of DataSet.  \n   public static void ShowDataSetSchema(DataSet dataSet) {  \n      Console.WriteLine(\"{0} contains the following tables:\", dataSet.DataSetName);  \n      foreach (DataTable table in dataSet.Tables) {  \n         Console.WriteLine(\"   Table {0} contains the following columns:\", table.TableName);  \n         ShowDataTableSchema(table);  \n      }  \n   }  \n  \n   // Display the columns of DataTable  \n   private static void ShowDataTableSchema(DataTable table) {  \n      String columnString = \"\";  \n      foreach (DataColumn col in table.Columns) {  \n         columnString += col.ColumnName + \"   \";  \n      }  \n      Console.WriteLine(columnString);  \n   }  \n}  \n  \nclass Program {  \n   static void Main(string[] args) {  \n      // Create the DataSet  \n      DataSet school = new DataSet(\"MySchool\");  \n      DataTable course = CreateCourse();  \n      DataTable department = CreateDepartment();  \n      school.Tables.Add(course);  \n      school.Tables.Add(department);  \n  \n      // Define the constraint between the tables.  \n      ForeignKeyConstraint courseDepartFK = new ForeignKeyConstraint(\"CourseDepartFK\", department.Columns[\"DepartmentID\"], course.Columns[\"DepartmentID\"]);  \n      courseDepartFK.DeleteRule = Rule.Cascade;  \n      courseDepartFK.UpdateRule = Rule.Cascade;  \n      courseDepartFK.AcceptRejectRule = AcceptRejectRule.None;  \n      course.Constraints.Add(courseDepartFK);  \n  \n      InsertDepartments(department);  \n      InsertCourses(course);  \n  \n      // Export the dataset to the XML file.  \n      Console.WriteLine(\"Data of the whole DataSet {0}\", school.DataSetName);  \n      DataTableHelper.ShowDataSet(school);  \n  \n      String xmlWithSchemaFileName = \"WriterXMLWithSchema.xml\";  \n      String xmlGetDataFileName = \"GetXML.xml\";  \n  \n      // Use two ways to export the dataset to the Xml file.  \n      DataTableHelper.WriteDataSetToXML(school, xmlWithSchemaFileName);  \n      DataTableHelper.GetXMLFromDataSet(school, xmlGetDataFileName);  \n  \n      // Import the dataset from the XML file.  \n      // Use two ways to import the dataset from the Xml file.  \n      Console.WriteLine(\"Read Xml document into a new DataSet:\");  \n      DataSet newSchool = new DataSet(\"NewSchool\");  \n      DataTableHelper.ReadXmlIntoDataSet(newSchool, xmlWithSchemaFileName);  \n      DataTableHelper.ShowDataSetSchema(newSchool);  \n      Console.WriteLine();  \n  \n      Console.WriteLine(\"Infer a schema for a DataSet from an XML document:\");  \n      InferDataSetSchemaFromXml();  \n  \n      Console.WriteLine(\"Press any key to exit.\");  \n      Console.ReadKey();  \n   }  \n  \n   static DataTable CreateCourse() {  \n      DataTable course = new DataTable(\"Course\");  \n      DataColumn[] cols ={  \n                              new DataColumn(\"CourseID\",typeof(String)),  \n                              new DataColumn(\"Year\",typeof(Int32)),  \n                              new DataColumn(\"Title\",typeof(String)),  \n                              new DataColumn(\"Credits\",typeof(Int32)),  \n                              new DataColumn(\"DepartmentID\",typeof(Int32))};  \n      course.Columns.AddRange(cols);  \n  \n      course.PrimaryKey = new DataColumn[] { course.Columns[\"CourseID\"], course.Columns[\"Year\"] };  \n  \n      return course;  \n   }  \n  \n   static DataTable CreateDepartment() {  \n      DataTable department = new DataTable(\"Department\");  \n      DataColumn[] cols = {   \n                                new DataColumn(\"DepartmentID\", typeof(Int32)),  \n                                new DataColumn(\"Name\",typeof(String)),  \n                                new DataColumn(\"Budget\",typeof(Decimal)),  \n                                new DataColumn(\"StartDate\",typeof(DateTime)),  \n                                new DataColumn(\"Administrator\",typeof(Int32))};  \n      department.Columns.AddRange(cols);  \n  \n      department.PrimaryKey = new DataColumn[] { department.Columns[\"DepartmentID\"] };  \n  \n      return department;  \n   }  \n  \n   static void InsertDepartments(DataTable department) {  \n      Object[] rows = {   \n                            new Object[]{1,\"Engineering\",350000.00,new DateTime(2007,9,1),2},  \n                            new Object[]{2,\"English\",120000.00,new DateTime(2007,9,1),6},  \n                            new Object[]{4,\"Economics\",200000.00,new DateTime(2007,9,1),4},  \n                            new Object[]{7,\"Mathematics\",250024.00,new DateTime(2007,9,1),3}};  \n  \n      foreach (Object[] row in rows) {  \n         department.Rows.Add(row);  \n      }  \n   }  \n  \n   static void InsertCourses(DataTable course) {  \n      Object[] rows ={  \n                               new Object[]{\"C1045\",2012,\"Calculus\",4,7},  \n                               new Object[]{\"C1061\",2012,\"Physics\",4,1},  \n                               new Object[]{\"C2021\",2012,\"Composition\",3,2},  \n                               new Object[]{\"C2042\",2012,\"Literature\",4,2}};  \n  \n      foreach (Object[] row in rows) {  \n         course.Rows.Add(row);  \n      }  \n   }  \n  \n   // Display the results of inferring schema from four types of XML structures  \n   private static void InferDataSetSchemaFromXml() {  \n      String[] xmlFileNames = {   \n  \n                                    @\"ElementsWithOnlyAttributes.xml\",   \n                                    @\"ElementsWithAttributes.xml\",  \n                                    @\"RepeatingElements.xml\",   \n                                    @\"ElementsWithChildElements.xml\" };  \n  \n      foreach (String xmlFileName in xmlFileNames) {  \n         Console.WriteLine(\"Result of {0}\", Path.GetFileNameWithoutExtension(xmlFileName));  \n         DataSet newSchool = new DataSet();  \n         newSchool.InferXmlSchema(xmlFileName, null);  \n         DataTableHelper.ShowDataSetSchema(newSchool);  \n         Console.WriteLine();  \n      }  \n   }  \n}  \n```"
  syntax:
    content: public string GetXml ();
    parameters: []
    return:
      type: System.String
      description: "En sträng som är en representation av data som lagras i den <xref href=&quot;System.Data.DataSet&quot;> </xref>."
  overload: System.Data.DataSet.GetXml*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.GetXmlSchema
  id: GetXmlSchema
  parent: System.Data.DataSet
  langs:
  - csharp
  name: GetXmlSchema()
  nameWithType: DataSet.GetXmlSchema()
  fullName: System.Data.DataSet.GetXmlSchema()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Returnerar det XML-schemat för XML-representation av data som lagras i den <xref href=&quot;System.Data.DataSet&quot;> </xref>."
  remarks: "Den här metoden anropas är identisk med anropar <xref:System.Data.DataSet.WriteXmlSchema%2A>, förutom att endast primära schemat skrivs.</xref:System.Data.DataSet.WriteXmlSchema%2A>       GetXmlSchema returnerar XML som en sträng och därför kräver mer arbete än <xref:System.Data.DataSet.WriteXmlSchema%2A>att skriva XML till en fil.</xref:System.Data.DataSet.WriteXmlSchema%2A>       Om du skapar en <xref:System.Data.DataSet>med schemahärledning och serialisera den med hjälp av XML-eller webbtjänster, kolumnordning ändras.</xref:System.Data.DataSet>"
  example:
  - "The following example creates a <xref:System.Data.DataSet> and <xref:System.Data.DataTable>, and then displays the schema in XML format.  \n  \n [!code-cs[Classic WebData DataSet.GetXmlSchema Example#1](~/add/codesnippet/csharp/m-system.data.dataset.ge_3_1.cs)]\n [!code-vb[Classic WebData DataSet.GetXmlSchema Example#1](~/add/codesnippet/visualbasic/m-system.data.dataset.ge_3_1.vb)]"
  syntax:
    content: public string GetXmlSchema ();
    parameters: []
    return:
      type: System.String
      description: "Sträng som är XML-schemat för XML-representation av data som lagras i den <xref href=&quot;System.Data.DataSet&quot;> </xref>."
  overload: System.Data.DataSet.GetXmlSchema*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.HasChanges
  id: HasChanges
  parent: System.Data.DataSet
  langs:
  - csharp
  name: HasChanges()
  nameWithType: DataSet.HasChanges()
  fullName: System.Data.DataSet.HasChanges()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Hämtar ett värde som anger om den <xref href=&quot;System.Data.DataSet&quot;> </xref> har ändringar, inklusive nya, borttagna eller ändrade rader."
  remarks: ''
  example:
  - "The following example uses the <xref:System.Data.DataSet.GetChanges%2A> method to create a second <xref:System.Data.DataSet> object that is then used to update a data source.  \n  \n [!code-vb[Classic WebData DataSet.HasChanges Example#1](~/add/codesnippet/visualbasic/m-system.data.dataset.ha_0_1.vb)]\n [!code-cs[Classic WebData DataSet.HasChanges Example#1](~/add/codesnippet/csharp/m-system.data.dataset.ha_0_1.cs)]"
  syntax:
    content: public bool HasChanges ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Om den <xref href=&quot;System.Data.DataSet&quot;> </xref> ändringar har, annars <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Data.DataSet.HasChanges*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.HasChanges(System.Data.DataRowState)
  id: HasChanges(System.Data.DataRowState)
  parent: System.Data.DataSet
  langs:
  - csharp
  name: HasChanges(DataRowState)
  nameWithType: DataSet.HasChanges(DataRowState)
  fullName: System.Data.DataSet.HasChanges(DataRowState)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Hämtar ett värde som anger om den <xref href=&quot;System.Data.DataSet&quot;> </xref> har ändringar, inklusive nya, borttagna eller ändrade rader, filtreras efter <xref href=&quot;System.Data.DataRowState&quot;> </xref>."
  remarks: "Granska den <xref:System.Data.DataSet.HasChanges%2A>egenskapen för den `DataSet` innan du anropar den <xref:System.Data.DataSet.GetChanges%2A>metoden.</xref:System.Data.DataSet.GetChanges%2A> </xref:System.Data.DataSet.HasChanges%2A>"
  example:
  - "The following example uses the <xref:System.Data.DataSet.GetChanges%2A> method to create a second <xref:System.Data.DataSet> object, which is then used to update a data source.  \n  \n [!code-vb[Classic WebData DataSet.GetChanges1 Example#1](~/add/codesnippet/visualbasic/m-system.data.dataset.ha_1_1.vb)]\n [!code-cs[Classic WebData DataSet.GetChanges1 Example#1](~/add/codesnippet/csharp/m-system.data.dataset.ha_1_1.cs)]"
  syntax:
    content: public bool HasChanges (System.Data.DataRowState rowStates);
    parameters:
    - id: rowStates
      type: System.Data.DataRowState
      description: "En av de <xref href=&quot;System.Data.DataRowState&quot;> </xref> värden."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Om den <xref href=&quot;System.Data.DataSet&quot;> </xref> ändringar har, annars <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Data.DataSet.HasChanges*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.HasErrors
  id: HasErrors
  parent: System.Data.DataSet
  langs:
  - csharp
  name: HasErrors
  nameWithType: DataSet.HasErrors
  fullName: System.Data.DataSet.HasErrors
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Hämtar ett värde som anger om det finns fel i någon av de <xref href=&quot;System.Data.DataTable&quot;> </xref> objekt inom detta <xref href=&quot;System.Data.DataSet&quot;> </xref>."
  remarks: "Varje <xref:System.Data.DataTable>i en <xref:System.Data.DataSet>har också en <xref:System.Data.DataTable.HasErrors%2A>egenskap.</xref:System.Data.DataTable.HasErrors%2A> </xref:System.Data.DataSet> </xref:System.Data.DataTable> Använd den `HasErrors` -egenskapen för den `DataSet` först att avgöra om någon tabell som har fel, innan enskilda <xref:System.Data.DataTable>objekt.</xref:System.Data.DataTable> Om en `DataTable` har fel, den <xref:System.Data.DataTable.GetErrors%2A>metoden returnerar en matris med <xref:System.Data.DataRow>objekt som innehåller fel.</xref:System.Data.DataRow> </xref:System.Data.DataTable.GetErrors%2A>"
  example:
  - "The following example uses the HasErrors property to determine whether a <xref:System.Data.DataSet> object contains errors. If so, the errors for each <xref:System.Data.DataRow> in each <xref:System.Data.DataTable> are printed.  \n  \n [!code-cs[Classic WebData DataSet.HasErrors Example#1](~/add/codesnippet/csharp/p-system.data.dataset.ha_1.cs)]\n [!code-vb[Classic WebData DataSet.HasErrors Example#1](~/add/codesnippet/visualbasic/p-system.data.dataset.ha_1.vb)]"
  syntax:
    content: public bool HasErrors { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Om någon tabell som innehåller ett fel; annars <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Data.DataSet.HasErrors*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.InferXmlSchema(System.IO.Stream,System.String[])
  id: InferXmlSchema(System.IO.Stream,System.String[])
  parent: System.Data.DataSet
  langs:
  - csharp
  name: InferXmlSchema(Stream,String[])
  nameWithType: DataSet.InferXmlSchema(Stream,String[])
  fullName: System.Data.DataSet.InferXmlSchema(Stream,String[])
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Tillämpar XML-schemat från det angivna <xref:System.IO.Stream>till den <xref href=&quot;System.Data.DataSet&quot;> </xref>.</xref:System.IO.Stream>"
  syntax:
    content: public void InferXmlSchema (System.IO.Stream stream, string[] nsArray);
    parameters:
    - id: stream
      type: System.IO.Stream
      description: "Den <xref uid=&quot;langword_csharp_Stream&quot; name=&quot;Stream&quot; href=&quot;&quot;> </xref> som du vill läsa schemat."
    - id: nsArray
      type: System.String[]
      description: "En strängmatris namnområde identifierare URI (Uniform Resource) som ska undantas från schemahärledning."
  overload: System.Data.DataSet.InferXmlSchema*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.InferXmlSchema(System.IO.TextReader,System.String[])
  id: InferXmlSchema(System.IO.TextReader,System.String[])
  parent: System.Data.DataSet
  langs:
  - csharp
  name: InferXmlSchema(TextReader,String[])
  nameWithType: DataSet.InferXmlSchema(TextReader,String[])
  fullName: System.Data.DataSet.InferXmlSchema(TextReader,String[])
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Tillämpar XML-schemat från det angivna <xref:System.IO.TextReader>till den <xref href=&quot;System.Data.DataSet&quot;> </xref>.</xref:System.IO.TextReader>"
  syntax:
    content: public void InferXmlSchema (System.IO.TextReader reader, string[] nsArray);
    parameters:
    - id: reader
      type: System.IO.TextReader
      description: "Den <xref uid=&quot;langword_csharp_TextReader&quot; name=&quot;TextReader&quot; href=&quot;&quot;> </xref> som du vill läsa schemat."
    - id: nsArray
      type: System.String[]
      description: "En strängmatris namnområde identifierare URI (Uniform Resource) som ska undantas från schemahärledning."
  overload: System.Data.DataSet.InferXmlSchema*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.InferXmlSchema(System.String,System.String[])
  id: InferXmlSchema(System.String,System.String[])
  parent: System.Data.DataSet
  langs:
  - csharp
  name: InferXmlSchema(String,String[])
  nameWithType: DataSet.InferXmlSchema(String,String[])
  fullName: System.Data.DataSet.InferXmlSchema(String,String[])
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Tillämpar XML-schemat från den angivna filen för den <xref href=&quot;System.Data.DataSet&quot;> </xref>."
  syntax:
    content: public void InferXmlSchema (string fileName, string[] nsArray);
    parameters:
    - id: fileName
      type: System.String
      description: "Namnet på filen (inklusive sökväg) som du vill läsa schemat."
    - id: nsArray
      type: System.String[]
      description: "En strängmatris namnområde identifierare URI (Uniform Resource) som ska undantas från schemahärledning."
  overload: System.Data.DataSet.InferXmlSchema*
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "<xref href=&quot;System.Security.Permissions.FileIOPermission&quot;></xref>är inte inställd på <xref href=&quot;System.Security.Permissions.FileIOPermissionAccess&quot;> </xref>."
  platform:
  - net462
- uid: System.Data.DataSet.InferXmlSchema(System.Xml.XmlReader,System.String[])
  id: InferXmlSchema(System.Xml.XmlReader,System.String[])
  parent: System.Data.DataSet
  langs:
  - csharp
  name: InferXmlSchema(XmlReader,String[])
  nameWithType: DataSet.InferXmlSchema(XmlReader,String[])
  fullName: System.Data.DataSet.InferXmlSchema(XmlReader,String[])
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Tillämpar XML-schemat från det angivna <xref:System.Xml.XmlReader>till den <xref href=&quot;System.Data.DataSet&quot;> </xref>.</xref:System.Xml.XmlReader>"
  syntax:
    content: public void InferXmlSchema (System.Xml.XmlReader reader, string[] nsArray);
    parameters:
    - id: reader
      type: System.Xml.XmlReader
      description: "Den <xref uid=&quot;langword_csharp_XMLReader&quot; name=&quot;XMLReader&quot; href=&quot;&quot;> </xref> som du vill läsa schemat."
    - id: nsArray
      type: System.String[]
      description: "En strängmatris namnområde identifierare URI (Uniform Resource) som ska undantas från schemahärledning."
  overload: System.Data.DataSet.InferXmlSchema*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.Initialized
  id: Initialized
  parent: System.Data.DataSet
  langs:
  - csharp
  name: Initialized
  nameWithType: DataSet.Initialized
  fullName: System.Data.DataSet.Initialized
  type: Event
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Inträffar efter den <xref href=&quot;System.Data.DataSet&quot;> </xref> har initierats."
  remarks: "Mer information finns i <xref:System.Data.DataSet.IsInitialized%2A>.</xref:System.Data.DataSet.IsInitialized%2A>"
  syntax:
    content: public event EventHandler Initialized;
    return:
      type: System.EventHandler
      description: "Som ska läggas till."
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.InitializeDerivedDataSet
  id: InitializeDerivedDataSet
  parent: System.Data.DataSet
  langs:
  - csharp
  name: InitializeDerivedDataSet()
  nameWithType: DataSet.InitializeDerivedDataSet()
  fullName: System.Data.DataSet.InitializeDerivedDataSet()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Deserialisera alla tabeller data på en datamängd från binary eller XML-dataström."
  syntax:
    content: protected virtual void InitializeDerivedDataSet ();
    parameters: []
  overload: System.Data.DataSet.InitializeDerivedDataSet*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.IsBinarySerialized(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  id: IsBinarySerialized(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  parent: System.Data.DataSet
  langs:
  - csharp
  name: IsBinarySerialized(SerializationInfo,StreamingContext)
  nameWithType: DataSet.IsBinarySerialized(SerializationInfo,StreamingContext)
  fullName: System.Data.DataSet.IsBinarySerialized(SerializationInfo,StreamingContext)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Kontrollerar om format för serialiserade representation av den <xref uid=&quot;langword_csharp_DataSet&quot; name=&quot;DataSet&quot; href=&quot;&quot;> </xref>."
  remarks: "Den här medlemmen stöder .NET Framework-infrastrukturen och är inte avsedd att användas direkt från din kod."
  syntax:
    content: protected bool IsBinarySerialized (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    parameters:
    - id: info
      type: System.Runtime.Serialization.SerializationInfo
      description: "Den <xref href=&quot;System.Runtime.Serialization.SerializationInfo&quot;> </xref> objekt."
    - id: context
      type: System.Runtime.Serialization.StreamingContext
      description: "Den <xref:System.Runtime.Serialization.StreamingContext>objekt.</xref:System.Runtime.Serialization.StreamingContext>"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Om den angivna <xref href=&quot;System.Runtime.Serialization.SerializationInfo&quot;> </xref> representerar en <xref uid=&quot;langword_csharp_DataSet&quot; name=&quot;DataSet&quot; href=&quot;&quot;> </xref> serialiseras i dess binärformat <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> annars."
  overload: System.Data.DataSet.IsBinarySerialized*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.IsInitialized
  id: IsInitialized
  parent: System.Data.DataSet
  langs:
  - csharp
  name: IsInitialized
  nameWithType: DataSet.IsInitialized
  fullName: System.Data.DataSet.IsInitialized
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Hämtar ett värde som anger om den <xref href=&quot;System.Data.DataSet&quot;> </xref> har initierats."
  remarks: "Returnera statusen för den <xref:System.Data.DataSet>medan det skapas för instansen av Visual Studio.</xref:System.Data.DataSet> Den <xref:System.Data.DataSet.BeginInit%2A>metoden anger det `false` och <xref:System.Data.DataSet.EndInit%2A>metoden anger det `true`.</xref:System.Data.DataSet.EndInit%2A> </xref:System.Data.DataSet.BeginInit%2A>"
  syntax:
    content: public bool IsInitialized { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>att ange komponenten har slutfört initiering; Annars <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Data.DataSet.IsInitialized*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.Load(System.Data.IDataReader,System.Data.LoadOption,System.Data.DataTable[])
  id: Load(System.Data.IDataReader,System.Data.LoadOption,System.Data.DataTable[])
  parent: System.Data.DataSet
  langs:
  - csharp
  name: Load(IDataReader,LoadOption,DataTable[])
  nameWithType: DataSet.Load(IDataReader,LoadOption,DataTable[])
  fullName: System.Data.DataSet.Load(IDataReader,LoadOption,DataTable[])
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Fyller en <xref href=&quot;System.Data.DataSet&quot;> </xref> med värden från en datakälla med hjälp av den angivna <xref href=&quot;System.Data.IDataReader&quot;> </xref>, med hjälp av en matris med <xref href=&quot;System.Data.DataTable&quot;> </xref> instanser som du vill ange information för schemat och namnområde."
  remarks: "Den <xref:System.Data.DataTable.Load%2A>metoden är en teknik för att fylla i en enda <xref:System.Data.DataTable>med data som hämtats från en <xref:System.Data.IDataReader>instans.</xref:System.Data.IDataReader> </xref:System.Data.DataTable> </xref:System.Data.DataTable.Load%2A> Den här metoden fungerar på samma sätt, men du kan läsa in flera resultatmängder från en <xref:System.Data.IDataReader>till flera tabeller i en <xref:System.Data.DataSet>.</xref:System.Data.DataSet> </xref:System.Data.IDataReader>      > [!NOTE] > Åtgärden load misslyckas med ett <xref:System.InvalidOperationException>om något av källkolumner för data i inkommande `reader` är beräknade kolumner.</xref:System.InvalidOperationException>       Den `loadOption` parametern kan du ange hur du vill att importerade data ska interagera med befintliga data och kan vara något av värdena från den <xref:System.Data.LoadOption>uppräkningen.</xref:System.Data.LoadOption> Finns i dokumentationen för <xref:System.Data.DataTable> <xref:System.Data.DataTable.Load%2A>metod för mer information om hur du använder den här parametern.</xref:System.Data.DataTable.Load%2A></xref:System.Data.DataTable>       Den `tables` parametern kan du ange en matris med <xref:System.Data.DataTable>instanser, som anger ordningen på de tabeller som motsvarar varje resultatmängd läsas in från läsaren.</xref:System.Data.DataTable> Den Loadmethod fyller varje angivna <xref:System.Data.DataTable>instans med data från en enda resultatmängd från källan dataläsare.</xref:System.Data.DataTable> När varje resultatuppsättningen flyttar i Loadmethod till nästa resultat som anges i läsaren, tills det inte finns några fler resultatmängder.       Name resolution schemat för den här metoden är samma som följt av- <xref:System.Data.Common.DbDataAdapter.Fill%2A>metoden i <xref:System.Data.Common.DbDataAdapter>klassen.</xref:System.Data.Common.DbDataAdapter> </xref:System.Data.Common.DbDataAdapter.Fill%2A>"
  example:
  - "The following example creates a new <xref:System.Data.DataSet>, adds two <xref:System.Data.DataTable> instances to the <xref:System.Data.DataSet>, and then fills the <xref:System.Data.DataSet> using the Load method, retrieving data from a <xref:System.Data.DataTableReader> that contains two result sets. Finally, the example displays the contents of the tables in the console window.  \n  \n [!code-vb[DataWorks DataSet.LoadTables#1](~/add/codesnippet/visualbasic/54dbea54-b320-4c41-9f97-_1.vb)]\n [!code-cs[DataWorks DataSet.LoadTables#1](~/add/codesnippet/csharp/54dbea54-b320-4c41-9f97-_1.cs)]"
  syntax:
    content: public void Load (System.Data.IDataReader reader, System.Data.LoadOption loadOption, System.Data.DataTable[] tables);
    parameters:
    - id: reader
      type: System.Data.IDataReader
      description: "En <xref href=&quot;System.Data.IDataReader&quot;> </xref> som innehåller en eller flera resultatmängder."
    - id: loadOption
      type: System.Data.LoadOption
      description: "Ett värde från den <xref href=&quot;System.Data.LoadOption&quot;> </xref> uppräkning som anger hur rader redan i den <xref href=&quot;System.Data.DataTable&quot;> </xref> instanser inom den <xref href=&quot;System.Data.DataSet&quot;> </xref> kombineras med inkommande rader som delar samma primärnyckel."
    - id: tables
      type: System.Data.DataTable[]
      description: "En matris med <xref href=&quot;System.Data.DataTable&quot;> </xref> instanser där metoden Load hämtar information om namn och namnområde. De här tabellerna måste vara medlem i den <xref href=&quot;System.Data.DataTableCollection&quot;> </xref> finns i <xref href=&quot;System.Data.DataSet&quot;> </xref>."
  overload: System.Data.DataSet.Load*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.Load(System.Data.IDataReader,System.Data.LoadOption,System.String[])
  id: Load(System.Data.IDataReader,System.Data.LoadOption,System.String[])
  parent: System.Data.DataSet
  langs:
  - csharp
  name: Load(IDataReader,LoadOption,String[])
  nameWithType: DataSet.Load(IDataReader,LoadOption,String[])
  fullName: System.Data.DataSet.Load(IDataReader,LoadOption,String[])
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Fyller en <xref href=&quot;System.Data.DataSet&quot;> </xref> med värden från en datakälla med hjälp av den angivna <xref href=&quot;System.Data.IDataReader&quot;> </xref>, med hjälp av en matris med strängar ange namnen för tabellerna i den <xref uid=&quot;langword_csharp_DataSet&quot; name=&quot;DataSet&quot; href=&quot;&quot;> </xref>."
  remarks: "Den <xref:System.Data.DataTable.Load%2A>metoden är en teknik för att fylla i en enda <xref:System.Data.DataTable>med data som hämtats från en <xref:System.Data.IDataReader>instans.</xref:System.Data.IDataReader> </xref:System.Data.DataTable> </xref:System.Data.DataTable.Load%2A> Den här metoden fungerar på samma sätt, men kan du läsa in flera resultatmängder från en `IDataReader` till flera tabeller i en `DataSet`.      > [!NOTE] > Åtgärden load misslyckas med ett <xref:System.InvalidOperationException>om något av källkolumner för data i inkommande `reader` är beräknade kolumner.</xref:System.InvalidOperationException>       Den `loadOption` parametern kan du ange hur du vill att importerade data ska interagera med befintliga data och kan vara något av värdena från den <xref:System.Data.LoadOption>uppräkningen.</xref:System.Data.LoadOption> Finns i dokumentationen för den <xref:System.Data.DataTable.Load%2A>metod för mer information om hur du använder den här parametern.</xref:System.Data.DataTable.Load%2A>       Den `tables` parametern kan du ange en matris med tabellnamn som anger ordningen på de tabeller som motsvarar varje resultatmängd läsas in från läsaren. Den `Load` metoden försöker hitta en tabell i den `DataSet` matchar namnet hittades i matrisen med tabellnamn i ordning. Om en matchande tabell hittas läses tabellen med innehållet i den aktuella resultatmängden. Om ingen matchande tabell hittas, skapas en tabell med hjälp av namnet i matrisen med tabellnamn och schemat för den nya tabellen härledas från resultatmängden. Efter varje resultatmängd den `Load` metoden flyttar till nästa resultat som anges i läsaren, tills det inte finns några fler resultatmängder.       Standardnamnområde som är associerade med `DataSet`, om någon, som är associerad med varje nyskapad `DataTable`. Name resolution schemat för den här metoden är samma som följt av- <xref:System.Data.Common.DbDataAdapter.Fill%2A>metoden i <xref:System.Data.Common.DbDataAdapter>klassen.</xref:System.Data.Common.DbDataAdapter> </xref:System.Data.Common.DbDataAdapter.Fill%2A>"
  example:
  - "The following Console application example first creates tables and loads data from a reader into a <xref:System.Data.DataSet>, using the `Load` method. The example then adds tables to a <xref:System.Data.DataSet> and attempts to fill the tables with data from a <xref:System.Data.DataTableReader>. In this example, because the parameters passed to the `Load` method indicate a table name that does not exist, the `Load` method creates a new table to match the name passed as a parameter. Once the data has been loaded, the example displays the contents of all its tables in the Console window.  \n  \n [!code-vb[DataWorks DataSet.LoadString#1](~/add/codesnippet/visualbasic/f903cc41-1885-430a-b43a-_1.vb)]\n [!code-cs[DataWorks DataSet.LoadString#1](~/add/codesnippet/csharp/f903cc41-1885-430a-b43a-_1.cs)]"
  syntax:
    content: public void Load (System.Data.IDataReader reader, System.Data.LoadOption loadOption, string[] tables);
    parameters:
    - id: reader
      type: System.Data.IDataReader
      description: "En <xref href=&quot;System.Data.IDataReader&quot;> </xref> som innehåller en eller flera resultatmängder."
    - id: loadOption
      type: System.Data.LoadOption
      description: "Ett värde från den <xref href=&quot;System.Data.LoadOption&quot;> </xref> uppräkning som anger hur rader redan i den <xref href=&quot;System.Data.DataTable&quot;> </xref> instanser inom den <xref uid=&quot;langword_csharp_DataSet&quot; name=&quot;DataSet&quot; href=&quot;&quot;> </xref> kombineras med inkommande rader som delar samma primärnyckel."
    - id: tables
      type: System.String[]
      description: "En matris med strängar som den <xref uid=&quot;langword_csharp_Load&quot; name=&quot;Load&quot; href=&quot;&quot;> </xref> metoden hämtar tabellinformation som namn."
  overload: System.Data.DataSet.Load*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.Load(System.Data.IDataReader,System.Data.LoadOption,System.Data.FillErrorEventHandler,System.Data.DataTable[])
  id: Load(System.Data.IDataReader,System.Data.LoadOption,System.Data.FillErrorEventHandler,System.Data.DataTable[])
  parent: System.Data.DataSet
  langs:
  - csharp
  name: Load(IDataReader,LoadOption,FillErrorEventHandler,DataTable[])
  nameWithType: DataSet.Load(IDataReader,LoadOption,FillErrorEventHandler,DataTable[])
  fullName: System.Data.DataSet.Load(IDataReader,LoadOption,FillErrorEventHandler,DataTable[])
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Fyller en <xref href=&quot;System.Data.DataSet&quot;> </xref> med värden från en datakälla med hjälp av den angivna <xref href=&quot;System.Data.IDataReader&quot;> </xref>, med hjälp av en matris med <xref href=&quot;System.Data.DataTable&quot;> </xref> instanser som du vill ange information för schemat och namnområde."
  remarks: "Den <xref:System.Data.DataTable.Load%2A>metoden är en teknik för att fylla i en enda <xref:System.Data.DataTable>med data som hämtats från en <xref:System.Data.IDataReader>instans.</xref:System.Data.IDataReader> </xref:System.Data.DataTable> </xref:System.Data.DataTable.Load%2A> Den här metoden fungerar på samma sätt, men du kan läsa in flera resultatmängder från en <xref:System.Data.IDataReader>till flera tabeller i en <xref:System.Data.DataSet>.</xref:System.Data.DataSet> </xref:System.Data.IDataReader>      > [!NOTE] > Åtgärden load misslyckas med ett <xref:System.InvalidOperationException>om något av källkolumner för data i inkommande `reader` är beräknade kolumner.</xref:System.InvalidOperationException>       Den `loadOption` parametern kan du ange hur du vill att importerade data ska interagera med befintliga data och kan vara något av värdena från den <xref:System.Data.LoadOption>uppräkningen.</xref:System.Data.LoadOption> Finns i dokumentationen för <xref:System.Data.DataTable> <xref:System.Data.DataTable.Load%2A>metod för mer information om hur du använder den här parametern.</xref:System.Data.DataTable.Load%2A></xref:System.Data.DataTable>       Den `errorHandler` parametern är en <xref:System.Data.FillErrorEventHandler>delegat som refererar till en procedur som anropas när det uppstår ett fel vid inläsning av data.</xref:System.Data.FillErrorEventHandler> Den <xref:System.Data.FillErrorEventArgs>parameter som överförs till proceduren ger egenskaper som gör att du kan hämta information om felet som uppstod, den aktuella raden i data, och <xref:System.Data.DataTable>som ska fyllas.</xref:System.Data.DataTable> </xref:System.Data.FillErrorEventArgs> Med den här delegaten mekanismen i stället för ett enklare försök/catch-block kan du bestämma felet ska du hantera situationen och fortsätta att bearbeta om du vill. Den <xref:System.Data.FillErrorEventArgs>parametern anger en <xref:System.Data.FillErrorEventArgs.Continue%2A>egenskap: den här egenskapen `true` att indikera att du har hanteras fel och om du vill fortsätta bearbetningen; för egenskapen `false` att indikera att du vill stoppa bearbetningen.</xref:System.Data.FillErrorEventArgs.Continue%2A> </xref:System.Data.FillErrorEventArgs> Tänk på att egenskapen `false` orsakar den kod som utlöses problem för att utlösa ett undantag.       Den `tables` parametern kan du ange en matris med <xref:System.Data.DataTable>instanser, som anger ordningen på de tabeller som motsvarar varje resultatmängd läsas in från läsaren.</xref:System.Data.DataTable> Den Loadmethod fyller varje angivna <xref:System.Data.DataTable>instans med data från en enda resultatmängd från källan dataläsare.</xref:System.Data.DataTable> När varje resultatuppsättningen flyttar i Loadmethod till nästa resultat som anges i läsaren, tills det inte finns några fler resultatmängder.       Name resolution schemat för den här metoden är samma som följt av- <xref:System.Data.Common.DbDataAdapter.Fill%2A>metoden i <xref:System.Data.Common.DbDataAdapter>klassen.</xref:System.Data.Common.DbDataAdapter> </xref:System.Data.Common.DbDataAdapter.Fill%2A>"
  example:
  - "The following example adds a table to a <xref:System.Data.DataSet>, and then attempts to use the Load method to load data from a <xref:System.Data.DataTableReader> that contains an incompatible schema. Rather than trapping the error, this example uses a <xref:System.Data.FillErrorEventHandler> delegate to investigate and handle the error. The output is displayed in the console window.  \n  \n [!code-vb[DataWorks DataSet.Load#1](~/add/codesnippet/visualbasic/a22aaabc-2cbb-4c1f-aa4e-_1.vb)]\n [!code-cs[DataWorks DataSet.Load#1](~/add/codesnippet/csharp/a22aaabc-2cbb-4c1f-aa4e-_1.cs)]"
  syntax:
    content: public virtual void Load (System.Data.IDataReader reader, System.Data.LoadOption loadOption, System.Data.FillErrorEventHandler errorHandler, System.Data.DataTable[] tables);
    parameters:
    - id: reader
      type: System.Data.IDataReader
      description: "En <xref href=&quot;System.Data.IDataReader&quot;> </xref> som innehåller en eller flera resultatmängder."
    - id: loadOption
      type: System.Data.LoadOption
      description: "Ett värde från den <xref href=&quot;System.Data.LoadOption&quot;> </xref> uppräkning som anger hur rader redan i den <xref href=&quot;System.Data.DataTable&quot;> </xref> instanser inom den <xref href=&quot;System.Data.DataSet&quot;> </xref> kombineras med inkommande rader som delar samma primärnyckel."
    - id: errorHandler
      type: System.Data.FillErrorEventHandler
      description: "En <xref href=&quot;System.Data.FillErrorEventHandler&quot;> </xref> ombud att anropa när ett fel uppstår när data läses in."
    - id: tables
      type: System.Data.DataTable[]
      description: "En matris med <xref href=&quot;System.Data.DataTable&quot;> </xref> instanser där metoden Load hämtar information om namn och namnområde."
  overload: System.Data.DataSet.Load*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.Locale
  id: Locale
  parent: System.Data.DataSet
  langs:
  - csharp
  name: Locale
  nameWithType: DataSet.Locale
  fullName: System.Data.DataSet.Locale
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Hämtar eller Anger språkinformationen som används för att jämföra strängar i tabellen."
  remarks: "Egenskapen Locale anger språkinställningen för vilka sortering gäller.       Som standard Ange språk för en <xref:System.Data.DataSet>anger också de nationella inställningarna för varje <xref:System.Data.DataTable>objekt i som `DataSet` till samma värde.</xref:System.Data.DataTable> </xref:System.Data.DataSet>      > [!NOTE] > I kolumner som innehåller uttryck, den <xref:System.StringComparison>används.</xref:System.StringComparison> Den <xref:System.StringComparison>ignoreras.</xref:System.StringComparison>"
  example:
  - "The following example gets the <xref:System.Globalization.CultureInfo> for a <xref:System.Data.DataSet> and prints the <xref:System.Globalization.CultureInfo.DisplayName%2A> and <xref:System.Globalization.CultureInfo.EnglishName%2A> properties.  \n  \n [!code-vb[Classic WebData DataSet.Locale Example#1](~/add/codesnippet/visualbasic/p-system.data.dataset.lo_1.vb)]"
  syntax:
    content: public System.Globalization.CultureInfo Locale { get; set; }
    return:
      type: System.Globalization.CultureInfo
      description: "En <xref:System.Globalization.CultureInfo>som innehåller information om datorn Användarplats.</xref:System.Globalization.CultureInfo> Standardvärdet är <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  overload: System.Data.DataSet.Locale*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.Merge(System.Data.DataRow[])
  id: Merge(System.Data.DataRow[])
  parent: System.Data.DataSet
  langs:
  - csharp
  name: Merge(DataRow[])
  nameWithType: DataSet.Merge(DataRow[])
  fullName: System.Data.DataSet.Merge(DataRow[])
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Sammanfogar en matris med <xref href=&quot;System.Data.DataRow&quot;> </xref> objekt till aktuellt <xref href=&quot;System.Data.DataSet&quot;> </xref>."
  remarks: "Den <xref:System.Data.DataSet.Merge%2A>metoden används för att sammanfoga två <xref:System.Data.DataSet>objekt som har i stort sett liknande scheman.</xref:System.Data.DataSet> </xref:System.Data.DataSet.Merge%2A> En koppling används vanligtvis på ett klientprogram för att få de senaste ändringarna från en datakälla till en befintlig <xref:System.Data.DataSet>.</xref:System.Data.DataSet> Detta gör att klientprogrammet har en uppdateras <xref:System.Data.DataSet>med senaste data från datakällan.</xref:System.Data.DataSet>       <xref:System.Data.DataSet.Merge%2A>Metoden anropas vanligtvis i slutet av en serie av procedurer som inbegriper verifierar ändringar, stämma av fel, Uppdatera datakällan med ändringarna, och slutligen uppdaterar befintliga <xref:System.Data.DataSet>.</xref:System.Data.DataSet> </xref:System.Data.DataSet.Merge%2A>       I ett klientprogram är det vanligt att ha en knapp som användaren kan klicka på som ändrade data ska samlas in och validerar den innan den skickas tillbaka till en komponent på mellannivå. I det här fallet den <xref:System.Data.DataSet.GetChanges%2A>metoden anropas först.</xref:System.Data.DataSet.GetChanges%2A> Att metoden returnerar en andra <xref:System.Data.DataSet>optimerade för verifiering och sammanslagning.</xref:System.Data.DataSet> Den här andra <xref:System.Data.DataSet>objektet innehåller endast <xref:System.Data.DataTable>och <xref:System.Data.DataRow>objekt som har ändrats, vilket resulterar i en delmängd av ursprungligt <xref:System.Data.DataSet>.</xref:System.Data.DataSet> </xref:System.Data.DataRow> </xref:System.Data.DataTable> </xref:System.Data.DataSet> Den här delmängden vanligtvis skickas mindre och därmed mer effektivt tillbaka till en komponent på mellannivå. Komponenten mellannivå uppdaterar sedan den ursprungliga datakällan med ändringarna via lagrade procedurer. Mellannivån kan sedan skicka tillbaka antingen en ny <xref:System.Data.DataSet>som innehåller ursprungliga data och den senaste informationen från datakällan (genom att köra den ursprungliga frågan igen), eller skicka tillbaka delmängden med eventuella ändringar som har gjorts till den från datakällan.</xref:System.Data.DataSet> (Till exempel om datakällan skapas automatiskt unika primärnyckelvärden, dessa värden kan spridas till klientprogrammet.) I båda fallen den returnerade <xref:System.Data.DataSet>kan infogas i client-program ursprungliga <xref:System.Data.DataSet>med den <xref:System.Data.DataSet.Merge%2A>metoden.</xref:System.Data.DataSet.Merge%2A> </xref:System.Data.DataSet> </xref:System.Data.DataSet>       När den <xref:System.Data.DataSet.Merge%2A>metoden anropas, scheman för två <xref:System.Data.DataSet>objekt jämförs eftersom det är möjligt att scheman kan ha ändrats.</xref:System.Data.DataSet> </xref:System.Data.DataSet.Merge%2A> Till exempel i ett scenario med business-to-business kan nya kolumner har lagts till ett XML-schema genom en automatisk process. Om källan <xref:System.Data.DataSet>innehåller schemaelement (lägga till <xref:System.Data.DataColumn>objekt) som saknas i målet, schema-element kan läggas till målet genom att ange den `missingSchemaAction` argument för `MissingSchemaAction.Add`.</xref:System.Data.DataColumn> </xref:System.Data.DataSet> I så fall den sammanfogade <xref:System.Data.DataSet>innehåller extra schema och data.</xref:System.Data.DataSet>       Efter att slå samman scheman kopplas data.       Vid sammanfogning av en ny källa <xref:System.Data.DataSet>till mål, alla datakällor rader med en <xref:System.Data.DataRowState>värdet för `Unchanged`, `Modified`, eller `Deleted` matchas till målet rader med samma primärnyckelvärden.</xref:System.Data.DataRowState> </xref:System.Data.DataSet> Datakällan rader med en <xref:System.Data.DataRowState>värdet för `Added` matchas mot den nya mål rader med samma primärnyckelvärden som nya källraderna.</xref:System.Data.DataRowState>       Under en koppling har begränsningarna inaktiverats. Om inga begränsningar inte kan aktiveras i slutet av en koppling en <xref:System.Data.ConstraintException>genereras och kopplade data sparas medan begränsningarna har inaktiverats.</xref:System.Data.ConstraintException> I det här fallet den <xref:System.Data.DataSet.EnforceConstraints%2A>egenskap är inställd på `false`, och alla rader som är ogiltiga har markerats med fel.</xref:System.Data.DataSet.EnforceConstraints%2A> Felen måste åtgärdas innan du försöker återställa den <xref:System.Data.DataSet.EnforceConstraints%2A>egenskapen `true`.</xref:System.Data.DataSet.EnforceConstraints%2A>"
  syntax:
    content: public void Merge (System.Data.DataRow[] rows);
    parameters:
    - id: rows
      type: System.Data.DataRow[]
      description: "Matris med <xref uid=&quot;langword_csharp_DataRow&quot; name=&quot;DataRow&quot; href=&quot;&quot;> </xref> objekt som ska kopplas till den <xref uid=&quot;langword_csharp_DataSet&quot; name=&quot;DataSet&quot; href=&quot;&quot;> </xref>."
  overload: System.Data.DataSet.Merge*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.Merge(System.Data.DataSet)
  id: Merge(System.Data.DataSet)
  parent: System.Data.DataSet
  langs:
  - csharp
  name: Merge(DataSet)
  nameWithType: DataSet.Merge(DataSet)
  fullName: System.Data.DataSet.Merge(DataSet)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Sammanfogar en angiven <xref href=&quot;System.Data.DataSet&quot;> </xref> och dess schema till aktuellt <xref uid=&quot;langword_csharp_DataSet&quot; name=&quot;DataSet&quot; href=&quot;&quot;> </xref>."
  remarks: "Merge-metoden används för att sammanfoga två <xref:System.Data.DataSet>objekt som har i stort sett liknande scheman.</xref:System.Data.DataSet> En koppling används vanligtvis på ett klientprogram för att få de senaste ändringarna från en datakälla till en befintlig <xref:System.Data.DataSet>.</xref:System.Data.DataSet> Detta gör att klientprogrammet har en uppdateras <xref:System.Data.DataSet>med senaste data från datakällan.</xref:System.Data.DataSet>       Merge-metoden anropas vanligtvis i slutet av en serie av procedurer som inbegriper verifierar ändringar, stämma av fel, Uppdatera datakällan med ändringarna och slutligen uppdaterar befintliga <xref:System.Data.DataSet>.</xref:System.Data.DataSet>       I ett klientprogram är det vanligt att ha en knapp som användaren kan klicka på som ändrade data ska samlas in och validerar den innan den skickas tillbaka till en komponent på mellannivå. I det här fallet den <xref:System.Data.DataSet.GetChanges%2A>metoden anropas först.</xref:System.Data.DataSet.GetChanges%2A> Att metoden returnerar en andra <xref:System.Data.DataSet>optimerade för verifiering och sammanslagning.</xref:System.Data.DataSet> Den här andra <xref:System.Data.DataSet>objektet innehåller endast <xref:System.Data.DataTable>och <xref:System.Data.DataRow>objekt som har ändrats, vilket resulterar i en delmängd av ursprungligt <xref:System.Data.DataSet>.</xref:System.Data.DataSet> </xref:System.Data.DataRow> </xref:System.Data.DataTable> </xref:System.Data.DataSet> Den här delmängden är vanligtvis mindre och därmed mer skickas effektivt tillbaka till en komponent på mellannivå. Komponenten mellannivå uppdaterar sedan den ursprungliga datakällan med ändringarna via lagrade procedurer. Mellannivån kan sedan skicka tillbaka antingen en ny <xref:System.Data.DataSet>som innehåller ursprungliga data och den senaste informationen från datakällan (genom att köra den ursprungliga frågan igen), eller skicka tillbaka delmängden med eventuella ändringar som har gjorts till den från datakällan.</xref:System.Data.DataSet> (Till exempel om datakällan skapas automatiskt unika primärnyckelvärden, dessa värden kan spridas till klientprogrammet.) I båda fallen den returnerade <xref:System.Data.DataSet>kan infogas i client-program ursprungliga <xref:System.Data.DataSet>med metoden Merge.</xref:System.Data.DataSet> </xref:System.Data.DataSet>       När Merge-metoden anropas, scheman för två <xref:System.Data.DataSet>objekt jämförs eftersom det är möjligt att scheman kan ha ändrats.</xref:System.Data.DataSet> Till exempel i ett scenario med business-to-business kan nya kolumner har lagts till ett XML-schema genom en automatisk process. Om källan <xref:System.Data.DataSet>innehåller schemaelement (lägga till <xref:System.Data.DataColumn>objekt) som saknas i målet, schema-element kan läggas till målet genom att ange den `missingSchemaAction` argument för `MissingSchemaAction.Add`.</xref:System.Data.DataColumn> </xref:System.Data.DataSet> I så fall den sammanfogade <xref:System.Data.DataSet>innehåller extra schema och data.</xref:System.Data.DataSet>       Efter att slå samman scheman kopplas data.       Vid sammanfogning av en ny källa <xref:System.Data.DataSet>till mål, alla datakällor rader med en <xref:System.Data.DataRowState>värdet för `Unchanged`, `Modified`, eller `Deleted` matchas till målet rader med samma primärnyckelvärden.</xref:System.Data.DataRowState> </xref:System.Data.DataSet> Datakällan rader med en `DataRowState` värdet för `Added` matchas mot den nya mål rader med samma primärnyckelvärden som nya källraderna.       Under en koppling har begränsningarna inaktiverats. Om inga begränsningar inte kan aktiveras i slutet av dokument, en <xref:System.Data.ConstraintException>genereras och kopplade data sparas medan begränsningarna har inaktiverats.</xref:System.Data.ConstraintException> I det här fallet den <xref:System.Data.DataSet.EnforceConstraints%2A>egenskap är inställd på `false`, och alla rader som är ogiltiga har markerats med fel.</xref:System.Data.DataSet.EnforceConstraints%2A> Felen måste åtgärdas innan du försöker återställa den <xref:System.Data.DataSet.EnforceConstraints%2A>egenskapen `true`.</xref:System.Data.DataSet.EnforceConstraints%2A>"
  example:
  - "The following example uses the <xref:System.Data.DataSet.GetChanges%2A>, Update, and Merge methods on a <xref:System.Data.DataSet>.  \n  \n [!code-vb[Classic WebData DataSet.Merge Example#1](~/add/codesnippet/visualbasic/m-system.data.dataset.me_2_1.vb)]\n [!code-cs[Classic WebData DataSet.Merge Example#1](~/add/codesnippet/csharp/m-system.data.dataset.me_2_1.cs)]"
  syntax:
    content: public void Merge (System.Data.DataSet dataSet);
    parameters:
    - id: dataSet
      type: System.Data.DataSet
      description: "Den <xref uid=&quot;langword_csharp_DataSet&quot; name=&quot;DataSet&quot; href=&quot;&quot;> </xref> vars data och schema sammanfogas."
  overload: System.Data.DataSet.Merge*
  exceptions:
  - type: System.Data.ConstraintException
    commentId: T:System.Data.ConstraintException
    description: "Ett eller flera villkor kan inte aktiveras."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>dataSet</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Data.DataSet.Merge(System.Data.DataTable)
  id: Merge(System.Data.DataTable)
  parent: System.Data.DataSet
  langs:
  - csharp
  name: Merge(DataTable)
  nameWithType: DataSet.Merge(DataTable)
  fullName: System.Data.DataSet.Merge(DataTable)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Sammanfogar en angiven <xref href=&quot;System.Data.DataTable&quot;> </xref> och dess schema till aktuellt <xref href=&quot;System.Data.DataSet&quot;> </xref>."
  remarks: "Den <xref:System.Data.DataSet.Merge%2A>metoden används för att sammanfoga två <xref:System.Data.DataSet>objekt som har i stort sett liknande scheman.</xref:System.Data.DataSet> </xref:System.Data.DataSet.Merge%2A> En koppling används vanligtvis på ett klientprogram för att få de senaste ändringarna från en datakälla till en befintlig <xref:System.Data.DataSet>.</xref:System.Data.DataSet> Detta gör att klientprogrammet har en uppdateras <xref:System.Data.DataSet>med senaste data från datakällan.</xref:System.Data.DataSet>       <xref:System.Data.DataSet.Merge%2A>Metoden anropas vanligtvis i slutet av en serie av procedurer som inbegriper verifierar ändringar, stämma av fel, Uppdatera datakällan med ändringarna, och slutligen uppdaterar befintliga <xref:System.Data.DataSet>.</xref:System.Data.DataSet> </xref:System.Data.DataSet.Merge%2A>       I ett klientprogram är det vanligt att ha en knapp som användaren kan klicka på som ändrade data ska samlas in och validerar den innan den skickas tillbaka till en komponent på mellannivå. I det här fallet den <xref:System.Data.DataSet.GetChanges%2A>metoden anropas först.</xref:System.Data.DataSet.GetChanges%2A> Att metoden returnerar en andra <xref:System.Data.DataSet>optimerade för verifiering och sammanslagning.</xref:System.Data.DataSet> Den här andra <xref:System.Data.DataSet>objektet innehåller endast <xref:System.Data.DataTable>och <xref:System.Data.DataRow>objekt som har ändrats, vilket resulterar i en delmängd av ursprungligt <xref:System.Data.DataSet>.</xref:System.Data.DataSet> </xref:System.Data.DataRow> </xref:System.Data.DataTable> </xref:System.Data.DataSet> Den här delmängden är vanligtvis mindre och därmed mer skickas effektivt tillbaka till en komponent på mellannivå. Komponenten mellannivå uppdaterar sedan den ursprungliga datakällan med ändringarna via lagrade procedurer. Mellannivån kan sedan skicka tillbaka antingen en ny <xref:System.Data.DataSet>som innehåller ursprungliga data och den senaste informationen från datakällan (genom att köra den ursprungliga frågan igen), eller skicka tillbaka delmängden med eventuella ändringar som har gjorts till den från datakällan.</xref:System.Data.DataSet> (Till exempel om datakällan skapas automatiskt unika primärnyckelvärden, dessa värden kan spridas till klientprogrammet.) I båda fallen den returnerade <xref:System.Data.DataSet>kan infogas i client-program ursprungliga <xref:System.Data.DataSet>med den <xref:System.Data.DataSet.Merge%2A>metoden.</xref:System.Data.DataSet.Merge%2A> </xref:System.Data.DataSet> </xref:System.Data.DataSet>       När den <xref:System.Data.DataSet.Merge%2A>metoden anropas, scheman för två <xref:System.Data.DataSet>objekt jämförs eftersom det är möjligt att scheman kan ha ändrats.</xref:System.Data.DataSet> </xref:System.Data.DataSet.Merge%2A> Till exempel i ett scenario med business-to-business kan nya kolumner har lagts till ett XML-schema genom en automatisk process. Om källan <xref:System.Data.DataSet>innehåller schemaelement (lägga till <xref:System.Data.DataColumn>objekt) som saknas i målet, schema-element kan läggas till målet genom att ange den `missingSchemaAction` argument för `MissingSchemaAction.Add`.</xref:System.Data.DataColumn> </xref:System.Data.DataSet> I så fall den sammanfogade <xref:System.Data.DataSet>innehåller extra schema och data.</xref:System.Data.DataSet>       Efter att slå samman scheman kopplas data.       Vid sammanfogning av en ny källa <xref:System.Data.DataSet>till mål, alla datakällor rader med en <xref:System.Data.DataRowState>värdet för `Unchanged`, `Modified`, eller `Deleted` matchas till målet rader med samma primärnyckelvärden.</xref:System.Data.DataRowState> </xref:System.Data.DataSet> Datakällan rader med en `DataRowState` värdet för `Added` matchas mot den nya mål rader med samma primärnyckelvärden som nya källraderna.       Under en koppling har begränsningarna inaktiverats. Om inga begränsningar inte kan aktiveras i slutet av dokument, en <xref:System.Data.ConstraintException>genereras och kopplade data sparas medan begränsningarna har inaktiverats.</xref:System.Data.ConstraintException> I det här fallet den <xref:System.Data.DataSet.EnforceConstraints%2A>egenskap är inställd på `false`, och alla rader som är ogiltiga har markerats med fel.</xref:System.Data.DataSet.EnforceConstraints%2A> Felen måste åtgärdas innan du försöker återställa den <xref:System.Data.DataSet.EnforceConstraints%2A>egenskapen `true`.</xref:System.Data.DataSet.EnforceConstraints%2A>"
  example:
  - "The following example creates a simple <xref:System.Data.DataSet> with one table, two columns, and ten rows. A second <xref:System.Data.DataTable> is created that is identical to the first. Two rows are added to the second table, which is then merged into the <xref:System.Data.DataSet>.  \n  \n [!code-vb[Classic WebData DataSet.Merge3 Example#1](~/add/codesnippet/visualbasic/m-system.data.dataset.me_1_1.vb)]\n [!code-cs[Classic WebData DataSet.Merge3 Example#1](~/add/codesnippet/csharp/m-system.data.dataset.me_1_1.cs)]"
  syntax:
    content: public void Merge (System.Data.DataTable table);
    parameters:
    - id: table
      type: System.Data.DataTable
      description: "Den <xref href=&quot;System.Data.DataTable&quot;> </xref> vars data och schema sammanfogas."
  overload: System.Data.DataSet.Merge*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>table</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Data.DataSet.Merge(System.Data.DataSet,System.Boolean)
  id: Merge(System.Data.DataSet,System.Boolean)
  parent: System.Data.DataSet
  langs:
  - csharp
  name: Merge(DataSet,Boolean)
  nameWithType: DataSet.Merge(DataSet,Boolean)
  fullName: System.Data.DataSet.Merge(DataSet,Boolean)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Sammanfogar en angiven <xref href=&quot;System.Data.DataSet&quot;> </xref> och dess schema till aktuellt <xref uid=&quot;langword_csharp_DataSet&quot; name=&quot;DataSet&quot; href=&quot;&quot;> </xref>, behåller eller ignorera eventuella ändringar i den här <xref uid=&quot;langword_csharp_DataSet&quot; name=&quot;DataSet&quot; href=&quot;&quot;> </xref> enligt det angivna argumentet."
  remarks: "Den <xref:System.Data.DataSet.Merge%2A>metoden används för att sammanfoga två <xref:System.Data.DataSet>objekt som har i stort sett liknande scheman.</xref:System.Data.DataSet> </xref:System.Data.DataSet.Merge%2A> En koppling används vanligtvis på ett klientprogram för att få de senaste ändringarna från en datakälla till en befintlig <xref:System.Data.DataSet>.</xref:System.Data.DataSet> Detta gör att klientprogrammet har en uppdateras <xref:System.Data.DataSet>med senaste data från datakällan.</xref:System.Data.DataSet>       <xref:System.Data.DataSet.Merge%2A>Metoden anropas vanligtvis i slutet av en serie av procedurer som inbegriper verifierar ändringar, stämma av fel, Uppdatera datakällan med ändringarna, och slutligen uppdaterar befintliga <xref:System.Data.DataSet>.</xref:System.Data.DataSet> </xref:System.Data.DataSet.Merge%2A>       I ett klientprogram är det vanligt att ha en knapp som användaren kan klicka på som ändrade data ska samlas in och validerar den innan den skickas tillbaka till en komponent på mellannivå. I det här fallet den <xref:System.Data.DataSet.GetChanges%2A>metoden anropas först.</xref:System.Data.DataSet.GetChanges%2A> Att metoden returnerar en andra <xref:System.Data.DataSet>optimerade för verifiering och sammanslagning.</xref:System.Data.DataSet> Den här andra <xref:System.Data.DataSet>objektet innehåller endast <xref:System.Data.DataTable>och <xref:System.Data.DataRow>objekt som har ändrats, vilket resulterar i en delmängd av ursprungligt <xref:System.Data.DataSet>.</xref:System.Data.DataSet> </xref:System.Data.DataRow> </xref:System.Data.DataTable> </xref:System.Data.DataSet> Den här delmängden är vanligtvis mindre och därmed mer skickas effektivt tillbaka till en komponent på mellannivå. Komponenten mellannivå uppdaterar sedan den ursprungliga datakällan med ändringarna via lagrade procedurer. Mellannivån kan sedan skicka tillbaka antingen en ny <xref:System.Data.DataSet>som innehåller ursprungliga data och den senaste informationen från datakällan (genom att köra den ursprungliga frågan igen), eller skicka tillbaka delmängden med eventuella ändringar som har gjorts till den från datakällan.</xref:System.Data.DataSet> (Till exempel om datakällan skapas automatiskt unika primärnyckelvärden, dessa värden kan spridas till klientprogrammet.) I båda fallen den returnerade <xref:System.Data.DataSet>kan infogas i client-program ursprungliga <xref:System.Data.DataSet>med den <xref:System.Data.DataSet.Merge%2A>metoden.</xref:System.Data.DataSet.Merge%2A> </xref:System.Data.DataSet> </xref:System.Data.DataSet>       När den <xref:System.Data.DataSet.Merge%2A>metoden anropas, scheman för två <xref:System.Data.DataSet>objekt jämförs eftersom det är möjligt att scheman kan ha ändrats.</xref:System.Data.DataSet> </xref:System.Data.DataSet.Merge%2A> Till exempel i ett scenario med business-to-business kan nya kolumner har lagts till ett XML-schema genom en automatisk process. Om källan <xref:System.Data.DataSet>innehåller schemaelement (lägga till <xref:System.Data.DataColumn>objekt) som saknas i målet, schema-element kan läggas till målet genom att ange den `missingSchemaAction` argument för `MissingSchemaAction.Add`.</xref:System.Data.DataColumn> </xref:System.Data.DataSet> I så fall den sammanfogade <xref:System.Data.DataSet>innehåller extra schema och data.</xref:System.Data.DataSet>       Efter att slå samman scheman kopplas data.       Vid sammanfogning av en ny källa <xref:System.Data.DataSet>till mål, alla datakällor rader med en <xref:System.Data.DataRowState>värdet för `Unchanged`, `Modified`, eller `Deleted` matchas till målet rader med samma primärnyckelvärden.</xref:System.Data.DataRowState> </xref:System.Data.DataSet> Datakällan rader med en `DataRowState` värdet för `Added` matchas mot den nya mål rader med samma primärnyckelvärden som nya källraderna.       Under en koppling har begränsningarna inaktiverats. Om inga begränsningar inte kan aktiveras i slutet av dokument, en <xref:System.Data.ConstraintException>genereras och kopplade data sparas medan begränsningarna har inaktiverats.</xref:System.Data.ConstraintException> I det här fallet den <xref:System.Data.DataSet.EnforceConstraints%2A>egenskap är inställd på `false`, och alla rader som är ogiltiga har markerats med fel.</xref:System.Data.DataSet.EnforceConstraints%2A> Felen måste åtgärdas innan du försöker återställa den <xref:System.Data.DataSet.EnforceConstraints%2A>egenskapen `true`.</xref:System.Data.DataSet.EnforceConstraints%2A>"
  example:
  - "The following example creates a simple <xref:System.Data.DataSet> with one table, two columns, and ten rows. After adding ten rows, two values are changed, and one row is added. A subset of the changed data is created using the <xref:System.Data.DataSet.GetChanges%2A> method. After reconciling errors, the subset data is merged into the original <xref:System.Data.DataSet>.  \n  \n [!code-cs[Classic WebData DataSet.GetChanges Example#1](~/add/codesnippet/csharp/m-system.data.dataset.me_0_1.cs)]\n [!code-vb[Classic WebData DataSet.GetChanges Example#1](~/add/codesnippet/visualbasic/m-system.data.dataset.me_0_1.vb)]"
  syntax:
    content: public void Merge (System.Data.DataSet dataSet, bool preserveChanges);
    parameters:
    - id: dataSet
      type: System.Data.DataSet
      description: "Den <xref uid=&quot;langword_csharp_DataSet&quot; name=&quot;DataSet&quot; href=&quot;&quot;> </xref> vars data och schema sammanfogas."
    - id: preserveChanges
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>att bevara ändringar i aktuellt <xref uid=&quot;langword_csharp_DataSet&quot; name=&quot;DataSet&quot; href=&quot;&quot;> </xref>, annars <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Data.DataSet.Merge*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.Merge(System.Data.DataRow[],System.Boolean,System.Data.MissingSchemaAction)
  id: Merge(System.Data.DataRow[],System.Boolean,System.Data.MissingSchemaAction)
  parent: System.Data.DataSet
  langs:
  - csharp
  name: Merge(DataRow[],Boolean,MissingSchemaAction)
  nameWithType: DataSet.Merge(DataRow[],Boolean,MissingSchemaAction)
  fullName: System.Data.DataSet.Merge(DataRow[],Boolean,MissingSchemaAction)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Sammanfogar en matris med <xref href=&quot;System.Data.DataRow&quot;> </xref> objekt till aktuellt <xref href=&quot;System.Data.DataSet&quot;> </xref>, behåller eller ignorera ändringar i den <xref uid=&quot;langword_csharp_DataSet&quot; name=&quot;DataSet&quot; href=&quot;&quot;> </xref> och hantera ett inkompatibelt schema enligt de angivna argumenten."
  remarks: "Den <xref:System.Data.DataSet.Merge%2A>metoden används för att sammanfoga två <xref:System.Data.DataSet>objekt som har i stort sett liknande scheman.</xref:System.Data.DataSet> </xref:System.Data.DataSet.Merge%2A> En koppling används vanligtvis på ett klientprogram för att få de senaste ändringarna från en datakälla till en befintlig <xref:System.Data.DataSet>.</xref:System.Data.DataSet> Detta gör att klientprogrammet har en uppdateras <xref:System.Data.DataSet>med senaste data från datakällan.</xref:System.Data.DataSet>       <xref:System.Data.DataSet.Merge%2A>Metoden anropas vanligtvis i slutet av en serie av procedurer som inbegriper verifierar ändringar, stämma av fel, Uppdatera datakällan med ändringarna, och slutligen uppdaterar befintliga <xref:System.Data.DataSet>.</xref:System.Data.DataSet> </xref:System.Data.DataSet.Merge%2A>       I ett klientprogram är det vanligt att ha en knapp som användaren kan klicka på som ändrade data ska samlas in och validerar den innan den skickas tillbaka till en komponent på mellannivå. I det här fallet den <xref:System.Data.DataSet.GetChanges%2A>metoden anropas först.</xref:System.Data.DataSet.GetChanges%2A> Att metoden returnerar en andra <xref:System.Data.DataSet>optimerade för verifiering och sammanslagning.</xref:System.Data.DataSet> Den här andra <xref:System.Data.DataSet>objektet innehåller endast <xref:System.Data.DataTable>och <xref:System.Data.DataRow>objekt som har ändrats, vilket resulterar i en delmängd av ursprungligt <xref:System.Data.DataSet>.</xref:System.Data.DataSet> </xref:System.Data.DataRow> </xref:System.Data.DataTable> </xref:System.Data.DataSet> Den här delmängden är vanligtvis mindre och därmed mer skickas effektivt tillbaka till en komponent på mellannivå. Komponenten mellannivå uppdaterar sedan den ursprungliga datakällan med ändringarna via lagrade procedurer. Mellannivån kan sedan skicka tillbaka antingen en ny <xref:System.Data.DataSet>som innehåller ursprungliga data och den senaste informationen från datakällan (genom att köra den ursprungliga frågan igen), eller skicka tillbaka delmängden med eventuella ändringar som har gjorts till den från datakällan.</xref:System.Data.DataSet> (Till exempel om datakällan skapas automatiskt unika primärnyckelvärden, dessa värden kan spridas till klientprogrammet.) I båda fallen den returnerade <xref:System.Data.DataSet>kan infogas i client-program ursprungliga <xref:System.Data.DataSet>med den <xref:System.Data.DataSet.Merge%2A>metoden.</xref:System.Data.DataSet.Merge%2A> </xref:System.Data.DataSet> </xref:System.Data.DataSet>       Att underlätta förklaring av den <xref:System.Data.DataSet.Merge%2A>metoden vi använder &quot;mål&quot; för att ange aktuellt att <xref:System.Data.DataSet>, och &quot;källa&quot; för att namnge andra (parameter) <xref:System.Data.DataSet>.</xref:System.Data.DataSet> </xref:System.Data.DataSet> </xref:System.Data.DataSet.Merge%2A> Målet <xref:System.Data.DataSet>heter så eftersom det är det objekt som utförs av en åtgärd (merge).</xref:System.Data.DataSet> Andra <xref:System.Data.DataSet>kallas en &quot;källa&quot; eftersom information som den innehåller ändrar inte, utan i stället slås samman med aktuellt <xref:System.Data.DataSet>.</xref:System.Data.DataSet> </xref:System.Data.DataSet>       När den <xref:System.Data.DataSet.Merge%2A>metoden anropas, scheman för två <xref:System.Data.DataSet>objekt jämförs eftersom det är möjligt att scheman kan ha ändrats.</xref:System.Data.DataSet> </xref:System.Data.DataSet.Merge%2A> Till exempel i ett scenario med business-to-business kan nya kolumner har lagts till ett XML-schema genom en automatisk process. Om källan <xref:System.Data.DataSet>innehåller schemaelement (lägga till <xref:System.Data.DataColumn>objekt) som saknas i målet, schema-element kan läggas till målet genom att ange den `missingSchemaAction` argument för `MissingSchemaAction.Add`.</xref:System.Data.DataColumn> </xref:System.Data.DataSet> I så fall den sammanfogade <xref:System.Data.DataSet>innehåller extra schema och data.</xref:System.Data.DataSet>       Efter att slå samman scheman kopplas data.       Vid sammanfogning av en ny källa <xref:System.Data.DataSet>till mål, alla datakällor rader med en <xref:System.Data.DataRowState>värdet för `Unchanged`, `Modified`, eller `Deleted` matchas till målet rader med samma primärnyckelvärden.</xref:System.Data.DataRowState> </xref:System.Data.DataSet> Datakällan rader med en `DataRowState` värdet för `Added` matchas mot den nya mål rader med samma primärnyckelvärden som nya källraderna.       Under en koppling har begränsningarna inaktiverats. Om inga begränsningar inte kan aktiveras i slutet av dokument, en <xref:System.Data.ConstraintException>genereras och kopplade data sparas medan begränsningarna har inaktiverats.</xref:System.Data.ConstraintException> I det här fallet den <xref:System.Data.DataSet.EnforceConstraints%2A>egenskap är inställd på `false`, och alla rader som är ogiltiga har markerats med fel.</xref:System.Data.DataSet.EnforceConstraints%2A> Felen måste åtgärdas innan du försöker återställa den <xref:System.Data.DataSet.EnforceConstraints%2A>egenskapen `true`.</xref:System.Data.DataSet.EnforceConstraints%2A>"
  syntax:
    content: public void Merge (System.Data.DataRow[] rows, bool preserveChanges, System.Data.MissingSchemaAction missingSchemaAction);
    parameters:
    - id: rows
      type: System.Data.DataRow[]
      description: "Matris med <xref href=&quot;System.Data.DataRow&quot;> </xref> objekt som ska kopplas till den <xref uid=&quot;langword_csharp_DataSet&quot; name=&quot;DataSet&quot; href=&quot;&quot;> </xref>."
    - id: preserveChanges
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>att bevara ändringar i den <xref uid=&quot;langword_csharp_DataSet&quot; name=&quot;DataSet&quot; href=&quot;&quot;> </xref>, annars <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
    - id: missingSchemaAction
      type: System.Data.MissingSchemaAction
      description: "En av de <xref href=&quot;System.Data.MissingSchemaAction&quot;> </xref> värden."
  overload: System.Data.DataSet.Merge*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.Merge(System.Data.DataSet,System.Boolean,System.Data.MissingSchemaAction)
  id: Merge(System.Data.DataSet,System.Boolean,System.Data.MissingSchemaAction)
  parent: System.Data.DataSet
  langs:
  - csharp
  name: Merge(DataSet,Boolean,MissingSchemaAction)
  nameWithType: DataSet.Merge(DataSet,Boolean,MissingSchemaAction)
  fullName: System.Data.DataSet.Merge(DataSet,Boolean,MissingSchemaAction)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Sammanfogar en angiven <xref href=&quot;System.Data.DataSet&quot;> </xref> och dess schema med aktuellt <xref uid=&quot;langword_csharp_DataSet&quot; name=&quot;DataSet&quot; href=&quot;&quot;> </xref>, behåller eller ignorera ändringar i aktuellt <xref uid=&quot;langword_csharp_DataSet&quot; name=&quot;DataSet&quot; href=&quot;&quot;> </xref> och hantera ett inkompatibelt schema enligt de angivna argumenten."
  remarks: "Den <xref:System.Data.DataSet.Merge%2A>metoden används för att sammanfoga två <xref:System.Data.DataSet>objekt som har i stort sett liknande scheman.</xref:System.Data.DataSet> </xref:System.Data.DataSet.Merge%2A> En koppling används vanligtvis på ett klientprogram för att få de senaste ändringarna från en datakälla till en befintlig <xref:System.Data.DataSet>.</xref:System.Data.DataSet> Detta gör att klientprogrammet har en uppdateras <xref:System.Data.DataSet>med senaste data från datakällan.</xref:System.Data.DataSet>       <xref:System.Data.DataSet.Merge%2A>Metoden anropas vanligtvis i slutet av en serie av procedurer som inbegriper verifierar ändringar, stämma av fel, Uppdatera datakällan med ändringarna, och slutligen uppdaterar befintliga <xref:System.Data.DataSet>.</xref:System.Data.DataSet> </xref:System.Data.DataSet.Merge%2A>       I ett klientprogram är det vanligt att ha en knapp som användaren kan klicka på som ändrade data ska samlas in och validerar den innan den skickas tillbaka till en komponent på mellannivå. I det här fallet den <xref:System.Data.DataSet.GetChanges%2A>metoden anropas först.</xref:System.Data.DataSet.GetChanges%2A> Att metoden returnerar en andra <xref:System.Data.DataSet>optimerade för verifiering och sammanslagning.</xref:System.Data.DataSet> Den här andra <xref:System.Data.DataSet>objektet innehåller endast <xref:System.Data.DataTable>och <xref:System.Data.DataRow>objekt som har ändrats, vilket resulterar i en delmängd av ursprungligt <xref:System.Data.DataSet>.</xref:System.Data.DataSet> </xref:System.Data.DataRow> </xref:System.Data.DataTable> </xref:System.Data.DataSet> Den här delmängden är vanligtvis mindre och därmed mer skickas effektivt tillbaka till en komponent på mellannivå. Komponenten mellannivå uppdaterar sedan den ursprungliga datakällan med ändringarna via lagrade procedurer. Mellannivån kan sedan skicka tillbaka antingen en ny <xref:System.Data.DataSet>som innehåller ursprungliga data och den senaste informationen från datakällan (genom att köra den ursprungliga frågan igen), eller skicka tillbaka delmängden med eventuella ändringar som har gjorts till den från datakällan.</xref:System.Data.DataSet> (Till exempel om datakällan skapas automatiskt unika primärnyckelvärden, dessa värden kan spridas till klientprogrammet.) I båda fallen den returnerade <xref:System.Data.DataSet>kan infogas i client-program ursprungliga <xref:System.Data.DataSet>med den <xref:System.Data.DataSet.Merge%2A>metoden.</xref:System.Data.DataSet.Merge%2A> </xref:System.Data.DataSet> </xref:System.Data.DataSet>       Att underlätta förklaring av den <xref:System.Data.DataSet.Merge%2A>metoden vi använder &quot;mål&quot; för att ange aktuellt att <xref:System.Data.DataSet>, och &quot;källa&quot; för att namnge andra (parameter) <xref:System.Data.DataSet>.</xref:System.Data.DataSet> </xref:System.Data.DataSet> </xref:System.Data.DataSet.Merge%2A> Målet <xref:System.Data.DataSet>heter så eftersom det är det objekt som utförs av en åtgärd (merge).</xref:System.Data.DataSet> Andra <xref:System.Data.DataSet>kallas en &quot;källa&quot; eftersom information som den innehåller ändrar inte, utan i stället slås samman med aktuellt <xref:System.Data.DataSet>.</xref:System.Data.DataSet> </xref:System.Data.DataSet>       När den <xref:System.Data.DataSet.Merge%2A>metoden anropas, scheman för två <xref:System.Data.DataSet>objekt jämförs eftersom det är möjligt att scheman kan ha ändrats.</xref:System.Data.DataSet> </xref:System.Data.DataSet.Merge%2A> Till exempel i ett scenario med business-to-business kan nya kolumner har lagts till ett XML-schema genom en automatisk process. Om källan <xref:System.Data.DataSet>innehåller schemaelement (lägga till <xref:System.Data.DataColumn>objekt) som saknas i målet, schema-element kan läggas till målet genom att ange den `missingSchemaAction` argument för `MissingSchemaAction.Add`.</xref:System.Data.DataColumn> </xref:System.Data.DataSet> I så fall den sammanfogade <xref:System.Data.DataSet>innehåller extra schema och data.</xref:System.Data.DataSet>       Efter att slå samman scheman kopplas data.       Vid sammanfogning av en ny källa <xref:System.Data.DataSet>till mål, alla datakällor rader med en <xref:System.Data.DataRowState>värdet för `Unchanged`, `Modified`, eller `Deleted` matchas till målet rader med samma primärnyckelvärden.</xref:System.Data.DataRowState> </xref:System.Data.DataSet> Datakällan rader med en `DataRowState` värdet för `Added` matchas mot den nya mål rader med samma primärnyckelvärden som nya källraderna.       Under en koppling har begränsningarna inaktiverats. Om inga begränsningar inte kan aktiveras i slutet av dokument, en <xref:System.Data.ConstraintException>genereras och kopplade data sparas medan begränsningarna har inaktiverats.</xref:System.Data.ConstraintException> I det här fallet den <xref:System.Data.DataSet.EnforceConstraints%2A>egenskap är inställd på `false`, och alla rader som är ogiltiga har markerats med fel.</xref:System.Data.DataSet.EnforceConstraints%2A> Felen måste åtgärdas innan du försöker återställa den <xref:System.Data.DataSet.EnforceConstraints%2A>egenskapen `true`.</xref:System.Data.DataSet.EnforceConstraints%2A>"
  example:
  - "The following example creates a simple <xref:System.Data.DataSet> with one table, two columns, and ten rows. Two values are changed, and one row is added. A subset of the changed data is created using the <xref:System.Data.DataSet.GetChanges%2A> method. After reconciling errors, a new column is added to the subset, changing the schema. When the <xref:System.Data.DataSet.Merge%2A> method is called with the `missingSchemaAction` set to `MissingSchemaAction.Add`, the new column is added to the original <xref:System.Data.DataSet> object's schema.  \n  \n [!code-cs[Classic WebData DataSet.Merge2 Example#1](~/add/codesnippet/csharp/e5f91548-401c-49b5-ab4b-_1.cs)]\n [!code-vb[Classic WebData DataSet.Merge2 Example#1](~/add/codesnippet/visualbasic/e5f91548-401c-49b5-ab4b-_1.vb)]"
  syntax:
    content: public void Merge (System.Data.DataSet dataSet, bool preserveChanges, System.Data.MissingSchemaAction missingSchemaAction);
    parameters:
    - id: dataSet
      type: System.Data.DataSet
      description: "Den <xref uid=&quot;langword_csharp_DataSet&quot; name=&quot;DataSet&quot; href=&quot;&quot;> </xref> vars data och schema sammanfogas."
    - id: preserveChanges
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>att bevara ändringar i aktuellt <xref uid=&quot;langword_csharp_DataSet&quot; name=&quot;DataSet&quot; href=&quot;&quot;> </xref>, annars <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
    - id: missingSchemaAction
      type: System.Data.MissingSchemaAction
      description: "En av de <xref href=&quot;System.Data.MissingSchemaAction&quot;> </xref> värden."
  overload: System.Data.DataSet.Merge*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>dataSet</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Data.DataSet.Merge(System.Data.DataTable,System.Boolean,System.Data.MissingSchemaAction)
  id: Merge(System.Data.DataTable,System.Boolean,System.Data.MissingSchemaAction)
  parent: System.Data.DataSet
  langs:
  - csharp
  name: Merge(DataTable,Boolean,MissingSchemaAction)
  nameWithType: DataSet.Merge(DataTable,Boolean,MissingSchemaAction)
  fullName: System.Data.DataSet.Merge(DataTable,Boolean,MissingSchemaAction)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Sammanfogar en angiven <xref href=&quot;System.Data.DataTable&quot;> </xref> och dess schema till aktuellt <xref uid=&quot;langword_csharp_DataSet&quot; name=&quot;DataSet&quot; href=&quot;&quot;> </xref>, behåller eller ignorera ändringar i den <xref uid=&quot;langword_csharp_DataSet&quot; name=&quot;DataSet&quot; href=&quot;&quot;> </xref> och hantera ett inkompatibelt schema enligt de angivna argumenten."
  remarks: "Den <xref:System.Data.DataSet.Merge%2A>metoden används för att sammanfoga två <xref:System.Data.DataSet>objekt som har i stort sett liknande scheman.</xref:System.Data.DataSet> </xref:System.Data.DataSet.Merge%2A> En koppling används vanligtvis på ett klientprogram för att få de senaste ändringarna från en datakälla till en befintlig <xref:System.Data.DataSet>.</xref:System.Data.DataSet> Detta gör att klientprogrammet har en uppdateras <xref:System.Data.DataSet>med senaste data från datakällan.</xref:System.Data.DataSet>       <xref:System.Data.DataSet.Merge%2A>Metoden anropas vanligtvis i slutet av en serie av procedurer som inbegriper verifierar ändringar, stämma av fel, Uppdatera datakällan med ändringarna, och slutligen uppdaterar befintliga <xref:System.Data.DataSet>.</xref:System.Data.DataSet> </xref:System.Data.DataSet.Merge%2A>       Med ett klientprogram, är det vanligt att ha en knapp som användaren kan klicka på som ändrade data ska samlas in och validerar den innan den skickas tillbaka till en komponent på mellannivå. I det här fallet den <xref:System.Data.DataSet.GetChanges%2A>metoden anropas först.</xref:System.Data.DataSet.GetChanges%2A> Att metoden returnerar en andra <xref:System.Data.DataSet>optimerade för verifiering och sammanslagning.</xref:System.Data.DataSet> Den här andra <xref:System.Data.DataSet>objektet innehåller endast <xref:System.Data.DataTable>och <xref:System.Data.DataRow>objekt som har ändrats, vilket resulterar i en delmängd av ursprungligt <xref:System.Data.DataSet>.</xref:System.Data.DataSet> </xref:System.Data.DataRow> </xref:System.Data.DataTable> </xref:System.Data.DataSet> Den här delmängden är vanligtvis mindre och därmed mer skickas effektivt tillbaka till en komponent på mellannivå. Komponenten mellannivå uppdaterar sedan den ursprungliga datakällan med ändringarna via lagrade procedurer. Mellannivån kan sedan skicka tillbaka antingen en ny <xref:System.Data.DataSet>som innehåller ursprungliga data och den senaste informationen från datakällan (genom att köra den ursprungliga frågan igen), eller skicka tillbaka delmängden med eventuella ändringar som har gjorts till den från datakällan.</xref:System.Data.DataSet> (Till exempel om datakällan skapas automatiskt unika primärnyckelvärden, dessa värden kan spridas till klientprogrammet.) I båda fallen den returnerade <xref:System.Data.DataSet>kan infogas i client-program ursprungliga <xref:System.Data.DataSet>med den <xref:System.Data.DataSet.Merge%2A>metoden.</xref:System.Data.DataSet.Merge%2A> </xref:System.Data.DataSet> </xref:System.Data.DataSet>       När den <xref:System.Data.DataSet.Merge%2A>metoden anropas, scheman för två <xref:System.Data.DataSet>objekt jämförs eftersom det är möjligt att scheman kan ha ändrats.</xref:System.Data.DataSet> </xref:System.Data.DataSet.Merge%2A> Till exempel i ett scenario med business-to-business kan nya kolumner har lagts till ett XML-schema genom en automatisk process. Om källan <xref:System.Data.DataSet>innehåller schemaelement (lägga till <xref:System.Data.DataColumn>objekt) som saknas i målet, schema-element kan läggas till målet genom att ange den `missingSchemaAction` argument för `MissingSchemaAction.Add`.</xref:System.Data.DataColumn> </xref:System.Data.DataSet> I så fall den sammanfogade <xref:System.Data.DataSet>innehåller extra schema och data.</xref:System.Data.DataSet>       Efter att slå samman scheman kopplas data.       Vid sammanfogning av en ny källa <xref:System.Data.DataSet>till mål, alla datakällor rader med en <xref:System.Data.DataRowState>värdet för `Unchanged`, `Modified`, eller `Deleted` matchas till målet rader med samma primärnyckelvärden.</xref:System.Data.DataRowState> </xref:System.Data.DataSet> Datakällan rader med en `DataRowState` värdet för `Added` matchas mot den nya mål rader med samma primärnyckelvärden som nya källraderna.       Under en koppling har begränsningarna inaktiverats. Om inga begränsningar inte kan aktiveras i slutet av dokument, en <xref:System.Data.ConstraintException>genereras och kopplade data sparas medan begränsningarna har inaktiverats.</xref:System.Data.ConstraintException> I det här fallet den <xref:System.Data.DataSet.EnforceConstraints%2A>egenskap är inställd på `false`, och alla rader som är ogiltiga har markerats med fel.</xref:System.Data.DataSet.EnforceConstraints%2A> Felen måste åtgärdas innan du försöker återställa den <xref:System.Data.DataSet.EnforceConstraints%2A>egenskapen `true`.</xref:System.Data.DataSet.EnforceConstraints%2A>"
  example:
  - "The following example creates a simple <xref:System.Data.DataSet> with one table, two columns, and ten rows. A second <xref:System.Data.DataTable> is created that is nearly identical to the first except that a new `DataColumn` is added to the table. Two rows are added to the second table, which is then merged into the <xref:System.Data.DataSet> with the `preserveChanges` argument set to `false`, and the `missingSchemaAction` argument set to `MissingSchemaAction.Add`.  \n  \n [!code-cs[Classic WebData DataSet.Merge4 Example#1](~/add/codesnippet/csharp/a63745f5-1a9e-4fc7-9c61-_1.cs)]\n [!code-vb[Classic WebData DataSet.Merge4 Example#1](~/add/codesnippet/visualbasic/a63745f5-1a9e-4fc7-9c61-_1.vb)]"
  syntax:
    content: public void Merge (System.Data.DataTable table, bool preserveChanges, System.Data.MissingSchemaAction missingSchemaAction);
    parameters:
    - id: table
      type: System.Data.DataTable
      description: "Den <xref uid=&quot;langword_csharp_DataTable&quot; name=&quot;DataTable&quot; href=&quot;&quot;> </xref> vars data och schema sammanfogas."
    - id: preserveChanges
      type: System.Boolean
      description: "En av de <xref href=&quot;System.Data.MissingSchemaAction&quot;> </xref> värden."
    - id: missingSchemaAction
      type: System.Data.MissingSchemaAction
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>att bevara ändringar i den <xref uid=&quot;langword_csharp_DataSet&quot; name=&quot;DataSet&quot; href=&quot;&quot;> </xref>, annars <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Data.DataSet.Merge*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>dataSet</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Data.DataSet.MergeFailed
  id: MergeFailed
  parent: System.Data.DataSet
  langs:
  - csharp
  name: MergeFailed
  nameWithType: DataSet.MergeFailed
  fullName: System.Data.DataSet.MergeFailed
  type: Event
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Inträffar när en mål- och <xref href=&quot;System.Data.DataRow&quot;> </xref> har det samma primärnyckelvärdet och <xref:System.Data.DataSet.EnforceConstraints*>har angetts till true.</xref:System.Data.DataSet.EnforceConstraints*>"
  remarks: 'Mer information om hur du hanterar händelser finns [NIB: förbrukar händelser](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).'
  example:
  - "The following example demonstrates the use of the MergeFailed event.  \n  \n [!code-vb[Classic WebData DataSet.MergeFailed Example#1](~/add/codesnippet/visualbasic/e-system.data.dataset.me_1.vb)]\n [!code-cs[Classic WebData DataSet.MergeFailed Example#1](~/add/codesnippet/csharp/e-system.data.dataset.me_1.cs)]"
  syntax:
    content: public event System.Data.MergeFailedEventHandler MergeFailed;
    return:
      type: System.Data.MergeFailedEventHandler
      description: "Som ska läggas till."
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.Namespace
  id: Namespace
  parent: System.Data.DataSet
  langs:
  - csharp
  name: Namespace
  nameWithType: DataSet.Namespace
  fullName: System.Data.DataSet.Namespace
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Hämtar eller anger namnområdet för den <xref href=&quot;System.Data.DataSet&quot;> </xref>."
  remarks: "Egenskapen Namespace används när läsning och skrivning av en XML-dokumentet i den <xref:System.Data.DataSet>med hjälp av den <xref:System.Data.DataSet.ReadXml%2A>, <xref:System.Data.DataSet.WriteXml%2A>, <xref:System.Data.DataSet.ReadXmlSchema%2A>, eller <xref:System.Data.DataSet.WriteXmlSchema%2A>metoder.</xref:System.Data.DataSet.WriteXmlSchema%2A> </xref:System.Data.DataSet.ReadXmlSchema%2A> </xref:System.Data.DataSet.WriteXml%2A> </xref:System.Data.DataSet.ReadXml%2A> </xref:System.Data.DataSet>       Namnområdet för XML-dokument som används för att definiera omfattningen av XML-attribut och element när läsa till <xref:System.Data.DataSet>.</xref:System.Data.DataSet> Till exempel om en <xref:System.Data.DataSet>innehåller ett schema som lästes från ett dokument med namnområdet &quot;mitt företag&quot;, och ett försök görs att läsa data från ett dokument med ett annat namnområde och alla data som inte motsvarar det befintliga schemat ignoreras.</xref:System.Data.DataSet>"
  example:
  - "The following example sets the <xref:System.Data.DataSet.Prefix%2A> before calling the <xref:System.Data.DataSet.ReadXml%2A> method.  \n  \n [!code-vb[Classic WebData DataSet.Namespace Example#1](~/add/codesnippet/visualbasic/p-system.data.dataset.na_1.vb)]\n [!code-cs[Classic WebData DataSet.Namespace Example#1](~/add/codesnippet/csharp/p-system.data.dataset.na_1.cs)]"
  syntax:
    content: public string Namespace { get; set; }
    return:
      type: System.String
      description: "Namnområdet för den <xref href=&quot;System.Data.DataSet&quot;> </xref>."
  overload: System.Data.DataSet.Namespace*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Namnområdet har redan data."
  platform:
  - net462
- uid: System.Data.DataSet.OnPropertyChanging(System.ComponentModel.PropertyChangedEventArgs)
  id: OnPropertyChanging(System.ComponentModel.PropertyChangedEventArgs)
  parent: System.Data.DataSet
  langs:
  - csharp
  name: OnPropertyChanging(PropertyChangedEventArgs)
  nameWithType: DataSet.OnPropertyChanging(PropertyChangedEventArgs)
  fullName: System.Data.DataSet.OnPropertyChanging(PropertyChangedEventArgs)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Aktiverar OnPropertyChanging-händelse."
  remarks: 'Att en händelse utlöstes anropar händelsehanteraren via ett ombud. En översikt finns [NIB: att en händelse utlöstes](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).'
  syntax:
    content: protected virtual void OnPropertyChanging (System.ComponentModel.PropertyChangedEventArgs pcevent);
    parameters:
    - id: pcevent
      type: System.ComponentModel.PropertyChangedEventArgs
      description: "En <xref:System.ComponentModel.PropertyChangedEventArgs>som innehåller informationen om händelsen.</xref:System.ComponentModel.PropertyChangedEventArgs>"
  overload: System.Data.DataSet.OnPropertyChanging*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.OnRemoveRelation(System.Data.DataRelation)
  id: OnRemoveRelation(System.Data.DataRelation)
  parent: System.Data.DataSet
  langs:
  - csharp
  name: OnRemoveRelation(DataRelation)
  nameWithType: DataSet.OnRemoveRelation(DataRelation)
  fullName: System.Data.DataSet.OnRemoveRelation(DataRelation)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Inträffar när en <xref href=&quot;System.Data.DataRelation&quot;> </xref> ta bort objektet från en <xref href=&quot;System.Data.DataTable&quot;> </xref>."
  remarks: "Den här metoden bör åsidosättas av underklasser att begränsa tabeller tas bort"
  syntax:
    content: protected virtual void OnRemoveRelation (System.Data.DataRelation relation);
    parameters:
    - id: relation
      type: System.Data.DataRelation
      description: "Den <xref href=&quot;System.Data.DataRelation&quot;> </xref> tas bort."
  overload: System.Data.DataSet.OnRemoveRelation*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.OnRemoveTable(System.Data.DataTable)
  id: OnRemoveTable(System.Data.DataTable)
  parent: System.Data.DataSet
  langs:
  - csharp
  name: OnRemoveTable(DataTable)
  nameWithType: DataSet.OnRemoveTable(DataTable)
  fullName: System.Data.DataSet.OnRemoveTable(DataTable)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Inträffar när en <xref href=&quot;System.Data.DataTable&quot;> </xref> tas bort från en <xref href=&quot;System.Data.DataSet&quot;> </xref>."
  remarks: "Den här metoden kan åsidosättas av underklasser att begränsa tabeller tas bort."
  example:
  - "The following example shows a class derived from the <xref:System.Data.DataSet> with the OnRemoveTable method overridden.  \n  \n [!code-vb[Classic WebData DataSet.OnRemoveTable Example#1](~/add/codesnippet/visualbasic/m-system.data.dataset.on_1.vb)]\n [!code-cs[Classic WebData DataSet.OnRemoveTable Example#1](~/add/codesnippet/csharp/m-system.data.dataset.on_1.cs)]"
  syntax:
    content: protected virtual void OnRemoveTable (System.Data.DataTable table);
    parameters:
    - id: table
      type: System.Data.DataTable
      description: "Den <xref href=&quot;System.Data.DataTable&quot;> </xref> tas bort."
  overload: System.Data.DataSet.OnRemoveTable*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.Prefix
  id: Prefix
  parent: System.Data.DataSet
  langs:
  - csharp
  name: Prefix
  nameWithType: DataSet.Prefix
  fullName: System.Data.DataSet.Prefix
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Hämtar eller anger en XML-prefix som alias namnområdet för den <xref href=&quot;System.Data.DataSet&quot;> </xref>."
  remarks: "Egenskapen Prefix används i ett XML-dokument för att identifiera element som tillhör namnområdet för den <xref:System.Data.DataSet>objekt (som anges av den <xref:System.Data.DataSet.Namespace%2A>egenskapen).</xref:System.Data.DataSet.Namespace%2A> </xref:System.Data.DataSet>"
  example:
  - "The following example sets the Prefix before calling the <xref:System.Data.DataSet.ReadXml%2A> method.  \n  \n [!code-vb[Classic WebData DataSet.Namespace Example#1](~/add/codesnippet/visualbasic/p-system.data.dataset.pr_1.vb)]\n [!code-cs[Classic WebData DataSet.Namespace Example#1](~/add/codesnippet/csharp/p-system.data.dataset.pr_1.cs)]"
  syntax:
    content: public string Prefix { get; set; }
    return:
      type: System.String
      description: "XML-prefix för den <xref href=&quot;System.Data.DataSet&quot;> </xref> namnområde."
  overload: System.Data.DataSet.Prefix*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.RaisePropertyChanging(System.String)
  id: RaisePropertyChanging(System.String)
  parent: System.Data.DataSet
  langs:
  - csharp
  name: RaisePropertyChanging(String)
  nameWithType: DataSet.RaisePropertyChanging(String)
  fullName: System.Data.DataSet.RaisePropertyChanging(String)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Skickar ett meddelande som den angivna <xref href=&quot;System.Data.DataSet&quot;> </xref> egenskapen är att ändra."
  syntax:
    content: protected void RaisePropertyChanging (string name);
    parameters:
    - id: name
      type: System.String
      description: "Namnet på den egenskap som ska ändras."
  overload: System.Data.DataSet.RaisePropertyChanging*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.ReadXml(System.IO.Stream)
  id: ReadXml(System.IO.Stream)
  parent: System.Data.DataSet
  langs:
  - csharp
  name: ReadXml(Stream)
  nameWithType: DataSet.ReadXml(Stream)
  fullName: System.Data.DataSet.ReadXml(Stream)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Läser XML-schemat och data till den <xref href=&quot;System.Data.DataSet&quot;> </xref> med det angivna &lt;xref:System.IO.Stream?displayProperty=fullName&gt;."
  remarks: "Den <xref:System.Data.DataSet.ReadXml%2A>metoden ger ett sätt att läsa data, eller både data och schema i en <xref:System.Data.DataSet>från en XML-dokument, medan den <xref:System.Data.DataSet.ReadXmlSchema%2A>metoden läser endast schemat.</xref:System.Data.DataSet.ReadXmlSchema%2A> </xref:System.Data.DataSet> </xref:System.Data.DataSet.ReadXml%2A> Om du vill läsa både data och schema, kan du använda en av de `ReadXML` överlagringar som innehåller den `mode` parameter, och ange värdet till `ReadSchema`.       Observera att samma sak gäller för den <xref:System.Data.DataSet.WriteXml%2A>och <xref:System.Data.DataSet.WriteXmlSchema%2A>metoder, respektive.</xref:System.Data.DataSet.WriteXmlSchema%2A> </xref:System.Data.DataSet.WriteXml%2A> Att skriva XML-data, eller både schema- och data från den `DataSet`, använda den `WriteXml` metoden. Om du vill skriva bara schemat, använda den `WriteXmlSchema` metoden.      > [!NOTE] > En <xref:System.InvalidOperationException>genereras om en kolumntyp i den `DataRow` att läsa från eller skrivs till implementerar <xref:System.Dynamic.IDynamicMetaObjectProvider>och implementerar inte <xref:System.Xml.Serialization.IXmlSerializable>.</xref:System.Xml.Serialization.IXmlSerializable> </xref:System.Dynamic.IDynamicMetaObjectProvider> </xref:System.InvalidOperationException>       Om en infogad-schemat har angetts används i rad schemat att utöka den befintliga relationella strukturen innan du läser in data. Ett undantagsfel genereras om det finns några konflikter (till exempel i samma kolumn i samma tabell som definierats med olika datatyper).       Om inget infogad schema har angetts utökas relationella strukturen genom härledning efter behov, enligt strukturen i XML-dokumentet. Om schemat kan utökas genom härledning för att visa alla data, utlöses ett undantag.      > [!NOTE] > Den `DataSet` associeras inte ett XML-element med motsvarande `DataColumn` eller `DataTable` när juridiska XML-tecken, till exempel (&quot;_&quot;) är undantagna i den serialiserade XML. Den `DataSet` själva hoppas bara den ogiltiga XML-tecken i XML-elementnamn och därför kan bara använda samma. När giltiga tecken i XML-elementnamn är undantagna ignoreras elementet under bearbetningen.       Om XML-schemat för en <xref:System.Data.DataSet>innehåller `targetNamespace`data inte kan läsas och undantag kan uppstå när du anropar <xref:System.Data.DataSet.ReadXml%2A>att läsa in den <xref:System.Data.DataSet>med XML som innehåller element med inga kvalificerande namnområde.</xref:System.Data.DataSet> </xref:System.Data.DataSet.ReadXml%2A> </xref:System.Data.DataSet> Om du vill läsa okvalificerade element, ange `elementFormDefault` lika med &quot;kvalificerade&quot; i XML-schemat som exemplet nedan visar.      ```   <xsd:schema id=&quot;MyDataSet&quot;       elementFormDefault=&quot;qualified&quot;       targetNamespace=&quot;http://www.tempuri.org/MyDataSet.xsd&quot;       xmlns=&quot;http://www.tempuri.org/MyDataSet.xsd&quot;       xmlns:xsd=&quot;http://www.w3.org/2001/XMLSchema&quot;       xmlns:msdata=&quot;urn:schemas-microsoft-com:xml-msdata&quot;>   </xsd:schema>   ```      > [!NOTE]> Om schemat för din <xref:System.Data.DataSet>innehåller element med samma namn, men med annan typ i samma namnområde, genereras ett undantag vid försök att läsa schema i den <xref:System.Data.DataSet>med <xref:System.Data.DataSet.ReadXml%2A>genom att ange `XmlReadMode.ReadSchema`.</xref:System.Data.DataSet.ReadXml%2A> </xref:System.Data.DataSet> </xref:System.Data.DataSet> Det här undantaget uppstår inte om du använder .NET Framework version 1.0."
  example:
  - "The following example first creates a simple <xref:System.Data.DataSet> with one <xref:System.Data.DataTable>, two columns, and ten rows. The <xref:System.Data.DataSet> schema and data are written to disk by invoking the <xref:System.Data.DataSet.WriteXml%2A> method. A second <xref:System.Data.DataSet> is created and the <xref:System.Data.DataSet.ReadXml%2A> method is used to fill it with schema and data.  \n  \n [!code-cs[Classic WebData DataSet.ReadXml1 Example#1](~/add/codesnippet/csharp/m-system.data.dataset.re_7_1.cs)]\n [!code-vb[Classic WebData DataSet.ReadXml1 Example#1](~/add/codesnippet/visualbasic/m-system.data.dataset.re_7_1.vb)]"
  syntax:
    content: public System.Data.XmlReadMode ReadXml (System.IO.Stream stream);
    parameters:
    - id: stream
      type: System.IO.Stream
      description: "Ett objekt som härleds från <xref:System.IO.Stream>.</xref:System.IO.Stream>"
    return:
      type: System.Data.XmlReadMode
      description: "Den <xref href=&quot;System.Data.XmlReadMode&quot;> </xref> används för att läsa data."
  overload: System.Data.DataSet.ReadXml*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.ReadXml(System.IO.TextReader)
  id: ReadXml(System.IO.TextReader)
  parent: System.Data.DataSet
  langs:
  - csharp
  name: ReadXml(TextReader)
  nameWithType: DataSet.ReadXml(TextReader)
  fullName: System.Data.DataSet.ReadXml(TextReader)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Läser XML-schemat och data till den <xref href=&quot;System.Data.DataSet&quot;> </xref> med det angivna &lt;xref:System.IO.TextReader?displayProperty=fullName&gt;."
  remarks: "Den <xref:System.Data.DataSet.ReadXml%2A>metoden ger ett sätt att läsa data, eller både data och schema i en <xref:System.Data.DataSet>från en XML-dokument, medan den <xref:System.Data.DataSet.ReadXmlSchema%2A>metoden läser endast schemat.</xref:System.Data.DataSet.ReadXmlSchema%2A> </xref:System.Data.DataSet> </xref:System.Data.DataSet.ReadXml%2A> Om du vill läsa både data och schema, kan du använda en av de `ReadXML` överlagringar som innehåller den `mode` parameter, och ange värdet till `ReadSchema`.       Observera att samma sak gäller för den <xref:System.Data.DataSet.WriteXml%2A>och <xref:System.Data.DataSet.WriteXmlSchema%2A>metoder, respektive.</xref:System.Data.DataSet.WriteXmlSchema%2A> </xref:System.Data.DataSet.WriteXml%2A> Att skriva XML-data, eller både schema- och data från den `DataSet`, använda den `WriteXml` metoden. Om du vill skriva bara schemat, använda den `WriteXmlSchema` metoden.      > [!NOTE] > En <xref:System.InvalidOperationException>genereras om en kolumntyp i den `DataRow` att läsa från eller skrivs till implementerar <xref:System.Dynamic.IDynamicMetaObjectProvider>och implementerar inte <xref:System.Xml.Serialization.IXmlSerializable>.</xref:System.Xml.Serialization.IXmlSerializable> </xref:System.Dynamic.IDynamicMetaObjectProvider> </xref:System.InvalidOperationException>       Om en infogad-schemat har angetts används i rad schemat att utöka den befintliga relationella strukturen innan du läser in data. Ett undantagsfel genereras om det finns några konflikter (till exempel i samma kolumn i samma tabell som definierats med olika datatyper).       Om inget infogad schema har angetts utökas relationella strukturen genom härledning efter behov, enligt strukturen i XML-dokumentet. Om schemat kan utökas genom härledning för att visa alla data, utlöses ett undantag.      > [!NOTE] > Den `DataSet` associeras inte ett XML-element med motsvarande `DataColumn` eller `DataTable` när juridiska XML-tecken, till exempel (&quot;_&quot;) är undantagna i den serialiserade XML. Den `DataSet` själva hoppas bara den ogiltiga XML-tecken i XML-elementnamn och därför kan bara använda samma. När giltiga tecken i XML-elementnamn är undantagna ignoreras elementet under bearbetningen.       Om XML-schemat för en <xref:System.Data.DataSet>innehåller `targetNamespace`data inte kan läsas och undantag kan uppstå när du anropar <xref:System.Data.DataSet.ReadXml%2A>att läsa in den <xref:System.Data.DataSet>med XML som innehåller element med inga kvalificerande namnområde.</xref:System.Data.DataSet> </xref:System.Data.DataSet.ReadXml%2A> </xref:System.Data.DataSet> Om du vill läsa okvalificerade element, ange `elementFormDefault` lika med &quot;kvalificerade&quot; i XML-schemat som exemplet nedan visar.      ```   <xsd:schema id=&quot;MyDataSet&quot;       elementFormDefault=&quot;qualified&quot;       targetNamespace=&quot;http://www.tempuri.org/MyDataSet.xsd&quot;       xmlns=&quot;http://www.tempuri.org/MyDataSet.xsd&quot;       xmlns:xsd=&quot;http://www.w3.org/2001/XMLSchema&quot;       xmlns:msdata=&quot;urn:schemas-microsoft-com:xml-msdata&quot;>   </xsd:schema>   ```Klasser som ärver från den <xref:System.IO.TextReader>klassen innehåller den <xref:System.IO.StreamReader>och <xref:System.IO.StringReader>klasser.</xref:System.IO.StringReader> </xref:System.IO.StreamReader> </xref:System.IO.TextReader>      > [!NOTE] > Om schemat för din <xref:System.Data.DataSet>innehåller element med samma namn, men med annan typ i samma namnområde, genereras ett undantag vid försök att läsa schema i den <xref:System.Data.DataSet>med <xref:System.Data.DataSet.ReadXml%2A>genom att ange `XmlReadMode.ReadSchema`.</xref:System.Data.DataSet.ReadXml%2A> </xref:System.Data.DataSet> </xref:System.Data.DataSet> Det här undantaget uppstår inte om du använder .NET Framework version 1.0."
  example:
  - "The following example first creates a simple <xref:System.Data.DataSet> with one <xref:System.Data.DataTable>, two columns, and ten rows. The <xref:System.Data.DataSet> schema and data are written to disk by invoking the <xref:System.Data.DataSet.WriteXml%2A> method. A second <xref:System.Data.DataSet> is created and the <xref:System.Data.DataSet.ReadXml%2A> method is used to fill it with schema and data.  \n  \n [!code-vb[Classic WebData DataSet.ReadXml2 Example#1](~/add/codesnippet/visualbasic/m-system.data.dataset.re_3_1.vb)]\n [!code-cs[Classic WebData DataSet.ReadXml2 Example#1](~/add/codesnippet/csharp/m-system.data.dataset.re_3_1.cs)]"
  syntax:
    content: public System.Data.XmlReadMode ReadXml (System.IO.TextReader reader);
    parameters:
    - id: reader
      type: System.IO.TextReader
      description: "Den <xref uid=&quot;langword_csharp_TextReader&quot; name=&quot;TextReader&quot; href=&quot;&quot;> </xref> som ska läsas schema och data från."
    return:
      type: System.Data.XmlReadMode
      description: "Den <xref href=&quot;System.Data.XmlReadMode&quot;> </xref> används för att läsa data."
  overload: System.Data.DataSet.ReadXml*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.ReadXml(System.String)
  id: ReadXml(System.String)
  parent: System.Data.DataSet
  langs:
  - csharp
  name: ReadXml(String)
  nameWithType: DataSet.ReadXml(String)
  fullName: System.Data.DataSet.ReadXml(String)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Läser XML-schemat och data till den <xref href=&quot;System.Data.DataSet&quot;> </xref> med hjälp av den angivna filen."
  remarks: "Den <xref:System.Data.DataSet.ReadXml%2A>metoden ger ett sätt att läsa data, eller både data och schema i en <xref:System.Data.DataSet>från en XML-dokument, medan den <xref:System.Data.DataSet.ReadXmlSchema%2A>metoden läser endast schemat.</xref:System.Data.DataSet.ReadXmlSchema%2A> </xref:System.Data.DataSet> </xref:System.Data.DataSet.ReadXml%2A> Om du vill läsa både data och schema, kan du använda en av de `ReadXML` överlagringar som innehåller den `mode` parameter, och ange värdet till `ReadSchema`.       Observera att samma sak gäller för den <xref:System.Data.DataSet.WriteXml%2A>och <xref:System.Data.DataSet.WriteXmlSchema%2A>metoder, respektive.</xref:System.Data.DataSet.WriteXmlSchema%2A> </xref:System.Data.DataSet.WriteXml%2A> Att skriva XML-data, eller både schema- och data från den `DataSet`, använda den `WriteXml` metoden. Om du vill skriva bara schemat, använda den `WriteXmlSchema` metoden.      > [!NOTE] > En <xref:System.InvalidOperationException>genereras om en kolumntyp i den `DataRow` att läsa från eller skrivs till implementerar <xref:System.Dynamic.IDynamicMetaObjectProvider>och implementerar inte <xref:System.Xml.Serialization.IXmlSerializable>.</xref:System.Xml.Serialization.IXmlSerializable> </xref:System.Dynamic.IDynamicMetaObjectProvider> </xref:System.InvalidOperationException>       Om en infogad-schemat har angetts används i rad schemat att utöka den befintliga relationella strukturen innan du läser in data. Ett undantagsfel genereras om det finns några konflikter (till exempel i samma kolumn i samma tabell som definierats med olika datatyper).       Om inget infogad schema har angetts utökas relationella strukturen genom härledning efter behov, enligt strukturen i XML-dokumentet. Om schemat kan utökas genom härledning för att visa alla data, utlöses ett undantag.      > [!NOTE] > Den `DataSet` associeras inte ett XML-element med motsvarande `DataColumn` eller `DataTable` när juridiska XML-tecken, till exempel (&quot;_&quot;) är undantagna i den serialiserade XML. Den `DataSet` själva hoppas bara den ogiltiga XML-tecken i XML-elementnamn och därför kan bara använda samma. När giltiga tecken i XML-elementnamn är undantagna ignoreras elementet under bearbetningen.       Om XML-schemat för en <xref:System.Data.DataSet>innehåller en `targetNamespace`data inte kan läsas och undantag kan uppstå när du anropar <xref:System.Data.DataSet.ReadXml%2A>att läsa in den <xref:System.Data.DataSet>med XML som innehåller element med inga kvalificerande namnområde.</xref:System.Data.DataSet> </xref:System.Data.DataSet.ReadXml%2A> </xref:System.Data.DataSet> Om du vill läsa okvalificerade element, ange `elementFormDefault` lika med &quot;kvalificerade&quot; i XML-schemat som exemplet nedan visar.      ```   <xsd:schema id=&quot;MyDataSet&quot;       elementFormDefault=&quot;qualified&quot;       targetNamespace=&quot;http://www.tempuri.org/MyDataSet.xsd&quot;       xmlns=&quot;http://www.tempuri.org/MyDataSet.xsd&quot;       xmlns:xsd=&quot;http://www.w3.org/2001/XMLSchema&quot;       xmlns:msdata=&quot;urn:schemas-microsoft-com:xml-msdata&quot;>   </xsd:schema>   ```      > [!NOTE]> Om schemat för din <xref:System.Data.DataSet>innehåller element med samma namn, men med annan typ i samma namnområde, genereras ett undantag vid försök att läsa schema i den <xref:System.Data.DataSet>med <xref:System.Data.DataSet.ReadXml%2A>genom att ange `XmlReadMode.ReadSchema`.</xref:System.Data.DataSet.ReadXml%2A> </xref:System.Data.DataSet> </xref:System.Data.DataSet> Det här undantaget uppstår inte om du använder .NET Framework version 1.0."
  example:
  - "The following example first creates a simple <xref:System.Data.DataSet> with one <xref:System.Data.DataTable>, two columns, and ten rows. The <xref:System.Data.DataSet> schema and data are written to disk by invoking the <xref:System.Data.DataSet.WriteXml%2A> method. A second <xref:System.Data.DataSet> is created and the <xref:System.Data.DataSet.ReadXml%2A> method is used to fill it with schema and data.  \n  \n [!code-cs[Classic WebData DataSet.ReadXml3 Example#1](~/add/codesnippet/csharp/m-system.data.dataset.re_1_1.cs)]\n [!code-vb[Classic WebData DataSet.ReadXml3 Example#1](~/add/codesnippet/visualbasic/m-system.data.dataset.re_1_1.vb)]"
  syntax:
    content: public System.Data.XmlReadMode ReadXml (string fileName);
    parameters:
    - id: fileName
      type: System.String
      description: "Filnamnet (inklusive sökväg) som ska läsas från."
    return:
      type: System.Data.XmlReadMode
      description: "Den <xref uid=&quot;langword_csharp_XmlReadMode&quot; name=&quot;XmlReadMode&quot; href=&quot;&quot;> </xref> används för att läsa data."
  overload: System.Data.DataSet.ReadXml*
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "<xref href=&quot;System.Security.Permissions.FileIOPermission&quot;></xref>är inte inställd på <xref href=&quot;System.Security.Permissions.FileIOPermissionAccess&quot;> </xref>."
  platform:
  - net462
- uid: System.Data.DataSet.ReadXml(System.Xml.XmlReader)
  id: ReadXml(System.Xml.XmlReader)
  parent: System.Data.DataSet
  langs:
  - csharp
  name: ReadXml(XmlReader)
  nameWithType: DataSet.ReadXml(XmlReader)
  fullName: System.Data.DataSet.ReadXml(XmlReader)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Läser XML-schemat och data till den <xref href=&quot;System.Data.DataSet&quot;> </xref> med det angivna &lt;xref:System.Xml.XmlReader?displayProperty=fullName&gt;."
  remarks: "Metoden ReadXml ger ett sätt att läsa data, eller både data och schema i en <xref:System.Data.DataSet>från en XML-dokument, medan den <xref:System.Data.DataSet.ReadXmlSchema%2A>metoden läser endast schemat.</xref:System.Data.DataSet.ReadXmlSchema%2A> </xref:System.Data.DataSet> Om du vill läsa både data och schema, kan du använda en av de `ReadXML` överlagringar som innehåller den `mode` parameter, och ange värdet till `ReadSchema`.       Observera att samma sak gäller för den <xref:System.Data.DataSet.WriteXml%2A>och <xref:System.Data.DataSet.WriteXmlSchema%2A>metoder, respektive.</xref:System.Data.DataSet.WriteXmlSchema%2A> </xref:System.Data.DataSet.WriteXml%2A> Att skriva XML-data, eller både schema- och data från den `DataSet`, använda den `WriteXml` metoden. Om du vill skriva bara schemat, använda den `WriteXmlSchema` metoden.      > [!NOTE] > En <xref:System.InvalidOperationException>genereras om en kolumntyp i den `DataRow` att läsa från eller skrivs till implementerar <xref:System.Dynamic.IDynamicMetaObjectProvider>och implementerar inte <xref:System.Xml.Serialization.IXmlSerializable>.</xref:System.Xml.Serialization.IXmlSerializable> </xref:System.Dynamic.IDynamicMetaObjectProvider> </xref:System.InvalidOperationException>       Om en infogad-schemat har angetts används i rad schemat att utöka den befintliga relationella strukturen innan du läser in data. Ett undantagsfel genereras om det finns några konflikter (till exempel i samma kolumn i samma tabell som definierats med olika datatyper).       Om inget infogad schema har angetts utökas relationella strukturen genom härledning efter behov, enligt strukturen i XML-dokumentet. Om schemat kan utökas genom härledning för att visa alla data, utlöses ett undantag.      > [!NOTE] > Den `DataSet` associeras inte ett XML-element med motsvarande `DataColumn` eller `DataTable` när juridiska XML-tecken, till exempel (&quot;_&quot;) är undantagna i den serialiserade XML. Den `DataSet` själva hoppas bara den ogiltiga XML-tecken i XML-elementnamn och därför kan bara använda samma. När giltiga tecken i XML-elementnamn är undantagna ignoreras elementet under bearbetningen.       Om XML-schemat för en <xref:System.Data.DataSet>innehåller en `targetNamespace`data inte kan läsas och undantag kan uppstå när du anropar ReadXml att läsa in den <xref:System.Data.DataSet>med XML som innehåller element med inga kvalificerande namnområde.</xref:System.Data.DataSet> </xref:System.Data.DataSet> Om du vill läsa okvalificerade element, ange `elementFormDefault` lika med &quot;kvalificerade&quot; i XML-schemat som exemplet nedan visar.      ```   <xsd:schema id=&quot;MyDataSet&quot;       elementFormDefault=&quot;qualified&quot;       targetNamespace=&quot;http://www.tempuri.org/MyDataSet.xsd&quot;       xmlns=&quot;http://www.tempuri.org/MyDataSet.xsd&quot;       xmlns:xsd=&quot;http://www.w3.org/2001/XMLSchema&quot;       xmlns:msdata=&quot;urn:schemas-microsoft-com:xml-msdata&quot;>   </xsd:schema>   ```       <xref:System.Xml.XmlTextReader?displayProperty=fullName>ärver från <xref:System.Xml.XmlReader>.</xref:System.Xml.XmlReader></xref:System.Xml.XmlTextReader?displayProperty=fullName>      > [!NOTE] > Om schemat för din <xref:System.Data.DataSet>innehåller element med samma namn, men med annan typ i samma namnområde, genereras ett undantag vid försök att läsa schema i den <xref:System.Data.DataSet>med ReadXml genom att ange `XmlReadMode.ReadSchema`.</xref:System.Data.DataSet> </xref:System.Data.DataSet> Det här undantaget uppstår inte om du använder .NET Framework version 1.0."
  example:
  - "The following example first creates a simple <xref:System.Data.DataSet> with one <xref:System.Data.DataTable>, two columns, and ten rows. The <xref:System.Data.DataSet> schema and data are written to disk by invoking the <xref:System.Data.DataSet.WriteXml%2A> method. A second <xref:System.Data.DataSet> is created and the ReadXml method is used to fill it with schema and data.  \n  \n [!code-cs[Classic WebData DataSet.ReadXml Example#1](~/add/codesnippet/csharp/m-system.data.dataset.re_2_1.cs)]\n [!code-vb[Classic WebData DataSet.ReadXml Example#1](~/add/codesnippet/visualbasic/m-system.data.dataset.re_2_1.vb)]"
  syntax:
    content: public System.Data.XmlReadMode ReadXml (System.Xml.XmlReader reader);
    parameters:
    - id: reader
      type: System.Xml.XmlReader
      description: "Den <xref:System.Xml.XmlReader>som ska läsas från.</xref:System.Xml.XmlReader>"
    return:
      type: System.Data.XmlReadMode
      description: "Den <xref uid=&quot;langword_csharp_XmlReadMode&quot; name=&quot;XmlReadMode&quot; href=&quot;&quot;> </xref> används för att läsa data."
  overload: System.Data.DataSet.ReadXml*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.ReadXml(System.IO.Stream,System.Data.XmlReadMode)
  id: ReadXml(System.IO.Stream,System.Data.XmlReadMode)
  parent: System.Data.DataSet
  langs:
  - csharp
  name: ReadXml(Stream,XmlReadMode)
  nameWithType: DataSet.ReadXml(Stream,XmlReadMode)
  fullName: System.Data.DataSet.ReadXml(Stream,XmlReadMode)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Läser XML-schemat och data till den <xref href=&quot;System.Data.DataSet&quot;> </xref> med det angivna &lt;xref:System.IO.Stream?displayProperty=fullName&gt; och <xref href=&quot;System.Data.XmlReadMode&quot;> </xref>."
  remarks: "Den <xref:System.Data.DataSet.ReadXml%2A>metoden ger ett sätt att läsa data, eller både data och schema i en <xref:System.Data.DataSet>från en XML-dokument, medan den <xref:System.Data.DataSet.ReadXmlSchema%2A>metoden läser endast schemat.</xref:System.Data.DataSet.ReadXmlSchema%2A> </xref:System.Data.DataSet> </xref:System.Data.DataSet.ReadXml%2A> Om du vill läsa både data och schema, kan du använda en av de `ReadXML` överlagringar som innehåller den `mode` parameter, och ange värdet till `ReadSchema`.       Detsamma gäller för den <xref:System.Data.DataSet.WriteXml%2A>och <xref:System.Data.DataSet.WriteXmlSchema%2A>metoder, respektive.</xref:System.Data.DataSet.WriteXmlSchema%2A> </xref:System.Data.DataSet.WriteXml%2A> Att skriva XML-data, eller både schema- och data från den `DataSet`, använda den `WriteXml` metoden. Om du vill skriva bara schemat, använda den `WriteXmlSchema` metoden.      > [!NOTE] > När du använder ReadXml och du ställer in <xref:System.Data.XmlReadMode>till `Diffgram`, innehållet i målet `DataSet` och ursprungligt `DataSet` kan skilja sig på grund av hur diffgram genereras och bearbetas.</xref:System.Data.XmlReadMode> Mer information om diffgrams finns [DiffGrams](~/add/includes/ajax-current-ext-md.md).      > [!NOTE] > En <xref:System.InvalidOperationException>genereras om en kolumntyp i den `DataRow` att läsa från eller skrivs till implementerar <xref:System.Dynamic.IDynamicMetaObjectProvider>och implementerar inte <xref:System.Xml.Serialization.IXmlSerializable>.</xref:System.Xml.Serialization.IXmlSerializable> </xref:System.Dynamic.IDynamicMetaObjectProvider> </xref:System.InvalidOperationException>       Om en infogad-schemat har angetts används i rad schemat att utöka den befintliga relationella strukturen innan du läser in data. Ett undantagsfel genereras om det finns några konflikter (till exempel i samma kolumn i samma tabell som definierats med olika datatyper).       Om inget infogad schema har angetts utökas relationella strukturen genom härledning efter behov, enligt strukturen i XML-dokumentet. Om schemat kan utökas genom härledning för att visa alla data, utlöses ett undantag.      > [!NOTE] > Den `DataSet` associeras inte ett XML-element med motsvarande `DataColumn` eller `DataTable` när juridiska XML-tecken, till exempel (&quot;_&quot;) är undantagna i den serialiserade XML. Den `DataSet` själva hoppas bara den ogiltiga XML-tecken i XML-elementnamn och därför kan bara använda samma. När giltiga tecken i XML-elementnamn är undantagna ignoreras elementet under bearbetningen.       Om XML-schemat för en <xref:System.Data.DataSet>innehåller `targetNamespace`data inte kan läsas och undantag kan uppstå när du anropar <xref:System.Data.DataSet.ReadXml%2A>att läsa in den <xref:System.Data.DataSet>med XML som innehåller element med inga kvalificerande namnområde.</xref:System.Data.DataSet> </xref:System.Data.DataSet.ReadXml%2A> </xref:System.Data.DataSet> Om du vill läsa okvalificerade element, ange `elementFormDefault` lika med &quot;kvalificerade&quot; i XML-schemat som exemplet nedan visar.      ```   <xsd:schema id=&quot;MyDataSet&quot;       elementFormDefault=&quot;qualified&quot;       targetNamespace=&quot;http://www.tempuri.org/MyDataSet.xsd&quot;       xmlns=&quot;http://www.tempuri.org/MyDataSet.xsd&quot;       xmlns:xsd=&quot;http://www.w3.org/2001/XMLSchema&quot;       xmlns:msdata=&quot;urn:schemas-microsoft-com:xml-msdata&quot;>   </xsd:schema>   ```      > [!NOTE]> Om schemat för din <xref:System.Data.DataSet>innehåller element med samma namn, men med annan typ i samma namnområde, genereras ett undantag vid försök att läsa schema i den <xref:System.Data.DataSet>med <xref:System.Data.DataSet.ReadXml%2A>genom att ange `XmlReadMode.ReadSchema`.</xref:System.Data.DataSet.ReadXml%2A> </xref:System.Data.DataSet> </xref:System.Data.DataSet> Det här undantaget uppstår inte om du använder .NET Framework version 1.0."
  syntax:
    content: public System.Data.XmlReadMode ReadXml (System.IO.Stream stream, System.Data.XmlReadMode mode);
    parameters:
    - id: stream
      type: System.IO.Stream
      description: "Den <xref:System.IO.Stream>som ska läsas från.</xref:System.IO.Stream>"
    - id: mode
      type: System.Data.XmlReadMode
      description: "En av de <xref href=&quot;System.Data.XmlReadMode&quot;> </xref> värden."
    return:
      type: System.Data.XmlReadMode
      description: "Den <xref uid=&quot;langword_csharp_XmlReadMode&quot; name=&quot;XmlReadMode&quot; href=&quot;&quot;> </xref> används för att läsa data."
  overload: System.Data.DataSet.ReadXml*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.ReadXml(System.IO.TextReader,System.Data.XmlReadMode)
  id: ReadXml(System.IO.TextReader,System.Data.XmlReadMode)
  parent: System.Data.DataSet
  langs:
  - csharp
  name: ReadXml(TextReader,XmlReadMode)
  nameWithType: DataSet.ReadXml(TextReader,XmlReadMode)
  fullName: System.Data.DataSet.ReadXml(TextReader,XmlReadMode)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Läser XML-schemat och data till den <xref href=&quot;System.Data.DataSet&quot;> </xref> med det angivna &lt;xref:System.IO.TextReader?displayProperty=fullName&gt; och <xref href=&quot;System.Data.XmlReadMode&quot;> </xref>."
  remarks: "Den <xref:System.Data.DataSet.ReadXml%2A>metoden ger ett sätt att läsa data, eller både data och schema i en <xref:System.Data.DataSet>från en XML-dokument, medan den <xref:System.Data.DataSet.ReadXmlSchema%2A>metoden läser endast schemat.</xref:System.Data.DataSet.ReadXmlSchema%2A> </xref:System.Data.DataSet> </xref:System.Data.DataSet.ReadXml%2A> Om du vill läsa både data och schema, kan du använda en av de `ReadXML` överlagringar som innehåller den `mode` parameter, och ange värdet till `ReadSchema`.       Observera att samma sak gäller för den <xref:System.Data.DataSet.WriteXml%2A>och <xref:System.Data.DataSet.WriteXmlSchema%2A>metoder, respektive.</xref:System.Data.DataSet.WriteXmlSchema%2A> </xref:System.Data.DataSet.WriteXml%2A> Att skriva XML-data, eller både schema- och data från den `DataSet`, använda den `WriteXml` metoden. Om du vill skriva bara schemat, använda den `WriteXmlSchema` metoden.      > [!NOTE] > En <xref:System.InvalidOperationException>genereras om en kolumntyp i den `DataRow` att läsa från eller skrivs till implementerar <xref:System.Dynamic.IDynamicMetaObjectProvider>och implementerar inte <xref:System.Xml.Serialization.IXmlSerializable>.</xref:System.Xml.Serialization.IXmlSerializable> </xref:System.Dynamic.IDynamicMetaObjectProvider> </xref:System.InvalidOperationException>       Om en infogad-schemat har angetts används i rad schemat att utöka den befintliga relationella strukturen innan du läser in data. Ett undantagsfel genereras om det finns några konflikter (till exempel i samma kolumn i samma tabell som definierats med olika datatyper).       Om inget infogad schema har angetts utökas relationella strukturen genom härledning efter behov, enligt strukturen i XML-dokumentet. Om schemat kan utökas genom härledning för att visa alla data, utlöses ett undantag.      > [!NOTE] > Den `DataSet` associeras inte ett XML-element med motsvarande `DataColumn` eller `DataTable` när juridiska XML-tecken, till exempel (&quot;_&quot;) är undantagna i den serialiserade XML. Den `DataSet` själva hoppas bara den ogiltiga XML-tecken i XML-elementnamn och därför kan bara använda samma. När giltiga tecken i XML-elementnamn är undantagna ignoreras elementet under bearbetningen.       Om XML-schemat för en <xref:System.Data.DataSet>innehåller `targetNamespace`data inte kan läsas och undantag kan uppstå när du anropar <xref:System.Data.DataSet.ReadXml%2A>att läsa in den <xref:System.Data.DataSet>med XML som innehåller element med inga kvalificerande namnområde.</xref:System.Data.DataSet> </xref:System.Data.DataSet.ReadXml%2A> </xref:System.Data.DataSet> Om du vill läsa okvalificerade element, ange `elementFormDefault` lika med &quot;kvalificerade&quot; i XML-schemat som exemplet nedan visar.      ```   <xsd:schema id=&quot;MyDataSet&quot;       elementFormDefault=&quot;qualified&quot;       targetNamespace=&quot;http://www.tempuri.org/MyDataSet.xsd&quot;       xmlns=&quot;http://www.tempuri.org/MyDataSet.xsd&quot;       xmlns:xsd=&quot;http://www.w3.org/2001/XMLSchema&quot;       xmlns:msdata=&quot;urn:schemas-microsoft-com:xml-msdata&quot;>   </xsd:schema>   ```      > [!NOTE]> Om schemat för din <xref:System.Data.DataSet>innehåller element med samma namn, men med annan typ i samma namnområde, genereras ett undantag vid försök att läsa schema i den <xref:System.Data.DataSet>med <xref:System.Data.DataSet.ReadXml%2A>genom att ange `XmlReadMode.ReadSchema`.</xref:System.Data.DataSet.ReadXml%2A> </xref:System.Data.DataSet> </xref:System.Data.DataSet> Det här undantaget uppstår inte om du använder .NET Framework version 1.0."
  syntax:
    content: public System.Data.XmlReadMode ReadXml (System.IO.TextReader reader, System.Data.XmlReadMode mode);
    parameters:
    - id: reader
      type: System.IO.TextReader
      description: "Den <xref:System.IO.TextReader>som ska läsas från.</xref:System.IO.TextReader>"
    - id: mode
      type: System.Data.XmlReadMode
      description: "En av de <xref href=&quot;System.Data.XmlReadMode&quot;> </xref> värden."
    return:
      type: System.Data.XmlReadMode
      description: "Den <xref uid=&quot;langword_csharp_XmlReadMode&quot; name=&quot;XmlReadMode&quot; href=&quot;&quot;> </xref> används för att läsa data."
  overload: System.Data.DataSet.ReadXml*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.ReadXml(System.String,System.Data.XmlReadMode)
  id: ReadXml(System.String,System.Data.XmlReadMode)
  parent: System.Data.DataSet
  langs:
  - csharp
  name: ReadXml(String,XmlReadMode)
  nameWithType: DataSet.ReadXml(String,XmlReadMode)
  fullName: System.Data.DataSet.ReadXml(String,XmlReadMode)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Läser XML-schemat och data till den <xref href=&quot;System.Data.DataSet&quot;> </xref> med hjälp av den angivna filen och <xref href=&quot;System.Data.XmlReadMode&quot;> </xref>."
  remarks: "Den <xref:System.Data.DataSet.ReadXml%2A>metoden ger ett sätt att läsa data, eller både data och schema i en <xref:System.Data.DataSet>från en XML-dokument, medan den <xref:System.Data.DataSet.ReadXmlSchema%2A>metoden läser endast schemat.</xref:System.Data.DataSet.ReadXmlSchema%2A> </xref:System.Data.DataSet> </xref:System.Data.DataSet.ReadXml%2A> Om du vill läsa både data och schema, kan du använda en av de `ReadXML` överlagringar som innehåller den `mode` parameter, och ange värdet till `ReadSchema`.       Observera att samma sak gäller för den <xref:System.Data.DataSet.WriteXml%2A>och <xref:System.Data.DataSet.WriteXmlSchema%2A>metoder, respektive.</xref:System.Data.DataSet.WriteXmlSchema%2A> </xref:System.Data.DataSet.WriteXml%2A> Att skriva XML-data, eller både schema- och data från den `DataSet`, använda den `WriteXml` metoden. Om du vill skriva bara schemat, använda den `WriteXmlSchema` metoden.      > [!NOTE] > En <xref:System.InvalidOperationException>genereras om en kolumntyp i den `DataRow` att läsa från eller skrivs till implementerar <xref:System.Dynamic.IDynamicMetaObjectProvider>och implementerar inte <xref:System.Xml.Serialization.IXmlSerializable>.</xref:System.Xml.Serialization.IXmlSerializable> </xref:System.Dynamic.IDynamicMetaObjectProvider> </xref:System.InvalidOperationException>       Om en infogad-schemat har angetts används i rad schemat att utöka den befintliga relationella strukturen innan du läser in data. Ett undantagsfel genereras om det finns några konflikter (till exempel i samma kolumn i samma tabell som definierats med olika datatyper).       Om inget infogad schema har angetts utökas relationella strukturen genom härledning efter behov, enligt strukturen i XML-dokumentet. Om schemat kan utökas genom härledning för att visa alla data, utlöses ett undantag.      > [!NOTE] > Den `DataSet` associeras inte ett XML-element med motsvarande `DataColumn` eller `DataTable` när juridiska XML-tecken, till exempel (&quot;_&quot;) är undantagna i den serialiserade XML. Den `DataSet` själva hoppas bara den ogiltiga XML-tecken i XML-elementnamn och därför kan bara använda samma. När giltiga tecken i XML-elementnamn är undantagna ignoreras elementet under bearbetningen.       Om XML-schemat för en <xref:System.Data.DataSet>innehåller en `targetNamespace`data inte kan läsas och undantag kan uppstå när du anropar <xref:System.Data.DataSet.ReadXml%2A>att läsa in den <xref:System.Data.DataSet>med XML som innehåller element med inga kvalificerande namnområde.</xref:System.Data.DataSet> </xref:System.Data.DataSet.ReadXml%2A> </xref:System.Data.DataSet> Om du vill läsa okvalificerade element, ange `elementFormDefault` lika med &quot;kvalificerade&quot; i XML-schemat som exemplet nedan visar.      ```   <xsd:schema id=&quot;MyDataSet&quot;       elementFormDefault=&quot;qualified&quot;       targetNamespace=&quot;http://www.tempuri.org/MyDataSet.xsd&quot;       xmlns=&quot;http://www.tempuri.org/MyDataSet.xsd&quot;       xmlns:xsd=&quot;http://www.w3.org/2001/XMLSchema&quot;       xmlns:msdata=&quot;urn:schemas-microsoft-com:xml-msdata&quot;>   </xsd:schema>   ```      > [!NOTE]> Om schemat för din <xref:System.Data.DataSet>innehåller element med samma namn, men med annan typ i samma namnområde, genereras ett undantag vid försök att läsa schema i den <xref:System.Data.DataSet>med <xref:System.Data.DataSet.ReadXml%2A>genom att ange `XmlReadMode.ReadSchema`.</xref:System.Data.DataSet.ReadXml%2A> </xref:System.Data.DataSet> </xref:System.Data.DataSet> Det här undantaget uppstår inte om du använder .NET Framework version 1.0."
  syntax:
    content: public System.Data.XmlReadMode ReadXml (string fileName, System.Data.XmlReadMode mode);
    parameters:
    - id: fileName
      type: System.String
      description: "Filnamnet (inklusive sökväg) som ska läsas från."
    - id: mode
      type: System.Data.XmlReadMode
      description: "En av de <xref href=&quot;System.Data.XmlReadMode&quot;> </xref> värden."
    return:
      type: System.Data.XmlReadMode
      description: "Den <xref uid=&quot;langword_csharp_XmlReadMode&quot; name=&quot;XmlReadMode&quot; href=&quot;&quot;> </xref> används för att läsa data."
  overload: System.Data.DataSet.ReadXml*
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "<xref href=&quot;System.Security.Permissions.FileIOPermission&quot;></xref>är inte inställd på <xref href=&quot;System.Security.Permissions.FileIOPermissionAccess&quot;> </xref>."
  platform:
  - net462
- uid: System.Data.DataSet.ReadXml(System.Xml.XmlReader,System.Data.XmlReadMode)
  id: ReadXml(System.Xml.XmlReader,System.Data.XmlReadMode)
  parent: System.Data.DataSet
  langs:
  - csharp
  name: ReadXml(XmlReader,XmlReadMode)
  nameWithType: DataSet.ReadXml(XmlReader,XmlReadMode)
  fullName: System.Data.DataSet.ReadXml(XmlReader,XmlReadMode)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Läser XML-schemat och data till den <xref href=&quot;System.Data.DataSet&quot;> </xref> med det angivna &lt;xref:System.Xml.XmlReader?displayProperty=fullName&gt; och <xref href=&quot;System.Data.XmlReadMode&quot;> </xref>."
  remarks: "Den <xref:System.Data.DataSet.ReadXml%2A>metoden ger ett sätt att läsa data, eller både data och schema i en <xref:System.Data.DataSet>från en XML-dokument, medan den <xref:System.Data.DataSet.ReadXmlSchema%2A>metoden läser endast schemat.</xref:System.Data.DataSet.ReadXmlSchema%2A> </xref:System.Data.DataSet> </xref:System.Data.DataSet.ReadXml%2A> Om du vill läsa både data och schema, kan du använda en av de `ReadXML` överlagringar som innehåller den `mode` parameter, och ange värdet till `ReadSchema`.       Observera att samma sak gäller för den <xref:System.Data.DataSet.WriteXml%2A>och <xref:System.Data.DataSet.WriteXmlSchema%2A>metoder, respektive.</xref:System.Data.DataSet.WriteXmlSchema%2A> </xref:System.Data.DataSet.WriteXml%2A> Att skriva XML-data, eller både schema- och data från den `DataSet`, använda den `WriteXml` metoden. Om du vill skriva bara schemat, använda den `WriteXmlSchema` metoden.      > [!NOTE] > En <xref:System.InvalidOperationException>genereras om en kolumntyp i den `DataRow` att läsa från eller skrivs till implementerar <xref:System.Dynamic.IDynamicMetaObjectProvider>och implementerar inte <xref:System.Xml.Serialization.IXmlSerializable>.</xref:System.Xml.Serialization.IXmlSerializable> </xref:System.Dynamic.IDynamicMetaObjectProvider> </xref:System.InvalidOperationException>       Om en infogad-schemat har angetts används i rad schemat att utöka den befintliga relationella strukturen innan du läser in data. Ett undantagsfel genereras om det finns några konflikter (till exempel i samma kolumn i samma tabell som definierats med olika datatyper).       Om inget infogad schema har angetts utökas relationella strukturen genom härledning efter behov, enligt strukturen i XML-dokumentet. Om schemat kan utökas genom härledning för att visa alla data, utlöses ett undantag.      > [!NOTE] > Den `DataSet` associeras inte ett XML-element med motsvarande `DataColumn` eller `DataTable` när juridiska XML-tecken, till exempel (&quot;_&quot;) är undantagna i den serialiserade XML. Den `DataSet` själva hoppas bara den ogiltiga XML-tecken i XML-elementnamn och därför kan bara använda samma. När giltiga tecken i XML-elementnamn är undantagna ignoreras elementet under bearbetningen.       Om XML-schemat för en <xref:System.Data.DataSet>innehåller en `targetNamespace`data inte kan läsas och undantag kan uppstå när du anropar <xref:System.Data.DataSet.ReadXml%2A>att läsa in den <xref:System.Data.DataSet>med XML som innehåller element med inga kvalificerande namnområde.</xref:System.Data.DataSet> </xref:System.Data.DataSet.ReadXml%2A> </xref:System.Data.DataSet> Om du vill läsa okvalificerade element, ange `elementFormDefault` lika med &quot;kvalificerade&quot; i XML-schemat som exemplet nedan visar.      ```   <xsd:schema id=&quot;MyDataSet&quot;       elementFormDefault=&quot;qualified&quot;       targetNamespace=&quot;http://www.tempuri.org/MyDataSet.xsd&quot;       xmlns=&quot;http://www.tempuri.org/MyDataSet.xsd&quot;       xmlns:xsd=&quot;http://www.w3.org/2001/XMLSchema&quot;       xmlns:msdata=&quot;urn:schemas-microsoft-com:xml-msdata&quot;>   </xsd:schema>   ```      > [!NOTE]> Om schemat för din <xref:System.Data.DataSet>innehåller element med samma namn, men med annan typ i samma namnområde, genereras ett undantag vid försök att läsa schema i den <xref:System.Data.DataSet>med <xref:System.Data.DataSet.ReadXml%2A>genom att ange `XmlReadMode.ReadSchema`.</xref:System.Data.DataSet.ReadXml%2A> </xref:System.Data.DataSet> </xref:System.Data.DataSet> Det här undantaget uppstår inte om du använder .NET Framework version 1.0."
  syntax:
    content: public System.Data.XmlReadMode ReadXml (System.Xml.XmlReader reader, System.Data.XmlReadMode mode);
    parameters:
    - id: reader
      type: System.Xml.XmlReader
      description: "Den <xref:System.Xml.XmlReader>som ska läsas från.</xref:System.Xml.XmlReader>"
    - id: mode
      type: System.Data.XmlReadMode
      description: "En av de <xref href=&quot;System.Data.XmlReadMode&quot;> </xref> värden."
    return:
      type: System.Data.XmlReadMode
      description: "Den <xref uid=&quot;langword_csharp_XmlReadMode&quot; name=&quot;XmlReadMode&quot; href=&quot;&quot;> </xref> används för att läsa data."
  overload: System.Data.DataSet.ReadXml*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.ReadXmlSchema(System.IO.Stream)
  id: ReadXmlSchema(System.IO.Stream)
  parent: System.Data.DataSet
  langs:
  - csharp
  name: ReadXmlSchema(Stream)
  nameWithType: DataSet.ReadXmlSchema(Stream)
  fullName: System.Data.DataSet.ReadXmlSchema(Stream)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Läser XML-schemat från det angivna <xref:System.IO.Stream>i den <xref href=&quot;System.Data.DataSet&quot;> </xref>.</xref:System.IO.Stream>"
  remarks: "Använd <xref:System.Data.DataSet.ReadXmlSchema%2A>metoden för att skapa schemat för en <xref:System.Data.DataSet>.</xref:System.Data.DataSet> </xref:System.Data.DataSet.ReadXmlSchema%2A> Schemat innehåller definitioner av tabell, relation och begränsning. Om du vill skriva ett schema till en XML-dokument, använda den <xref:System.Data.DataSet.WriteXmlSchema%2A>metoden.</xref:System.Data.DataSet.WriteXmlSchema%2A>       XML-schemat skrivs med hjälp av XSD-standard.      > [!NOTE] > Data kan skadas om msdata:DataType och xs:type-typer inte matchar. Inget undantag genereras.       <xref:System.Data.DataSet.ReadXmlSchema%2A>Metoden anropas vanligtvis innan du anropar <xref:System.Data.DataSet.ReadXml%2A>metoden som används för att fylla i <xref:System.Data.DataSet>.</xref:System.Data.DataSet> </xref:System.Data.DataSet.ReadXml%2A> </xref:System.Data.DataSet.ReadXmlSchema%2A>       Klasser som härleds från den <xref:System.IO.Stream>klassen innehåller <xref:System.IO.BufferedStream>, <xref:System.IO.FileStream>, <xref:System.IO.MemoryStream>, och <xref:System.Net.Sockets.NetworkStream>.</xref:System.Net.Sockets.NetworkStream> </xref:System.IO.MemoryStream> </xref:System.IO.FileStream> </xref:System.IO.BufferedStream> </xref:System.IO.Stream>      > [!NOTE] > Om schemat för din <xref:System.Data.DataSet>innehåller element med samma namn, men med annan typ i samma namnområde, genereras ett undantag är när du försöker läsa in schemat i <xref:System.Data.DataSet>med <xref:System.Data.DataSet.ReadXmlSchema%2A>.</xref:System.Data.DataSet.ReadXmlSchema%2A> </xref:System.Data.DataSet> </xref:System.Data.DataSet> Det här undantaget uppstår inte om du använder .NET Framework version 1.0."
  example:
  - "The following example creates a <xref:System.IO.FileStream> object to read an XML schema with, and invokes the <xref:System.Data.DataSet.ReadXmlSchema%2A> method with the object.  \n  \n [!code-cs[Classic WebData DataSet.ReadXmlSchema1 Example#1](~/add/codesnippet/csharp/m-system.data.dataset.re_5_1.cs)]\n [!code-vb[Classic WebData DataSet.ReadXmlSchema1 Example#1](~/add/codesnippet/visualbasic/m-system.data.dataset.re_5_1.vb)]"
  syntax:
    content: public void ReadXmlSchema (System.IO.Stream stream);
    parameters:
    - id: stream
      type: System.IO.Stream
      description: "Den <xref:System.IO.Stream>som ska läsas från.</xref:System.IO.Stream>"
  overload: System.Data.DataSet.ReadXmlSchema*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.ReadXmlSchema(System.IO.TextReader)
  id: ReadXmlSchema(System.IO.TextReader)
  parent: System.Data.DataSet
  langs:
  - csharp
  name: ReadXmlSchema(TextReader)
  nameWithType: DataSet.ReadXmlSchema(TextReader)
  fullName: System.Data.DataSet.ReadXmlSchema(TextReader)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Läser XML-schemat från det angivna <xref:System.IO.TextReader>i den <xref href=&quot;System.Data.DataSet&quot;> </xref>.</xref:System.IO.TextReader>"
  remarks: "Använd <xref:System.Data.DataSet.ReadXmlSchema%2A>metoden för att skapa schemat för en <xref:System.Data.DataSet>.</xref:System.Data.DataSet> </xref:System.Data.DataSet.ReadXmlSchema%2A> Schemat innehåller definitioner av tabell, relation och begränsning. Om du vill skriva ett schema till en XML-dokument, använda den <xref:System.Data.DataSet.WriteXmlSchema%2A>metoden.</xref:System.Data.DataSet.WriteXmlSchema%2A>       XML-schemat skrivs med hjälp av XSD-standard.      > [!NOTE] > Data kan skadas om msdata:DataType och xs:type-typer inte matchar. Inget undantag genereras.       <xref:System.Data.DataSet.ReadXmlSchema%2A>Metoden anropas vanligtvis innan du anropar <xref:System.Data.DataSet.ReadXml%2A>metoden som används för att fylla i <xref:System.Data.DataSet>.</xref:System.Data.DataSet> </xref:System.Data.DataSet.ReadXml%2A> </xref:System.Data.DataSet.ReadXmlSchema%2A>       Klasser som ärver från den <xref:System.IO.TextReader>klassen innehåller den <xref:System.IO.StreamReader>och <xref:System.IO.StringReader>klasser.</xref:System.IO.StringReader> </xref:System.IO.StreamReader> </xref:System.IO.TextReader>      > [!NOTE] > Om schemat för din <xref:System.Data.DataSet>innehåller element med samma namn, men med annan typ i samma namnområde, genereras ett undantag är när du försöker läsa in schemat i <xref:System.Data.DataSet>med <xref:System.Data.DataSet.ReadXmlSchema%2A>.</xref:System.Data.DataSet.ReadXmlSchema%2A> </xref:System.Data.DataSet> </xref:System.Data.DataSet> Det här undantaget uppstår inte om du använder .NET Framework version 1.0."
  example:
  - "The following example creates a <xref:System.IO.StreamReader> object to read a schema with, and invokes the <xref:System.Data.DataSet.ReadXmlSchema%2A> method with the object.  \n  \n [!code-vb[Classic WebData DataSet.ReadXmlSchema2 Example#1](~/add/codesnippet/visualbasic/m-system.data.dataset.re_8_1.vb)]\n [!code-cs[Classic WebData DataSet.ReadXmlSchema2 Example#1](~/add/codesnippet/csharp/m-system.data.dataset.re_8_1.cs)]"
  syntax:
    content: public void ReadXmlSchema (System.IO.TextReader reader);
    parameters:
    - id: reader
      type: System.IO.TextReader
      description: "Den <xref:System.IO.TextReader>som ska läsas från.</xref:System.IO.TextReader>"
  overload: System.Data.DataSet.ReadXmlSchema*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.ReadXmlSchema(System.String)
  id: ReadXmlSchema(System.String)
  parent: System.Data.DataSet
  langs:
  - csharp
  name: ReadXmlSchema(String)
  nameWithType: DataSet.ReadXmlSchema(String)
  fullName: System.Data.DataSet.ReadXmlSchema(String)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Läser XML-schemat från den angivna filen i den <xref href=&quot;System.Data.DataSet&quot;> </xref>."
  remarks: "Använd <xref:System.Data.DataSet.ReadXmlSchema%2A>metoden för att skapa schemat för en <xref:System.Data.DataSet>.</xref:System.Data.DataSet> </xref:System.Data.DataSet.ReadXmlSchema%2A> Schemat innehåller definitioner av tabell, relation och begränsning. Om du vill skriva ett schema till en XML-dokument, använda den <xref:System.Data.DataSet.WriteXmlSchema%2A>metoden.</xref:System.Data.DataSet.WriteXmlSchema%2A>       XML-schemat skrivs med hjälp av XSD-standard.      > [!NOTE] > Data kan skadas om msdata:DataType och xs:type-typer inte matchar. Inget undantag genereras.       <xref:System.Data.DataSet.ReadXmlSchema%2A>Metoden anropas vanligtvis innan du anropar <xref:System.Data.DataSet.ReadXml%2A>metoden som används för att fylla i <xref:System.Data.DataSet>.</xref:System.Data.DataSet> </xref:System.Data.DataSet.ReadXml%2A> </xref:System.Data.DataSet.ReadXmlSchema%2A>      > [!NOTE] > Om schemat för din <xref:System.Data.DataSet>innehåller element med samma namn, men med annan typ i samma namnområde, genereras ett undantag vid försök att läsa in schemat i <xref:System.Data.DataSet>med <xref:System.Data.DataSet.ReadXmlSchema%2A>.</xref:System.Data.DataSet.ReadXmlSchema%2A> </xref:System.Data.DataSet> </xref:System.Data.DataSet> Det här undantaget uppstår inte om du använder .NET Framework version 1.0."
  example:
  - >-
    [!code-cs[Classic WebData DataSet.ReadXmlSchema3 Example#1](~/add/codesnippet/csharp/m-system.data.dataset.re_0_1.cs)]
     [!code-vb[Classic WebData DataSet.ReadXmlSchema3 Example#1](~/add/codesnippet/visualbasic/m-system.data.dataset.re_0_1.vb)]
  syntax:
    content: public void ReadXmlSchema (string fileName);
    parameters:
    - id: fileName
      type: System.String
      description: "Filen namn (inklusive sökväg) som ska läsas från."
  overload: System.Data.DataSet.ReadXmlSchema*
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "<xref href=&quot;System.Security.Permissions.FileIOPermission&quot;></xref>är inte inställd på <xref href=&quot;System.Security.Permissions.FileIOPermissionAccess&quot;> </xref>."
  platform:
  - net462
- uid: System.Data.DataSet.ReadXmlSchema(System.Xml.XmlReader)
  id: ReadXmlSchema(System.Xml.XmlReader)
  parent: System.Data.DataSet
  langs:
  - csharp
  name: ReadXmlSchema(XmlReader)
  nameWithType: DataSet.ReadXmlSchema(XmlReader)
  fullName: System.Data.DataSet.ReadXmlSchema(XmlReader)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Läser XML-schemat från det angivna <xref:System.Xml.XmlReader>i den <xref href=&quot;System.Data.DataSet&quot;> </xref>.</xref:System.Xml.XmlReader>"
  remarks: "Använda ReadXmlSchema-metoden för att skapa schemat för en <xref:System.Data.DataSet>.</xref:System.Data.DataSet> Schemat innehåller definitioner av tabell, relation och begränsning.       XML-schemat skrivs med hjälp av XSD-standard.      > [!NOTE] > Data kan skadas om msdata:DataType och xs:type-typer inte matchar. Inget undantag genereras.       ReadXmlSchema-metoden anropas vanligtvis innan du anropar <xref:System.Data.DataSet.ReadXml%2A>metoden som används för att fylla i <xref:System.Data.DataSet>.</xref:System.Data.DataSet> </xref:System.Data.DataSet.ReadXml%2A>       Den <xref:System.Xml.XmlReader?displayProperty=fullName>klassen är abstrakt.</xref:System.Xml.XmlReader?displayProperty=fullName> En klass som ärver från den `XmlReader` är <xref:System.Xml.XmlTextReader?displayProperty=fullName>klass.</xref:System.Xml.XmlTextReader?displayProperty=fullName>      > [!NOTE] > Om schemat för din <xref:System.Data.DataSet>innehåller element med samma namn, men med annan typ i samma namnområde, genereras ett undantag är när du försöker läsa schema i den <xref:System.Data.DataSet>med ReadXmlSchema.</xref:System.Data.DataSet> </xref:System.Data.DataSet> Det här undantaget uppstår inte om du använder .NET Framework version 1.0."
  example:
  - "The following example creates a new <xref:System.Data.DataSet> and <xref:System.IO.FileStream?displayProperty=fullName> object. The <xref:System.IO.FileStream> object, created with a file path and file name, is used to create an <xref:System.Xml.XmlTextReader?displayProperty=fullName> that is passed as an argument to the ReadXmlSchema method.  \n  \n [!code-vb[Classic WebData DataSet.ReadXmlSchema Example#1](~/add/codesnippet/visualbasic/m-system.data.dataset.re_4_1.vb)]\n [!code-cs[Classic WebData DataSet.ReadXmlSchema Example#1](~/add/codesnippet/csharp/m-system.data.dataset.re_4_1.cs)]"
  syntax:
    content: public void ReadXmlSchema (System.Xml.XmlReader reader);
    parameters:
    - id: reader
      type: System.Xml.XmlReader
      description: "Den <xref:System.Xml.XmlReader>som ska läsas från.</xref:System.Xml.XmlReader>"
  overload: System.Data.DataSet.ReadXmlSchema*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.ReadXmlSerializable(System.Xml.XmlReader)
  id: ReadXmlSerializable(System.Xml.XmlReader)
  parent: System.Data.DataSet
  langs:
  - csharp
  name: ReadXmlSerializable(XmlReader)
  nameWithType: DataSet.ReadXmlSerializable(XmlReader)
  fullName: System.Data.DataSet.ReadXmlSerializable(XmlReader)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Ignorerar attribut och returnerar en tom datauppsättning."
  syntax:
    content: protected virtual void ReadXmlSerializable (System.Xml.XmlReader reader);
    parameters:
    - id: reader
      type: System.Xml.XmlReader
      description: "Den angivna XML-läsaren."
  overload: System.Data.DataSet.ReadXmlSerializable*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.RejectChanges
  id: RejectChanges
  parent: System.Data.DataSet
  langs:
  - csharp
  name: RejectChanges()
  nameWithType: DataSet.RejectChanges()
  fullName: System.Data.DataSet.RejectChanges()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Återställer alla ändringar som gjorts i den <xref href=&quot;System.Data.DataSet&quot;> </xref> sedan den skapades eller sedan du senast &lt;xref:System.Data.DataSet.AcceptChanges%2A?displayProperty=fullName&gt; anropades."
  remarks: "Anropa RejectChanges för att anropa <xref:System.Data.DataTable.RejectChanges%2A?displayProperty=fullName>metoden på alla <xref:System.Data.DataTable>objekt som finns i <xref:System.Data.DataSet>.</xref:System.Data.DataSet> </xref:System.Data.DataTable> </xref:System.Data.DataTable.RejectChanges%2A?displayProperty=fullName>       <xref:System.Data.DataRow>objekt som innehåller den <xref:System.Data.DataSet>kan varje anges i redigeringsläge genom att aktivera den <xref:System.Data.DataRow.BeginEdit%2A?displayProperty=fullName>metoden.</xref:System.Data.DataRow.BeginEdit%2A?displayProperty=fullName> </xref:System.Data.DataSet></xref:System.Data.DataRow> Efter att ha åberopat den <xref:System.Data.DataRow.EndEdit%2A?displayProperty=fullName>metoden ändringar kan avvisas genom att anropa den <xref:System.Data.DataTable.RejectChanges%2A?displayProperty=fullName>på den <xref:System.Data.DataTable>som den <xref:System.Data.DataRow>objekt tillhöra.</xref:System.Data.DataRow> </xref:System.Data.DataTable> </xref:System.Data.DataTable.RejectChanges%2A?displayProperty=fullName> </xref:System.Data.DataRow.EndEdit%2A?displayProperty=fullName>       När den <xref:System.Data.DataTable.RejectChanges%2A?displayProperty=fullName>metoden anropas, några rader i redigeringsläge Avbryt sina ändringar.</xref:System.Data.DataTable.RejectChanges%2A?displayProperty=fullName> Nya rader tas bort. Ändrade och borttagna rader gå tillbaka till det ursprungliga tillståndet (`DataRowState.Unchanged`).       AcceptChanges och RejectChanges gäller endast för <xref:System.Data.DataRow>relaterade ändringar (det vill säga `Add`, `Remove`, `Delete`, och `Modify`).</xref:System.Data.DataRow> De gäller inte schemat eller strukturella förändringar."
  example:
  - "The following example shows a class derived from the <xref:System.Data.DataSet> class. The RejectChanges event is invoked from within a function.  \n  \n [!code-cs[Classic WebData DataSet.RejectChanges Example#1](~/add/codesnippet/csharp/m-system.data.dataset.re_6_1.cs)]\n [!code-vb[Classic WebData DataSet.RejectChanges Example#1](~/add/codesnippet/visualbasic/m-system.data.dataset.re_6_1.vb)]"
  syntax:
    content: public virtual void RejectChanges ();
    parameters: []
  overload: System.Data.DataSet.RejectChanges*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.Relations
  id: Relations
  parent: System.Data.DataSet
  langs:
  - csharp
  name: Relations
  nameWithType: DataSet.Relations
  fullName: System.Data.DataSet.Relations
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Hämta insamling av relationer som länka tabeller och Tillåt navigering från överordnade tabeller till underordnade tabeller."
  remarks: ''
  example:
  - "The following example prints the column name of all child tables through the Relations property.  \n  \n [!code-vb[Classic WebData DataSet.Relations Example#1](~/add/codesnippet/visualbasic/p-system.data.dataset.re_1.vb)]"
  syntax:
    content: public System.Data.DataRelationCollection Relations { get; }
    return:
      type: System.Data.DataRelationCollection
      description: "En <xref href=&quot;System.Data.DataRelationCollection&quot;> </xref> som innehåller en samling <xref href=&quot;System.Data.DataRelation&quot;> </xref> objekt. En tom samling returneras om det finns ingen <xref href=&quot;System.Data.DataRelation&quot;> </xref> objekten finns."
  overload: System.Data.DataSet.Relations*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.RemotingFormat
  id: RemotingFormat
  parent: System.Data.DataSet
  langs:
  - csharp
  name: RemotingFormat
  nameWithType: DataSet.RemotingFormat
  fullName: System.Data.DataSet.RemotingFormat
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Hämtar eller anger en <xref href=&quot;System.Data.SerializationFormat&quot;> </xref> för den <xref href=&quot;System.Data.DataSet&quot;> </xref> används under fjärrkommunikation."
  syntax:
    content: public System.Data.SerializationFormat RemotingFormat { get; set; }
    return:
      type: System.Data.SerializationFormat
      description: "A <xref href=&quot;System.Data.SerializationFormat&quot;></xref> object."
  overload: System.Data.DataSet.RemotingFormat*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.Reset
  id: Reset
  parent: System.Data.DataSet
  langs:
  - csharp
  name: Reset()
  nameWithType: DataSet.Reset()
  fullName: System.Data.DataSet.Reset()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Rensar alla tabeller och tar bort alla relationer främmande begränsningar och tabeller från den <xref href=&quot;System.Data.DataSet&quot;> </xref>. Underklasser ska åsidosätta Återställ om du vill återställa en <xref href=&quot;System.Data.DataSet&quot;> </xref> till det ursprungliga tillståndet."
  syntax:
    content: public virtual void Reset ();
    parameters: []
  overload: System.Data.DataSet.Reset*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.SchemaSerializationMode
  id: SchemaSerializationMode
  parent: System.Data.DataSet
  langs:
  - csharp
  name: SchemaSerializationMode
  nameWithType: DataSet.SchemaSerializationMode
  fullName: System.Data.DataSet.SchemaSerializationMode
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Gets or sets a <xref href=&quot;System.Data.SchemaSerializationMode&quot;></xref> for a <xref href=&quot;System.Data.DataSet&quot;></xref>."
  remarks: "En <xref:System.Data.DataSet>Serialiserar dess schema och instans data som standard i webbtjänster och scenarier för fjärrkommunikation.</xref:System.Data.DataSet> Ange egenskapen SchemaSerializationMode för en skrivna `DataSet` till <xref:System.Data.SchemaSerializationMode>orsakar schemainformation som ska undantas från serialisering nyttolasten.</xref:System.Data.SchemaSerializationMode>       <xref:System.Data.SchemaSerializationMode>stöds endast för en skrivna `DataSet`.</xref:System.Data.SchemaSerializationMode> För en otypat `DataSet` den här egenskapen kan endast anges till <xref:System.Data.SchemaSerializationMode>.</xref:System.Data.SchemaSerializationMode>       <xref:System.Data.SchemaSerializationMode>bör endast användas i fall där schemainformationen för den underliggande skrev `DataTables`, `DataRelations` och `Constraints` har inte ändrats.</xref:System.Data.SchemaSerializationMode> Om ändringar har ska uppstod, fullständig schemainformation serialiseras med <xref:System.Data.SchemaSerializationMode>.</xref:System.Data.SchemaSerializationMode>       <xref:System.Data.SchemaSerializationMode>stöds i version 2.0 av .NET Framework eller senare.</xref:System.Data.SchemaSerializationMode>       När <xref:System.Data.SchemaSerializationMode>anges endast de översta nivå runtime egenskaperna finns på den <xref:System.Data.DataSet>serialiseras.</xref:System.Data.DataSet> </xref:System.Data.SchemaSerializationMode> Dessutom kan serialiserade de endast om de råkar befinna sig från standardvärdena. Ingen av de `Tables`, `Relations` eller `Constraints` serialiseras. Serialiserade runtime egenskaper innehåller <xref:System.Data.DataSet.DataSetName%2A>, <xref:System.Data.DataSet.Namespace%2A>, <xref:System.Data.DataSet.Prefix%2A>, <xref:System.Data.DataSet.Locale%2A>, <xref:System.Data.DataSet.EnforceConstraints%2A>, och <xref:System.Data.DataSet.CaseSensitive%2A>.</xref:System.Data.DataSet.CaseSensitive%2A> </xref:System.Data.DataSet.EnforceConstraints%2A> </xref:System.Data.DataSet.Locale%2A> </xref:System.Data.DataSet.Prefix%2A> </xref:System.Data.DataSet.Namespace%2A> </xref:System.Data.DataSet.DataSetName%2A> De här egenskaperna serialiseras om du vill säkerställa att övergripande runtime informationens integritet bevaras."
  syntax:
    content: public virtual System.Data.SchemaSerializationMode SchemaSerializationMode { get; set; }
    return:
      type: System.Data.SchemaSerializationMode
      description: "Gets or sets a <xref href=&quot;System.Data.SchemaSerializationMode&quot;></xref> for a <xref href=&quot;System.Data.DataSet&quot;></xref>."
  overload: System.Data.DataSet.SchemaSerializationMode*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.ShouldSerializeRelations
  id: ShouldSerializeRelations
  parent: System.Data.DataSet
  langs:
  - csharp
  name: ShouldSerializeRelations()
  nameWithType: DataSet.ShouldSerializeRelations()
  fullName: System.Data.DataSet.ShouldSerializeRelations()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Hämtar ett värde som anger om <xref:System.Data.DataSet.Relations*>egenskapen ska sparas.</xref:System.Data.DataSet.Relations*>"
  remarks: "Du använder vanligtvis den här metoden om du antingen skapar en designer för den <xref:System.Data.DataSet>, eller skapa en egen kontroll införliva <xref:System.Data.DataSet>.</xref:System.Data.DataSet> </xref:System.Data.DataSet>"
  example:
  - "The following examples show a class derived from the <xref:System.Data.DataSet> class. The <xref:System.Data.DataSet.Reset%2A> and ShouldSerializeRelations methods are invoked from within functions in the derived class.  \n  \n [!code-cs[Classic WebData DataSet.ShouldSerializeRelations Example#1](~/add/codesnippet/csharp/m-system.data.dataset.sh_3_1.cs)]\n [!code-vb[Classic WebData DataSet.ShouldSerializeRelations Example#1](~/add/codesnippet/visualbasic/m-system.data.dataset.sh_3_1.vb)]"
  syntax:
    content: protected virtual bool ShouldSerializeRelations ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Om egenskapsvärdet har ändrats från sitt standardvärde. Annars <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Data.DataSet.ShouldSerializeRelations*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.ShouldSerializeTables
  id: ShouldSerializeTables
  parent: System.Data.DataSet
  langs:
  - csharp
  name: ShouldSerializeTables()
  nameWithType: DataSet.ShouldSerializeTables()
  fullName: System.Data.DataSet.ShouldSerializeTables()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Hämtar ett värde som anger om <xref:System.Data.DataSet.Tables*>egenskapen ska sparas.</xref:System.Data.DataSet.Tables*>"
  remarks: "Den här metoden använder vanligtvis bara om du antingen skapar en designer för den <xref:System.Data.DataSet>, eller skapa en egen kontroll införliva <xref:System.Data.DataSet>.</xref:System.Data.DataSet> </xref:System.Data.DataSet>"
  example:
  - "The following example shows a class derived from the <xref:System.Data.DataSet> class. The ShouldSerializeTables method is called from within functions in the derived class.  \n  \n [!code-vb[Classic WebData DataSet.ShouldSerializeTables Example#1](~/add/codesnippet/visualbasic/m-system.data.dataset.sh_2_1.vb)]\n [!code-cs[Classic WebData DataSet.ShouldSerializeTables Example#1](~/add/codesnippet/csharp/m-system.data.dataset.sh_2_1.cs)]"
  syntax:
    content: protected virtual bool ShouldSerializeTables ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Om egenskapsvärdet har ändrats från sitt standardvärde. Annars <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Data.DataSet.ShouldSerializeTables*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.Site
  id: Site
  parent: System.Data.DataSet
  langs:
  - csharp
  name: Site
  nameWithType: DataSet.Site
  fullName: System.Data.DataSet.Site
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Hämtar eller anger en <xref href=&quot;System.ComponentModel.ISite&quot;> </xref> för den <xref href=&quot;System.Data.DataSet&quot;> </xref>."
  remarks: "Platser binda ett <xref:System.ComponentModel.Component>till en <xref:System.ComponentModel.Container>och aktivera kommunikation mellan dem, samt ger dig ett sätt för behållaren att hantera dess komponenter.</xref:System.ComponentModel.Container> </xref:System.ComponentModel.Component>"
  syntax:
    content: public override System.ComponentModel.ISite Site { get; set; }
    return:
      type: System.ComponentModel.ISite
      description: "An <xref href=&quot;System.ComponentModel.ISite&quot;></xref> for the <xref href=&quot;System.Data.DataSet&quot;></xref>."
  overload: System.Data.DataSet.Site*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.System#ComponentModel#IListSource#ContainsListCollection
  id: System#ComponentModel#IListSource#ContainsListCollection
  isEii: true
  parent: System.Data.DataSet
  langs:
  - csharp
  name: System.ComponentModel.IListSource.ContainsListCollection
  nameWithType: DataSet.System.ComponentModel.IListSource.ContainsListCollection
  fullName: System.Data.DataSet.System.ComponentModel.IListSource.ContainsListCollection
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "En beskrivning av den här medlemmen finns &lt;xref:System.ComponentModel.IListSource.ContainsListCollection%2A?displayProperty=fullName&gt;."
  remarks: "Den här medlemmen är en implementering för medlem av explicit gränssnitt. Det kan användas endast när den <xref:System.Data.DataSet>instans omvandlas till ett <xref:System.ComponentModel.IListSource>gränssnitt.</xref:System.ComponentModel.IListSource> </xref:System.Data.DataSet>"
  syntax:
    content: bool System.ComponentModel.IListSource.ContainsListCollection { get; }
    return:
      type: System.Boolean
      description: "En beskrivning av den här medlemmen finns &lt;xref:System.ComponentModel.IListSource.ContainsListCollection%2A?displayProperty=fullName&gt;."
  overload: System.Data.DataSet.System#ComponentModel#IListSource#ContainsListCollection*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.System#ComponentModel#IListSource#GetList
  id: System#ComponentModel#IListSource#GetList
  isEii: true
  parent: System.Data.DataSet
  langs:
  - csharp
  name: System.ComponentModel.IListSource.GetList()
  nameWithType: DataSet.System.ComponentModel.IListSource.GetList()
  fullName: System.Data.DataSet.System.ComponentModel.IListSource.GetList()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "En beskrivning av den här medlemmen finns &lt;xref:System.ComponentModel.IListSource.GetList%2A?displayProperty=fullName&gt;."
  remarks: "Den här medlemmen är en implementering för medlem av explicit gränssnitt. Det kan användas endast när den <xref:System.Data.DataSet>instans omvandlas till ett <xref:System.ComponentModel.IListSource>gränssnitt.</xref:System.ComponentModel.IListSource> </xref:System.Data.DataSet>"
  syntax:
    content: System.Collections.IList IListSource.GetList ();
    parameters: []
    return:
      type: System.Collections.IList
      description: "En beskrivning av den här medlemmen finns &lt;xref:System.ComponentModel.IListSource.GetList%2A?displayProperty=fullName&gt;."
  overload: System.Data.DataSet.System#ComponentModel#IListSource#GetList*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.System#Xml#Serialization#IXmlSerializable#GetSchema
  id: System#Xml#Serialization#IXmlSerializable#GetSchema
  isEii: true
  parent: System.Data.DataSet
  langs:
  - csharp
  name: System.Xml.Serialization.IXmlSerializable.GetSchema()
  nameWithType: DataSet.System.Xml.Serialization.IXmlSerializable.GetSchema()
  fullName: System.Data.DataSet.System.Xml.Serialization.IXmlSerializable.GetSchema()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "En beskrivning av den här medlemmen finns &lt;xref:System.Xml.Serialization.IXmlSerializable.GetSchema%2A?displayProperty=fullName&gt;."
  remarks: "Den här medlemmen är en implementering för medlem av explicit gränssnitt. Det kan användas endast när den <xref:System.Data.DataSet>instans omvandlas till ett <xref:System.Xml.Serialization.IXmlSerializable>gränssnitt.</xref:System.Xml.Serialization.IXmlSerializable> </xref:System.Data.DataSet>"
  syntax:
    content: System.Xml.Schema.XmlSchema IXmlSerializable.GetSchema ();
    parameters: []
    return:
      type: System.Xml.Schema.XmlSchema
      description: "En beskrivning av den här medlemmen finns &lt;xref:System.Xml.Serialization.IXmlSerializable.GetSchema%2A?displayProperty=fullName&gt;."
  overload: System.Data.DataSet.System#Xml#Serialization#IXmlSerializable#GetSchema*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)
  id: System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)
  isEii: true
  parent: System.Data.DataSet
  langs:
  - csharp
  name: System.Xml.Serialization.IXmlSerializable.ReadXml(XmlReader)
  nameWithType: DataSet.System.Xml.Serialization.IXmlSerializable.ReadXml(XmlReader)
  fullName: System.Data.DataSet.System.Xml.Serialization.IXmlSerializable.ReadXml(XmlReader)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "En beskrivning av den här medlemmen finns &lt;xref:System.Xml.Serialization.IXmlSerializable.ReadXml%2A?displayProperty=fullName&gt;."
  remarks: "Den här medlemmen är en implementering för medlem av explicit gränssnitt. Det kan användas endast när den <xref:System.Data.DataSet>instans omvandlas till ett <xref:System.Xml.Serialization.IXmlSerializable>gränssnitt.</xref:System.Xml.Serialization.IXmlSerializable> </xref:System.Data.DataSet>"
  syntax:
    content: void IXmlSerializable.ReadXml (System.Xml.XmlReader reader);
    parameters:
    - id: reader
      type: System.Xml.XmlReader
      description: "A <xref:System.Xml.XmlReader>.</xref:System.Xml.XmlReader>"
  overload: System.Data.DataSet.System#Xml#Serialization#IXmlSerializable#ReadXml*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)
  id: System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)
  isEii: true
  parent: System.Data.DataSet
  langs:
  - csharp
  name: System.Xml.Serialization.IXmlSerializable.WriteXml(XmlWriter)
  nameWithType: DataSet.System.Xml.Serialization.IXmlSerializable.WriteXml(XmlWriter)
  fullName: System.Data.DataSet.System.Xml.Serialization.IXmlSerializable.WriteXml(XmlWriter)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "En beskrivning av den här medlemmen finns &lt;xref:System.Xml.Serialization.IXmlSerializable.WriteXml%2A?displayProperty=fullName&gt;."
  remarks: "Den här medlemmen är en implementering för medlem av explicit gränssnitt. Det kan användas endast när den <xref:System.Data.DataSet>instans omvandlas till ett <xref:System.Xml.Serialization.IXmlSerializable>gränssnitt.</xref:System.Xml.Serialization.IXmlSerializable> </xref:System.Data.DataSet>"
  syntax:
    content: void IXmlSerializable.WriteXml (System.Xml.XmlWriter writer);
    parameters:
    - id: writer
      type: System.Xml.XmlWriter
      description: "A <xref:System.Xml.XmlWriter>.</xref:System.Xml.XmlWriter>"
  overload: System.Data.DataSet.System#Xml#Serialization#IXmlSerializable#WriteXml*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.Tables
  id: Tables
  parent: System.Data.DataSet
  langs:
  - csharp
  name: Tables
  nameWithType: DataSet.Tables
  fullName: System.Data.DataSet.Tables
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Hämtar samlingen av tabellerna i den <xref href=&quot;System.Data.DataSet&quot;> </xref>."
  remarks: "Om du vill lägga till tabeller i samlingen, använder du <xref:System.Data.DataTableCollection.Add%2A>metoden i <xref:System.Data.DataTableCollection>.</xref:System.Data.DataTableCollection> </xref:System.Data.DataTableCollection.Add%2A> Ta bort tabeller med den <xref:System.Data.DataTableCollection.Remove%2A>metoden.</xref:System.Data.DataTableCollection.Remove%2A>"
  example:
  - "The following example returns the <xref:System.Data.DataSet> object's <xref:System.Data.DataTableCollection>, and prints the columns and rows in each table.  \n  \n [!code-vb[Classic WebData DataSet.Tables Example#1](~/add/codesnippet/visualbasic/p-system.data.dataset.ta_1.vb)]\n [!code-cs[Classic WebData DataSet.Tables Example#1](~/add/codesnippet/csharp/p-system.data.dataset.ta_1.cs)]"
  syntax:
    content: public System.Data.DataTableCollection Tables { get; }
    return:
      type: System.Data.DataTableCollection
      description: "Den <xref href=&quot;System.Data.DataTableCollection&quot;> </xref> finns i <xref href=&quot;System.Data.DataSet&quot;> </xref>. En tom samling returneras om det finns ingen <xref href=&quot;System.Data.DataTable&quot;> </xref> objekten finns."
  overload: System.Data.DataSet.Tables*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.WriteXml(System.IO.Stream)
  id: WriteXml(System.IO.Stream)
  parent: System.Data.DataSet
  langs:
  - csharp
  name: WriteXml(Stream)
  nameWithType: DataSet.WriteXml(Stream)
  fullName: System.Data.DataSet.WriteXml(Stream)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Skriver den aktuella data för den <xref href=&quot;System.Data.DataSet&quot;> </xref> med det angivna &lt;xref:System.IO.Stream?displayProperty=fullName&gt;."
  remarks: "Den `WriteXml` metoden ger ett sätt att skriva data, eller både data och schema från en <xref:System.Data.DataSet>i ett XML-dokument, medan den <xref:System.Data.DataSet.WriteXmlSchema%2A>metoden skriver endast schemat.</xref:System.Data.DataSet.WriteXmlSchema%2A> </xref:System.Data.DataSet> Om du vill skriva både data och schema, kan du använda någon av överlagringar som innehåller den `mode` parameter, och ange värdet till `WriteSchema`.       Observera att samma sak gäller för den <xref:System.Data.DataSet.ReadXml%2A>och <xref:System.Data.DataSet.ReadXmlSchema%2A>metoder, respektive.</xref:System.Data.DataSet.ReadXmlSchema%2A> </xref:System.Data.DataSet.ReadXml%2A> Att läsa XML-data, eller både schema- och data till den `DataSet`, använda den `ReadXml` metoden. Läs bara schemat genom att använda den `ReadXmlSchema` metoden.      > [!NOTE] > En <xref:System.InvalidOperationException>genereras om en kolumntyp i den `DataRow` att läsa från eller skrivs till implementerar <xref:System.Dynamic.IDynamicMetaObjectProvider>och implementerar inte <xref:System.Xml.Serialization.IXmlSerializable>.</xref:System.Xml.Serialization.IXmlSerializable> </xref:System.Dynamic.IDynamicMetaObjectProvider> </xref:System.InvalidOperationException>"
  example:
  - "The following example creates a <xref:System.IO.FileStream?displayProperty=fullName> object. The object is then used with the WriteXml method to write an XML document.  \n  \n [!code-cs[Classic WebData DataSet.WriteXml Example#1](~/add/codesnippet/csharp/m-system.data.dataset.wr_2_1.cs)]\n [!code-vb[Classic WebData DataSet.WriteXml Example#1](~/add/codesnippet/visualbasic/m-system.data.dataset.wr_2_1.vb)]"
  syntax:
    content: public void WriteXml (System.IO.Stream stream);
    parameters:
    - id: stream
      type: System.IO.Stream
      description: "En <xref:System.IO.Stream>objekt som används för att skriva till en fil.</xref:System.IO.Stream>"
  overload: System.Data.DataSet.WriteXml*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.WriteXml(System.IO.TextWriter)
  id: WriteXml(System.IO.TextWriter)
  parent: System.Data.DataSet
  langs:
  - csharp
  name: WriteXml(TextWriter)
  nameWithType: DataSet.WriteXml(TextWriter)
  fullName: System.Data.DataSet.WriteXml(TextWriter)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Skriver den aktuella data för den <xref href=&quot;System.Data.DataSet&quot;> </xref> med hjälp av angivna <xref:System.IO.TextWriter>.</xref:System.IO.TextWriter>"
  remarks: "Den `WriteXml` metoden ger ett sätt att skriva data, eller både data och schema från en <xref:System.Data.DataSet>i ett XML-dokument, medan den <xref:System.Data.DataSet.WriteXmlSchema%2A>metoden skriver endast schemat.</xref:System.Data.DataSet.WriteXmlSchema%2A> </xref:System.Data.DataSet> Om du vill skriva både data och schema, kan du använda någon av överlagringar som innehåller den `mode` parameter, och ange värdet till `WriteSchema`.       Observera att samma sak gäller för den <xref:System.Data.DataSet.ReadXml%2A>och <xref:System.Data.DataSet.ReadXmlSchema%2A>metoder, respektive.</xref:System.Data.DataSet.ReadXmlSchema%2A> </xref:System.Data.DataSet.ReadXml%2A> Att läsa XML-data, eller både schema- och data till den `DataSet`, använda den `ReadXml` metoden. Läs bara schemat genom att använda den `ReadXmlSchema` metoden.      > [!NOTE] > En <xref:System.InvalidOperationException>genereras om en kolumntyp i den `DataRow` att läsa från eller skrivs till implementerar <xref:System.Dynamic.IDynamicMetaObjectProvider>och implementerar inte <xref:System.Xml.Serialization.IXmlSerializable>.</xref:System.Xml.Serialization.IXmlSerializable> </xref:System.Dynamic.IDynamicMetaObjectProvider> </xref:System.InvalidOperationException>"
  syntax:
    content: public void WriteXml (System.IO.TextWriter writer);
    parameters:
    - id: writer
      type: System.IO.TextWriter
      description: "Den <xref:System.IO.TextWriter>objekt som du vill skriva.</xref:System.IO.TextWriter>"
  overload: System.Data.DataSet.WriteXml*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.WriteXml(System.String)
  id: WriteXml(System.String)
  parent: System.Data.DataSet
  langs:
  - csharp
  name: WriteXml(String)
  nameWithType: DataSet.WriteXml(String)
  fullName: System.Data.DataSet.WriteXml(String)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Skriver den aktuella data för den <xref href=&quot;System.Data.DataSet&quot;> </xref> till den angivna filen."
  remarks: "Den `WriteXml` metoden ger ett sätt att skriva data, eller både data och schema från en <xref:System.Data.DataSet>i ett XML-dokument, medan den <xref:System.Data.DataSet.WriteXmlSchema%2A>metoden skriver endast schemat.</xref:System.Data.DataSet.WriteXmlSchema%2A> </xref:System.Data.DataSet> Om du vill skriva både data och schema, kan du använda någon av överlagringar som innehåller den `mode` parameter, och ange värdet till `WriteSchema`.       Observera att samma sak gäller för den <xref:System.Data.DataSet.ReadXml%2A>och <xref:System.Data.DataSet.ReadXmlSchema%2A>metoder, respektive.</xref:System.Data.DataSet.ReadXmlSchema%2A> </xref:System.Data.DataSet.ReadXml%2A> Att läsa XML-data, eller både schema- och data till den `DataSet`, använda den `ReadXml` metoden. Läs bara schemat genom att använda den `ReadXmlSchema` metoden.      > [!NOTE] > En <xref:System.InvalidOperationException>genereras om en kolumntyp i den `DataRow` att läsa från eller skrivs till implementerar <xref:System.Dynamic.IDynamicMetaObjectProvider>och implementerar inte <xref:System.Xml.Serialization.IXmlSerializable>.</xref:System.Xml.Serialization.IXmlSerializable> </xref:System.Dynamic.IDynamicMetaObjectProvider> </xref:System.InvalidOperationException>"
  syntax:
    content: public void WriteXml (string fileName);
    parameters:
    - id: fileName
      type: System.String
      description: "Filen namn (inklusive sökväg) som du vill skriva."
  overload: System.Data.DataSet.WriteXml*
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "<xref href=&quot;System.Security.Permissions.FileIOPermission&quot;></xref>är inte inställd på <xref href=&quot;System.Security.Permissions.FileIOPermissionAccess&quot;> </xref>."
  platform:
  - net462
- uid: System.Data.DataSet.WriteXml(System.Xml.XmlWriter)
  id: WriteXml(System.Xml.XmlWriter)
  parent: System.Data.DataSet
  langs:
  - csharp
  name: WriteXml(XmlWriter)
  nameWithType: DataSet.WriteXml(XmlWriter)
  fullName: System.Data.DataSet.WriteXml(XmlWriter)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Skriver den aktuella data för den <xref href=&quot;System.Data.DataSet&quot;> </xref> till den angivna <xref:System.Xml.XmlWriter>.</xref:System.Xml.XmlWriter>"
  remarks: "Den `WriteXml` metoden ger ett sätt att skriva data, eller både data och schema från en <xref:System.Data.DataSet>i ett XML-dokument, medan den <xref:System.Data.DataSet.WriteXmlSchema%2A>metoden skriver endast schemat.</xref:System.Data.DataSet.WriteXmlSchema%2A> </xref:System.Data.DataSet> Om du vill skriva både data och schema, kan du använda någon av överlagringar som innehåller den `mode` parameter, och ange värdet till `WriteSchema`.       Observera att samma sak gäller för den <xref:System.Data.DataSet.ReadXml%2A>och <xref:System.Data.DataSet.ReadXmlSchema%2A>metoder, respektive.</xref:System.Data.DataSet.ReadXmlSchema%2A> </xref:System.Data.DataSet.ReadXml%2A> Att läsa XML-data, eller både schema- och data till den `DataSet`, använda den `ReadXml` metoden. Läs bara schemat genom att använda den `ReadXmlSchema` metoden.      > [!NOTE] > En <xref:System.InvalidOperationException>genereras om en kolumntyp i den `DataRow` att läsa från eller skrivs till implementerar <xref:System.Dynamic.IDynamicMetaObjectProvider>och implementerar inte <xref:System.Xml.Serialization.IXmlSerializable>.</xref:System.Xml.Serialization.IXmlSerializable> </xref:System.Dynamic.IDynamicMetaObjectProvider> </xref:System.InvalidOperationException>"
  syntax:
    content: public void WriteXml (System.Xml.XmlWriter writer);
    parameters:
    - id: writer
      type: System.Xml.XmlWriter
      description: "Den <xref:System.Xml.XmlWriter>som du vill skriva.</xref:System.Xml.XmlWriter>"
  overload: System.Data.DataSet.WriteXml*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.WriteXml(System.IO.Stream,System.Data.XmlWriteMode)
  id: WriteXml(System.IO.Stream,System.Data.XmlWriteMode)
  parent: System.Data.DataSet
  langs:
  - csharp
  name: WriteXml(Stream,XmlWriteMode)
  nameWithType: DataSet.WriteXml(Stream,XmlWriteMode)
  fullName: System.Data.DataSet.WriteXml(Stream,XmlWriteMode)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Skriver den aktuella informationen och eventuellt schemat för den <xref href=&quot;System.Data.DataSet&quot;> </xref> med det angivna &lt;xref:System.IO.Stream?displayProperty=fullName&gt; och <xref href=&quot;System.Data.XmlWriteMode&quot;> </xref>. Om du vill skriva schemat, ange värdet för den <code> mode </code> parameter till <xref uid=&quot;langword_csharp_WriteSchema&quot; name=&quot;WriteSchema&quot; href=&quot;&quot;> </xref>."
  remarks: "Den `WriteXml` metoden ger ett sätt att skriva data, eller både data och schema från en <xref:System.Data.DataSet>i ett XML-dokument, medan den <xref:System.Data.DataSet.WriteXmlSchema%2A>metoden skriver endast schemat.</xref:System.Data.DataSet.WriteXmlSchema%2A> </xref:System.Data.DataSet> Om du vill skriva både data och schema, ange den `mode` parameter till `WriteSchema`.       Observera att samma sak gäller för den <xref:System.Data.DataSet.ReadXml%2A>och <xref:System.Data.DataSet.ReadXmlSchema%2A>metoder, respektive.</xref:System.Data.DataSet.ReadXmlSchema%2A> </xref:System.Data.DataSet.ReadXml%2A> Att läsa XML-data, eller både schema- och data till den `DataSet`, använda den `ReadXml` metoden. Läs bara schemat genom att använda den `ReadXmlSchema` metoden.      > [!NOTE] > En <xref:System.InvalidOperationException>genereras om en kolumntyp i den `DataRow` att läsa från eller skrivs till implementerar <xref:System.Dynamic.IDynamicMetaObjectProvider>och implementerar inte <xref:System.Xml.Serialization.IXmlSerializable>.</xref:System.Xml.Serialization.IXmlSerializable> </xref:System.Dynamic.IDynamicMetaObjectProvider> </xref:System.InvalidOperationException>"
  syntax:
    content: public void WriteXml (System.IO.Stream stream, System.Data.XmlWriteMode mode);
    parameters:
    - id: stream
      type: System.IO.Stream
      description: "En <xref:System.IO.Stream>objekt som används för att skriva till en fil.</xref:System.IO.Stream>"
    - id: mode
      type: System.Data.XmlWriteMode
      description: "En av de <xref href=&quot;System.Data.XmlWriteMode&quot;> </xref> värden."
  overload: System.Data.DataSet.WriteXml*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.WriteXml(System.IO.TextWriter,System.Data.XmlWriteMode)
  id: WriteXml(System.IO.TextWriter,System.Data.XmlWriteMode)
  parent: System.Data.DataSet
  langs:
  - csharp
  name: WriteXml(TextWriter,XmlWriteMode)
  nameWithType: DataSet.WriteXml(TextWriter,XmlWriteMode)
  fullName: System.Data.DataSet.WriteXml(TextWriter,XmlWriteMode)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Skriver den aktuella informationen och eventuellt schemat för den <xref href=&quot;System.Data.DataSet&quot;> </xref> med hjälp av den angivna <xref:System.IO.TextWriter>och <xref href=&quot;System.Data.XmlWriteMode&quot;> </xref>.</xref:System.IO.TextWriter> Om du vill skriva schemat, ange värdet för den <code> mode </code> parameter till <xref uid=&quot;langword_csharp_WriteSchema&quot; name=&quot;WriteSchema&quot; href=&quot;&quot;> </xref>."
  remarks: "Den `WriteXml` metoden ger ett sätt att skriva data, eller både data och schema från en <xref:System.Data.DataSet>i ett XML-dokument, medan den <xref:System.Data.DataSet.WriteXmlSchema%2A>metoden skriver endast schemat.</xref:System.Data.DataSet.WriteXmlSchema%2A> </xref:System.Data.DataSet> Om du vill skriva både data och schema, ange den `mode` parameter till `WriteSchema`.       Observera att samma sak gäller för den <xref:System.Data.DataSet.ReadXml%2A>och <xref:System.Data.DataSet.ReadXmlSchema%2A>metoder, respektive.</xref:System.Data.DataSet.ReadXmlSchema%2A> </xref:System.Data.DataSet.ReadXml%2A> Att läsa XML-data, eller både schema- och data till den `DataSet`, använda den `ReadXml` metoden. Läs bara schemat genom att använda den `ReadXmlSchema` metoden.      > [!NOTE] > En <xref:System.InvalidOperationException>genereras om en kolumntyp i den `DataRow` att läsa från eller skrivs till implementerar <xref:System.Dynamic.IDynamicMetaObjectProvider>och implementerar inte <xref:System.Xml.Serialization.IXmlSerializable>.</xref:System.Xml.Serialization.IXmlSerializable> </xref:System.Dynamic.IDynamicMetaObjectProvider> </xref:System.InvalidOperationException>"
  example:
  - "The following example first creates a simple <xref:System.Data.DataSet> with one <xref:System.Data.DataTable>, two columns, and ten rows. The <xref:System.Data.DataSet> schema and data are written to disk by invoking the <xref:System.Data.DataSet.WriteXml%2A> method. A second <xref:System.Data.DataSet> is created and the <xref:System.Data.DataSet.ReadXml%2A> method is used to fill it with schema and data.  \n  \n [!code-vb[Classic WebData DataSet.ReadXml2 Example#1](~/add/codesnippet/visualbasic/m-system.data.dataset.wr_7_1.vb)]\n [!code-cs[Classic WebData DataSet.ReadXml2 Example#1](~/add/codesnippet/csharp/m-system.data.dataset.wr_7_1.cs)]"
  syntax:
    content: public void WriteXml (System.IO.TextWriter writer, System.Data.XmlWriteMode mode);
    parameters:
    - id: writer
      type: System.IO.TextWriter
      description: "En &lt;xref:System.IO.TextWriter?displayProperty=fullName&gt; objekt som används för att skriva dokumentet."
    - id: mode
      type: System.Data.XmlWriteMode
      description: "En av de <xref href=&quot;System.Data.XmlWriteMode&quot;> </xref> värden."
  overload: System.Data.DataSet.WriteXml*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.WriteXml(System.String,System.Data.XmlWriteMode)
  id: WriteXml(System.String,System.Data.XmlWriteMode)
  parent: System.Data.DataSet
  langs:
  - csharp
  name: WriteXml(String,XmlWriteMode)
  nameWithType: DataSet.WriteXml(String,XmlWriteMode)
  fullName: System.Data.DataSet.WriteXml(String,XmlWriteMode)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Skriver den aktuella informationen och eventuellt schemat för den <xref href=&quot;System.Data.DataSet&quot;> </xref> till den angivna filen med den angivna <xref href=&quot;System.Data.XmlWriteMode&quot;> </xref>. Om du vill skriva schemat, ange värdet för den <code> mode </code> parameter till <xref uid=&quot;langword_csharp_WriteSchema&quot; name=&quot;WriteSchema&quot; href=&quot;&quot;> </xref>."
  remarks: "Den `WriteXml` metoden ger ett sätt att skriva data, eller både data och schema från en <xref:System.Data.DataSet>i ett XML-dokument, medan den <xref:System.Data.DataSet.WriteXmlSchema%2A>metoden skriver endast schemat.</xref:System.Data.DataSet.WriteXmlSchema%2A> </xref:System.Data.DataSet> Om du vill skriva både data och schema, ange den `mode` parameter till `WriteSchema`.       Observera att samma sak gäller för den <xref:System.Data.DataSet.ReadXml%2A>och <xref:System.Data.DataSet.ReadXmlSchema%2A>metoder, respektive.</xref:System.Data.DataSet.ReadXmlSchema%2A> </xref:System.Data.DataSet.ReadXml%2A> Att läsa XML-data, eller både schema- och data till den `DataSet`, använda den `ReadXml` metoden. Läs bara schemat genom att använda den `ReadXmlSchema` metoden.      > [!NOTE] > En <xref:System.InvalidOperationException>genereras om en kolumntyp i den `DataRow` att läsa från eller skrivs till implementerar <xref:System.Dynamic.IDynamicMetaObjectProvider>och implementerar inte <xref:System.Xml.Serialization.IXmlSerializable>.</xref:System.Xml.Serialization.IXmlSerializable> </xref:System.Dynamic.IDynamicMetaObjectProvider> </xref:System.InvalidOperationException>"
  example:
  - "The following example uses the <xref:System.Data.DataSet.WriteXml%2A> method to write an XML document.  \n  \n [!code-cs[Classic WebData DataSet.WriteXml7 Example#1](~/add/codesnippet/csharp/m-system.data.dataset.wr_3_1.cs)]\n [!code-vb[Classic WebData DataSet.WriteXml7 Example#1](~/add/codesnippet/visualbasic/m-system.data.dataset.wr_3_1.vb)]"
  syntax:
    content: public void WriteXml (string fileName, System.Data.XmlWriteMode mode);
    parameters:
    - id: fileName
      type: System.String
      description: "Filen namn (inklusive sökväg) som du vill skriva."
    - id: mode
      type: System.Data.XmlWriteMode
      description: "En av de <xref href=&quot;System.Data.XmlWriteMode&quot;> </xref> värden."
  overload: System.Data.DataSet.WriteXml*
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "<xref href=&quot;System.Security.Permissions.FileIOPermission&quot;></xref>är inte inställd på <xref href=&quot;System.Security.Permissions.FileIOPermissionAccess&quot;> </xref>."
  platform:
  - net462
- uid: System.Data.DataSet.WriteXml(System.Xml.XmlWriter,System.Data.XmlWriteMode)
  id: WriteXml(System.Xml.XmlWriter,System.Data.XmlWriteMode)
  parent: System.Data.DataSet
  langs:
  - csharp
  name: WriteXml(XmlWriter,XmlWriteMode)
  nameWithType: DataSet.WriteXml(XmlWriter,XmlWriteMode)
  fullName: System.Data.DataSet.WriteXml(XmlWriter,XmlWriteMode)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Skriver den aktuella informationen och eventuellt schemat för den <xref href=&quot;System.Data.DataSet&quot;> </xref> med hjälp av den angivna <xref:System.Xml.XmlWriter>och <xref href=&quot;System.Data.XmlWriteMode&quot;> </xref>.</xref:System.Xml.XmlWriter> Om du vill skriva schemat, ange värdet för den <code> mode </code> parameter till <xref uid=&quot;langword_csharp_WriteSchema&quot; name=&quot;WriteSchema&quot; href=&quot;&quot;> </xref>."
  remarks: "Den `WriteXml` metoden ger ett sätt att skriva data, eller både data och schema från en <xref:System.Data.DataSet>i ett XML-dokument, medan den <xref:System.Data.DataSet.WriteXmlSchema%2A>metoden skriver endast schemat.</xref:System.Data.DataSet.WriteXmlSchema%2A> </xref:System.Data.DataSet> Om du vill skriva både data och schema, ange den `mode` parameter till `WriteSchema`.       Observera att samma sak gäller för den <xref:System.Data.DataSet.ReadXml%2A>och <xref:System.Data.DataSet.ReadXmlSchema%2A>metoder, respektive.</xref:System.Data.DataSet.ReadXmlSchema%2A> </xref:System.Data.DataSet.ReadXml%2A> Att läsa XML-data, eller både schema- och data till den `DataSet`, använda den `ReadXml` metoden. Läs bara schemat genom att använda den `ReadXmlSchema` metoden.      > [!NOTE] > En <xref:System.InvalidOperationException>genereras om en kolumntyp i den `DataRow` att läsa från eller skrivs till implementerar <xref:System.Dynamic.IDynamicMetaObjectProvider>och implementerar inte <xref:System.Xml.Serialization.IXmlSerializable>.</xref:System.Xml.Serialization.IXmlSerializable> </xref:System.Dynamic.IDynamicMetaObjectProvider> </xref:System.InvalidOperationException>"
  example:
  - "The following example creates a <xref:System.IO.FileStream?displayProperty=fullName> object that is used to create a new <xref:System.Xml.XmlTextWriter?displayProperty=fullName>. The <xref:System.Xml.XmlTextWriter> object is used with the <xref:System.Data.DataSet.WriteXml%2A> method to write an XML document.  \n  \n [!code-cs[Classic WebData DataSet.WriteXml6 Example#1](~/add/codesnippet/csharp/m-system.data.dataset.wr_1_1.cs)]\n [!code-vb[Classic WebData DataSet.WriteXml6 Example#1](~/add/codesnippet/visualbasic/m-system.data.dataset.wr_1_1.vb)]"
  syntax:
    content: public void WriteXml (System.Xml.XmlWriter writer, System.Data.XmlWriteMode mode);
    parameters:
    - id: writer
      type: System.Xml.XmlWriter
      description: "Den <xref:System.Xml.XmlWriter>som du vill skriva.</xref:System.Xml.XmlWriter>"
    - id: mode
      type: System.Data.XmlWriteMode
      description: "En av de <xref href=&quot;System.Data.XmlWriteMode&quot;> </xref> värden."
  overload: System.Data.DataSet.WriteXml*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.WriteXmlSchema(System.IO.Stream)
  id: WriteXmlSchema(System.IO.Stream)
  parent: System.Data.DataSet
  langs:
  - csharp
  name: WriteXmlSchema(Stream)
  nameWithType: DataSet.WriteXmlSchema(Stream)
  fullName: System.Data.DataSet.WriteXmlSchema(Stream)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Skriver den <xref href=&quot;System.Data.DataSet&quot;> </xref> struktur som ett XML-schema till den angivna &lt;xref:System.IO.Stream?displayProperty=fullName&gt; objekt."
  remarks: "Använd metoden WriteXmlSchema för att skriva schemat för en <xref:System.Data.DataSet>ett XML-dokument.</xref:System.Data.DataSet> Schemat innehåller definitioner av tabell, relation och begränsning. Använd metoden WriteXmlSchema om du vill skriva ett schema till en XML-dokument.       XML-schemat skrivs med hjälp av XSD-standard.       Om du vill skriva data till ett XML-dokument, använda den <xref:System.Data.DataSet.WriteXml%2A>metoden.</xref:System.Data.DataSet.WriteXml%2A>       Klasser som härleds från den <xref:System.IO.Stream>klassen innehåller <xref:System.IO.BufferedStream>, <xref:System.IO.FileStream>, <xref:System.IO.MemoryStream>, och <xref:System.Net.Sockets.NetworkStream>.</xref:System.Net.Sockets.NetworkStream> </xref:System.IO.MemoryStream> </xref:System.IO.FileStream> </xref:System.IO.BufferedStream> </xref:System.IO.Stream>"
  example:
  - "The following example creates a new <xref:System.IO.FileStream> object that is passed to the WriteXmlSchema method to write the schema to disk.  \n  \n [!code-vb[Classic WebData DataSet.WriteXmlSchema Example#1](~/add/codesnippet/visualbasic/m-system.data.dataset.wr_6_1.vb)]\n [!code-cs[Classic WebData DataSet.WriteXmlSchema Example#1](~/add/codesnippet/csharp/m-system.data.dataset.wr_6_1.cs)]"
  syntax:
    content: public void WriteXmlSchema (System.IO.Stream stream);
    parameters:
    - id: stream
      type: System.IO.Stream
      description: "En <xref:System.IO.Stream>objekt som används för att skriva till en fil.</xref:System.IO.Stream>"
  overload: System.Data.DataSet.WriteXmlSchema*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.WriteXmlSchema(System.IO.TextWriter)
  id: WriteXmlSchema(System.IO.TextWriter)
  parent: System.Data.DataSet
  langs:
  - csharp
  name: WriteXmlSchema(TextWriter)
  nameWithType: DataSet.WriteXmlSchema(TextWriter)
  fullName: System.Data.DataSet.WriteXmlSchema(TextWriter)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Skriver den <xref href=&quot;System.Data.DataSet&quot;> </xref> struktur som ett XML-schema till den angivna <xref:System.IO.TextWriter>objektet.</xref:System.IO.TextWriter>"
  remarks: "Använd den <xref:System.Data.DataSet.WriteXmlSchema%2A>metod för att skriva schemat för en <xref:System.Data.DataSet>ett XML-dokument.</xref:System.Data.DataSet> </xref:System.Data.DataSet.WriteXmlSchema%2A> Schemat innehåller definitioner av tabell, relation och begränsning. Om du vill skriva ett schema till en XML-dokument, använda den <xref:System.Data.DataSet.WriteXmlSchema%2A>metoden.</xref:System.Data.DataSet.WriteXmlSchema%2A>       XML-schemat skrivs med hjälp av XSD-standard.       Om du vill skriva data till ett XML-dokument, använda den <xref:System.Data.DataSet.WriteXml%2A>metoden.</xref:System.Data.DataSet.WriteXml%2A>       Klasserna härledd från den <xref:System.IO.TextWriter?displayProperty=fullName>klassen innehåller den <xref:System.Web.HttpWriter?displayProperty=fullName>, <xref:System.CodeDom.Compiler.IndentedTextWriter?displayProperty=fullName>, <xref:System.Web.UI.HtmlTextWriter?displayProperty=fullName>, <xref:System.IO.StreamWriter?displayProperty=fullName>, och <xref:System.IO.StringWriter?displayProperty=fullName>.</xref:System.IO.StringWriter?displayProperty=fullName> </xref:System.IO.StreamWriter?displayProperty=fullName> </xref:System.Web.UI.HtmlTextWriter?displayProperty=fullName> </xref:System.CodeDom.Compiler.IndentedTextWriter?displayProperty=fullName> </xref:System.Web.HttpWriter?displayProperty=fullName> </xref:System.IO.TextWriter?displayProperty=fullName>"
  example:
  - "The following example creates a <xref:System.Text.StringBuilder?displayProperty=fullName> object to that is used to create a new <xref:System.IO.StringWriter?displayProperty=fullName>. The <xref:System.IO.StringWriter> is passed to the <xref:System.Data.DataSet.WriteXmlSchema%2A> method, and the resulting string is printed to the console window.  \n  \n [!code-cs[Classic WebData DataSet.WriteXmlSchema1 Example#1](~/add/codesnippet/csharp/m-system.data.dataset.wr_0_1.cs)]\n [!code-vb[Classic WebData DataSet.WriteXmlSchema1 Example#1](~/add/codesnippet/visualbasic/m-system.data.dataset.wr_0_1.vb)]"
  syntax:
    content: public void WriteXmlSchema (System.IO.TextWriter writer);
    parameters:
    - id: writer
      type: System.IO.TextWriter
      description: "Den <xref:System.IO.TextWriter>objekt som du vill skriva.</xref:System.IO.TextWriter>"
  overload: System.Data.DataSet.WriteXmlSchema*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.WriteXmlSchema(System.String)
  id: WriteXmlSchema(System.String)
  parent: System.Data.DataSet
  langs:
  - csharp
  name: WriteXmlSchema(String)
  nameWithType: DataSet.WriteXmlSchema(String)
  fullName: System.Data.DataSet.WriteXmlSchema(String)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Skriver den <xref href=&quot;System.Data.DataSet&quot;> </xref> struktur som ett XML-schema till en fil."
  remarks: "Använd den <xref:System.Data.DataSet.WriteXmlSchema%2A>metod för att skriva schemat för en <xref:System.Data.DataSet>ett XML-dokument.</xref:System.Data.DataSet> </xref:System.Data.DataSet.WriteXmlSchema%2A> Schemat innehåller definitioner av tabell, relation och begränsning. Om du vill skriva ett schema till en XML-dokument, använda den <xref:System.Data.DataSet.WriteXmlSchema%2A>metoden.</xref:System.Data.DataSet.WriteXmlSchema%2A>       XML-schemat skrivs med hjälp av XSD-standard.       Om du vill skriva data till ett XML-dokument, använda den <xref:System.Data.DataSet.WriteXml%2A>metoden.</xref:System.Data.DataSet.WriteXml%2A>"
  example:
  - >-
    [!code-cs[Classic WebData DataSet.WriteXmlSchema3 Example#1](~/add/codesnippet/csharp/m-system.data.dataset.wr_4_1.cs)]
     [!code-vb[Classic WebData DataSet.WriteXmlSchema3 Example#1](~/add/codesnippet/visualbasic/m-system.data.dataset.wr_4_1.vb)]
  syntax:
    content: public void WriteXmlSchema (string fileName);
    parameters:
    - id: fileName
      type: System.String
      description: "Filen namn (inklusive sökväg) som du vill skriva."
  overload: System.Data.DataSet.WriteXmlSchema*
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "<xref href=&quot;System.Security.Permissions.FileIOPermission&quot;></xref>är inte inställd på <xref href=&quot;System.Security.Permissions.FileIOPermissionAccess&quot;> </xref>."
  platform:
  - net462
- uid: System.Data.DataSet.WriteXmlSchema(System.Xml.XmlWriter)
  id: WriteXmlSchema(System.Xml.XmlWriter)
  parent: System.Data.DataSet
  langs:
  - csharp
  name: WriteXmlSchema(XmlWriter)
  nameWithType: DataSet.WriteXmlSchema(XmlWriter)
  fullName: System.Data.DataSet.WriteXmlSchema(XmlWriter)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Skriver den <xref href=&quot;System.Data.DataSet&quot;> </xref> struktur som ett XML-schema till en <xref:System.Xml.XmlWriter>objektet.</xref:System.Xml.XmlWriter>"
  remarks: "Använd den <xref:System.Data.DataSet.WriteXmlSchema%2A>metod för att skriva schemat för en <xref:System.Data.DataSet>ett XML-dokument.</xref:System.Data.DataSet> </xref:System.Data.DataSet.WriteXmlSchema%2A> Schemat innehåller definitioner av tabell, relation och begränsning. Om du vill skriva ett schema till en XML-dokument, använda den <xref:System.Data.DataSet.WriteXmlSchema%2A>metoden.</xref:System.Data.DataSet.WriteXmlSchema%2A>       XML-schemat skrivs med hjälp av XSD-standard.       Om du vill skriva data till ett XML-dokument, använda den <xref:System.Data.DataSet.WriteXml%2A>metoden.</xref:System.Data.DataSet.WriteXml%2A>       En klass som ärvs från <xref:System.Xml.XmlWriter?displayProperty=fullName>klassen är <xref:System.Xml.XmlTextWriter?displayProperty=fullName>klass.</xref:System.Xml.XmlTextWriter?displayProperty=fullName> </xref:System.Xml.XmlWriter?displayProperty=fullName>"
  example:
  - "The following example creates a new <xref:System.IO.FileStream?displayProperty=fullName> object with the specified path. The <xref:System.IO.FileStream> object is used to create an <xref:System.Xml.XMLTextWriter?displayProperty=fullName> object. The <xref:System.Data.DataSet.WriteXmlSchema%2A> method is then invoked with the <xref:System.Xml.XmlTextWriter> object to write the schema to the disk.  \n  \n [!code-cs[Classic WebData DataSet.WriteXmlSchema2 Example#1](~/add/codesnippet/csharp/m-system.data.dataset.wr_5_1.cs)]\n [!code-vb[Classic WebData DataSet.WriteXmlSchema2 Example#1](~/add/codesnippet/visualbasic/m-system.data.dataset.wr_5_1.vb)]"
  syntax:
    content: public void WriteXmlSchema (System.Xml.XmlWriter writer);
    parameters:
    - id: writer
      type: System.Xml.XmlWriter
      description: "Den <xref:System.Xml.XmlWriter>att skriva till.</xref:System.Xml.XmlWriter>"
  overload: System.Data.DataSet.WriteXmlSchema*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.WriteXmlSchema(System.IO.Stream,System.Converter{System.Type,System.String})
  id: WriteXmlSchema(System.IO.Stream,System.Converter{System.Type,System.String})
  parent: System.Data.DataSet
  langs:
  - csharp
  name: WriteXmlSchema(Stream,Converter<Type,String>)
  nameWithType: DataSet.WriteXmlSchema(Stream,Converter<Type,String>)
  fullName: System.Data.DataSet.WriteXmlSchema(Stream,Converter<Type,String>)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Skriver den <xref href=&quot;System.Data.DataSet&quot;> </xref> struktur som ett XML-schema till den angivna &lt;xref:System.IO.Stream?displayProperty=fullName&gt; objekt."
  syntax:
    content: public void WriteXmlSchema (System.IO.Stream stream, Converter<Type,string> multipleTargetConverter);
    parameters:
    - id: stream
      type: System.IO.Stream
      description: "En &lt;xref:System.IO.Stream?displayProperty=fullName&gt; objekt att skriva till."
    - id: multipleTargetConverter
      type: System.Converter{System.Type,System.String}
      description: "En delegat som används för att konvertera <xref:System.Type>till sträng.</xref:System.Type>"
  overload: System.Data.DataSet.WriteXmlSchema*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.WriteXmlSchema(System.IO.TextWriter,System.Converter{System.Type,System.String})
  id: WriteXmlSchema(System.IO.TextWriter,System.Converter{System.Type,System.String})
  parent: System.Data.DataSet
  langs:
  - csharp
  name: WriteXmlSchema(TextWriter,Converter<Type,String>)
  nameWithType: DataSet.WriteXmlSchema(TextWriter,Converter<Type,String>)
  fullName: System.Data.DataSet.WriteXmlSchema(TextWriter,Converter<Type,String>)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Skriver den <xref href=&quot;System.Data.DataSet&quot;> </xref> struktur som ett XML-schema i den angivna <xref:System.IO.TextWriter>.</xref:System.IO.TextWriter>"
  syntax:
    content: public void WriteXmlSchema (System.IO.TextWriter writer, Converter<Type,string> multipleTargetConverter);
    parameters:
    - id: writer
      type: System.IO.TextWriter
      description: "En <xref:System.IO.TextWriter>objekt att skriva till.</xref:System.IO.TextWriter>"
    - id: multipleTargetConverter
      type: System.Converter{System.Type,System.String}
      description: "En delegat som används för att konvertera <xref:System.Type>till sträng.</xref:System.Type>"
  overload: System.Data.DataSet.WriteXmlSchema*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.WriteXmlSchema(System.String,System.Converter{System.Type,System.String})
  id: WriteXmlSchema(System.String,System.Converter{System.Type,System.String})
  parent: System.Data.DataSet
  langs:
  - csharp
  name: WriteXmlSchema(String,Converter<Type,String>)
  nameWithType: DataSet.WriteXmlSchema(String,Converter<Type,String>)
  fullName: System.Data.DataSet.WriteXmlSchema(String,Converter<Type,String>)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Skriver den <xref href=&quot;System.Data.DataSet&quot;> </xref> struktur som ett XML-schema till en fil."
  syntax:
    content: public void WriteXmlSchema (string fileName, Converter<Type,string> multipleTargetConverter);
    parameters:
    - id: fileName
      type: System.String
      description: "Namnet på filen för att skriva till."
    - id: multipleTargetConverter
      type: System.Converter{System.Type,System.String}
      description: "En delegat som används för att konvertera <xref:System.Type>till sträng.</xref:System.Type>"
  overload: System.Data.DataSet.WriteXmlSchema*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.WriteXmlSchema(System.Xml.XmlWriter,System.Converter{System.Type,System.String})
  id: WriteXmlSchema(System.Xml.XmlWriter,System.Converter{System.Type,System.String})
  parent: System.Data.DataSet
  langs:
  - csharp
  name: WriteXmlSchema(XmlWriter,Converter<Type,String>)
  nameWithType: DataSet.WriteXmlSchema(XmlWriter,Converter<Type,String>)
  fullName: System.Data.DataSet.WriteXmlSchema(XmlWriter,Converter<Type,String>)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Skriver den <xref href=&quot;System.Data.DataSet&quot;> </xref> struktur som ett XML-schema i den angivna <xref:System.Xml.XmlWriter>.</xref:System.Xml.XmlWriter>"
  syntax:
    content: public void WriteXmlSchema (System.Xml.XmlWriter writer, Converter<Type,string> multipleTargetConverter);
    parameters:
    - id: writer
      type: System.Xml.XmlWriter
      description: "En <xref:System.Xml.XmlWriter>objekt att skriva till.</xref:System.Xml.XmlWriter>"
    - id: multipleTargetConverter
      type: System.Converter{System.Type,System.String}
      description: "En delegat som används för att konvertera <xref:System.Type>till sträng.</xref:System.Type>"
  overload: System.Data.DataSet.WriteXmlSchema*
  exceptions: []
  platform:
  - net462
references:
- uid: System.ComponentModel.MarshalByValueComponent
  isExternal: false
  name: System.ComponentModel.MarshalByValueComponent
- uid: System.Data.ConstraintException
  parent: System.Data
  isExternal: false
  name: ConstraintException
  nameWithType: ConstraintException
  fullName: System.Data.ConstraintException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.Security.SecurityException
  isExternal: true
  name: System.Security.SecurityException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.Data.DataSet.#ctor
  parent: System.Data.DataSet
  isExternal: false
  name: DataSet()
  nameWithType: DataSet.DataSet()
  fullName: System.Data.DataSet.DataSet()
- uid: System.Data.DataSet.#ctor(System.String)
  parent: System.Data.DataSet
  isExternal: false
  name: DataSet(String)
  nameWithType: DataSet.DataSet(String)
  fullName: System.Data.DataSet.DataSet(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Data.DataSet.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  parent: System.Data.DataSet
  isExternal: false
  name: DataSet(SerializationInfo,StreamingContext)
  nameWithType: DataSet.DataSet(SerializationInfo,StreamingContext)
  fullName: System.Data.DataSet.DataSet(SerializationInfo,StreamingContext)
- uid: System.Runtime.Serialization.SerializationInfo
  parent: System.Runtime.Serialization
  isExternal: false
  name: SerializationInfo
  nameWithType: SerializationInfo
  fullName: System.Runtime.Serialization.SerializationInfo
- uid: System.Runtime.Serialization.StreamingContext
  parent: System.Runtime.Serialization
  isExternal: true
  name: StreamingContext
  nameWithType: StreamingContext
  fullName: System.Runtime.Serialization.StreamingContext
- uid: System.Data.DataSet.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext,System.Boolean)
  parent: System.Data.DataSet
  isExternal: false
  name: DataSet(SerializationInfo,StreamingContext,Boolean)
  nameWithType: DataSet.DataSet(SerializationInfo,StreamingContext,Boolean)
  fullName: System.Data.DataSet.DataSet(SerializationInfo,StreamingContext,Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Data.DataSet.AcceptChanges
  parent: System.Data.DataSet
  isExternal: false
  name: AcceptChanges()
  nameWithType: DataSet.AcceptChanges()
  fullName: System.Data.DataSet.AcceptChanges()
- uid: System.Data.DataSet.BeginInit
  parent: System.Data.DataSet
  isExternal: false
  name: BeginInit()
  nameWithType: DataSet.BeginInit()
  fullName: System.Data.DataSet.BeginInit()
- uid: System.Data.DataSet.CaseSensitive
  parent: System.Data.DataSet
  isExternal: false
  name: CaseSensitive
  nameWithType: DataSet.CaseSensitive
  fullName: System.Data.DataSet.CaseSensitive
- uid: System.Data.DataSet.Clear
  parent: System.Data.DataSet
  isExternal: false
  name: Clear()
  nameWithType: DataSet.Clear()
  fullName: System.Data.DataSet.Clear()
- uid: System.Data.DataSet.Clone
  parent: System.Data.DataSet
  isExternal: false
  name: Clone()
  nameWithType: DataSet.Clone()
  fullName: System.Data.DataSet.Clone()
- uid: System.Data.DataSet
  parent: System.Data
  isExternal: false
  name: DataSet
  nameWithType: DataSet
  fullName: System.Data.DataSet
- uid: System.Data.DataSet.Copy
  parent: System.Data.DataSet
  isExternal: false
  name: Copy()
  nameWithType: DataSet.Copy()
  fullName: System.Data.DataSet.Copy()
- uid: System.Data.DataSet.CreateDataReader
  parent: System.Data.DataSet
  isExternal: false
  name: CreateDataReader()
  nameWithType: DataSet.CreateDataReader()
  fullName: System.Data.DataSet.CreateDataReader()
- uid: System.Data.DataTableReader
  parent: System.Data
  isExternal: false
  name: DataTableReader
  nameWithType: DataTableReader
  fullName: System.Data.DataTableReader
- uid: System.Data.DataSet.CreateDataReader(System.Data.DataTable[])
  parent: System.Data.DataSet
  isExternal: false
  name: CreateDataReader(DataTable[])
  nameWithType: DataSet.CreateDataReader(DataTable[])
  fullName: System.Data.DataSet.CreateDataReader(DataTable[])
- uid: System.Data.DataTable[]
  parent: System.Data
  isExternal: false
  name: DataTable
  nameWithType: DataTable
  fullName: System.Data.DataTable[]
  spec.csharp:
  - uid: System.Data.DataTable
    name: DataTable
    nameWithType: DataTable
    fullName: DataTable[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Data.DataSet.DataSetName
  parent: System.Data.DataSet
  isExternal: false
  name: DataSetName
  nameWithType: DataSet.DataSetName
  fullName: System.Data.DataSet.DataSetName
- uid: System.Data.DataSet.DefaultViewManager
  parent: System.Data.DataSet
  isExternal: false
  name: DefaultViewManager
  nameWithType: DataSet.DefaultViewManager
  fullName: System.Data.DataSet.DefaultViewManager
- uid: System.Data.DataViewManager
  parent: System.Data
  isExternal: false
  name: DataViewManager
  nameWithType: DataViewManager
  fullName: System.Data.DataViewManager
- uid: System.Data.DataSet.DetermineSchemaSerializationMode(System.Xml.XmlReader)
  parent: System.Data.DataSet
  isExternal: false
  name: DetermineSchemaSerializationMode(XmlReader)
  nameWithType: DataSet.DetermineSchemaSerializationMode(XmlReader)
  fullName: System.Data.DataSet.DetermineSchemaSerializationMode(XmlReader)
- uid: System.Data.SchemaSerializationMode
  parent: System.Data
  isExternal: false
  name: SchemaSerializationMode
  nameWithType: SchemaSerializationMode
  fullName: System.Data.SchemaSerializationMode
- uid: System.Xml.XmlReader
  parent: System.Xml
  isExternal: true
  name: XmlReader
  nameWithType: XmlReader
  fullName: System.Xml.XmlReader
- uid: System.Data.DataSet.DetermineSchemaSerializationMode(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  parent: System.Data.DataSet
  isExternal: false
  name: DetermineSchemaSerializationMode(SerializationInfo,StreamingContext)
  nameWithType: DataSet.DetermineSchemaSerializationMode(SerializationInfo,StreamingContext)
  fullName: System.Data.DataSet.DetermineSchemaSerializationMode(SerializationInfo,StreamingContext)
- uid: System.Data.DataSet.EndInit
  parent: System.Data.DataSet
  isExternal: false
  name: EndInit()
  nameWithType: DataSet.EndInit()
  fullName: System.Data.DataSet.EndInit()
- uid: System.Data.DataSet.EnforceConstraints
  parent: System.Data.DataSet
  isExternal: false
  name: EnforceConstraints
  nameWithType: DataSet.EnforceConstraints
  fullName: System.Data.DataSet.EnforceConstraints
- uid: System.Data.DataSet.ExtendedProperties
  parent: System.Data.DataSet
  isExternal: false
  name: ExtendedProperties
  nameWithType: DataSet.ExtendedProperties
  fullName: System.Data.DataSet.ExtendedProperties
- uid: System.Data.PropertyCollection
  parent: System.Data
  isExternal: false
  name: PropertyCollection
  nameWithType: PropertyCollection
  fullName: System.Data.PropertyCollection
- uid: System.Data.DataSet.GetChanges
  parent: System.Data.DataSet
  isExternal: false
  name: GetChanges()
  nameWithType: DataSet.GetChanges()
  fullName: System.Data.DataSet.GetChanges()
- uid: System.Data.DataSet.GetChanges(System.Data.DataRowState)
  parent: System.Data.DataSet
  isExternal: false
  name: GetChanges(DataRowState)
  nameWithType: DataSet.GetChanges(DataRowState)
  fullName: System.Data.DataSet.GetChanges(DataRowState)
- uid: System.Data.DataRowState
  parent: System.Data
  isExternal: false
  name: DataRowState
  nameWithType: DataRowState
  fullName: System.Data.DataRowState
- uid: System.Data.DataSet.GetDataSetSchema(System.Xml.Schema.XmlSchemaSet)
  parent: System.Data.DataSet
  isExternal: false
  name: GetDataSetSchema(XmlSchemaSet)
  nameWithType: DataSet.GetDataSetSchema(XmlSchemaSet)
  fullName: System.Data.DataSet.GetDataSetSchema(XmlSchemaSet)
- uid: System.Xml.Schema.XmlSchemaComplexType
  parent: System.Xml.Schema
  isExternal: false
  name: XmlSchemaComplexType
  nameWithType: XmlSchemaComplexType
  fullName: System.Xml.Schema.XmlSchemaComplexType
- uid: System.Xml.Schema.XmlSchemaSet
  parent: System.Xml.Schema
  isExternal: false
  name: XmlSchemaSet
  nameWithType: XmlSchemaSet
  fullName: System.Xml.Schema.XmlSchemaSet
- uid: System.Data.DataSet.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  parent: System.Data.DataSet
  isExternal: false
  name: GetObjectData(SerializationInfo,StreamingContext)
  nameWithType: DataSet.GetObjectData(SerializationInfo,StreamingContext)
  fullName: System.Data.DataSet.GetObjectData(SerializationInfo,StreamingContext)
- uid: System.Data.DataSet.GetSchemaSerializable
  parent: System.Data.DataSet
  isExternal: false
  name: GetSchemaSerializable()
  nameWithType: DataSet.GetSchemaSerializable()
  fullName: System.Data.DataSet.GetSchemaSerializable()
- uid: System.Xml.Schema.XmlSchema
  parent: System.Xml.Schema
  isExternal: true
  name: XmlSchema
  nameWithType: XmlSchema
  fullName: System.Xml.Schema.XmlSchema
- uid: System.Data.DataSet.GetSerializationData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  parent: System.Data.DataSet
  isExternal: false
  name: GetSerializationData(SerializationInfo,StreamingContext)
  nameWithType: DataSet.GetSerializationData(SerializationInfo,StreamingContext)
  fullName: System.Data.DataSet.GetSerializationData(SerializationInfo,StreamingContext)
- uid: System.Data.DataSet.GetXml
  parent: System.Data.DataSet
  isExternal: false
  name: GetXml()
  nameWithType: DataSet.GetXml()
  fullName: System.Data.DataSet.GetXml()
- uid: System.Data.DataSet.GetXmlSchema
  parent: System.Data.DataSet
  isExternal: false
  name: GetXmlSchema()
  nameWithType: DataSet.GetXmlSchema()
  fullName: System.Data.DataSet.GetXmlSchema()
- uid: System.Data.DataSet.HasChanges
  parent: System.Data.DataSet
  isExternal: false
  name: HasChanges()
  nameWithType: DataSet.HasChanges()
  fullName: System.Data.DataSet.HasChanges()
- uid: System.Data.DataSet.HasChanges(System.Data.DataRowState)
  parent: System.Data.DataSet
  isExternal: false
  name: HasChanges(DataRowState)
  nameWithType: DataSet.HasChanges(DataRowState)
  fullName: System.Data.DataSet.HasChanges(DataRowState)
- uid: System.Data.DataSet.HasErrors
  parent: System.Data.DataSet
  isExternal: false
  name: HasErrors
  nameWithType: DataSet.HasErrors
  fullName: System.Data.DataSet.HasErrors
- uid: System.Data.DataSet.InferXmlSchema(System.IO.Stream,System.String[])
  parent: System.Data.DataSet
  isExternal: false
  name: InferXmlSchema(Stream,String[])
  nameWithType: DataSet.InferXmlSchema(Stream,String[])
  fullName: System.Data.DataSet.InferXmlSchema(Stream,String[])
- uid: System.IO.Stream
  parent: System.IO
  isExternal: true
  name: Stream
  nameWithType: Stream
  fullName: System.IO.Stream
- uid: System.String[]
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String[]
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Data.DataSet.InferXmlSchema(System.IO.TextReader,System.String[])
  parent: System.Data.DataSet
  isExternal: false
  name: InferXmlSchema(TextReader,String[])
  nameWithType: DataSet.InferXmlSchema(TextReader,String[])
  fullName: System.Data.DataSet.InferXmlSchema(TextReader,String[])
- uid: System.IO.TextReader
  parent: System.IO
  isExternal: true
  name: TextReader
  nameWithType: TextReader
  fullName: System.IO.TextReader
- uid: System.Data.DataSet.InferXmlSchema(System.String,System.String[])
  parent: System.Data.DataSet
  isExternal: false
  name: InferXmlSchema(String,String[])
  nameWithType: DataSet.InferXmlSchema(String,String[])
  fullName: System.Data.DataSet.InferXmlSchema(String,String[])
- uid: System.Data.DataSet.InferXmlSchema(System.Xml.XmlReader,System.String[])
  parent: System.Data.DataSet
  isExternal: false
  name: InferXmlSchema(XmlReader,String[])
  nameWithType: DataSet.InferXmlSchema(XmlReader,String[])
  fullName: System.Data.DataSet.InferXmlSchema(XmlReader,String[])
- uid: System.Data.DataSet.Initialized
  parent: System.Data.DataSet
  isExternal: false
  name: Initialized
  nameWithType: DataSet.Initialized
  fullName: System.Data.DataSet.Initialized
- uid: System.EventHandler
  parent: System
  isExternal: true
  name: EventHandler
  nameWithType: EventHandler
  fullName: System.EventHandler
- uid: System.Data.DataSet.InitializeDerivedDataSet
  parent: System.Data.DataSet
  isExternal: false
  name: InitializeDerivedDataSet()
  nameWithType: DataSet.InitializeDerivedDataSet()
  fullName: System.Data.DataSet.InitializeDerivedDataSet()
- uid: System.Data.DataSet.IsBinarySerialized(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  parent: System.Data.DataSet
  isExternal: false
  name: IsBinarySerialized(SerializationInfo,StreamingContext)
  nameWithType: DataSet.IsBinarySerialized(SerializationInfo,StreamingContext)
  fullName: System.Data.DataSet.IsBinarySerialized(SerializationInfo,StreamingContext)
- uid: System.Data.DataSet.IsInitialized
  parent: System.Data.DataSet
  isExternal: false
  name: IsInitialized
  nameWithType: DataSet.IsInitialized
  fullName: System.Data.DataSet.IsInitialized
- uid: System.Data.DataSet.Load(System.Data.IDataReader,System.Data.LoadOption,System.Data.DataTable[])
  parent: System.Data.DataSet
  isExternal: false
  name: Load(IDataReader,LoadOption,DataTable[])
  nameWithType: DataSet.Load(IDataReader,LoadOption,DataTable[])
  fullName: System.Data.DataSet.Load(IDataReader,LoadOption,DataTable[])
- uid: System.Data.IDataReader
  parent: System.Data
  isExternal: false
  name: IDataReader
  nameWithType: IDataReader
  fullName: System.Data.IDataReader
- uid: System.Data.LoadOption
  parent: System.Data
  isExternal: false
  name: LoadOption
  nameWithType: LoadOption
  fullName: System.Data.LoadOption
- uid: System.Data.DataSet.Load(System.Data.IDataReader,System.Data.LoadOption,System.String[])
  parent: System.Data.DataSet
  isExternal: false
  name: Load(IDataReader,LoadOption,String[])
  nameWithType: DataSet.Load(IDataReader,LoadOption,String[])
  fullName: System.Data.DataSet.Load(IDataReader,LoadOption,String[])
- uid: System.Data.DataSet.Load(System.Data.IDataReader,System.Data.LoadOption,System.Data.FillErrorEventHandler,System.Data.DataTable[])
  parent: System.Data.DataSet
  isExternal: false
  name: Load(IDataReader,LoadOption,FillErrorEventHandler,DataTable[])
  nameWithType: DataSet.Load(IDataReader,LoadOption,FillErrorEventHandler,DataTable[])
  fullName: System.Data.DataSet.Load(IDataReader,LoadOption,FillErrorEventHandler,DataTable[])
- uid: System.Data.FillErrorEventHandler
  parent: System.Data
  isExternal: false
  name: FillErrorEventHandler
  nameWithType: FillErrorEventHandler
  fullName: System.Data.FillErrorEventHandler
- uid: System.Data.DataSet.Locale
  parent: System.Data.DataSet
  isExternal: false
  name: Locale
  nameWithType: DataSet.Locale
  fullName: System.Data.DataSet.Locale
- uid: System.Globalization.CultureInfo
  parent: System.Globalization
  isExternal: true
  name: CultureInfo
  nameWithType: CultureInfo
  fullName: System.Globalization.CultureInfo
- uid: System.Data.DataSet.Merge(System.Data.DataRow[])
  parent: System.Data.DataSet
  isExternal: false
  name: Merge(DataRow[])
  nameWithType: DataSet.Merge(DataRow[])
  fullName: System.Data.DataSet.Merge(DataRow[])
- uid: System.Data.DataRow[]
  parent: System.Data
  isExternal: false
  name: DataRow
  nameWithType: DataRow
  fullName: System.Data.DataRow[]
  spec.csharp:
  - uid: System.Data.DataRow
    name: DataRow
    nameWithType: DataRow
    fullName: DataRow[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Data.DataSet.Merge(System.Data.DataSet)
  parent: System.Data.DataSet
  isExternal: false
  name: Merge(DataSet)
  nameWithType: DataSet.Merge(DataSet)
  fullName: System.Data.DataSet.Merge(DataSet)
- uid: System.Data.DataSet.Merge(System.Data.DataTable)
  parent: System.Data.DataSet
  isExternal: false
  name: Merge(DataTable)
  nameWithType: DataSet.Merge(DataTable)
  fullName: System.Data.DataSet.Merge(DataTable)
- uid: System.Data.DataTable
  parent: System.Data
  isExternal: false
  name: DataTable
  nameWithType: DataTable
  fullName: System.Data.DataTable
- uid: System.Data.DataSet.Merge(System.Data.DataSet,System.Boolean)
  parent: System.Data.DataSet
  isExternal: false
  name: Merge(DataSet,Boolean)
  nameWithType: DataSet.Merge(DataSet,Boolean)
  fullName: System.Data.DataSet.Merge(DataSet,Boolean)
- uid: System.Data.DataSet.Merge(System.Data.DataRow[],System.Boolean,System.Data.MissingSchemaAction)
  parent: System.Data.DataSet
  isExternal: false
  name: Merge(DataRow[],Boolean,MissingSchemaAction)
  nameWithType: DataSet.Merge(DataRow[],Boolean,MissingSchemaAction)
  fullName: System.Data.DataSet.Merge(DataRow[],Boolean,MissingSchemaAction)
- uid: System.Data.MissingSchemaAction
  parent: System.Data
  isExternal: false
  name: MissingSchemaAction
  nameWithType: MissingSchemaAction
  fullName: System.Data.MissingSchemaAction
- uid: System.Data.DataSet.Merge(System.Data.DataSet,System.Boolean,System.Data.MissingSchemaAction)
  parent: System.Data.DataSet
  isExternal: false
  name: Merge(DataSet,Boolean,MissingSchemaAction)
  nameWithType: DataSet.Merge(DataSet,Boolean,MissingSchemaAction)
  fullName: System.Data.DataSet.Merge(DataSet,Boolean,MissingSchemaAction)
- uid: System.Data.DataSet.Merge(System.Data.DataTable,System.Boolean,System.Data.MissingSchemaAction)
  parent: System.Data.DataSet
  isExternal: false
  name: Merge(DataTable,Boolean,MissingSchemaAction)
  nameWithType: DataSet.Merge(DataTable,Boolean,MissingSchemaAction)
  fullName: System.Data.DataSet.Merge(DataTable,Boolean,MissingSchemaAction)
- uid: System.Data.DataSet.MergeFailed
  parent: System.Data.DataSet
  isExternal: false
  name: MergeFailed
  nameWithType: DataSet.MergeFailed
  fullName: System.Data.DataSet.MergeFailed
- uid: System.Data.MergeFailedEventHandler
  parent: System.Data
  isExternal: false
  name: MergeFailedEventHandler
  nameWithType: MergeFailedEventHandler
  fullName: System.Data.MergeFailedEventHandler
- uid: System.Data.DataSet.Namespace
  parent: System.Data.DataSet
  isExternal: false
  name: Namespace
  nameWithType: DataSet.Namespace
  fullName: System.Data.DataSet.Namespace
- uid: System.Data.DataSet.OnPropertyChanging(System.ComponentModel.PropertyChangedEventArgs)
  parent: System.Data.DataSet
  isExternal: false
  name: OnPropertyChanging(PropertyChangedEventArgs)
  nameWithType: DataSet.OnPropertyChanging(PropertyChangedEventArgs)
  fullName: System.Data.DataSet.OnPropertyChanging(PropertyChangedEventArgs)
- uid: System.ComponentModel.PropertyChangedEventArgs
  parent: System.ComponentModel
  isExternal: true
  name: PropertyChangedEventArgs
  nameWithType: PropertyChangedEventArgs
  fullName: System.ComponentModel.PropertyChangedEventArgs
- uid: System.Data.DataSet.OnRemoveRelation(System.Data.DataRelation)
  parent: System.Data.DataSet
  isExternal: false
  name: OnRemoveRelation(DataRelation)
  nameWithType: DataSet.OnRemoveRelation(DataRelation)
  fullName: System.Data.DataSet.OnRemoveRelation(DataRelation)
- uid: System.Data.DataRelation
  parent: System.Data
  isExternal: false
  name: DataRelation
  nameWithType: DataRelation
  fullName: System.Data.DataRelation
- uid: System.Data.DataSet.OnRemoveTable(System.Data.DataTable)
  parent: System.Data.DataSet
  isExternal: false
  name: OnRemoveTable(DataTable)
  nameWithType: DataSet.OnRemoveTable(DataTable)
  fullName: System.Data.DataSet.OnRemoveTable(DataTable)
- uid: System.Data.DataSet.Prefix
  parent: System.Data.DataSet
  isExternal: false
  name: Prefix
  nameWithType: DataSet.Prefix
  fullName: System.Data.DataSet.Prefix
- uid: System.Data.DataSet.RaisePropertyChanging(System.String)
  parent: System.Data.DataSet
  isExternal: false
  name: RaisePropertyChanging(String)
  nameWithType: DataSet.RaisePropertyChanging(String)
  fullName: System.Data.DataSet.RaisePropertyChanging(String)
- uid: System.Data.DataSet.ReadXml(System.IO.Stream)
  parent: System.Data.DataSet
  isExternal: false
  name: ReadXml(Stream)
  nameWithType: DataSet.ReadXml(Stream)
  fullName: System.Data.DataSet.ReadXml(Stream)
- uid: System.Data.XmlReadMode
  parent: System.Data
  isExternal: false
  name: XmlReadMode
  nameWithType: XmlReadMode
  fullName: System.Data.XmlReadMode
- uid: System.Data.DataSet.ReadXml(System.IO.TextReader)
  parent: System.Data.DataSet
  isExternal: false
  name: ReadXml(TextReader)
  nameWithType: DataSet.ReadXml(TextReader)
  fullName: System.Data.DataSet.ReadXml(TextReader)
- uid: System.Data.DataSet.ReadXml(System.String)
  parent: System.Data.DataSet
  isExternal: false
  name: ReadXml(String)
  nameWithType: DataSet.ReadXml(String)
  fullName: System.Data.DataSet.ReadXml(String)
- uid: System.Data.DataSet.ReadXml(System.Xml.XmlReader)
  parent: System.Data.DataSet
  isExternal: false
  name: ReadXml(XmlReader)
  nameWithType: DataSet.ReadXml(XmlReader)
  fullName: System.Data.DataSet.ReadXml(XmlReader)
- uid: System.Data.DataSet.ReadXml(System.IO.Stream,System.Data.XmlReadMode)
  parent: System.Data.DataSet
  isExternal: false
  name: ReadXml(Stream,XmlReadMode)
  nameWithType: DataSet.ReadXml(Stream,XmlReadMode)
  fullName: System.Data.DataSet.ReadXml(Stream,XmlReadMode)
- uid: System.Data.DataSet.ReadXml(System.IO.TextReader,System.Data.XmlReadMode)
  parent: System.Data.DataSet
  isExternal: false
  name: ReadXml(TextReader,XmlReadMode)
  nameWithType: DataSet.ReadXml(TextReader,XmlReadMode)
  fullName: System.Data.DataSet.ReadXml(TextReader,XmlReadMode)
- uid: System.Data.DataSet.ReadXml(System.String,System.Data.XmlReadMode)
  parent: System.Data.DataSet
  isExternal: false
  name: ReadXml(String,XmlReadMode)
  nameWithType: DataSet.ReadXml(String,XmlReadMode)
  fullName: System.Data.DataSet.ReadXml(String,XmlReadMode)
- uid: System.Data.DataSet.ReadXml(System.Xml.XmlReader,System.Data.XmlReadMode)
  parent: System.Data.DataSet
  isExternal: false
  name: ReadXml(XmlReader,XmlReadMode)
  nameWithType: DataSet.ReadXml(XmlReader,XmlReadMode)
  fullName: System.Data.DataSet.ReadXml(XmlReader,XmlReadMode)
- uid: System.Data.DataSet.ReadXmlSchema(System.IO.Stream)
  parent: System.Data.DataSet
  isExternal: false
  name: ReadXmlSchema(Stream)
  nameWithType: DataSet.ReadXmlSchema(Stream)
  fullName: System.Data.DataSet.ReadXmlSchema(Stream)
- uid: System.Data.DataSet.ReadXmlSchema(System.IO.TextReader)
  parent: System.Data.DataSet
  isExternal: false
  name: ReadXmlSchema(TextReader)
  nameWithType: DataSet.ReadXmlSchema(TextReader)
  fullName: System.Data.DataSet.ReadXmlSchema(TextReader)
- uid: System.Data.DataSet.ReadXmlSchema(System.String)
  parent: System.Data.DataSet
  isExternal: false
  name: ReadXmlSchema(String)
  nameWithType: DataSet.ReadXmlSchema(String)
  fullName: System.Data.DataSet.ReadXmlSchema(String)
- uid: System.Data.DataSet.ReadXmlSchema(System.Xml.XmlReader)
  parent: System.Data.DataSet
  isExternal: false
  name: ReadXmlSchema(XmlReader)
  nameWithType: DataSet.ReadXmlSchema(XmlReader)
  fullName: System.Data.DataSet.ReadXmlSchema(XmlReader)
- uid: System.Data.DataSet.ReadXmlSerializable(System.Xml.XmlReader)
  parent: System.Data.DataSet
  isExternal: false
  name: ReadXmlSerializable(XmlReader)
  nameWithType: DataSet.ReadXmlSerializable(XmlReader)
  fullName: System.Data.DataSet.ReadXmlSerializable(XmlReader)
- uid: System.Data.DataSet.RejectChanges
  parent: System.Data.DataSet
  isExternal: false
  name: RejectChanges()
  nameWithType: DataSet.RejectChanges()
  fullName: System.Data.DataSet.RejectChanges()
- uid: System.Data.DataSet.Relations
  parent: System.Data.DataSet
  isExternal: false
  name: Relations
  nameWithType: DataSet.Relations
  fullName: System.Data.DataSet.Relations
- uid: System.Data.DataRelationCollection
  parent: System.Data
  isExternal: false
  name: DataRelationCollection
  nameWithType: DataRelationCollection
  fullName: System.Data.DataRelationCollection
- uid: System.Data.DataSet.RemotingFormat
  parent: System.Data.DataSet
  isExternal: false
  name: RemotingFormat
  nameWithType: DataSet.RemotingFormat
  fullName: System.Data.DataSet.RemotingFormat
- uid: System.Data.SerializationFormat
  parent: System.Data
  isExternal: false
  name: SerializationFormat
  nameWithType: SerializationFormat
  fullName: System.Data.SerializationFormat
- uid: System.Data.DataSet.Reset
  parent: System.Data.DataSet
  isExternal: false
  name: Reset()
  nameWithType: DataSet.Reset()
  fullName: System.Data.DataSet.Reset()
- uid: System.Data.DataSet.SchemaSerializationMode
  parent: System.Data.DataSet
  isExternal: false
  name: SchemaSerializationMode
  nameWithType: DataSet.SchemaSerializationMode
  fullName: System.Data.DataSet.SchemaSerializationMode
- uid: System.Data.DataSet.ShouldSerializeRelations
  parent: System.Data.DataSet
  isExternal: false
  name: ShouldSerializeRelations()
  nameWithType: DataSet.ShouldSerializeRelations()
  fullName: System.Data.DataSet.ShouldSerializeRelations()
- uid: System.Data.DataSet.ShouldSerializeTables
  parent: System.Data.DataSet
  isExternal: false
  name: ShouldSerializeTables()
  nameWithType: DataSet.ShouldSerializeTables()
  fullName: System.Data.DataSet.ShouldSerializeTables()
- uid: System.Data.DataSet.Site
  parent: System.Data.DataSet
  isExternal: false
  name: Site
  nameWithType: DataSet.Site
  fullName: System.Data.DataSet.Site
- uid: System.ComponentModel.ISite
  parent: System.ComponentModel
  isExternal: false
  name: ISite
  nameWithType: ISite
  fullName: System.ComponentModel.ISite
- uid: System.Data.DataSet.System#ComponentModel#IListSource#ContainsListCollection
  parent: System.Data.DataSet
  isExternal: false
  name: System.ComponentModel.IListSource.ContainsListCollection
  nameWithType: DataSet.System.ComponentModel.IListSource.ContainsListCollection
  fullName: System.Data.DataSet.System.ComponentModel.IListSource.ContainsListCollection
- uid: System.Data.DataSet.System#ComponentModel#IListSource#GetList
  parent: System.Data.DataSet
  isExternal: false
  name: System.ComponentModel.IListSource.GetList()
  nameWithType: DataSet.System.ComponentModel.IListSource.GetList()
  fullName: System.Data.DataSet.System.ComponentModel.IListSource.GetList()
- uid: System.Collections.IList
  parent: System.Collections
  isExternal: true
  name: IList
  nameWithType: IList
  fullName: System.Collections.IList
- uid: System.Data.DataSet.System#Xml#Serialization#IXmlSerializable#GetSchema
  parent: System.Data.DataSet
  isExternal: false
  name: System.Xml.Serialization.IXmlSerializable.GetSchema()
  nameWithType: DataSet.System.Xml.Serialization.IXmlSerializable.GetSchema()
  fullName: System.Data.DataSet.System.Xml.Serialization.IXmlSerializable.GetSchema()
- uid: System.Data.DataSet.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)
  parent: System.Data.DataSet
  isExternal: false
  name: System.Xml.Serialization.IXmlSerializable.ReadXml(XmlReader)
  nameWithType: DataSet.System.Xml.Serialization.IXmlSerializable.ReadXml(XmlReader)
  fullName: System.Data.DataSet.System.Xml.Serialization.IXmlSerializable.ReadXml(XmlReader)
- uid: System.Data.DataSet.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)
  parent: System.Data.DataSet
  isExternal: false
  name: System.Xml.Serialization.IXmlSerializable.WriteXml(XmlWriter)
  nameWithType: DataSet.System.Xml.Serialization.IXmlSerializable.WriteXml(XmlWriter)
  fullName: System.Data.DataSet.System.Xml.Serialization.IXmlSerializable.WriteXml(XmlWriter)
- uid: System.Xml.XmlWriter
  parent: System.Xml
  isExternal: true
  name: XmlWriter
  nameWithType: XmlWriter
  fullName: System.Xml.XmlWriter
- uid: System.Data.DataSet.Tables
  parent: System.Data.DataSet
  isExternal: false
  name: Tables
  nameWithType: DataSet.Tables
  fullName: System.Data.DataSet.Tables
- uid: System.Data.DataTableCollection
  parent: System.Data
  isExternal: false
  name: DataTableCollection
  nameWithType: DataTableCollection
  fullName: System.Data.DataTableCollection
- uid: System.Data.DataSet.WriteXml(System.IO.Stream)
  parent: System.Data.DataSet
  isExternal: false
  name: WriteXml(Stream)
  nameWithType: DataSet.WriteXml(Stream)
  fullName: System.Data.DataSet.WriteXml(Stream)
- uid: System.Data.DataSet.WriteXml(System.IO.TextWriter)
  parent: System.Data.DataSet
  isExternal: false
  name: WriteXml(TextWriter)
  nameWithType: DataSet.WriteXml(TextWriter)
  fullName: System.Data.DataSet.WriteXml(TextWriter)
- uid: System.IO.TextWriter
  parent: System.IO
  isExternal: true
  name: TextWriter
  nameWithType: TextWriter
  fullName: System.IO.TextWriter
- uid: System.Data.DataSet.WriteXml(System.String)
  parent: System.Data.DataSet
  isExternal: false
  name: WriteXml(String)
  nameWithType: DataSet.WriteXml(String)
  fullName: System.Data.DataSet.WriteXml(String)
- uid: System.Data.DataSet.WriteXml(System.Xml.XmlWriter)
  parent: System.Data.DataSet
  isExternal: false
  name: WriteXml(XmlWriter)
  nameWithType: DataSet.WriteXml(XmlWriter)
  fullName: System.Data.DataSet.WriteXml(XmlWriter)
- uid: System.Data.DataSet.WriteXml(System.IO.Stream,System.Data.XmlWriteMode)
  parent: System.Data.DataSet
  isExternal: false
  name: WriteXml(Stream,XmlWriteMode)
  nameWithType: DataSet.WriteXml(Stream,XmlWriteMode)
  fullName: System.Data.DataSet.WriteXml(Stream,XmlWriteMode)
- uid: System.Data.XmlWriteMode
  parent: System.Data
  isExternal: false
  name: XmlWriteMode
  nameWithType: XmlWriteMode
  fullName: System.Data.XmlWriteMode
- uid: System.Data.DataSet.WriteXml(System.IO.TextWriter,System.Data.XmlWriteMode)
  parent: System.Data.DataSet
  isExternal: false
  name: WriteXml(TextWriter,XmlWriteMode)
  nameWithType: DataSet.WriteXml(TextWriter,XmlWriteMode)
  fullName: System.Data.DataSet.WriteXml(TextWriter,XmlWriteMode)
- uid: System.Data.DataSet.WriteXml(System.String,System.Data.XmlWriteMode)
  parent: System.Data.DataSet
  isExternal: false
  name: WriteXml(String,XmlWriteMode)
  nameWithType: DataSet.WriteXml(String,XmlWriteMode)
  fullName: System.Data.DataSet.WriteXml(String,XmlWriteMode)
- uid: System.Data.DataSet.WriteXml(System.Xml.XmlWriter,System.Data.XmlWriteMode)
  parent: System.Data.DataSet
  isExternal: false
  name: WriteXml(XmlWriter,XmlWriteMode)
  nameWithType: DataSet.WriteXml(XmlWriter,XmlWriteMode)
  fullName: System.Data.DataSet.WriteXml(XmlWriter,XmlWriteMode)
- uid: System.Data.DataSet.WriteXmlSchema(System.IO.Stream)
  parent: System.Data.DataSet
  isExternal: false
  name: WriteXmlSchema(Stream)
  nameWithType: DataSet.WriteXmlSchema(Stream)
  fullName: System.Data.DataSet.WriteXmlSchema(Stream)
- uid: System.Data.DataSet.WriteXmlSchema(System.IO.TextWriter)
  parent: System.Data.DataSet
  isExternal: false
  name: WriteXmlSchema(TextWriter)
  nameWithType: DataSet.WriteXmlSchema(TextWriter)
  fullName: System.Data.DataSet.WriteXmlSchema(TextWriter)
- uid: System.Data.DataSet.WriteXmlSchema(System.String)
  parent: System.Data.DataSet
  isExternal: false
  name: WriteXmlSchema(String)
  nameWithType: DataSet.WriteXmlSchema(String)
  fullName: System.Data.DataSet.WriteXmlSchema(String)
- uid: System.Data.DataSet.WriteXmlSchema(System.Xml.XmlWriter)
  parent: System.Data.DataSet
  isExternal: false
  name: WriteXmlSchema(XmlWriter)
  nameWithType: DataSet.WriteXmlSchema(XmlWriter)
  fullName: System.Data.DataSet.WriteXmlSchema(XmlWriter)
- uid: System.Data.DataSet.WriteXmlSchema(System.IO.Stream,System.Converter{System.Type,System.String})
  parent: System.Data.DataSet
  isExternal: false
  name: WriteXmlSchema(Stream,Converter<Type,String>)
  nameWithType: DataSet.WriteXmlSchema(Stream,Converter<Type,String>)
  fullName: System.Data.DataSet.WriteXmlSchema(Stream,Converter<Type,String>)
- uid: System.Converter{System.Type,System.String}
  parent: System
  isExternal: false
  name: Converter<Type,String>
  nameWithType: Converter<Type,String>
  fullName: System.Converter<System.Type,System.String>
  spec.csharp:
  - uid: System.Converter`2
    name: Converter
    nameWithType: Converter
    fullName: Converter<System.Type,System.String>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: Type
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Data.DataSet.WriteXmlSchema(System.IO.TextWriter,System.Converter{System.Type,System.String})
  parent: System.Data.DataSet
  isExternal: false
  name: WriteXmlSchema(TextWriter,Converter<Type,String>)
  nameWithType: DataSet.WriteXmlSchema(TextWriter,Converter<Type,String>)
  fullName: System.Data.DataSet.WriteXmlSchema(TextWriter,Converter<Type,String>)
- uid: System.Data.DataSet.WriteXmlSchema(System.String,System.Converter{System.Type,System.String})
  parent: System.Data.DataSet
  isExternal: false
  name: WriteXmlSchema(String,Converter<Type,String>)
  nameWithType: DataSet.WriteXmlSchema(String,Converter<Type,String>)
  fullName: System.Data.DataSet.WriteXmlSchema(String,Converter<Type,String>)
- uid: System.Data.DataSet.WriteXmlSchema(System.Xml.XmlWriter,System.Converter{System.Type,System.String})
  parent: System.Data.DataSet
  isExternal: false
  name: WriteXmlSchema(XmlWriter,Converter<Type,String>)
  nameWithType: DataSet.WriteXmlSchema(XmlWriter,Converter<Type,String>)
  fullName: System.Data.DataSet.WriteXmlSchema(XmlWriter,Converter<Type,String>)
- uid: System.Data.DataSet.#ctor*
  parent: System.Data.DataSet
  isExternal: false
  name: DataSet
  nameWithType: DataSet.DataSet
- uid: System.Data.DataSet.AcceptChanges*
  parent: System.Data.DataSet
  isExternal: false
  name: AcceptChanges
  nameWithType: DataSet.AcceptChanges
- uid: System.Data.DataSet.BeginInit*
  parent: System.Data.DataSet
  isExternal: false
  name: BeginInit
  nameWithType: DataSet.BeginInit
- uid: System.Data.DataSet.CaseSensitive*
  parent: System.Data.DataSet
  isExternal: false
  name: CaseSensitive
  nameWithType: DataSet.CaseSensitive
- uid: System.Data.DataSet.Clear*
  parent: System.Data.DataSet
  isExternal: false
  name: Clear
  nameWithType: DataSet.Clear
- uid: System.Data.DataSet.Clone*
  parent: System.Data.DataSet
  isExternal: false
  name: Clone
  nameWithType: DataSet.Clone
- uid: System.Data.DataSet.Copy*
  parent: System.Data.DataSet
  isExternal: false
  name: Copy
  nameWithType: DataSet.Copy
- uid: System.Data.DataSet.CreateDataReader*
  parent: System.Data.DataSet
  isExternal: false
  name: CreateDataReader
  nameWithType: DataSet.CreateDataReader
- uid: System.Data.DataSet.DataSetName*
  parent: System.Data.DataSet
  isExternal: false
  name: DataSetName
  nameWithType: DataSet.DataSetName
- uid: System.Data.DataSet.DefaultViewManager*
  parent: System.Data.DataSet
  isExternal: false
  name: DefaultViewManager
  nameWithType: DataSet.DefaultViewManager
- uid: System.Data.DataSet.DetermineSchemaSerializationMode*
  parent: System.Data.DataSet
  isExternal: false
  name: DetermineSchemaSerializationMode
  nameWithType: DataSet.DetermineSchemaSerializationMode
- uid: System.Data.DataSet.EndInit*
  parent: System.Data.DataSet
  isExternal: false
  name: EndInit
  nameWithType: DataSet.EndInit
- uid: System.Data.DataSet.EnforceConstraints*
  parent: System.Data.DataSet
  isExternal: false
  name: EnforceConstraints
  nameWithType: DataSet.EnforceConstraints
- uid: System.Data.DataSet.ExtendedProperties*
  parent: System.Data.DataSet
  isExternal: false
  name: ExtendedProperties
  nameWithType: DataSet.ExtendedProperties
- uid: System.Data.DataSet.GetChanges*
  parent: System.Data.DataSet
  isExternal: false
  name: GetChanges
  nameWithType: DataSet.GetChanges
- uid: System.Data.DataSet.GetDataSetSchema*
  parent: System.Data.DataSet
  isExternal: false
  name: GetDataSetSchema
  nameWithType: DataSet.GetDataSetSchema
- uid: System.Data.DataSet.GetObjectData*
  parent: System.Data.DataSet
  isExternal: false
  name: GetObjectData
  nameWithType: DataSet.GetObjectData
- uid: System.Data.DataSet.GetSchemaSerializable*
  parent: System.Data.DataSet
  isExternal: false
  name: GetSchemaSerializable
  nameWithType: DataSet.GetSchemaSerializable
- uid: System.Data.DataSet.GetSerializationData*
  parent: System.Data.DataSet
  isExternal: false
  name: GetSerializationData
  nameWithType: DataSet.GetSerializationData
- uid: System.Data.DataSet.GetXml*
  parent: System.Data.DataSet
  isExternal: false
  name: GetXml
  nameWithType: DataSet.GetXml
- uid: System.Data.DataSet.GetXmlSchema*
  parent: System.Data.DataSet
  isExternal: false
  name: GetXmlSchema
  nameWithType: DataSet.GetXmlSchema
- uid: System.Data.DataSet.HasChanges*
  parent: System.Data.DataSet
  isExternal: false
  name: HasChanges
  nameWithType: DataSet.HasChanges
- uid: System.Data.DataSet.HasErrors*
  parent: System.Data.DataSet
  isExternal: false
  name: HasErrors
  nameWithType: DataSet.HasErrors
- uid: System.Data.DataSet.InferXmlSchema*
  parent: System.Data.DataSet
  isExternal: false
  name: InferXmlSchema
  nameWithType: DataSet.InferXmlSchema
- uid: System.Data.DataSet.InitializeDerivedDataSet*
  parent: System.Data.DataSet
  isExternal: false
  name: InitializeDerivedDataSet
  nameWithType: DataSet.InitializeDerivedDataSet
- uid: System.Data.DataSet.IsBinarySerialized*
  parent: System.Data.DataSet
  isExternal: false
  name: IsBinarySerialized
  nameWithType: DataSet.IsBinarySerialized
- uid: System.Data.DataSet.IsInitialized*
  parent: System.Data.DataSet
  isExternal: false
  name: IsInitialized
  nameWithType: DataSet.IsInitialized
- uid: System.Data.DataSet.Load*
  parent: System.Data.DataSet
  isExternal: false
  name: Load
  nameWithType: DataSet.Load
- uid: System.Data.DataSet.Locale*
  parent: System.Data.DataSet
  isExternal: false
  name: Locale
  nameWithType: DataSet.Locale
- uid: System.Data.DataSet.Merge*
  parent: System.Data.DataSet
  isExternal: false
  name: Merge
  nameWithType: DataSet.Merge
- uid: System.Data.DataSet.Namespace*
  parent: System.Data.DataSet
  isExternal: false
  name: Namespace
  nameWithType: DataSet.Namespace
- uid: System.Data.DataSet.OnPropertyChanging*
  parent: System.Data.DataSet
  isExternal: false
  name: OnPropertyChanging
  nameWithType: DataSet.OnPropertyChanging
- uid: System.Data.DataSet.OnRemoveRelation*
  parent: System.Data.DataSet
  isExternal: false
  name: OnRemoveRelation
  nameWithType: DataSet.OnRemoveRelation
- uid: System.Data.DataSet.OnRemoveTable*
  parent: System.Data.DataSet
  isExternal: false
  name: OnRemoveTable
  nameWithType: DataSet.OnRemoveTable
- uid: System.Data.DataSet.Prefix*
  parent: System.Data.DataSet
  isExternal: false
  name: Prefix
  nameWithType: DataSet.Prefix
- uid: System.Data.DataSet.RaisePropertyChanging*
  parent: System.Data.DataSet
  isExternal: false
  name: RaisePropertyChanging
  nameWithType: DataSet.RaisePropertyChanging
- uid: System.Data.DataSet.ReadXml*
  parent: System.Data.DataSet
  isExternal: false
  name: ReadXml
  nameWithType: DataSet.ReadXml
- uid: System.Data.DataSet.ReadXmlSchema*
  parent: System.Data.DataSet
  isExternal: false
  name: ReadXmlSchema
  nameWithType: DataSet.ReadXmlSchema
- uid: System.Data.DataSet.ReadXmlSerializable*
  parent: System.Data.DataSet
  isExternal: false
  name: ReadXmlSerializable
  nameWithType: DataSet.ReadXmlSerializable
- uid: System.Data.DataSet.RejectChanges*
  parent: System.Data.DataSet
  isExternal: false
  name: RejectChanges
  nameWithType: DataSet.RejectChanges
- uid: System.Data.DataSet.Relations*
  parent: System.Data.DataSet
  isExternal: false
  name: Relations
  nameWithType: DataSet.Relations
- uid: System.Data.DataSet.RemotingFormat*
  parent: System.Data.DataSet
  isExternal: false
  name: RemotingFormat
  nameWithType: DataSet.RemotingFormat
- uid: System.Data.DataSet.Reset*
  parent: System.Data.DataSet
  isExternal: false
  name: Reset
  nameWithType: DataSet.Reset
- uid: System.Data.DataSet.SchemaSerializationMode*
  parent: System.Data.DataSet
  isExternal: false
  name: SchemaSerializationMode
  nameWithType: DataSet.SchemaSerializationMode
- uid: System.Data.DataSet.ShouldSerializeRelations*
  parent: System.Data.DataSet
  isExternal: false
  name: ShouldSerializeRelations
  nameWithType: DataSet.ShouldSerializeRelations
- uid: System.Data.DataSet.ShouldSerializeTables*
  parent: System.Data.DataSet
  isExternal: false
  name: ShouldSerializeTables
  nameWithType: DataSet.ShouldSerializeTables
- uid: System.Data.DataSet.Site*
  parent: System.Data.DataSet
  isExternal: false
  name: Site
  nameWithType: DataSet.Site
- uid: System.Data.DataSet.System#ComponentModel#IListSource#ContainsListCollection*
  parent: System.Data.DataSet
  isExternal: false
  name: System.ComponentModel.IListSource.ContainsListCollection
  nameWithType: DataSet.System.ComponentModel.IListSource.ContainsListCollection
- uid: System.Data.DataSet.System#ComponentModel#IListSource#GetList*
  parent: System.Data.DataSet
  isExternal: false
  name: System.ComponentModel.IListSource.GetList
  nameWithType: DataSet.System.ComponentModel.IListSource.GetList
- uid: System.Data.DataSet.System#Xml#Serialization#IXmlSerializable#GetSchema*
  parent: System.Data.DataSet
  isExternal: false
  name: System.Xml.Serialization.IXmlSerializable.GetSchema
  nameWithType: DataSet.System.Xml.Serialization.IXmlSerializable.GetSchema
- uid: System.Data.DataSet.System#Xml#Serialization#IXmlSerializable#ReadXml*
  parent: System.Data.DataSet
  isExternal: false
  name: System.Xml.Serialization.IXmlSerializable.ReadXml
  nameWithType: DataSet.System.Xml.Serialization.IXmlSerializable.ReadXml
- uid: System.Data.DataSet.System#Xml#Serialization#IXmlSerializable#WriteXml*
  parent: System.Data.DataSet
  isExternal: false
  name: System.Xml.Serialization.IXmlSerializable.WriteXml
  nameWithType: DataSet.System.Xml.Serialization.IXmlSerializable.WriteXml
- uid: System.Data.DataSet.Tables*
  parent: System.Data.DataSet
  isExternal: false
  name: Tables
  nameWithType: DataSet.Tables
- uid: System.Data.DataSet.WriteXml*
  parent: System.Data.DataSet
  isExternal: false
  name: WriteXml
  nameWithType: DataSet.WriteXml
- uid: System.Data.DataSet.WriteXmlSchema*
  parent: System.Data.DataSet
  isExternal: false
  name: WriteXmlSchema
  nameWithType: DataSet.WriteXmlSchema
