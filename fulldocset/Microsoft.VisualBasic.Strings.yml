### YamlMime:ManagedReference
items:
- uid: Microsoft.VisualBasic.Strings
  id: Strings
  children:
  - Microsoft.VisualBasic.Strings.Asc(System.Char)
  - Microsoft.VisualBasic.Strings.Asc(System.String)
  - Microsoft.VisualBasic.Strings.AscW(System.Char)
  - Microsoft.VisualBasic.Strings.AscW(System.String)
  - Microsoft.VisualBasic.Strings.Chr(System.Int32)
  - Microsoft.VisualBasic.Strings.ChrW(System.Int32)
  - Microsoft.VisualBasic.Strings.Filter(System.Object[],System.String,System.Boolean,Microsoft.VisualBasic.CompareMethod)
  - Microsoft.VisualBasic.Strings.Filter(System.String[],System.String,System.Boolean,Microsoft.VisualBasic.CompareMethod)
  - Microsoft.VisualBasic.Strings.Format(System.Object,System.String)
  - Microsoft.VisualBasic.Strings.FormatCurrency(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)
  - Microsoft.VisualBasic.Strings.FormatDateTime(System.DateTime,Microsoft.VisualBasic.DateFormat)
  - Microsoft.VisualBasic.Strings.FormatNumber(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)
  - Microsoft.VisualBasic.Strings.FormatPercent(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)
  - Microsoft.VisualBasic.Strings.GetChar(System.String,System.Int32)
  - Microsoft.VisualBasic.Strings.InStr(System.String,System.String,Microsoft.VisualBasic.CompareMethod)
  - Microsoft.VisualBasic.Strings.InStr(System.Int32,System.String,System.String,Microsoft.VisualBasic.CompareMethod)
  - Microsoft.VisualBasic.Strings.InStrRev(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)
  - Microsoft.VisualBasic.Strings.Join(System.Object[],System.String)
  - Microsoft.VisualBasic.Strings.Join(System.String[],System.String)
  - Microsoft.VisualBasic.Strings.LCase(System.Char)
  - Microsoft.VisualBasic.Strings.LCase(System.String)
  - Microsoft.VisualBasic.Strings.Left(System.String,System.Int32)
  - Microsoft.VisualBasic.Strings.Len(System.Boolean)
  - Microsoft.VisualBasic.Strings.Len(System.Byte)
  - Microsoft.VisualBasic.Strings.Len(System.Char)
  - Microsoft.VisualBasic.Strings.Len(System.DateTime)
  - Microsoft.VisualBasic.Strings.Len(System.Decimal)
  - Microsoft.VisualBasic.Strings.Len(System.Double)
  - Microsoft.VisualBasic.Strings.Len(System.Int16)
  - Microsoft.VisualBasic.Strings.Len(System.Int32)
  - Microsoft.VisualBasic.Strings.Len(System.Int64)
  - Microsoft.VisualBasic.Strings.Len(System.Object)
  - Microsoft.VisualBasic.Strings.Len(System.SByte)
  - Microsoft.VisualBasic.Strings.Len(System.Single)
  - Microsoft.VisualBasic.Strings.Len(System.String)
  - Microsoft.VisualBasic.Strings.Len(System.UInt16)
  - Microsoft.VisualBasic.Strings.Len(System.UInt32)
  - Microsoft.VisualBasic.Strings.Len(System.UInt64)
  - Microsoft.VisualBasic.Strings.LSet(System.String,System.Int32)
  - Microsoft.VisualBasic.Strings.LTrim(System.String)
  - Microsoft.VisualBasic.Strings.Mid(System.String,System.Int32)
  - Microsoft.VisualBasic.Strings.Mid(System.String,System.Int32,System.Int32)
  - Microsoft.VisualBasic.Strings.Replace(System.String,System.String,System.String,System.Int32,System.Int32,Microsoft.VisualBasic.CompareMethod)
  - Microsoft.VisualBasic.Strings.Right(System.String,System.Int32)
  - Microsoft.VisualBasic.Strings.RSet(System.String,System.Int32)
  - Microsoft.VisualBasic.Strings.RTrim(System.String)
  - Microsoft.VisualBasic.Strings.Space(System.Int32)
  - Microsoft.VisualBasic.Strings.Split(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)
  - Microsoft.VisualBasic.Strings.StrComp(System.String,System.String,Microsoft.VisualBasic.CompareMethod)
  - Microsoft.VisualBasic.Strings.StrConv(System.String,Microsoft.VisualBasic.VbStrConv,System.Int32)
  - Microsoft.VisualBasic.Strings.StrDup(System.Int32,System.Char)
  - Microsoft.VisualBasic.Strings.StrDup(System.Int32,System.Object)
  - Microsoft.VisualBasic.Strings.StrDup(System.Int32,System.String)
  - Microsoft.VisualBasic.Strings.StrReverse(System.String)
  - Microsoft.VisualBasic.Strings.Trim(System.String)
  - Microsoft.VisualBasic.Strings.UCase(System.Char)
  - Microsoft.VisualBasic.Strings.UCase(System.String)
  langs:
  - csharp
  name: Strings
  nameWithType: Strings
  fullName: Microsoft.VisualBasic.Strings
  type: Class
  summary: "Den <xref uid=&quot;langword_csharp_Strings&quot; name=&quot;Strings&quot; href=&quot;&quot;> </xref> modulen innehåller procedurer som används för att utföra åtgärder på strängar."
  remarks: "Den här modulen stöder nyckelord i Visual Basic och körningsbibliotek medlemmar som hanterar strängar."
  example:
  - "The following example demonstrates how to split a string at its spaces.  \n  \n [!code-vb[VbVbalrStrings#13](~/add/codesnippet/visualbasic/t-microsoft.visualbasic._6_1.vb)]"
  syntax:
    content: >-
      [Microsoft.VisualBasic.CompilerServices.StandardModule]

      public sealed class Strings
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.Asc(System.Char)
  id: Asc(System.Char)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: Asc(Char)
  nameWithType: Strings.Asc(Char)
  fullName: Microsoft.VisualBasic.Strings.Asc(Char)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Returnerar en <xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;> </xref> -värde som representerar teckenkoden för ett tecken."
  remarks: "`Asc`Returnerar den *kodpunkt*, eller teckenkoden för indatatecknet. Detta kan vara 0 till 255 för tecken med enkla byte (SBCS) värden och-32768 till 32767 för DBCS-tecken (Double set) värden.       `AscW`Returnerar indatatecknet Unicode-kodpunkt. Detta kan vara 0 till 65535. Det returnerade värdet är oberoende av kultur och koden inställningarna för den aktuella tråden.      > [!NOTE] > Den `AscB` funktionen tidigare versioner av Visual Basic returnerar en kod för en byte i stället för ett tecken. Den används huvudsakligen för att konvertera strängar i DBCS-tecken (Double set) program. Alla Visual Basic 2005 strängar är i Unicode och `AscB` stöds inte längre."
  example:
  - "The following example uses the `Asc` function to return `Integer` character codes corresponding to the first letter in each string.  \n  \n [!code-vb[VbVbalrFunctions#19](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._55_1.vb)]"
  syntax:
    content: public static int Asc (char String);
    parameters:
    - id: String
      type: System.Char
      description: "Obligatoriskt. Alla giltiga <xref uid=&quot;langword_csharp_Char&quot; name=&quot;Char&quot; href=&quot;&quot;> </xref> eller <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> uttryck. Om `String` är en <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> uttryck, bara det första tecknet i strängen används för indata. Om `String` är <xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref> eller inte innehåller några tecken, ett <xref:System.ArgumentException>fel uppstår.</xref:System.ArgumentException>"
    return:
      type: System.Int32
      description: "Returnerar en <xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;> </xref> -värde som representerar teckenkoden för ett tecken."
  overload: Microsoft.VisualBasic.Strings.Asc*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.Asc(System.String)
  id: Asc(System.String)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: Asc(String)
  nameWithType: Strings.Asc(String)
  fullName: Microsoft.VisualBasic.Strings.Asc(String)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Returnerar en <xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;> </xref> -värde som representerar teckenkoden för ett tecken."
  remarks: "`Asc`Returnerar den *kodpunkt*, eller teckenkoden för indatatecknet. Detta kan vara 0 till 255 för tecken med enkla byte (SBCS) värden och-32768 till 32767 för DBCS-tecken (Double set) värden.       `AscW`Returnerar indatatecknet Unicode-kodpunkt. Detta kan vara 0 till 65535. Det returnerade värdet är oberoende av kultur och koden inställningarna för den aktuella tråden.      > [!NOTE] > Den `AscB` funktionen tidigare versioner av Visual Basic returnerar en kod för en byte i stället för ett tecken. Den används huvudsakligen för att konvertera strängar i DBCS-tecken (Double set) program. Alla Visual Basic 2005 strängar är i Unicode och `AscB` stöds inte längre."
  example:
  - "The following example uses the `Asc` function to return `Integer` character codes corresponding to the first letter in each string.  \n  \n [!code-vb[VbVbalrFunctions#19](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._249_1.vb)]"
  syntax:
    content: public static int Asc (string String);
    parameters:
    - id: String
      type: System.String
      description: "Obligatoriskt. Alla giltiga <xref uid=&quot;langword_csharp_Char&quot; name=&quot;Char&quot; href=&quot;&quot;> </xref> eller <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> uttryck. Om `String` är en <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> uttryck, bara det första tecknet i strängen används för indata. Om `String` är <xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref> eller inte innehåller några tecken, ett <xref:System.ArgumentException>fel uppstår.</xref:System.ArgumentException>"
    return:
      type: System.Int32
      description: "Returnerar en <xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;> </xref> -värde som representerar teckenkoden för ett tecken."
  overload: Microsoft.VisualBasic.Strings.Asc*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.AscW(System.Char)
  id: AscW(System.Char)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: AscW(Char)
  nameWithType: Strings.AscW(Char)
  fullName: Microsoft.VisualBasic.Strings.AscW(Char)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Returnerar en <xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;> </xref> -värde som representerar teckenkoden för ett tecken."
  remarks: "`Asc`Returnerar den *kodpunkt*, eller teckenkoden för indatatecknet. Detta kan vara 0 till 255 för tecken med enkla byte (SBCS) värden och-32768 till 32767 för DBCS-tecken (Double set) värden.       `AscW`Returnerar indatatecknet Unicode-kodpunkt. Detta kan vara 0 till 65535. Det returnerade värdet är oberoende av kultur och koden inställningarna för den aktuella tråden.      > [!NOTE] > Den `AscB` funktionen tidigare versioner av Visual Basic returnerar en kod för en byte i stället för ett tecken. Den används huvudsakligen för att konvertera strängar i DBCS-tecken (Double set) program. Alla Visual Basic 2005 strängar är i Unicode och `AscB` stöds inte längre."
  example:
  - "The following example uses the `Asc` function to return `Integer` character codes corresponding to the first letter in each string.  \n  \n [!code-vb[VbVbalrFunctions#19](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._18_1.vb)]"
  syntax:
    content: public static int AscW (char String);
    parameters:
    - id: String
      type: System.Char
      description: "Obligatoriskt. Alla giltiga <xref uid=&quot;langword_csharp_Char&quot; name=&quot;Char&quot; href=&quot;&quot;> </xref> eller <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> uttryck. Om `String` är en <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> uttryck, bara det första tecknet i strängen används för indata. Om `String` är <xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref> eller inte innehåller några tecken, ett <xref:System.ArgumentException>fel uppstår.</xref:System.ArgumentException>"
    return:
      type: System.Int32
      description: "Returnerar en <xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;> </xref> -värde som representerar teckenkoden för ett tecken."
  overload: Microsoft.VisualBasic.Strings.AscW*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.AscW(System.String)
  id: AscW(System.String)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: AscW(String)
  nameWithType: Strings.AscW(String)
  fullName: Microsoft.VisualBasic.Strings.AscW(String)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Returnerar en <xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;> </xref> -värde som representerar teckenkoden för ett tecken."
  remarks: "`Asc`Returnerar den *kodpunkt*, eller teckenkoden för indatatecknet. Detta kan vara 0 till 255 för tecken med enkla byte (SBCS) värden och-32768 till 32767 för DBCS-tecken (Double set) värden.       `AscW`Returnerar indatatecknet Unicode-kodpunkt. Detta kan vara 0 till 65535. Det returnerade värdet är oberoende av kultur och koden inställningarna för den aktuella tråden.      > [!NOTE] > Den `AscB` funktionen tidigare versioner av Visual Basic returnerar en kod för en byte i stället för ett tecken. Den används huvudsakligen för att konvertera strängar i DBCS-tecken (Double set) program. Alla Visual Basic 2005 strängar är i Unicode och `AscB` stöds inte längre."
  example:
  - "The following example uses the `Asc` function to return `Integer` character codes corresponding to the first letter in each string.  \n  \n [!code-vb[VbVbalrFunctions#19](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._205_1.vb)]"
  syntax:
    content: public static int AscW (string String);
    parameters:
    - id: String
      type: System.String
      description: "Obligatoriskt. Alla giltiga <xref uid=&quot;langword_csharp_Char&quot; name=&quot;Char&quot; href=&quot;&quot;> </xref> eller <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> uttryck. Om `String` är en <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> uttryck, bara det första tecknet i strängen används för indata. Om `String` är <xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref> eller inte innehåller några tecken, ett <xref:System.ArgumentException>fel uppstår.</xref:System.ArgumentException>"
    return:
      type: System.Int32
      description: "Returnerar en <xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;> </xref> -värde som representerar teckenkoden för ett tecken."
  overload: Microsoft.VisualBasic.Strings.AscW*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.Chr(System.Int32)
  id: Chr(System.Int32)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: Chr(Int32)
  nameWithType: Strings.Chr(Int32)
  fullName: Microsoft.VisualBasic.Strings.Chr(Int32)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Returnerar tecknet som är associerade med angiven teckenkod."
  remarks: "Asymmetrisk intervallet godkänd för `CharCode` kompenserar för lagring skillnaderna mellan de `Short` och `Integer`. -29183 är till exempel en `Short` men +36353 är en `Integer`. Detta underlättar också kompatibilitet med Visual Basic 6.0.       `Chr`använder den <xref:System.Text.Encoding>klassen i den <xref:System.Text?displayProperty=fullName>namnutrymme för att avgöra om den aktuella tråden använder en teckenuppsättning med enkla byte (SBCS) eller ett tecken med dubbelbyte ange (DBCS).</xref:System.Text?displayProperty=fullName> </xref:System.Text.Encoding> Sedan tar `CharCode` som en kod i lämpliga punkt. Intervallet kan vara 0 till 255 tecken SBCS och-32768 t.o.m. 65535 för DBCS-tecken.       Värdet som returneras beror på en teckentabell för den aktuella tråden som ingår i den <xref:System.Globalization.TextInfo.ANSICodePage%2A>egenskapen för den <xref:System.Globalization.TextInfo>klassen i den <xref:System.Globalization>namnområde.</xref:System.Globalization> </xref:System.Globalization.TextInfo> </xref:System.Globalization.TextInfo.ANSICodePage%2A> Du kan hämta <xref:System.Globalization.TextInfo.ANSICodePage%2A>genom att ange `System.Globalization.CultureInfo.CurrentCulture.TextInfo.ANSICodePage`.</xref:System.Globalization.TextInfo.ANSICodePage%2A>       `ChrW`tar `CharCode` som ett Unicode-kodpunkt. Intervallet är oberoende av kultur och koden inställningarna för den aktuella tråden. Värden mellan-32&768; via är-1 hanteras på samma sätt som värden i intervallet +32768 via +65535.       Tal mellan 0 och 31 är samma som standard utskrivbara ASCII-koder. Till exempel `Chr(10)` returnerar radmatning tecken.      > [!NOTE] > Den `ChrB` funktionen i tidigare versioner av Visual Basic returnerar en byte. Den används huvudsakligen för att konvertera strängar i DBCS-tecken (Double set) program. Alla strängar i Visual Basic och .NET Framework är i Unicode och `ChrB` stöds inte längre."
  example:
  - "The following example uses the `Chr` function to return the character associated with the specified character code.  \n  \n [!code-vb[VbVbalrStrings#7](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._105_1.vb)]"
  syntax:
    content: public static char Chr (int CharCode);
    parameters:
    - id: CharCode
      type: System.Int32
      description: "Obligatoriskt. En <xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;> </xref> uttryck som representerar den `code point`, eller teckenkoden för tecknet."
    return:
      type: System.Char
      description: "Returnerar tecknet som är associerade med angiven teckenkod."
  overload: Microsoft.VisualBasic.Strings.Chr*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>CharCode</code>&lt; 0 or &gt; 255 for <xref uid=&quot;langword_csharp_Chr&quot; name=&quot;Chr&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.ChrW(System.Int32)
  id: ChrW(System.Int32)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: ChrW(Int32)
  nameWithType: Strings.ChrW(Int32)
  fullName: Microsoft.VisualBasic.Strings.ChrW(Int32)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Returnerar tecknet som är associerade med angiven teckenkod."
  remarks: "Asymmetrisk intervallet godkänd för `CharCode` kompenserar för lagring skillnaderna mellan de `Short` och `Integer`. -29183 är till exempel en `Short` men +36353 är en `Integer`. Detta underlättar också kompatibilitet med Visual Basic 6.0.       `Chr`använder den <xref:System.Text.Encoding>klassen i den <xref:System.Text?displayProperty=fullName>namnutrymme för att avgöra om den aktuella tråden använder en teckenuppsättning med enkla byte (SBCS) eller ett tecken med dubbelbyte ange (DBCS).</xref:System.Text?displayProperty=fullName> </xref:System.Text.Encoding> Sedan tar `CharCode` som en kod i lämpliga punkt. Intervallet kan vara 0 till 255 tecken SBCS och-32768 t.o.m. 65535 för DBCS-tecken.       Värdet som returneras beror på en teckentabell för den aktuella tråden som ingår i den <xref:System.Globalization.TextInfo.ANSICodePage%2A>egenskapen för den <xref:System.Globalization.TextInfo>klassen i den <xref:System.Globalization>namnområde.</xref:System.Globalization> </xref:System.Globalization.TextInfo> </xref:System.Globalization.TextInfo.ANSICodePage%2A> Du kan hämta <xref:System.Globalization.TextInfo.ANSICodePage%2A>genom att ange `System.Globalization.CultureInfo.CurrentCulture.TextInfo.ANSICodePage`.</xref:System.Globalization.TextInfo.ANSICodePage%2A>       `ChrW`tar `CharCode` som ett Unicode-kodpunkt. Intervallet är oberoende av kultur och koden inställningarna för den aktuella tråden. Värden mellan-32&768; via är-1 hanteras på samma sätt som värden i intervallet +32768 via +65535.       Tal mellan 0 och 31 är samma som standard utskrivbara ASCII-koder. Till exempel `Chr(10)` returnerar radmatning tecken.      > [!NOTE] > Den `ChrB` funktionen i tidigare versioner av Visual Basic returnerar en byte. Den används huvudsakligen för att konvertera strängar i DBCS-tecken (Double set) program. Alla strängar i Visual Basic och .NET Framework är i Unicode och `ChrB` stöds inte längre."
  example:
  - "The following example uses the `Chr` function to return the character associated with the specified character code.  \n  \n [!code-vb[VbVbalrStrings#7](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._45_1.vb)]"
  syntax:
    content: public static char ChrW (int CharCode);
    parameters:
    - id: CharCode
      type: System.Int32
      description: "Obligatoriskt. En <xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;> </xref> uttryck som representerar den `code point`, eller teckenkoden för tecknet."
    return:
      type: System.Char
      description: "Returnerar tecknet som är associerade med angiven teckenkod."
  overload: Microsoft.VisualBasic.Strings.ChrW*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>CharCode</code>&lt; -32768 or &gt; 65535 for <xref uid=&quot;langword_csharp_ChrW&quot; name=&quot;ChrW&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.Filter(System.Object[],System.String,System.Boolean,Microsoft.VisualBasic.CompareMethod)
  id: Filter(System.Object[],System.String,System.Boolean,Microsoft.VisualBasic.CompareMethod)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: Filter(Object[],String,Boolean,CompareMethod)
  nameWithType: Strings.Filter(Object[],String,Boolean,CompareMethod)
  fullName: Microsoft.VisualBasic.Strings.Filter(Object[],String,Boolean,CompareMethod)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Returnerar en Nollbaserad matris som innehåller en delmängd av en <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> matris baserat på angivna filtervillkor."
  remarks: "Om inga matchningar av `Match` hittades inom `Source`, `Filter` returnerar en tom matris. Ett fel uppstår om `Source` är inställd på `Nothing` eller är inte en endimensionell matris.       Matrisen som returneras av den `Filter` funktion innehåller bara tillräckligt många element innehåller antalet matchande objekt.       Den `Compare` argument kan ha följande värden.      |||   |-|-|   | Konstanten | Beskrivning |   | `CompareMethod.Binary`| Binär jämförelse |   | `CompareMethod.Text`| Utför en textrepresentation jämförelse |"
  example:
  - "This example demonstrates the use of the `Filter` function.  \n  \n [!code-vb[VbVbalrStrings#24](~/add/codesnippet/visualbasic/bfb6d7a4-ec2d-49ca-96ad-_1.vb)]"
  syntax:
    content: public static string[] Filter (object[] Source, string Match, bool Include = true, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);
    parameters:
    - id: Source
      type: System.Object[]
      description: "Obligatoriskt. Endimensionell matris med strängar som ska sökas igenom."
    - id: Match
      type: System.String
      description: "Obligatoriskt. Sträng att söka efter."
    - id: Include
      type: System.Boolean
      description: "Valfritt. <xref uid=&quot;langword_csharp_Boolean&quot; name=&quot;Boolean&quot; href=&quot;&quot;></xref>värde som anger om du vill returnera delsträngar som inkludera eller exkludera `Match`. Om `Include` är <xref uid=&quot;langword_csharp_True&quot; name=&quot;True&quot; href=&quot;&quot;> </xref>, <xref uid=&quot;langword_csharp_Filter&quot; name=&quot;Filter&quot; href=&quot;&quot;> </xref> funktionen returnerar en delmängd av den matris som innehåller `Match` som en understräng. Om `Include` är <xref uid=&quot;langword_csharp_False&quot; name=&quot;False&quot; href=&quot;&quot;> </xref>, <xref uid=&quot;langword_csharp_Filter&quot; name=&quot;Filter&quot; href=&quot;&quot;> </xref> funktionen returnerar delmängden av matrisen som inte innehåller `Match` som en understräng."
    - id: Compare
      type: Microsoft.VisualBasic.CompareMethod
      description: "Valfritt. Numeriskt värde som anger vilken typ av strängjämförelse ska användas. Värden finns i &quot;Inställningar&quot;."
    return:
      type: System.String[]
      description: "Returnerar en Nollbaserad matris som innehåller en delmängd av en <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> matris baserat på angivna filtervillkor."
  overload: Microsoft.VisualBasic.Strings.Filter*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>Source</code>är <xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref> eller är inte en endimensionell matris."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.Filter(System.String[],System.String,System.Boolean,Microsoft.VisualBasic.CompareMethod)
  id: Filter(System.String[],System.String,System.Boolean,Microsoft.VisualBasic.CompareMethod)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: Filter(String[],String,Boolean,CompareMethod)
  nameWithType: Strings.Filter(String[],String,Boolean,CompareMethod)
  fullName: Microsoft.VisualBasic.Strings.Filter(String[],String,Boolean,CompareMethod)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Returnerar en Nollbaserad matris som innehåller en delmängd av en <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> matris baserat på angivna filtervillkor."
  remarks: "Om inga matchningar av `Match` hittades inom `Source`, `Filter` returnerar en tom matris. Ett fel uppstår om `Source` är inställd på `Nothing` eller är inte en endimensionell matris.       Matrisen som returneras av den `Filter` funktion innehåller bara tillräckligt många element innehåller antalet matchande objekt.       Den `Compare` argument kan ha följande värden.      |||   |-|-|   | Konstanten | Beskrivning |   | `CompareMethod.Binary`| Binär jämförelse |   | `CompareMethod.Text`| Utför en textrepresentation jämförelse |"
  example:
  - "This example demonstrates the use of the `Filter` function.  \n  \n [!code-vb[VbVbalrStrings#24](~/add/codesnippet/visualbasic/a4b278ef-f791-4808-8a23-_1.vb)]"
  syntax:
    content: public static string[] Filter (string[] Source, string Match, bool Include = true, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);
    parameters:
    - id: Source
      type: System.String[]
      description: "Obligatoriskt. Endimensionell matris med strängar som ska sökas igenom."
    - id: Match
      type: System.String
      description: "Obligatoriskt. Sträng att söka efter."
    - id: Include
      type: System.Boolean
      description: "Valfritt. <xref uid=&quot;langword_csharp_Boolean&quot; name=&quot;Boolean&quot; href=&quot;&quot;></xref>värde som anger om du vill returnera delsträngar som inkludera eller exkludera `Match`. Om `Include` är <xref uid=&quot;langword_csharp_True&quot; name=&quot;True&quot; href=&quot;&quot;> </xref>, <xref uid=&quot;langword_csharp_Filter&quot; name=&quot;Filter&quot; href=&quot;&quot;> </xref> funktionen returnerar en delmängd av den matris som innehåller `Match` som en understräng. Om `Include` är <xref uid=&quot;langword_csharp_False&quot; name=&quot;False&quot; href=&quot;&quot;> </xref>, <xref uid=&quot;langword_csharp_Filter&quot; name=&quot;Filter&quot; href=&quot;&quot;> </xref> funktionen returnerar delmängden av matrisen som inte innehåller `Match` som en understräng."
    - id: Compare
      type: Microsoft.VisualBasic.CompareMethod
      description: "Valfritt. Numeriskt värde som anger vilken typ av strängjämförelse ska användas. Värden finns i &quot;Inställningar&quot;."
    return:
      type: System.String[]
      description: "Returnerar en Nollbaserad matris som innehåller en delmängd av en <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> matris baserat på angivna filtervillkor."
  overload: Microsoft.VisualBasic.Strings.Filter*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>Source</code>är <xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref> eller är inte en endimensionell matris."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.Format(System.Object,System.String)
  id: Format(System.Object,System.String)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: Format(Object,String)
  nameWithType: Strings.Format(Object,String)
  fullName: Microsoft.VisualBasic.Strings.Format(Object,String)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Returnerar en sträng formaterad enligt instruktionerna i formatet <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> uttryck."
  remarks: "The <xref:System.String.Format%2A?displayProperty=fullName> method also provides similar functionality.  \n  \n If you are formatting a nonlocalized numeric string, you should use a user-defined numeric format to ensure that you get the look you want.  \n  \n If you try to format a number without specifying `Style`, the `Format` function provides functionality similar to the `Str` function, although it is internationally aware. However, positive numbers formatted as strings using the `Format` function don't include a leading space reserved for the sign of the value; those converted using the `Str` function retain the leading space.  \n  \n## Different Formats for Different Numeric Values  \n A user-defined format expression for numbers can have from one to three sections separated by semicolons. If the `Style` argument of the `Format` function contains one of the predefined numeric formats, only one section is allowed.  \n  \n|||  \n|-|-|  \n|If you use|This is the result|  \n|One section only|The format expression applies to all values.|  \n|Two sections|The first section applies to positive values and zeros; the second applies to negative values.|  \n|Three sections|The first section applies to positive values, the second applies to negative values, and the third applies to zeros.|  \n  \n The following example has two sections: the first defines the format for positive values and zeros; the second section defines the format for negative values. Since the `Style` argument of the `Format` function takes a string, it is enclosed by quotation marks.  \n  \n [!code-vb[VbVbalrStrings#18](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._134_1.vb)]  \n  \n If you include semicolons with nothing between them, the missing section is printed using the format of the positive value. For example, the following format displays positive and negative values using the format in the first section and displays `Zero` if the value is zero.  \n  \n [!code-vb[VbVbalrStrings#19](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._134_2.vb)]  \n  \n## Predefined Numeric Formats  \n The following table identifies the predefined numeric format names. These may be used by name as the `Style` argument for the `Format` function:  \n  \n|||  \n|-|-|  \n|Format name|Description|  \n|`General Number`, `G`, or `g`|Displays number with no thousand separator.<br /><br /> For example, `Format(&H3FA, \"g\")` returns `1018`.|  \n|`Currency`, `C`, or `c`|Displays number with thousand separator, if appropriate; displays two digits to the right of the decimal separator. Output is based on system locale settings.<br /><br /> For example, `Format(1234567, \"c\")` returns `$1,234,567.00`.|  \n|`Fixed`, `F`, or `f`|Displays at least one digit to the left and two digits to the right of the decimal separator.<br /><br /> For example, `Format(1234567, \"f\")` returns `1234567.00`.|  \n|`Standard`, `N`, or `n`|Displays number with thousand separator, at least one digit to the left and two digits to the right of the decimal separator.<br /><br /> For example, `Format(1234567, \"n\")` returns `1,234,567.00`.|  \n|`Percent`|Displays number multiplied by 100 with a percent sign (%) appended immediately to the right; always displays two digits to the right of the decimal separator.<br /><br /> For example, `Format(0.4744, \"Percent\")` returns `47.44%`.|  \n|`P`, or `p`|Displays number with thousandths separator multiplied by 100 with a percent sign (%) appended to the right and separated by a single space; always displays two digits to the right of the decimal separator.<br /><br /> For example, `Format(0.80345, \"p\")` returns `80.35 %`.|  \n|`Scientific`|Uses standard scientific notation, providing two significant digits.<br /><br /> For example, `Format(1234567, \"Scientific\")` returns `1.23E+06`.|  \n|`E`, or `e`|Uses standard scientific notation, providing six significant digits.<br /><br /> For example, `Format(1234567, \"e\")` returns `1.234567e+006`.|  \n|`D`, or `d`|Displays number as a string that contains the value of the number in Decimal (base 10) format. This option is supported for integral types (`Byte`, `Short`, `Integer`, `Long`) only.<br /><br /> For example, `Format(&H7F, \"d\")` returns `127`.|  \n|`X`, or `x`|Displays number as a string that contains the value of the number in Hexadecimal (base 16) format. This option is supported for integral types (`Byte`, `Short`, `Integer`, `Long`) only.<br /><br /> For example, `Format(127, \"x\")` returns `7f`.|  \n|`Yes/No`|Displays `No` if number is 0; otherwise, displays `Yes`.<br /><br /> For example, `Format(0, \"Yes/No\")` returns `No`.|  \n|`True/False`|Displays `False` if number is 0; otherwise, displays `True`.<br /><br /> For example, `Format(1, \"True/False\")` returns `True`.|  \n|`On/Off`|Displays `Off` if number is 0; otherwise, displays `On`.<br /><br /> For example, `Format(1, \"On/Off\")` returns `On`.|  \n  \n### Smart Device Developer Notes  \n The `Yes/No`, `True/False`, and `On/Off` formats are not supported.  \n  \n## User-Defined Numeric Formats  \n The following table identifies characters you can use to create user-defined number formats. These may be used to build the `Style` argument for the `Format` function:  \n  \n|||  \n|-|-|  \n|Character|Description|  \n|None|Displays the number with no formatting.|  \n|(`0`)|Digit placeholder. Displays a digit or a zero. If the expression has a digit in the position where the zero appears in the format string, display it; otherwise, displays a zero in that position.<br /><br /> If the number has fewer digits than there are zeros (on either side of the decimal) in the format expression, displays leading or trailing zeros. If the number has more digits to the right of the decimal separator than there are zeros to the right of the decimal separator in the format expression, rounds the number to as many decimal places as there are zeros. If the number has more digits to the left of the decimal separator than there are zeros to the left of the decimal separator in the format expression, displays the extra digits without modification.|  \n|(`#`)|Digit placeholder. Displays a digit or nothing. If the expression has a digit in the position where the `#` character appears in the format string, displays it; otherwise, displays nothing in that position.<br /><br /> This symbol works like the `0` digit placeholder, except that leading and trailing zeros aren't displayed if the number has fewer digits than there are `#` characters on either side of the decimal separator in the format expression.|  \n|(`.`)|Decimal placeholder. The decimal placeholder determines how many digits are displayed to the left and right of the decimal separator. If the format expression contains only `#` characters to the left of this symbol; numbers smaller than 1 begin with a decimal separator. To display a leading zero displayed with fractional numbers, use zero as the first digit placeholder to the left of the decimal separator. In some locales, a comma is used as the decimal separator. The actual character used as a decimal placeholder in the formatted output depends on the number format recognized by your system. Thus, you should use the period as the decimal placeholder in your formats even if you are in a locale that uses a comma as a decimal placeholder. The formatted string will appear in the format correct for the locale.|  \n|(`%`)|Percent placeholder. Multiplies the expression by 100. The percent character (`%`) is inserted in the position where it appears in the format string.|  \n|(`,`)|Thousand separator. The thousand separator separates thousands from hundreds within a number that has four or more places to the left of the decimal separator. Standard use of the thousand separator is specified if the format contains a thousand separator surrounded by digit placeholders (`0` or `#`).<br /><br /> A thousand separator immediately to the left of the decimal separator (whether or not a decimal is specified) or as the rightmost character in the string means \"scale the number by dividing it by 1,000, rounding as needed.\" Numbers smaller than 1,000 but greater or equal to 500 are displayed as `1`, and numbers smaller than 500 are displayed as `0`. Two adjacent thousand separators in this position scale by a factor of 1 million, and an additional factor of 1,000 for each additional separator.<br /><br /> Multiple separators in any position other than immediately to the left of the decimal separator or the rightmost position in the string are treated simply as specifying the use of a thousand separator. In some locales, a period is used as a thousand separator. The actual character used as the thousand separator in the formatted output depends on the Number Format recognized by your system. Thus, you should use the comma as the thousand separator in your formats even if you are in a locale that uses a period as a thousand separator. The formatted string will appear in the format correct for the locale.<br /><br /> For example, consider the three following format strings:<br /><br /> -   `\"#,0.\"`, which uses the thousands separator to format the number 100 million as the string \"100,000,000\".<br />-   `\"#0,.\"`, which uses scaling by a factor of one thousand to format the number 100 million as the string \"100000\".<br />-   `\"#,0,.\"`, which uses the thousands separator and scaling by one thousand to format the number 100 million as the string \"100,000\".|  \n|(`:`)|Time separator. In some locales, other characters may be used to represent the time separator. The time separator separates hours, minutes, and seconds when time values are formatted. The actual character used as the time separator in formatted output is determined by your system settings.|  \n|(`/`)|Date separator. In some locales, other characters may be used to represent the date separator. The date separator separates the day, month, and year when date values are formatted. The actual character used as the date separator in formatted output is determined by your system settings.|  \n|(`E-``E+``e-``e+`)|Scientific format. If the format expression contains at least one digit placeholder (`0` or `#`) to the left of `E-`, `E+`, `e-`, or `e+`, the number is displayed in scientific format and `E` or `e` is inserted between the number and its exponent. The number of digit placeholders to the left determines the number of digits in the exponent. Use `E-` or `e-` to place a minus sign next to negative exponents. Use `E+` or `e+` to place a minus sign next to negative exponents and a plus sign next to positive exponents. You must also include digit placeholders to the right of this symbol to get correct formatting.|  \n|`-` `+` `$` ( )|Literal characters. These characters are displayed exactly as typed in the format string. To display a character other than one of those listed, precede it with a backslash (`\\`) or enclose it in double quotation marks (\" \").|  \n|(`\\`)|Displays the next character in the format string. To display a character that has special meaning as a literal character, precede it with a backslash (`\\`). The backslash itself isn't displayed. Using a backslash is the same as enclosing the next character in double quotation marks. To display a backslash, use two backslashes (`\\\\`).<br /><br /> Examples of characters that can't be displayed as literal characters are the date-formatting and time-formatting characters (`a`, `c`, `d`, `h`, `m`, `n`, `p`, `q`, `s`, `t`, `w`, `y`, `/`, and `:`), the numeric-formatting characters (`#`, `0`, `%`, `E`, `e`, comma, and period), and the string-formatting characters (`@`, `&`, `<`, `>`, and `!`).|  \n|(`\"``ABC``\"`)|Displays the string inside the double quotation marks (\" \"). To include a string in the style argument from within code, you must use `Chr(34)` to enclose the text (`34` is the character code for a quotation mark (\")).|  \n  \n### Legacy Code Example  \n The following table contains some sample format expressions for numbers. (These examples all assume that your system's locale setting is English-U.S.) The first column contains the format strings for the `Style` argument of the `Format` function; the other columns contain the resulting output if the formatted data has the value given in the column headings.  \n  \n|||||  \n|-|-|-|-|  \n|Format (`Style`)|\"5\" formatted as|\"-5\" formatted as|\"0.5\" formatted as|  \n|`Zero-length string (\"\")`|`5`|`-5`|`0.5`|  \n|`0`|`5`|`-5`|`1`|  \n|`0.00`|`5.00`|`-5.00`|`0.50`|  \n|`#,##0`|`5`|`-5`|`1`|  \n|`$#,##0;($#,##0)`|`$5`|`($5)`|`$1`|  \n|`$#,##0.00;($#,##0.00)`|`$5.00`|`($5.00)`|`$0.50`|  \n|`0%`|`500%`|`-500%`|`50%`|  \n|`0.00%`|`500.00%`|`-500.00%`|`50.00%`|  \n|`0.00E+00`|`5.00E+00`|`-5.00E+00`|`5.00E-01`|  \n|`0.00E-00`|`5.00E00`|`-5.00E00`|`5.00E-01`|  \n  \n## Predefined Date/Time Formats  \n The following table identifies the predefined date and time format names. These may be used by name as the style argument for the `Format` function:  \n  \n|||  \n|-|-|  \n|Format Name|Description|  \n|`General Date`, or `G`|Displays a date and/or time. For example, `3/12/2008 11:07:31 AM`. Date display is determined by your application's current culture value.|  \n|`Long Date`, `Medium Date`, or `D`|Displays a date according to your current culture's long date format. For example, `Wednesday, March 12, 2008`.|  \n|`Short Date`, or `d`|Displays a date using your current culture's short date format. For example, `3/12/2008`.<br /><br /> The `d` character displays the day in a user-defined date format.|  \n|`Long Time`, `Medium Time`, or `T`|Displays a time using your current culture's long time format; typically includes hours, minutes, seconds. For example, `11:07:31 AM`.|  \n|`Short Time` or `t`|Displays a time using your current culture's short time format. For example, `11:07 AM`.<br /><br /> The `t` character displays `AM` or `PM` values for locales that use a 12-hour clock in a user-defined time format.|  \n|`f`|Displays the long date and short time according to your current culture's format. For example, `Wednesday, March 12, 2008 11:07 AM`.|  \n|`F`|Displays the long date and long time according to your current culture's format. For example, `Wednesday, March 12, 2008 11:07:31 AM`.|  \n|`g`|Displays the short date and short time according to your current culture's format. For example, `3/12/2008 11:07 AM`.|  \n|`M`, `m`|Displays the month and the day of a date. For example, `March 12`.<br /><br /> The `M` character displays the month in a user-defined date format. The `m` character displays the minutes in a user-defined time format.|  \n|`R`, `r`|Formats the date according to the <xref:System.Globalization.DateTimeFormatInfo.RFC1123Pattern%2A> property. For example, `Wed, 12 Mar 2008 11:07:31 GMT`. The formatted date does not adjust the value of the date and time. You must adjust the Date/Time value to GMT before calling the `Format` function.|  \n|`s`|Formats the date and time as a sortable index. For example, `2008-03-12T11:07:31`.<br /><br /> The `s` character displays the seconds in a user-defined time format.|  \n|`u`|Formats the date and time as a GMT sortable index. For example, `2008-03-12 11:07:31Z`.|  \n|`U`|Formats the date and time with the long date and long time as GMT. For example, `Wednesday, March 12, 2008 6:07:31 PM`.|  \n|`Y`, `y`|Formats the date as the year and month. For example, `March, 2008`.<br /><br /> The `Y` and `y` characters display the year in a user-defined date format.|  \n  \n For more information about the application's current culture information, see [How Culture Affects Strings in Visual Basic](~/add/includes/ajax-current-ext-md.md).  \n  \n## User-Defined Date/Time Formats  \n The following table shows characters you can use to create user-defined date/time formats. Unlike in earlier versions of [!INCLUDE[vbprvb](~/add/includes/vbprvb-md.md)], these format characters are case-sensitive.  \n  \n|||  \n|-|-|  \n|Character|Description|  \n|(`:`)|Time separator. In some locales, other characters may be used to represent the time separator. The time separator separates hours, minutes, and seconds when time values are formatted. The actual character that is used as the time separator in formatted output is determined by your application's current culture value.|  \n|(`/`)|Date separator. In some locales, other characters may be used to represent the date separator. The date separator separates the day, month, and year when date values are formatted. The actual character that is used as the date separator in formatted output is determined by your application's current culture.|  \n|(`%`)|Used to indicate that the following character should be read as a single-letter format without regard to any trailing letters. Also used to indicate that a single-letter format is read as a user-defined format. See what follows for additional details.|  \n|`d`|Displays the day as a number without a leading zero (for example, `1`). Use `%d` if this is the only character in your user-defined numeric format.|  \n|`dd`|Displays the day as a number with a leading zero (for example, `01`).|  \n|`ddd`|Displays the day as an abbreviation (for example, `Sun`).|  \n|`dddd`|Displays the day as a full name (for example, `Sunday`).|  \n|`M`|Displays the month as a number without a leading zero (for example, January is represented as `1`). Use `%M` if this is the only character in your user-defined numeric format.|  \n|`MM`|Displays the month as a number with a leading zero (for example, `01/12/01`).|  \n|`MMM`|Displays the month as an abbreviation (for example, `Jan`).|  \n|`MMMM`|Displays the month as a full month name (for example, `January`).|  \n|`gg`|Displays the period/era string (for example, `A.D.`).|  \n|`h`|Displays the hour as a number without leading zeros using the 12-hour clock (for example, `1:15:15 PM`). Use `%h` if this is the only character in your user-defined numeric format.|  \n|`hh`|Displays the hour as a number with leading zeros using the 12-hour clock (for example, `01:15:15 PM`).|  \n|`H`|Displays the hour as a number without leading zeros using the 24-hour clock (for example, `1:15:15`). Use `%H` if this is the only character in your user-defined numeric format.|  \n|`HH`|Displays the hour as a number with leading zeros using the 24-hour clock (for example, `01:15:15`).|  \n|`m`|Displays the minute as a number without leading zeros (for example, `12:1:15`). Use `%m` if this is the only character in your user-defined numeric format.|  \n|`mm`|Displays the minute as a number with leading zeros (for example, `12:01:15`).|  \n|`s`|Displays the second as a number without leading zeros (for example, `12:15:5`). Use `%s` if this is the only character in your user-defined numeric format.|  \n|`ss`|Displays the second as a number with leading zeros (for example, `12:15:05`).|  \n|`f`|Displays fractions of seconds. For example `ff` displays hundredths of seconds, whereas `ffff` displays ten-thousandths of seconds. You may use up to seven `f` symbols in your user-defined format. Use `%f` if this is the only character in your user-defined numeric format.|  \n|`t`|Uses the 12-hour clock and displays an uppercase `A` for any hour before noon; displays an uppercase `P` for any hour between noon and 11:59 P.M. Use `%t` if this is the only character in your user-defined numeric format.|  \n|`tt`|For locales that use a 12-hour clock, displays an uppercase `AM` with any hour before noon; displays an uppercase `PM` with any hour between noon and 11:59 P.M.<br /><br /> For locales that use a 24-hour clock, displays nothing.|  \n|`y`|Displays the year number (0-9) without leading zeros. Use `%y` if this is the only character in your user-defined numeric format.|  \n|`yy`|Displays the year in two-digit numeric format with a leading zero, if applicable.|  \n|`yyy`|Displays the year in four-digit numeric format.|  \n|`yyyy`|Displays the year in four-digit numeric format.|  \n|`z`|Displays the timezone offset without a leading zero (for example, `-8`). Use `%z` if this is the only character in your user-defined numeric format.|  \n|`zz`|Displays the timezone offset with a leading zero (for example, `-08`)|  \n|`zzz`|Displays the full timezone offset (for example, `-08:00`)|  \n  \n### Legacy Code Example  \n The following are examples of user-defined date and time formats for `December 7, 1958, 8:50 PM, 35 seconds`:  \n  \n|||  \n|-|-|  \n|Format|Displays|  \n|`M/d/yy`|`12/7/58`|  \n|`d-MMM`|`7-Dec`|  \n|`d-MMMM-yy`|`7-December-58`|  \n|`d MMMM`|`7 December`|  \n|`MMMM yy`|`December 58`|  \n|`hh:mm tt`|`08:50 PM`|  \n|`h:mm:ss t`|`8:50:35 P`|  \n|`H:mm`|`20:50`|  \n|`H:mm:ss`|`20:50:35`|  \n|`M/d/yyyy H:mm`|`12/7/1958 20:50`|  \n  \n### Smart Device Developer Notes  \n The minimum time resolution for a device is determined by the manufacturer of the device. If the time resolution for the device is coarse enough, the `f` format character returns 0 when run on that device."
  example:
  - "This example shows various uses of the `Format` function to format values using both `String` formats and user-defined formats. For the date separator (`/`), time separator (`:`), and the AM/PM indicators (`t` and `tt`), the actual formatted output displayed by your system depends on the locale settings the code is using. When times and dates are displayed in the development environment, the short time format and short date format of the code locale are used.  \n  \n> [!NOTE]\n>  For locales that use a 24-hour clock, the AM/PM indicators (`t` and `tt`) display nothing.  \n  \n [!code-vb[VbVbalrStrings#27](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._134_3.vb)]"
  syntax:
    content: public static string Format (object Expression, string Style = "");
    parameters:
    - id: Expression
      type: System.Object
      description: "Obligatoriskt. Ett giltigt uttryck."
    - id: Style
      type: System.String
      description: "Valfritt. Ett ogiltigt format för namngiven eller användardefinierade <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> uttryck."
    return:
      type: System.String
      description: "Returnerar en sträng formaterad enligt instruktionerna i formatet <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> uttryck."
  overload: Microsoft.VisualBasic.Strings.Format*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.FormatCurrency(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)
  id: FormatCurrency(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: FormatCurrency(Object,Int32,TriState,TriState,TriState)
  nameWithType: Strings.FormatCurrency(Object,Int32,TriState,TriState,TriState)
  fullName: Microsoft.VisualBasic.Strings.FormatCurrency(Object,Int32,TriState,TriState,TriState)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Returnerar ett uttryck formaterat som ett valutavärde med den valutasymbol som definierats i Kontrollpanelen."
  remarks: "När en eller flera valfria argument utelämnas används datorns matchande regionala inställningar värden i stället.       Positionen för valutasymbolen i förhållande till valutavärdet bestäms av datorns nationella inställningar.      > [!NOTE] > Alla inställningar kommer från de nationella inställningarna för programmet. Som standard blir som språket inställt på Kontrollpanelen. Men den kan ändras via programmering med hjälp av .NET Framework, utom inledande noll, som hämtas från den `Number` fliken.       Den `IncludeLeadingDigit`, `UseParensForNegativeNumbers`, och `GroupDigits` argument ha följande värden för en av tre möjliga-uppräkningen.      |||   |-|-|   | Värdet | Beskrivning |   | `TriState.True`| True |   | `TriState.False`| FALSKT |   | `TriState.UseDefault`| Datorns nationella inställningar |"
  example:
  - "The following example illustrates the use of the `FormatCurrency` function.  \n  \n [!code-vb[VbVbalrStrings#32](~/add/codesnippet/visualbasic/c6b3af93-c0fc-4dd7-8b87-_1.vb)]"
  syntax:
    content: public static string FormatCurrency (object Expression, int NumDigitsAfterDecimal = -1, Microsoft.VisualBasic.TriState IncludeLeadingDigit = Microsoft.VisualBasic.TriState.UseDefault, Microsoft.VisualBasic.TriState UseParensForNegativeNumbers = Microsoft.VisualBasic.TriState.UseDefault, Microsoft.VisualBasic.TriState GroupDigits = Microsoft.VisualBasic.TriState.UseDefault);
    parameters:
    - id: Expression
      type: System.Object
      description: "Obligatoriskt. Uttrycket som ska formateras."
    - id: NumDigitsAfterDecimal
      type: System.Int32
      description: "Valfritt. Numeriskt värde som anger hur många decimaler visas till höger om decimaltecknet. Standardvärdet är&1;, vilket betyder att datorns nationella inställningar används."
    - id: IncludeLeadingDigit
      type: Microsoft.VisualBasic.TriState
      description: "Valfritt. <xref href=&quot;Microsoft.VisualBasic.TriState&quot;></xref>uppräkning som anger huruvida en inledande nolla ska visas för bråkdelar värden. Värden finns i &quot;Kommentarer&quot;."
    - id: UseParensForNegativeNumbers
      type: Microsoft.VisualBasic.TriState
      description: "Valfritt. <xref href=&quot;Microsoft.VisualBasic.TriState&quot;></xref>uppräkning som anger om negativa värden inom parentes. Värden finns i &quot;Kommentarer&quot;."
    - id: GroupDigits
      type: Microsoft.VisualBasic.TriState
      description: "Valfritt. <xref href=&quot;Microsoft.VisualBasic.TriState&quot;></xref>uppräkning som anger huruvida siffror grupperas med det avgränsningstecken som anges i datorns nationella inställningar. Värden finns i &quot;Kommentarer&quot;."
    return:
      type: System.String
      description: "Returnerar ett uttryck formaterat som ett valutavärde med den valutasymbol som definierats i Kontrollpanelen."
  overload: Microsoft.VisualBasic.Strings.FormatCurrency*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Antalet siffror efter decimaltecknet är större än 99."
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "Typen är inte numerisk."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.FormatDateTime(System.DateTime,Microsoft.VisualBasic.DateFormat)
  id: FormatDateTime(System.DateTime,Microsoft.VisualBasic.DateFormat)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: FormatDateTime(DateTime,DateFormat)
  nameWithType: Strings.FormatDateTime(DateTime,DateFormat)
  fullName: Microsoft.VisualBasic.Strings.FormatDateTime(DateTime,DateFormat)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Returnerar ett stränguttryck som representerar ett datum/tid-värde."
  remarks: "Den `Date` datatyp alltid innehåller både datum och tid. För tillämpning av typkonvertering Visual Basic anser 1/1/1 (1 januari år 1) att vara en neutral värde för datum och 00:00:00 (midnatt) ska vara en neutral värde för tid. Om du formaterar en `Date` värdet som en datum/tid-sträng `FormatDateTime` inkluderar inte neutral värden i den resulterande strängen. Till exempel om du konverterar #1/1/0001 9:30:&#00; till en sträng, resultatet är &quot;9:30:00: 00&quot;; datuminformation ignoreras. Informationen är dock fortfarande finns i ursprungligt `Date` värde och kan återställas med funktioner som `DatePart`.      > [!NOTE] > Om du skickar den `Expression` argument som en `String` litteral `FormatDateTime` tolkar det enligt den <xref:System.Globalization.CultureInfo.CurrentCulture%2A>för tillämpningsprogrammet.</xref:System.Globalization.CultureInfo.CurrentCulture%2A> Men om du skickar det som en `Date` litteral använder formatet #mm/dd/åååå #, eftersom `FormatDateTime` tolkas alltid en `Date` literal enligt kulturen engelska (USA). Detta är nödvändigt eftersom, om ett program som har utvecklats och kodats med `Date` literaler från en kultur, men sedan körs på en plattform med en annan kultur i `Date` literaler kunde tolkas felaktigt.       Den `NamedFormat` argumentet har följande inställningar.      |||   |-|-|   | Konstanten | Beskrivning |   | `DateFormat.GeneralDate`| Visa ett datum / tid. Visa en DatumDel som ett kort värde. Om det finns en time-delen, visas det som en lång tid. Om den finns, visas båda delarna. |   | `DateFormat.LongDate`| Visar ett datum med långt datumformat som anges i datorns nationella inställningar. |   | `DateFormat.ShortDate`| Visar ett datum med det korta datumformat som anges i datorns nationella inställningar. |   | `DateFormat.LongTime`| Visa en tid med tidsformat som angetts i datorns nationella inställningar. |   | `DateFormat.ShortTime`| Visa en tid med 24-timmarsformat (hh: mm). |"
  example:
  - "This example demonstrates the use of the `FormatDateTime` function.  \n  \n [!code-vb[VbVbalrStrings#3](~/add/codesnippet/visualbasic/12ae27ca-4a0f-4ea2-855e-_1.vb)]"
  syntax:
    content: public static string FormatDateTime (DateTime Expression, Microsoft.VisualBasic.DateFormat NamedFormat = Microsoft.VisualBasic.DateFormat.GeneralDate);
    parameters:
    - id: Expression
      type: System.DateTime
      description: "Obligatoriskt. <xref uid=&quot;langword_csharp_Date&quot; name=&quot;Date&quot; href=&quot;&quot;></xref>uttrycket som ska formateras."
    - id: NamedFormat
      type: Microsoft.VisualBasic.DateFormat
      description: "Valfritt. Numeriskt värde som anger det datum/tid-formatet används. Om det utelämnas används <xref uid=&quot;langword_csharp_DateFormat.GeneralDate&quot; name=&quot;DateFormat.GeneralDate&quot; href=&quot;&quot;> </xref> används."
    return:
      type: System.String
      description: "Returnerar ett stränguttryck som representerar ett datum/tid-värde."
  overload: Microsoft.VisualBasic.Strings.FormatDateTime*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>NamedFormat</code>inställningen är inte giltig."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.FormatNumber(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)
  id: FormatNumber(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: FormatNumber(Object,Int32,TriState,TriState,TriState)
  nameWithType: Strings.FormatNumber(Object,Int32,TriState,TriState,TriState)
  fullName: Microsoft.VisualBasic.Strings.FormatNumber(Object,Int32,TriState,TriState,TriState)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Returnerar ett uttryck formaterat som ett tal."
  remarks: "När en eller flera valfria argument utelämnas tillhandahålls värdena för utelämnat argument av nationella inställningar.      > [!NOTE] > Alla inställningar kommer från de nationella inställningarna för programmet. Som standard blir som språket inställt på Kontrollpanelen. Men kan den ändras via programmering med hjälp av .NET Framework.       Den `IncludeLeadingDigit`, `UseParensForNegativeNumbers`, och `GroupDigits` argument har följande inställningar.      |||   |-|-|   | Konstanten | Beskrivning |   | `TriState.True`| True |   | `TriState.False`| FALSKT |   | `TriState.UseDefault`| Datorns nationella inställningar |"
  example:
  - "This example demonstrates the `FormatNumber` function.  \n  \n [!code-vb[VbVbalrStrings#15](~/add/codesnippet/visualbasic/4c7d3c11-69f8-405b-a033-_1.vb)]"
  syntax:
    content: public static string FormatNumber (object Expression, int NumDigitsAfterDecimal = -1, Microsoft.VisualBasic.TriState IncludeLeadingDigit = Microsoft.VisualBasic.TriState.UseDefault, Microsoft.VisualBasic.TriState UseParensForNegativeNumbers = Microsoft.VisualBasic.TriState.UseDefault, Microsoft.VisualBasic.TriState GroupDigits = Microsoft.VisualBasic.TriState.UseDefault);
    parameters:
    - id: Expression
      type: System.Object
      description: "Obligatoriskt. Uttrycket som ska formateras."
    - id: NumDigitsAfterDecimal
      type: System.Int32
      description: "Valfritt. Numeriskt värde som anger hur många decimaler visas till höger om decimaltecknet. Standardvärdet är&1;, vilket betyder att datorns nationella inställningar används."
    - id: IncludeLeadingDigit
      type: Microsoft.VisualBasic.TriState
      description: "Valfritt. <xref href=&quot;Microsoft.VisualBasic.TriState&quot;></xref>konstant som anger om inledande 0 visas för bråkdelar värden. Värden finns i &quot;Inställningar&quot;."
    - id: UseParensForNegativeNumbers
      type: Microsoft.VisualBasic.TriState
      description: "Valfritt. <xref href=&quot;Microsoft.VisualBasic.TriState&quot;></xref>konstant som anger om negativa värden inom parentes. Värden finns i &quot;Inställningar&quot;."
    - id: GroupDigits
      type: Microsoft.VisualBasic.TriState
      description: "Valfritt. <xref href=&quot;Microsoft.VisualBasic.TriState&quot;></xref>konstant som anger huruvida siffror grupperas med det avgränsningstecken som anges i nationella inställningar. Värden finns i &quot;Inställningar&quot;."
    return:
      type: System.String
      description: "Returnerar ett uttryck formaterat som ett tal."
  overload: Microsoft.VisualBasic.Strings.FormatNumber*
  exceptions:
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "Typen är inte numerisk."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.FormatPercent(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)
  id: FormatPercent(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: FormatPercent(Object,Int32,TriState,TriState,TriState)
  nameWithType: Strings.FormatPercent(Object,Int32,TriState,TriState,TriState)
  fullName: Microsoft.VisualBasic.Strings.FormatPercent(Object,Int32,TriState,TriState,TriState)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Returnerar ett uttryck formaterat som ett procenttal (d.v.s. multiplicerat med 100) med det efterföljande tecknet %."
  remarks: "När en eller flera valfria argument utelämnas, tillhandahålls värdena för utelämnat argument av nationella inställningar.      > [!NOTE] > Alla inställningar kommer från de nationella inställningarna för programmet. Som standard blir som språket inställt på Kontrollpanelen. Men kan den ändras via programmering med hjälp av .NET Framework.       Den `IncludeLeadingDigit`, `UseParensForNegativeNumbers`, och `GroupDigits` argument har följande inställningar.      |||   |-|-|   | Konstanten | Beskrivning |   | `TriState.True`| True |   | `TriState.False`| FALSKT |   | `TriState.Default`| Datorns nationella inställningar |"
  example:
  - "This example illustrates the use of the `FormatPercent` function.  \n  \n [!code-vb[VbVbalrStrings#28](~/add/codesnippet/visualbasic/699b6dbf-5eeb-4a3e-a4b1-_1.vb)]"
  syntax:
    content: public static string FormatPercent (object Expression, int NumDigitsAfterDecimal = -1, Microsoft.VisualBasic.TriState IncludeLeadingDigit = Microsoft.VisualBasic.TriState.UseDefault, Microsoft.VisualBasic.TriState UseParensForNegativeNumbers = Microsoft.VisualBasic.TriState.UseDefault, Microsoft.VisualBasic.TriState GroupDigits = Microsoft.VisualBasic.TriState.UseDefault);
    parameters:
    - id: Expression
      type: System.Object
      description: "Obligatoriskt. Uttrycket som ska formateras."
    - id: NumDigitsAfterDecimal
      type: System.Int32
      description: "Valfritt. Numeriskt värde som anger hur många till höger om decimaltecknet ska visas. Standardvärdet är&1;, vilket betyder att de nationella inställningarna används."
    - id: IncludeLeadingDigit
      type: Microsoft.VisualBasic.TriState
      description: "Valfritt. <xref href=&quot;Microsoft.VisualBasic.TriState&quot;></xref>konstant som anger huruvida en inledande nolla visar för bråkdelar värden. Värden finns i &quot;Inställningar&quot;."
    - id: UseParensForNegativeNumbers
      type: Microsoft.VisualBasic.TriState
      description: "Valfritt. <xref href=&quot;Microsoft.VisualBasic.TriState&quot;></xref>konstant som anger om negativa värden inom parentes. Värden finns i &quot;Inställningar&quot;."
    - id: GroupDigits
      type: Microsoft.VisualBasic.TriState
      description: "Valfritt. <xref href=&quot;Microsoft.VisualBasic.TriState&quot;></xref>konstant som anger huruvida siffror grupperas med det avgränsningstecken som anges i nationella inställningar. Värden finns i &quot;Inställningar&quot;."
    return:
      type: System.String
      description: "Returnerar ett uttryck formaterat som ett procenttal (d.v.s. multiplicerat med 100) med det efterföljande tecknet %."
  overload: Microsoft.VisualBasic.Strings.FormatPercent*
  exceptions:
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "Typen är inte numerisk."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.GetChar(System.String,System.Int32)
  id: GetChar(System.String,System.Int32)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: GetChar(String,Int32)
  nameWithType: Strings.GetChar(String,Int32)
  fullName: Microsoft.VisualBasic.Strings.GetChar(String,Int32)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Returnerar en <xref uid=&quot;langword_csharp_Char&quot; name=&quot;Char&quot; href=&quot;&quot;> </xref> -värde som representerar tecknet från det angivna indexet i den angivna strängen."
  remarks: "Om `Index` är mindre än 1 eller större än indexet för det sista tecknet i `str`, en `ArgumentException` genereras."
  example:
  - "This example shows how to use the `GetChar` function to return a character from a specified index in a `String`.  \n  \n [!code-vb[VbVbalrStrings#23](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._0_1.vb)]"
  syntax:
    content: public static char GetChar (string str, int Index);
    parameters:
    - id: str
      type: System.String
      description: "Obligatoriskt. Alla giltiga <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> uttryck."
    - id: Index
      type: System.Int32
      description: "Obligatoriskt. <xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;></xref>uttryck. (1-baserade) indexet för tecknet i `str` ska returneras."
    return:
      type: System.Char
      description: "<xref uid=&quot;langword_csharp_Char&quot; name=&quot;Char&quot; href=&quot;&quot;></xref>värde som representerar tecknet från det angivna indexet i den angivna strängen."
  overload: Microsoft.VisualBasic.Strings.GetChar*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>str</code>är <xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref>, <code>Index</code> &lt; 1, eller <code>Index</code> är större än indexet för det sista tecknet i <code>str</code>."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.InStr(System.String,System.String,Microsoft.VisualBasic.CompareMethod)
  id: InStr(System.String,System.String,Microsoft.VisualBasic.CompareMethod)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: InStr(String,String,CompareMethod)
  nameWithType: Strings.InStr(String,String,CompareMethod)
  fullName: Microsoft.VisualBasic.Strings.InStr(String,String,CompareMethod)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Returnerar ett heltal som anger startpositionen för den första förekomsten av en sträng inom en annan."
  remarks: "Normalt den `InStr` funktionen används vid parsning av strängar.      > [!NOTE] > Den `InStrB` funktionen i tidigare versioner av Visual Basic returnerar ett antal byte i stället för en teckenposition. Den används huvudsakligen för att konvertera strängar i DBCS-tecken (Double set) program. Alla Visual Basic 2005 strängar är i Unicode och `InStrB` stöds inte längre.       Den `Compare` argumentet inställningar: |||   |-|-|-|   | Konstanten | Värdet | Beskrivning |   | `Binary`|0| Binär jämförelse |   | `Text`|1| Jämförelsen text |"
  example:
  - "This example uses the `InStr` function to return the position of the first occurrence of one string within another.  \n  \n [!code-vb[VbVbalrStrings#8](~/add/codesnippet/visualbasic/f1b47808-d5f4-408b-b1fc-_1.vb)]"
  syntax:
    content: public static int InStr (string String1, string String2, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);
    parameters:
    - id: String1
      type: System.String
      description: "Obligatoriskt. <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>uttryck som genomsöks."
    - id: String2
      type: System.String
      description: "Obligatoriskt. <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>uttryck som söks."
    - id: Compare
      type: Microsoft.VisualBasic.CompareMethod
      description: "Valfritt. Anger typen för strängjämförelse. Om `Compare` utelämnas den <xref uid=&quot;langword_csharp_Option Compare&quot; name=&quot;Option Compare&quot; href=&quot;&quot;> </xref> inställningen avgör vilken typ av jämförelse."
    return:
      type: System.Int32
      description: "<table><tbody><tr><td> Om       </td><td> Returnerar InStr       </td></tr><tr><td>           <code>String1</code>har längden noll eller<xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;></xref></td><td> 0       </td></tr><tr><td>           <code>String2</code>har längden noll eller<xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;></xref></td><td> Startpositionen för sökning, där standardinställningen är det första tecknet.       </td></tr><tr><td>           <code>String2</code>hittas inte       </td><td> 0       </td></tr><tr><td>           <code>String2</code>finns i<code>String1</code></td><td> Positionen där matchningen börjar       </td></tr><tr><td></td><td></td></tr></tbody></table>"
  overload: Microsoft.VisualBasic.Strings.InStr*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.InStr(System.Int32,System.String,System.String,Microsoft.VisualBasic.CompareMethod)
  id: InStr(System.Int32,System.String,System.String,Microsoft.VisualBasic.CompareMethod)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: InStr(Int32,String,String,CompareMethod)
  nameWithType: Strings.InStr(Int32,String,String,CompareMethod)
  fullName: Microsoft.VisualBasic.Strings.InStr(Int32,String,String,CompareMethod)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Returnerar ett heltal som anger startpositionen för den första förekomsten av en sträng inom en annan."
  remarks: "Normalt den `InStr` funktionen används vid parsning av strängar.      > [!NOTE] > Den `InStrB` funktionen i tidigare versioner av Visual Basic returnerar ett antal byte i stället för en teckenposition. Den används huvudsakligen för att konvertera strängar i DBCS-tecken (Double set) program. Alla Visual Basic 2005 strängar är i Unicode och `InStrB` stöds inte längre.       Den `Compare` argumentet inställningar: |||   |-|-|-|   | Konstanten | Värdet | Beskrivning |   | `Binary`|0| Binär jämförelse |   | `Text`|1| Jämförelsen text |"
  example:
  - "This example uses the `InStr` function to return the position of the first occurrence of one string within another.  \n  \n [!code-vb[VbVbalrStrings#8](~/add/codesnippet/visualbasic/087e182b-78be-4d9a-be91-_1.vb)]"
  syntax:
    content: public static int InStr (int Start, string String1, string String2, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);
    parameters:
    - id: Start
      type: System.Int32
      description: "Valfritt. Numeriskt uttryck som anger startpositionen för varje sökning. Om det utelämnas börjar sökningen vid det första tecknet. StartIndex är 1-baserad."
    - id: String1
      type: System.String
      description: "Obligatoriskt. <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>uttryck som genomsöks."
    - id: String2
      type: System.String
      description: "Obligatoriskt. <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>uttryck som söks."
    - id: Compare
      type: Microsoft.VisualBasic.CompareMethod
      description: "Valfritt. Anger typen för strängjämförelse. Om `Compare` utelämnas den <xref uid=&quot;langword_csharp_Option Compare&quot; name=&quot;Option Compare&quot; href=&quot;&quot;> </xref> inställningen avgör vilken typ av jämförelse."
    return:
      type: System.Int32
      description: "<table><tbody><tr><td> Om       </td><td> Returnerar InStr       </td></tr><tr><td>           <code>String1</code>har längden noll eller<xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;></xref></td><td> 0       </td></tr><tr><td>           <code>String2</code>har längden noll eller<xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;></xref></td><td>           <code>start</code>         </td></tr><tr><td>           <code>String2</code>hittas inte       </td><td> 0       </td></tr><tr><td>           <code>String2</code>finns i<code>String1</code></td><td> Positionen där matchningen börjar       </td></tr><tr><td>           <code>Start</code>&gt; längd<code>String1</code></td><td> 0       </td></tr></tbody></table>"
  overload: Microsoft.VisualBasic.Strings.InStr*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>Start</code> &lt; 1."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.InStrRev(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)
  id: InStrRev(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: InStrRev(String,String,Int32,CompareMethod)
  nameWithType: Strings.InStrRev(String,String,Int32,CompareMethod)
  fullName: Microsoft.VisualBasic.Strings.InStrRev(String,String,Int32,CompareMethod)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Returnerar positionen för den första förekomsten av en sträng inom en annan, från höger sida av strängen."
  remarks: "Observera att syntaxen för den `InStrRev` funktionen är inte samma som syntaxen för den `InStr` funktion.       Den `Compare` argument kan ha följande värden.      |||   |-|-|   | Konstanten | Beskrivning |   | `Binary`| Binär jämförelse. |   | `Text`| Utför en textrepresentation jämförelse. |"
  example:
  - "This example demonstrates the use of the `InStrRev` function.  \n  \n [!code-vb[VbVbalrStrings#26](~/add/codesnippet/visualbasic/ee8ba742-f981-4eca-b754-_1.vb)]"
  syntax:
    content: public static int InStrRev (string StringCheck, string StringMatch, int Start = -1, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);
    parameters:
    - id: StringCheck
      type: System.String
      description: "Obligatoriskt. Stränguttryck som genomsöks."
    - id: StringMatch
      type: System.String
      description: "Obligatoriskt. Stränguttryck som eftersöks."
    - id: Start
      type: System.Int32
      description: "Valfritt. Numeriska uttryck anger ett-baserade startpositionen för varje sökningen från vänster sida av strängen. Om `Start` utelämnas sedan –&1; används, vilket innebär att sökningen börjar vid den senaste teckenpositionen. Sök fortsätter sedan från höger till vänster."
    - id: Compare
      type: Microsoft.VisualBasic.CompareMethod
      description: "Valfritt. Numeriskt värde som anger vilken typ av jämförelse du vill använda. Om det utelämnas används jämförelse en binär. Värden finns i inställningar."
    return:
      type: System.Int32
      description: "<table><tbody><tr><td> Om       </td><td> Returnerar InStrRev       </td></tr><tr><td>           <code>StringCheck</code>är en tom sträng       </td><td> 0       </td></tr><tr><td>           <code>StringMatch</code>är en tom sträng       </td><td>           <code>Start</code>         </td></tr><tr><td>           <code>StringMatch</code>hittas inte       </td><td> 0       </td></tr><tr><td>           <code>StringMatch</code>finns i<code>StringCheck</code></td><td> Positionen där första matchning hittas visas från höger sida av strängen.       </td></tr><tr><td>           <code>Start</code>är större än längden på<code>StringMatch</code></td><td> 0       </td></tr></tbody></table>"
  overload: Microsoft.VisualBasic.Strings.InStrRev*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>Start</code>= 0 or <code>Start</code> &lt; -1."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.Join(System.Object[],System.String)
  id: Join(System.Object[],System.String)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: Join(Object[],String)
  nameWithType: Strings.Join(Object[],String)
  fullName: Microsoft.VisualBasic.Strings.Join(Object[],String)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Returnerar en sträng som skapats genom att delta i ett antal understrängar i en matris."
  remarks: "Det finns en paritet mellan den `Join` och `Split` funktioner. Den `Join` funktionen tar en matris med strängar och slår ihop dem med hjälp av en sträng som avgränsare, för att returnera en sträng. Den `Split` funktionen en sträng och skiljer den på avgränsaren, som returnerar en matris med strängar. Dock viktigaste skillnaden är att `Join` kan sammanfoga strängar med valfri avgränsare sträng `Split` kan endast separata strängar som använder en avgränsare för en enstaka tecken."
  example:
  - "The following example demonstrates how to use the `Join` function to create a list from several strings.  \n  \n [!code-vb[VbVbalrStrings#10](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._160_1.vb)]"
  syntax:
    content: public static string Join (object[] SourceArray, string Delimiter = " ");
    parameters:
    - id: SourceArray
      type: System.Object[]
      description: "Obligatoriskt. Endimensionell matris som innehåller delsträngar som ska sammanfogas."
    - id: Delimiter
      type: System.String
      description: "Valfritt. Valfri sträng används för att avgränsa delsträngar i den returnerade strängen. Om det utelämnas används blanksteg (&quot;&quot;) används. Om `Delimiter` är en tom sträng (&quot;&quot;) eller <xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref>, sammanfogas alla objekt i listan med ingen avgränsare."
    return:
      type: System.String
      description: "Returnerar en sträng som skapats genom att delta i ett antal understrängar i en matris."
  overload: Microsoft.VisualBasic.Strings.Join*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>SourceArray</code>är inte en endimensionell."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.Join(System.String[],System.String)
  id: Join(System.String[],System.String)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: Join(String[],String)
  nameWithType: Strings.Join(String[],String)
  fullName: Microsoft.VisualBasic.Strings.Join(String[],String)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Returnerar en sträng som skapats genom att delta i ett antal understrängar i en matris."
  remarks: "Det finns en paritet mellan den `Join` och `Split` funktioner. Den `Join` funktionen tar en matris med strängar och slår ihop dem med hjälp av en sträng som avgränsare, för att returnera en sträng. Den `Split` funktionen en sträng och skiljer den på avgränsaren, som returnerar en matris med strängar. Dock viktigaste skillnaden är att `Join` kan sammanfoga strängar med valfri avgränsare sträng `Split` kan endast separata strängar som använder en avgränsare för en enstaka tecken."
  example:
  - "The following example demonstrates how to use the `Join` function to create a list from several strings.  \n  \n [!code-vb[VbVbalrStrings#10](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._124_1.vb)]"
  syntax:
    content: public static string Join (string[] SourceArray, string Delimiter = " ");
    parameters:
    - id: SourceArray
      type: System.String[]
      description: "Obligatoriskt. Endimensionell matris som innehåller delsträngar som ska sammanfogas."
    - id: Delimiter
      type: System.String
      description: "Valfritt. Valfri sträng används för att avgränsa delsträngar i den returnerade strängen. Om det utelämnas används blanksteg (&quot;&quot;) används. Om `Delimiter` är en tom sträng (&quot;&quot;) eller <xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref>, sammanfogas alla objekt i listan med ingen avgränsare."
    return:
      type: System.String
      description: "Returnerar en sträng som skapats genom att delta i ett antal understrängar i en matris."
  overload: Microsoft.VisualBasic.Strings.Join*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>SourceArray</code>är inte en endimensionell."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.LCase(System.Char)
  id: LCase(System.Char)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: LCase(Char)
  nameWithType: Strings.LCase(Char)
  fullName: Microsoft.VisualBasic.Strings.LCase(Char)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Returnerar en sträng eller ett tecken till gemener."
  remarks: "Endast versaler konverteras till små bokstäver. alla gemena bokstäver och bokstäver påverkas inte.       Den här funktionen använder kultur programinformation när du arbetar med strängen så att ändringarna som är lämpliga för språk som programmet används.      > [!IMPORTANT] > Om programmet gör säkerhet beslut baserat på resultatet av en jämförelse eller case-ändra-åtgärd och sedan åtgärden bör använda den <xref:System.String.Compare%2A?displayProperty=fullName>metoden och pass <xref:System.StringComparison>eller <xref:System.StringComparison>för den `comparisonType` argument.</xref:System.StringComparison> </xref:System.StringComparison> </xref:System.String.Compare%2A?displayProperty=fullName> Mer information finns i [hur kultur påverkar strängar i Visual Basic](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "This example uses the `LCase` function to return a lowercase version of a string.  \n  \n [!code-vb[VbVbalrStrings#12](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._236_1.vb)]"
  syntax:
    content: public static char LCase (char Value);
    parameters:
    - id: Value
      type: System.Char
      description: "Obligatoriskt. Alla giltiga <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> eller <xref uid=&quot;langword_csharp_Char&quot; name=&quot;Char&quot; href=&quot;&quot;> </xref> uttryck."
    return:
      type: System.Char
      description: "Returnerar en sträng eller ett tecken till gemener."
  overload: Microsoft.VisualBasic.Strings.LCase*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.LCase(System.String)
  id: LCase(System.String)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: LCase(String)
  nameWithType: Strings.LCase(String)
  fullName: Microsoft.VisualBasic.Strings.LCase(String)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Returnerar en sträng eller ett tecken till gemener."
  remarks: "Endast versaler konverteras till små bokstäver. alla gemena bokstäver och bokstäver påverkas inte.       Den här funktionen använder kultur programinformation när du arbetar med strängen så att ändringarna som är lämpliga för språk som programmet används.      > [!IMPORTANT] > Om programmet gör säkerhet beslut baserat på resultatet av en jämförelse eller case-ändra-åtgärd och sedan åtgärden bör använda den <xref:System.String.Compare%2A?displayProperty=fullName>metoden och pass <xref:System.StringComparison>eller <xref:System.StringComparison>för den `comparisonType` argument.</xref:System.StringComparison> </xref:System.StringComparison> </xref:System.String.Compare%2A?displayProperty=fullName> Mer information finns i [hur kultur påverkar strängar i Visual Basic](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "This example uses the `LCase` function to return a lowercase version of a string.  \n  \n [!code-vb[VbVbalrStrings#12](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._214_1.vb)]"
  syntax:
    content: public static string LCase (string Value);
    parameters:
    - id: Value
      type: System.String
      description: "Obligatoriskt. Alla giltiga <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> eller <xref uid=&quot;langword_csharp_Char&quot; name=&quot;Char&quot; href=&quot;&quot;> </xref> uttryck."
    return:
      type: System.String
      description: "Returnerar en sträng eller ett tecken till gemener."
  overload: Microsoft.VisualBasic.Strings.LCase*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.Left(System.String,System.Int32)
  id: Left(System.String,System.Int32)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: Left(String,Int32)
  nameWithType: Strings.Left(String,Int32)
  fullName: Microsoft.VisualBasic.Strings.Left(String,Int32)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Returnerar en sträng som innehåller ett angivet antal tecken från den vänstra sidan av en sträng."
  remarks: "Att fastställa antalet tecken i `str`, använda den `Len` funktion. Om används i en Windows Forms-program eller någon annan klass som har en `Left` egenskap, måste du fullständigt kvalificerat funktionen med `Microsoft.VisualBasic.Left`.      > [!NOTE] > Den `LeftB` funktionen i tidigare versioner av Visual Basic returnerar en sträng i byte i stället för tecken. Den används huvudsakligen för att konvertera strängar i DBCS-tecken (Double set) program. Alla aktuella Visual Basic-strängar är i Unicode och `LeftB` stöds inte längre."
  example:
  - "This example demonstrates the use of the `Left` function to return a substring of a given `String`. In a class that has a `Left` property, it may be necessary to fully qualify the `Left` function.  \n  \n [!code-vb[VbVbalrStrings#20](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._139_1.vb)]"
  syntax:
    content: public static string Left (string str, int Length);
    parameters:
    - id: str
      type: System.String
      description: "Obligatoriskt. <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>uttryck som tecknen ska returneras."
    - id: Length
      type: System.Int32
      description: "Obligatoriskt. <xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;></xref>uttryck. Numeriskt uttryck som anger hur många tecken som ska returneras. Om värdet är 0, en tom sträng (&quot;&quot;) returneras. Om större än eller lika med antalet tecken i `str`, returneras hela strängen."
    return:
      type: System.String
      description: "Returnerar en sträng som innehåller ett angivet antal tecken från den vänstra sidan av en sträng."
  overload: Microsoft.VisualBasic.Strings.Left*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>Length</code> &lt; 0."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.Len(System.Boolean)
  id: Len(System.Boolean)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: Len(Boolean)
  nameWithType: Strings.Len(Boolean)
  fullName: Microsoft.VisualBasic.Strings.Len(Boolean)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Returnerar ett heltal som innehåller antalet tecken i en sträng eller nominell antalet byte som krävs för att lagra en variabel."
  remarks: "Med användardefinierade typer och `Object` variabler, den `Len` returnerar storleken som kommer att skrivas till filen med den `FilePut` funktion. Om en `Object` innehåller en `String`, längden på strängen returneras. Om en `Object` innehåller en annan typ returneras storleken på objektet som kommer att skrivas till filen med den `FilePut` funktion.       Den `VBFixedString` attribut kan tillämpas på strängfält i objekt som anger storleken på sträng, i byte som skrivs till disk. Den `Len` använder funktionen den `VBFixedString` attribut om det är tillgängligt när du bestämmer storleken på `Object` variabler.      > [!NOTE] > Den `Len` funktionen kanske inte kan avgöra hur många byte för lagring krävs när det används med variabel längd strängar i användardefinierade datatyper.      > [!NOTE] > Den `LenB` funktionen i tidigare versioner av Visual Basic returnerar antalet byte i en sträng i stället för tecken. Den används huvudsakligen för att konvertera strängar i DBCS-tecken (Double set) program. Alla aktuella Visual Basic-strängar är i Unicode och `LenB` stöds inte längre.      ## Kommentarer för utvecklare av enheten för smartkort i `Len` funktionen accepterar endast `String` och `Object` variabler som parametrar. Om en `Object` innehåller en `String`, returneras längden på den `String`. Om parametern är NULL `Object` -referens, returnerar funktionen noll. Om en `Object` innehåller en annan typ, genereras ett undantag."
  example:
  - "This example uses `Len` to return the number of characters in a string.  \n  \n [!code-vb[VbVbalrStrings#33](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._155_1.vb)]"
  syntax:
    content: public static int Len (bool Expression);
    parameters:
    - id: Expression
      type: System.Boolean
      description: "Alla giltiga <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> uttryck eller variabler namn. Om `Expression` är av typen <xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;> </xref>, <xref uid=&quot;langword_csharp_Len&quot; name=&quot;Len&quot; href=&quot;&quot;> </xref> returnerar storleken som kommer att skrivas till filen med den <xref uid=&quot;langword_csharp_FilePut&quot; name=&quot;FilePut&quot; href=&quot;&quot;> </xref> funktion."
    return:
      type: System.Int32
      description: "Returnerar ett heltal som innehåller antalet tecken i en sträng eller nominell antalet byte som krävs för att lagra en variabel."
  overload: Microsoft.VisualBasic.Strings.Len*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.Len(System.Byte)
  id: Len(System.Byte)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: Len(Byte)
  nameWithType: Strings.Len(Byte)
  fullName: Microsoft.VisualBasic.Strings.Len(Byte)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Returnerar ett heltal som innehåller antalet tecken i en sträng eller nominell antalet byte som krävs för att lagra en variabel."
  remarks: "Med användardefinierade typer och `Object` variabler, den `Len` returnerar storleken som kommer att skrivas till filen med den `FilePut` funktion. Om en `Object` innehåller en `String`, längden på strängen returneras. Om en `Object` innehåller en annan typ returneras storleken på objektet som kommer att skrivas till filen med den `FilePut` funktion.       Den `VBFixedString` attribut kan tillämpas på strängfält i objekt som anger storleken på sträng, i byte som skrivs till disk. Den `Len` använder funktionen den `VBFixedString` attribut om det är tillgängligt när du bestämmer storleken på `Object` variabler.      > [!NOTE] > Den `Len` funktionen kanske inte kan avgöra hur många byte för lagring krävs när det används med variabel längd strängar i användardefinierade datatyper.      > [!NOTE] > Den `LenB` funktionen i tidigare versioner av Visual Basic returnerar antalet byte i en sträng i stället för tecken. Den används huvudsakligen för att konvertera strängar i DBCS-tecken (Double set) program. Alla aktuella Visual Basic-strängar är i Unicode och `LenB` stöds inte längre.      ## Kommentarer för utvecklare av enheten för smartkort i `Len` funktionen accepterar endast `String` och `Object` variabler som parametrar. Om en `Object` innehåller en `String`, returneras längden på den `String`. Om parametern är NULL `Object` -referens, returnerar funktionen noll. Om en `Object` innehåller en annan typ, genereras ett undantag."
  example:
  - "This example uses `Len` to return the number of characters in a string.  \n  \n [!code-vb[VbVbalrStrings#33](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._157_1.vb)]"
  syntax:
    content: public static int Len (byte Expression);
    parameters:
    - id: Expression
      type: System.Byte
      description: "Alla giltiga <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> uttryck eller variabler namn. Om `Expression` är av typen <xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;> </xref>, <xref uid=&quot;langword_csharp_Len&quot; name=&quot;Len&quot; href=&quot;&quot;> </xref> returnerar storleken som kommer att skrivas till filen med den <xref uid=&quot;langword_csharp_FilePut&quot; name=&quot;FilePut&quot; href=&quot;&quot;> </xref> funktion."
    return:
      type: System.Int32
      description: "Returnerar ett heltal som innehåller antalet tecken i en sträng eller nominell antalet byte som krävs för att lagra en variabel."
  overload: Microsoft.VisualBasic.Strings.Len*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.Len(System.Char)
  id: Len(System.Char)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: Len(Char)
  nameWithType: Strings.Len(Char)
  fullName: Microsoft.VisualBasic.Strings.Len(Char)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Returnerar ett heltal som innehåller antalet tecken i en sträng eller nominell antalet byte som krävs för att lagra en variabel."
  remarks: "Med användardefinierade typer och `Object` variabler, den `Len` returnerar storleken som kommer att skrivas till filen med den `FilePut` funktion. Om en `Object` innehåller en `String`, längden på strängen returneras. Om en `Object` innehåller en annan typ returneras storleken på objektet som kommer att skrivas till filen med den `FilePut` funktion.       Den `VBFixedString` attribut kan tillämpas på strängfält i objekt som anger storleken på sträng, i byte som skrivs till disk. Den `Len` använder funktionen den `VBFixedString` attribut om det är tillgängligt när du bestämmer storleken på `Object` variabler.      > [!NOTE] > Den `Len` funktionen kanske inte kan avgöra hur många byte för lagring krävs när det används med variabel längd strängar i användardefinierade datatyper.      > [!NOTE] > Den `LenB` funktionen i tidigare versioner av Visual Basic returnerar antalet byte i en sträng i stället för tecken. Den används huvudsakligen för att konvertera strängar i DBCS-tecken (Double set) program. Alla aktuella Visual Basic-strängar är i Unicode och `LenB` stöds inte längre.      ## Kommentarer för utvecklare av enheten för smartkort i `Len` funktionen accepterar endast `String` och `Object` variabler som parametrar. Om en `Object` innehåller en `String`, returneras längden på den `String`. Om parametern är NULL `Object` -referens, returnerar funktionen noll. Om en `Object` innehåller en annan typ, genereras ett undantag."
  example:
  - "This example uses `Len` to return the number of characters in a string.  \n  \n [!code-vb[VbVbalrStrings#33](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._159_1.vb)]"
  syntax:
    content: public static int Len (char Expression);
    parameters:
    - id: Expression
      type: System.Char
      description: "Alla giltiga <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> uttryck eller variabler namn. Om `Expression` är av typen <xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;> </xref>, <xref uid=&quot;langword_csharp_Len&quot; name=&quot;Len&quot; href=&quot;&quot;> </xref> returnerar storleken som kommer att skrivas till filen med den <xref uid=&quot;langword_csharp_FilePut&quot; name=&quot;FilePut&quot; href=&quot;&quot;> </xref> funktion."
    return:
      type: System.Int32
      description: "Returnerar ett heltal som innehåller antalet tecken i en sträng eller nominell antalet byte som krävs för att lagra en variabel."
  overload: Microsoft.VisualBasic.Strings.Len*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.Len(System.DateTime)
  id: Len(System.DateTime)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: Len(DateTime)
  nameWithType: Strings.Len(DateTime)
  fullName: Microsoft.VisualBasic.Strings.Len(DateTime)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Returnerar ett heltal som innehåller antalet tecken i en sträng eller nominell antalet byte som krävs för att lagra en variabel."
  remarks: "Med användardefinierade typer och `Object` variabler, den `Len` returnerar storleken som kommer att skrivas till filen med den `FilePut` funktion. Om en `Object` innehåller en `String`, längden på strängen returneras. Om en `Object` innehåller en annan typ returneras storleken på objektet som kommer att skrivas till filen med den `FilePut` funktion.       Den `VBFixedString` attribut kan tillämpas på strängfält i objekt som anger storleken på sträng, i byte som skrivs till disk. Den `Len` använder funktionen den `VBFixedString` attribut om det är tillgängligt när du bestämmer storleken på `Object` variabler.      > [!NOTE] > Den `Len` funktionen kanske inte kan avgöra hur många byte för lagring krävs när det används med variabel längd strängar i användardefinierade datatyper.      > [!NOTE] > Den `LenB` funktionen i tidigare versioner av Visual Basic returnerar antalet byte i en sträng i stället för tecken. Den används huvudsakligen för att konvertera strängar i DBCS-tecken (Double set) program. Alla aktuella Visual Basic-strängar är i Unicode och `LenB` stöds inte längre.      ## Kommentarer för utvecklare av enheten för smartkort i `Len` funktionen accepterar endast `String` och `Object` variabler som parametrar. Om en `Object` innehåller en `String`, returneras längden på den `String`. Om parametern är NULL `Object` -referens, returnerar funktionen noll. Om en `Object` innehåller en annan typ, genereras ett undantag."
  example:
  - "This example uses `Len` to return the number of characters in a string.  \n  \n [!code-vb[VbVbalrStrings#33](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._5_1.vb)]"
  syntax:
    content: public static int Len (DateTime Expression);
    parameters:
    - id: Expression
      type: System.DateTime
      description: "Alla giltiga <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> uttryck eller variabler namn. Om `Expression` är av typen <xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;> </xref>, <xref uid=&quot;langword_csharp_Len&quot; name=&quot;Len&quot; href=&quot;&quot;> </xref> returnerar storleken som kommer att skrivas till filen med den <xref uid=&quot;langword_csharp_FilePut&quot; name=&quot;FilePut&quot; href=&quot;&quot;> </xref> funktion."
    return:
      type: System.Int32
      description: "Returnerar ett heltal som innehåller antalet tecken i en sträng eller nominell antalet byte som krävs för att lagra en variabel."
  overload: Microsoft.VisualBasic.Strings.Len*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.Len(System.Decimal)
  id: Len(System.Decimal)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: Len(Decimal)
  nameWithType: Strings.Len(Decimal)
  fullName: Microsoft.VisualBasic.Strings.Len(Decimal)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Returnerar ett heltal som innehåller antalet tecken i en sträng eller nominell antalet byte som krävs för att lagra en variabel."
  remarks: "Med användardefinierade typer och `Object` variabler, den `Len` returnerar storleken som kommer att skrivas till filen med den `FilePut` funktion. Om en `Object` innehåller en `String`, längden på strängen returneras. Om en `Object` innehåller en annan typ returneras storleken på objektet som kommer att skrivas till filen med den `FilePut` funktion.       Den `VBFixedString` attribut kan tillämpas på strängfält i objekt som anger storleken på sträng, i byte som skrivs till disk. Den `Len` använder funktionen den `VBFixedString` attribut om det är tillgängligt när du bestämmer storleken på `Object` variabler.      > [!NOTE] > Den `Len` funktionen kanske inte kan avgöra hur många byte för lagring krävs när det används med variabel längd strängar i användardefinierade datatyper.      > [!NOTE] > Den `LenB` funktionen i tidigare versioner av Visual Basic returnerar antalet byte i en sträng i stället för tecken. Den används huvudsakligen för att konvertera strängar i DBCS-tecken (Double set) program. Alla aktuella Visual Basic-strängar är i Unicode och `LenB` stöds inte längre.      ## Kommentarer för utvecklare av enheten för smartkort i `Len` funktionen accepterar endast `String` och `Object` variabler som parametrar. Om en `Object` innehåller en `String`, returneras längden på den `String`. Om parametern är NULL `Object` -referens, returnerar funktionen noll. Om en `Object` innehåller en annan typ, genereras ett undantag."
  example:
  - "This example uses `Len` to return the number of characters in a string.  \n  \n [!code-vb[VbVbalrStrings#33](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._30_1.vb)]"
  syntax:
    content: public static int Len (decimal Expression);
    parameters:
    - id: Expression
      type: System.Decimal
      description: "Alla giltiga <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> uttryck eller variabler namn. Om `Expression` är av typen <xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;> </xref>, <xref uid=&quot;langword_csharp_Len&quot; name=&quot;Len&quot; href=&quot;&quot;> </xref> returnerar storleken som kommer att skrivas till filen med den <xref uid=&quot;langword_csharp_FilePut&quot; name=&quot;FilePut&quot; href=&quot;&quot;> </xref> funktion."
    return:
      type: System.Int32
      description: "Returnerar ett heltal som innehåller antalet tecken i en sträng eller nominell antalet byte som krävs för att lagra en variabel."
  overload: Microsoft.VisualBasic.Strings.Len*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.Len(System.Double)
  id: Len(System.Double)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: Len(Double)
  nameWithType: Strings.Len(Double)
  fullName: Microsoft.VisualBasic.Strings.Len(Double)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Returnerar ett heltal som innehåller antalet tecken i en sträng eller nominell antalet byte som krävs för att lagra en variabel."
  remarks: "Med användardefinierade typer och `Object` variabler, den `Len` returnerar storleken som kommer att skrivas till filen med den `FilePut` funktion. Om en `Object` innehåller en `String`, längden på strängen returneras. Om en `Object` innehåller en annan typ returneras storleken på objektet som kommer att skrivas till filen med den `FilePut` funktion.       Den `VBFixedString` attribut kan tillämpas på strängfält i objekt som anger storleken på sträng, i byte som skrivs till disk. Den `Len` använder funktionen den `VBFixedString` attribut om det är tillgängligt när du bestämmer storleken på `Object` variabler.      > [!NOTE] > Den `Len` funktionen kanske inte kan avgöra hur många byte för lagring krävs när det används med variabel längd strängar i användardefinierade datatyper.      > [!NOTE] > Den `LenB` funktionen i tidigare versioner av Visual Basic returnerar antalet byte i en sträng i stället för tecken. Den används huvudsakligen för att konvertera strängar i DBCS-tecken (Double set) program. Alla aktuella Visual Basic-strängar är i Unicode och `LenB` stöds inte längre.      ## Kommentarer för utvecklare av enheten för smartkort i `Len` funktionen accepterar endast `String` och `Object` variabler som parametrar. Om en `Object` innehåller en `String`, returneras längden på den `String`. Om parametern är NULL `Object` -referens, returnerar funktionen noll. Om en `Object` innehåller en annan typ, genereras ett undantag."
  example:
  - "This example uses `Len` to return the number of characters in a string.  \n  \n [!code-vb[VbVbalrStrings#33](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._173_1.vb)]"
  syntax:
    content: public static int Len (double Expression);
    parameters:
    - id: Expression
      type: System.Double
      description: "Alla giltiga <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> uttryck eller variabler namn. Om `Expression` är av typen <xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;> </xref>, <xref uid=&quot;langword_csharp_Len&quot; name=&quot;Len&quot; href=&quot;&quot;> </xref> returnerar storleken som kommer att skrivas till filen med den <xref uid=&quot;langword_csharp_FilePut&quot; name=&quot;FilePut&quot; href=&quot;&quot;> </xref> funktion."
    return:
      type: System.Int32
      description: "Returnerar ett heltal som innehåller antalet tecken i en sträng eller nominell antalet byte som krävs för att lagra en variabel."
  overload: Microsoft.VisualBasic.Strings.Len*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.Len(System.Int16)
  id: Len(System.Int16)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: Len(Int16)
  nameWithType: Strings.Len(Int16)
  fullName: Microsoft.VisualBasic.Strings.Len(Int16)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Returnerar ett heltal som innehåller antalet tecken i en sträng eller nominell antalet byte som krävs för att lagra en variabel."
  remarks: "Med användardefinierade typer och `Object` variabler, den `Len` returnerar storleken som kommer att skrivas till filen med den `FilePut` funktion. Om en `Object` innehåller en `String`, längden på strängen returneras. Om en `Object` innehåller en annan typ returneras storleken på objektet som kommer att skrivas till filen med den `FilePut` funktion.       Den `VBFixedString` attribut kan tillämpas på strängfält i objekt som anger storleken på sträng, i byte som skrivs till disk. Den `Len` använder funktionen den `VBFixedString` attribut om det är tillgängligt när du bestämmer storleken på `Object` variabler.      > [!NOTE] > Den `Len` funktionen kanske inte kan avgöra hur många byte för lagring krävs när det används med variabel längd strängar i användardefinierade datatyper.      > [!NOTE] > Den `LenB` funktionen i tidigare versioner av Visual Basic returnerar antalet byte i en sträng i stället för tecken. Den används huvudsakligen för att konvertera strängar i DBCS-tecken (Double set) program. Alla aktuella Visual Basic-strängar är i Unicode och `LenB` stöds inte längre.      ## Kommentarer för utvecklare av enheten för smartkort i `Len` funktionen accepterar endast `String` och `Object` variabler som parametrar. Om en `Object` innehåller en `String`, returneras längden på den `String`. Om parametern är NULL `Object` -referens, returnerar funktionen noll. Om en `Object` innehåller en annan typ, genereras ett undantag."
  example:
  - "This example uses `Len` to return the number of characters in a string.  \n  \n [!code-vb[VbVbalrStrings#33](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._198_1.vb)]"
  syntax:
    content: public static int Len (short Expression);
    parameters:
    - id: Expression
      type: System.Int16
      description: "Alla giltiga <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> uttryck eller variabler namn. Om `Expression` är av typen <xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;> </xref>, <xref uid=&quot;langword_csharp_Len&quot; name=&quot;Len&quot; href=&quot;&quot;> </xref> returnerar storleken som kommer att skrivas till filen med den <xref uid=&quot;langword_csharp_FilePut&quot; name=&quot;FilePut&quot; href=&quot;&quot;> </xref> funktion."
    return:
      type: System.Int32
      description: "Returnerar ett heltal som innehåller antalet tecken i en sträng eller nominell antalet byte som krävs för att lagra en variabel."
  overload: Microsoft.VisualBasic.Strings.Len*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.Len(System.Int32)
  id: Len(System.Int32)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: Len(Int32)
  nameWithType: Strings.Len(Int32)
  fullName: Microsoft.VisualBasic.Strings.Len(Int32)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Returnerar ett heltal som innehåller antalet tecken i en sträng eller nominell antalet byte som krävs för att lagra en variabel."
  remarks: "Med användardefinierade typer och `Object` variabler, den `Len` returnerar storleken som kommer att skrivas till filen med den `FilePut` funktion. Om en `Object` innehåller en `String`, längden på strängen returneras. Om en `Object` innehåller en annan typ returneras storleken på objektet som kommer att skrivas till filen med den `FilePut` funktion.       Den `VBFixedString` attribut kan tillämpas på strängfält i objekt som anger storleken på sträng, i byte som skrivs till disk. Den `Len` använder funktionen den `VBFixedString` attribut om det är tillgängligt när du bestämmer storleken på `Object` variabler.      > [!NOTE] > Den `Len` funktionen kanske inte kan avgöra hur många byte för lagring krävs när det används med variabel längd strängar i användardefinierade datatyper.      > [!NOTE] > Den `LenB` funktionen i tidigare versioner av Visual Basic returnerar antalet byte i en sträng i stället för tecken. Den används huvudsakligen för att konvertera strängar i DBCS-tecken (Double set) program. Alla aktuella Visual Basic-strängar är i Unicode och `LenB` stöds inte längre.      ## Kommentarer för utvecklare av enheten för smartkort i `Len` funktionen accepterar endast `String` och `Object` variabler som parametrar. Om en `Object` innehåller en `String`, returneras längden på den `String`. Om parametern är NULL `Object` -referens, returnerar funktionen noll. Om en `Object` innehåller en annan typ, genereras ett undantag."
  example:
  - "This example uses `Len` to return the number of characters in a string.  \n  \n [!code-vb[VbVbalrStrings#33](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._99_1.vb)]"
  syntax:
    content: public static int Len (int Expression);
    parameters:
    - id: Expression
      type: System.Int32
      description: "Alla giltiga <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> uttryck eller variabler namn. Om `Expression` är av typen <xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;> </xref>, <xref uid=&quot;langword_csharp_Len&quot; name=&quot;Len&quot; href=&quot;&quot;> </xref> returnerar storleken som kommer att skrivas till filen med den <xref uid=&quot;langword_csharp_FilePut&quot; name=&quot;FilePut&quot; href=&quot;&quot;> </xref> funktion."
    return:
      type: System.Int32
      description: "Returnerar ett heltal som innehåller antalet tecken i en sträng eller nominell antalet byte som krävs för att lagra en variabel."
  overload: Microsoft.VisualBasic.Strings.Len*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.Len(System.Int64)
  id: Len(System.Int64)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: Len(Int64)
  nameWithType: Strings.Len(Int64)
  fullName: Microsoft.VisualBasic.Strings.Len(Int64)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Returnerar ett heltal som innehåller antalet tecken i en sträng eller nominell antalet byte som krävs för att lagra en variabel."
  remarks: "Med användardefinierade typer och `Object` variabler, den `Len` returnerar storleken som kommer att skrivas till filen med den `FilePut` funktion. Om en `Object` innehåller en `String`, längden på strängen returneras. Om en `Object` innehåller en annan typ returneras storleken på objektet som kommer att skrivas till filen med den `FilePut` funktion.       Den `VBFixedString` attribut kan tillämpas på strängfält i objekt som anger storleken på sträng, i byte som skrivs till disk. Den `Len` använder funktionen den `VBFixedString` attribut om det är tillgängligt när du bestämmer storleken på `Object` variabler.      > [!NOTE] > Den `Len` funktionen kanske inte kan avgöra hur många byte för lagring krävs när det används med variabel längd strängar i användardefinierade datatyper.      > [!NOTE] > Den `LenB` funktionen i tidigare versioner av Visual Basic returnerar antalet byte i en sträng i stället för tecken. Den används huvudsakligen för att konvertera strängar i DBCS-tecken (Double set) program. Alla aktuella Visual Basic-strängar är i Unicode och `LenB` stöds inte längre.      ## Kommentarer för utvecklare av enheten för smartkort i `Len` funktionen accepterar endast `String` och `Object` variabler som parametrar. Om en `Object` innehåller en `String`, returneras längden på den `String`. Om parametern är NULL `Object` -referens, returnerar funktionen noll. Om en `Object` innehåller en annan typ, genereras ett undantag."
  example:
  - "This example uses `Len` to return the number of characters in a string.  \n  \n [!code-vb[VbVbalrStrings#33](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._162_1.vb)]"
  syntax:
    content: public static int Len (long Expression);
    parameters:
    - id: Expression
      type: System.Int64
      description: "Alla giltiga <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> uttryck eller variabler namn. Om `Expression` är av typen <xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;> </xref>, <xref uid=&quot;langword_csharp_Len&quot; name=&quot;Len&quot; href=&quot;&quot;> </xref> returnerar storleken som kommer att skrivas till filen med den <xref uid=&quot;langword_csharp_FilePut&quot; name=&quot;FilePut&quot; href=&quot;&quot;> </xref> funktion."
    return:
      type: System.Int32
      description: "Returnerar ett heltal som innehåller antalet tecken i en sträng eller nominell antalet byte som krävs för att lagra en variabel."
  overload: Microsoft.VisualBasic.Strings.Len*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.Len(System.Object)
  id: Len(System.Object)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: Len(Object)
  nameWithType: Strings.Len(Object)
  fullName: Microsoft.VisualBasic.Strings.Len(Object)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Returnerar ett heltal som innehåller antalet tecken i en sträng eller nominell antalet byte som krävs för att lagra en variabel."
  remarks: "Med användardefinierade typer och `Object` variabler, den `Len` returnerar storleken som kommer att skrivas till filen med den `FilePut` funktion. Om en `Object` innehåller en `String`, längden på strängen returneras. Om en `Object` innehåller en annan typ returneras storleken på objektet som kommer att skrivas till filen med den `FilePut` funktion.       Den `VBFixedString` attribut kan tillämpas på strängfält i objekt som anger storleken på sträng, i byte som skrivs till disk. Den `Len` använder funktionen den `VBFixedString` attribut om det är tillgängligt när du bestämmer storleken på `Object` variabler.      > [!NOTE] > Den `Len` funktionen kanske inte kan avgöra hur många byte för lagring krävs när det används med variabel längd strängar i användardefinierade datatyper.      > [!NOTE] > Den `LenB` funktionen i tidigare versioner av Visual Basic returnerar antalet byte i en sträng i stället för tecken. Den används huvudsakligen för att konvertera strängar i DBCS-tecken (Double set) program. Alla aktuella Visual Basic-strängar är i Unicode och `LenB` stöds inte längre.      ## Kommentarer för utvecklare av enheten för smartkort i `Len` funktionen accepterar endast `String` och `Object` variabler som parametrar. Om en `Object` innehåller en `String`, returneras längden på den `String`. Om parametern är NULL `Object` -referens, returnerar funktionen noll. Om en `Object` innehåller en annan typ, genereras ett undantag."
  example:
  - "This example uses `Len` to return the number of characters in a string.  \n  \n [!code-vb[VbVbalrStrings#33](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._193_1.vb)]"
  syntax:
    content: public static int Len (object Expression);
    parameters:
    - id: Expression
      type: System.Object
      description: "Alla giltiga <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> uttryck eller variabler namn. Om `Expression` är av typen <xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;> </xref>, <xref uid=&quot;langword_csharp_Len&quot; name=&quot;Len&quot; href=&quot;&quot;> </xref> returnerar storleken som kommer att skrivas till filen med den <xref uid=&quot;langword_csharp_FilePut&quot; name=&quot;FilePut&quot; href=&quot;&quot;> </xref> funktion."
    return:
      type: System.Int32
      description: "Returnerar ett heltal som innehåller antalet tecken i en sträng eller nominell antalet byte som krävs för att lagra en variabel."
  overload: Microsoft.VisualBasic.Strings.Len*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.Len(System.SByte)
  id: Len(System.SByte)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: Len(SByte)
  nameWithType: Strings.Len(SByte)
  fullName: Microsoft.VisualBasic.Strings.Len(SByte)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Returnerar ett heltal som innehåller antalet tecken i en sträng eller nominell antalet byte som krävs för att lagra en variabel."
  remarks: "Med användardefinierade typer och `Object` variabler, den `Len` returnerar storleken som kommer att skrivas till filen med den `FilePut` funktion. Om en `Object` innehåller en `String`, längden på strängen returneras. Om en `Object` innehåller en annan typ returneras storleken på objektet som kommer att skrivas till filen med den `FilePut` funktion.       Den `VBFixedString` attribut kan tillämpas på strängfält i objekt som anger storleken på sträng, i byte som skrivs till disk. Den `Len` använder funktionen den `VBFixedString` attribut om det är tillgängligt när du bestämmer storleken på `Object` variabler.      > [!NOTE] > Den `Len` funktionen kanske inte kan avgöra hur många byte för lagring krävs när det används med variabel längd strängar i användardefinierade datatyper.      > [!NOTE] > Den `LenB` funktionen i tidigare versioner av Visual Basic returnerar antalet byte i en sträng i stället för tecken. Den används huvudsakligen för att konvertera strängar i DBCS-tecken (Double set) program. Alla aktuella Visual Basic-strängar är i Unicode och `LenB` stöds inte längre.      ## Kommentarer för utvecklare av enheten för smartkort i `Len` funktionen accepterar endast `String` och `Object` variabler som parametrar. Om en `Object` innehåller en `String`, returneras längden på den `String`. Om parametern är NULL `Object` -referens, returnerar funktionen noll. Om en `Object` innehåller en annan typ, genereras ett undantag."
  example:
  - "This example uses `Len` to return the number of characters in a string.  \n  \n [!code-vb[VbVbalrStrings#33](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._171_1.vb)]"
  syntax:
    content: public static int Len (sbyte Expression);
    parameters:
    - id: Expression
      type: System.SByte
      description: "Alla giltiga <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> uttryck eller variabler namn. Om `Expression` är av typen <xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;> </xref>, <xref uid=&quot;langword_csharp_Len&quot; name=&quot;Len&quot; href=&quot;&quot;> </xref> returnerar storleken som kommer att skrivas till filen med den <xref uid=&quot;langword_csharp_FilePut&quot; name=&quot;FilePut&quot; href=&quot;&quot;> </xref> funktion."
    return:
      type: System.Int32
      description: "Returnerar ett heltal som innehåller antalet tecken i en sträng eller nominell antalet byte som krävs för att lagra en variabel."
  overload: Microsoft.VisualBasic.Strings.Len*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.Len(System.Single)
  id: Len(System.Single)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: Len(Single)
  nameWithType: Strings.Len(Single)
  fullName: Microsoft.VisualBasic.Strings.Len(Single)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Returnerar ett heltal som innehåller antalet tecken i en sträng eller nominell antalet byte som krävs för att lagra en variabel."
  remarks: "Med användardefinierade typer och `Object` variabler, den `Len` returnerar storleken som kommer att skrivas till filen med den `FilePut` funktion. Om en `Object` innehåller en `String`, längden på strängen returneras. Om en `Object` innehåller en annan typ returneras storleken på objektet som kommer att skrivas till filen med den `FilePut` funktion.       Den `VBFixedString` attribut kan tillämpas på strängfält i objekt som anger storleken på sträng, i byte som skrivs till disk. Den `Len` använder funktionen den `VBFixedString` attribut om det är tillgängligt när du bestämmer storleken på `Object` variabler.      > [!NOTE] > Den `Len` funktionen kanske inte kan avgöra hur många byte för lagring krävs när det används med variabel längd strängar i användardefinierade datatyper.      > [!NOTE] > Den `LenB` funktionen i tidigare versioner av Visual Basic returnerar antalet byte i en sträng i stället för tecken. Den används huvudsakligen för att konvertera strängar i DBCS-tecken (Double set) program. Alla aktuella Visual Basic-strängar är i Unicode och `LenB` stöds inte längre.      ## Kommentarer för utvecklare av enheten för smartkort i `Len` funktionen accepterar endast `String` och `Object` variabler som parametrar. Om en `Object` innehåller en `String`, returneras längden på den `String`. Om parametern är NULL `Object` -referens, returnerar funktionen noll. Om en `Object` innehåller en annan typ, genereras ett undantag."
  example:
  - "This example uses `Len` to return the number of characters in a string.  \n  \n [!code-vb[VbVbalrStrings#33](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._21_1.vb)]"
  syntax:
    content: public static int Len (float Expression);
    parameters:
    - id: Expression
      type: System.Single
      description: "Alla giltiga <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> uttryck eller variabler namn. Om `Expression` är av typen <xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;> </xref>, <xref uid=&quot;langword_csharp_Len&quot; name=&quot;Len&quot; href=&quot;&quot;> </xref> returnerar storleken som kommer att skrivas till filen med den <xref uid=&quot;langword_csharp_FilePut&quot; name=&quot;FilePut&quot; href=&quot;&quot;> </xref> funktion."
    return:
      type: System.Int32
      description: "Returnerar ett heltal som innehåller antalet tecken i en sträng eller nominell antalet byte som krävs för att lagra en variabel."
  overload: Microsoft.VisualBasic.Strings.Len*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.Len(System.String)
  id: Len(System.String)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: Len(String)
  nameWithType: Strings.Len(String)
  fullName: Microsoft.VisualBasic.Strings.Len(String)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Returnerar ett heltal som innehåller antalet tecken i en sträng eller nominell antalet byte som krävs för att lagra en variabel."
  remarks: "Med användardefinierade typer och `Object` variabler, den `Len` returnerar storleken som kommer att skrivas till filen med den `FilePut` funktion. Om en `Object` innehåller en `String`, längden på strängen returneras. Om en `Object` innehåller en annan typ returneras storleken på objektet som kommer att skrivas till filen med den `FilePut` funktion.       Den `VBFixedString` attribut kan tillämpas på strängfält i objekt som anger storleken på sträng, i byte som skrivs till disk. Den `Len` använder funktionen den `VBFixedString` attribut om det är tillgängligt när du bestämmer storleken på `Object` variabler.      > [!NOTE] > Den `Len` funktionen kanske inte kan avgöra hur många byte för lagring krävs när det används med variabel längd strängar i användardefinierade datatyper.      > [!NOTE] > Den `LenB` funktionen i tidigare versioner av Visual Basic returnerar antalet byte i en sträng i stället för tecken. Den används huvudsakligen för att konvertera strängar i DBCS-tecken (Double set) program. Alla aktuella Visual Basic-strängar är i Unicode och `LenB` stöds inte längre.      ## Kommentarer för utvecklare av enheten för smartkort i `Len` funktionen accepterar endast `String` och `Object` variabler som parametrar. Om en `Object` innehåller en `String`, returneras längden på den `String`. Om parametern är NULL `Object` -referens, returnerar funktionen noll. Om en `Object` innehåller en annan typ, genereras ett undantag."
  example:
  - "This example uses `Len` to return the number of characters in a string.  \n  \n [!code-vb[VbVbalrStrings#33](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._72_1.vb)]"
  syntax:
    content: public static int Len (string Expression);
    parameters:
    - id: Expression
      type: System.String
      description: "Alla giltiga <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> uttryck eller variabler namn. Om `Expression` är av typen <xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;> </xref>, <xref uid=&quot;langword_csharp_Len&quot; name=&quot;Len&quot; href=&quot;&quot;> </xref> returnerar storleken som kommer att skrivas till filen med den <xref uid=&quot;langword_csharp_FilePut&quot; name=&quot;FilePut&quot; href=&quot;&quot;> </xref> funktion."
    return:
      type: System.Int32
      description: "Returnerar ett heltal som innehåller antalet tecken i en sträng eller nominell antalet byte som krävs för att lagra en variabel."
  overload: Microsoft.VisualBasic.Strings.Len*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.Len(System.UInt16)
  id: Len(System.UInt16)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: Len(UInt16)
  nameWithType: Strings.Len(UInt16)
  fullName: Microsoft.VisualBasic.Strings.Len(UInt16)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Returnerar ett heltal som innehåller antalet tecken i en sträng eller nominell antalet byte som krävs för att lagra en variabel."
  remarks: "Med användardefinierade typer och `Object` variabler, den `Len` returnerar storleken som kommer att skrivas till filen med den `FilePut` funktion. Om en `Object` innehåller en `String`, längden på strängen returneras. Om en `Object` innehåller en annan typ returneras storleken på objektet som kommer att skrivas till filen med den `FilePut` funktion.       Den `VBFixedString` attribut kan tillämpas på strängfält i objekt som anger storleken på sträng, i byte som skrivs till disk. Den `Len` använder funktionen den `VBFixedString` attribut om det är tillgängligt när du bestämmer storleken på `Object` variabler.      > [!NOTE] > Den `Len` funktionen kanske inte kan avgöra hur många byte för lagring krävs när det används med variabel längd strängar i användardefinierade datatyper.      > [!NOTE] > Den `LenB` funktionen i tidigare versioner av Visual Basic returnerar antalet byte i en sträng i stället för tecken. Den används huvudsakligen för att konvertera strängar i DBCS-tecken (Double set) program. Alla aktuella Visual Basic-strängar är i Unicode och `LenB` stöds inte längre.      ## Kommentarer för utvecklare av enheten för smartkort i `Len` funktionen accepterar endast `String` och `Object` variabler som parametrar. Om en `Object` innehåller en `String`, returneras längden på den `String`. Om parametern är NULL `Object` -referens, returnerar funktionen noll. Om en `Object` innehåller en annan typ, genereras ett undantag."
  example:
  - "This example uses `Len` to return the number of characters in a string.  \n  \n [!code-vb[VbVbalrStrings#33](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._211_1.vb)]"
  syntax:
    content: public static int Len (ushort Expression);
    parameters:
    - id: Expression
      type: System.UInt16
      description: "Alla giltiga <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> uttryck eller variabler namn. Om `Expression` är av typen <xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;> </xref>, <xref uid=&quot;langword_csharp_Len&quot; name=&quot;Len&quot; href=&quot;&quot;> </xref> returnerar storleken som kommer att skrivas till filen med den <xref uid=&quot;langword_csharp_FilePut&quot; name=&quot;FilePut&quot; href=&quot;&quot;> </xref> funktion."
    return:
      type: System.Int32
      description: "Returnerar ett heltal som innehåller antalet tecken i en sträng eller nominell antalet byte som krävs för att lagra en variabel."
  overload: Microsoft.VisualBasic.Strings.Len*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.Len(System.UInt32)
  id: Len(System.UInt32)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: Len(UInt32)
  nameWithType: Strings.Len(UInt32)
  fullName: Microsoft.VisualBasic.Strings.Len(UInt32)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Returnerar ett heltal som innehåller antalet tecken i en sträng eller nominell antalet byte som krävs för att lagra en variabel."
  remarks: "Med användardefinierade typer och `Object` variabler, den `Len` returnerar storleken som kommer att skrivas till filen med den `FilePut` funktion. Om en `Object` innehåller en `String`, längden på strängen returneras. Om en `Object` innehåller en annan typ returneras storleken på objektet som kommer att skrivas till filen med den `FilePut` funktion.       Den `VBFixedString` attribut kan tillämpas på strängfält i objekt som anger storleken på sträng, i byte som skrivs till disk. Den `Len` använder funktionen den `VBFixedString` attribut om det är tillgängligt när du bestämmer storleken på `Object` variabler.      > [!NOTE] > Den `Len` funktionen kanske inte kan avgöra hur många byte för lagring krävs när det används med variabel längd strängar i användardefinierade datatyper.      > [!NOTE] > Den `LenB` funktionen i tidigare versioner av Visual Basic returnerar antalet byte i en sträng i stället för tecken. Den används huvudsakligen för att konvertera strängar i DBCS-tecken (Double set) program. Alla aktuella Visual Basic-strängar är i Unicode och `LenB` stöds inte längre.      ## Kommentarer för utvecklare av enheten för smartkort i `Len` funktionen accepterar endast `String` och `Object` variabler som parametrar. Om en `Object` innehåller en `String`, returneras längden på den `String`. Om parametern är NULL `Object` -referens, returnerar funktionen noll. Om en `Object` innehåller en annan typ, genereras ett undantag."
  example:
  - "This example uses `Len` to return the number of characters in a string.  \n  \n [!code-vb[VbVbalrStrings#33](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._150_1.vb)]"
  syntax:
    content: public static int Len (uint Expression);
    parameters:
    - id: Expression
      type: System.UInt32
      description: "Alla giltiga <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> uttryck eller variabler namn. Om `Expression` är av typen <xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;> </xref>, <xref uid=&quot;langword_csharp_Len&quot; name=&quot;Len&quot; href=&quot;&quot;> </xref> returnerar storleken som kommer att skrivas till filen med den <xref uid=&quot;langword_csharp_FilePut&quot; name=&quot;FilePut&quot; href=&quot;&quot;> </xref> funktion."
    return:
      type: System.Int32
      description: "Returnerar ett heltal som innehåller antalet tecken i en sträng eller nominell antalet byte som krävs för att lagra en variabel."
  overload: Microsoft.VisualBasic.Strings.Len*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.Len(System.UInt64)
  id: Len(System.UInt64)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: Len(UInt64)
  nameWithType: Strings.Len(UInt64)
  fullName: Microsoft.VisualBasic.Strings.Len(UInt64)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Returnerar ett heltal som innehåller antalet tecken i en sträng eller nominell antalet byte som krävs för att lagra en variabel."
  remarks: "Med användardefinierade typer och `Object` variabler, den `Len` returnerar storleken som kommer att skrivas till filen med den `FilePut` funktion. Om en `Object` innehåller en `String`, längden på strängen returneras. Om en `Object` innehåller en annan typ returneras storleken på objektet som kommer att skrivas till filen med den `FilePut` funktion.       Den `VBFixedString` attribut kan tillämpas på strängfält i objekt som anger storleken på sträng, i byte som skrivs till disk. Den `Len` använder funktionen den `VBFixedString` attribut om det är tillgängligt när du bestämmer storleken på `Object` variabler.      > [!NOTE] > Den `Len` funktionen kanske inte kan avgöra hur många byte för lagring krävs när det används med variabel längd strängar i användardefinierade datatyper.      > [!NOTE] > Den `LenB` funktionen i tidigare versioner av Visual Basic returnerar antalet byte i en sträng i stället för tecken. Den används huvudsakligen för att konvertera strängar i DBCS-tecken (Double set) program. Alla aktuella Visual Basic-strängar är i Unicode och `LenB` stöds inte längre.      ## Kommentarer för utvecklare av enheten för smartkort i `Len` funktionen accepterar endast `String` och `Object` variabler som parametrar. Om en `Object` innehåller en `String`, returneras längden på den `String`. Om parametern är NULL `Object` -referens, returnerar funktionen noll. Om en `Object` innehåller en annan typ, genereras ett undantag."
  example:
  - "This example uses `Len` to return the number of characters in a string.  \n  \n [!code-vb[VbVbalrStrings#33](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._37_1.vb)]"
  syntax:
    content: public static int Len (ulong Expression);
    parameters:
    - id: Expression
      type: System.UInt64
      description: "Alla giltiga <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> uttryck eller variabler namn. Om `Expression` är av typen <xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;> </xref>, <xref uid=&quot;langword_csharp_Len&quot; name=&quot;Len&quot; href=&quot;&quot;> </xref> returnerar storleken som kommer att skrivas till filen med den <xref uid=&quot;langword_csharp_FilePut&quot; name=&quot;FilePut&quot; href=&quot;&quot;> </xref> funktion."
    return:
      type: System.Int32
      description: "Returnerar ett heltal som innehåller antalet tecken i en sträng eller nominell antalet byte som krävs för att lagra en variabel."
  overload: Microsoft.VisualBasic.Strings.Len*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.LSet(System.String,System.Int32)
  id: LSet(System.String,System.Int32)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: LSet(String,Int32)
  nameWithType: Strings.LSet(String,Int32)
  fullName: Microsoft.VisualBasic.Strings.LSet(String,Int32)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Returnerar en vänsterjusterad sträng som innehåller den angivna strängen anpassad till den angivna längden."
  remarks: "Om den angivna strängen är längre än den angivna längden förkortas den returnerade strängen till den angivna längden. Om den angivna strängen är kortare än den angivna längden läggs blanksteg till höger i den returnerade strängen att skapa tillräckligt lång."
  example:
  - "This example demonstrates the use of the `LSet` function.  \n  \n [!code-vb[VbVbalrStrings#11](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._168_1.vb)]"
  syntax:
    content: public static string LSet (string Source, int Length);
    parameters:
    - id: Source
      type: System.String
      description: "Obligatoriskt. <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>uttryck. Namnet på string-variabel."
    - id: Length
      type: System.Int32
      description: "Obligatoriskt. <xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;></xref>uttryck. Returnerade strängens längd."
    return:
      type: System.String
      description: "Returnerar en vänsterjusterad sträng som innehåller den angivna strängen anpassad till den angivna längden."
  overload: Microsoft.VisualBasic.Strings.LSet*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.LTrim(System.String)
  id: LTrim(System.String)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: LTrim(String)
  nameWithType: Strings.LTrim(String)
  fullName: Microsoft.VisualBasic.Strings.LTrim(String)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Returnerar en sträng som innehåller en kopia av den angivna strängen utan inledande blanksteg (<xref uid=&quot;langword_csharp_LTrim&quot; name=&quot;LTrim&quot; href=&quot;&quot;></xref>), utan avslutande blanksteg (<xref uid=&quot;langword_csharp_RTrim&quot; name=&quot;RTrim&quot; href=&quot;&quot;></xref>), eller inga inledande eller avslutande blanksteg (<xref uid=&quot;langword_csharp_Trim&quot; name=&quot;Trim&quot; href=&quot;&quot;></xref>)."
  remarks: "Den `LTrim`, `RTrim`, och `Trim` funktioner ta bort blanksteg från slutet av strängar."
  example:
  - "This example uses the `LTrim` function to strip leading spaces and the `RTrim` function to strip trailing spaces from a string variable. It uses the `Trim` function to strip both types of spaces.  \n  \n [!code-vb[VbVbalrStrings#25](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._110_1.vb)]"
  syntax:
    content: public static string LTrim (string str);
    parameters:
    - id: str
      type: System.String
      description: "Obligatoriskt. Alla giltiga <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> uttryck."
    return:
      type: System.String
      description: "Returnerar en sträng som innehåller en kopia av den angivna strängen utan inledande blanksteg (<xref uid=&quot;langword_csharp_LTrim&quot; name=&quot;LTrim&quot; href=&quot;&quot;></xref>), utan avslutande blanksteg (<xref uid=&quot;langword_csharp_RTrim&quot; name=&quot;RTrim&quot; href=&quot;&quot;></xref>), eller inga inledande eller avslutande blanksteg (<xref uid=&quot;langword_csharp_Trim&quot; name=&quot;Trim&quot; href=&quot;&quot;></xref>)."
  overload: Microsoft.VisualBasic.Strings.LTrim*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.Mid(System.String,System.Int32)
  id: Mid(System.String,System.Int32)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: Mid(String,Int32)
  nameWithType: Strings.Mid(String,Int32)
  fullName: Microsoft.VisualBasic.Strings.Mid(String,Int32)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Returnerar en sträng som innehåller de tecken som startar från en angiven position i en sträng."
  remarks: "Att fastställa antalet tecken i `str`, använda den `Len` funktion.       Visual Basic har en `Mid` funktion och ett `Mid` instruktionen. Dessa element både fungerar på ett angivet antal tecken i en sträng, men `Mid` funktionen returnerar tecken vid den `Mid` instruktionen ersätter tecken. Mer information finns i [Mid instruktionen](~/add/includes/ajax-current-ext-md.md).      > [!NOTE] > Den `MidB` funktionen i tidigare versioner av Visual Basic returnerar en sträng i byte i stället för tecken. Den används huvudsakligen för att konvertera strängar i DBCS-tecken (Double set) program. Alla Visual Basic-strängar är i Unicode och `MidB` stöds inte längre."
  example:
  - "The last line in this example uses this overload of the `Mid` function to return the fifth and subsequent characters from a string.  \n  \n [!code-vb[VbVbalrStrings#17](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._67_1.vb)]"
  syntax:
    content: public static string Mid (string str, int Start);
    parameters:
    - id: str
      type: System.String
      description: "Obligatoriskt. <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>uttryck som innehåller de tecken som ska returneras."
    - id: Start
      type: System.Int32
      description: "Obligatoriskt. <xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;></xref>uttryck. Startpositionen för tecken som ska returneras. Om `Start` är större än antalet tecken i `str`, <xref uid=&quot;langword_csharp_Mid&quot; name=&quot;Mid&quot; href=&quot;&quot;> </xref> returneras en tom sträng (&quot;&quot;). `Start`är ett-baserade."
    return:
      type: System.String
      description: "En sträng som består av alla tecken från angiven position i strängen."
  overload: Microsoft.VisualBasic.Strings.Mid*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>Start</code>&lt;= 0 or <code>Length</code> &lt; 0."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.Mid(System.String,System.Int32,System.Int32)
  id: Mid(System.String,System.Int32,System.Int32)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: Mid(String,Int32,Int32)
  nameWithType: Strings.Mid(String,Int32,Int32)
  fullName: Microsoft.VisualBasic.Strings.Mid(String,Int32,Int32)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Returnerar en sträng som innehåller ett angivet antal tecken med början från en angiven position i en sträng."
  remarks: "Att fastställa antalet tecken i `str`, använda den `Len` funktion.       Visual Basic har en `Mid` funktion och ett `Mid` instruktionen. Dessa element både fungerar på ett angivet antal tecken i en sträng, men `Mid` funktionen returnerar tecken vid den `Mid` instruktionen ersätter tecken. Mer information finns i [Mid instruktionen](~/add/includes/ajax-current-ext-md.md).      > [!NOTE] > Den `MidB` funktionen i tidigare versioner av Visual Basic returnerar en sträng i byte i stället för tecken. Den används huvudsakligen för att konvertera strängar i DBCS-tecken (Double set) program. Alla Visual Basic-strängar är i Unicode och `MidB` stöds inte längre."
  example:
  - "The first two `Mid` functions in this example return the specified number of characters from a string, starting from the given positions. (The last function illustrates the <xref:Microsoft.VisualBasic.Strings.Mid%28System.String%2CSystem.Int32%29> overload and only specifies the starting point for the string extraction.)  \n  \n [!code-vb[VbVbalrStrings#17](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._33_1.vb)]"
  syntax:
    content: public static string Mid (string str, int Start, int Length);
    parameters:
    - id: str
      type: System.String
      description: "Obligatoriskt. <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>uttryck som innehåller de tecken som ska returneras."
    - id: Start
      type: System.Int32
      description: "Obligatoriskt. <xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;></xref>uttryck. Startpositionen för tecken som ska returneras. Om `Start` är större än antalet tecken i `str`, <xref uid=&quot;langword_csharp_Mid&quot; name=&quot;Mid&quot; href=&quot;&quot;> </xref> returneras en tom sträng (&quot;&quot;). `Start`bygger en."
    - id: Length
      type: System.Int32
      description: "Valfritt. <xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;></xref>uttryck. Antalet tecken som ska returneras. Om detta utelämnas används eller om det finns färre än `Length` tecken i texten (inklusive tecknet vid position `Start`), returneras alla tecken från startpositionen i slutet av strängen."
    return:
      type: System.String
      description: "En sträng som består av det angivna antalet tecken med början från angiven position i strängen."
  overload: Microsoft.VisualBasic.Strings.Mid*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>Start</code>&lt;= 0 or <code>Length</code> &lt; 0."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.Replace(System.String,System.String,System.String,System.Int32,System.Int32,Microsoft.VisualBasic.CompareMethod)
  id: Replace(System.String,System.String,System.String,System.Int32,System.Int32,Microsoft.VisualBasic.CompareMethod)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: Replace(String,String,String,Int32,Int32,CompareMethod)
  nameWithType: Strings.Replace(String,String,String,Int32,Int32,CompareMethod)
  fullName: Microsoft.VisualBasic.Strings.Replace(String,String,String,Int32,Int32,CompareMethod)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Returnerar en sträng som en angiven understräng har ersatts med en annan understräng ett angivet antal gånger."
  remarks: "Returvärdet för den `Replace` funktionen är en sträng som börjar vid positionen som anges av `Start` fram till slutet av den `Expression` sträng, med de ersättningar som anges av den `Find` och `Replace` värden.       Den `Compare` argument kan ha följande värden.      |||   |-|-|   | Konstanten | Beskrivning |   | `Binary`| Binär jämförelse |   | `Text`| Utför en textrepresentation jämförelse |"
  example:
  - "This example demonstrates the `Replace` function.  \n  \n```vb#  \nDim TestString As String = \"Shopping List\"  \n' Returns \"Shipping List\".  \nDim aString As String = Replace(TestString, \"o\", \"i\")  \n```"
  syntax:
    content: public static string Replace (string Expression, string Find, string Replacement, int Start = 1, int Count = -1, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);
    parameters:
    - id: Expression
      type: System.String
      description: "Obligatoriskt. Stränguttryck som delsträng som ska ersättas."
    - id: Find
      type: System.String
      description: "Obligatoriskt. Delsträngen som eftersöks."
    - id: Replacement
      type: System.String
      description: "Obligatoriskt. Ersättning delsträngen."
    - id: Start
      type: System.Int32
      description: "Valfritt. Placera inom `Expression` som startar en understräng som används för ersättning. Returvärdet för <xref uid=&quot;langword_csharp_Replace&quot; name=&quot;Replace&quot; href=&quot;&quot;> </xref> är en sträng som börjar vid `Start`, med lämpliga ändringar. Om detta utelämnas används antas 1."
    - id: Count
      type: System.Int32
      description: "Valfritt. Antalet förekomster som ska utföra. Om det utelämnas används är standardvärdet-1, vilket innebär att &quot;gör alla möjliga ersättningar.&quot;"
    - id: Compare
      type: Microsoft.VisualBasic.CompareMethod
      description: "Valfritt. Numeriskt värde som anger vilken typ av jämförelse du vill använda. Värden finns i inställningar."
    return:
      type: System.String
      description: "<xref uid=&quot;langword_csharp_Replace&quot; name=&quot;Replace&quot; href=&quot;&quot;></xref>returnerar följande värden.       <table><tbody><tr><td> Om       </td><td> Ersätt returnerar       </td></tr><tr><td><code>Find</code>är en tom sträng eller<xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;></xref></td><td> Kopia av<code>Expression</code></td></tr><tr><td><code>Replace</code>är en tom sträng       </td><td> Kopia av <code> Expression </code> med några förekomster av<code>Find</code></td></tr><tr><td><code>Expression</code>är en tom sträng eller <xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref>, eller <code> Start </code> är större än längden på<code>Expression</code></td><td><xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;></xref></td></tr><tr><td><code>Count</code>är 0       </td><td> Kopia av<code>Expression</code></td></tr></tbody></table>"
  overload: Microsoft.VisualBasic.Strings.Replace*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>Count</code>&lt; -1 or <code>Start</code> &lt;= 0."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.Right(System.String,System.Int32)
  id: Right(System.String,System.Int32)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: Right(String,Int32)
  nameWithType: Strings.Right(String,Int32)
  fullName: Microsoft.VisualBasic.Strings.Right(String,Int32)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Returnerar en sträng som innehåller ett angivet antal tecken från höger sida av en sträng."
  remarks: "Att fastställa antalet tecken i `str`, använda den `Len` funktion. Om används i ett Windows-formulär eller någon annan klass som har en `Right` egenskap, måste du fullständigt kvalificerat funktionen med `Microsoft.VisualBasic.Strings.Right`.      > [!NOTE] > Den `RightB` funktionen i tidigare versioner av Visual Basic returnerar en sträng i byte, i stället för tecken. Den används huvudsakligen för att konvertera strängar i DBCS-tecken (Double set) program. Alla aktuella Visual Basic-strängar är i Unicode och `RightB` stöds inte längre."
  example:
  - "This example demonstrates the use of the `Right` function to return a substring of a given `String`. In a class that has a `Right` property, it may be necessary to fully qualify the `Right` function.  \n  \n [!code-vb[VbVbalrStrings#21](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._221_1.vb)]"
  syntax:
    content: public static string Right (string str, int Length);
    parameters:
    - id: str
      type: System.String
      description: "Obligatoriskt. <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>uttryck som ska returneras tecknen längst till höger."
    - id: Length
      type: System.Int32
      description: "Obligatoriskt. <xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;></xref>. Numeriskt uttryck som anger hur många tecken som ska returneras. Om värdet är 0, en tom sträng (&quot;&quot;) returneras. Om större än eller lika med antalet tecken i `str`, returneras hela strängen."
    return:
      type: System.String
      description: "Returnerar en sträng som innehåller ett angivet antal tecken från höger sida av en sträng."
  overload: Microsoft.VisualBasic.Strings.Right*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>Length</code> &lt; 0."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.RSet(System.String,System.Int32)
  id: RSet(System.String,System.Int32)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: RSet(String,Int32)
  nameWithType: Strings.RSet(String,Int32)
  fullName: Microsoft.VisualBasic.Strings.RSet(String,Int32)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Returnerar en högerjusterad sträng som innehåller den angivna strängen anpassad till den angivna längden."
  remarks: "Om `Source` är längre än `Length`, `RSet` placerar endast tecknen, upp till längden på `Source`, i den returnerade strängen. Om den angivna strängen är kortare än den angivna längden läggs blanksteg längst till vänster på strängen som ger tillräckligt lång. Om den angivna strängen är längre än den angivna längden kortas den till den angivna längden."
  example:
  - "This example demonstrates the use of the `RSet` function.  \n  \n [!code-vb[VbVbalrStrings#9](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._218_1.vb)]"
  syntax:
    content: public static string RSet (string Source, int Length);
    parameters:
    - id: Source
      type: System.String
      description: "Obligatoriskt. <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>uttryck. Namnet på string-variabel."
    - id: Length
      type: System.Int32
      description: "Obligatoriskt. <xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;></xref>uttryck. Returnerade strängens längd."
    return:
      type: System.String
      description: "Returnerar en högerjusterad sträng som innehåller den angivna strängen anpassad till den angivna längden."
  overload: Microsoft.VisualBasic.Strings.RSet*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.RTrim(System.String)
  id: RTrim(System.String)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: RTrim(String)
  nameWithType: Strings.RTrim(String)
  fullName: Microsoft.VisualBasic.Strings.RTrim(String)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Returnerar en sträng som innehåller en kopia av den angivna strängen utan inledande blanksteg (<xref uid=&quot;langword_csharp_LTrim&quot; name=&quot;LTrim&quot; href=&quot;&quot;></xref>), utan avslutande blanksteg (<xref uid=&quot;langword_csharp_RTrim&quot; name=&quot;RTrim&quot; href=&quot;&quot;></xref>), eller inga inledande eller avslutande blanksteg (<xref uid=&quot;langword_csharp_Trim&quot; name=&quot;Trim&quot; href=&quot;&quot;></xref>)."
  remarks: "Den `LTrim`, `RTrim`, och `Trim` funktioner ta bort blanksteg från slutet av strängar."
  example:
  - "This example uses the `LTrim` function to strip leading spaces and the `RTrim` function to strip trailing spaces from a string variable. It uses the `Trim` function to strip both types of spaces.  \n  \n [!code-vb[VbVbalrStrings#25](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._143_1.vb)]"
  syntax:
    content: public static string RTrim (string str);
    parameters:
    - id: str
      type: System.String
      description: "Obligatoriskt. Alla giltiga <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> uttryck."
    return:
      type: System.String
      description: "Returnerar en sträng som innehåller en kopia av den angivna strängen utan inledande blanksteg (<xref uid=&quot;langword_csharp_LTrim&quot; name=&quot;LTrim&quot; href=&quot;&quot;></xref>), utan avslutande blanksteg (<xref uid=&quot;langword_csharp_RTrim&quot; name=&quot;RTrim&quot; href=&quot;&quot;></xref>), eller inga inledande eller avslutande blanksteg (<xref uid=&quot;langword_csharp_Trim&quot; name=&quot;Trim&quot; href=&quot;&quot;></xref>)."
  overload: Microsoft.VisualBasic.Strings.RTrim*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.Space(System.Int32)
  id: Space(System.Int32)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: Space(Int32)
  nameWithType: Strings.Space(Int32)
  fullName: Microsoft.VisualBasic.Strings.Space(Int32)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Returnerar en sträng som består av det angivna antalet blanksteg."
  remarks: "Den `Space` funktionen är användbar för att formatera utdata och radera data i strängar med fast längd."
  example:
  - "This example uses the `Space` function to return a string consisting of a specified number of spaces.  \n  \n [!code-vb[VbVbalrStrings#2](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._154_1.vb)]"
  syntax:
    content: public static string Space (int Number);
    parameters:
    - id: Number
      type: System.Int32
      description: "Obligatoriskt. <xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;></xref>uttryck. Antalet blanksteg i strängen."
    return:
      type: System.String
      description: "Returnerar en sträng som består av det angivna antalet blanksteg."
  overload: Microsoft.VisualBasic.Strings.Space*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>Number</code> &lt; 0."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.Split(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)
  id: Split(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: Split(String,String,Int32,CompareMethod)
  nameWithType: Strings.Split(String,String,Int32,CompareMethod)
  fullName: Microsoft.VisualBasic.Strings.Split(String,String,Int32,CompareMethod)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Returnerar en Nollbaserad, endimensionell matris som innehåller ett angivet antal understrängar."
  remarks: "Som standard, eller när `Limit` är lika med -1, den `Split` funktionen delar Indatasträngen vid varje förekomst av strängen som avgränsare och returnerar understrängar i en matris. När den `Limit` parametern är större än noll, den `Split` funktionen delar upp först strängen `Limit`-1 förekomst av avgränsaren, och returnerar en matris med resulterande delsträngar. Till exempel `Split(&quot;a:b:c&quot;, &quot;:&quot;)` returnerar matrisen `{&quot;a&quot;, &quot;b&quot;, &quot;c&quot;}`, medan `Split(&quot;a:b:c&quot;, &quot;:&quot;, 2)` returnerar matrisen `{&quot;a&quot;, &quot;b:c&quot;}`.       När den `Split` funktionen påträffar två avgränsare i en rad eller en avgränsare i början eller slutet av strängen, det tolkas dem som runt en tom sträng (&quot;&quot;). Till exempel `Split(&quot;xx&quot;, &quot;x&quot;)` returnerar den matris som innehåller tre tomma strängar: ett finns mellan början av strängen och först &quot;x&quot;, en finns mellan två &quot;strängar x&quot; och ett finns mellan den sista &quot;x&quot; och i slutet av strängen.       Den här tabellen visar hur det valfria `Delimiter`, `Limit`, och `Compare` parametrar kan ändra funktionssättet för den `Split` funktion.      |||   |-|-|   | Dela anropet | Returvärde |   | `Split(&quot;42, 12, 19&quot;)`| {&quot;42,&quot;, &quot;12&quot;, &quot;19&quot;} |   | `Split(&quot;42, 12, 19&quot;, &quot;, &quot;)`| {&quot;42&quot;, &quot;12&quot;, &quot;19&quot;} |   | `Split(&quot;42, 12, 19&quot;, &quot;, &quot;, 2)`| {&quot;42&quot;, &quot;12, 19&quot;} |   | `Split(&quot;192.168.0.1&quot;, &quot;.&quot;)`| {&quot;192&quot;, &quot;168&quot;, &quot;0&quot;, &quot;1&quot;} |   | `Split(&quot;Alice and Bob&quot;, &quot; AND &quot;)`| {&quot;Alice och Bob&quot;} |   | `Split(&quot;Alice and Bob&quot;, &quot; AND &quot;, ,CompareMethod.Text)`| {&quot;Alice&quot;, &quot;Bob&quot;} |   | `Split(&quot;someone@example.com&quot;, &quot;@&quot;,1)`| {&quot;someone@example.com&quot;}|   | `Split(&quot;someone@example.com&quot;, &quot;@&quot;,2)`| {&quot;någon&quot;, &quot;example.com&quot;}|       Den `Compare` argument kan ha följande värden.      ||||   |-|-|-|   | Konstanten | Beskrivning | Värdet |   | `CompareMethod.Binary`| Binär jämförelse |&0; |   | `CompareMethod.Text`| Utför en textrepresentation jämförelse |&1; |"
  example:
  - "The following example demonstrates how to split a string at its spaces.  \n  \n [!code-vb[VbVbalrStrings#13](~/add/codesnippet/visualbasic/6fd442c5-62bb-40f5-92c0-_1.vb)]  \n  \n The following example demonstrates how to split strings with multiple delimiters in a row and filter out the empty strings.  \n  \n [!code-vb[VbVbalrStrings#14](~/add/codesnippet/visualbasic/6fd442c5-62bb-40f5-92c0-_2.vb)]"
  syntax:
    content: public static string[] Split (string Expression, string Delimiter = " ", int Limit = -1, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);
    parameters:
    - id: Expression
      type: System.String
      description: "Obligatoriskt. <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>uttryck som innehåller delsträngar och avgränsare."
    - id: Delimiter
      type: System.String
      description: "Valfritt. Ett enskilt tecken som används för att identifiera delsträngen gränser. Om `Delimiter` utelämnas blanksteg (&quot;&quot;) antas vara avgränsaren."
    - id: Limit
      type: System.Int32
      description: "Valfritt. Maximalt antal understrängar som Indatasträngen ska delas. Standard –&1;, anger att den inmatade strängen ska delas vid varje förekomst av den `Delimiter` sträng."
    - id: Compare
      type: Microsoft.VisualBasic.CompareMethod
      description: "Valfritt. Numeriskt värde som anger jämförelsen så att använda. Värden finns i &quot;Inställningar&quot;."
    return:
      type: System.String[]
      description: "<xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>matris. Om <code> Expression </code> är en tom sträng (&quot;&quot;), <xref uid=&quot;langword_csharp_Split&quot; name=&quot;Split&quot; href=&quot;&quot;> </xref> returnerar en enda element-matris som innehåller en sträng med längden noll. Om <code> Delimiter </code> är en sträng med längden noll eller om det inte visas någonstans i <code> Expression </code>, <xref uid=&quot;langword_csharp_Split&quot; name=&quot;Split&quot; href=&quot;&quot;> </xref> returnerar en enda element-matris som innehåller hela <code> Expression </code> sträng."
  overload: Microsoft.VisualBasic.Strings.Split*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.StrComp(System.String,System.String,Microsoft.VisualBasic.CompareMethod)
  id: StrComp(System.String,System.String,Microsoft.VisualBasic.CompareMethod)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: StrComp(String,String,CompareMethod)
  nameWithType: Strings.StrComp(String,String,CompareMethod)
  fullName: Microsoft.VisualBasic.Strings.StrComp(String,String,CompareMethod)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Returnerar -1, 0 eller 1 baserat på resultatet av en strängjämförelse."
  remarks: "Strängarna jämförs med alfanumerisk ordning värden som börjar med det första tecknet. Mer information om binära jämförelser och textrepresentation jämförelser sorteringsordning finns [Compare när alternativet](~/add/includes/ajax-current-ext-md.md).       Den `Compare` argumentet inställningar: |||   |-|-|   | Konstanten | Beskrivning |   | `Binary`| Binär jämförelse, baserat på en sorteringsordning som härletts från interna binär representation av tecknen. |   | `Text`| Jämförelsen text, baserat på skiftlägeskänsliga text sorteringsordning bestäms av datorns `LocaleID` värde. |"
  example:
  - "This example uses the `StrComp` function to return the results of a string comparison.  \n  \n [!code-vb[VbVbalrStrings#22](~/add/codesnippet/visualbasic/40cb6ac0-98a9-4acc-9cbf-_1.vb)]"
  syntax:
    content: public static int StrComp (string String1, string String2, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);
    parameters:
    - id: String1
      type: System.String
      description: "Obligatoriskt. Alla giltiga <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> uttryck."
    - id: String2
      type: System.String
      description: "Obligatoriskt. Alla giltiga <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> uttryck."
    - id: Compare
      type: Microsoft.VisualBasic.CompareMethod
      description: "Valfritt. Anger typen för strängjämförelse. Om `Compare` utelämnas den <xref uid=&quot;langword_csharp_Option Compare&quot; name=&quot;Option Compare&quot; href=&quot;&quot;> </xref> inställningen avgör vilken typ av jämförelse."
    return:
      type: System.Int32
      description: "Den <xref uid=&quot;langword_csharp_StrComp&quot; name=&quot;StrComp&quot; href=&quot;&quot;> </xref> funktionen har följande värden.       <table><tbody><tr><td> Om       </td><td> Returnerar StrComp       </td></tr><tr><td><code>String1</code>sorterar före<code>String2</code></td><td> -1       </td></tr><tr><td><code>String1</code>är lika med<code>String2</code></td><td> 0       </td></tr><tr><td><code>String1</code>sorterar efter<code>String2</code></td><td> 1       </td></tr></tbody></table>"
  overload: Microsoft.VisualBasic.Strings.StrComp*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>Compare</code>värdet är inte giltigt."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.StrConv(System.String,Microsoft.VisualBasic.VbStrConv,System.Int32)
  id: StrConv(System.String,Microsoft.VisualBasic.VbStrConv,System.Int32)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: StrConv(String,VbStrConv,Int32)
  nameWithType: Strings.StrConv(String,VbStrConv,Int32)
  fullName: Microsoft.VisualBasic.Strings.StrConv(String,VbStrConv,Int32)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Returnerar en sträng med angiven konvertering."
  remarks: "Konstanterna `VbStrConv.Wide`, `VbStrConv.Narrow`, `VbStrConv.SimplifiedChinese`, `VbStrConv.TraditionalChinese`, `VbStrConv.Katakana`, och `VbStrConv.Hiragana` kan orsaka körningsfel när de används i platser där de inte gäller, men inte alltid: konstanterna `VbStrConv.Katakana` och `VbStrConv.Hiragana` kan användas i en icke-japanska system med det japanska språkpaketet är installerat. Dessutom använda konstanterna `VbStrConv.Wide` och `VbStrConv.Narrow` stöds på alla system med en östasiatiska språk som är installerat.       Den här funktionen använder kultur programinformation när du arbetar med strängen så att ändringarna som är lämpliga för språk som programmet används.      > [!IMPORTANT] > Om programmet gör säkerhet beslut baserat på resultatet av en jämförelse eller case-ändra-åtgärd och sedan åtgärden bör använda den <xref:System.String.Compare%2A?displayProperty=fullName>metoden och pass <xref:System.StringComparison>eller <xref:System.StringComparison>för den `comparisonType` argument.</xref:System.StringComparison> </xref:System.StringComparison> </xref:System.String.Compare%2A?displayProperty=fullName> Mer information finns i [hur kultur påverkar strängar i Visual Basic](~/add/includes/ajax-current-ext-md.md).       Den `Conversion` argumentet inställningar: |||   |-|-|   | Uppräkningsmedlem | Beskrivning |   | `VbStrConv.None`| Utför ingen konvertering |   | `VbStrConv.LinguisticCasing`| Använder språkliga regler för skiftläge, i stället för filsystem (standard). Giltigt med `VbStrConv.UpperCase` och `VbStrConv.LowerCase` endast. |   | `VbStrConv.UpperCase`| Konverterar strängen till versaler. |   | `VbStrConv.LowerCase`| Konverterar strängen till gemener. |   | `VbStrConv.ProperCase`| Konverterar den första bokstaven i varje ord till versaler. |   | `VbStrConv.Wide` <sup>*</sup>| Konverterar begränsa (halvbreddssiffror) tecken i strängen wide (full bredd) tecken. |   | `VbStrConv.Narrow` <sup>*</sup>| Konverterar wide (full bredd) tecken i strängen att begränsa (halvbreddssiffror) tecken. |   | `VbStrConv.Katakana` <sup>**</sup>| Konverterar hiraganatecken den till Katakana. |   | `VbStrConv.Hiragana` <sup>**</sup>| Konverterar katakanatecken i strängen till hiraganatecken. |   | `VbStrConv.SimplifiedChinese` <sup>*</sup>| Konverterar traditionell kinesiska tecken till förenklad kinesiska. |   | `VbStrConv.TraditionalChinese` <sup>*</sup>| Konverterar förenklad kinesiska tecken traditionell kinesiska. |       <sup> * </sup> Gäller för östasiatiska språk.       <sup>**</sup>Gäller enbart för Japan.      > [!NOTE] > Konstanterna definieras i .NET Framework CLR. Därför kan kan de användas var som helst i koden i stället för de faktiska värdena. De flesta kan kombineras (till exempel `UpperCase + Wide`), utom när de är ömsesidigt uteslutande (till exempel `VbStrConv.Wide + VbStrConv.Narrow`).       Följande är giltiga word avgränsare för rätt skiftläge: Null (`Chr$(0)`), vågrät tabb (`Chr$(9)`), radmatning (`Chr$(10)`), lodrät tabb (`Chr$(11)`), formuläret feed (`Chr$(12)`), radmatning (`Chr$(13)`), utrymme (single-byte-teckenuppsättning) (`Chr$(32)`). Det faktiska värdet för ett utrymme, vilket kan vara full eller halv bredd, varierar beroende på land/region för östasiatiska kulturer."
  example:
  - "This example converts text into all lowercase letters.  \n  \n [!code-vb[VbVbalrStrings#6](~/add/codesnippet/visualbasic/834dd6b9-b57e-4455-8085-_1.vb)]"
  syntax:
    content: public static string StrConv (string str, Microsoft.VisualBasic.VbStrConv Conversion, int LocaleID = 0);
    parameters:
    - id: str
      type: System.String
      description: "Obligatoriskt. <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>uttryck som ska konverteras."
    - id: Conversion
      type: Microsoft.VisualBasic.VbStrConv
      description: "Obligatoriskt. <xref href=&quot;Microsoft.VisualBasic.VbStrConv&quot;></xref>medlem. Uppräkningsvärde som anger vilken typ av konvertering som ska utföras."
    - id: LocaleID
      type: System.Int32
      description: "Valfritt. Den <xref uid=&quot;langword_csharp_LocaleID&quot; name=&quot;LocaleID&quot; href=&quot;&quot;> </xref> värde, om det skiljer sig från systemet <xref uid=&quot;langword_csharp_LocaleID&quot; name=&quot;LocaleID&quot; href=&quot;&quot;> </xref> värde. (Systemet <xref uid=&quot;langword_csharp_LocaleID&quot; name=&quot;LocaleID&quot; href=&quot;&quot;> </xref> värde är standard.)"
    return:
      type: System.String
      description: "Returnerar en sträng med angiven konvertering."
  overload: Microsoft.VisualBasic.Strings.StrConv*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Stöds inte <code> LocaleID </code>, <code> Conversion </code> &lt; 0 eller &gt; 2048 eller stöds inte konvertering för angivna språket."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.StrDup(System.Int32,System.Char)
  id: StrDup(System.Int32,System.Char)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: StrDup(Int32,Char)
  nameWithType: Strings.StrDup(Int32,Char)
  fullName: Microsoft.VisualBasic.Strings.StrDup(Int32,Char)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Returnerar en sträng eller ett objekt som består av det angivna tecknet upprepas angivet antal gånger."
  remarks: "Den här funktionen returnerar en `String` består av upprepade tecken. Det tecken som utgör strängen är det första tecknet i den `Character` argument och dupliceras `Number` antal gånger."
  example:
  - "This example uses the `StrDup` function to return a string of duplicated characters.  \n  \n [!code-vb[VbVbalrStrings#34](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._197_1.vb)]"
  syntax:
    content: public static string StrDup (int Number, char Character);
    parameters:
    - id: Number
      type: System.Int32
      description: "Obligatoriskt. <xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;></xref>uttryck. Längden på strängen som ska returneras."
    - id: Character
      type: System.Char
      description: "Obligatoriskt. Any valid <xref uid=&quot;langword_csharp_Char&quot; name=&quot;Char&quot; href=&quot;&quot;></xref>, <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>, or <xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;></xref> expression. Endast det första tecknet i uttrycket kommer att användas. Om tecknet är av typen <xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;> </xref>, det måste innehålla antingen en <xref uid=&quot;langword_csharp_Char&quot; name=&quot;Char&quot; href=&quot;&quot;> </xref> eller en <xref uid=&quot;langword_csharp_String &quot; name=&quot;String &quot; href=&quot;&quot;> </xref>värde."
    return:
      type: System.String
      description: "Returnerar en sträng eller ett objekt som består av det angivna tecknet upprepas angivet antal gånger."
  overload: Microsoft.VisualBasic.Strings.StrDup*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>Number</code>är mindre än 0 eller <code>Character</code> är inte giltig."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>Character</code>is <xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.StrDup(System.Int32,System.Object)
  id: StrDup(System.Int32,System.Object)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: StrDup(Int32,Object)
  nameWithType: Strings.StrDup(Int32,Object)
  fullName: Microsoft.VisualBasic.Strings.StrDup(Int32,Object)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Returnerar en sträng eller ett objekt som består av det angivna tecknet upprepas angivet antal gånger."
  remarks: "Den här funktionen returnerar en `String` består av upprepade tecken. Det tecken som utgör strängen är det första tecknet i den `Character` argument och dupliceras `Number` antal gånger."
  example:
  - "This example uses the `StrDup` function to return a string of duplicated characters.  \n  \n [!code-vb[VbVbalrStrings#34](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._63_1.vb)]"
  syntax:
    content: public static object StrDup (int Number, object Character);
    parameters:
    - id: Number
      type: System.Int32
      description: "Obligatoriskt. <xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;></xref>uttryck. Längden på strängen som ska returneras."
    - id: Character
      type: System.Object
      description: "Obligatoriskt. Any valid <xref uid=&quot;langword_csharp_Char&quot; name=&quot;Char&quot; href=&quot;&quot;></xref>, <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>, or <xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;></xref> expression. Endast det första tecknet i uttrycket kommer att användas. Om tecknet är av typen <xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;> </xref>, det måste innehålla antingen en <xref uid=&quot;langword_csharp_Char&quot; name=&quot;Char&quot; href=&quot;&quot;> </xref> eller en <xref uid=&quot;langword_csharp_String &quot; name=&quot;String &quot; href=&quot;&quot;> </xref>värde."
    return:
      type: System.Object
      description: "Returnerar en sträng eller ett objekt som består av det angivna tecknet upprepas angivet antal gånger."
  overload: Microsoft.VisualBasic.Strings.StrDup*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>Number</code>är mindre än 0 eller <code>Character</code> är inte giltig."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>Character</code>is <xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.StrDup(System.Int32,System.String)
  id: StrDup(System.Int32,System.String)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: StrDup(Int32,String)
  nameWithType: Strings.StrDup(Int32,String)
  fullName: Microsoft.VisualBasic.Strings.StrDup(Int32,String)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Returnerar en sträng eller ett objekt som består av det angivna tecknet upprepas angivet antal gånger."
  remarks: "Den här funktionen returnerar en `String` består av upprepade tecken. Det tecken som utgör strängen är det första tecknet i den `Character` argument och dupliceras `Number` antal gånger."
  example:
  - "This example uses the `StrDup` function to return a string of duplicated characters.  \n  \n [!code-vb[VbVbalrStrings#34](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._148_1.vb)]"
  syntax:
    content: public static string StrDup (int Number, string Character);
    parameters:
    - id: Number
      type: System.Int32
      description: "Obligatoriskt. <xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;></xref>uttryck. Längden på strängen som ska returneras."
    - id: Character
      type: System.String
      description: "Obligatoriskt. Any valid <xref uid=&quot;langword_csharp_Char&quot; name=&quot;Char&quot; href=&quot;&quot;></xref>, <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>, or <xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;></xref> expression. Endast det första tecknet i uttrycket kommer att användas. Om tecknet är av typen <xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;> </xref>, det måste innehålla antingen en <xref uid=&quot;langword_csharp_Char&quot; name=&quot;Char&quot; href=&quot;&quot;> </xref> eller en <xref uid=&quot;langword_csharp_String &quot; name=&quot;String &quot; href=&quot;&quot;> </xref>värde."
    return:
      type: System.String
      description: "Returnerar en sträng eller ett objekt som består av det angivna tecknet upprepas angivet antal gånger."
  overload: Microsoft.VisualBasic.Strings.StrDup*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>Number</code>är mindre än 0 eller <code>Character</code> är inte giltig."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>Character</code>is <xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.StrReverse(System.String)
  id: StrReverse(System.String)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: StrReverse(String)
  nameWithType: Strings.StrReverse(String)
  fullName: Microsoft.VisualBasic.Strings.StrReverse(String)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Returnerar en sträng i vilken teckenordningen för en angiven sträng är omvänd."
  remarks: "Den `StrReverse` funktionen returnerar en sträng som innehåller samma tecken som `Expression`, men i omvänd ordning."
  example:
  - '[!code-vb[VbVbalrStrings#29](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._7_1.vb)]'
  syntax:
    content: public static string StrReverse (string Expression);
    parameters:
    - id: Expression
      type: System.String
      description: "Obligatoriskt. Stränguttryck vars tecken är att återföra. Om `Expression` är en tom sträng (&quot;&quot;), returneras en tom sträng."
    return:
      type: System.String
      description: "Returnerar en sträng i vilken teckenordningen för en angiven sträng är omvänd."
  overload: Microsoft.VisualBasic.Strings.StrReverse*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.Trim(System.String)
  id: Trim(System.String)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: Trim(String)
  nameWithType: Strings.Trim(String)
  fullName: Microsoft.VisualBasic.Strings.Trim(String)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Returnerar en sträng som innehåller en kopia av den angivna strängen utan inledande blanksteg (<xref uid=&quot;langword_csharp_LTrim&quot; name=&quot;LTrim&quot; href=&quot;&quot;></xref>), utan avslutande blanksteg (<xref uid=&quot;langword_csharp_RTrim&quot; name=&quot;RTrim&quot; href=&quot;&quot;></xref>), eller inga inledande eller avslutande blanksteg (<xref uid=&quot;langword_csharp_Trim&quot; name=&quot;Trim&quot; href=&quot;&quot;></xref>)."
  remarks: "Den `LTrim`, `RTrim`, och `Trim` funktioner ta bort blanksteg från slutet av strängar."
  example:
  - "This example uses the `LTrim` function to strip leading spaces and the `RTrim` function to strip trailing spaces from a string variable. It uses the `Trim` function to strip both types of spaces.  \n  \n [!code-vb[VbVbalrStrings#25](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._87_1.vb)]"
  syntax:
    content: public static string Trim (string str);
    parameters:
    - id: str
      type: System.String
      description: "Obligatoriskt. Alla giltiga <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> uttryck."
    return:
      type: System.String
      description: "Returnerar en sträng som innehåller en kopia av den angivna strängen utan inledande blanksteg (<xref uid=&quot;langword_csharp_LTrim&quot; name=&quot;LTrim&quot; href=&quot;&quot;></xref>), utan avslutande blanksteg (<xref uid=&quot;langword_csharp_RTrim&quot; name=&quot;RTrim&quot; href=&quot;&quot;></xref>), eller inga inledande eller avslutande blanksteg (<xref uid=&quot;langword_csharp_Trim&quot; name=&quot;Trim&quot; href=&quot;&quot;></xref>)."
  overload: Microsoft.VisualBasic.Strings.Trim*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.UCase(System.Char)
  id: UCase(System.Char)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: UCase(Char)
  nameWithType: Strings.UCase(Char)
  fullName: Microsoft.VisualBasic.Strings.UCase(Char)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Returnerar en sträng eller ett tecken som innehåller den angivna strängen konverterad till versaler."
  remarks: "Endast små bokstäver konverteras till versaler; alla versaler och bokstäver påverkas inte.       Den här funktionen använder kultur programinformation när du arbetar med strängen så att ändringarna som är lämpliga för språk som programmet används.      > [!IMPORTANT] > Om programmet gör säkerhet beslut baserat på resultatet av en jämförelse eller case-ändra-åtgärd och sedan åtgärden bör använda den <xref:System.String.Compare%2A?displayProperty=fullName>metoden och pass <xref:System.StringComparison>eller <xref:System.StringComparison>för den `comparisonType` argument.</xref:System.StringComparison> </xref:System.StringComparison> </xref:System.String.Compare%2A?displayProperty=fullName> Mer information finns i [hur kultur påverkar strängar i Visual Basic](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "This example uses the `UCase` function to return an uppercase version of a string.  \n  \n [!code-vb[VbVbalrStrings#31](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._201_1.vb)]"
  syntax:
    content: public static char UCase (char Value);
    parameters:
    - id: Value
      type: System.Char
      description: "Obligatoriskt. Alla giltiga <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> eller <xref uid=&quot;langword_csharp_Char&quot; name=&quot;Char&quot; href=&quot;&quot;> </xref> uttryck."
    return:
      type: System.Char
      description: "Returnerar en sträng eller ett tecken som innehåller den angivna strängen konverterad till versaler."
  overload: Microsoft.VisualBasic.Strings.UCase*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.UCase(System.String)
  id: UCase(System.String)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: UCase(String)
  nameWithType: Strings.UCase(String)
  fullName: Microsoft.VisualBasic.Strings.UCase(String)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Returnerar en sträng eller ett tecken som innehåller den angivna strängen konverterad till versaler."
  remarks: "Endast små bokstäver konverteras till versaler; alla versaler och bokstäver påverkas inte.       Den här funktionen använder kultur programinformation när du arbetar med strängen så att ändringarna som är lämpliga för språk som programmet används.      > [!IMPORTANT] > Om programmet gör säkerhet beslut baserat på resultatet av en jämförelse eller case-ändra-åtgärd och sedan åtgärden bör använda den <xref:System.String.Compare%2A?displayProperty=fullName>metoden och pass <xref:System.StringComparison>eller <xref:System.StringComparison>för den `comparisonType` argument.</xref:System.StringComparison> </xref:System.StringComparison> </xref:System.String.Compare%2A?displayProperty=fullName> Mer information finns i [hur kultur påverkar strängar i Visual Basic](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "This example uses the `UCase` function to return an uppercase version of a string.  \n  \n [!code-vb[VbVbalrStrings#31](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._23_1.vb)]"
  syntax:
    content: public static string UCase (string Value);
    parameters:
    - id: Value
      type: System.String
      description: "Obligatoriskt. Alla giltiga <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> eller <xref uid=&quot;langword_csharp_Char&quot; name=&quot;Char&quot; href=&quot;&quot;> </xref> uttryck."
    return:
      type: System.String
      description: "Returnerar en sträng eller ett tecken som innehåller den angivna strängen konverterad till versaler."
  overload: Microsoft.VisualBasic.Strings.UCase*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.InvalidCastException
  isExternal: true
  name: System.InvalidCastException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: Microsoft.VisualBasic.Strings.Asc(System.Char)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Asc(Char)
  nameWithType: Strings.Asc(Char)
  fullName: Microsoft.VisualBasic.Strings.Asc(Char)
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Char
  parent: System
  isExternal: true
  name: Char
  nameWithType: Char
  fullName: System.Char
- uid: Microsoft.VisualBasic.Strings.Asc(System.String)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Asc(String)
  nameWithType: Strings.Asc(String)
  fullName: Microsoft.VisualBasic.Strings.Asc(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Microsoft.VisualBasic.Strings.AscW(System.Char)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: AscW(Char)
  nameWithType: Strings.AscW(Char)
  fullName: Microsoft.VisualBasic.Strings.AscW(Char)
- uid: Microsoft.VisualBasic.Strings.AscW(System.String)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: AscW(String)
  nameWithType: Strings.AscW(String)
  fullName: Microsoft.VisualBasic.Strings.AscW(String)
- uid: Microsoft.VisualBasic.Strings.Chr(System.Int32)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Chr(Int32)
  nameWithType: Strings.Chr(Int32)
  fullName: Microsoft.VisualBasic.Strings.Chr(Int32)
- uid: Microsoft.VisualBasic.Strings.ChrW(System.Int32)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: ChrW(Int32)
  nameWithType: Strings.ChrW(Int32)
  fullName: Microsoft.VisualBasic.Strings.ChrW(Int32)
- uid: Microsoft.VisualBasic.Strings.Filter(System.Object[],System.String,System.Boolean,Microsoft.VisualBasic.CompareMethod)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Filter(Object[],String,Boolean,CompareMethod)
  nameWithType: Strings.Filter(Object[],String,Boolean,CompareMethod)
  fullName: Microsoft.VisualBasic.Strings.Filter(Object[],String,Boolean,CompareMethod)
- uid: System.String[]
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String[]
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Object[]
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object[]
  spec.csharp:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: Object[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Microsoft.VisualBasic.CompareMethod
  parent: Microsoft.VisualBasic
  isExternal: false
  name: CompareMethod
  nameWithType: CompareMethod
  fullName: Microsoft.VisualBasic.CompareMethod
- uid: Microsoft.VisualBasic.Strings.Filter(System.String[],System.String,System.Boolean,Microsoft.VisualBasic.CompareMethod)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Filter(String[],String,Boolean,CompareMethod)
  nameWithType: Strings.Filter(String[],String,Boolean,CompareMethod)
  fullName: Microsoft.VisualBasic.Strings.Filter(String[],String,Boolean,CompareMethod)
- uid: Microsoft.VisualBasic.Strings.Format(System.Object,System.String)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Format(Object,String)
  nameWithType: Strings.Format(Object,String)
  fullName: Microsoft.VisualBasic.Strings.Format(Object,String)
- uid: Microsoft.VisualBasic.Strings.FormatCurrency(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: FormatCurrency(Object,Int32,TriState,TriState,TriState)
  nameWithType: Strings.FormatCurrency(Object,Int32,TriState,TriState,TriState)
  fullName: Microsoft.VisualBasic.Strings.FormatCurrency(Object,Int32,TriState,TriState,TriState)
- uid: Microsoft.VisualBasic.TriState
  parent: Microsoft.VisualBasic
  isExternal: false
  name: TriState
  nameWithType: TriState
  fullName: Microsoft.VisualBasic.TriState
- uid: Microsoft.VisualBasic.Strings.FormatDateTime(System.DateTime,Microsoft.VisualBasic.DateFormat)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: FormatDateTime(DateTime,DateFormat)
  nameWithType: Strings.FormatDateTime(DateTime,DateFormat)
  fullName: Microsoft.VisualBasic.Strings.FormatDateTime(DateTime,DateFormat)
- uid: System.DateTime
  parent: System
  isExternal: true
  name: DateTime
  nameWithType: DateTime
  fullName: System.DateTime
- uid: Microsoft.VisualBasic.DateFormat
  parent: Microsoft.VisualBasic
  isExternal: false
  name: DateFormat
  nameWithType: DateFormat
  fullName: Microsoft.VisualBasic.DateFormat
- uid: Microsoft.VisualBasic.Strings.FormatNumber(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: FormatNumber(Object,Int32,TriState,TriState,TriState)
  nameWithType: Strings.FormatNumber(Object,Int32,TriState,TriState,TriState)
  fullName: Microsoft.VisualBasic.Strings.FormatNumber(Object,Int32,TriState,TriState,TriState)
- uid: Microsoft.VisualBasic.Strings.FormatPercent(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: FormatPercent(Object,Int32,TriState,TriState,TriState)
  nameWithType: Strings.FormatPercent(Object,Int32,TriState,TriState,TriState)
  fullName: Microsoft.VisualBasic.Strings.FormatPercent(Object,Int32,TriState,TriState,TriState)
- uid: Microsoft.VisualBasic.Strings.GetChar(System.String,System.Int32)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: GetChar(String,Int32)
  nameWithType: Strings.GetChar(String,Int32)
  fullName: Microsoft.VisualBasic.Strings.GetChar(String,Int32)
- uid: Microsoft.VisualBasic.Strings.InStr(System.String,System.String,Microsoft.VisualBasic.CompareMethod)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: InStr(String,String,CompareMethod)
  nameWithType: Strings.InStr(String,String,CompareMethod)
  fullName: Microsoft.VisualBasic.Strings.InStr(String,String,CompareMethod)
- uid: Microsoft.VisualBasic.Strings.InStr(System.Int32,System.String,System.String,Microsoft.VisualBasic.CompareMethod)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: InStr(Int32,String,String,CompareMethod)
  nameWithType: Strings.InStr(Int32,String,String,CompareMethod)
  fullName: Microsoft.VisualBasic.Strings.InStr(Int32,String,String,CompareMethod)
- uid: Microsoft.VisualBasic.Strings.InStrRev(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: InStrRev(String,String,Int32,CompareMethod)
  nameWithType: Strings.InStrRev(String,String,Int32,CompareMethod)
  fullName: Microsoft.VisualBasic.Strings.InStrRev(String,String,Int32,CompareMethod)
- uid: Microsoft.VisualBasic.Strings.Join(System.Object[],System.String)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Join(Object[],String)
  nameWithType: Strings.Join(Object[],String)
  fullName: Microsoft.VisualBasic.Strings.Join(Object[],String)
- uid: Microsoft.VisualBasic.Strings.Join(System.String[],System.String)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Join(String[],String)
  nameWithType: Strings.Join(String[],String)
  fullName: Microsoft.VisualBasic.Strings.Join(String[],String)
- uid: Microsoft.VisualBasic.Strings.LCase(System.Char)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: LCase(Char)
  nameWithType: Strings.LCase(Char)
  fullName: Microsoft.VisualBasic.Strings.LCase(Char)
- uid: Microsoft.VisualBasic.Strings.LCase(System.String)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: LCase(String)
  nameWithType: Strings.LCase(String)
  fullName: Microsoft.VisualBasic.Strings.LCase(String)
- uid: Microsoft.VisualBasic.Strings.Left(System.String,System.Int32)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Left(String,Int32)
  nameWithType: Strings.Left(String,Int32)
  fullName: Microsoft.VisualBasic.Strings.Left(String,Int32)
- uid: Microsoft.VisualBasic.Strings.Len(System.Boolean)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Len(Boolean)
  nameWithType: Strings.Len(Boolean)
  fullName: Microsoft.VisualBasic.Strings.Len(Boolean)
- uid: Microsoft.VisualBasic.Strings.Len(System.Byte)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Len(Byte)
  nameWithType: Strings.Len(Byte)
  fullName: Microsoft.VisualBasic.Strings.Len(Byte)
- uid: System.Byte
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte
- uid: Microsoft.VisualBasic.Strings.Len(System.Char)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Len(Char)
  nameWithType: Strings.Len(Char)
  fullName: Microsoft.VisualBasic.Strings.Len(Char)
- uid: Microsoft.VisualBasic.Strings.Len(System.DateTime)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Len(DateTime)
  nameWithType: Strings.Len(DateTime)
  fullName: Microsoft.VisualBasic.Strings.Len(DateTime)
- uid: Microsoft.VisualBasic.Strings.Len(System.Decimal)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Len(Decimal)
  nameWithType: Strings.Len(Decimal)
  fullName: Microsoft.VisualBasic.Strings.Len(Decimal)
- uid: System.Decimal
  parent: System
  isExternal: true
  name: Decimal
  nameWithType: Decimal
  fullName: System.Decimal
- uid: Microsoft.VisualBasic.Strings.Len(System.Double)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Len(Double)
  nameWithType: Strings.Len(Double)
  fullName: Microsoft.VisualBasic.Strings.Len(Double)
- uid: System.Double
  parent: System
  isExternal: true
  name: Double
  nameWithType: Double
  fullName: System.Double
- uid: Microsoft.VisualBasic.Strings.Len(System.Int16)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Len(Int16)
  nameWithType: Strings.Len(Int16)
  fullName: Microsoft.VisualBasic.Strings.Len(Int16)
- uid: System.Int16
  parent: System
  isExternal: true
  name: Int16
  nameWithType: Int16
  fullName: System.Int16
- uid: Microsoft.VisualBasic.Strings.Len(System.Int32)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Len(Int32)
  nameWithType: Strings.Len(Int32)
  fullName: Microsoft.VisualBasic.Strings.Len(Int32)
- uid: Microsoft.VisualBasic.Strings.Len(System.Int64)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Len(Int64)
  nameWithType: Strings.Len(Int64)
  fullName: Microsoft.VisualBasic.Strings.Len(Int64)
- uid: System.Int64
  parent: System
  isExternal: true
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: Microsoft.VisualBasic.Strings.Len(System.Object)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Len(Object)
  nameWithType: Strings.Len(Object)
  fullName: Microsoft.VisualBasic.Strings.Len(Object)
- uid: Microsoft.VisualBasic.Strings.Len(System.SByte)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Len(SByte)
  nameWithType: Strings.Len(SByte)
  fullName: Microsoft.VisualBasic.Strings.Len(SByte)
- uid: System.SByte
  parent: System
  isExternal: true
  name: SByte
  nameWithType: SByte
  fullName: System.SByte
- uid: Microsoft.VisualBasic.Strings.Len(System.Single)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Len(Single)
  nameWithType: Strings.Len(Single)
  fullName: Microsoft.VisualBasic.Strings.Len(Single)
- uid: System.Single
  parent: System
  isExternal: true
  name: Single
  nameWithType: Single
  fullName: System.Single
- uid: Microsoft.VisualBasic.Strings.Len(System.String)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Len(String)
  nameWithType: Strings.Len(String)
  fullName: Microsoft.VisualBasic.Strings.Len(String)
- uid: Microsoft.VisualBasic.Strings.Len(System.UInt16)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Len(UInt16)
  nameWithType: Strings.Len(UInt16)
  fullName: Microsoft.VisualBasic.Strings.Len(UInt16)
- uid: System.UInt16
  parent: System
  isExternal: true
  name: UInt16
  nameWithType: UInt16
  fullName: System.UInt16
- uid: Microsoft.VisualBasic.Strings.Len(System.UInt32)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Len(UInt32)
  nameWithType: Strings.Len(UInt32)
  fullName: Microsoft.VisualBasic.Strings.Len(UInt32)
- uid: System.UInt32
  parent: System
  isExternal: true
  name: UInt32
  nameWithType: UInt32
  fullName: System.UInt32
- uid: Microsoft.VisualBasic.Strings.Len(System.UInt64)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Len(UInt64)
  nameWithType: Strings.Len(UInt64)
  fullName: Microsoft.VisualBasic.Strings.Len(UInt64)
- uid: System.UInt64
  parent: System
  isExternal: true
  name: UInt64
  nameWithType: UInt64
  fullName: System.UInt64
- uid: Microsoft.VisualBasic.Strings.LSet(System.String,System.Int32)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: LSet(String,Int32)
  nameWithType: Strings.LSet(String,Int32)
  fullName: Microsoft.VisualBasic.Strings.LSet(String,Int32)
- uid: Microsoft.VisualBasic.Strings.LTrim(System.String)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: LTrim(String)
  nameWithType: Strings.LTrim(String)
  fullName: Microsoft.VisualBasic.Strings.LTrim(String)
- uid: Microsoft.VisualBasic.Strings.Mid(System.String,System.Int32)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Mid(String,Int32)
  nameWithType: Strings.Mid(String,Int32)
  fullName: Microsoft.VisualBasic.Strings.Mid(String,Int32)
- uid: Microsoft.VisualBasic.Strings.Mid(System.String,System.Int32,System.Int32)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Mid(String,Int32,Int32)
  nameWithType: Strings.Mid(String,Int32,Int32)
  fullName: Microsoft.VisualBasic.Strings.Mid(String,Int32,Int32)
- uid: Microsoft.VisualBasic.Strings.Replace(System.String,System.String,System.String,System.Int32,System.Int32,Microsoft.VisualBasic.CompareMethod)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Replace(String,String,String,Int32,Int32,CompareMethod)
  nameWithType: Strings.Replace(String,String,String,Int32,Int32,CompareMethod)
  fullName: Microsoft.VisualBasic.Strings.Replace(String,String,String,Int32,Int32,CompareMethod)
- uid: Microsoft.VisualBasic.Strings.Right(System.String,System.Int32)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Right(String,Int32)
  nameWithType: Strings.Right(String,Int32)
  fullName: Microsoft.VisualBasic.Strings.Right(String,Int32)
- uid: Microsoft.VisualBasic.Strings.RSet(System.String,System.Int32)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: RSet(String,Int32)
  nameWithType: Strings.RSet(String,Int32)
  fullName: Microsoft.VisualBasic.Strings.RSet(String,Int32)
- uid: Microsoft.VisualBasic.Strings.RTrim(System.String)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: RTrim(String)
  nameWithType: Strings.RTrim(String)
  fullName: Microsoft.VisualBasic.Strings.RTrim(String)
- uid: Microsoft.VisualBasic.Strings.Space(System.Int32)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Space(Int32)
  nameWithType: Strings.Space(Int32)
  fullName: Microsoft.VisualBasic.Strings.Space(Int32)
- uid: Microsoft.VisualBasic.Strings.Split(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Split(String,String,Int32,CompareMethod)
  nameWithType: Strings.Split(String,String,Int32,CompareMethod)
  fullName: Microsoft.VisualBasic.Strings.Split(String,String,Int32,CompareMethod)
- uid: Microsoft.VisualBasic.Strings.StrComp(System.String,System.String,Microsoft.VisualBasic.CompareMethod)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: StrComp(String,String,CompareMethod)
  nameWithType: Strings.StrComp(String,String,CompareMethod)
  fullName: Microsoft.VisualBasic.Strings.StrComp(String,String,CompareMethod)
- uid: Microsoft.VisualBasic.Strings.StrConv(System.String,Microsoft.VisualBasic.VbStrConv,System.Int32)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: StrConv(String,VbStrConv,Int32)
  nameWithType: Strings.StrConv(String,VbStrConv,Int32)
  fullName: Microsoft.VisualBasic.Strings.StrConv(String,VbStrConv,Int32)
- uid: Microsoft.VisualBasic.VbStrConv
  parent: Microsoft.VisualBasic
  isExternal: false
  name: VbStrConv
  nameWithType: VbStrConv
  fullName: Microsoft.VisualBasic.VbStrConv
- uid: Microsoft.VisualBasic.Strings.StrDup(System.Int32,System.Char)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: StrDup(Int32,Char)
  nameWithType: Strings.StrDup(Int32,Char)
  fullName: Microsoft.VisualBasic.Strings.StrDup(Int32,Char)
- uid: Microsoft.VisualBasic.Strings.StrDup(System.Int32,System.Object)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: StrDup(Int32,Object)
  nameWithType: Strings.StrDup(Int32,Object)
  fullName: Microsoft.VisualBasic.Strings.StrDup(Int32,Object)
- uid: Microsoft.VisualBasic.Strings.StrDup(System.Int32,System.String)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: StrDup(Int32,String)
  nameWithType: Strings.StrDup(Int32,String)
  fullName: Microsoft.VisualBasic.Strings.StrDup(Int32,String)
- uid: Microsoft.VisualBasic.Strings.StrReverse(System.String)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: StrReverse(String)
  nameWithType: Strings.StrReverse(String)
  fullName: Microsoft.VisualBasic.Strings.StrReverse(String)
- uid: Microsoft.VisualBasic.Strings.Trim(System.String)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Trim(String)
  nameWithType: Strings.Trim(String)
  fullName: Microsoft.VisualBasic.Strings.Trim(String)
- uid: Microsoft.VisualBasic.Strings.UCase(System.Char)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: UCase(Char)
  nameWithType: Strings.UCase(Char)
  fullName: Microsoft.VisualBasic.Strings.UCase(Char)
- uid: Microsoft.VisualBasic.Strings.UCase(System.String)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: UCase(String)
  nameWithType: Strings.UCase(String)
  fullName: Microsoft.VisualBasic.Strings.UCase(String)
- uid: Microsoft.VisualBasic.Strings.Asc*
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Asc
  nameWithType: Strings.Asc
- uid: Microsoft.VisualBasic.Strings.AscW*
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: AscW
  nameWithType: Strings.AscW
- uid: Microsoft.VisualBasic.Strings.Chr*
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Chr
  nameWithType: Strings.Chr
- uid: Microsoft.VisualBasic.Strings.ChrW*
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: ChrW
  nameWithType: Strings.ChrW
- uid: Microsoft.VisualBasic.Strings.Filter*
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Filter
  nameWithType: Strings.Filter
- uid: Microsoft.VisualBasic.Strings.Format*
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Format
  nameWithType: Strings.Format
- uid: Microsoft.VisualBasic.Strings.FormatCurrency*
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: FormatCurrency
  nameWithType: Strings.FormatCurrency
- uid: Microsoft.VisualBasic.Strings.FormatDateTime*
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: FormatDateTime
  nameWithType: Strings.FormatDateTime
- uid: Microsoft.VisualBasic.Strings.FormatNumber*
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: FormatNumber
  nameWithType: Strings.FormatNumber
- uid: Microsoft.VisualBasic.Strings.FormatPercent*
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: FormatPercent
  nameWithType: Strings.FormatPercent
- uid: Microsoft.VisualBasic.Strings.GetChar*
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: GetChar
  nameWithType: Strings.GetChar
- uid: Microsoft.VisualBasic.Strings.InStr*
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: InStr
  nameWithType: Strings.InStr
- uid: Microsoft.VisualBasic.Strings.InStrRev*
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: InStrRev
  nameWithType: Strings.InStrRev
- uid: Microsoft.VisualBasic.Strings.Join*
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Join
  nameWithType: Strings.Join
- uid: Microsoft.VisualBasic.Strings.LCase*
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: LCase
  nameWithType: Strings.LCase
- uid: Microsoft.VisualBasic.Strings.Left*
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Left
  nameWithType: Strings.Left
- uid: Microsoft.VisualBasic.Strings.Len*
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Len
  nameWithType: Strings.Len
- uid: Microsoft.VisualBasic.Strings.LSet*
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: LSet
  nameWithType: Strings.LSet
- uid: Microsoft.VisualBasic.Strings.LTrim*
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: LTrim
  nameWithType: Strings.LTrim
- uid: Microsoft.VisualBasic.Strings.Mid*
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Mid
  nameWithType: Strings.Mid
- uid: Microsoft.VisualBasic.Strings.Replace*
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Replace
  nameWithType: Strings.Replace
- uid: Microsoft.VisualBasic.Strings.Right*
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Right
  nameWithType: Strings.Right
- uid: Microsoft.VisualBasic.Strings.RSet*
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: RSet
  nameWithType: Strings.RSet
- uid: Microsoft.VisualBasic.Strings.RTrim*
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: RTrim
  nameWithType: Strings.RTrim
- uid: Microsoft.VisualBasic.Strings.Space*
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Space
  nameWithType: Strings.Space
- uid: Microsoft.VisualBasic.Strings.Split*
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Split
  nameWithType: Strings.Split
- uid: Microsoft.VisualBasic.Strings.StrComp*
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: StrComp
  nameWithType: Strings.StrComp
- uid: Microsoft.VisualBasic.Strings.StrConv*
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: StrConv
  nameWithType: Strings.StrConv
- uid: Microsoft.VisualBasic.Strings.StrDup*
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: StrDup
  nameWithType: Strings.StrDup
- uid: Microsoft.VisualBasic.Strings.StrReverse*
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: StrReverse
  nameWithType: Strings.StrReverse
- uid: Microsoft.VisualBasic.Strings.Trim*
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Trim
  nameWithType: Strings.Trim
- uid: Microsoft.VisualBasic.Strings.UCase*
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: UCase
  nameWithType: Strings.UCase
