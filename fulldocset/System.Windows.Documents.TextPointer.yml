### YamlMime:ManagedReference
items:
- uid: System.Windows.Documents.TextPointer
  id: TextPointer
  children:
  - System.Windows.Documents.TextPointer.CompareTo(System.Windows.Documents.TextPointer)
  - System.Windows.Documents.TextPointer.DeleteTextInRun(System.Int32)
  - System.Windows.Documents.TextPointer.DocumentEnd
  - System.Windows.Documents.TextPointer.DocumentStart
  - System.Windows.Documents.TextPointer.GetAdjacentElement(System.Windows.Documents.LogicalDirection)
  - System.Windows.Documents.TextPointer.GetCharacterRect(System.Windows.Documents.LogicalDirection)
  - System.Windows.Documents.TextPointer.GetInsertionPosition(System.Windows.Documents.LogicalDirection)
  - System.Windows.Documents.TextPointer.GetLineStartPosition(System.Int32)
  - System.Windows.Documents.TextPointer.GetLineStartPosition(System.Int32,System.Int32@)
  - System.Windows.Documents.TextPointer.GetNextContextPosition(System.Windows.Documents.LogicalDirection)
  - System.Windows.Documents.TextPointer.GetNextInsertionPosition(System.Windows.Documents.LogicalDirection)
  - System.Windows.Documents.TextPointer.GetOffsetToPosition(System.Windows.Documents.TextPointer)
  - System.Windows.Documents.TextPointer.GetPointerContext(System.Windows.Documents.LogicalDirection)
  - System.Windows.Documents.TextPointer.GetPositionAtOffset(System.Int32)
  - System.Windows.Documents.TextPointer.GetPositionAtOffset(System.Int32,System.Windows.Documents.LogicalDirection)
  - System.Windows.Documents.TextPointer.GetTextInRun(System.Windows.Documents.LogicalDirection)
  - System.Windows.Documents.TextPointer.GetTextInRun(System.Windows.Documents.LogicalDirection,System.Char[],System.Int32,System.Int32)
  - System.Windows.Documents.TextPointer.GetTextRunLength(System.Windows.Documents.LogicalDirection)
  - System.Windows.Documents.TextPointer.HasValidLayout
  - System.Windows.Documents.TextPointer.InsertLineBreak
  - System.Windows.Documents.TextPointer.InsertParagraphBreak
  - System.Windows.Documents.TextPointer.InsertTextInRun(System.String)
  - System.Windows.Documents.TextPointer.IsAtInsertionPosition
  - System.Windows.Documents.TextPointer.IsAtLineStartPosition
  - System.Windows.Documents.TextPointer.IsInSameDocument(System.Windows.Documents.TextPointer)
  - System.Windows.Documents.TextPointer.LogicalDirection
  - System.Windows.Documents.TextPointer.Paragraph
  - System.Windows.Documents.TextPointer.Parent
  - System.Windows.Documents.TextPointer.ToString
  langs:
  - csharp
  name: TextPointer
  nameWithType: TextPointer
  fullName: System.Windows.Documents.TextPointer
  type: Class
  summary: "Representerar en plats i en <xref href=&quot;System.Windows.Documents.FlowDocument&quot;> </xref> eller <xref href=&quot;System.Windows.Controls.TextBlock&quot;> </xref>."
  remarks: "Klassen TextPointer introducerar till följande terminologi: - Position - kombination, en TextPointer alltid pekar mot en *position* i innehåll.  Sådana positioner antingen faller mellan tecken i innehållet eller flödet innehåll elementet taggar som definierar strukturen för innehållet.      -Aktuella Position - eftersom en TextPointer alltid anger en plats och eftersom många av de åtgärder som kan utföras via en TextPointer är i förhållande till den plats som anges för närvarande av TextPointer är det klokt att bara referera till den position som en TextPointer som den *aktuella position*.      -Position infogning - en *infogning position* är en plats där nytt innehåll kan läggas till utan att någon semantisk regler för associerat innehåll.  I praktiken är en infogning position som helst innehåll där en hatt kan placeras.  Ett exempel på en giltig TextPointer position som inte är en infogning position är positionen mellan två på varandra följande <xref:System.Windows.Documents.Paragraph>taggar (det vill säga mellan sluttagg styckets föregående och nästa stycke starttagg).</xref:System.Windows.Documents.Paragraph>      -Symbol - enligt TextPointer åtgärder som innefattar symboler, något av följande anses vara en *symbol*: – ett inledande eller avslutande tagg för en <xref:System.Windows.Documents.TextElement>element.</xref:System.Windows.Documents.TextElement>          -Ett <xref:System.Windows.UIElement>element som ingår i en <xref:System.Windows.Documents.InlineUIContainer>eller <xref:System.Windows.Documents.BlockUIContainer>.</xref:System.Windows.Documents.BlockUIContainer> </xref:System.Windows.Documents.InlineUIContainer> </xref:System.Windows.UIElement>  Observera att detta en <xref:System.Windows.UIElement>räknas alltid som exakt en symbol; eventuella ytterligare innehåll eller element som innehåller den <xref:System.Windows.UIElement>räknas inte som symboler.</xref:System.Windows.UIElement> </xref:System.Windows.UIElement>          -Varje 16-bitars [!INCLUDE[TLA#tla_unicode](~/add/includes/ajax-current-ext-md.md)] tecken inuti en text <xref:System.Windows.Documents.Run>element.</xref:System.Windows.Documents.Run>      -Text behållare – en *textbehållaren* är det element som utgör ultimate kantlinjen för flöde innehållet till hands; position som en TextPointer alltid faller inom en textbehållare.  För närvarande är måste en textbehållare vara antingen en <xref:System.Windows.Documents.FlowDocument>eller ett <xref:System.Windows.Controls.TextBlock>.</xref:System.Windows.Controls.TextBlock> </xref:System.Windows.Documents.FlowDocument>  Generellt sett stöds åtgärder mellan instanser av TextPointer i behållare med annan text inte.      -Dokument - innehållet i en text container kallas en *dokument*, som i den <xref:System.Windows.Documents.TextPointer.IsInSameDocument%2A>metoden och <xref:System.Windows.Documents.TextPointer.DocumentStart%2A>och <xref:System.Windows.Documents.TextPointer.DocumentEnd%2A>Egenskaper.</xref:System.Windows.Documents.TextPointer.DocumentEnd%2A> </xref:System.Windows.Documents.TextPointer.DocumentStart%2A> </xref:System.Windows.Documents.TextPointer.IsInSameDocument%2A>       Klassen TextPointer är avsedd för att underlätta traversal och hantering av innehåll som representeras av [!INCLUDE[TLA#tla_winclient](~/add/includes/ajax-current-ext-md.md)] flöda innehållselement; i allmänhet sådana element är härledd från <xref:System.Windows.Documents.TextElement>.</xref:System.Windows.Documents.TextElement>  Några av de åtgärder som underlättar TextPointer är följande:-utför en ordningstal jämförelse av den aktuella platsen med en andra angiven position.  Finns det <xref:System.Windows.Documents.TextPointer.CompareTo%2A>metod.</xref:System.Windows.Documents.TextPointer.CompareTo%2A>      – Avgör vilken typ av innehåll vid aktuell position i en angiven riktning.  Finns det <xref:System.Windows.Documents.TextPointer.GetPointerContext%2A>metoden och <xref:System.Windows.Documents.TextPointerContext>uppräkningen.</xref:System.Windows.Documents.TextPointerContext> </xref:System.Windows.Documents.TextPointer.GetPointerContext%2A>      -Få den <xref:System.Windows.Documents.TextElement>som scope eller angränsar till den aktuella positionen.</xref:System.Windows.Documents.TextElement>  Se <xref:System.Windows.Documents.Paragraph>och <xref:System.Windows.Documents.TextPointer.GetAdjacentElement%2A>metod.</xref:System.Windows.Documents.TextPointer.GetAdjacentElement%2A> </xref:System.Windows.Documents.Paragraph>      -Hämta textbehållaren som scope i det aktuella dokumentet.  Finns det <xref:System.Windows.Documents.TextPointer.Parent%2A>egenskap.</xref:System.Windows.Documents.TextPointer.Parent%2A>      -Hämta ett angivet antal tecken före eller efter den aktuella positionen.  Finns det <xref:System.Windows.Documents.TextPointer.GetTextInRun%2A>metod.</xref:System.Windows.Documents.TextPointer.GetTextInRun%2A>      -Infoga en sträng med tecken i den aktuella positionen.  Finns det <xref:System.Windows.Documents.TextPointer.InsertTextInRun%2A>metod.</xref:System.Windows.Documents.TextPointer.InsertTextInRun%2A>      -Hitta raden gränser i innehåll.  Finns det <xref:System.Windows.Documents.TextPointer.GetLineStartPosition%2A>metoden och <xref:System.Windows.Documents.TextPointer.IsAtLineStartPosition%2A>egenskap.</xref:System.Windows.Documents.TextPointer.IsAtLineStartPosition%2A> </xref:System.Windows.Documents.TextPointer.GetLineStartPosition%2A>      -Översätta mellan TextPointer och symbolen förskjutningar till innehåll.  Finns det <xref:System.Windows.Documents.TextPointer.GetOffsetToPosition%2A>och <xref:System.Windows.Documents.TextPointer.GetPositionAtOffset%2A>metoder.</xref:System.Windows.Documents.TextPointer.GetPositionAtOffset%2A> </xref:System.Windows.Documents.TextPointer.GetOffsetToPosition%2A>      -Utför visual träffar testning genom att översätta mellan TextPointer position och en <xref:System.Windows.Point>som representerar relativa koordinater.</xref:System.Windows.Point>      -Hitta Närliggande infogning position, eller kontrollera om den aktuella positionen är en infogning position.  Finns det <xref:System.Windows.Documents.TextPointer.GetInsertionPosition%2A>och <xref:System.Windows.Documents.TextPointer.GetNextInsertionPosition%2A>metoder och <xref:System.Windows.Documents.TextPointer.IsAtInsertionPosition%2A>egenskap.</xref:System.Windows.Documents.TextPointer.IsAtInsertionPosition%2A> </xref:System.Windows.Documents.TextPointer.GetNextInsertionPosition%2A> </xref:System.Windows.Documents.TextPointer.GetInsertionPosition%2A>       Positionen och <xref:System.Windows.Documents.TextPointer.LogicalDirection%2A>anges med ett TextPointer-objekt är oföränderliga.</xref:System.Windows.Documents.TextPointer.LogicalDirection%2A>  När innehåll redigeras eller ändras, ändras inte den position som en TextPointer i förhållande till den omgivande texten; i stället justeras förskjutningen för den positionen från början av innehåll på motsvarande sätt för att återspegla den nya relativa positionen i innehåll.  Till exempel fortsätter en TextPointer som anger en position i början av en viss punkt att peka till början av den punkten även när innehållet infogas eller tas bort före eller efter punkt.       Klassen TextPointer ger inte några offentliga konstruktorer.  En instans av TextPointer skapas med hjälp av egenskaper och metoder för andra objekt (inklusive andra TextPointer objekt). Följande lista innehåller några exempel på metoder och egenskaper som skapar och returnera ett TextPointer.  Den här listan är inte komplett: – från en <xref:System.Windows.Documents.TextRange>: <xref:System.Windows.Documents.TextRange.Start%2A>och <xref:System.Windows.Documents.TextRange.End%2A>.</xref:System.Windows.Documents.TextRange.End%2A> </xref:System.Windows.Documents.TextRange.Start%2A> </xref:System.Windows.Documents.TextRange>      -   From a <xref:System.Windows.Documents.TextElement>:  <xref:System.Windows.Documents.TextElement.ContentStart%2A>, <xref:System.Windows.Documents.TextElement.ContentEnd%2A>, <xref:System.Windows.Documents.TextElement.ElementStart%2A>, and <xref:System.Windows.Documents.TextElement.ElementEnd%2A>.</xref:System.Windows.Documents.TextElement.ElementEnd%2A></xref:System.Windows.Documents.TextElement.ElementStart%2A></xref:System.Windows.Documents.TextElement.ContentEnd%2A></xref:System.Windows.Documents.TextElement.ContentStart%2A></xref:System.Windows.Documents.TextElement>      -Från en <xref:System.Windows.Controls.TextBlock>(textbehållaren): <xref:System.Windows.Controls.TextBlock.ContentStart%2A>, <xref:System.Windows.Controls.TextBlock.ContentEnd%2A>, och <xref:System.Windows.Controls.TextBlock.GetPositionFromPoint%2A>.</xref:System.Windows.Controls.TextBlock.GetPositionFromPoint%2A> </xref:System.Windows.Controls.TextBlock.ContentEnd%2A> </xref:System.Windows.Controls.TextBlock.ContentStart%2A> </xref:System.Windows.Controls.TextBlock>      -Från en <xref:System.Windows.Documents.FlowDocument>(textbehållaren): <xref:System.Windows.Documents.FlowDocument.ContentStart%2A>, och <xref:System.Windows.Documents.FlowDocument.ContentEnd%2A>– från en befintlig TextPointer: <xref:System.Windows.Documents.TextPointer.DocumentStart%2A>, <xref:System.Windows.Documents.TextPointer.DocumentEnd%2A>, <xref:System.Windows.Documents.TextPointer.GetNextInsertionPosition%2A>, och <xref:System.Windows.Documents.TextPointer.GetPositionAtOffset%2A>.</xref:System.Windows.Documents.TextPointer.GetPositionAtOffset%2A> </xref:System.Windows.Documents.TextPointer.GetNextInsertionPosition%2A> </xref:System.Windows.Documents.TextPointer.DocumentEnd%2A> </xref:System.Windows.Documents.TextPointer.DocumentStart%2A> </xref:System.Windows.Documents.FlowDocument.ContentEnd%2A> </xref:System.Windows.Documents.FlowDocument.ContentStart%2A> </xref:System.Windows.Documents.FlowDocument>"
  example:
  - "The following example demonstrates how to use a TextPointer to find a position just inside of the first <xref:System.Windows.Documents.Run> element in a specified text container.  \n  \n [!code-cs[TextPointer_Snippets#_TextPointer_TextPointer1](~/add/codesnippet/csharp/TextPointer_Snippets/Window1.xaml.cs#_textpointer_textpointer1)]\n [!code-vb[TextPointer_Snippets#_TextPointer_TextPointer1](~/add/codesnippet/visualbasic/textpointer_snippets/window1.xaml.vb#_textpointer_textpointer1)]  \n  \n The following example implements a simplistic find algorithm using TextPointer facilities.  \n  \n [!code-cs[TextPointer_Snippets#_TextPointer_TextPointer2](~/add/codesnippet/csharp/TextPointer_Snippets/Window1.xaml.cs#_textpointer_textpointer2)]\n [!code-vb[TextPointer_Snippets#_TextPointer_TextPointer2](~/add/codesnippet/visualbasic/textpointer_snippets/window1.xaml.vb#_textpointer_textpointer2)]"
  syntax:
    content: 'public class TextPointer : System.Windows.Documents.ContentPosition'
  inheritance:
  - System.Object
  - System.Windows.Documents.ContentPosition
  implements: []
  inheritedMembers:
  - System.Windows.Documents.ContentPosition.Missing
  platform:
  - net462
- uid: System.Windows.Documents.TextPointer.CompareTo(System.Windows.Documents.TextPointer)
  id: CompareTo(System.Windows.Documents.TextPointer)
  parent: System.Windows.Documents.TextPointer
  langs:
  - csharp
  name: CompareTo(TextPointer)
  nameWithType: TextPointer.CompareTo(TextPointer)
  fullName: System.Windows.Documents.TextPointer.CompareTo(TextPointer)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "Utför en ordningstal jämförelse mellan platserna som anges av aktuellt <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref> och en andra angetts <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref>."
  remarks: "Värdet –&1; anger att positionen som anges av aktuellt <xref:System.Windows.Documents.TextPointer>föregår det läge som anges av `position`.</xref:System.Windows.Documents.TextPointer>  Värdet 0 anger att de angivna positionerna är lika.  Värdet positivt +&1; anger att positionen som anges av aktuellt <xref:System.Windows.Documents.TextPointer>följer positionen som anges av `position`.</xref:System.Windows.Documents.TextPointer>"
  example:
  - "The following example demonstrates a use for this method.  In the example, the CompareTo method is used in conjunction with the <xref:System.Windows.Documents.TextPointer.GetInsertionPosition%2A> method to test whether a specified <xref:System.Windows.Documents.TextElement> is empty.  \n  \n [!code-cs[TextPointer_Snippets#_TextPointer_GetInsertionPosition](~/add/codesnippet/csharp/TextPointer_Snippets/Window1.xaml.cs#_textpointer_getinsertionposition)]\n [!code-vb[TextPointer_Snippets#_TextPointer_GetInsertionPosition](~/add/codesnippet/visualbasic/textpointer_snippets/window1.xaml.vb#_textpointer_getinsertionposition)]"
  syntax:
    content: public int CompareTo (System.Windows.Documents.TextPointer position);
    parameters:
    - id: position
      type: System.Windows.Documents.TextPointer
      description: "En <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref> som anger möjlighet att jämföra med den aktuella positionen."
    return:
      type: System.Int32
      description: "– 1 om aktuellt <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref> föregår <code> position </code>; 0 om samma platser; + 1 om aktuellt <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref> följer <code> position </code>."
  overload: System.Windows.Documents.TextPointer.CompareTo*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>position</code>Anger en position utanför textbehållaren som är associerade med den aktuella positionen."
  platform:
  - net462
- uid: System.Windows.Documents.TextPointer.DeleteTextInRun(System.Int32)
  id: DeleteTextInRun(System.Int32)
  parent: System.Windows.Documents.TextPointer
  langs:
  - csharp
  name: DeleteTextInRun(Int32)
  nameWithType: TextPointer.DeleteTextInRun(Int32)
  fullName: System.Windows.Documents.TextPointer.DeleteTextInRun(Int32)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "Tar bort det angivna antalet tecken från position som aktuellt <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref>."
  remarks: "Ange ett positivt värde för att ta bort tecken som följer den aktuella positionen (som i <xref:System.Windows.Documents.LogicalDirection?displayProperty=fullName>); Ange ett negativt värde för att ta bort tecken som före den aktuella positionen (som i <xref:System.Windows.Documents.LogicalDirection?displayProperty=fullName>).</xref:System.Windows.Documents.LogicalDirection?displayProperty=fullName> </xref:System.Windows.Documents.LogicalDirection?displayProperty=fullName>       Antalet tecken som tas bort kan vara mindre än det antal som anges av `count`.  Detta sker i fall där `count` anger fler tecken än finns tas bort."
  syntax:
    content: public int DeleteTextInRun (int count);
    parameters:
    - id: count
      type: System.Int32
      description: "Antalet tecken för att ta bort, början vid den aktuella positionen. Ange ett positivt värde för att ta bort tecken som följer den aktuella positionen; Ange ett negativt värde för att ta bort tecken som före den aktuella positionen."
    return:
      type: System.Int32
      description: "Antalet tecken som tas bort."
  overload: System.Windows.Documents.TextPointer.DeleteTextInRun*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Metoden anropas på en plats där text inte tillåts."
  platform:
  - net462
- uid: System.Windows.Documents.TextPointer.DocumentEnd
  id: DocumentEnd
  parent: System.Windows.Documents.TextPointer
  langs:
  - csharp
  name: DocumentEnd
  nameWithType: TextPointer.DocumentEnd
  fullName: System.Windows.Documents.TextPointer.DocumentEnd
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "Hämtar en <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref> i slutet av innehållet i textbehållaren som är associerade med den aktuella positionen."
  remarks: "Den <xref:System.Windows.Documents.TextPointer.Parent%2A>för den returnerade <xref:System.Windows.Documents.TextPointer>alltid är en textbehållare (<xref:System.Windows.Controls.TextBlock> eller <xref:System.Windows.Documents.FlowDocument>), i stället för en <xref:System.Windows.Documents.TextElement>.</xref:System.Windows.Documents.TextElement> </xref:System.Windows.Documents.FlowDocument> </xref:System.Windows.Controls.TextBlock> </xref:System.Windows.Documents.TextPointer> </xref:System.Windows.Documents.TextPointer.Parent%2A>"
  syntax:
    content: public System.Windows.Documents.TextPointer DocumentEnd { get; }
    return:
      type: System.Windows.Documents.TextPointer
      description: "En <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref> i slutet av innehållet i textbehållaren som är associerade med den aktuella positionen."
  overload: System.Windows.Documents.TextPointer.DocumentEnd*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Documents.TextPointer.DocumentStart
  id: DocumentStart
  parent: System.Windows.Documents.TextPointer
  langs:
  - csharp
  name: DocumentStart
  nameWithType: TextPointer.DocumentStart
  fullName: System.Windows.Documents.TextPointer.DocumentStart
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "Hämtar en <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref> i början av innehållet i textbehållaren som är associerade med den aktuella positionen."
  remarks: "Använd positionen som returneras av den här egenskapen som en baslinje-plats där du kan arbeta med relativa förskjutningar till andra platser.  Den <xref:System.Windows.Documents.TextPointer.GetOffsetToPosition%2A>och <xref:System.Windows.Documents.TextPointer.GetPositionAtOffset%2A>metoder ger dig ett sätt att översätta mellan och position förskjuts.</xref:System.Windows.Documents.TextPointer.GetPositionAtOffset%2A> </xref:System.Windows.Documents.TextPointer.GetOffsetToPosition%2A>       Den <xref:System.Windows.Documents.TextPointer.Parent%2A>för den returnerade <xref:System.Windows.Documents.TextPointer>alltid är en textbehållare (<xref:System.Windows.Controls.TextBlock> eller <xref:System.Windows.Documents.FlowDocument>), i stället för en <xref:System.Windows.Documents.TextElement>.</xref:System.Windows.Documents.TextElement> </xref:System.Windows.Documents.FlowDocument> </xref:System.Windows.Controls.TextBlock> </xref:System.Windows.Documents.TextPointer> </xref:System.Windows.Documents.TextPointer.Parent%2A>"
  syntax:
    content: public System.Windows.Documents.TextPointer DocumentStart { get; }
    return:
      type: System.Windows.Documents.TextPointer
      description: "En <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref> i början av innehållet i textbehållaren som är associerade med den aktuella positionen."
  overload: System.Windows.Documents.TextPointer.DocumentStart*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Documents.TextPointer.GetAdjacentElement(System.Windows.Documents.LogicalDirection)
  id: GetAdjacentElement(System.Windows.Documents.LogicalDirection)
  parent: System.Windows.Documents.TextPointer
  langs:
  - csharp
  name: GetAdjacentElement(LogicalDirection)
  nameWithType: TextPointer.GetAdjacentElement(LogicalDirection)
  fullName: System.Windows.Documents.TextPointer.GetAdjacentElement(LogicalDirection)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "Returnerar elementet, om sådant finns, som avgränsar du aktuellt <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref> i den angivna logiska riktningen."
  remarks: "Returnerade element är vanligtvis ett <xref:System.Windows.Documents.TextElement>.</xref:System.Windows.Documents.TextElement>  En <xref:System.Windows.UIElement>kan returneras när den <xref:System.Windows.Documents.TextPointer>anger en plats i en <xref:System.Windows.Documents.BlockUIContainer>element eller ett <xref:System.Windows.Documents.InlineUIContainer>element.</xref:System.Windows.Documents.InlineUIContainer> </xref:System.Windows.Documents.BlockUIContainer> </xref:System.Windows.Documents.TextPointer> </xref:System.Windows.UIElement>"
  syntax:
    content: public System.Windows.DependencyObject GetAdjacentElement (System.Windows.Documents.LogicalDirection direction);
    parameters:
    - id: direction
      type: System.Windows.Documents.LogicalDirection
      description: "En av de <xref href=&quot;System.Windows.Documents.LogicalDirection&quot;> </xref> värden som anger logiska riktningen att söka efter ett angränsande element."
    return:
      type: System.Windows.DependencyObject
      description: "Närliggande element i den angivna <code> direction </code>, eller <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> om det inte finns några angränsande element."
  overload: System.Windows.Documents.TextPointer.GetAdjacentElement*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Documents.TextPointer.GetCharacterRect(System.Windows.Documents.LogicalDirection)
  id: GetCharacterRect(System.Windows.Documents.LogicalDirection)
  parent: System.Windows.Documents.TextPointer
  langs:
  - csharp
  name: GetCharacterRect(LogicalDirection)
  nameWithType: TextPointer.GetCharacterRect(LogicalDirection)
  fullName: System.Windows.Documents.TextPointer.GetCharacterRect(LogicalDirection)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "Returnerar en avgränsningsram (<xref href=&quot;System.Windows.Rect&quot;></xref>) för innehåll som avgränsar du aktuellt <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref> i den angivna logiska riktningen."
  remarks: "<xref:System.Windows.Documents.TextElement>kanter anses inte innehållet för den här metoden.</xref:System.Windows.Documents.TextElement>  Om den <xref:System.Windows.Documents.TextPointer>är placerad före en <xref:System.Windows.Documents.TextElement>kant returvärdet är avgränsningsram för nästa icke -<xref:System.Windows.Documents.TextElement> innehåll i den angivna riktningen.</xref:System.Windows.Documents.TextElement> </xref:System.Windows.Documents.TextElement> </xref:System.Windows.Documents.TextPointer>  Om det finns inget innehåll i den angivna riktningen noll bredd <xref:System.Windows.Rect>returneras med en höjd matchar höjden för alla föregående innehåll.</xref:System.Windows.Rect>       Åtgärden som utförs av den här metoden är beroende av en giltig layout.  Vid behov, försöker den här metoden att automatiskt återskapa en giltig layout innan du fortsätter med åtgärden.  Återskapande av en layout kan vara ett relativt kostsam åtgärd.  Använd den <xref:System.Windows.Documents.TextPointer.HasValidLayout%2A>egenskapen att söka efter en giltigt layout innan du utför åtgärder som kan återskapa layouten.</xref:System.Windows.Documents.TextPointer.HasValidLayout%2A>  Mer information finns i [Layout](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public System.Windows.Rect GetCharacterRect (System.Windows.Documents.LogicalDirection direction);
    parameters:
    - id: direction
      type: System.Windows.Documents.LogicalDirection
      description: "En av de <xref href=&quot;System.Windows.Documents.LogicalDirection&quot;> </xref> värden som anger logiska riktning som innehåller en innehåll angränsande ruta."
    return:
      type: System.Windows.Rect
      description: "Avgränsningsram för innehåll som avgränsar du aktuellt <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref> i den angivna riktningen eller &lt;xref:System.Windows.Rect.Empty%2A?displayProperty=fullName&gt; om aktuell, giltig layoutinformation är inte tillgänglig."
  overload: System.Windows.Documents.TextPointer.GetCharacterRect*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Documents.TextPointer.GetInsertionPosition(System.Windows.Documents.LogicalDirection)
  id: GetInsertionPosition(System.Windows.Documents.LogicalDirection)
  parent: System.Windows.Documents.TextPointer
  langs:
  - csharp
  name: GetInsertionPosition(LogicalDirection)
  nameWithType: TextPointer.GetInsertionPosition(LogicalDirection)
  fullName: System.Windows.Documents.TextPointer.GetInsertionPosition(LogicalDirection)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "Returnerar en <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref> till den närmaste infogning positionen i den angivna logiska riktningen."
  remarks: "En infogning position är en plats där nytt innehåll kan läggas till utan att någon semantisk regler för associerat innehåll.  I praktiken är en infogning position som helst innehåll där en hatt kan placeras.  Ett exempel på en giltig <xref:System.Windows.Documents.TextPointer>tjänst som inte är en infogning position är positionen mellan två på varandra följande <xref:System.Windows.Documents.Paragraph>taggar (det vill säga mellan sluttagg styckets föregående och nästa stycke starttagg).</xref:System.Windows.Documents.Paragraph> </xref:System.Windows.Documents.TextPointer>       Om den <xref:System.Windows.Documents.TextPointer>redan pekar på en giltig infogning position, men den avslutande taggen för en icke-tom formatering sekvens direkt efter den positionen i den angivna riktningen sedan <xref:System.Windows.Documents.TextPointer>returneras av den här metoden justeras för att peka mot infogning positionen precis efter formatering sekvensen.</xref:System.Windows.Documents.TextPointer> </xref:System.Windows.Documents.TextPointer>    Anta exempelvis att markup sekvensen `<Bold>``a``</Bold>``b`.  Observera att det finns två infogningspositioner mellan bokstäverna `a` och `b`– en som visas före avslutande `Bold` taggen och ett direkt efter avslutande `Bold` tagg.  Om GetInsertionPosition anropas på en <xref:System.Windows.Documents.TextPointer>till plats direkt efter bokstaven `a` och innan om stängning `Bold` tagg, och med en `direction` av <xref:System.Windows.Documents.LogicalDirection>, den returnerade <xref:System.Windows.Documents.TextPointer>justeras så att den pekar till plats innan bokstaven `b`, efter avslutningen `Bold` tagg.</xref:System.Windows.Documents.TextPointer> </xref:System.Windows.Documents.LogicalDirection> </xref:System.Windows.Documents.TextPointer>  En liknande justering görs för att öppna formatering taggar när du arbetar i motsatt logiskt riktning.  Den här metoden är avsedd att ge ett sätt att disambiguation mellan infogningspositioner i liknande fall.       Den här metoden kan även användas för att vara noggrann om infogning punkter när en sekvens med strukturella taggar är inblandad. Exempelvis när de är på en plats mellan stänga och öppna styckestaggar riktning-parametern kan användas att välja den närmaste insättningspunkten i början av följande punkt (genom att ange <xref:System.Windows.Documents.LogicalDirection?displayProperty=fullName>) eller längst ned i föregående stycke (genom att ange <xref:System.Windows.Documents.LogicalDirection?displayProperty=fullName>).</xref:System.Windows.Documents.LogicalDirection?displayProperty=fullName> </xref:System.Windows.Documents.LogicalDirection?displayProperty=fullName>       Om pekaren är redan vid infogning position och det finns ingen formatering taggarna i den angivna `direction`, returnerade <xref:System.Windows.Documents.TextPointer>pekar på samma plats som anropar <xref:System.Windows.Documents.TextPointer>.</xref:System.Windows.Documents.TextPointer> </xref:System.Windows.Documents.TextPointer>       Det är möjligt att det finns ingen giltig infogning placering i förhållande till den plats som anges av <xref:System.Windows.Documents.TextPointer>.</xref:System.Windows.Documents.TextPointer>  Detta kan inträffa om det refererade innehållet är strukturellt ofullständig, som i en tom tabell eller en lista.  I sådana fall kan den här metoden returnerar bara en <xref:System.Windows.Documents.TextPointer>till samma plats som den <xref:System.Windows.Documents.TextPointer>från den här metoden har anropats.</xref:System.Windows.Documents.TextPointer> </xref:System.Windows.Documents.TextPointer>  Den här metoden returnerar alltid en giltig <xref:System.Windows.Documents.TextPointer>.</xref:System.Windows.Documents.TextPointer>"
  example:
  - "This example shows how to use the GetInsertionPosition method to check whether a specified <xref:System.Windows.Documents.TextElement> is empty of printable content.  \n  \n [!code-cs[TextPointer_Snippets#_TextPointer_GetInsertionPosition](~/add/codesnippet/csharp/TextPointer_Snippets/Window1.xaml.cs#_textpointer_getinsertionposition)]\n [!code-vb[TextPointer_Snippets#_TextPointer_GetInsertionPosition](~/add/codesnippet/visualbasic/textpointer_snippets/window1.xaml.vb#_textpointer_getinsertionposition)]"
  syntax:
    content: public System.Windows.Documents.TextPointer GetInsertionPosition (System.Windows.Documents.LogicalDirection direction);
    parameters:
    - id: direction
      type: System.Windows.Documents.LogicalDirection
      description: "En av de <xref href=&quot;System.Windows.Documents.LogicalDirection&quot;> </xref> värden som anger logiska riktningen att söka efter den närmaste infogning positionen."
    return:
      type: System.Windows.Documents.TextPointer
      description: "En <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref> till den närmaste infogning positionen i den angivna riktningen."
  overload: System.Windows.Documents.TextPointer.GetInsertionPosition*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Documents.TextPointer.GetLineStartPosition(System.Int32)
  id: GetLineStartPosition(System.Int32)
  parent: System.Windows.Documents.TextPointer
  langs:
  - csharp
  name: GetLineStartPosition(Int32)
  nameWithType: TextPointer.GetLineStartPosition(Int32)
  fullName: System.Windows.Documents.TextPointer.GetLineStartPosition(Int32)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "Returnerar en <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref> till början av en rad som anges i förhållande till aktuellt <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref>."
  remarks: "Om den <xref:System.Windows.Documents.TextPointer>pekar på ett tvetydigt läge, till exempel mellan två rader raden i vilken riktning som anges av <xref:System.Windows.Documents.TextPointer.LogicalDirection%2A>är markerad som relativa Start raden.</xref:System.Windows.Documents.TextPointer.LogicalDirection%2A> </xref:System.Windows.Documents.TextPointer>       Åtgärden som utförs av den här metoden är beroende av en giltig layout.  Vid behov, försöker den här metoden att automatiskt återskapa en giltig layout innan du fortsätter med åtgärden.  Återskapande av en layout kan vara ett relativt kostsam åtgärd.  Använd <xref:System.Windows.Documents.TextPointer.HasValidLayout%2A>att söka efter en giltigt layout innan du utför åtgärder som kan återskapa layouten.</xref:System.Windows.Documents.TextPointer.HasValidLayout%2A>  Mer information finns i [Layout](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public System.Windows.Documents.TextPointer GetLineStartPosition (int count);
    parameters:
    - id: count
      type: System.Int32
      description: "Antal markörer början av raden ska hoppas över när du fastställer raden som du vill returnera startpositionen. Negativa värden anger föregående rader, 0 anger den aktuella raden och positiva värden som anger följande rader."
    return:
      type: System.Windows.Documents.TextPointer
      description: "En <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref> pekar till början av den angivna raden (med den <xref:System.Windows.Documents.TextPointer.LogicalDirection*>inställd på <xref href=&quot;System.Windows.Documents.LogicalDirection&quot;> </xref>), eller <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> om den angivna raden är utanför giltigt intervall eller på annat sätt går inte att hitta.</xref:System.Windows.Documents.TextPointer.LogicalDirection*>"
  overload: System.Windows.Documents.TextPointer.GetLineStartPosition*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Documents.TextPointer.GetLineStartPosition(System.Int32,System.Int32@)
  id: GetLineStartPosition(System.Int32,System.Int32@)
  parent: System.Windows.Documents.TextPointer
  langs:
  - csharp
  name: GetLineStartPosition(Int32,Int32)
  nameWithType: TextPointer.GetLineStartPosition(Int32,Int32)
  fullName: System.Windows.Documents.TextPointer.GetLineStartPosition(Int32,Int32)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "Returnerar en <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref> till början av en rad som anges i förhållande till aktuellt <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref>, och rapporterar hoppades över hur många rader."
  remarks: "Om den <xref:System.Windows.Documents.TextPointer>pekar på ett tvetydigt läge, till exempel mellan två rader raden i vilken riktning som anges av den <xref:System.Windows.Documents.TextPointer.LogicalDirection%2A>egenskapen markeras som relativa Start linje.</xref:System.Windows.Documents.TextPointer.LogicalDirection%2A> </xref:System.Windows.Documents.TextPointer>"
  syntax:
    content: public System.Windows.Documents.TextPointer GetLineStartPosition (int count, out int actualCount);
    parameters:
    - id: count
      type: System.Int32
      description: "Antal markörer början av raden ska hoppas över när du fastställer raden som du vill returnera startpositionen. Negativa värden anger föregående rader, 0 anger den aktuella raden och positiva värden som anger följande rader."
    - id: actualCount
      type: System.Int32
      description: "När den här metoden returnerar innehåller det faktiska antalet markörer i början av raden som hoppades över när du fastställer raden som du vill returnera startpositionen.  Det här värdet kan vara mindre än `count` om början eller slutet av innehåll har påträffats innan det angivna antalet rader hoppas över. Den här parametern skickas inte initierats."
    return:
      type: System.Windows.Documents.TextPointer
      description: "En <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref> pekar till början av den angivna raden (med den <xref:System.Windows.Documents.TextPointer.LogicalDirection*>inställd på <xref href=&quot;System.Windows.Documents.LogicalDirection&quot;> </xref>), eller till början av raden som är närmast den angivna raden om den angivna raden är utanför intervallet.</xref:System.Windows.Documents.TextPointer.LogicalDirection*>"
  overload: System.Windows.Documents.TextPointer.GetLineStartPosition*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Documents.TextPointer.GetNextContextPosition(System.Windows.Documents.LogicalDirection)
  id: GetNextContextPosition(System.Windows.Documents.LogicalDirection)
  parent: System.Windows.Documents.TextPointer
  langs:
  - csharp
  name: GetNextContextPosition(LogicalDirection)
  nameWithType: TextPointer.GetNextContextPosition(LogicalDirection)
  fullName: System.Windows.Documents.TextPointer.GetNextContextPosition(LogicalDirection)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "Returnerar en pekare till nästa symbol i den angivna logiska riktningen."
  remarks: "Något av följande anses vara en symbol: – ett inledande eller avslutande tagg för en <xref:System.Windows.Documents.TextElement>element.</xref:System.Windows.Documents.TextElement>      -Ett <xref:System.Windows.UIElement>element som ingår i en <xref:System.Windows.Documents.InlineUIContainer>eller <xref:System.Windows.Documents.BlockUIContainer>.</xref:System.Windows.Documents.BlockUIContainer> </xref:System.Windows.Documents.InlineUIContainer> </xref:System.Windows.UIElement>  Observera att detta en <xref:System.Windows.UIElement>räknas alltid som exakt en symbol; eventuella ytterligare innehåll eller element som innehåller den <xref:System.Windows.UIElement>räknas inte som symboler.</xref:System.Windows.UIElement> </xref:System.Windows.UIElement>      -En 16-bitars [!INCLUDE[TLA#tla_unicode](~/add/includes/ajax-current-ext-md.md)] tecken inuti en text <xref:System.Windows.Documents.Run>element.</xref:System.Windows.Documents.Run>       Om symbolen nästa kategoriseras som <xref:System.Windows.Documents.TextPointerContext>, <xref:System.Windows.Documents.TextPointerContext>, eller <xref:System.Windows.Documents.TextPointerContext>(som identifieras av den <xref:System.Windows.Documents.TextPointer.GetPointerContext%2A>metod), sedan <xref:System.Windows.Documents.TextPointer>returneras av det här metoden är en avancerad med exakt ett tecken från den aktuella positionen.</xref:System.Windows.Documents.TextPointer> </xref:System.Windows.Documents.TextPointer.GetPointerContext%2A> </xref:System.Windows.Documents.TextPointerContext> </xref:System.Windows.Documents.TextPointerContext> </xref:System.Windows.Documents.TextPointerContext>       Om symbolen nästa kategoriseras som <xref:System.Windows.Documents.TextPointerContext>, sedan <xref:System.Windows.Documents.TextPointer>returneras av detta metoden har Avancerat förbi texten till nästa symbolen-text (som är nästa position var den <xref:System.Windows.Documents.TextPointerContext>är inte <xref:System.Windows.Documents.TextPointerContext>).</xref:System.Windows.Documents.TextPointerContext> </xref:System.Windows.Documents.TextPointerContext> </xref:System.Windows.Documents.TextPointer> </xref:System.Windows.Documents.TextPointerContext>  Antalet exakt symbolen korsade kan beräknas i förväg genom att anropa den <xref:System.Windows.Documents.TextPointer.GetTextRunLength%2A>metoden.</xref:System.Windows.Documents.TextPointer.GetTextRunLength%2A>"
  example:
  - "The following example demonstrates a use for this method.  The example uses the GetNextContextPosition method in conjunction with the <xref:System.Windows.Documents.TextPointer.GetPointerContext%2A> method to traverse and extract the symbols in a specified <xref:System.Windows.Documents.TextElement>.  \n  \n While the example can be used to extract a [!INCLUDE[TLA#tla_titlexaml](~/add/includes/ajax-current-ext-md.md)] structure for the contents of a given <xref:System.Windows.Documents.TextElement>, it is intended for illustrative purposes only, and should not be used in production code.  See the <xref:System.Xml> namespace for a rich set of types designed for working with and processing XML.  \n  \n [!code-cs[TextPointer_Snippets#_TextPointer_GetNextContextPosition](~/add/codesnippet/csharp/TextPointer_Snippets/Window1.xaml.cs#_textpointer_getnextcontextposition)]\n [!code-vb[TextPointer_Snippets#_TextPointer_GetNextContextPosition](~/add/codesnippet/visualbasic/textpointer_snippets/window1.xaml.vb#_textpointer_getnextcontextposition)]"
  syntax:
    content: public System.Windows.Documents.TextPointer GetNextContextPosition (System.Windows.Documents.LogicalDirection direction);
    parameters:
    - id: direction
      type: System.Windows.Documents.LogicalDirection
      description: "En av de <xref href=&quot;System.Windows.Documents.LogicalDirection&quot;> </xref> värden som anger logiska riktningen att söka efter nästa symbolen."
    return:
      type: System.Windows.Documents.TextPointer
      description: "En <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref> till nästa symbol i den begärda riktningen eller <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> om aktuellt <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref> kanter i början eller slutet av innehåll."
  overload: System.Windows.Documents.TextPointer.GetNextContextPosition*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Documents.TextPointer.GetNextInsertionPosition(System.Windows.Documents.LogicalDirection)
  id: GetNextInsertionPosition(System.Windows.Documents.LogicalDirection)
  parent: System.Windows.Documents.TextPointer
  langs:
  - csharp
  name: GetNextInsertionPosition(LogicalDirection)
  nameWithType: TextPointer.GetNextInsertionPosition(LogicalDirection)
  fullName: System.Windows.Documents.TextPointer.GetNextInsertionPosition(LogicalDirection)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "Returnerar en <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref> till nästa infogning position i den angivna logiska riktningen."
  remarks: "En *infogning position* är en plats där nytt innehåll kan läggas till utan att någon semantisk regler för associerat innehåll.  I praktiken är en infogning position som helst innehåll där en hatt kan placeras.  Ett exempel på en giltig <xref:System.Windows.Documents.TextPointer>tjänst som inte är en infogning position är positionen mellan två på varandra följande <xref:System.Windows.Documents.Paragraph>taggar (det vill säga mellan sluttagg styckets föregående och nästa stycke starttagg).</xref:System.Windows.Documents.Paragraph> </xref:System.Windows.Documents.TextPointer>"
  example:
  - "The following example demonstrates a use for this method. The example uses the GetNextInsertionPosition method to traverse content element boundaries in order to count the number of <xref:System.Windows.Documents.Paragraph> elements present between two specified <xref:System.Windows.Documents.TextPointer> instances.  \n  \n [!code-cs[TextPointer_Snippets#_TextPointer_GetNextInsertionPosition](~/add/codesnippet/csharp/TextPointer_Snippets/Window1.xaml.cs#_textpointer_getnextinsertionposition)]\n [!code-vb[TextPointer_Snippets#_TextPointer_GetNextInsertionPosition](~/add/codesnippet/visualbasic/textpointer_snippets/window1.xaml.vb#_textpointer_getnextinsertionposition)]"
  syntax:
    content: public System.Windows.Documents.TextPointer GetNextInsertionPosition (System.Windows.Documents.LogicalDirection direction);
    parameters:
    - id: direction
      type: System.Windows.Documents.LogicalDirection
      description: "En av de <xref href=&quot;System.Windows.Documents.LogicalDirection&quot;> </xref> värden som anger logiska riktningen att söka efter nästa infogning positionen."
    return:
      type: System.Windows.Documents.TextPointer
      description: "En <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref> som identifierar nästa infogning placering i den begärda riktningen eller <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> om inga nästa infogning position kan hittas."
  overload: System.Windows.Documents.TextPointer.GetNextInsertionPosition*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Documents.TextPointer.GetOffsetToPosition(System.Windows.Documents.TextPointer)
  id: GetOffsetToPosition(System.Windows.Documents.TextPointer)
  parent: System.Windows.Documents.TextPointer
  langs:
  - csharp
  name: GetOffsetToPosition(TextPointer)
  nameWithType: TextPointer.GetOffsetToPosition(TextPointer)
  fullName: System.Windows.Documents.TextPointer.GetOffsetToPosition(TextPointer)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "Returnerar antalet symboler mellan aktuellt <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref> och en andra angetts <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref>."
  remarks: "Något av följande anses vara en symbol: – ett inledande eller avslutande tagg för en <xref:System.Windows.Documents.TextElement>element.</xref:System.Windows.Documents.TextElement>      -Ett <xref:System.Windows.UIElement>element som ingår i en <xref:System.Windows.Documents.InlineUIContainer>eller <xref:System.Windows.Documents.BlockUIContainer>.</xref:System.Windows.Documents.BlockUIContainer> </xref:System.Windows.Documents.InlineUIContainer> </xref:System.Windows.UIElement>  Observera att detta en <xref:System.Windows.UIElement>räknas alltid som exakt en symbol; eventuella ytterligare innehåll eller element som innehåller den <xref:System.Windows.UIElement>räknas inte som symboler.</xref:System.Windows.UIElement> </xref:System.Windows.UIElement>      -En 16-bitars [!INCLUDE[TLA#tla_unicode](~/add/includes/ajax-current-ext-md.md)] tecken inuti en text <xref:System.Windows.Documents.Run>element.</xref:System.Windows.Documents.Run>"
  example:
  - "The following example demonstrates a use for this method. The example uses the GetOffsetToPosition method to find the offsets for two <xref:System.Windows.Documents.TextPointer> instances, and then uses this information to save and restore the selection in a <xref:System.Windows.Controls.RichTextBox>.  The example assumes that the contents of the <xref:System.Windows.Controls.RichTextBox> have not changed between a selection save and a selection restore.  \n  \n [!code-cs[TextPointer_Snippets#_TextPointer_GetOffsetToPosition](~/add/codesnippet/csharp/TextPointer_Snippets/Window1.xaml.cs#_textpointer_getoffsettoposition)]\n [!code-vb[TextPointer_Snippets#_TextPointer_GetOffsetToPosition](~/add/codesnippet/visualbasic/textpointer_snippets/window1.xaml.vb#_textpointer_getoffsettoposition)]"
  syntax:
    content: public int GetOffsetToPosition (System.Windows.Documents.TextPointer position);
    parameters:
    - id: position
      type: System.Windows.Documents.TextPointer
      description: "En <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref> som anger kunna hitta avståndet (i symboler) till."
    return:
      type: System.Int32
      description: "Relativa antalet symboler mellan aktuellt <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref> och <code> position </code>.  Ett negativt värde indikerar att aktuellt <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref> följer positionen som anges av <code> position </code>, 0 anger att positioner är lika, och ett positivt värde indikerar att aktuellt <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref> föregår det läge som anges av <code> position </code>."
  overload: System.Windows.Documents.TextPointer.GetOffsetToPosition*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>position</code>Anger en position utanför textbehållaren som är associerade med den aktuella positionen."
  platform:
  - net462
- uid: System.Windows.Documents.TextPointer.GetPointerContext(System.Windows.Documents.LogicalDirection)
  id: GetPointerContext(System.Windows.Documents.LogicalDirection)
  parent: System.Windows.Documents.TextPointer
  langs:
  - csharp
  name: GetPointerContext(LogicalDirection)
  nameWithType: TextPointer.GetPointerContext(LogicalDirection)
  fullName: System.Windows.Documents.TextPointer.GetPointerContext(LogicalDirection)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "Returnerar en kategori indikator för innehållet intill aktuellt <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref> i den angivna logiska riktningen."
  remarks: ''
  example:
  - "The following example demonstrates a use for this method. The example uses the GetPointerContext method to implement an algorithm for calculating the balance of opening and closing element tags between two specified <xref:System.Windows.Documents.TextPointer> positions.  Each opening element tag is counted as +1, and each closing element tag is counted as –1.  \n  \n [!code-cs[TextPointer_Snippets#_TextPointer_GetOffsetToPosition2](~/add/codesnippet/csharp/TextPointer_Snippets/Window1.xaml.cs#_textpointer_getoffsettoposition2)]\n [!code-vb[TextPointer_Snippets#_TextPointer_GetOffsetToPosition2](~/add/codesnippet/visualbasic/textpointer_snippets/window1.xaml.vb#_textpointer_getoffsettoposition2)]"
  syntax:
    content: public System.Windows.Documents.TextPointerContext GetPointerContext (System.Windows.Documents.LogicalDirection direction);
    parameters:
    - id: direction
      type: System.Windows.Documents.LogicalDirection
      description: "En av de <xref href=&quot;System.Windows.Documents.LogicalDirection&quot;> </xref> värden som anger logiska riktningen att fastställa kategorin för intilliggande innehåll."
    return:
      type: System.Windows.Documents.TextPointerContext
      description: "En av de <xref href=&quot;System.Windows.Documents.TextPointerContext&quot;> </xref> värden som anger kategorin för intilliggande innehållet i den angivna logiska riktningen."
  overload: System.Windows.Documents.TextPointer.GetPointerContext*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Documents.TextPointer.GetPositionAtOffset(System.Int32)
  id: GetPositionAtOffset(System.Int32)
  parent: System.Windows.Documents.TextPointer
  langs:
  - csharp
  name: GetPositionAtOffset(Int32)
  nameWithType: TextPointer.GetPositionAtOffset(Int32)
  fullName: System.Windows.Documents.TextPointer.GetPositionAtOffset(Int32)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "Returnerar en <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref> till den position som den angivna förskjutningen i symboler från början av aktuellt <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref>."
  remarks: "Något av följande anses vara en symbol: – ett inledande eller avslutande tagg för den <xref:System.Windows.Documents.TextElement>element.</xref:System.Windows.Documents.TextElement>      -Ett <xref:System.Windows.UIElement>element som ingår i en <xref:System.Windows.Documents.InlineUIContainer>eller <xref:System.Windows.Documents.BlockUIContainer>.</xref:System.Windows.Documents.BlockUIContainer> </xref:System.Windows.Documents.InlineUIContainer> </xref:System.Windows.UIElement>  Observera att detta en <xref:System.Windows.UIElement>räknas alltid som exakt en symbol; eventuella ytterligare innehåll eller element som innehåller den <xref:System.Windows.UIElement>räknas inte som symboler.</xref:System.Windows.UIElement> </xref:System.Windows.UIElement>      -En 16-bitars [!INCLUDE[TLA#tla_unicode](~/add/includes/ajax-current-ext-md.md)] tecken inuti en text <xref:System.Windows.Documents.Run>element.</xref:System.Windows.Documents.Run>"
  example:
  - "The following example demonstrates a use for this method. The example uses the GetPositionAtOffset method to implement a pair of methods, one to calculate the offset to a specified position relative to any hosting paragraph, and the other to return a <xref:System.Windows.Documents.TextPointer> to a specified offset in a specified paragraph.  \n  \n [!code-cs[TextPointer_Snippets#_TextPointer_GetPositionAtOffset](~/add/codesnippet/csharp/TextPointer_Snippets/Window1.xaml.cs#_textpointer_getpositionatoffset)]\n [!code-vb[TextPointer_Snippets#_TextPointer_GetPositionAtOffset](~/add/codesnippet/visualbasic/textpointer_snippets/window1.xaml.vb#_textpointer_getpositionatoffset)]"
  syntax:
    content: public System.Windows.Documents.TextPointer GetPositionAtOffset (int offset);
    parameters:
    - id: offset
      type: System.Int32
      description: "En förskjutning i symboler som du vill beräkna och returnera positionen.  Om förskjutningen är negativt beräknas i logiska riktning motsatt som anges av den <xref:System.Windows.Documents.TextPointer.LogicalDirection*>egenskapen.</xref:System.Windows.Documents.TextPointer.LogicalDirection*>"
    return:
      type: System.Windows.Documents.TextPointer
      description: "En <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref> till den position som den angivna förskjutningen eller<xref uid=&quot;langword_csharp_ null &quot; name=&quot; null &quot; href=&quot;&quot;></xref>om ingen motsvarande plats kan hittas."
  overload: System.Windows.Documents.TextPointer.GetPositionAtOffset*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Documents.TextPointer.GetPositionAtOffset(System.Int32,System.Windows.Documents.LogicalDirection)
  id: GetPositionAtOffset(System.Int32,System.Windows.Documents.LogicalDirection)
  parent: System.Windows.Documents.TextPointer
  langs:
  - csharp
  name: GetPositionAtOffset(Int32,LogicalDirection)
  nameWithType: TextPointer.GetPositionAtOffset(Int32,LogicalDirection)
  fullName: System.Windows.Documents.TextPointer.GetPositionAtOffset(Int32,LogicalDirection)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "Returnerar en <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref> till den position som den angivna förskjutningen i symboler från början av aktuellt <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref> och i den angivna riktningen."
  remarks: "Något av följande anses vara en symbol: – ett inledande eller avslutande tagg för den <xref:System.Windows.Documents.TextElement>element.</xref:System.Windows.Documents.TextElement>      -Ett <xref:System.Windows.UIElement>element som ingår i en <xref:System.Windows.Documents.InlineUIContainer>eller <xref:System.Windows.Documents.BlockUIContainer>.</xref:System.Windows.Documents.BlockUIContainer> </xref:System.Windows.Documents.InlineUIContainer> </xref:System.Windows.UIElement>  Observera att detta en <xref:System.Windows.UIElement>räknas alltid som exakt en symbol; eventuella ytterligare innehåll eller element som innehåller den <xref:System.Windows.UIElement>räknas inte som symboler.</xref:System.Windows.UIElement> </xref:System.Windows.UIElement>      -En 16-bitars [!INCLUDE[TLA#tla_unicode](~/add/includes/ajax-current-ext-md.md)] tecken inuti en text <xref:System.Windows.Documents.Run>element.</xref:System.Windows.Documents.Run>"
  syntax:
    content: public System.Windows.Documents.TextPointer GetPositionAtOffset (int offset, System.Windows.Documents.LogicalDirection direction);
    parameters:
    - id: offset
      type: System.Int32
      description: "En förskjutning i symboler som du vill beräkna och returnera positionen.  Om förskjutningen är negativt, den returnerade <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref> före aktuellt <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref>, annars följer."
    - id: direction
      type: System.Windows.Documents.LogicalDirection
      description: "En av de <xref href=&quot;System.Windows.Documents.LogicalDirection&quot;> </xref> värden som anger logiska riktningen för den returnerade <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref>."
    return:
      type: System.Windows.Documents.TextPointer
      description: "En <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref> till den position som den angivna förskjutningen eller<xref uid=&quot;langword_csharp_ null &quot; name=&quot; null &quot; href=&quot;&quot;></xref>om förskjutningen överskrider dataströmmens slut av innehållet."
  overload: System.Windows.Documents.TextPointer.GetPositionAtOffset*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Documents.TextPointer.GetTextInRun(System.Windows.Documents.LogicalDirection)
  id: GetTextInRun(System.Windows.Documents.LogicalDirection)
  parent: System.Windows.Documents.TextPointer
  langs:
  - csharp
  name: GetTextInRun(LogicalDirection)
  nameWithType: TextPointer.GetTextInRun(LogicalDirection)
  fullName: System.Windows.Documents.TextPointer.GetTextInRun(LogicalDirection)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "Returnerar en sträng som innehåller text intill aktuellt <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref> i den angivna logiska riktningen."
  remarks: "Den här metoden returnerar endast oavbrutet körningar av text.  Ingenting returneras om något annat än symbol typen <xref:System.Windows.Documents.TextPointerContext>angränsar till aktuellt <xref:System.Windows.Documents.TextPointer>i den angivna riktningen.</xref:System.Windows.Documents.TextPointer> </xref:System.Windows.Documents.TextPointerContext>  På liknande sätt returneras bara upp till nästa icke-text-symbolen."
  example:
  - "The following example demonstrates a use for this method. The example uses the GetTextInRun method to implement a simple text extractor.  The method returns a string concatenation of all text between two specified <xref:System.Windows.Documents.TextPointer> instances.  \n  \n While the example can be used to extract any text between two <xref:System.Windows.Documents.TextPointer> instances, it is intended for illustrative purposes only, and should not be used in production code.  Use the <xref:System.Windows.Documents.TextRange.Text%2A?displayProperty=fullName> property instead.  \n  \n [!code-cs[TextPointer_Snippets#_TextPointer_GetTextInRun](~/add/codesnippet/csharp/TextPointer_Snippets/Window1.xaml.cs#_textpointer_gettextinrun)]\n [!code-vb[TextPointer_Snippets#_TextPointer_GetTextInRun](~/add/codesnippet/visualbasic/textpointer_snippets/window1.xaml.vb#_textpointer_gettextinrun)]"
  syntax:
    content: public string GetTextInRun (System.Windows.Documents.LogicalDirection direction);
    parameters:
    - id: direction
      type: System.Windows.Documents.LogicalDirection
      description: "En av de <xref href=&quot;System.Windows.Documents.LogicalDirection&quot;> </xref> värden som anger logiska riktningen att hitta och returnera intilliggande text."
    return:
      type: System.String
      description: "En sträng som innehåller alla intilliggande text i den angivna logiska riktningen eller &lt;xref:System.String?displayProperty=fullName&gt; om ingen intilliggande text kan hittas."
  overload: System.Windows.Documents.TextPointer.GetTextInRun*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Documents.TextPointer.GetTextInRun(System.Windows.Documents.LogicalDirection,System.Char[],System.Int32,System.Int32)
  id: GetTextInRun(System.Windows.Documents.LogicalDirection,System.Char[],System.Int32,System.Int32)
  parent: System.Windows.Documents.TextPointer
  langs:
  - csharp
  name: GetTextInRun(LogicalDirection,Char[],Int32,Int32)
  nameWithType: TextPointer.GetTextInRun(LogicalDirection,Char[],Int32,Int32)
  fullName: System.Windows.Documents.TextPointer.GetTextInRun(LogicalDirection,Char[],Int32,Int32)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "Kopierar det angivna antalet tecken från angränsande text i den angivna riktningen i en matris med anropsangiven tecken."
  remarks: "Den här metoden returnerar endast oavbrutet körningar av text.  Ingenting returneras om något annat än symbol typen <xref:System.Windows.Documents.TextPointerContext>angränsar till aktuellt <xref:System.Windows.Documents.TextPointer>i den angivna riktningen.</xref:System.Windows.Documents.TextPointer> </xref:System.Windows.Documents.TextPointerContext>  På liknande sätt returneras bara upp till nästa icke-text-symbolen."
  syntax:
    content: public int GetTextInRun (System.Windows.Documents.LogicalDirection direction, char[] textBuffer, int startIndex, int count);
    parameters:
    - id: direction
      type: System.Windows.Documents.LogicalDirection
      description: "En av de <xref href=&quot;System.Windows.Documents.LogicalDirection&quot;> </xref> värden som anger logiska riktningen att hitta och kopiera alla intilliggande text."
    - id: textBuffer
      type: System.Char[]
      description: "En buffert som text kopieras."
    - id: startIndex
      type: System.Int32
      description: "Ett index i `textBuffer` som du vill börja skriva kopierade texten."
    - id: count
      type: System.Int32
      description: "Maximalt antal tecken som ska kopieras."
    return:
      type: System.Int32
      description: "Antalet tecken som faktiskt kopieras till <code> textBuffer </code>."
  overload: System.Windows.Documents.TextPointer.GetTextInRun*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>startIndex</code>är mindre än 0 eller större än den <xref:System.Array.Length*> -egenskapen för <code>textBuffer</code>.       - eller - <code>count</code> är mindre än 0 eller större än det återstående utrymmet i <code>textBuffer</code> (<code>textBuffer</code>.<xref:System.Array.Length*> minus <code>startIndex</code>)."
  platform:
  - net462
- uid: System.Windows.Documents.TextPointer.GetTextRunLength(System.Windows.Documents.LogicalDirection)
  id: GetTextRunLength(System.Windows.Documents.LogicalDirection)
  parent: System.Windows.Documents.TextPointer
  langs:
  - csharp
  name: GetTextRunLength(LogicalDirection)
  nameWithType: TextPointer.GetTextRunLength(LogicalDirection)
  fullName: System.Windows.Documents.TextPointer.GetTextRunLength(LogicalDirection)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "Returnerar antalet Unicode-tecken mellan aktuellt <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref> och nästa-text symbolen, i den angivna logiska riktningen."
  remarks: "Något av följande anses vara en symbol: – ett inledande eller avslutande tagg för den <xref:System.Windows.Documents.TextElement>element.</xref:System.Windows.Documents.TextElement>      -Ett <xref:System.Windows.UIElement>element som ingår i en <xref:System.Windows.Documents.InlineUIContainer>eller <xref:System.Windows.Documents.BlockUIContainer>.</xref:System.Windows.Documents.BlockUIContainer> </xref:System.Windows.Documents.InlineUIContainer> </xref:System.Windows.UIElement>  Observera att detta en <xref:System.Windows.UIElement>räknas alltid som exakt en symbol; eventuella ytterligare innehåll eller element som innehåller den <xref:System.Windows.UIElement>räknas inte som symboler.</xref:System.Windows.UIElement> </xref:System.Windows.UIElement>      -En 16-bitars [!INCLUDE[TLA#tla_unicode](~/add/includes/ajax-current-ext-md.md)] tecken inuti en text <xref:System.Windows.Documents.Run>element.</xref:System.Windows.Documents.Run>"
  syntax:
    content: public int GetTextRunLength (System.Windows.Documents.LogicalDirection direction);
    parameters:
    - id: direction
      type: System.Windows.Documents.LogicalDirection
      description: "En av de <xref href=&quot;System.Windows.Documents.LogicalDirection&quot;> </xref> värden som anger logiska riktningen att räkna antalet tecken."
    return:
      type: System.Int32
      description: "Antalet Unicode-tecken mellan aktuellt <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref> och symbolen nästa-text.  Det här antalet kan vara 0 om det finns ingen intilliggande text."
  overload: System.Windows.Documents.TextPointer.GetTextRunLength*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Documents.TextPointer.HasValidLayout
  id: HasValidLayout
  parent: System.Windows.Documents.TextPointer
  langs:
  - csharp
  name: HasValidLayout
  nameWithType: TextPointer.HasValidLayout
  fullName: System.Windows.Documents.TextPointer.HasValidLayout
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "Hämtar ett värde som anger om textbehållaren som är associerade med den aktuella positionen har en giltig (inaktuell) layout."
  remarks: "Vid behov, åtgärder som är beroende av en giltig layout (som den <xref:System.Windows.Documents.TextPointer.GetLineStartPosition%2A>metoden <xref:System.Windows.Documents.TextPointer.GetCharacterRect%2A>-metoden och <xref:System.Windows.Documents.TextPointer.IsAtLineStartPosition%2A>egenskapen) försöker automatiskt återskapa en giltig layout innan du fortsätter med åtgärden.</xref:System.Windows.Documents.TextPointer.IsAtLineStartPosition%2A> </xref:System.Windows.Documents.TextPointer.GetCharacterRect%2A> </xref:System.Windows.Documents.TextPointer.GetLineStartPosition%2A>  Återskapande av en layout kan vara ett relativt kostsam åtgärd.  Använd den här egenskapen om du vill söka efter en giltigt layout innan du utför åtgärder som kan återskapa layouten.  Mer information finns i [Layout](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public bool HasValidLayout { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Om layouten är aktuell och giltig; Annars <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.Documents.TextPointer.HasValidLayout*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Documents.TextPointer.InsertLineBreak
  id: InsertLineBreak
  parent: System.Windows.Documents.TextPointer
  langs:
  - csharp
  name: InsertLineBreak()
  nameWithType: TextPointer.InsertLineBreak()
  fullName: System.Windows.Documents.TextPointer.InsertLineBreak()
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "Infogar en radbrytning vid aktuell position."
  syntax:
    content: public System.Windows.Documents.TextPointer InsertLineBreak ();
    parameters: []
    return:
      type: System.Windows.Documents.TextPointer
      description: "En <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref> positionerade omedelbart efter den <xref href=&quot;System.Windows.Documents.LineBreak&quot;> </xref> element som infogas av den här metoden."
  overload: System.Windows.Documents.TextPointer.InsertLineBreak*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Documents.TextPointer.InsertParagraphBreak
  id: InsertParagraphBreak
  parent: System.Windows.Documents.TextPointer
  langs:
  - csharp
  name: InsertParagraphBreak()
  nameWithType: TextPointer.InsertParagraphBreak()
  fullName: System.Windows.Documents.TextPointer.InsertParagraphBreak()
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "Infogar ett nytt stycke vid aktuell position."
  remarks: "Om den här metoden anropas när den aktuella positionen är inuti en befintlig <xref:System.Windows.Documents.Paragraph>element, befintligt stycke och innehåll i den delas upp i två stycken vid aktuell position.</xref:System.Windows.Documents.Paragraph>  Om den här metoden anropas när den aktuella positionen inte är i ett befintligt stycke, infogas en ny, tom punkt.  Om den här metoden anropas på en plats lämpar sig inte för delning eller lägga till en punkt (till exempel om den aktuella positionen är inuti en <xref:System.Windows.Documents.Hyperlink>element), genereras ett undantag.</xref:System.Windows.Documents.Hyperlink>"
  syntax:
    content: public System.Windows.Documents.TextPointer InsertParagraphBreak ();
    parameters: []
    return:
      type: System.Windows.Documents.TextPointer
      description: "En <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref> till början (<xref:System.Windows.Documents.TextElement.ContentStart*>) för det nya stycket.</xref:System.Windows.Documents.TextElement.ContentStart*>"
  overload: System.Windows.Documents.TextPointer.InsertParagraphBreak*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Den här metoden anropas på en plats som inte kan delas om du vill hantera ett nytt stycke som omfattas av en <xref href=&quot;System.Windows.Documents.Hyperlink&quot;> </xref> eller <xref href=&quot;System.Windows.Documents.InlineUIContainer&quot;> </xref>."
  platform:
  - net462
- uid: System.Windows.Documents.TextPointer.InsertTextInRun(System.String)
  id: InsertTextInRun(System.String)
  parent: System.Windows.Documents.TextPointer
  langs:
  - csharp
  name: InsertTextInRun(String)
  nameWithType: TextPointer.InsertTextInRun(String)
  fullName: System.Windows.Documents.TextPointer.InsertTextInRun(String)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "Infogar den angivna texten i texten <xref href=&quot;System.Windows.Documents.Run&quot;> </xref> vid aktuell position."
  remarks: "Om den <xref:System.Windows.Documents.TextPointer>omfattas inte av en <xref:System.Windows.Documents.Run>element, en <xref:System.Windows.Documents.Run>infogas tillsammans med den `textData`.</xref:System.Windows.Documents.Run> </xref:System.Windows.Documents.Run> </xref:System.Windows.Documents.TextPointer>"
  syntax:
    content: public void InsertTextInRun (string textData);
    parameters:
    - id: textData
      type: System.String
      description: "Texten som ska infogas."
  overload: System.Windows.Documents.TextPointer.InsertTextInRun*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Den aktuella positionen ligger inte inom en <xref href=&quot;System.Windows.Documents.Run&quot;> </xref> element."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>textData</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Windows.Documents.TextPointer.IsAtInsertionPosition
  id: IsAtInsertionPosition
  parent: System.Windows.Documents.TextPointer
  langs:
  - csharp
  name: IsAtInsertionPosition
  nameWithType: TextPointer.IsAtInsertionPosition
  fullName: System.Windows.Documents.TextPointer.IsAtInsertionPosition
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "Hämtar ett värde som anger om den aktuella positionen är en infogning position."
  remarks: "En infogning position är en plats där nytt innehåll kan läggas till utan att någon semantisk regler för associerat innehåll.  I praktiken är en infogning position som helst innehåll där en hatt kan placeras.  Ett exempel på en giltig <xref:System.Windows.Documents.TextPointer>tjänst som inte är en infogning position är positionen mellan två på varandra följande <xref:System.Windows.Documents.Paragraph>taggar (det vill säga mellan sluttagg styckets föregående och nästa stycke starttagg).</xref:System.Windows.Documents.Paragraph> </xref:System.Windows.Documents.TextPointer>"
  syntax:
    content: public bool IsAtInsertionPosition { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Om den aktuella positionen är en infogning position. Annars <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.Documents.TextPointer.IsAtInsertionPosition*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Documents.TextPointer.IsAtLineStartPosition
  id: IsAtLineStartPosition
  parent: System.Windows.Documents.TextPointer
  langs:
  - csharp
  name: IsAtLineStartPosition
  nameWithType: TextPointer.IsAtLineStartPosition
  fullName: System.Windows.Documents.TextPointer.IsAtLineStartPosition
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "Hämtar ett värde som anger om den aktuella positionen är i början av en rad."
  remarks: "Om den <xref:System.Windows.Documents.TextPointer>pekar på ett tvetydigt läge, till exempel mellan två rader raden i vilken riktning som anges av den <xref:System.Windows.Documents.TextPointer.LogicalDirection%2A>egenskapen markeras som relativa Start linje.</xref:System.Windows.Documents.TextPointer.LogicalDirection%2A> </xref:System.Windows.Documents.TextPointer>       Åtgärden som utförs av den här egenskapen är beroende av en giltig layout.  Vid behov, försöker den här metoden att automatiskt återskapa en giltig layout innan du fortsätter med åtgärden.  Återskapande av en layout kan vara ett relativt kostsam åtgärd.  Använd den <xref:System.Windows.Documents.TextPointer.HasValidLayout%2A>egenskapen att söka efter en giltigt layout innan du utför åtgärder som kan återskapa layouten.</xref:System.Windows.Documents.TextPointer.HasValidLayout%2A>  Mer information finns i [Layout](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public bool IsAtLineStartPosition { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Om den aktuella positionen är i början av en rad. Annars <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.Documents.TextPointer.IsAtLineStartPosition*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Documents.TextPointer.IsInSameDocument(System.Windows.Documents.TextPointer)
  id: IsInSameDocument(System.Windows.Documents.TextPointer)
  parent: System.Windows.Documents.TextPointer
  langs:
  - csharp
  name: IsInSameDocument(TextPointer)
  nameWithType: TextPointer.IsInSameDocument(TextPointer)
  fullName: System.Windows.Documents.TextPointer.IsInSameDocument(TextPointer)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "Anger om den angivna positionen är i samma textbehållare som den aktuella positionen."
  remarks: "De flesta åtgärder som innefattar flera <xref:System.Windows.Documents.TextPointer>instanser är endast giltiga om instanser i fråga visar positioner som ingår i samma text container omfånget.</xref:System.Windows.Documents.TextPointer>  Till exempel den <xref:System.Windows.Documents.TextPointer.CompareTo%2A>och <xref:System.Windows.Documents.TextPointer.GetOffsetToPosition%2A>metoder kan inte användas med en <xref:System.Windows.Documents.TextPointer>till en plats utanför textbehållaren som är associerade med den aktuella positionen.</xref:System.Windows.Documents.TextPointer> </xref:System.Windows.Documents.TextPointer.GetOffsetToPosition%2A> </xref:System.Windows.Documents.TextPointer.CompareTo%2A>  Använd den här metoden för att kontrollera att en angiven <xref:System.Windows.Documents.TextPointer>är kompatibel med den aktuella positionen för dessa åtgärder.</xref:System.Windows.Documents.TextPointer>"
  example:
  - "The following example demonstrates a use for this method.  The example uses the IsInSameDocument method to check whether a specified <xref:System.Windows.Documents.TextPointer> is positioned between two other specified <xref:System.Windows.Documents.TextPointer> instances in a situation when there is no guarantee that all three positions belong to the same text container.  \n  \n [!code-cs[TextPointer_Snippets#_TextPointer_IsInSameDocument](~/add/codesnippet/csharp/TextPointer_Snippets/Window1.xaml.cs#_textpointer_isinsamedocument)]\n [!code-vb[TextPointer_Snippets#_TextPointer_IsInSameDocument](~/add/codesnippet/visualbasic/textpointer_snippets/window1.xaml.vb#_textpointer_isinsamedocument)]"
  syntax:
    content: public bool IsInSameDocument (System.Windows.Documents.TextPointer textPosition);
    parameters:
    - id: textPosition
      type: System.Windows.Documents.TextPointer
      description: "En <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref> som anger möjlighet att jämföra med den aktuella positionen."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Om <code> textPosition </code> anger en plats som är i samma textbehållare som den aktuella positionen; annars <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.Documents.TextPointer.IsInSameDocument*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>textPosition</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Windows.Documents.TextPointer.LogicalDirection
  id: LogicalDirection
  parent: System.Windows.Documents.TextPointer
  langs:
  - csharp
  name: LogicalDirection
  nameWithType: TextPointer.LogicalDirection
  fullName: System.Windows.Documents.TextPointer.LogicalDirection
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "Hämtar logiska riktning som är associerade med den aktuella positionen som används för att undvika tvetydigheten innehåll har associerats med den aktuella positionen."
  remarks: "Som ett exempel på hur den här egenskapen används den <xref:System.Windows.Documents.LogicalDirection>av den <xref:System.Windows.Documents.TextPointer>returnerades av ett träffar test metoden ger ett träffar mellan två tecknen i texten.</xref:System.Windows.Documents.TextPointer> </xref:System.Windows.Documents.LogicalDirection> Den logiska riktningen anger vilken av de två tecken träffades faktiskt – till vänster eller höger."
  syntax:
    content: public System.Windows.Documents.LogicalDirection LogicalDirection { get; }
    return:
      type: System.Windows.Documents.LogicalDirection
      description: "Den <xref href=&quot;System.Windows.Documents.LogicalDirection&quot;> </xref> värde som är associerade med den aktuella positionen."
  overload: System.Windows.Documents.TextPointer.LogicalDirection*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Documents.TextPointer.Paragraph
  id: Paragraph
  parent: System.Windows.Documents.TextPointer
  langs:
  - csharp
  name: Paragraph
  nameWithType: TextPointer.Paragraph
  fullName: System.Windows.Documents.TextPointer.Paragraph
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "Hämtar den punkt som scope i den aktuella positionen eventuella."
  syntax:
    content: public System.Windows.Documents.Paragraph Paragraph { get; }
    return:
      type: System.Windows.Documents.Paragraph
      description: "Den <xref href=&quot;System.Windows.Documents.Paragraph&quot;> </xref> som scope i den aktuella positionen eller<xref uid=&quot;langword_csharp_ null &quot; name=&quot; null &quot; href=&quot;&quot;></xref>om det finns ingen sådan punkt."
  overload: System.Windows.Documents.TextPointer.Paragraph*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Documents.TextPointer.Parent
  id: Parent
  parent: System.Windows.Documents.TextPointer
  langs:
  - csharp
  name: Parent
  nameWithType: TextPointer.Parent
  fullName: System.Windows.Documents.TextPointer.Parent
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "Hämtar den logiska överordnade scope i den aktuella positionen."
  syntax:
    content: public System.Windows.DependencyObject Parent { get; }
    return:
      type: System.Windows.DependencyObject
      description: "Den logiska överordnade som scope i den aktuella positionen."
  overload: System.Windows.Documents.TextPointer.Parent*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Documents.TextPointer.ToString
  id: ToString
  parent: System.Windows.Documents.TextPointer
  langs:
  - csharp
  name: ToString()
  nameWithType: TextPointer.ToString()
  fullName: System.Windows.Documents.TextPointer.ToString()
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "Den här typen eller medlemmen stöder den [!INCLUDE[TLA#tla_winclient](~/add/includes/ajax-current-ext-md.md)] infrastrukturen och är inte avsedd att användas direkt från din kod."
  syntax:
    content: public override string ToString ();
    parameters: []
    return:
      type: System.String
      description: "Den sträng som representerar objektet."
  overload: System.Windows.Documents.TextPointer.ToString*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Windows.Documents.ContentPosition
  isExternal: false
  name: System.Windows.Documents.ContentPosition
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.Windows.Documents.TextPointer.CompareTo(System.Windows.Documents.TextPointer)
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: CompareTo(TextPointer)
  nameWithType: TextPointer.CompareTo(TextPointer)
  fullName: System.Windows.Documents.TextPointer.CompareTo(TextPointer)
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Windows.Documents.TextPointer
  parent: System.Windows.Documents
  isExternal: false
  name: TextPointer
  nameWithType: TextPointer
  fullName: System.Windows.Documents.TextPointer
- uid: System.Windows.Documents.TextPointer.DeleteTextInRun(System.Int32)
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: DeleteTextInRun(Int32)
  nameWithType: TextPointer.DeleteTextInRun(Int32)
  fullName: System.Windows.Documents.TextPointer.DeleteTextInRun(Int32)
- uid: System.Windows.Documents.TextPointer.DocumentEnd
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: DocumentEnd
  nameWithType: TextPointer.DocumentEnd
  fullName: System.Windows.Documents.TextPointer.DocumentEnd
- uid: System.Windows.Documents.TextPointer.DocumentStart
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: DocumentStart
  nameWithType: TextPointer.DocumentStart
  fullName: System.Windows.Documents.TextPointer.DocumentStart
- uid: System.Windows.Documents.TextPointer.GetAdjacentElement(System.Windows.Documents.LogicalDirection)
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: GetAdjacentElement(LogicalDirection)
  nameWithType: TextPointer.GetAdjacentElement(LogicalDirection)
  fullName: System.Windows.Documents.TextPointer.GetAdjacentElement(LogicalDirection)
- uid: System.Windows.DependencyObject
  parent: System.Windows
  isExternal: false
  name: DependencyObject
  nameWithType: DependencyObject
  fullName: System.Windows.DependencyObject
- uid: System.Windows.Documents.LogicalDirection
  parent: System.Windows.Documents
  isExternal: false
  name: LogicalDirection
  nameWithType: LogicalDirection
  fullName: System.Windows.Documents.LogicalDirection
- uid: System.Windows.Documents.TextPointer.GetCharacterRect(System.Windows.Documents.LogicalDirection)
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: GetCharacterRect(LogicalDirection)
  nameWithType: TextPointer.GetCharacterRect(LogicalDirection)
  fullName: System.Windows.Documents.TextPointer.GetCharacterRect(LogicalDirection)
- uid: System.Windows.Rect
  parent: System.Windows
  isExternal: false
  name: Rect
  nameWithType: Rect
  fullName: System.Windows.Rect
- uid: System.Windows.Documents.TextPointer.GetInsertionPosition(System.Windows.Documents.LogicalDirection)
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: GetInsertionPosition(LogicalDirection)
  nameWithType: TextPointer.GetInsertionPosition(LogicalDirection)
  fullName: System.Windows.Documents.TextPointer.GetInsertionPosition(LogicalDirection)
- uid: System.Windows.Documents.TextPointer.GetLineStartPosition(System.Int32)
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: GetLineStartPosition(Int32)
  nameWithType: TextPointer.GetLineStartPosition(Int32)
  fullName: System.Windows.Documents.TextPointer.GetLineStartPosition(Int32)
- uid: System.Windows.Documents.TextPointer.GetLineStartPosition(System.Int32,System.Int32@)
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: GetLineStartPosition(Int32,Int32)
  nameWithType: TextPointer.GetLineStartPosition(Int32,Int32)
  fullName: System.Windows.Documents.TextPointer.GetLineStartPosition(Int32,Int32)
- uid: System.Windows.Documents.TextPointer.GetNextContextPosition(System.Windows.Documents.LogicalDirection)
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: GetNextContextPosition(LogicalDirection)
  nameWithType: TextPointer.GetNextContextPosition(LogicalDirection)
  fullName: System.Windows.Documents.TextPointer.GetNextContextPosition(LogicalDirection)
- uid: System.Windows.Documents.TextPointer.GetNextInsertionPosition(System.Windows.Documents.LogicalDirection)
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: GetNextInsertionPosition(LogicalDirection)
  nameWithType: TextPointer.GetNextInsertionPosition(LogicalDirection)
  fullName: System.Windows.Documents.TextPointer.GetNextInsertionPosition(LogicalDirection)
- uid: System.Windows.Documents.TextPointer.GetOffsetToPosition(System.Windows.Documents.TextPointer)
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: GetOffsetToPosition(TextPointer)
  nameWithType: TextPointer.GetOffsetToPosition(TextPointer)
  fullName: System.Windows.Documents.TextPointer.GetOffsetToPosition(TextPointer)
- uid: System.Windows.Documents.TextPointer.GetPointerContext(System.Windows.Documents.LogicalDirection)
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: GetPointerContext(LogicalDirection)
  nameWithType: TextPointer.GetPointerContext(LogicalDirection)
  fullName: System.Windows.Documents.TextPointer.GetPointerContext(LogicalDirection)
- uid: System.Windows.Documents.TextPointerContext
  parent: System.Windows.Documents
  isExternal: false
  name: TextPointerContext
  nameWithType: TextPointerContext
  fullName: System.Windows.Documents.TextPointerContext
- uid: System.Windows.Documents.TextPointer.GetPositionAtOffset(System.Int32)
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: GetPositionAtOffset(Int32)
  nameWithType: TextPointer.GetPositionAtOffset(Int32)
  fullName: System.Windows.Documents.TextPointer.GetPositionAtOffset(Int32)
- uid: System.Windows.Documents.TextPointer.GetPositionAtOffset(System.Int32,System.Windows.Documents.LogicalDirection)
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: GetPositionAtOffset(Int32,LogicalDirection)
  nameWithType: TextPointer.GetPositionAtOffset(Int32,LogicalDirection)
  fullName: System.Windows.Documents.TextPointer.GetPositionAtOffset(Int32,LogicalDirection)
- uid: System.Windows.Documents.TextPointer.GetTextInRun(System.Windows.Documents.LogicalDirection)
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: GetTextInRun(LogicalDirection)
  nameWithType: TextPointer.GetTextInRun(LogicalDirection)
  fullName: System.Windows.Documents.TextPointer.GetTextInRun(LogicalDirection)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Windows.Documents.TextPointer.GetTextInRun(System.Windows.Documents.LogicalDirection,System.Char[],System.Int32,System.Int32)
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: GetTextInRun(LogicalDirection,Char[],Int32,Int32)
  nameWithType: TextPointer.GetTextInRun(LogicalDirection,Char[],Int32,Int32)
  fullName: System.Windows.Documents.TextPointer.GetTextInRun(LogicalDirection,Char[],Int32,Int32)
- uid: System.Char[]
  parent: System
  isExternal: true
  name: Char
  nameWithType: Char
  fullName: System.Char[]
  spec.csharp:
  - uid: System.Char
    name: Char
    nameWithType: Char
    fullName: Char[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Windows.Documents.TextPointer.GetTextRunLength(System.Windows.Documents.LogicalDirection)
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: GetTextRunLength(LogicalDirection)
  nameWithType: TextPointer.GetTextRunLength(LogicalDirection)
  fullName: System.Windows.Documents.TextPointer.GetTextRunLength(LogicalDirection)
- uid: System.Windows.Documents.TextPointer.HasValidLayout
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: HasValidLayout
  nameWithType: TextPointer.HasValidLayout
  fullName: System.Windows.Documents.TextPointer.HasValidLayout
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Windows.Documents.TextPointer.InsertLineBreak
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: InsertLineBreak()
  nameWithType: TextPointer.InsertLineBreak()
  fullName: System.Windows.Documents.TextPointer.InsertLineBreak()
- uid: System.Windows.Documents.TextPointer.InsertParagraphBreak
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: InsertParagraphBreak()
  nameWithType: TextPointer.InsertParagraphBreak()
  fullName: System.Windows.Documents.TextPointer.InsertParagraphBreak()
- uid: System.Windows.Documents.TextPointer.InsertTextInRun(System.String)
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: InsertTextInRun(String)
  nameWithType: TextPointer.InsertTextInRun(String)
  fullName: System.Windows.Documents.TextPointer.InsertTextInRun(String)
- uid: System.Windows.Documents.TextPointer.IsAtInsertionPosition
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: IsAtInsertionPosition
  nameWithType: TextPointer.IsAtInsertionPosition
  fullName: System.Windows.Documents.TextPointer.IsAtInsertionPosition
- uid: System.Windows.Documents.TextPointer.IsAtLineStartPosition
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: IsAtLineStartPosition
  nameWithType: TextPointer.IsAtLineStartPosition
  fullName: System.Windows.Documents.TextPointer.IsAtLineStartPosition
- uid: System.Windows.Documents.TextPointer.IsInSameDocument(System.Windows.Documents.TextPointer)
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: IsInSameDocument(TextPointer)
  nameWithType: TextPointer.IsInSameDocument(TextPointer)
  fullName: System.Windows.Documents.TextPointer.IsInSameDocument(TextPointer)
- uid: System.Windows.Documents.TextPointer.LogicalDirection
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: LogicalDirection
  nameWithType: TextPointer.LogicalDirection
  fullName: System.Windows.Documents.TextPointer.LogicalDirection
- uid: System.Windows.Documents.TextPointer.Paragraph
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: Paragraph
  nameWithType: TextPointer.Paragraph
  fullName: System.Windows.Documents.TextPointer.Paragraph
- uid: System.Windows.Documents.Paragraph
  parent: System.Windows.Documents
  isExternal: false
  name: Paragraph
  nameWithType: Paragraph
  fullName: System.Windows.Documents.Paragraph
- uid: System.Windows.Documents.TextPointer.Parent
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: Parent
  nameWithType: TextPointer.Parent
  fullName: System.Windows.Documents.TextPointer.Parent
- uid: System.Windows.Documents.TextPointer.ToString
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: ToString()
  nameWithType: TextPointer.ToString()
  fullName: System.Windows.Documents.TextPointer.ToString()
- uid: System.Windows.Documents.TextPointer.CompareTo*
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: CompareTo
  nameWithType: TextPointer.CompareTo
- uid: System.Windows.Documents.TextPointer.DeleteTextInRun*
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: DeleteTextInRun
  nameWithType: TextPointer.DeleteTextInRun
- uid: System.Windows.Documents.TextPointer.DocumentEnd*
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: DocumentEnd
  nameWithType: TextPointer.DocumentEnd
- uid: System.Windows.Documents.TextPointer.DocumentStart*
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: DocumentStart
  nameWithType: TextPointer.DocumentStart
- uid: System.Windows.Documents.TextPointer.GetAdjacentElement*
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: GetAdjacentElement
  nameWithType: TextPointer.GetAdjacentElement
- uid: System.Windows.Documents.TextPointer.GetCharacterRect*
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: GetCharacterRect
  nameWithType: TextPointer.GetCharacterRect
- uid: System.Windows.Documents.TextPointer.GetInsertionPosition*
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: GetInsertionPosition
  nameWithType: TextPointer.GetInsertionPosition
- uid: System.Windows.Documents.TextPointer.GetLineStartPosition*
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: GetLineStartPosition
  nameWithType: TextPointer.GetLineStartPosition
- uid: System.Windows.Documents.TextPointer.GetNextContextPosition*
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: GetNextContextPosition
  nameWithType: TextPointer.GetNextContextPosition
- uid: System.Windows.Documents.TextPointer.GetNextInsertionPosition*
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: GetNextInsertionPosition
  nameWithType: TextPointer.GetNextInsertionPosition
- uid: System.Windows.Documents.TextPointer.GetOffsetToPosition*
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: GetOffsetToPosition
  nameWithType: TextPointer.GetOffsetToPosition
- uid: System.Windows.Documents.TextPointer.GetPointerContext*
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: GetPointerContext
  nameWithType: TextPointer.GetPointerContext
- uid: System.Windows.Documents.TextPointer.GetPositionAtOffset*
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: GetPositionAtOffset
  nameWithType: TextPointer.GetPositionAtOffset
- uid: System.Windows.Documents.TextPointer.GetTextInRun*
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: GetTextInRun
  nameWithType: TextPointer.GetTextInRun
- uid: System.Windows.Documents.TextPointer.GetTextRunLength*
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: GetTextRunLength
  nameWithType: TextPointer.GetTextRunLength
- uid: System.Windows.Documents.TextPointer.HasValidLayout*
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: HasValidLayout
  nameWithType: TextPointer.HasValidLayout
- uid: System.Windows.Documents.TextPointer.InsertLineBreak*
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: InsertLineBreak
  nameWithType: TextPointer.InsertLineBreak
- uid: System.Windows.Documents.TextPointer.InsertParagraphBreak*
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: InsertParagraphBreak
  nameWithType: TextPointer.InsertParagraphBreak
- uid: System.Windows.Documents.TextPointer.InsertTextInRun*
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: InsertTextInRun
  nameWithType: TextPointer.InsertTextInRun
- uid: System.Windows.Documents.TextPointer.IsAtInsertionPosition*
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: IsAtInsertionPosition
  nameWithType: TextPointer.IsAtInsertionPosition
- uid: System.Windows.Documents.TextPointer.IsAtLineStartPosition*
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: IsAtLineStartPosition
  nameWithType: TextPointer.IsAtLineStartPosition
- uid: System.Windows.Documents.TextPointer.IsInSameDocument*
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: IsInSameDocument
  nameWithType: TextPointer.IsInSameDocument
- uid: System.Windows.Documents.TextPointer.LogicalDirection*
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: LogicalDirection
  nameWithType: TextPointer.LogicalDirection
- uid: System.Windows.Documents.TextPointer.Paragraph*
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: Paragraph
  nameWithType: TextPointer.Paragraph
- uid: System.Windows.Documents.TextPointer.Parent*
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: Parent
  nameWithType: TextPointer.Parent
- uid: System.Windows.Documents.TextPointer.ToString*
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: ToString
  nameWithType: TextPointer.ToString
