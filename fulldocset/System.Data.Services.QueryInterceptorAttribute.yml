### YamlMime:ManagedReference
items:
- uid: System.Data.Services.QueryInterceptorAttribute
  id: QueryInterceptorAttribute
  children:
  - System.Data.Services.QueryInterceptorAttribute.#ctor(System.String)
  - System.Data.Services.QueryInterceptorAttribute.EntitySetName
  langs:
  - csharp
  name: QueryInterceptorAttribute
  nameWithType: QueryInterceptorAttribute
  fullName: System.Data.Services.QueryInterceptorAttribute
  type: Class
  summary: "QueryInterceptorAttribute för en metod annoterar den som en frågeintervenering på den angivna entitetsuppsättningen."
  remarks: "Entitet-nivå auktorisering och validering implementeras av metoder med QueryInterceptorAttribute. [!INCLUDE[ssAstoria](~/add/includes/ssastoria-md.md)]s inte implementera säkerhetsprinciper utan innehåller den infrastruktur som krävs för tjänstutvecklare att skriva egna säkerhetsregler och business-verifiering.       Entitetsuppsättningen åtkomstkontroll och validering är aktiverat via frågor med hjälp av Frågesammansättning. För att styra enheten-baserad åtkomst måste implementera en metod-per-entitetsuppsättning enligt följande regler: metoden måste ha offentlig omfång och förses med QueryInterceptorAttribute, med namnet på en enhet som har angetts som en parameter.       Metoden måste acceptera några parametrar.       Metoden måste returnera ett uttryck av typen `Expression<Func<T, bool>>` som är filtret som ska ha för entiteten."
  example:
  - "The following example controls access to the `Customers` entity set. Each `Customer` can only see `Orders` associated with that `Customer`.  \n  \n```  \n[QueryInterceptor(\"Orders\")]  \npublic Expression<Func<Order, bool>> FilterOrders()   \n{  \n    return o => o.Customer.Name == /* Current principal name. */;  \n}   \n  \n// Insures that the user accessing the customer(s) has the appropriate  \n// rights as defined in the QueryRules object to access the customer  \n// resource(s).  \n  \n[QueryInterceptor (\"Customers\")]  \npublic Expression<Func<Customer, bool>> FilterCustomers()   \n{  \n  return c => c.Name == /* Current principal name. */ &&  \n              this.CurrentDataSource.QueryRules.Contains(  \n                rule => rule.Name == c.Name &&  \n                        rule.CustomerAllowedToQuery == true  \n              );  \n}  \n  \n```"
  syntax:
    content: >-
      [System.AttributeUsage(System.AttributeTargets.Method, AllowMultiple=true, Inherited=true)]

      public sealed class QueryInterceptorAttribute : Attribute
  inheritance:
  - System.Attribute
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Data.Services.QueryInterceptorAttribute.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: System.Data.Services.QueryInterceptorAttribute
  langs:
  - csharp
  name: QueryInterceptorAttribute(String)
  nameWithType: QueryInterceptorAttribute.QueryInterceptorAttribute(String)
  fullName: System.Data.Services.QueryInterceptorAttribute.QueryInterceptorAttribute(String)
  type: Constructor
  assemblies:
  - System.Data.Services
  namespace: System.Data.Services
  summary: "Initierar en ny instans av den <xref href=&quot;System.Data.Services.QueryInterceptorAttribute&quot;> </xref> klass för entiteten som anges av den <code> entitySetName </code> parameter."
  syntax:
    content: public QueryInterceptorAttribute (string entitySetName);
    parameters:
    - id: entitySetName
      type: System.String
      description: "Namnet på entitetsuppsättningen som innehåller entiteten som spärren gäller."
  overload: System.Data.Services.QueryInterceptorAttribute.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Services.QueryInterceptorAttribute.EntitySetName
  id: EntitySetName
  parent: System.Data.Services.QueryInterceptorAttribute
  langs:
  - csharp
  name: EntitySetName
  nameWithType: QueryInterceptorAttribute.EntitySetName
  fullName: System.Data.Services.QueryInterceptorAttribute.EntitySetName
  type: Property
  assemblies:
  - System.Data.Services
  namespace: System.Data.Services
  summary: "Hämtar namnet på entitetsuppsättningen som innehåller entiteten som spärren gäller."
  syntax:
    content: public string EntitySetName { get; }
    return:
      type: System.String
      description: "En sträng som anger namnet på entitetsuppsättningen som innehåller entiteten som spärren gäller."
  overload: System.Data.Services.QueryInterceptorAttribute.EntitySetName*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Attribute
  isExternal: false
  name: System.Attribute
- uid: System.Data.Services.QueryInterceptorAttribute.#ctor(System.String)
  parent: System.Data.Services.QueryInterceptorAttribute
  isExternal: false
  name: QueryInterceptorAttribute(String)
  nameWithType: QueryInterceptorAttribute.QueryInterceptorAttribute(String)
  fullName: System.Data.Services.QueryInterceptorAttribute.QueryInterceptorAttribute(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Data.Services.QueryInterceptorAttribute.EntitySetName
  parent: System.Data.Services.QueryInterceptorAttribute
  isExternal: false
  name: EntitySetName
  nameWithType: QueryInterceptorAttribute.EntitySetName
  fullName: System.Data.Services.QueryInterceptorAttribute.EntitySetName
- uid: System.Data.Services.QueryInterceptorAttribute.#ctor*
  parent: System.Data.Services.QueryInterceptorAttribute
  isExternal: false
  name: QueryInterceptorAttribute
  nameWithType: QueryInterceptorAttribute.QueryInterceptorAttribute
- uid: System.Data.Services.QueryInterceptorAttribute.EntitySetName*
  parent: System.Data.Services.QueryInterceptorAttribute
  isExternal: false
  name: EntitySetName
  nameWithType: QueryInterceptorAttribute.EntitySetName
